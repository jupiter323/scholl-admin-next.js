{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/LessonDetailAnswerSheet/components/Question/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport QuestionModal from \"../QuestionModal\";\nimport BubbleGroup from \"../Bubble\";\nimport FreeResponse from '../FreeResponse';\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const {\n        problem: {\n          id\n        }\n      } = this.props;\n      const {\n        originalTestProblemId\n      } = this.state;\n\n      if (id !== originalTestProblemId && this.props.problem.flag_status) {\n        const {\n          problem: {\n            flag_status\n          }\n        } = this.props;\n        this.setState({\n          status: flag_status,\n          originalTestProblemId: id\n        });\n      }\n    });\n\n    _defineProperty(this, \"onChangeFlagState\", status => {\n      this.setState({\n        status\n      });\n    });\n\n    _defineProperty(this, \"onOpenQuestionModal\", () => this.setState({\n      open: true\n    }));\n\n    _defineProperty(this, \"onCloseQuestionModal\", () => this.setState({\n      open: false\n    }));\n\n    _defineProperty(this, \"isFreeResponse\", () => {\n      if (this.props.problem.problem.answers.length === 0) return true;\n      return false;\n    });\n\n    this.state = {\n      open: false,\n      status: '',\n      originalTestProblemId: \"\"\n    };\n  }\n\n  render() {\n    const {\n      problem\n    } = this.props;\n    const {\n      open,\n      status\n    } = this.state;\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, __jsx(QuestionModal, {\n      open: open,\n      onOpenQuestionModal: this.onOpenQuestionModal,\n      onCloseQuestionModal: this.onCloseQuestionModal,\n      question: problem,\n      onChangeFlagState: this.onChangeFlagState,\n      updateProblemList: this.props.updateProblemList,\n      problemType: this.props.problemType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), __jsx(\"li\", {\n      className: \"answers-list-holder\",\n      key: problem.id,\n      style: {\n        marginRight: \"15px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"answer-row row mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col col-120\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, __jsx(\"ul\", {\n      className: \"answer-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.isFreeResponse() ? __jsx(FreeResponse, {\n      lesson: problem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }) : __jsx(BubbleGroup, {\n      lesson: problem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }))), __jsx(\"div\", {\n      className: \"col col-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"status-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"E\")), __jsx(\"div\", {\n      className: \"col col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, status === 'FLAGGED' ? __jsx(\"span\", {\n      className: \"status-answer\",\n      style: {\n        color: \"#c0272d\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"icon-flag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), __jsx(\"b\", {\n      className: \"status-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Review\")) : status === 'REVIEWED' ? __jsx(\"span\", {\n      className: \"status-answer status-disabled\",\n      style: {\n        color: \"#c0272d\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"icon-flag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), __jsx(\"b\", {\n      className: \"status-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Review\")) : null), __jsx(\"div\", {\n      className: \"dropdown-block col col-35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: \"modal-trigger\",\n      href: \"#\",\n      onClick: this.onOpenQuestionModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"material-icons dots-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"more_vert\"))))));\n  }\n\n}\n\nAnswerRow.propTypes = {\n  problem: PropTypes.object\n};\nexport default AnswerRow;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/LessonDetailAnswerSheet/components/Question/index.js"],"names":["React","PropTypes","QuestionModal","BubbleGroup","FreeResponse","AnswerRow","Component","constructor","props","problem","id","originalTestProblemId","state","flag_status","setState","status","open","answers","length","render","onOpenQuestionModal","onCloseQuestionModal","onChangeFlagState","updateProblemList","problemType","marginRight","isFreeResponse","color","propTypes","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport QuestionModal from \"../QuestionModal\";\nimport BubbleGroup from \"../Bubble\";\nimport FreeResponse from '../FreeResponse';\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      status: '',\n      originalTestProblemId: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    const { problem: { id } } = this.props;\n    const { originalTestProblemId } = this.state;\n    if (id !== originalTestProblemId && this.props.problem.flag_status) {\n      const { problem: { flag_status } } = this.props;\n      this.setState({\n        status: flag_status,\n        originalTestProblemId: id,\n      });\n    }\n  }\n  onChangeFlagState = (status) => {\n    this.setState({\n      status,\n    });\n  }\n\n  onOpenQuestionModal = () => this.setState({ open: true });\n  onCloseQuestionModal = () => this.setState({ open: false });\n\n  isFreeResponse = () => {\n    if (this.props.problem.problem.answers.length === 0) return true;\n    return false;\n  }\n\n\n  render() {\n    const { problem } = this.props;\n    const { open, status } = this.state;\n    return (\n      <React.Fragment>\n        <QuestionModal\n          open={open}\n          onOpenQuestionModal={this.onOpenQuestionModal}\n          onCloseQuestionModal={this.onCloseQuestionModal}\n          question={problem}\n          onChangeFlagState={this.onChangeFlagState}\n          updateProblemList={this.props.updateProblemList}\n          problemType={this.props.problemType}\n        />\n        <li\n          className=\"answers-list-holder\"\n          key={problem.id}\n          style={{ marginRight: \"15px\" }}\n        >\n          <div className=\"answer-row row mb-0\">\n            <div className=\"col col-120\">\n              <ul className=\"answer-list\">\n                {this.isFreeResponse() ? <FreeResponse lesson={problem} /> : <BubbleGroup lesson={problem} />}\n              </ul>\n            </div>\n            <div className=\"col col-30\">\n              <span className=\"status-info\">E</span>\n            </div>\n            <div className=\"col col-auto\">\n              <Choose>\n                <When condition={status === 'FLAGGED'}>\n                  <span className=\"status-answer\" style={{ color: \"#c0272d\" }}>\n                    <i className=\"icon-flag\"></i>\n                    <b className=\"status-text\">Review</b>\n                  </span>\n                </When>\n                <When condition={status === 'REVIEWED'}>\n                  <span className=\"status-answer status-disabled\" style={{ color: \"#c0272d\" }}>\n                    <i className=\"icon-flag\"></i>\n                    <b className=\"status-text\">Review</b>\n                  </span>\n                </When>\n              </Choose>\n            </div>\n            <div className=\"dropdown-block col col-35\">\n              <a className=\"modal-trigger\" href=\"#\" onClick={this.onOpenQuestionModal}>\n                <i className=\"material-icons dots-icon\">more_vert</i>\n              </a>\n            </div>\n          </div>\n        </li>\n      </React.Fragment>\n    );\n  }\n}\n\nAnswerRow.propTypes = {\n  problem: PropTypes.object,\n};\n\nexport default AnswerRow;\n"]},"metadata":{},"sourceType":"module"}