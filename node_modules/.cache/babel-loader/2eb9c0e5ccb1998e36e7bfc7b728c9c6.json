{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nvar _data = function data(current, target) {\n  return {\n    datasets: [{\n      data: [current, target],\n      backgroundColor: [getProblemCompletionStatusColor(current, target), '#eaeaea']\n    }]\n  };\n};\n\nvar getProblemCompletionStatusColor = function getProblemCompletionStatusColor(solvedProblems, totalProblems) {\n  if (solvedProblems / totalProblems <= .25) {\n    return {\n      backgroundColor: '#ed1c25'\n    };\n  } else if (solvedProblems / totalProblems <= .5) {\n    return {\n      backgroundColor: '#a005a5'\n    };\n  }\n\n  return {\n    backgroundColor: '#0200fd'\n  };\n}; // assigned ? 'card-main card-lesson-detail card-assigned card' : 'card-main card-lesson-detail card'}\n\n\nvar getLessonActivityStatus = function getLessonActivityStatus(assigned, dueDate) {\n  if (assigned && dueDate) {\n    return 'card-main card-lesson-detail card-assigned card';\n  }\n\n  if (!assigned && !dueDate) {\n    return 'card-main card-lesson-detail card-not-assigned card';\n  }\n\n  return 'card-main card-lesson-detail card';\n};\n\nvar LessonCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LessonCard, _React$Component);\n\n  function LessonCard(props) {\n    var _this;\n\n    _classCallCheck(this, LessonCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LessonCard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"renderLessonIcon\", function (subject) {\n      switch (subject) {\n        case 'Reading':\n          return 'icon-books';\n\n        case 'Writing':\n          return 'icon-hands';\n\n        case 'Math':\n          return 'icon-calculator';\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProblemCount\", function (assigned, totalProblems, solvedProblems) {\n      if (assigned) {\n        return React.createElement(\"span\", {\n          className: \"chart-value chart-value-column\",\n          style: getProblemCompletionStatusColor(solvedProblems, totalProblems)\n        }, React.createElement(\"span\", {\n          className: \"chart-count\",\n          \"data-count-up\": true,\n          \"data-start-val\": \"0\",\n          \"data-end-val\": \"4\",\n          \"data-duration\": \"1\"\n        }, React.createElement(\"span\", {\n          className: \"text-large\"\n        }, solvedProblems)), React.createElement(\"span\", {\n          className: \"text-small\"\n        }, \"out of\"), \" \", React.createElement(\"span\", {\n          className: \"text-large\"\n        }, totalProblems));\n      }\n\n      return React.createElement(\"span\", {\n        className: \"chart-value chart-value-column\",\n        style: {\n          backgroundColor: '#666'\n        }\n      }, React.createElement(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"0\",\n        \"data-end-val\": \"0\",\n        \"data-duration\": \"1\"\n      }, React.createElement(\"span\", {\n        className: \"text-large\"\n      }, totalProblems), React.createElement(\"span\", {\n        className: \"text-small\"\n      }, \"problems\")));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProblemCompletionStatus\", function (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) {\n      if (completed) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Completed \", React.createElement(\"time\", {\n          dateTime: \"2018-11-18T20:43\"\n        }, completionDate, \" at \", completionTime), completedLate && React.createElement(\"span\", {\n          className: \"status status-late\"\n        }, \" (late)\")));\n      }\n\n      if (availableDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Available \", React.createElement(\"time\", {\n          dateTime: \"2018-12-13\"\n        }, availableDate)), React.createElement(\"p\", null, React.createElement(\"time\", {\n          dateTime: \"2018-12-17\"\n        }, \"(due \", dueDate, \")\")));\n      }\n\n      if (overdue) {\n        return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n          className: \"text-large\",\n          style: {\n            color: '#c1272d'\n          }\n        }, \"Overdue\"));\n      }\n\n      if (!availableDate && dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Due \", React.createElement(\"time\", {\n          dateTime: \"2018-12-15\"\n        }, dueDate)));\n      }\n\n      if (!assigned && !dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Not Assigned\"));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n        className: \"text-large\",\n        style: {\n          color: '#006837'\n        }\n      }, \"Due Today at \", dueTime));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderAlerts\", function (alerts) {\n      if (alerts.length) {\n        return React.createElement(\"div\", {\n          className: \"right-col col s3\"\n        }, React.createElement(\"span\", {\n          className: \"badge-rounded badge red darken-2 white-text\"\n        }, React.createElement(\"b\", {\n          className: \"badge-text\"\n        }, alerts.length), \" \", React.createElement(\"i\", {\n          className: \"icon-flag\"\n        })));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"right-col col s3\"\n      }, \"\\xA0\");\n    });\n\n    _this.state = {\n      test: true\n    };\n    return _this;\n  } // eslint-disable-next-line consistent-return\n\n\n  _createClass(LessonCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props$lesson = this.props.lesson,\n          subject = _this$props$lesson.subject,\n          unitNumber = _this$props$lesson.unitNumber,\n          lessonName = _this$props$lesson.lessonName,\n          assigned = _this$props$lesson.assigned,\n          alerts = _this$props$lesson.alerts,\n          lessonType = _this$props$lesson.lessonType,\n          totalProblems = _this$props$lesson.totalProblems,\n          _this$props$lesson$so = _this$props$lesson.solvedProblems,\n          solvedProblems = _this$props$lesson$so === void 0 ? '' : _this$props$lesson$so,\n          passage = _this$props$lesson.passage,\n          dueDate = _this$props$lesson.dueDate,\n          dueTime = _this$props$lesson.dueTime,\n          completed = _this$props$lesson.completed,\n          availableDate = _this$props$lesson.availableDate,\n          completionDate = _this$props$lesson.completionDate,\n          completionTime = _this$props$lesson.completionTime,\n          completedLate = _this$props$lesson.completedLate,\n          overdue = _this$props$lesson.overdue;\n      return React.createElement(\"div\", {\n        className: \"card-main-col col s12 m8 l7 xl5\"\n      }, React.createElement(\"div\", {\n        className: getLessonActivityStatus(assigned, dueDate)\n      }, React.createElement(\"div\", {\n        className: \"card-panel\",\n        style: {\n          backgroundColor: '#666',\n          color: '#fff'\n        }\n      }, React.createElement(\"div\", {\n        className: \"card-panel-row row\"\n      }, React.createElement(\"div\", {\n        className: \"icon-col col s1\"\n      }, React.createElement(\"i\", {\n        className: this.renderLessonIcon(subject)\n      })), React.createElement(\"div\", {\n        className: \"col s9\"\n      }, React.createElement(\"div\", {\n        className: \"card-panel-text center-align\"\n      }, React.createElement(\"div\", {\n        className: \"text-small\"\n      }, subject, \" Unit \", unitNumber), React.createElement(\"div\", {\n        className: \"text-large\"\n      }, lessonName))), React.createElement(\"div\", {\n        className: \"col s1 right-align\"\n      }, React.createElement(\"div\", {\n        className: \"row icons-row\"\n      }, React.createElement(\"div\", {\n        className: \"dropdown-block col\"\n      }, React.createElement(\"a\", {\n        className: \"dropdown-trigger btn\",\n        href: \"#\",\n        \"data-target\": \"dropdown01\"\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), React.createElement(\"ul\", {\n        id: \"dropdown01\",\n        className: \"dropdown-content dropdown-wide\"\n      }, React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#modal_user_edit\",\n        className: \"modal-trigger link-block\"\n      }, \"Edit\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\"\n      }, \"Clone\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\"\n      }, \"Show Owner\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\"\n      }, \"Delete\")))))))), React.createElement(\"div\", {\n        className: \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"card-top-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"left-col col s3\"\n      }, React.createElement(\"span\", {\n        className: \"meta-num\"\n      }, \"p.\", passage)), React.createElement(\"div\", {\n        className: \"center-col col s6 center-align\"\n      }, React.createElement(\"span\", {\n        className: \"meta-name\"\n      }, \"(\", lessonType, \")\")), this.renderAlerts(alerts)), React.createElement(\"div\", {\n        className: \"chart-container chart-container-xlarge\"\n      }, React.createElement(\"div\", {\n        className: \"chart-holder\"\n      }, React.createElement(Doughnut, {\n        data: function data() {\n          return _data(solvedProblems, totalProblems);\n        },\n        height: 210,\n        options: {\n          circumference: 1.45 * Math.PI,\n          rotation: -3.85,\n          cutoutPercentage: 60,\n          tooltips: false\n        }\n      }), this.renderProblemCount(assigned, totalProblems, solvedProblems))), React.createElement(\"div\", {\n        className: \"card-footer-row center-align\"\n      }, React.createElement(\"div\", {\n        className: \"card-footer-holder\"\n      }, this.renderProblemCompletionStatus(dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned))))));\n    }\n  }]);\n\n  return LessonCard;\n}(React.Component);\n\nLessonCard.propTypes = {\n  lesson: PropTypes.object.isRequired\n};\nexport default LessonCard;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailLessonList\\components\\LessonCard\\index.js"],"names":["React","PropTypes","Doughnut","data","current","target","datasets","backgroundColor","getProblemCompletionStatusColor","solvedProblems","totalProblems","getLessonActivityStatus","assigned","dueDate","LessonCard","props","subject","dueTime","completed","completionDate","completionTime","completedLate","availableDate","overdue","color","alerts","length","state","test","lesson","unitNumber","lessonName","lessonType","passage","renderLessonIcon","renderAlerts","circumference","Math","PI","rotation","cutoutPercentage","tooltips","renderProblemCount","renderProblemCompletionStatus","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst data = (current, target) => ({\n  datasets: [{\n    data: [current, target ],\n    backgroundColor: [\n      getProblemCompletionStatusColor(current, target),\n      '#eaeaea',\n    ],\n  }],\n})\n\nconst getProblemCompletionStatusColor = (solvedProblems, totalProblems) => {\n  if (solvedProblems / totalProblems <= .25) {\n    return { backgroundColor: '#ed1c25' };\n  } else if (solvedProblems / totalProblems <= .5) {\n    return { backgroundColor: '#a005a5' };\n  }\n  return { backgroundColor: '#0200fd' };\n}\n\n// assigned ? 'card-main card-lesson-detail card-assigned card' : 'card-main card-lesson-detail card'}\n\nconst getLessonActivityStatus = (assigned, dueDate) => {\n  if (assigned && dueDate) {\n    return 'card-main card-lesson-detail card-assigned card';\n  }\n  if (!assigned && !dueDate) {\n    return 'card-main card-lesson-detail card-not-assigned card';\n  }\n  return 'card-main card-lesson-detail card';\n}\n\nclass LessonCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: true,\n    };\n  }\n\n  // eslint-disable-next-line consistent-return\n  renderLessonIcon = (subject) => {\n    switch (subject) {\n      case 'Reading':\n        return 'icon-books';\n      case 'Writing':\n        return 'icon-hands';\n      case 'Math':\n        return 'icon-calculator';\n      default:\n        break;\n    }\n  }\n\n  renderProblemCount = (assigned, totalProblems, solvedProblems) => {\n    if (assigned) {\n      return (\n        <span className=\"chart-value chart-value-column\" style={getProblemCompletionStatusColor(solvedProblems, totalProblems)}>\n          <span className=\"chart-count\" data-count-up data-start-val=\"0\" data-end-val=\"4\" data-duration=\"1\"><span className=\"text-large\">{solvedProblems}</span></span>\n          <span className=\"text-small\">out of</span> <span className=\"text-large\">{totalProblems}</span>\n        </span>\n      )\n    }\n    return (\n      <span className=\"chart-value chart-value-column\" style={{ backgroundColor: '#666' }}>\n        <span data-count-up data-start-val=\"0\" data-end-val=\"0\" data-duration=\"1\">\n          <span className=\"text-large\">{totalProblems}</span>\n          <span className=\"text-small\">problems</span>\n        </span>\n      </span>\n    )\n  }\n\n  renderProblemCompletionStatus = (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) => {\n    if (completed) {\n      return (\n        <React.Fragment>\n          <p>Completed <time dateTime=\"2018-11-18T20:43\">{completionDate} at {completionTime}</time>\n            {completedLate && (<span className=\"status status-late\"> (late)</span>)}\n          </p>\n        </React.Fragment>\n      )\n    }\n    if (availableDate) {\n      return (\n        <React.Fragment>\n          <p>Available <time dateTime=\"2018-12-13\">{availableDate}</time></p>\n          <p><time dateTime=\"2018-12-17\">(due {dueDate})</time></p>\n        </React.Fragment>\n      )\n    }\n    if (overdue) {\n      return (\n        <React.Fragment>\n          <strong className=\"text-large\" style={{ color: '#c1272d' }}>Overdue</strong>\n        </React.Fragment>\n      )\n    }\n    if (!availableDate && dueDate) {\n      return (\n        <React.Fragment>\n          <p>Due <time dateTime=\"2018-12-15\">{dueDate}</time></p>\n        </React.Fragment>\n      )\n    }\n    if (!assigned && !dueDate) {\n      return (\n        <React.Fragment>\n          <p>Not Assigned</p>\n        </React.Fragment>\n      )\n    }\n    return (\n      <React.Fragment>\n        <strong className=\"text-large\" style={{ color: '#006837' }}>Due Today at {dueTime}</strong>\n      </React.Fragment>\n    )\n  }\n\n  renderAlerts = (alerts) => {\n    if (alerts.length) {\n      return (\n        <div className=\"right-col col s3\">\n          <span className=\"badge-rounded badge red darken-2 white-text\"><b className=\"badge-text\">{alerts.length}</b> <i className=\"icon-flag\"></i></span>\n        </div>\n      )\n    }\n    return (\n      <div className=\"right-col col s3\">&nbsp;</div>\n    )\n  }\n\n  render() {\n    const { lesson: { subject, unitNumber, lessonName, assigned, alerts,\n      lessonType, totalProblems, solvedProblems = '', passage, dueDate, dueTime,\n      completed, availableDate, completionDate, completionTime, completedLate, overdue } } = this.props;\n    return (\n      <div className=\"card-main-col col s12 m8 l7 xl5\">\n       <div className={getLessonActivityStatus(assigned, dueDate)}>\n         <div className=\"card-panel\" style={{ backgroundColor: '#666', color: '#fff' }}>\n           <div className=\"card-panel-row row\">\n             <div className=\"icon-col col s1\">\n               <i className={this.renderLessonIcon(subject)}></i>\n             </div>\n             <div className=\"col s9\">\n               <div className=\"card-panel-text center-align\">\n                 <div className=\"text-small\">{subject} Unit {unitNumber}</div>\n                 <div className=\"text-large\">{lessonName}</div>\n               </div>\n             </div>\n             <div className=\"col s1 right-align\">\n               <div className=\"row icons-row\">\n                 <div className=\"dropdown-block col\">\n                   {/* <!-- Dropdown Trigger --> */}\n                   <a className='dropdown-trigger btn' href='#' data-target='dropdown01'><i className=\"material-icons dots-icon\">more_vert</i></a>\n                   {/* <!-- Dropdown Structure --> */}\n                   <ul id='dropdown01' className='dropdown-content dropdown-wide'>\n                     <li>\n                       {/* <!-- Modal Trigger --> */}\n                       <a href=\"#modal_user_edit\" className=\"modal-trigger link-block\">Edit</a>\n                     </li>\n                     <li><a href=\"#!\">Clone</a></li>\n                     <li><a href=\"#!\">Show Owner</a></li>\n                     <li><a href=\"#!\">Delete</a></li>\n                   </ul>\n                 </div>\n               </div>\n             </div>\n           </div>\n         </div>\n         <div className=\"card-content\">\n           <div className=\"card-top-row row mb-0\">\n             <div className=\"left-col col s3\">\n               <span className=\"meta-num\">p.{passage}</span>\n             </div>\n             <div className=\"center-col col s6 center-align\">\n               <span className=\"meta-name\">({lessonType})</span>\n             </div>\n             {this.renderAlerts(alerts)}\n           </div>\n           <div className=\"chart-container chart-container-xlarge\">\n             <div className=\"chart-holder\">\n               <Doughnut\n               data={() => data(solvedProblems, totalProblems)}\n               height={210}\n               options={{\n                 circumference: 1.45 * Math.PI,\n                 rotation: -3.85,\n                 cutoutPercentage: 60,\n                 tooltips: false,\n               }}\n               />\n               {/* <span className=\"svg-curved-bar\" data-values='{\"from\": 0, \"to\": 0, \"current\": 0}' data-duration=\"1\">\n                 <svg  width=\"207px\" height=\"207px\" viewBox=\"0 0 207 207\" preserveAspectRatio=\"xMidYMid meet\">\n                   <path fill=\"none\" style={{ strokeWidth: '42', stroke: '#eaeaea' }} d=\"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 1 1 180.09035447382598 134.16215259197702\"></path>\n                   <path data-dinamic fill=\"none\" style={{ strokeWidth: '42', stroke: '#62b771' }} d=\"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 0 1 26.909645526174018 134.16215259197702\"></path>\n                 </svg>\n               </span> */}\n               {this.renderProblemCount(assigned, totalProblems, solvedProblems)}\n             </div>\n           </div>\n           <div className=\"card-footer-row center-align\">\n             <div className=\"card-footer-holder\">\n               {this.renderProblemCompletionStatus(dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned)}\n             </div>\n           </div>\n         </div>\n       </div>\n      </div>\n    );\n  }\n}\n\nLessonCard.propTypes = {\n  lesson: PropTypes.object.isRequired,\n};\n\nexport default LessonCard;\n"]},"metadata":{},"sourceType":"module"}