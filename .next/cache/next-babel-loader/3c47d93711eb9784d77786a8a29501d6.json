{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getProblemCompletionStatusColor, getLessonActivityStatus } from '../../utils';\n\nclass LessonCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleDropdownClick\", event => {\n      const {\n        onSetDropdown,\n        onCloseDropdown,\n        dropdownIsOpen,\n        index\n      } = this.props;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    _defineProperty(this, \"renderLessonIcon\", subject => {\n      switch (subject) {\n        case 'Reading':\n          return 'icon-books';\n\n        case 'Writing':\n          return 'icon-hands';\n\n        case 'Math':\n          return 'icon-calculator';\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"renderProblemCount\", (assigned, totalProblems, solvedProblems) => {\n      if (assigned) {\n        return React.createElement(\"span\", {\n          className: \"chart-value chart-value-column\",\n          style: getProblemCompletionStatusColor(solvedProblems, totalProblems)\n        }, React.createElement(\"span\", {\n          className: \"chart-count\",\n          \"data-count-up\": true,\n          \"data-start-val\": \"0\",\n          \"data-end-val\": \"4\",\n          \"data-duration\": \"1\"\n        }, React.createElement(\"span\", {\n          className: \"text-large\"\n        }, solvedProblems)), React.createElement(\"span\", {\n          className: \"text-small\"\n        }, \"out of\"), \" \", React.createElement(\"span\", {\n          className: \"text-large\"\n        }, totalProblems));\n      }\n\n      return React.createElement(\"span\", {\n        className: \"chart-value chart-value-column\",\n        style: {\n          backgroundColor: '#666'\n        }\n      }, React.createElement(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"0\",\n        \"data-end-val\": \"0\",\n        \"data-duration\": \"1\"\n      }, React.createElement(\"span\", {\n        className: \"text-large\"\n      }, totalProblems), React.createElement(\"span\", {\n        className: \"text-small\"\n      }, \"problems\")));\n    });\n\n    _defineProperty(this, \"renderProblemCompletionStatus\", (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) => {\n      if (completed) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Completed \", React.createElement(\"time\", {\n          dateTime: \"2018-11-18T20:43\"\n        }, completionDate, \" at \", completionTime), completedLate && React.createElement(\"span\", {\n          className: \"status status-late\"\n        }, \" (late)\")));\n      }\n\n      if (availableDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Available \", React.createElement(\"time\", {\n          dateTime: \"2018-12-13\"\n        }, availableDate)), React.createElement(\"p\", null, React.createElement(\"time\", {\n          dateTime: \"2018-12-17\"\n        }, \"(due \", dueDate, \")\")));\n      }\n\n      if (overdue) {\n        return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n          className: \"text-large\",\n          style: {\n            color: '#c1272d'\n          }\n        }, \"Overdue\"));\n      }\n\n      if (!availableDate && dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Due \", React.createElement(\"time\", {\n          dateTime: \"2018-12-15\"\n        }, dueDate)));\n      }\n\n      if (!assigned && !dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Not Assigned\"));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n        className: \"text-large\",\n        style: {\n          color: '#006837'\n        }\n      }, \"Due Today at \", dueTime));\n    });\n\n    _defineProperty(this, \"renderAlerts\", alerts => {\n      if (alerts.length) {\n        return React.createElement(\"div\", {\n          className: \"right-col col s3\"\n        }, React.createElement(\"span\", {\n          className: \"badge-rounded badge red darken-2 white-text\"\n        }, React.createElement(\"b\", {\n          className: \"badge-text\"\n        }, alerts.length), \" \", React.createElement(\"i\", {\n          className: \"icon-flag\"\n        })));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"right-col col s3\"\n      }, \"\\xA0\");\n    });\n  }\n\n  render() {\n    const {\n      lesson: {\n        subject,\n        unitNumber,\n        lessonName,\n        assigned,\n        alerts,\n        lessonType,\n        totalProblems,\n        solvedProblems = '',\n        passage,\n        dueDate,\n        dueTime,\n        completed,\n        availableDate,\n        completionDate,\n        completionTime,\n        completedLate,\n        overdue\n      },\n      dropdownIsOpen,\n      dropdownIndex,\n      onToggleDetailModalOpen,\n      index\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"card-main-col col s12 m8 l7 xl5\"\n    }, React.createElement(\"div\", {\n      className: getLessonActivityStatus(assigned, dueDate)\n    }, React.createElement(\"div\", {\n      className: \"card-panel\",\n      style: {\n        backgroundColor: '#666',\n        color: '#fff'\n      }\n    }, React.createElement(\"div\", {\n      className: \"card-panel-row row\"\n    }, React.createElement(\"div\", {\n      className: \"icon-col col s1\"\n    }, React.createElement(\"i\", {\n      className: this.renderLessonIcon(subject)\n    })), React.createElement(\"div\", {\n      className: \"col s9\"\n    }, React.createElement(\"div\", {\n      className: \"card-panel-text center-align\"\n    }, React.createElement(\"div\", {\n      className: \"text-small\"\n    }, subject, \" Unit \", unitNumber), React.createElement(\"div\", {\n      className: \"text-large\"\n    }, lessonName))), React.createElement(\"div\", {\n      className: \"col s1 right-align\"\n    }, React.createElement(\"div\", {\n      className: \"row icons-row\"\n    }, React.createElement(\"div\", {\n      className: \"dropdown-block col\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      \"data-target\": \"dropdown01\",\n      className: \"dropdown-trigger btn\",\n      onClick: this.handleDropdownClick\n    }, React.createElement(\"i\", {\n      className: \"material-icons dots-icon\"\n    }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? React.createElement(\"ul\", {\n      id: \"dropdown01\",\n      className: \"dropdown-content dropdown-wide\",\n      style: {\n        display: 'block',\n        transformOrigin: '0px 0px 0px',\n        opacity: '1',\n        transform: 'scaleX(1) scaleY(1)'\n      }\n    }, React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\",\n      onClick: () => onToggleDetailModalOpen(index),\n      className: \"modal-trigger link-block\"\n    }, \"Edit\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"Clone\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"Show Owner\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"Delete\"))) : null))))), React.createElement(\"div\", {\n      className: \"card-content\"\n    }, React.createElement(\"div\", {\n      className: \"card-top-row row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"left-col col s3\"\n    }, React.createElement(\"span\", {\n      className: \"meta-num\"\n    }, \"p.\", passage)), React.createElement(\"div\", {\n      className: \"center-col col s6 center-align\"\n    }, React.createElement(\"span\", {\n      className: \"meta-name\"\n    }, \"(\", lessonType, \")\")), this.renderAlerts(alerts)), React.createElement(\"div\", {\n      className: \"chart-container chart-container-xlarge\"\n    }, React.createElement(\"div\", {\n      className: \"chart-holder\"\n    }, React.createElement(\"span\", {\n      className: \"svg-curved-bar\",\n      \"data-values\": \"{\\\"from\\\": 0, \\\"to\\\": 0, \\\"current\\\": 0}\",\n      \"data-duration\": \"1\"\n    }, React.createElement(\"svg\", {\n      width: \"207px\",\n      height: \"207px\",\n      viewBox: \"0 0 207 207\",\n      preserveAspectRatio: \"xMidYMid meet\"\n    }, React.createElement(\"path\", {\n      fill: \"none\",\n      style: {\n        strokeWidth: '42',\n        stroke: '#eaeaea'\n      },\n      d: \"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 1 1 180.09035447382598 134.16215259197702\"\n    }), React.createElement(\"path\", {\n      \"data-dinamic\": true,\n      fill: \"none\",\n      style: {\n        strokeWidth: '42',\n        stroke: '#62b771'\n      },\n      d: \"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 0 1 26.909645526174018 134.16215259197702\"\n    }))), this.renderProblemCount(assigned, totalProblems, solvedProblems))), React.createElement(\"div\", {\n      className: \"card-footer-row center-align\"\n    }, React.createElement(\"div\", {\n      className: \"card-footer-holder\"\n    }, this.renderProblemCompletionStatus(dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned))))));\n  }\n\n}\n\nLessonCard.propTypes = {\n  dropdownIndex: PropTypes.number,\n  index: PropTypes.number.isRequired,\n  lesson: PropTypes.object.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onToggleDetailModalOpen: PropTypes.func.isRequired\n};\nexport default LessonCard;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/DetailLessonList/components/LessonCard/index.js"],"names":["React","PropTypes","getProblemCompletionStatusColor","getLessonActivityStatus","LessonCard","Component","event","onSetDropdown","onCloseDropdown","dropdownIsOpen","index","props","preventDefault","subject","assigned","totalProblems","solvedProblems","backgroundColor","dueTime","completed","completionDate","completionTime","completedLate","availableDate","dueDate","overdue","color","alerts","length","render","lesson","unitNumber","lessonName","lessonType","passage","dropdownIndex","onToggleDetailModalOpen","renderLessonIcon","handleDropdownClick","display","transformOrigin","opacity","transform","renderAlerts","strokeWidth","stroke","renderProblemCount","renderProblemCompletionStatus","propTypes","number","isRequired","object","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getProblemCompletionStatusColor, getLessonActivityStatus } from '../../utils';\n\nclass LessonCard extends React.Component {\n  handleDropdownClick = (event) => {\n    const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  }\n\n  // eslint-disable-next-line consistent-return\n  renderLessonIcon = (subject) => {\n    switch (subject) {\n      case 'Reading':\n        return 'icon-books';\n      case 'Writing':\n        return 'icon-hands';\n      case 'Math':\n        return 'icon-calculator';\n      default:\n        break;\n    }\n  }\n\n  renderProblemCount = (assigned, totalProblems, solvedProblems) => {\n    if (assigned) {\n      return (\n        <span className=\"chart-value chart-value-column\" style={getProblemCompletionStatusColor(solvedProblems, totalProblems)}>\n          <span className=\"chart-count\" data-count-up data-start-val=\"0\" data-end-val=\"4\" data-duration=\"1\"><span className=\"text-large\">{solvedProblems}</span></span>\n          <span className=\"text-small\">out of</span> <span className=\"text-large\">{totalProblems}</span>\n        </span>\n      )\n    }\n    return (\n      <span className=\"chart-value chart-value-column\" style={{ backgroundColor: '#666' }}>\n        <span data-count-up data-start-val=\"0\" data-end-val=\"0\" data-duration=\"1\">\n          <span className=\"text-large\">{totalProblems}</span>\n          <span className=\"text-small\">problems</span>\n        </span>\n      </span>\n    )\n  }\n\n  renderProblemCompletionStatus = (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) => {\n    if (completed) {\n      return (\n        <React.Fragment>\n          <p>Completed <time dateTime=\"2018-11-18T20:43\">{completionDate} at {completionTime}</time>\n            {completedLate && (<span className=\"status status-late\"> (late)</span>)}\n          </p>\n        </React.Fragment>\n      )\n    }\n    if (availableDate) {\n      return (\n        <React.Fragment>\n          <p>Available <time dateTime=\"2018-12-13\">{availableDate}</time></p>\n          <p><time dateTime=\"2018-12-17\">(due {dueDate})</time></p>\n        </React.Fragment>\n      )\n    }\n    if (overdue) {\n      return (\n        <React.Fragment>\n          <strong className=\"text-large\" style={{ color: '#c1272d' }}>Overdue</strong>\n        </React.Fragment>\n      )\n    }\n    if (!availableDate && dueDate) {\n      return (\n        <React.Fragment>\n          <p>Due <time dateTime=\"2018-12-15\">{dueDate}</time></p>\n        </React.Fragment>\n      )\n    }\n    if (!assigned && !dueDate) {\n      return (\n        <React.Fragment>\n          <p>Not Assigned</p>\n        </React.Fragment>\n      )\n    }\n    return (\n      <React.Fragment>\n        <strong className=\"text-large\" style={{ color: '#006837' }}>Due Today at {dueTime}</strong>\n      </React.Fragment>\n    )\n  }\n\n  renderAlerts = (alerts) => {\n    if (alerts.length) {\n      return (\n        <div className=\"right-col col s3\">\n          <span className=\"badge-rounded badge red darken-2 white-text\"><b className=\"badge-text\">{alerts.length}</b> <i className=\"icon-flag\"></i></span>\n        </div>\n      )\n    }\n    return (\n      <div className=\"right-col col s3\">&nbsp;</div>\n    )\n  }\n\n  render() {\n    const { lesson: { subject, unitNumber, lessonName, assigned, alerts, lessonType,\n      totalProblems, solvedProblems = '', passage, dueDate, dueTime, completed, availableDate,\n      completionDate, completionTime, completedLate, overdue }, dropdownIsOpen, dropdownIndex,\n      onToggleDetailModalOpen, index } = this.props;\n    return (\n      <div className=\"card-main-col col s12 m8 l7 xl5\">\n       <div className={getLessonActivityStatus(assigned, dueDate)}>\n         <div className=\"card-panel\" style={{ backgroundColor: '#666', color: '#fff' }}>\n           <div className=\"card-panel-row row\">\n             <div className=\"icon-col col s1\">\n               <i className={this.renderLessonIcon(subject)}></i>\n             </div>\n             <div className=\"col s9\">\n               <div className=\"card-panel-text center-align\">\n                 <div className=\"text-small\">{subject} Unit {unitNumber}</div>\n                 <div className=\"text-large\">{lessonName}</div>\n               </div>\n             </div>\n             <div className=\"col s1 right-align\">\n               <div className=\"row icons-row\">\n                 <div className=\"dropdown-block col\">\n                   <a\n                     href='#'\n                     data-target='dropdown01'\n                     className='dropdown-trigger btn'\n                     onClick={this.handleDropdownClick}\n                   >\n                    <i className=\"material-icons dots-icon\">more_vert</i>\n                   </a>\n                   <If condition={dropdownIsOpen && dropdownIndex === index}>\n                     <ul\n                       id='dropdown01'\n                       className='dropdown-content dropdown-wide'\n                       style={{ display: 'block', transformOrigin: '0px 0px 0px', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}\n                     >\n                       <li>\n                         <a href=\"#\" onClick={() => onToggleDetailModalOpen(index)} className=\"modal-trigger link-block\">Edit</a>\n                       </li>\n                       <li><a href=\"#\">Clone</a></li>\n                       <li><a href=\"#\">Show Owner</a></li>\n                       <li><a href=\"#\">Delete</a></li>\n                     </ul>\n                   </If>\n                 </div>\n               </div>\n             </div>\n           </div>\n         </div>\n         <div className=\"card-content\">\n           <div className=\"card-top-row row mb-0\">\n             <div className=\"left-col col s3\">\n               <span className=\"meta-num\">p.{passage}</span>\n             </div>\n             <div className=\"center-col col s6 center-align\">\n               <span className=\"meta-name\">({lessonType})</span>\n             </div>\n             {this.renderAlerts(alerts)}\n           </div>\n           <div className=\"chart-container chart-container-xlarge\">\n             <div className=\"chart-holder\">\n               <span className=\"svg-curved-bar\" data-values='{\"from\": 0, \"to\": 0, \"current\": 0}' data-duration=\"1\">\n                 <svg  width=\"207px\" height=\"207px\" viewBox=\"0 0 207 207\" preserveAspectRatio=\"xMidYMid meet\">\n                   <path fill=\"none\" style={{ strokeWidth: '42', stroke: '#eaeaea' }} d=\"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 1 1 180.09035447382598 134.16215259197702\"></path>\n                   <path data-dinamic fill=\"none\" style={{ strokeWidth: '42', stroke: '#62b771' }} d=\"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 0 1 26.909645526174018 134.16215259197702\"></path>\n                 </svg>\n               </span>\n               {this.renderProblemCount(assigned, totalProblems, solvedProblems)}\n             </div>\n           </div>\n           <div className=\"card-footer-row center-align\">\n             <div className=\"card-footer-holder\">\n               {this.renderProblemCompletionStatus(dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned)}\n             </div>\n           </div>\n         </div>\n       </div>\n      </div>\n    );\n  }\n}\n\nLessonCard.propTypes = {\n  dropdownIndex: PropTypes.number,\n  index: PropTypes.number.isRequired,\n  lesson: PropTypes.object.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onToggleDetailModalOpen: PropTypes.func.isRequired,\n};\n\nexport default LessonCard;\n"]},"metadata":{},"sourceType":"module"}