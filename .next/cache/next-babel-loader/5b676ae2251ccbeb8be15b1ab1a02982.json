{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2'; // import { data, subjectMap, testSectionCardColorMap, graphColorMap } from '../../../utils/testSectionCardUtils';\n\nvar _data = function data(percentage) {\n  return {\n    datasets: [{\n      data: [percentage, 100 - percentage],\n      backgroundColor: ['#00bbf7', '#eaeaea']\n    }]\n  };\n};\n\nexport { _data as data };\n\nvar TestCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TestCard, _React$Component);\n\n  function TestCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TestCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TestCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDropdownClick\", function (event) {\n      var _this$props = _this.props,\n          onSetDropdown = _this$props.onSetDropdown,\n          onCloseDropdown = _this$props.onCloseDropdown,\n          dropdownIsOpen = _this$props.dropdownIsOpen,\n          index = _this$props.index;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapTestSubjects\", function () {\n      var _this$props2 = _this.props,\n          test = _this$props2.test,\n          futureTest = _this$props2.futureTest;\n      var subjects = test.subjects;\n      return subjects.map(function (subject, index) {\n        return __jsx(\"div\", {\n          className: \"chart-block chart-block-test\",\n          key: index\n        }, !futureTest ? [__jsx(Doughnut, {\n          data: function data() {\n            return _data(subjects.length ? subject.currentScore / subject.targetScore * 100 : 0);\n          },\n          height: 104,\n          width: 104,\n          options: {\n            cutoutPercentage: 80\n          },\n          key: \"0\"\n        }), __jsx(\"span\", {\n          className: \"value-max\",\n          style: {\n            top: '0px'\n          },\n          key: \"1\"\n        }, subject.targetScore)] : [__jsx(\"span\", {\n          className: \"value-max\",\n          key: \"0\"\n        }, subject.targetScore), __jsx(\"div\", {\n          className: \"js-donut-chart\",\n          \"data-stroke-width\": \"15\",\n          \"data-source\": \"./inc/score-data-test-reading.json\",\n          key: \"1\"\n        })], __jsx(\"div\", {\n          className: \"chart-text\"\n        }, subject.subject === 'Reading & Writing' && !futureTest ? __jsx(\"span\", {\n          className: \"title\"\n        }, \"Reading \", __jsx(\"br\", null), \" & Writing\") : __jsx(\"span\", {\n          className: \"title\"\n        }, subject.subject), __jsx(\"span\", {\n          className: \"value\"\n        }, subject.currentScore), __jsx(\"span\", {\n          className: \"description\"\n        }, \"+\", subject.totalGain)));\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(TestCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          test = _this$props3.test,\n          _this$props3$futureTe = _this$props3.futureTest,\n          futureTest = _this$props3$futureTe === void 0 ? false : _this$props3$futureTe,\n          dropdownIndex = _this$props3.dropdownIndex,\n          index = _this$props3.index,\n          dropdownIsOpen = _this$props3.dropdownIsOpen,\n          onEnterAnswers = _this$props3.onEnterAnswers,\n          onEditTest = _this$props3.onEditTest,\n          onDownloadReport = _this$props3.onDownloadReport,\n          onDeleteTest = _this$props3.onDeleteTest,\n          openTestScores = _this$props3.openTestScores;\n      var title = test.title,\n          _test$version = test.version,\n          version = _test$version === void 0 ? '' : _test$version,\n          testDate = test.testDate,\n          weekNumber = test.weekNumber,\n          initialScore = test.initialScore,\n          targetScore = test.targetScore,\n          currentScore = test.currentScore;\n      return __jsx(\"div\", {\n        className: \"col s12 m8 l7 xl5\"\n      }, __jsx(\"div\", {\n        className: \"card-main-col\"\n      }, __jsx(\"div\", {\n        className: futureTest ? 'card-test card-main card-disabled card' : 'card-test card-main card'\n      }, __jsx(\"div\", {\n        className: \"card-content\"\n      }, __jsx(\"div\", {\n        className: \" card-panel-row row mb-0\"\n      }, __jsx(\"div\", {\n        className: \"col s7\"\n      }, __jsx(\"div\", {\n        className: \"card-title-block\",\n        style: {\n          marginTop: !futureTest ? '-30px' : '-50px'\n        }\n      }, __jsx(\"h4\", {\n        className: \"h2\"\n      }, __jsx(\"a\", {\n        href: \"#\",\n        onClick: function onClick() {\n          return openTestScores({\n            index: index\n          });\n        }\n      }, title)), __jsx(\"time\", {\n        className: \"date\",\n        style: {\n          marginBottom: futureTest ? '20px' : ''\n        }\n      }, testDate, \" (week \", weekNumber, \")\"), !futureTest ? __jsx(\"p\", null, \"Version \", version) : null), __jsx(\"div\", {\n        className: \"chart-container chart-container-test\"\n      }, __jsx(\"div\", {\n        className: \"chart-holder\"\n      }, __jsx(\"span\", {\n        className: \"svg-curved-bar\"\n      }, __jsx(Doughnut, {\n        data: function data() {\n          return _data(initialScore ? Number((currentScore - initialScore) / (targetScore - initialScore)) * 100 : 0);\n        },\n        options: {\n          circumference: 1 * Math.PI,\n          rotation: 1 * Math.PI,\n          cutoutPercentage: 60,\n          tooltips: false\n        }\n      }), __jsx(\"span\", {\n        className: \"js-diff-holder\"\n      }, __jsx(\"span\", {\n        className: \"js-diff\"\n      }, __jsx(\"span\", {\n        className: \"txt\",\n        style: {\n          opacity: '1',\n          bottom: '75px',\n          color: 'black',\n          fontWeight: '600',\n          fontSize: '12px'\n        }\n      }, \"+\", currentScore - initialScore)))), __jsx(\"span\", {\n        className: \"chart-value\",\n        style: {\n          backgroundColor: '#00bbf7'\n        }\n      }, __jsx(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"1100\",\n        \"data-end-val\": \"1210\",\n        \"data-duration\": \"1\"\n      }, currentScore))), __jsx(\"div\", {\n        className: \"chart-row\"\n      }, __jsx(\"div\", {\n        className: \"chart-col chart-start\"\n      }, __jsx(\"span\", {\n        className: \"amount\"\n      }, initialScore), \" \", __jsx(\"br\", null), __jsx(\"span\", {\n        className: \"amount-text\"\n      }, \"initial\")), __jsx(\"div\", {\n        className: \"chart-col chart-end\"\n      }, __jsx(\"span\", {\n        className: \"amount\"\n      }, targetScore), \" \", __jsx(\"br\", null), __jsx(\"span\", {\n        className: \"amount-text\"\n      }, \"target\"))))), __jsx(\"div\", {\n        className: \"col s5 right-align\"\n      }, __jsx(\"div\", {\n        className: \"row icons-row\",\n        style: {\n          marginBottom: '10px'\n        }\n      }, __jsx(\"div\", {\n        className: \"dropdown-block col\"\n      }, __jsx(\"a\", {\n        href: \"#\",\n        \"data-target\": \"dropdown01\",\n        className: \"dropdown-trigger btn\",\n        onClick: this.handleDropdownClick\n      }, __jsx(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? __jsx(\"ul\", {\n        id: \"dropdown01\",\n        className: \"dropdown-content\",\n        style: {\n          display: 'block',\n          transformOrigin: '0px 0px 0px',\n          opacity: '1',\n          transform: 'scaleX(1) scaleY(1)'\n        }\n      }, __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: onEnterAnswers\n      }, \"Enter Answers\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: onEditTest\n      }, \"Edit\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: onDownloadReport,\n        className: \"disabled\"\n      }, \"Download Report\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: onDeleteTest,\n        className: \"red-text text-darken-3\"\n      }, \"Delete\"))) : null)), this.mapTestSubjects()))))));\n    }\n  }]);\n\n  return TestCard;\n}(React.Component);\n\nexport default TestCard;","map":null,"metadata":{},"sourceType":"module"}