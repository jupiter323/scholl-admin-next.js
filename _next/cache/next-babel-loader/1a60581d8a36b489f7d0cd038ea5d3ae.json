{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailLessonList/index.js\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-did-mount-set-state */\n\n/* eslint-disable react/no-did-update-set-state */\n\n/* eslint-disable react/no-array-index-key */\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport update from \"immutability-helper\";\nimport moment from \"moment\";\nimport FilterSection from \"./components/FilterSection\";\nimport FullView from \"./components/FullView\";\nimport { dueDateAscending, subjectAscending, subjectDescending, passageAscending, passageDescending, lessonNameDescending, lessonNameAscending, statusDescending, statusAscending, scoreDescending, scoreAscending, availableDateAscending, availableDateDescending, dueDate, flagsAscending, flagsDescending, completionDateAscending, completionDateDescending, lessonTypeAscending, lessonTypeDescending } from \"../../utils/sortFunctions\";\nimport ListView from \"./components/ListView\";\nimport LessonDetailAnswerSheet from \"../LessonDetailAnswerSheet\";\nimport AssignLessonModal from \"./components/AssignLessonModal\";\nimport { renderDropdownOptions } from './components/FullView/components/LessonCard/utils/index';\nimport ReadWorkBook from '../ReadWorkBook';\nimport Modal from \"../../Modal/index\";\nimport { getLessonList, getStudentLessonList, checkLesson, checkAllLessons, unCheckAllLessons, addCheckedLesson, removeCheckedLesson, assignLessonToStudent, addAllLessons, removeAllLessons, excuseStudentLateness, filterLessons, flagStudentLessonProblem } from \"../index/actions\";\nimport { makeSelectGetLessonList, makeSelectCheckedLessons, makeSelectActiveStudentToken, makeSelectGetStudentLessonList, makeSelectActiveLesson, makeSelectOpenActivePage, makeSelectSubjects } from \"../index/selectors\";\nimport { createStructuredSelector } from \"reselect\";\nimport AssignDatesModal from \"./components/AssignDatesModal\";\nimport { setOpenActivePage, setIsVisibleTopBar } from \"../index/actions\";\nimport { fetchStudentLessonSectionApi } from \"../index/api\";\nimport { mergeArrays } from './utils/mergeArrays'; // TODO: compare updatedlessons to lessons and update lesson list\n\nvar DetailLessonList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DetailLessonList, _React$Component);\n\n  function DetailLessonList(props) {\n    var _this;\n\n    _classCallCheck(this, DetailLessonList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DetailLessonList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillReceiveProps\", function (nextProps) {\n      if (_this.state.lessons.length === 0) {\n        _this.setState({\n          lessons: nextProps.lessonList\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCheckAllClicked\", function _callee(checked) {\n      var selectedLessonIds;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              selectedLessonIds = _this.getMappableLessons().map(function (lesson) {\n                return lesson.id;\n              });\n\n              if (checked) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(_this.props.dispatchCheckAllLesson(selectedLessonIds));\n\n            case 4:\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(_this.props.dispatchAddAllLessons(_this.getMappableLessons()));\n\n            case 6:\n              _this.setState({\n                selectAll: !checked\n              });\n\n              _context.next = 14;\n              break;\n\n            case 9:\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(_this.props.dispatchUnCheckAllLesson(selectedLessonIds));\n\n            case 11:\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(_this.props.dispatchRemoveAllLessons(_this.getMappableLessons()));\n\n            case 13:\n              _this.setState({\n                selectAll: false\n              });\n\n            case 14:\n              _this.setCheckedCardIds();\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddCheckedLesson\", function _callee2(lessonId, uniqueId) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(_this.props.dispatchAddCheckedLesson(lessonId));\n\n            case 2:\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(_this.props.dispathCheckLesson(uniqueId));\n\n            case 4:\n              _this.setCheckedCardIds();\n\n              if (!_this.state.selectAll) {\n                _this.setState({\n                  selectAll: true\n                });\n              }\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRemoveCheckedLesson\", function _callee3(lessonId, uniqueId) {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(_this.props.dispatchRemoveCheckedLesson(lessonId));\n\n            case 2:\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(_this.props.dispathCheckLesson(uniqueId));\n\n            case 4:\n              _this.setCheckedCardIds();\n\n              if (_this.props.checkedLessons.length === 0) {\n                _this.setState({\n                  selectAll: false\n                });\n              }\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setCheckedCardIds\", function () {\n      _this.setState({\n        checkedCardIds: _this.props.lessonList.filter(function (lesson) {\n          return lesson.selected && lesson.lesson_id;\n        }).map(function (lesson) {\n          return lesson.id;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenModal\", function () {\n      return _this.setState({\n        modalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseModal\", function () {\n      return _this.setState({\n        modalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenConfirmModal\", function () {\n      return _this.setState({\n        isConfirmModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseConfirmModal\", function () {\n      return _this.setState({\n        isConfirmModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClearFilters\", function () {\n      return _this.setState({\n        subjectFilters: [],\n        completeFilters: [],\n        flagFilters: [],\n        dueDateFilters: [],\n        unitFilter: \"\",\n        nameFilter: \"\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (lesson) {\n      return _this.setState({\n        nameFilter: lesson\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function (filter) {\n      return _this.setState(_defineProperty({}, filter, \"\"));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeView\", function (view) {\n      return _this.setState({\n        currentView: view,\n        active: view\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetUnitFilter\", function (unit) {\n      _this.setState({\n        unitFilter: unit\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortLessons\", function (lessons) {\n      var sort = _this.state.sort;\n\n      switch (sort) {\n        case \"subjectAscending\":\n          return lessons.sort(subjectAscending);\n\n        case \"subjectDescending\":\n          return lessons.sort(subjectDescending);\n\n        case \"passageAscending\":\n          return lessons.sort(passageAscending);\n\n        case \"statusAscending\":\n          return lessons.sort(statusAscending);\n\n        case \"scoreAscending\":\n          return lessons.sort(scoreAscending);\n\n        case \"passageDescending\":\n          return lessons.sort(passageDescending);\n\n        case \"statusDescending\":\n          return lessons.sort(statusDescending);\n\n        case \"scoreDescending\":\n          return lessons.sort(scoreDescending);\n\n        case \"availableDateAscending\":\n          return lessons.sort(availableDateAscending);\n\n        case \"availableDateDescending\":\n          return lessons.sort(availableDateDescending);\n\n        case \"dueDateDescending\":\n          return lessons.sort(dueDate);\n\n        case \"dueDateAscending\":\n          return lessons.sort(dueDateAscending);\n\n        case \"flagsAscending\":\n          return lessons.sort(flagsAscending);\n\n        case \"flagsDescending\":\n          return lessons.sort(flagsDescending);\n\n        case \"lessonNameAscending\":\n          return lessons.sort(lessonNameAscending);\n\n        case \"lessonNameDescending\":\n          return lessons.sort(lessonNameDescending);\n\n        case \"completionDateAscending\":\n          return lessons.sort(completionDateAscending);\n\n        case \"completionDateDescending\":\n          return lessons.sort(completionDateDescending);\n\n        case \"lessonTypeAscending\":\n          return lessons.sort(lessonTypeAscending);\n\n        case \"lessonTypeDescending\":\n          return lessons.sort(lessonTypeDescending);\n\n        case \"dueDate\":\n          return lessons.sort(dueDateAscending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddUpdatedLessons\", function (lessons) {\n      return _this.setState({\n        updatedLessons: lessons\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByName\", function (mappableLessons) {\n      var nameFilter = _this.state.nameFilter;\n      return mappableLessons.reduce(function (finalArr, currentLesson) {\n        var name = currentLesson.name;\n        var lessonString = name.replace(/\\s/g, \"\").toLowerCase();\n\n        if (lessonString.indexOf(nameFilter.toLowerCase().replace(/\\s/g, '')) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n          finalArr.push(currentLesson);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloneLesson\", function (index) {\n      var lessons = _this.state.lessons;\n\n      _this.setState(function (prevState) {\n        prevState.lessons.push(lessons[index]);\n        return {\n          lessons: prevState.lessons\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteLesson\", function (index) {\n      var lessons = _this.state.lessons;\n\n      var newLessonsArray = _this.arrayItemRemover(lessons, lessons[index]);\n\n      _this.setState({\n        lessons: newLessonsArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterLessons\", function (mappableLessons) {\n      var _this$state = _this.state,\n          subjectFilters = _this$state.subjectFilters,\n          unitFilter = _this$state.unitFilter,\n          scoreStatusFilters = _this$state.scoreStatusFilters,\n          flagFilters = _this$state.flagFilters;\n      var subjects = _this.props.subjects;\n      var lessons = [];\n\n      if (scoreStatusFilters.length && scoreStatusFilters.indexOf(\"all\") === -1) {\n        lessons = mappableLessons.filter(function (lesson) {\n          return lesson.scoring && lesson.scoring.grade && scoreStatusFilters.indexOf(lesson.scoring.grade.toLowerCase()) !== -1;\n        });\n      }\n\n      if (subjectFilters.length && subjectFilters.indexOf(\"all\") === -1) {\n        lessons = mappableLessons.filter(function (lesson) {\n          if (!lesson.subjects) {\n            return subjectFilters.indexOf(subjects[lesson.subject_id]) !== -1;\n          }\n\n          return subjectFilters.indexOf(lesson.subjects.name) !== -1;\n        });\n      }\n\n      if (flagFilters.length && flagFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return lesson.problems && lesson.problems.filter(function (problem) {\n            return problem.flat_status;\n          }).length !== 0;\n        });\n      }\n\n      if (unitFilter.length && unitFilter.indexOf(\"all\") === -1) {\n        lessons = mappableLessons.filter(function (lesson) {\n          if (!lesson.units) {\n            return unitFilter.indexOf(lesson.unit_id) !== -1;\n          }\n\n          return unitFilter.indexOf(lesson.units.id) !== -1;\n        });\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMappableLessons\", function () {\n      var _this$state2 = _this.state,\n          sort = _this$state2.sort,\n          unitFilter = _this$state2.unitFilter,\n          dueDateFilters = _this$state2.dueDateFilters,\n          nameFilter = _this$state2.nameFilter,\n          subjectFilters = _this$state2.subjectFilters,\n          scoreStatusFilters = _this$state2.scoreStatusFilters,\n          flagFilters = _this$state2.flagFilters,\n          prevFilters = _this$state2.prevFilters;\n\n      if (unitFilter !== prevFilters.unitFilter || nameFilter !== prevFilters.nameFilter) {\n        var dispatchFilterLessons = _this.props.dispatchFilterLessons;\n\n        _this.setState({\n          prevFilters: {\n            unitFilter: unitFilter,\n            nameFilter: nameFilter\n          }\n        });\n\n        dispatchFilterLessons({\n          unitFilter: unitFilter,\n          nameFilter: nameFilter\n        });\n      }\n\n      var mappableLessons = _this.props.lessonList;\n\n      if (nameFilter.length) {\n        mappableLessons = _this.onFilterByName(mappableLessons);\n      }\n\n      if (unitFilter.length || scoreStatusFilters.length || subjectFilters.length || flagFilters.length) {\n        mappableLessons = _this.onFilterLessons(mappableLessons);\n      }\n\n      if (dueDateFilters.length) {\n        mappableLessons = _this.filterDueDate(mappableLessons);\n      }\n\n      if (sort) {\n        return _toConsumableArray(_this.onSortLessons(mappableLessons));\n      }\n\n      return mappableLessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterDueDate\", function (mappableLessons) {\n      var user = _this.props.user;\n      var dueDateFilters = _this.state.dueDateFilters;\n      var lessons = mappableLessons;\n\n      if (dueDateFilters.length && dueDateFilters.indexOf(\"all\") === -1) {\n        if (dueDateFilters.includes(\"dueToday\")) {\n          lessons = lessons.filter(function (lesson) {\n            return lesson.due_date === moment().format(\"YYYY-MM-DD\");\n          });\n        }\n\n        if (dueDateFilters.includes(\"dueNextSession\")) {\n          lessons = lessons.filter(function (lesson) {\n            return moment(user.nextSession).isSameOrAfter(lesson.dueDate, \"day\");\n          });\n        }\n\n        if (dueDateFilters.includes(\"overdue\")) {\n          lessons = lessons.filter(function (lesson) {\n            return lesson.status === 'OVERDUE';\n          });\n        }\n\n        if (dueDateFilters.includes(\"noDueDate\")) {\n          lessons = lessons.filter(function (lesson) {\n            return !lesson.due_date;\n          });\n        }\n\n        if (dueDateFilters.includes(\"unAssigned\")) {\n          lessons = lessons.filter(function (lesson) {\n            return lesson.status === \"NOTASSIGNED\";\n          });\n        }\n\n        return lessons;\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFilterClick\", function (filterType, filter) {\n      var _this$state3 = _this.state,\n          currentSubjectFilters = _this$state3.subjectFilters,\n          currentScoreStatusFilters = _this$state3.scoreStatusFilters,\n          currentFlagFilters = _this$state3.flagFilters,\n          currentDueDateFilters = _this$state3.dueDateFilters;\n      var modifiedFilterCurrentState;\n      var modifiedFilterName;\n      var modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case \"subject\":\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = \"subjectFilters\";\n          break;\n\n        case \"score\":\n          modifiedFilterCurrentState = currentScoreStatusFilters;\n          modifiedFilterName = \"scoreStatusFilters\";\n          break;\n\n        case \"flags\":\n          modifiedFilterCurrentState = currentFlagFilters;\n          modifiedFilterName = \"flagFilters\";\n          break;\n\n        case \"dueDate\":\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = \"dueDateFilters\";\n          break;\n\n        default:\n          break;\n      } // Decide whether we're adding or removing the selected filter\n\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        var filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      _this.setState(_defineProperty({}, modifiedFilterName, modifiedFilterUpdatedState));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"arrayItemRemover\", function (array, value) {\n      return array.filter(function (lesson) {\n        return lesson !== value;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCurrentView\", function () {\n      var active = _this.state.active;\n      var user = _this.props.user;\n\n      if (active === \"full\") {\n        return __jsx(FullView, {\n          user: user,\n          lessons: _this.getMappableLessons(),\n          selectAll: _this.state.selectAll,\n          onDeleteLesson: _this.onDeleteLesson,\n          onCloneLesson: _this.onCloneLesson,\n          onCheckAll: _this.onCheckAllClicked,\n          onAddCheckedLesson: _this.onAddCheckedLesson,\n          onRemoveCheckedLesson: _this.onRemoveCheckedLesson,\n          dropdownIsOpen: _this.state.dropdownIsOpen,\n          onOpenModal: _this.onOpenModal,\n          onCloseDropdown: _this.onCloseDropdown,\n          onOpenDropdown: _this.onOpenDropdown,\n          renderDropdownOptions: renderDropdownOptions,\n          checkedCardIds: _this.state.checkedCardIds,\n          onAddAssignLessonIds: _this.onAddAssignLessonIds,\n          resetLessonSelections: _this.resetLessonSelections,\n          handleMarkAllFlagsReviewed: _this.handleMarkAllFlagsReviewed,\n          lessonIdsToUnFlag: _this.state.lessonIdsToUnFlag,\n          handleExcuseLessonLateness: _this.handleExcuseLessonLateness,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 438\n          },\n          __self: this\n        });\n      }\n\n      return __jsx(ListView, {\n        user: user,\n        lessons: _this.getMappableLessons(),\n        onSetSort: _this.onSetSort,\n        sort: _this.state.sort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        },\n        __self: this\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAssignLesson\", function (lessonDates) {\n      var _this$props = _this.props,\n          checkedLessons = _this$props.checkedLessons,\n          studentLess = _this$props.studentLess; // Check if there are lessons to assign\n\n      if (checkedLessons.length <= 0) return null; // Check if that lesson has already been assigned\n\n      var payload = {\n        student_id: _this.props.user.id,\n        lesson_ids: checkedLessons,\n        assignment_date: lessonDates.assignDate,\n        due_date: lessonDates.dueDate\n      };\n      var prevAssignedLessons = studentLess.filter(function (lesson) {\n        return checkedLessons.includes(lesson.lesson_id);\n      }); // If lessons have been assigned before, open modal\n\n      if (prevAssignedLessons.length > 0) {\n        _this.onOpenConfirmModal();\n\n        return _this.setState({\n          prevAssignedLessons: prevAssignedLessons,\n          lessonsToAssign: payload,\n          confirmationModalMessage: 'One or more lessons you are assigning to this student have previously been assigned. Assign Lessons anyways?'\n        });\n      } // Move onto sending request\n\n\n      _this.submitAssignedLesson(payload);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submitAssignedLesson\", function (lessons) {\n      var dispatchAssignLessonToStudent = _this.props.dispatchAssignLessonToStudent;\n\n      _this.onCloseConfirmModal(); // Dispatch assign lesson to student\n\n\n      var payload = lessons;\n\n      if (!payload) {\n        payload = _this.state.lessonsToAssign;\n      }\n\n      dispatchAssignLessonToStudent(payload); // Clear the redux checkedLesson property\n\n      _this.resetLessonSelections();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetLessonSelections\", function () {\n      var _this$props2 = _this.props,\n          dispatchRemoveAllLessons = _this$props2.dispatchRemoveAllLessons,\n          dispatchUnCheckAllLesson = _this$props2.dispatchUnCheckAllLesson;\n      dispatchUnCheckAllLesson(_this.getMappableLessons());\n      dispatchRemoveAllLessons(_this.getMappableLessons());\n\n      _this.setState({\n        selectAll: false,\n        prevAssignedLessons: [],\n        lessonsToAssign: {}\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDetailModal\", function () {\n      var _this$props3 = _this.props,\n          onSetOpenActivePage = _this$props3.onSetOpenActivePage,\n          onSetIsVisibleTopBar = _this$props3.onSetIsVisibleTopBar;\n      onSetIsVisibleTopBar(true);\n      onSetOpenActivePage(\"\");\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMarkAllFlagsReviewed\", function (studentLessonIds) {\n      var onFlagStudentLessonProblem = _this.props.onFlagStudentLessonProblem;\n\n      if (studentLessonIds && studentLessonIds.length > 0) {\n        _this.getMappableLessons().forEach(function (lesson) {\n          if (studentLessonIds.includes(lesson.id)) {\n            if (lesson.problems && lesson.problems.length > 0) {\n              lesson.problems.forEach(function (problem) {\n                if (problem.flag_status === \"FLAGGED\") {\n                  var payload = {\n                    student_lesson_id: lesson.id,\n                    problem_id: problem.problem.id,\n                    flag_status: 'REVIEWED'\n                  };\n                  onFlagStudentLessonProblem(payload);\n                }\n              });\n            } else if (lesson.sections && lesson.sections.length > 0) {\n              var section1 = fetchStudentLessonSectionApi(_this.props.user.id, lesson.id, lesson.sections[0].id);\n              var section2 = fetchStudentLessonSectionApi(_this.props.user.id, lesson.id, lesson.sections[1].id);\n\n              _Promise.all([section1, section2]).then(function (sections) {\n                var filteredSections = sections.filter(function (section) {\n                  return section;\n                });\n                filteredSections.map(function (section) {\n                  section.lesson_problems.map(function (problem) {\n                    if (problem.flag_status === \"FLAGGED\") {\n                      var payload = {\n                        student_lesson_id: lesson.id,\n                        problem_id: problem.problem.id,\n                        flag_status: 'REVIEWED'\n                      };\n                      onFlagStudentLessonProblem(payload);\n                    }\n                  });\n                });\n              });\n            }\n          }\n        });\n\n        _this.setState({\n          lessonIdsToUnFlag: mergeArrays(_this.state.lessonIdsToUnFlag, studentLessonIds)\n        });\n\n        _this.resetLessonSelections();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleExcuseLessonLateness\", function (lessonCardIds) {\n      var onExcuseStudentLateness = _this.props.onExcuseStudentLateness;\n\n      if (lessonCardIds && lessonCardIds.length > 0) {\n        _this.getMappableLessons().forEach(function (lesson) {\n          if (lessonCardIds.includes(lesson.id)) {\n            var payload = {\n              student_lesson_id: lesson.id,\n              was_excused: !lesson.lateness_excused\n            };\n            onExcuseStudentLateness(payload);\n          }\n        }); // Deselect all checks and lessons\n\n\n        _this.resetLessonSelections();\n      }\n    });\n\n    _this.state = {\n      test: true,\n      lessons: [],\n      modalOpen: false,\n      currentView: \"full\",\n      active: \"full\",\n      subjectFilters: [],\n      scoreStatusFilters: [],\n      flagFilters: [],\n      dueDateFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\",\n      updatedLessons: [],\n      selectAll: false,\n      dropdownIsOpen: false,\n      checkedCardIds: [],\n      isConfirmModalOpen: false,\n      prevAssignedLessons: [],\n      lessonsToAssign: {},\n      prevFilters: {\n        nameFilter: '',\n        unitFilter: ''\n      },\n      confirmationModalMessage: '',\n      lessonIdsToUnFlag: []\n    };\n    return _this;\n  }\n\n  _createClass(DetailLessonList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.dispathGetLessonList();\n      var id = this.props.user.id;\n      var studentToken = this.props.studentToken;\n      var postBody = {\n        id: id,\n        studentToken: studentToken\n      };\n      this.props.dispathGetStudentLessonList(postBody);\n    }\n  }, {\n    key: \"confirmationModal\",\n    value: function confirmationModal() {\n      var _this2 = this;\n\n      return __jsx(Modal, {\n        open: this.state.isConfirmModalOpen,\n        onConfirm: function onConfirm() {\n          return _this2.submitAssignedLesson();\n        },\n        onClose: this.onCloseConfirmModal,\n        header: \"Are you sure?\",\n        body: this.state.confirmationModalMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state4 = this.state,\n          currentView = _this$state4.currentView,\n          subjectFilters = _this$state4.subjectFilters,\n          scoreStatusFilters = _this$state4.scoreStatusFilters,\n          flagFilters = _this$state4.flagFilters,\n          dueDateFilters = _this$state4.dueDateFilters;\n      var activeShowPage = this.props.activeShowPage;\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623\n        },\n        __self: this\n      }, this.confirmationModal(), activeShowPage === \"AnswerSheet\" ? __jsx(LessonDetailAnswerSheet, {\n        onCloseDetailModal: this.onCloseDetailModal,\n        user: this.props.user,\n        lesson: this.props.activeLesson,\n        onOpenModal: this.onOpenModal,\n        onAddCheckedLesson: this.onAddCheckedLesson,\n        onCloseDropdown: this.onCloseDropdown,\n        resetLessonSelections: this.resetLessonSelections,\n        handleMarkAllFlagsReviewed: this.handleMarkAllFlagsReviewed,\n        lessonIdsToUnFlag: this.state.lessonIdsToUnFlag,\n        handleExcuseLessonLateness: this.handleExcuseLessonLateness,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627\n        },\n        __self: this\n      }) : activeShowPage === \"ReadWorkBook\" ? __jsx(ReadWorkBook, {\n        onCloseDetailModal: this.onCloseDetailModal,\n        user: this.props.user,\n        lesson: this.props.activeLesson,\n        onOpenModal: this.onOpenModal,\n        onAddCheckedLesson: this.onAddCheckedLesson,\n        onCloseDropdown: this.onCloseDropdown,\n        resetLessonSelections: this.resetLessonSelections,\n        handleMarkAllFlagsReviewed: this.handleMarkAllFlagsReviewed,\n        handleExcuseLessonLateness: this.handleExcuseLessonLateness,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 641\n        },\n        __self: this\n      }) : [__jsx(FilterSection, {\n        currentView: currentView,\n        onChangeView: this.onChangeView,\n        onClearFilters: this.onClearFilters,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState,\n        onSetSort: this.onSetSort,\n        subjectFilters: subjectFilters,\n        scoreStatusFilters: scoreStatusFilters,\n        flagFilters: flagFilters,\n        dueDateFilters: dueDateFilters,\n        handleFilterClick: this.handleFilterClick,\n        onSetUnitFilter: this.onSetUnitFilter,\n        filterDueDate: this.filterDueDate,\n        key: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 654\n        },\n        __self: this\n      }), this.renderCurrentView(), __jsx(AssignDatesModal, {\n        open: this.state.modalOpen // lessons={this.props.user.lessons}\n        ,\n        lessons: this.props.lessonList,\n        onCloseDatesModal: this.onCloseModal,\n        onAddUpdatedLessons: this.onAddUpdatedLessons,\n        onAssignLesson: this.onAssignLesson.bind(this),\n        key: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670\n        },\n        __self: this\n      }), __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onOpenModal,\n        className: \"waves-effect waves-teal btn add-btn modal-trigger\",\n        key: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678\n        },\n        __self: this\n      }, __jsx(\"i\", {\n        className: \"material-icons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683\n        },\n        __self: this\n      }, \"add\"), \"Assign Lesson\")]);\n    }\n  }]);\n\n  return DetailLessonList;\n}(React.Component);\n\nDetailLessonList.propTypes = {\n  user: PropTypes.object.isRequired,\n  activeLesson: PropTypes.object,\n  openAnswerSheetStatus: PropTypes.bool.isRequired\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispathGetLessonList: bindActionCreators(getLessonList, dispatch),\n    dispathGetStudentLessonList: bindActionCreators(getStudentLessonList, dispatch),\n    dispathCheckLesson: bindActionCreators(checkLesson, dispatch),\n    dispatchCheckAllLesson: bindActionCreators(checkAllLessons, dispatch),\n    dispatchUnCheckAllLesson: bindActionCreators(unCheckAllLessons, dispatch),\n    dispatchAddCheckedLesson: bindActionCreators(addCheckedLesson, dispatch),\n    dispatchRemoveCheckedLesson: bindActionCreators(removeCheckedLesson, dispatch),\n    dispatchAssignLessonToStudent: bindActionCreators(assignLessonToStudent, dispatch),\n    dispatchAddAllLessons: bindActionCreators(addAllLessons, dispatch),\n    dispatchRemoveAllLessons: bindActionCreators(removeAllLessons, dispatch),\n    onSetOpenActivePage: bindActionCreators(setOpenActivePage, dispatch),\n    onSetIsVisibleTopBar: bindActionCreators(setIsVisibleTopBar, dispatch),\n    onExcuseStudentLateness: bindActionCreators(excuseStudentLateness, dispatch),\n    dispatchFilterLessons: bindActionCreators(filterLessons, dispatch),\n    onFlagStudentLessonProblem: bindActionCreators(flagStudentLessonProblem, dispatch)\n  };\n};\n\nvar mapStateToProps = createStructuredSelector({\n  lessonList: makeSelectGetLessonList(),\n  studentLess: makeSelectGetStudentLessonList(),\n  checkedLessons: makeSelectCheckedLessons(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeLesson: makeSelectActiveLesson(),\n  activeShowPage: makeSelectOpenActivePage(),\n  subjects: makeSelectSubjects()\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailLessonList);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailLessonList/index.js"],"names":["connect","bindActionCreators","React","PropTypes","update","moment","FilterSection","FullView","dueDateAscending","subjectAscending","subjectDescending","passageAscending","passageDescending","lessonNameDescending","lessonNameAscending","statusDescending","statusAscending","scoreDescending","scoreAscending","availableDateAscending","availableDateDescending","dueDate","flagsAscending","flagsDescending","completionDateAscending","completionDateDescending","lessonTypeAscending","lessonTypeDescending","ListView","LessonDetailAnswerSheet","AssignLessonModal","renderDropdownOptions","ReadWorkBook","Modal","getLessonList","getStudentLessonList","checkLesson","checkAllLessons","unCheckAllLessons","addCheckedLesson","removeCheckedLesson","assignLessonToStudent","addAllLessons","removeAllLessons","excuseStudentLateness","filterLessons","flagStudentLessonProblem","makeSelectGetLessonList","makeSelectCheckedLessons","makeSelectActiveStudentToken","makeSelectGetStudentLessonList","makeSelectActiveLesson","makeSelectOpenActivePage","makeSelectSubjects","createStructuredSelector","AssignDatesModal","setOpenActivePage","setIsVisibleTopBar","fetchStudentLessonSectionApi","mergeArrays","DetailLessonList","props","nextProps","state","lessons","length","setState","lessonList","checked","selectedLessonIds","getMappableLessons","map","lesson","id","dispatchCheckAllLesson","dispatchAddAllLessons","selectAll","dispatchUnCheckAllLesson","dispatchRemoveAllLessons","setCheckedCardIds","lessonId","uniqueId","dispatchAddCheckedLesson","dispathCheckLesson","dispatchRemoveCheckedLesson","checkedLessons","checkedCardIds","filter","selected","lesson_id","modalOpen","dropdownIsOpen","isConfirmModalOpen","subjectFilters","completeFilters","flagFilters","dueDateFilters","unitFilter","nameFilter","sort","view","currentView","active","unit","updatedLessons","mappableLessons","reduce","finalArr","currentLesson","name","lessonString","replace","toLowerCase","indexOf","push","index","prevState","newLessonsArray","arrayItemRemover","scoreStatusFilters","subjects","scoring","grade","subject_id","problems","problem","flat_status","units","unit_id","prevFilters","dispatchFilterLessons","onFilterByName","onFilterLessons","filterDueDate","onSortLessons","user","includes","due_date","format","nextSession","isSameOrAfter","status","filterType","currentSubjectFilters","currentScoreStatusFilters","currentFlagFilters","currentDueDateFilters","modifiedFilterCurrentState","modifiedFilterName","modifiedFilterUpdatedState","$push","filterIndex","$splice","array","value","onDeleteLesson","onCloneLesson","onCheckAllClicked","onAddCheckedLesson","onRemoveCheckedLesson","onOpenModal","onCloseDropdown","onOpenDropdown","onAddAssignLessonIds","resetLessonSelections","handleMarkAllFlagsReviewed","lessonIdsToUnFlag","handleExcuseLessonLateness","onSetSort","lessonDates","studentLess","payload","student_id","lesson_ids","assignment_date","assignDate","prevAssignedLessons","onOpenConfirmModal","lessonsToAssign","confirmationModalMessage","submitAssignedLesson","dispatchAssignLessonToStudent","onCloseConfirmModal","onSetOpenActivePage","onSetIsVisibleTopBar","studentLessonIds","onFlagStudentLessonProblem","forEach","flag_status","student_lesson_id","problem_id","sections","section1","section2","all","then","filteredSections","section","lesson_problems","lessonCardIds","onExcuseStudentLateness","was_excused","lateness_excused","test","dispathGetLessonList","studentToken","postBody","dispathGetStudentLessonList","activeShowPage","confirmationModal","onCloseDetailModal","activeLesson","onChangeView","onClearFilters","onSetFilteredState","onUnsetFilteredState","handleFilterClick","onSetUnitFilter","renderCurrentView","onCloseModal","onAddUpdatedLessons","onAssignLesson","bind","Component","propTypes","object","isRequired","openAnswerSheetStatus","bool","mapDispatchToProps","dispatch","mapStateToProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-did-mount-set-state */\n/* eslint-disable react/no-did-update-set-state */\n/* eslint-disable react/no-array-index-key */\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport update from \"immutability-helper\";\nimport moment from \"moment\";\nimport FilterSection from \"./components/FilterSection\";\nimport FullView from \"./components/FullView\";\nimport {\n  dueDateAscending,\n  subjectAscending,\n  subjectDescending,\n  passageAscending,\n  passageDescending,\n  lessonNameDescending,\n  lessonNameAscending,\n  statusDescending,\n  statusAscending,\n  scoreDescending,\n  scoreAscending,\n  availableDateAscending,\n  availableDateDescending,\n  dueDate,\n  flagsAscending,\n  flagsDescending,\n  completionDateAscending,\n  completionDateDescending,\n  lessonTypeAscending,\n  lessonTypeDescending,\n} from \"../../utils/sortFunctions\";\nimport ListView from \"./components/ListView\";\nimport LessonDetailAnswerSheet from \"../LessonDetailAnswerSheet\";\nimport AssignLessonModal from \"./components/AssignLessonModal\";\nimport { renderDropdownOptions } from './components/FullView/components/LessonCard/utils/index';\nimport ReadWorkBook from '../ReadWorkBook';\nimport Modal from \"../../Modal/index\";\n\nimport {\n  getLessonList,\n  getStudentLessonList,\n  checkLesson,\n  checkAllLessons,\n  unCheckAllLessons,\n  addCheckedLesson,\n  removeCheckedLesson,\n  assignLessonToStudent,\n  addAllLessons,\n  removeAllLessons,\n  excuseStudentLateness,\n  filterLessons,\n  flagStudentLessonProblem,\n} from \"../index/actions\";\nimport { makeSelectGetLessonList, makeSelectCheckedLessons, makeSelectActiveStudentToken, makeSelectGetStudentLessonList, makeSelectActiveLesson, makeSelectOpenActivePage, makeSelectSubjects } from \"../index/selectors\";\nimport { createStructuredSelector } from \"reselect\";\nimport AssignDatesModal from \"./components/AssignDatesModal\";\nimport { setOpenActivePage, setIsVisibleTopBar } from \"../index/actions\";\nimport { fetchStudentLessonSectionApi } from \"../index/api\";\nimport { mergeArrays } from './utils/mergeArrays';\n\n// TODO: compare updatedlessons to lessons and update lesson list\nclass DetailLessonList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: true,\n      lessons: [],\n      modalOpen: false,\n      currentView: \"full\",\n      active: \"full\",\n      subjectFilters: [],\n      scoreStatusFilters: [],\n      flagFilters: [],\n      dueDateFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\",\n      updatedLessons: [],\n      selectAll: false,\n      dropdownIsOpen: false,\n      checkedCardIds: [],\n      isConfirmModalOpen: false,\n      prevAssignedLessons: [],\n      lessonsToAssign: {},\n      prevFilters: {\n        nameFilter: '',\n        unitFilter: '',\n      },\n      confirmationModalMessage: '',\n      lessonIdsToUnFlag: [],\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispathGetLessonList();\n    const { id } = this.props.user;\n    const { studentToken } = this.props;\n    const postBody = {\n      id,\n      studentToken,\n    };\n    this.props.dispathGetStudentLessonList(postBody);\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    if (this.state.lessons.length === 0) {\n      this.setState({\n        lessons: nextProps.lessonList,\n      });\n    }\n  };\n\n  // deSelectAllLessons = async (selectedLessonIds) => {\n  //   await this.props.dispatchUnCheckAllLesson(selectedLessonIds);\n  //   await this.props.dispatchRemoveAllLessons(this.getMappableLessons());\n  //   this.setState({ selectAll: false });\n  // }\n\n  /**\n   * @param checked {bool}\n   */\n  onCheckAllClicked = async (checked) => {\n    const selectedLessonIds = this.getMappableLessons().map(lesson => lesson.id);\n    if (!checked) {\n      await this.props.dispatchCheckAllLesson(selectedLessonIds);\n      await this.props.dispatchAddAllLessons(this.getMappableLessons());\n      this.setState({ selectAll: !checked });\n    } else {\n      await this.props.dispatchUnCheckAllLesson(selectedLessonIds);\n      await this.props.dispatchRemoveAllLessons(this.getMappableLessons());\n      this.setState({ selectAll: false });\n    }\n    this.setCheckedCardIds();\n  };\n\n  /**\n   * @param lessonId {string}\n   * @param uniqueId {string}\n   */\n  onAddCheckedLesson = async (lessonId, uniqueId) => {\n    await this.props.dispatchAddCheckedLesson(lessonId);\n    await this.props.dispathCheckLesson(uniqueId);\n    this.setCheckedCardIds();\n    if (!this.state.selectAll) {\n      this.setState({\n        selectAll: true,\n      });\n    }\n  };\n\n  /**\n   * @param lessonId {string}\n   * @param uniqueId {string}\n   */\n  onRemoveCheckedLesson = async (lessonId, uniqueId) => {\n    await this.props.dispatchRemoveCheckedLesson(lessonId);\n    await this.props.dispathCheckLesson(uniqueId);\n    this.setCheckedCardIds();\n    if (this.props.checkedLessons.length === 0) {\n      this.setState({\n        selectAll: false,\n      });\n    }\n  };\n\n  // This updates the selected ASSIGNED student lessons in local state\n  setCheckedCardIds = () => {\n    this.setState({\n      checkedCardIds: this.props.lessonList\n        .filter((lesson) => lesson.selected && lesson.lesson_id)\n        .map((lesson) => lesson.id),\n    });\n  };\n\n  onOpenModal = () => this.setState({ modalOpen: true });\n  onCloseModal = () => this.setState({ modalOpen: false });\n\n  onOpenDropdown = () => this.setState({ dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  onOpenConfirmModal = () => this.setState({ isConfirmModalOpen: true });\n  onCloseConfirmModal = () => this.setState({ isConfirmModalOpen: false });\n\n  onClearFilters = () =>\n    this.setState({\n      subjectFilters: [],\n      completeFilters: [],\n      flagFilters: [],\n      dueDateFilters: [],\n      unitFilter: \"\",\n      nameFilter: \"\",\n    });\n  onSetSort = (sort) => this.setState({ sort });\n  onSetFilteredState = (lesson) => this.setState({ nameFilter: lesson });\n  onUnsetFilteredState = (filter) => this.setState({ [filter]: \"\" });\n  onChangeView = (view) => this.setState({ currentView: view, active: view });\n\n  onSetUnitFilter = (unit) => {\n    this.setState({ unitFilter: unit });\n  };\n\n  // eslint-disable-next-line consistent-return\n  onSortLessons = (lessons) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case \"subjectAscending\":\n        return lessons.sort(subjectAscending);\n      case \"subjectDescending\":\n        return lessons.sort(subjectDescending);\n      case \"passageAscending\":\n        return lessons.sort(passageAscending);\n      case \"statusAscending\":\n        return lessons.sort(statusAscending);\n      case \"scoreAscending\":\n        return lessons.sort(scoreAscending);\n      case \"passageDescending\":\n        return lessons.sort(passageDescending);\n      case \"statusDescending\":\n        return lessons.sort(statusDescending);\n      case \"scoreDescending\":\n        return lessons.sort(scoreDescending);\n      case \"availableDateAscending\":\n        return lessons.sort(availableDateAscending);\n      case \"availableDateDescending\":\n        return lessons.sort(availableDateDescending);\n      case \"dueDateDescending\":\n        return lessons.sort(dueDate);\n      case \"dueDateAscending\":\n        return lessons.sort(dueDateAscending);\n      case \"flagsAscending\":\n        return lessons.sort(flagsAscending);\n      case \"flagsDescending\":\n        return lessons.sort(flagsDescending);\n      case \"lessonNameAscending\":\n        return lessons.sort(lessonNameAscending);\n      case \"lessonNameDescending\":\n        return lessons.sort(lessonNameDescending);\n      case \"completionDateAscending\":\n        return lessons.sort(completionDateAscending);\n      case \"completionDateDescending\":\n        return lessons.sort(completionDateDescending);\n      case \"lessonTypeAscending\":\n        return lessons.sort(lessonTypeAscending);\n      case \"lessonTypeDescending\":\n        return lessons.sort(lessonTypeDescending);\n      case \"dueDate\":\n        return lessons.sort(dueDateAscending);\n      default:\n        break;\n    }\n  };\n  onAddUpdatedLessons = (lessons) => this.setState({ updatedLessons: lessons });\n\n  onFilterByName = (mappableLessons) => {\n    const { nameFilter } = this.state;\n    return mappableLessons.reduce((finalArr, currentLesson) => {\n      const { name } = currentLesson;\n      const lessonString = name.replace(/\\s/g, \"\").toLowerCase();\n      if (lessonString.indexOf(nameFilter.toLowerCase().replace(/\\s/g, '')) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n        finalArr.push(currentLesson);\n      }\n      return finalArr;\n    }, []);\n  };\n\n  onCloneLesson = (index) => {\n    const { lessons } = this.state;\n    this.setState((prevState) => {\n      prevState.lessons.push(lessons[index]);\n      return { lessons: prevState.lessons };\n    });\n  };\n\n  onDeleteLesson = (index) => {\n    const { lessons } = this.state;\n    const newLessonsArray = this.arrayItemRemover(lessons, lessons[index]);\n    this.setState({ lessons: newLessonsArray });\n  };\n  // note: unassigned and incomplete are filtering opposite, but this works for some reason\n  onFilterLessons = (mappableLessons) => {\n    const {\n      subjectFilters,\n      unitFilter,\n      scoreStatusFilters,\n      flagFilters,\n    } = this.state;\n    const { subjects } = this.props;\n    let lessons = [];\n    if (scoreStatusFilters.length && scoreStatusFilters.indexOf(\"all\") === -1) {\n      lessons = mappableLessons.filter((lesson) =>\n        (lesson.scoring && lesson.scoring.grade && scoreStatusFilters.indexOf(lesson.scoring.grade.toLowerCase()) !== -1),\n      );\n    }\n    if (subjectFilters.length && subjectFilters.indexOf(\"all\") === -1) {\n      lessons = mappableLessons.filter((lesson) => {\n        if (!lesson.subjects) {\n          return subjectFilters.indexOf(subjects[lesson.subject_id]) !== -1;\n        }\n        return subjectFilters.indexOf(lesson.subjects.name) !== -1;\n      });\n    }\n    if (flagFilters.length && flagFilters.indexOf(\"all\") === -1) {\n      lessons = lessons.filter((lesson) =>\n        (lesson.problems && lesson.problems.filter(problem => problem.flat_status).length !== 0),\n      );\n    }\n    if (unitFilter.length && unitFilter.indexOf(\"all\") === -1) {\n      lessons = mappableLessons.filter((lesson) => {\n        if (!lesson.units) {\n          return unitFilter.indexOf(lesson.unit_id) !== -1;\n        }\n        return unitFilter.indexOf(lesson.units.id) !== -1;\n      });\n    }\n    return lessons;\n  };\n\n  getMappableLessons = () => {\n    const {\n      sort,\n      unitFilter,\n      dueDateFilters,\n      nameFilter,\n      subjectFilters,\n      scoreStatusFilters,\n      flagFilters,\n      prevFilters,\n    } = this.state;\n    if (unitFilter !== prevFilters.unitFilter || nameFilter !== prevFilters.nameFilter) {\n      const { dispatchFilterLessons } = this.props;\n      this.setState({ prevFilters: { unitFilter, nameFilter } });\n      dispatchFilterLessons({ unitFilter, nameFilter });\n    }\n    let mappableLessons = this.props.lessonList;\n    if (nameFilter.length) {\n      mappableLessons = this.onFilterByName(mappableLessons);\n    }\n    if (\n      unitFilter.length ||\n      scoreStatusFilters.length ||\n      subjectFilters.length ||\n      flagFilters.length\n    ) {\n      mappableLessons = this.onFilterLessons(mappableLessons);\n    }\n    if (dueDateFilters.length) {\n      mappableLessons = this.filterDueDate(mappableLessons);\n    }\n    if (sort) {\n      return [...this.onSortLessons(mappableLessons)];\n    }\n    return mappableLessons;\n  };\n\n  // may need to alter dueNextSession depending if client wants ALL vs incomplete/overdue\n  // TODO: only works with one due date filter, not multiple\n  filterDueDate = (mappableLessons) => {\n    const { user } = this.props;\n    const { dueDateFilters } = this.state;\n    let lessons = mappableLessons;\n    if (dueDateFilters.length && dueDateFilters.indexOf(\"all\") === -1) {\n      if (dueDateFilters.includes(\"dueToday\")) {\n        lessons = lessons.filter((lesson) => lesson.due_date === moment().format(\"YYYY-MM-DD\"));\n      }\n      if (dueDateFilters.includes(\"dueNextSession\")) {\n        lessons = lessons.filter((lesson) =>\n          moment(user.nextSession).isSameOrAfter(lesson.dueDate, \"day\"),\n        );\n      }\n      if (dueDateFilters.includes(\"overdue\")) {\n        lessons = lessons.filter((lesson) => lesson.status === 'OVERDUE');\n      }\n      if (dueDateFilters.includes(\"noDueDate\")) {\n        lessons = lessons.filter((lesson) => !lesson.due_date);\n      }\n      if (dueDateFilters.includes(\"unAssigned\")) {\n        lessons = lessons.filter((lesson) => lesson.status === \"NOTASSIGNED\");\n      }\n      return lessons;\n    }\n    return lessons;\n  };\n\n  handleFilterClick = (filterType, filter) => {\n    const {\n      subjectFilters: currentSubjectFilters,\n      scoreStatusFilters: currentScoreStatusFilters,\n      flagFilters: currentFlagFilters,\n      dueDateFilters: currentDueDateFilters,\n    } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case \"subject\":\n        modifiedFilterCurrentState = currentSubjectFilters;\n        modifiedFilterName = \"subjectFilters\";\n        break;\n      case \"score\":\n        modifiedFilterCurrentState = currentScoreStatusFilters;\n        modifiedFilterName = \"scoreStatusFilters\";\n        break;\n      case \"flags\":\n        modifiedFilterCurrentState = currentFlagFilters;\n        modifiedFilterName = \"flagFilters\";\n        break;\n      case \"dueDate\":\n        modifiedFilterCurrentState = currentDueDateFilters;\n        modifiedFilterName = \"dueDateFilters\";\n        break;\n      default:\n        break;\n    }\n    // Decide whether we're adding or removing the selected filter\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[filterIndex, 1]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  };\n\n  arrayItemRemover = (array, value) => array.filter((lesson) => lesson !== value);\n\n  renderCurrentView = () => {\n    const { active } = this.state;\n    const { user } = this.props;\n    if (active === \"full\") {\n      return (\n        <FullView\n          user={user}\n          lessons={this.getMappableLessons()}\n          selectAll={this.state.selectAll}\n          onDeleteLesson={this.onDeleteLesson}\n          onCloneLesson={this.onCloneLesson}\n          onCheckAll={this.onCheckAllClicked}\n          onAddCheckedLesson={this.onAddCheckedLesson}\n          onRemoveCheckedLesson={this.onRemoveCheckedLesson}\n          dropdownIsOpen={this.state.dropdownIsOpen}\n          onOpenModal={this.onOpenModal}\n          onCloseDropdown={this.onCloseDropdown}\n          onOpenDropdown={this.onOpenDropdown}\n          renderDropdownOptions={renderDropdownOptions}\n          checkedCardIds={this.state.checkedCardIds}\n          onAddAssignLessonIds={this.onAddAssignLessonIds}\n          resetLessonSelections={this.resetLessonSelections}\n          handleMarkAllFlagsReviewed={this.handleMarkAllFlagsReviewed}\n          lessonIdsToUnFlag={this.state.lessonIdsToUnFlag}\n          handleExcuseLessonLateness={this.handleExcuseLessonLateness}\n        />\n      );\n    }\n    return (\n      <ListView\n        user={user}\n        lessons={this.getMappableLessons()}\n        onSetSort={this.onSetSort}\n        sort={this.state.sort}\n      />\n    );\n  };\n\n  onAssignLesson = (lessonDates) => {\n    const { checkedLessons, studentLess } = this.props;\n    // Check if there are lessons to assign\n    if (checkedLessons.length <= 0) return null;\n    // Check if that lesson has already been assigned\n    const payload = {\n      student_id: this.props.user.id,\n      lesson_ids: checkedLessons,\n      assignment_date: lessonDates.assignDate,\n      due_date: lessonDates.dueDate,\n    };\n    const prevAssignedLessons = studentLess.filter((lesson) =>\n      checkedLessons.includes(lesson.lesson_id),\n    );\n\n    // If lessons have been assigned before, open modal\n    if (prevAssignedLessons.length > 0) {\n      this.onOpenConfirmModal();\n      return this.setState({\n        prevAssignedLessons,\n        lessonsToAssign: payload,\n        confirmationModalMessage: 'One or more lessons you are assigning to this student have previously been assigned. Assign Lessons anyways?',\n      });\n    }\n    // Move onto sending request\n    this.submitAssignedLesson(payload);\n  }\n\n  submitAssignedLesson = (lessons) => {\n    const {\n      dispatchAssignLessonToStudent,\n    } = this.props;\n    this.onCloseConfirmModal();\n    // Dispatch assign lesson to student\n    let payload = lessons;\n    if (!payload) {\n      payload = this.state.lessonsToAssign;\n    }\n    dispatchAssignLessonToStudent(payload);\n    // Clear the redux checkedLesson property\n    this.resetLessonSelections();\n  }\n\n  // Resets redux store, unchecks lessons, resets checked state\n  resetLessonSelections = () => {\n    const {\n      dispatchRemoveAllLessons,\n      dispatchUnCheckAllLesson,\n    } = this.props;\n    dispatchUnCheckAllLesson(this.getMappableLessons());\n    dispatchRemoveAllLessons(this.getMappableLessons());\n    this.setState({ selectAll: false, prevAssignedLessons: [], lessonsToAssign: {} });\n  }\n\n  confirmationModal() {\n    return (\n      <Modal\n        open={this.state.isConfirmModalOpen}\n        onConfirm={() => this.submitAssignedLesson()}\n        onClose={this.onCloseConfirmModal}\n        header=\"Are you sure?\"\n        body={this.state.confirmationModalMessage}\n      />\n    );\n  }\n\n  onCloseDetailModal = () => {\n    const { onSetOpenActivePage, onSetIsVisibleTopBar } = this.props;\n    onSetIsVisibleTopBar(true);\n    onSetOpenActivePage(\"\");\n  }\n\n  handleMarkAllFlagsReviewed = (studentLessonIds) => {\n    const { onFlagStudentLessonProblem } = this.props;\n    if (studentLessonIds && studentLessonIds.length > 0) {\n      this.getMappableLessons().forEach(lesson => {\n        if (studentLessonIds.includes(lesson.id)) {\n          if (lesson.problems && lesson.problems.length > 0) {\n            lesson.problems.forEach(problem => {\n              if (problem.flag_status === \"FLAGGED\") {\n                const payload = {\n                  student_lesson_id: lesson.id,\n                  problem_id: problem.problem.id,\n                  flag_status: 'REVIEWED',\n                };\n                onFlagStudentLessonProblem(payload);\n              }\n            });\n          } else if (lesson.sections && lesson.sections.length > 0) {\n            const section1 = fetchStudentLessonSectionApi(\n              this.props.user.id,\n              lesson.id,\n              lesson.sections[0].id,\n            );\n            const section2 = fetchStudentLessonSectionApi(\n              this.props.user.id,\n              lesson.id,\n              lesson.sections[1].id,\n            );\n            Promise.all([section1, section2]).then((sections) => {\n              const filteredSections = sections.filter((section) => section);\n              filteredSections.map((section) => {\n                section.lesson_problems.map((problem) => {\n                  if (problem.flag_status === \"FLAGGED\") {\n                    const payload = {\n                      student_lesson_id: lesson.id,\n                      problem_id: problem.problem.id,\n                      flag_status: 'REVIEWED',\n                    };\n                    onFlagStudentLessonProblem(payload);\n                  }\n                });\n              });\n            });\n          }\n        }\n      });\n      this.setState({ lessonIdsToUnFlag: mergeArrays(this.state.lessonIdsToUnFlag, studentLessonIds) });\n      this.resetLessonSelections();\n    }\n  }\n\n  handleExcuseLessonLateness = (lessonCardIds) => {\n    const { onExcuseStudentLateness } = this.props;\n    if (lessonCardIds && lessonCardIds.length > 0) {\n      this.getMappableLessons().forEach(lesson => {\n        if (lessonCardIds.includes(lesson.id)) {\n          const payload = {\n            student_lesson_id: lesson.id,\n            was_excused: !lesson.lateness_excused,\n          };\n          onExcuseStudentLateness(payload);\n        }\n      });\n      // Deselect all checks and lessons\n      this.resetLessonSelections();\n    }\n  }\n\n  render() {\n    const {\n      currentView,\n      subjectFilters,\n      scoreStatusFilters,\n      flagFilters,\n      dueDateFilters,\n    } = this.state;\n\n    const {\n      activeShowPage,\n    } = this.props;\n    return (\n      <React.Fragment>\n        {this.confirmationModal()}\n        <Choose>\n          <When condition={activeShowPage === \"AnswerSheet\"}>\n            <LessonDetailAnswerSheet\n              onCloseDetailModal={this.onCloseDetailModal}\n              user={this.props.user}\n              lesson={this.props.activeLesson}\n              onOpenModal={this.onOpenModal}\n              onAddCheckedLesson={this.onAddCheckedLesson}\n              onCloseDropdown={this.onCloseDropdown}\n              resetLessonSelections={this.resetLessonSelections}\n              handleMarkAllFlagsReviewed={this.handleMarkAllFlagsReviewed}\n              lessonIdsToUnFlag={this.state.lessonIdsToUnFlag}\n              handleExcuseLessonLateness={this.handleExcuseLessonLateness}\n            />\n          </When>\n          <When condition={activeShowPage === \"ReadWorkBook\"}>\n            <ReadWorkBook\n              onCloseDetailModal={this.onCloseDetailModal}\n              user={this.props.user}\n              lesson={this.props.activeLesson}\n              onOpenModal={this.onOpenModal}\n              onAddCheckedLesson={this.onAddCheckedLesson}\n              onCloseDropdown={this.onCloseDropdown}\n              resetLessonSelections={this.resetLessonSelections}\n              handleMarkAllFlagsReviewed={this.handleMarkAllFlagsReviewed}\n              handleExcuseLessonLateness={this.handleExcuseLessonLateness}\n            />\n          </When>\n          <Otherwise>\n            <FilterSection\n              currentView={currentView}\n              onChangeView={this.onChangeView}\n              onClearFilters={this.onClearFilters}\n              onSetFilteredState={this.onSetFilteredState}\n              onUnsetFilteredState={this.onUnsetFilteredState}\n              onSetSort={this.onSetSort}\n              subjectFilters={subjectFilters}\n              scoreStatusFilters={scoreStatusFilters}\n              flagFilters={flagFilters}\n              dueDateFilters={dueDateFilters}\n              handleFilterClick={this.handleFilterClick}\n              onSetUnitFilter={this.onSetUnitFilter}\n              filterDueDate={this.filterDueDate}\n            />\n            {this.renderCurrentView()}\n            <AssignDatesModal\n              open={this.state.modalOpen}\n              // lessons={this.props.user.lessons}\n              lessons={this.props.lessonList}\n              onCloseDatesModal={this.onCloseModal}\n              onAddUpdatedLessons={this.onAddUpdatedLessons}\n              onAssignLesson={this.onAssignLesson.bind(this)}\n            />\n            <a\n              href=\"#\"\n              onClick={this.onOpenModal}\n              className=\"waves-effect waves-teal btn add-btn modal-trigger\"\n            >\n              <i className=\"material-icons\">add</i>Assign Lesson\n            </a>\n          </Otherwise>\n        </Choose>\n      </React.Fragment>\n    );\n  }\n}\n\nDetailLessonList.propTypes = {\n  user: PropTypes.object.isRequired,\n  activeLesson: PropTypes.object,\n  openAnswerSheetStatus: PropTypes.bool.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispathGetLessonList: bindActionCreators(getLessonList, dispatch),\n  dispathGetStudentLessonList: bindActionCreators(getStudentLessonList, dispatch),\n  dispathCheckLesson: bindActionCreators(checkLesson, dispatch),\n  dispatchCheckAllLesson: bindActionCreators(checkAllLessons, dispatch),\n  dispatchUnCheckAllLesson: bindActionCreators(unCheckAllLessons, dispatch),\n  dispatchAddCheckedLesson: bindActionCreators(addCheckedLesson, dispatch),\n  dispatchRemoveCheckedLesson: bindActionCreators(removeCheckedLesson, dispatch),\n  dispatchAssignLessonToStudent: bindActionCreators(assignLessonToStudent, dispatch),\n  dispatchAddAllLessons: bindActionCreators(addAllLessons, dispatch),\n  dispatchRemoveAllLessons: bindActionCreators(removeAllLessons, dispatch),\n  onSetOpenActivePage: bindActionCreators(setOpenActivePage, dispatch),\n  onSetIsVisibleTopBar: bindActionCreators(setIsVisibleTopBar, dispatch),\n  onExcuseStudentLateness: bindActionCreators(excuseStudentLateness, dispatch),\n  dispatchFilterLessons: bindActionCreators(filterLessons, dispatch),\n  onFlagStudentLessonProblem: bindActionCreators(flagStudentLessonProblem, dispatch),\n});\n\nconst mapStateToProps = createStructuredSelector({\n  lessonList: makeSelectGetLessonList(),\n  studentLess: makeSelectGetStudentLessonList(),\n  checkedLessons: makeSelectCheckedLessons(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeLesson: makeSelectActiveLesson(),\n  activeShowPage: makeSelectOpenActivePage(),\n  subjects: makeSelectSubjects(),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailLessonList);\n"]},"metadata":{},"sourceType":"module"}