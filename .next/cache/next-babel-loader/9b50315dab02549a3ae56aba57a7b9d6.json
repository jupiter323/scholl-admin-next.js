{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable array-callback-return */\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport Modal from '../../../../../Modal';\nimport NewLocationModal from '../../../../../Location/components/NewLocationModal';\nimport LocationDetailsModal from '../../../../../Location/components/LocationDetailsModal';\nimport LocationRow from './components/LocationRow';\nimport { saveNewSuccess as saveLocationSuccess, saveChangesSuccess, saveNewError as saveLocationError } from '../../../../../utils/fieldValidation';\nimport sampleLocations from '../../../../../Location/utils/sampleLocationList';\n\nvar idGenerator = function idGenerator() {\n  return Math.floor(Math.random() * 100 + 1);\n};\n\nvar validationFieldMap = {\n  locationName: 'Location Name',\n  locationNickname: 'Location Nickname',\n  locationEmail: 'Location Email',\n  automatedEmailOrigin: 'Automated Email Origin',\n  automatedEmailSalutation: 'Automated Email Salutation',\n  locationUrl: 'Location Url',\n  headerColor1: 'Header Color 1',\n  headerColor2: 'Header Color 2',\n  headerLogoBackgroundColor: 'Header Logo Background Color',\n  headerLogoBackgroundAlpha: 'Header Logo Background Alpha',\n  horizontalLogoVariation: 'Horizonal Logo Variation',\n  squareLogoVariation: 'Square Logo Variation',\n  backgroundImage: 'Background Image',\n  backgroundBlur: 'Background Blur',\n  backgroundOverlayAlpha: 'Background Overlay  Alpha'\n}; // TODO: mock out update/delete action to backend\n// TODO: Will this delete just remove the location from the owner or delete the location altogethe?\n\nvar Locations =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Locations, _React$Component);\n\n  function Locations(props) {\n    var _this;\n\n    _classCallCheck(this, Locations);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Locations).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetLocationValidation\", function (locationValidation) {\n      return _this.setState({\n        locationValidation: locationValidation\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveNewLocation\", function (_ref) {\n      var locationContactInfo = _ref.locationContactInfo,\n          locationEmailSettings = _ref.locationEmailSettings,\n          locationBranding = _ref.locationBranding,\n          owner = _ref.owner;\n\n      _this.onCloseNewLocationModal();\n\n      var newLocation = {\n        id: idGenerator(),\n        owner: owner,\n        locationContactInfo: locationContactInfo,\n        locationEmailSettings: locationEmailSettings,\n        locationBranding: locationBranding,\n        locationBasicInfo: {\n          activeStudents: 0,\n          pastStudents: 0,\n          unactivatedStudents: 0,\n          averageImprovement: 0,\n          averageInitialScore: 0,\n          averageFinalScore: 0,\n          studentsAchievingTargetScore: 0\n        }\n      };\n      var locations = update(_this.state.locations, {\n        $push: [newLocation]\n      });\n\n      _this.setState({\n        locations: locations\n      });\n\n      saveLocationSuccess('location');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveLocationChanges\", function (_ref2) {\n      var id = _ref2.id,\n          locationContactInfo = _ref2.locationContactInfo,\n          locationEmailSettings = _ref2.locationEmailSettings,\n          locationBranding = _ref2.locationBranding;\n      var originalLocations = _this.state.locations;\n      var onCloseDropdown = _this.props.onCloseDropdown;\n      var locationToUpdate = originalLocations.filter(function (location) {\n        return location.id === id;\n      })[0];\n      var updatedLocation = update(locationToUpdate, {\n        locationContactInfo: {\n          $set: locationContactInfo\n        },\n        locationEmailSettings: {\n          $set: locationEmailSettings\n        },\n        locationBranding: {\n          $set: locationBranding\n        }\n      });\n      var updatedLocationIndex = originalLocations.indexOf(locationToUpdate);\n      var locations = update(originalLocations, {\n        $splice: [[updatedLocationIndex, 1, updatedLocation]]\n      });\n      saveChangesSuccess();\n\n      _this.setState({\n        locations: locations\n      });\n\n      onCloseDropdown();\n      return _this.onCloseEditLocationModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onConfirmDeleteLocation\", function () {\n      var _this$props = _this.props,\n          pendingLocationDelete = _this$props.pendingLocationDelete,\n          onCloseDeleteLocationModal = _this$props.onCloseDeleteLocationModal;\n\n      _this.onDeleteLocation(pendingLocationDelete);\n\n      onCloseDeleteLocationModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteLocation\", function (deletedLocation) {\n      var updatedState = update(_this.state, {\n        locations: function locations(unfilteredLocations) {\n          return unfilteredLocations.filter(function (location) {\n            return location.id !== deletedLocation.id;\n          });\n        }\n      });\n\n      _this.setState({\n        locations: updatedState.locations\n      });\n\n      _this.props.onCloseDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDropdownClick\", function (event, index) {\n      var _this$props2 = _this.props,\n          dropdownIsOpen = _this$props2.dropdownIsOpen,\n          onCloseDropdown = _this$props2.onCloseDropdown,\n          onSetDropdown = _this$props2.onSetDropdown;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapUserLocations\", function () {\n      return _this.state.locations.map(function (location, index) {\n        return __jsx(LocationRow, {\n          key: index,\n          index: index,\n          location: location,\n          dropdownIndex: _this.props.dropdownIndex,\n          dropdownIsOpen: _this.props.dropdownIsOpen,\n          handleDropdownClick: _this.handleDropdownClick,\n          onOpenEditLocationModal: function onOpenEditLocationModal() {\n            return _this.props.onOpenEditLocationModal(location);\n          },\n          onOpenDeleteModal: function onOpenDeleteModal() {\n            return _this.props.onOpenDeleteLocationModal(location);\n          }\n        });\n      });\n    });\n\n    _this.state = {\n      locations: sampleLocations,\n      dropdownIndex: null,\n      pendingLocationDelete: {},\n      locationValidation: {}\n    };\n    return _this;\n  }\n\n  _createClass(Locations, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          deleteLocationModalOpen = _this$props3.deleteLocationModalOpen,\n          activeLocation = _this$props3.activeLocation,\n          newLocationModalOpen = _this$props3.newLocationModalOpen,\n          editLocationModalOpen = _this$props3.editLocationModalOpen,\n          onOpenNewLocationModal = _this$props3.onOpenNewLocationModal,\n          onCloseNewLocationModal = _this$props3.onCloseNewLocationModal,\n          onCloseEditLocationModal = _this$props3.onCloseEditLocationModal,\n          onCloseDeleteLocationModal = _this$props3.onCloseDeleteLocationModal;\n      return __jsx(React.Fragment, null, __jsx(Modal, {\n        open: deleteLocationModalOpen,\n        onConfirm: this.onConfirmDeleteLocation,\n        onClose: onCloseDeleteLocationModal,\n        header: \"Are You Sure?\",\n        body: \"Deleting this location will be permanent\"\n      }), __jsx(NewLocationModal, {\n        fromInstructorPage: true,\n        open: newLocationModalOpen,\n        onClose: onCloseNewLocationModal,\n        onSaveNewLocation: this.onSaveNewLocation,\n        onSaveLocationError: function onSaveLocationError() {\n          return saveLocationError(_this2.state.locationValidation, validationFieldMap);\n        },\n        onSetLocationValidation: this.onSetLocationValidation\n      }), __jsx(LocationDetailsModal, {\n        location: activeLocation,\n        open: editLocationModalOpen,\n        onClose: onCloseEditLocationModal,\n        onSaveLocationError: function onSaveLocationError() {\n          return saveLocationError(_this2.state.locationValidation, validationFieldMap);\n        },\n        onSetLocationValidation: this.onSetLocationValidation,\n        onSaveLocationChanges: this.onSaveLocationChanges\n      }), __jsx(\"div\", {\n        className: \"card-block\"\n      }, __jsx(\"h3\", null, \"Location(s)\"), this.mapUserLocations(), __jsx(\"div\", {\n        className: \"add-box\"\n      }, __jsx(\"div\", {\n        className: \"add-box-holder\"\n      }, __jsx(\"a\", {\n        href: \"#\",\n        onClick: onOpenNewLocationModal,\n        className: \"btn-floating waves-effect waves-light green lighten-1\"\n      }, __jsx(\"i\", {\n        className: \"material-icons\"\n      }, \"add\"))))));\n    }\n  }]);\n\n  return Locations;\n}(React.Component);\n\nexport default Locations;","map":null,"metadata":{},"sourceType":"module"}