{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Actions = ({\n  state: {\n    ccAdmin,\n    requireUserToChange,\n    password,\n    confirmPassword\n  },\n  handleActionsChange,\n  onResetPassword,\n  onSendWelcomeEmail,\n  onSendPasswordResetEmail\n}) => __jsx(\"div\", {\n  className: \"card-block\"\n}, __jsx(\"h2\", null, \"Actions\"), __jsx(\"div\", {\n  className: \"row mb-0 d-flex-content large sameheight\"\n}, __jsx(\"div\", {\n  className: \"col s12 l5\"\n}, __jsx(\"div\", {\n  className: \"card\"\n}, __jsx(\"div\", {\n  className: \"card-content\"\n}, __jsx(\"div\", {\n  className: \"account-block\"\n}, __jsx(\"h3\", null, \"Welcome Email\"), __jsx(\"p\", null, \"Use this feature to send (or resend) a welcome email to the student. The welcome email contains login instruction and a temporary password that the student can use to login for the \\uFB01rst time. Keep in mind that sending this email will automatically set a new, randomly generated password which may be confusing to the student if he or she has already received a welcome email or has already set a permanent password.\"), __jsx(\"p\", null, __jsx(\"button\", {\n  className: \"btn waves-effect waves-light bg-blue\",\n  name: \"action\",\n  onClick: onSendWelcomeEmail\n}, \"(Re)send Welcome Email\")), __jsx(\"label\", null, __jsx(\"input\", {\n  type: \"checkbox\",\n  className: \"filled-in\",\n  name: \"ccAdmin\",\n  id: \"cc-admin\",\n  value: ccAdmin,\n  onChange: () => handleActionsChange({}, 'ccAdmin', true)\n}), __jsx(\"span\", {\n  className: \"large-label\"\n}, \"cc me at:  this_is_me@gmail.com\"))), __jsx(\"div\", {\n  className: \"account-block\"\n}, __jsx(\"h3\", null, \"Password Reset Email\"), __jsx(\"p\", null, \"The student will receive an email with a new temporary password. Keep in mind, the student's current password will no longer be valid..\"), __jsx(\"p\", null, __jsx(\"button\", {\n  className: \"btn waves-effect waves-light bg-blue\",\n  name: \"action\",\n  onClick: onSendPasswordResetEmail\n}, \"Send Password Reset Email\")))))), __jsx(\"div\", {\n  className: \"col s12 l5\"\n}, __jsx(\"div\", {\n  className: \"card\"\n}, __jsx(\"div\", {\n  className: \"card-content\"\n}, __jsx(\"div\", {\n  className: \"account-block\"\n}, __jsx(\"h3\", null, \"Reset Password\"), __jsx(\"p\", null, \"The student will receive an email with a new temporary password. Keep in mind, the student's current password will no longer be valid.\"), __jsx(\"div\", {\n  className: \"row mb-0\"\n}, __jsx(\"div\", {\n  className: \"input-field col s12 focus-blue\"\n}, __jsx(\"input\", {\n  type: \"password\",\n  id: \"password\",\n  name: \"password\",\n  value: password,\n  onChange: event => handleActionsChange(event, 'password')\n}), __jsx(\"label\", {\n  className: password.length ? 'label active' : 'label',\n  htmlFor: \"password\"\n}, \"Password\"), __jsx(\"span\", {\n  className: \"note\"\n}, \"6 to 20 characters\"))), __jsx(\"div\", {\n  className: \"row mb-0\"\n}, __jsx(\"div\", {\n  className: \"input-field col s12 focus-blue\"\n}, __jsx(\"input\", {\n  type: \"password\",\n  id: \"confirm-password\",\n  name: \"confirmPassword\",\n  value: confirmPassword,\n  onChange: event => handleActionsChange(event, 'confirmPassword')\n}), __jsx(\"label\", {\n  className: confirmPassword.length ? 'label active' : 'label',\n  htmlFor: \"confirm-password\"\n}, \"Confirm Password\"))), __jsx(\"p\", null, __jsx(\"label\", null, __jsx(\"input\", {\n  type: \"checkbox\",\n  className: \"filled-in\",\n  id: \"require-user-to-change\",\n  name: \"requireUserToChange\",\n  value: requireUserToChange,\n  onChange: () => handleActionsChange({}, 'ccAdmin', true)\n}), __jsx(\"span\", {\n  className: \"large-label\"\n}, \"Require user to change\"))), __jsx(\"p\", null, __jsx(\"button\", {\n  className: \"btn waves-effect waves-light bg-blue\",\n  name: \"action\",\n  onClick: onResetPassword\n}, \"Set Password\"))))))));\n\nActions.propTypes = {\n  state: PropTypes.object.isRequired,\n  onResetPassword: PropTypes.func.isRequired,\n  handleActionsChange: PropTypes.func.isRequired,\n  onSendWelcomeEmail: PropTypes.func.isRequired,\n  onSendPasswordResetEmail: PropTypes.func.isRequired\n};\nexport default Actions;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/AccountPage/components/Actions/index.js"],"names":["React","PropTypes","Actions","state","ccAdmin","requireUserToChange","password","confirmPassword","handleActionsChange","onResetPassword","onSendWelcomeEmail","onSendPasswordResetEmail","event","length","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Actions = ({ state: { ccAdmin, requireUserToChange, password, confirmPassword }, handleActionsChange, onResetPassword, onSendWelcomeEmail, onSendPasswordResetEmail }) => (\n  <div className=\"card-block\">\n    <h2>Actions</h2>\n    <div className=\"row mb-0 d-flex-content large sameheight\">\n      <div className=\"col s12 l5\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"account-block\">\n              <h3>Welcome Email</h3>\n              <p>Use this feature to send (or resend) a welcome email to the student. The welcome email contains login instruction and a temporary password that the student can use to login for the Ô¨Årst time. Keep in mind that sending this email will automatically set a new, randomly generated password which may be confusing to the student if he or she has already received a welcome email or has already set a permanent password.</p>\n              <p>\n                <button\n                  className=\"btn waves-effect waves-light bg-blue\"\n                  name=\"action\"\n                  onClick={onSendWelcomeEmail}\n                >\n                  (Re)send Welcome Email\n                </button>\n              </p>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  className=\"filled-in\"\n                  name=\"ccAdmin\"\n                  id=\"cc-admin\"\n                  value={ccAdmin}\n                  onChange={() => handleActionsChange({}, 'ccAdmin', true)}\n                />\n                <span className=\"large-label\">cc me at:  this_is_me@gmail.com</span>\n              </label>\n            </div>\n            <div className=\"account-block\">\n              <h3>Password Reset Email</h3>\n              <p>{\"The student will receive an email with a new temporary password. Keep in mind, the student's current password will no longer be valid..\"}</p>\n              <p>\n                <button\n                  className=\"btn waves-effect waves-light bg-blue\"\n                  name=\"action\"\n                  onClick={onSendPasswordResetEmail}\n                >\n                  Send Password Reset Email\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"col s12 l5\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"account-block\">\n              <h3>Reset Password</h3>\n              <p>{\"The student will receive an email with a new temporary password. Keep in mind, the student's current password will no longer be valid.\"}</p>\n              <div className=\"row mb-0\">\n                <div className=\"input-field col s12 focus-blue\">\n                  <input\n                    type=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={(event) => handleActionsChange(event, 'password')}\n                  />\n                  <label className={password.length ? 'label active' : 'label'} htmlFor=\"password\">Password</label>\n                  <span className=\"note\">6 to 20 characters</span>\n                </div>\n              </div>\n              <div className=\"row mb-0\">\n                <div className=\"input-field col s12 focus-blue\">\n                  <input\n                    type=\"password\"\n                    id=\"confirm-password\"\n                    name=\"confirmPassword\"\n                    value={confirmPassword}\n                    onChange={(event) => handleActionsChange(event, 'confirmPassword')}\n                  />\n                  <label className={confirmPassword.length ? 'label active' : 'label'} htmlFor=\"confirm-password\">Confirm Password</label>\n                </div>\n              </div>\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    className=\"filled-in\"\n                    id=\"require-user-to-change\"\n                    name=\"requireUserToChange\"\n                    value={requireUserToChange}\n                    onChange={() => handleActionsChange({}, 'ccAdmin', true)}\n                  />\n                  <span className=\"large-label\">Require user to change</span>\n                </label>\n              </p>\n              <p>\n                <button\n                  className=\"btn waves-effect waves-light bg-blue\"\n                  name=\"action\"\n                  onClick={onResetPassword}\n                >\n                  Set Password\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nActions.propTypes = {\n  state: PropTypes.object.isRequired,\n  onResetPassword: PropTypes.func.isRequired,\n  handleActionsChange: PropTypes.func.isRequired,\n  onSendWelcomeEmail: PropTypes.func.isRequired,\n  onSendPasswordResetEmail: PropTypes.func.isRequired,\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}