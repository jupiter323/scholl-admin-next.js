{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestAnswerSheetComplete/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { toast } from 'react-toastify';\nimport AnswerSheetNavBar from './components/AnswerSheetNavBar';\nimport ReadingPage from './components/ReadingPage';\nimport WritingPage from './components/WritingPage';\nimport MathNoCalcPage from './components/MathNoCalcPage';\nimport MathCalculatorPage from './components/MathCalculatorPage';\nimport EssayPage from './components/EssayPage';\nimport { makeSelectStudentSections, makeSelectActiveStudentToken, makeSelectActiveStudent, makeSelectTests, makeSelectActiveStudentTestId, makeSelectActiveTestScores } from '../index/selectors';\nimport { fetchStudentTestSections, addStudentAnswerToTest, setEssayScore, resetErrorMessage, getTestScores } from '../index/actions';\nimport { updateStudentTestSectionStatusApi } from '../index/api';\nimport { makeSelectErrorMessages } from '../index/selectors';\n\nvar DetailTestAnswerSheetComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DetailTestAnswerSheetComplete, _React$Component);\n\n  function DetailTestAnswerSheetComplete(props) {\n    var _this;\n\n    _classCallCheck(this, DetailTestAnswerSheetComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DetailTestAnswerSheetComplete).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillReceiveProps\", function (nextProps) {\n      var sections = nextProps.sections,\n          student_test_id = nextProps.student_test_id,\n          _nextProps$errorMessa = nextProps.errorMessages,\n          answerTestProblemMessage = _nextProps$errorMessa.answerTestProblemMessage,\n          testFlagMessage = _nextProps$errorMessa.testFlagMessage,\n          fetchSectionsMessage = _nextProps$errorMessa.fetchSectionsMessage,\n          fetchProblemsMessage = _nextProps$errorMessa.fetchProblemsMessage,\n          fetchingStudentTestsMessage = _nextProps$errorMessa.fetchingStudentTestsMessage;\n\n      if (sections.length !== 0 && !_this.state.enableScoreReport) {\n        _this.onSetProblems(sections, student_test_id);\n      }\n\n      if (answerTestProblemMessage !== _this.state.answerTestProblemMessage) {\n        _this.onErrorMessage(answerTestProblemMessage, \"answerTestProblemMessage\");\n      }\n\n      if (testFlagMessage !== _this.state.testFlagMessage) {\n        _this.onErrorMessage(testFlagMessage, \"testFlagMessage\");\n      }\n\n      if (fetchingStudentTestsMessage !== _this.state.fetchingStudentTestsMessage) {\n        _this.onErrorMessage(fetchingStudentTestsMessage, \"fetchingStudentTestsMessage\");\n      }\n\n      if (fetchProblemsMessage !== _this.state.fetchProblemsMessage) {\n        _this.setState({\n          fetchProblemsMessage: fetchProblemsMessage\n        });\n      }\n\n      if (fetchSectionsMessage !== _this.state.fetchSectionsMessage) {\n        _this.setState({\n          fetchSectionsMessage: fetchSectionsMessage\n        });\n      }\n\n      if (fetchingStudentTestsMessage !== _this.state.fetchingStudentTestsMessage) {\n        _this.setState({\n          fetchingStudentTestsMessage: fetchingStudentTestsMessage\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetProblems\", function (sections, studentTestId) {\n      return new _Promise(function _callee(resolve) {\n        var _this$props, tests, test_id, testScoreDetails, testIds, currentTestIndex, currentTestSections;\n\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = _this.props, tests = _this$props.tests, test_id = _this$props.testScoreDetails.test_id, testScoreDetails = _this$props.testScoreDetails;\n                testIds = tests.map(function (test) {\n                  return test.id;\n                });\n                currentTestIndex = testIds.findIndex(function (testId) {\n                  return testId === test_id;\n                });\n                currentTestSections = tests[currentTestIndex].test_sections;\n                sections.map(function (section) {\n                  var testSectionIds = currentTestSections.map(function (testSection) {\n                    return testSection.id;\n                  });\n                  var currentTestSectionIndex = testSectionIds.findIndex(function (testSectionId) {\n                    return testSectionId === section.test_section_id;\n                  });\n                  var currentTestSection = currentTestSections[currentTestSectionIndex]; // Confirm that the sections are for the current student_test_id\n\n                  if (!currentTestSection || testScoreDetails.student_test_id !== section.student_test_id) return null;\n\n                  switch (currentTestSection.name) {\n                    case 'Math (Calculator)':\n                      _this.setState({\n                        testMathCalcProblems: section\n                      });\n\n                      break;\n\n                    case 'Writing':\n                      _this.setState({\n                        testWritingProblems: section\n                      });\n\n                      break;\n\n                    case 'Math (No Calculator)':\n                      _this.setState({\n                        testMathNoCalcProblems: section\n                      });\n\n                      break;\n\n                    case 'Reading':\n                      _this.setState({\n                        testReadingProblems: section\n                      });\n\n                      break;\n\n                    default:\n                      _this.setState({\n                        testReadingProblems: section\n                      });\n\n                      break;\n                  }\n                });\n\n                _this.setState({\n                  testSections: sections,\n                  studentTestId: studentTestId,\n                  showSectionMessage: false\n                });\n\n                setTimeout(function () {\n                  resolve();\n                }, 1000);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getComponentImages\", function () {\n      return new _Promise(function (resolve) {\n        _this.setState({\n          enableScoreReport: true\n        });\n\n        var imgDataList = [];\n        var componentRefs = [{\n          id: 'readingAnswerSheetImg',\n          state: 'reading'\n        }, {\n          id: 'writingAnswerSheetImg',\n          state: 'writing'\n        }, {\n          id: 'mathNoCalcAnswerSheetImg',\n          state: 'math (no calc)'\n        }, {\n          id: 'mathCalcAnswerSheetImg',\n          state: 'math (calculator)'\n        }];\n        setTimeout(function () {\n          var _this$props2 = _this.props,\n              sections = _this$props2.sections,\n              student_test_id = _this$props2.testScoreDetails.student_test_id;\n\n          _this.onSetProblems(sections, student_test_id).then(function () {\n            setTimeout(function _callee3() {\n              var getImgListPromise;\n              return _regeneratorRuntime.async(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      getImgListPromise = componentRefs.reduce(function (accumulatorPromise, item) {\n                        return accumulatorPromise.then(function _callee2() {\n                          var result;\n                          return _regeneratorRuntime.async(function _callee2$(_context2) {\n                            while (1) {\n                              switch (_context2.prev = _context2.next) {\n                                case 0:\n                                  _context2.next = 2;\n                                  return _regeneratorRuntime.awrap(_this.getData(item));\n\n                                case 2:\n                                  result = _context2.sent;\n                                  return _context2.abrupt(\"return\", imgDataList.push(result));\n\n                                case 4:\n                                case \"end\":\n                                  return _context2.stop();\n                              }\n                            }\n                          });\n                        })[\"catch\"](console.error);\n                      }, _Promise.resolve());\n                      getImgListPromise.then(function () {\n                        resolve(imgDataList);\n                      });\n\n                    case 2:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              });\n            }, 1000);\n          });\n        }, 5000);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getData\", function (item) {\n      return new _Promise(function (resolve) {\n        _this.setState({\n          activeSlide: item.state\n        }, function _callee4() {\n          var currentImg;\n          return _regeneratorRuntime.async(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return _regeneratorRuntime.awrap(_this.onHandleTargetImage(item.id));\n\n                case 2:\n                  currentImg = _context4.sent;\n                  resolve(currentImg);\n\n                case 4:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          });\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleTargetImage\", function _callee5(currentRef) {\n      var getTargetImage, currentImg;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              getTargetImage = _this.props.getTargetImage;\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(getTargetImage(document.getElementById(currentRef)));\n\n            case 3:\n              currentImg = _context5.sent;\n              return _context5.abrupt(\"return\", currentImg);\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetActiveSlide\", function (activeSlide) {\n      var _this$state = _this.state,\n          testReadingProblems = _this$state.testReadingProblems,\n          testWritingProblems = _this$state.testWritingProblems,\n          testMathCalcProblems = _this$state.testMathCalcProblems,\n          testMathNoCalcProblems = _this$state.testMathNoCalcProblems;\n      var currentSection;\n\n      switch (activeSlide) {\n        case 'reading':\n          currentSection = testReadingProblems;\n          break;\n\n        case 'writing':\n          currentSection = testWritingProblems;\n          break;\n\n        case 'math (no calc)':\n          currentSection = testMathNoCalcProblems;\n          break;\n\n        case 'math (calculator)':\n          currentSection = testMathCalcProblems;\n          break;\n\n        default:\n          currentSection = testReadingProblems;\n          break;\n      }\n\n      _this.setState({\n        activeSlide: activeSlide,\n        activeTestSection: currentSection\n      }); // Remove any error message for the previous slide\n\n\n      _this.props.onUpdateTestSectionMsg(\"\");\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCurrentSlide\", function () {\n      var _this$state2 = _this.state,\n          activeSlide = _this$state2.activeSlide,\n          fetchSectionsMessage = _this$state2.fetchSectionsMessage;\n      var _this$props3 = _this.props,\n          sections = _this$props3.sections,\n          activeStudentTestId = _this$props3.activeStudentTestId,\n          activeTestScores = _this$props3.activeTestScores,\n          onSetEssayScore = _this$props3.onSetEssayScore;\n\n      if (sections) {\n        var _this$state3 = _this.state,\n            testReadingProblems = _this$state3.testReadingProblems,\n            testWritingProblems = _this$state3.testWritingProblems,\n            testMathCalcProblems = _this$state3.testMathCalcProblems,\n            testMathNoCalcProblems = _this$state3.testMathNoCalcProblems;\n\n        if (activeSlide === 'reading') {\n          _this.updateSectionStatus(activeSlide, testReadingProblems);\n\n          return __jsx(ReadingPage, {\n            testSection: testReadingProblems,\n            onAddStudentAnswerToTest: _this.onAddStudentAnswerToTest,\n            fetchProblemsMessage: _this.state.fetchProblemsMessage,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264\n            },\n            __self: this\n          });\n        } else if (activeSlide === 'writing') {\n          _this.updateSectionStatus(activeSlide, testWritingProblems);\n\n          return __jsx(WritingPage, {\n            testSection: testWritingProblems,\n            onAddStudentAnswerToTest: _this.onAddStudentAnswerToTest,\n            fetchProblemsMessage: _this.state.fetchProblemsMessage,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273\n            },\n            __self: this\n          });\n        } else if (activeSlide === 'math (no calc)') {\n          _this.updateSectionStatus(activeSlide, testMathNoCalcProblems);\n\n          return __jsx(MathNoCalcPage, {\n            testSection: testMathNoCalcProblems,\n            onAddStudentAnswerToTest: _this.onAddStudentAnswerToTest,\n            fetchProblemsMessage: _this.state.fetchProblemsMessage,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 282\n            },\n            __self: this\n          });\n        } else if (activeSlide === 'math (calculator)') {\n          _this.updateSectionStatus(activeSlide, testMathCalcProblems);\n\n          return __jsx(MathCalculatorPage, {\n            testSection: testMathCalcProblems,\n            onAddStudentAnswerToTest: _this.onAddStudentAnswerToTest,\n            fetchProblemsMessage: _this.state.fetchProblemsMessage,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 291\n            },\n            __self: this\n          });\n        } else if (activeSlide === 'essay') {\n          return __jsx(EssayPage, {\n            testId: activeStudentTestId,\n            testScores: activeTestScores,\n            setEssayScore: onSetEssayScore,\n            onGetTestScores: _this.props.onGetTestScores,\n            testScoreDetails: _this.props.testScoreDetails,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 299\n            },\n            __self: this\n          });\n        }\n\n        if (!fetchSectionsMessage) {\n          return __jsx(\"h1\", {\n            style: {\n              textAlign: 'center'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 309\n            },\n            __self: this\n          }, \"Loading Problems...\");\n        }\n\n        return __jsx(\"h1\", {\n          style: {\n            textAlign: 'center',\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312\n          },\n          __self: this\n        }, fetchSectionsMessage);\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddStudentAnswerToTest\", function _callee6(problem, answer, student_test_id) {\n      var dispatchAddStudentAnswerToTest, postBody;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              dispatchAddStudentAnswerToTest = _this.props.dispatchAddStudentAnswerToTest;\n              postBody = {\n                student_test_id: student_test_id,\n                test_problem_id: problem.id,\n                answer: answer\n              };\n              dispatchAddStudentAnswerToTest(postBody, problem.test_section_id);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateSectionStatus\", function _callee7(activeSlide, currentSection) {\n      var postBody;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (currentSection) {\n                _context7.next = 2;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 2:\n              if (!(currentSection.test_section_status === 'CREATED')) {\n                _context7.next = 8;\n                break;\n              }\n\n              if (_this.state.updatedSectionStatus[\"\".concat(activeSlide, \"Section\")]) {\n                _context7.next = 8;\n                break;\n              }\n\n              postBody = {\n                student_test_id: currentSection.student_test_id,\n                student_test_section_id: currentSection.id,\n                student_test_section_status: 'STARTED'\n              };\n              _context7.next = 7;\n              return _regeneratorRuntime.awrap(updateStudentTestSectionStatusApi(postBody));\n\n            case 7:\n              _this.setState({\n                updatedSectionStatus: _objectSpread({}, _this.state.updatedSectionStatus, _defineProperty({}, \"\".concat(activeSlide, \"Section\"), 'STARTED'))\n              });\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getExistingSections\", function () {\n      var _this$state4 = _this.state,\n          testReadingProblems = _this$state4.testReadingProblems,\n          testWritingProblems = _this$state4.testWritingProblems,\n          testMathCalcProblems = _this$state4.testMathCalcProblems,\n          testMathNoCalcProblems = _this$state4.testMathNoCalcProblems;\n      return {\n        reading: !!testReadingProblems,\n        writing: !!testWritingProblems,\n        mathCalc: !!testMathCalcProblems,\n        mathNoCalc: !!testMathNoCalcProblems\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"completedSectionMessage\", function () {\n      return __jsx(\"p\", {\n        style: {\n          color: \"white\",\n          backgroundColor: \"#28a745\",\n          fontSize: \"14px\",\n          borderRadius: \"25px\"\n        },\n        className: \"center-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }, \"This test section is complete. You can still edit answer choices if needed.\");\n    });\n\n    _this.state = {\n      activeSlide: '',\n      isOpened: false,\n      testSections: [],\n      studentTestId: '',\n      testReadingProblems: null,\n      testWritingProblems: null,\n      testMathCalcProblems: null,\n      testMathNoCalcProblems: null,\n      activeTestSection: null,\n      updatedState: {\n        activeReadingSection: false,\n        showInCompleteTest: false,\n        activeWritingSection: false,\n        activeMathNoCalcSection: false,\n        activeMathWithCalcSection: false,\n        activeSection: ''\n      },\n      updatedSectionStatus: {},\n      showSectionMessage: false,\n      answerTestProblemMessage: \"\",\n      testFlagMessage: \"\",\n      fetchSectionsMessage: \"\",\n      fetchingStudentTestsMessage: \"\",\n      enableScoreReport: false\n    };\n    return _this;\n  }\n\n  _createClass(DetailTestAnswerSheetComplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var enableScoreReport = this.state.enableScoreReport;\n      var _this$props4 = this.props,\n          sections = _this$props4.sections,\n          student_test_id = _this$props4.testScoreDetails.student_test_id;\n\n      if (sections.length !== 0 && !enableScoreReport) {\n        this.onSetProblems(sections, student_test_id);\n      }\n\n      this.props.onRef(this);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var onResetErrorMessage = this.props.onResetErrorMessage;\n      this.props.onRef(undefined);\n      onResetErrorMessage('answerTestProblemMessage');\n      onResetErrorMessage('testFlagMessage');\n      onResetErrorMessage('fetchSectionsMessage');\n      onResetErrorMessage('fetchProblemsMessage');\n      onResetErrorMessage('fetchingStudentTestsMessage');\n    }\n  }, {\n    key: \"onErrorMessage\",\n    value: function onErrorMessage(message, name) {\n      if (!message) return this.setState(_defineProperty({}, name, \"\"));\n      toast.error(message, {\n        className: 'update-error',\n        progressClassName: 'progress-bar-error'\n      });\n      this.setState(_defineProperty({}, name, message));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state5 = this.state,\n          activeSlide = _this$state5.activeSlide,\n          activeTestSection = _this$state5.activeTestSection,\n          testReadingProblems = _this$state5.testReadingProblems,\n          testWritingProblems = _this$state5.testWritingProblems,\n          testMathCalcProblems = _this$state5.testMathCalcProblems,\n          testMathNoCalcProblems = _this$state5.testMathNoCalcProblems;\n      var _this$props5 = this.props,\n          completedSections = _this$props5.completedSections,\n          status = _this$props5.testScoreDetails.status,\n          updateTestSectionMessage = _this$props5.updateTestSectionMessage;\n      var showSectionMessage = this.state.showSectionMessage;\n\n      switch (activeSlide) {\n        case 'reading':\n          if (completedSections.readingSectionCompleted) {\n            showSectionMessage = true;\n          }\n\n          break;\n\n        case 'writing':\n          if (completedSections.writingSectionCompleted) {\n            showSectionMessage = true;\n          }\n\n          break;\n\n        case 'math (no calc)':\n          if (completedSections.mathNoCalcSectionCompleted) {\n            showSectionMessage = true;\n          }\n\n          break;\n\n        case 'math (calculator)':\n          if (completedSections.mathCalcSectionCompleted) {\n            showSectionMessage = true;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      return __jsx(\"div\", {\n        className: \"card-main-full card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"slick-tabs-gallery\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, __jsx(AnswerSheetNavBar, {\n        activeSlide: activeSlide,\n        onSetActiveSlide: this.onSetActiveSlide,\n        getExistingSections: this.getExistingSections(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        className: \"card-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }, showSectionMessage && status !== \"COMPLETED\" && this.completedSectionMessage(), __jsx(\"div\", {\n        className: \"main-slick\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425\n        },\n        __self: this\n      }, this.renderCurrentSlide()), activeSlide && activeSlide !== \"essay\" && status !== \"COMPLETED\" && __jsx(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"btn-holder right-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        href: \"#\",\n        className: \"btn btn-xlarge waves-effect waves-light bg-blue\",\n        onClick: function onClick() {\n          _this2.props.handleTestScore(activeTestSection, {\n            testReadingProblems: testReadingProblems,\n            testWritingProblems: testWritingProblems,\n            testMathNoCalcProblems: testMathNoCalcProblems,\n            testMathCalcProblems: testMathCalcProblems\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, !showSectionMessage ? \"Submit Test Section\" : \"Resubmit Test\"))), __jsx(\"p\", {\n        className: \"red-text right-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447\n        },\n        __self: this\n      }, updateTestSectionMessage)));\n    }\n  }]);\n\n  return DetailTestAnswerSheetComplete;\n}(React.Component);\n\nDetailTestAnswerSheetComplete.propTypes = {\n  getTargetImage: PropTypes.func.isRequired\n};\nvar mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeStudent: makeSelectActiveStudent(),\n  tests: makeSelectTests(),\n  activeStudentTestId: makeSelectActiveStudentTestId(),\n  activeTestScores: makeSelectActiveTestScores(),\n  errorMessages: makeSelectErrorMessages()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: function onFetchStudentTestSections(postBody) {\n      return dispatch(fetchStudentTestSections(postBody));\n    },\n    onSetEssayScore: function onSetEssayScore(score) {\n      return dispatch(setEssayScore(score));\n    },\n    dispatchAddStudentAnswerToTest: function dispatchAddStudentAnswerToTest(payload, sectionId) {\n      return dispatch(addStudentAnswerToTest(payload, sectionId));\n    },\n    onResetErrorMessage: function onResetErrorMessage(errorName) {\n      return dispatch(resetErrorMessage(errorName));\n    },\n    onGetTestScores: function onGetTestScores(postBody) {\n      return dispatch(getTestScores(postBody));\n    }\n  };\n}\n\nvar withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(DetailTestAnswerSheetComplete);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestAnswerSheetComplete/index.js"],"names":["React","PropTypes","connect","compose","createStructuredSelector","toast","AnswerSheetNavBar","ReadingPage","WritingPage","MathNoCalcPage","MathCalculatorPage","EssayPage","makeSelectStudentSections","makeSelectActiveStudentToken","makeSelectActiveStudent","makeSelectTests","makeSelectActiveStudentTestId","makeSelectActiveTestScores","fetchStudentTestSections","addStudentAnswerToTest","setEssayScore","resetErrorMessage","getTestScores","updateStudentTestSectionStatusApi","makeSelectErrorMessages","DetailTestAnswerSheetComplete","props","nextProps","sections","student_test_id","errorMessages","answerTestProblemMessage","testFlagMessage","fetchSectionsMessage","fetchProblemsMessage","fetchingStudentTestsMessage","length","state","enableScoreReport","onSetProblems","onErrorMessage","setState","studentTestId","resolve","tests","test_id","testScoreDetails","testIds","map","test","id","currentTestIndex","findIndex","testId","currentTestSections","test_sections","section","testSectionIds","testSection","currentTestSectionIndex","testSectionId","test_section_id","currentTestSection","name","testMathCalcProblems","testWritingProblems","testMathNoCalcProblems","testReadingProblems","testSections","showSectionMessage","setTimeout","imgDataList","componentRefs","then","getImgListPromise","reduce","accumulatorPromise","item","getData","result","push","console","error","activeSlide","onHandleTargetImage","currentImg","currentRef","getTargetImage","document","getElementById","currentSection","activeTestSection","onUpdateTestSectionMsg","activeStudentTestId","activeTestScores","onSetEssayScore","updateSectionStatus","onAddStudentAnswerToTest","onGetTestScores","textAlign","color","problem","answer","dispatchAddStudentAnswerToTest","postBody","test_problem_id","test_section_status","updatedSectionStatus","student_test_section_id","student_test_section_status","reading","writing","mathCalc","mathNoCalc","backgroundColor","fontSize","borderRadius","isOpened","updatedState","activeReadingSection","showInCompleteTest","activeWritingSection","activeMathNoCalcSection","activeMathWithCalcSection","activeSection","onRef","onResetErrorMessage","undefined","message","className","progressClassName","completedSections","status","updateTestSectionMessage","readingSectionCompleted","writingSectionCompleted","mathNoCalcSectionCompleted","mathCalcSectionCompleted","onSetActiveSlide","getExistingSections","completedSectionMessage","renderCurrentSlide","handleTestScore","Component","propTypes","func","isRequired","mapStateToProps","studentToken","activeStudent","mapDispatchToProps","dispatch","onFetchStudentTestSections","score","payload","sectionId","errorName","withConnect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { toast } from 'react-toastify';\nimport AnswerSheetNavBar from './components/AnswerSheetNavBar';\nimport ReadingPage from './components/ReadingPage';\nimport WritingPage from './components/WritingPage';\nimport MathNoCalcPage from './components/MathNoCalcPage';\nimport MathCalculatorPage from './components/MathCalculatorPage';\nimport EssayPage from './components/EssayPage';\nimport {\n  makeSelectStudentSections,\n  makeSelectActiveStudentToken,\n  makeSelectActiveStudent,\n  makeSelectTests,\n  makeSelectActiveStudentTestId,\n  makeSelectActiveTestScores,\n} from '../index/selectors';\n\nimport {\n  fetchStudentTestSections,\n  addStudentAnswerToTest,\n  setEssayScore,\n  resetErrorMessage,\n  getTestScores,\n} from '../index/actions';\nimport { updateStudentTestSectionStatusApi } from '../index/api';\nimport { makeSelectErrorMessages } from '../index/selectors';\nclass DetailTestAnswerSheetComplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSlide: '',\n      isOpened: false,\n      testSections: [],\n      studentTestId: '',\n      testReadingProblems: null,\n      testWritingProblems: null,\n      testMathCalcProblems: null,\n      testMathNoCalcProblems: null,\n      activeTestSection: null,\n      updatedState: {\n        activeReadingSection: false,\n        showInCompleteTest: false,\n        activeWritingSection: false,\n        activeMathNoCalcSection: false,\n        activeMathWithCalcSection: false,\n        activeSection: '',\n      },\n      updatedSectionStatus: {},\n      showSectionMessage: false,\n      answerTestProblemMessage: \"\",\n      testFlagMessage: \"\",\n      fetchSectionsMessage: \"\",\n      fetchingStudentTestsMessage: \"\",\n      enableScoreReport: false,\n    };\n  }\n\n  componentDidMount() {\n    const { enableScoreReport } = this.state;\n    const { sections, testScoreDetails: { student_test_id } } = this.props;\n    if (sections.length !== 0 && !enableScoreReport) {\n      this.onSetProblems(sections, student_test_id);\n    }\n    this.props.onRef(this);\n  }\n  componentWillUnmount() {\n    const { onResetErrorMessage } = this.props;\n    this.props.onRef(undefined);\n    onResetErrorMessage('answerTestProblemMessage');\n    onResetErrorMessage('testFlagMessage');\n    onResetErrorMessage('fetchSectionsMessage');\n    onResetErrorMessage('fetchProblemsMessage');\n    onResetErrorMessage('fetchingStudentTestsMessage');\n  }\n\n  componentWillReceiveProps = nextProps => {\n    const {\n      sections,\n      student_test_id,\n      errorMessages: {\n        answerTestProblemMessage,\n        testFlagMessage,\n        fetchSectionsMessage,\n        fetchProblemsMessage,\n        fetchingStudentTestsMessage,\n      },\n    } = nextProps;\n    if (sections.length !== 0 && !this.state.enableScoreReport) {\n      this.onSetProblems(sections, student_test_id);\n    }\n    if (answerTestProblemMessage !== this.state.answerTestProblemMessage) {\n      this.onErrorMessage(answerTestProblemMessage, \"answerTestProblemMessage\");\n    }\n    if (testFlagMessage !== this.state.testFlagMessage) {\n      this.onErrorMessage(testFlagMessage, \"testFlagMessage\");\n    }\n    if (fetchingStudentTestsMessage !== this.state.fetchingStudentTestsMessage) {\n      this.onErrorMessage(fetchingStudentTestsMessage, \"fetchingStudentTestsMessage\");\n    }\n    if (fetchProblemsMessage !== this.state.fetchProblemsMessage) {\n      this.setState({ fetchProblemsMessage });\n    }\n    if (fetchSectionsMessage !== this.state.fetchSectionsMessage) {\n      this.setState({ fetchSectionsMessage });\n    }\n    if (fetchingStudentTestsMessage !== this.state.fetchingStudentTestsMessage) {\n      this.setState({ fetchingStudentTestsMessage });\n    }\n  };\n  onErrorMessage(message, name) {\n    if (!message) return this.setState({ [name]: \"\" });\n    toast.error(message, {\n      className: 'update-error',\n      progressClassName: 'progress-bar-error',\n    });\n    this.setState({ [name]: message });\n  }\n  onSetProblems = (sections, studentTestId) => new Promise(async resolve => {\n    const { tests, testScoreDetails: { test_id }, testScoreDetails } = this.props;\n    const testIds = tests.map(test => test.id);\n    const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    sections.map(section => {\n      const testSectionIds = currentTestSections.map(testSection => testSection.id);\n      const currentTestSectionIndex = testSectionIds.findIndex(\n        testSectionId => testSectionId === section.test_section_id,\n      );\n      const currentTestSection = currentTestSections[currentTestSectionIndex];\n      // Confirm that the sections are for the current student_test_id\n      if (!currentTestSection || testScoreDetails.student_test_id !== section.student_test_id) return null;\n      switch (currentTestSection.name) {\n        case 'Math (Calculator)':\n          this.setState({\n            testMathCalcProblems: section,\n          });\n          break;\n        case 'Writing':\n          this.setState({\n            testWritingProblems: section,\n          });\n          break;\n        case 'Math (No Calculator)':\n          this.setState({\n            testMathNoCalcProblems: section,\n          });\n          break;\n        case 'Reading':\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n        default:\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n      }\n    });\n    this.setState({\n      testSections: sections,\n      studentTestId,\n      showSectionMessage: false,\n    });\n    setTimeout(() => {\n      resolve();\n    }, 1000);\n  });\n\n  getComponentImages = () =>\n    new Promise(resolve => {\n      this.setState({\n        enableScoreReport: true,\n      });\n      const imgDataList = [];\n      const componentRefs = [\n        { id: 'readingAnswerSheetImg', state: 'reading' },\n        { id: 'writingAnswerSheetImg', state: 'writing' },\n        { id: 'mathNoCalcAnswerSheetImg', state: 'math (no calc)' },\n        { id: 'mathCalcAnswerSheetImg', state: 'math (calculator)' },\n      ];\n      setTimeout(() => {\n        const { sections, testScoreDetails: { student_test_id } } = this.props;\n        this.onSetProblems(sections, student_test_id).then(() => {\n          setTimeout(async () => {\n            const getImgListPromise = componentRefs.reduce(\n              (accumulatorPromise, item) =>\n                accumulatorPromise\n                  .then(async () => {\n                    const result = await this.getData(item);\n                    return imgDataList.push(result);\n                  })\n                  .catch(console.error),\n              Promise.resolve(),\n            );\n            getImgListPromise.then(() => {\n              resolve(imgDataList);\n            });\n          }, 1000);\n        });\n      }, 5000);\n    });\n\n  getData = item =>\n    new Promise(resolve => {\n      this.setState({ activeSlide: item.state }, async () => {\n        const currentImg = await this.onHandleTargetImage(item.id);\n        resolve(currentImg);\n      });\n    });\n\n  onHandleTargetImage = async currentRef => {\n    const { getTargetImage } = this.props;\n    const currentImg = await getTargetImage(document.getElementById(currentRef));\n    return currentImg;\n  };\n\n  onSetActiveSlide = activeSlide => {\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    let currentSection;\n    switch (activeSlide) {\n      case 'reading':\n        currentSection = testReadingProblems;\n        break;\n      case 'writing':\n        currentSection = testWritingProblems;\n        break;\n      case 'math (no calc)':\n        currentSection = testMathNoCalcProblems;\n        break;\n      case 'math (calculator)':\n        currentSection = testMathCalcProblems;\n        break;\n      default:\n        currentSection = testReadingProblems;\n        break;\n    }\n    this.setState({ activeSlide, activeTestSection: currentSection });\n    // Remove any error message for the previous slide\n    this.props.onUpdateTestSectionMsg(\"\");\n  };\n\n  renderCurrentSlide = () => {\n    const { activeSlide, fetchSectionsMessage } = this.state;\n    const { sections, activeStudentTestId, activeTestScores, onSetEssayScore } = this.props;\n    if (sections) {\n      const {\n        testReadingProblems,\n        testWritingProblems,\n        testMathCalcProblems,\n        testMathNoCalcProblems,\n      } = this.state;\n      if (activeSlide === 'reading') {\n        this.updateSectionStatus(activeSlide, testReadingProblems);\n        return (\n          <ReadingPage\n            testSection={testReadingProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'writing') {\n        this.updateSectionStatus(activeSlide, testWritingProblems);\n        return (\n          <WritingPage\n            testSection={testWritingProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'math (no calc)') {\n        this.updateSectionStatus(activeSlide, testMathNoCalcProblems);\n        return (\n          <MathNoCalcPage\n            testSection={testMathNoCalcProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'math (calculator)') {\n        this.updateSectionStatus(activeSlide, testMathCalcProblems);\n        return (\n          <MathCalculatorPage\n            testSection={testMathCalcProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'essay') {\n        return (\n          <EssayPage\n            testId={activeStudentTestId}\n            testScores={activeTestScores}\n            setEssayScore={onSetEssayScore}\n            onGetTestScores={this.props.onGetTestScores}\n            testScoreDetails={this.props.testScoreDetails}\n          />\n        );\n      }\n      if (!fetchSectionsMessage) {\n        return <h1 style={{ textAlign: 'center' }}>Loading Problems...</h1>;\n      }\n      return (\n        <h1 style={{ textAlign: 'center', color: 'red' }}>\n          {fetchSectionsMessage}\n        </h1>\n      );\n    }\n    return null;\n  };\n\n  onAddStudentAnswerToTest = async (problem, answer, student_test_id) => {\n    const { dispatchAddStudentAnswerToTest } = this.props;\n    const postBody = {\n      student_test_id,\n      test_problem_id: problem.id,\n      answer,\n    };\n    dispatchAddStudentAnswerToTest(postBody, problem.test_section_id);\n  };\n\n  updateSectionStatus = async (activeSlide, currentSection) => {\n    if (!currentSection) return;\n    if (currentSection.test_section_status === 'CREATED') {\n      if (!this.state.updatedSectionStatus[`${activeSlide}Section`]) {\n        const postBody = {\n          student_test_id: currentSection.student_test_id,\n          student_test_section_id: currentSection.id,\n          student_test_section_status: 'STARTED',\n        };\n        await updateStudentTestSectionStatusApi(postBody);\n        this.setState({\n          updatedSectionStatus: {\n            ...this.state.updatedSectionStatus,\n            [`${activeSlide}Section`]: 'STARTED',\n          },\n        });\n      }\n    }\n  };\n\n  getExistingSections = () => {\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    return {\n      reading: !!testReadingProblems,\n      writing: !!testWritingProblems,\n      mathCalc: !!testMathCalcProblems,\n      mathNoCalc: !!testMathNoCalcProblems,\n    };\n  };\n\n  completedSectionMessage = () => (\n    <p\n      style={{\n        color: \"white\",\n        backgroundColor: \"#28a745\",\n        fontSize: \"14px\",\n        borderRadius: \"25px\",\n      }}\n      className=\"center-align\"\n    >\n        This test section is complete. You can still edit answer choices if needed.\n    </p>\n  );\n\n  render() {\n    const {\n      activeSlide,\n      activeTestSection,\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    const { completedSections, testScoreDetails: { status }, updateTestSectionMessage } = this.props;\n    let showSectionMessage = this.state.showSectionMessage;\n    switch (activeSlide) {\n      case 'reading':\n        if (completedSections.readingSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      case 'writing':\n        if (completedSections.writingSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      case 'math (no calc)':\n        if (completedSections.mathNoCalcSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      case 'math (calculator)':\n        if (completedSections.mathCalcSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      default:\n        break;\n    }\n    return (\n      <div className=\"card-main-full card\">\n        <div className=\"slick-tabs-gallery\">\n          <AnswerSheetNavBar\n            activeSlide={activeSlide}\n            onSetActiveSlide={this.onSetActiveSlide}\n            getExistingSections={this.getExistingSections()}\n          />\n        </div>\n        <div className=\"card-content\">\n          {showSectionMessage && status !== \"COMPLETED\" && this.completedSectionMessage()}\n          <div className=\"main-slick\">\n            {this.renderCurrentSlide()}\n          </div>\n          {activeSlide && activeSlide !== \"essay\" && status !== \"COMPLETED\" && (\n            <div className=\"row\">\n              <div className=\"btn-holder right-align\">\n                <a\n                  href=\"#\"\n                  className=\"btn btn-xlarge waves-effect waves-light bg-blue\"\n                  onClick={() => {\n                    this.props.handleTestScore(activeTestSection, {\n                      testReadingProblems,\n                      testWritingProblems,\n                      testMathNoCalcProblems,\n                      testMathCalcProblems,\n                    });\n                  }}\n                >\n                  {!showSectionMessage ? \"Submit Test Section\" : \"Resubmit Test\"}\n                </a>\n              </div>\n            </div>)}\n          <p className=\"red-text right-align\">{updateTestSectionMessage}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nDetailTestAnswerSheetComplete.propTypes = {\n  getTargetImage: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeStudent: makeSelectActiveStudent(),\n  tests: makeSelectTests(),\n  activeStudentTestId: makeSelectActiveStudentTestId(),\n  activeTestScores: makeSelectActiveTestScores(),\n  errorMessages: makeSelectErrorMessages(),\n});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n    onSetEssayScore: score => dispatch(setEssayScore(score)),\n    dispatchAddStudentAnswerToTest: (payload, sectionId) =>\n      dispatch(addStudentAnswerToTest(payload, sectionId)),\n    onResetErrorMessage: errorName => dispatch(resetErrorMessage(errorName)),\n    onGetTestScores: (postBody) => dispatch(getTestScores(postBody)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(DetailTestAnswerSheetComplete);\n"]},"metadata":{},"sourceType":"module"}