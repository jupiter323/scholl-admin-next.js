{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestAnswerSheetComplete/components/WritingPage/components/AnswerRow/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport BubbleGroup from \"../Bubble\";\nimport FreeResponse from '../FreeResponse';\nimport DropDownMenuOptions from '../DropDownOptions';\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      if (this.props.problem.flag) {\n        const {\n          problem: {\n            flag: {\n              status\n            }\n          }\n        } = this.props;\n        this.setState({\n          status\n        });\n      }\n    });\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      const {\n        problem: {\n          flag: {\n            status: nextPropsStatus\n          }\n        }\n      } = nextProps;\n\n      if (nextPropsStatus !== this.state.status) {\n        this.setState({\n          status: nextPropsStatus\n        });\n      }\n    });\n\n    _defineProperty(this, \"onOpenQuestionModal\", () => this.setState({\n      open: !this.state.open\n    }));\n\n    _defineProperty(this, \"onCloseQuestionModal\", () => this.setState({\n      open: false\n    }));\n\n    _defineProperty(this, \"mapNumberBubbles\", () => {\n      const {\n        problem: {\n          student_answer,\n          correct_answer\n        },\n        problem,\n        testSection\n      } = this.props;\n\n      if (student_answer === correct_answer) {\n        return __jsx(React.Fragment, null, __jsx(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, __jsx(FreeResponse, {\n          problem: problem,\n          testSection: testSection,\n          answerStatus: {\n            complete: true,\n            isCorrect: true\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        })), __jsx(\"li\", {\n          key: student_answer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: {\n            color: \"#fff\",\n            borderColor: \"#32955c\",\n            backgroundColor: \"#3eb777\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, student_answer)));\n      }\n\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, __jsx(\"li\", {\n        key: student_answer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, __jsx(FreeResponse, {\n        problem: problem,\n        testSection: testSection,\n        answerStatus: {\n          complete: true,\n          isCorrect: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), __jsx(\"li\", {\n        key: correct_answer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: \"#32955c\",\n          borderColor: \"#32955c\",\n          backgroundColor: \"#fff\",\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, correct_answer)));\n    });\n\n    _defineProperty(this, \"getAnswerType\", problem => {\n      const {\n        correct_answer\n      } = problem;\n\n      if (!_parseFloat(correct_answer) && correct_answer !== '0.0') {\n        return null;\n      }\n\n      return correct_answer;\n    });\n\n    this.state = {\n      open: false,\n      status: ''\n    };\n  }\n\n  render() {\n    const {\n      problem,\n      onAddStudentAnswerToTest,\n      testSection\n    } = this.props;\n    const {\n      open,\n      status\n    } = this.state;\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, __jsx(\"li\", {\n      className: \"answers-list-holder\",\n      key: problem.test_problem_id,\n      style: {\n        marginRight: \"15px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"answer-row row mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col col-120\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, __jsx(\"ul\", {\n      className: \"answer-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.getAnswerType(problem) ? this.mapNumberBubbles() : problem.type === \"fill_in_the_blank\" ? __jsx(FreeResponse, {\n      problem: problem,\n      testSection: testSection,\n      answerStatus: {\n        complete: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }) : __jsx(BubbleGroup, {\n      id: problem.id,\n      testSection: testSection,\n      onAddStudentAnswerToTest: onAddStudentAnswerToTest,\n      problem: problem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }))), __jsx(\"div\", {\n      className: \"col col-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"col col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, status === \"FLAGGED\" ? __jsx(\"span\", {\n      className: \"status-answer\",\n      style: {\n        color: \"#c0272d\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"icon-flag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), __jsx(\"b\", {\n      className: \"status-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Review\")) : null, status === \"REVIEWED\" ? __jsx(\"span\", {\n      className: \"status-answer status-disabled\",\n      style: {\n        color: \"#c0272d\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"icon-flag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), __jsx(\"b\", {\n      className: \"status-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Reviewed\")) : null), __jsx(\"div\", {\n      className: \"dropdown-block col col-35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: \"dropdown-trigger\",\n      href: \"#\",\n      \"data-target\": \"dropdown01\",\n      onClick: () => this.onOpenQuestionModal(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"material-icons dots-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"more_vert\")), __jsx(DropDownMenuOptions, {\n      open: open,\n      onOpenQuestionModal: this.onOpenQuestionModal,\n      onCloseQuestionModal: this.onCloseQuestionModal,\n      question: problem,\n      studentTestId: this.props.testSection.student_test_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nAnswerRow.propTypes = {\n  problem: PropTypes.object\n};\nexport default AnswerRow;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestAnswerSheetComplete/components/WritingPage/components/AnswerRow/index.js"],"names":["React","PropTypes","BubbleGroup","FreeResponse","DropDownMenuOptions","AnswerRow","Component","constructor","props","problem","flag","status","setState","nextProps","nextPropsStatus","state","open","student_answer","correct_answer","testSection","complete","isCorrect","color","borderColor","backgroundColor","width","render","onAddStudentAnswerToTest","test_problem_id","marginRight","getAnswerType","mapNumberBubbles","type","id","onOpenQuestionModal","onCloseQuestionModal","student_test_id","propTypes","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport BubbleGroup from \"../Bubble\";\nimport FreeResponse from '../FreeResponse';\nimport DropDownMenuOptions from '../DropDownOptions';\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      status: '',\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.problem.flag) {\n      const { problem: { flag: { status } } } = this.props;\n      this.setState({\n        status,\n      });\n    }\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    const { problem: { flag: { status: nextPropsStatus } } } = nextProps;\n    if (nextPropsStatus !== this.state.status) {\n      this.setState({\n        status: nextPropsStatus,\n      });\n    }\n  }\n\n  onOpenQuestionModal = () => this.setState({ open: !this.state.open });\n  onCloseQuestionModal = () => this.setState({ open: false });\n\n  mapNumberBubbles = () => {\n    const {\n      problem: { student_answer, correct_answer },\n      problem,\n      testSection,\n    } = this.props;\n    if (student_answer === correct_answer) {\n      return (\n        <>\n          <li>\n            <FreeResponse problem={problem} testSection={testSection} answerStatus={{ complete: true, isCorrect: true }} />\n          </li>\n          <li key={student_answer}>\n            <span\n              className=\"badge badge-rounded badge-rounded-bordered\"\n              style={{ color: \"#fff\", borderColor: \"#32955c\", backgroundColor: \"#3eb777\" }}\n            >\n              {student_answer}\n            </span>\n          </li>\n        </>\n      );\n    }\n    return (\n      <React.Fragment>\n        <li key={student_answer}>\n          <FreeResponse problem={problem} testSection={testSection} answerStatus={{ complete: true, isCorrect: false }} />\n        </li>\n        <li key={correct_answer}>\n          <span\n            className=\"badge badge-rounded badge-rounded-bordered\"\n            style={{\n              color: \"#32955c\",\n              borderColor: \"#32955c\",\n              backgroundColor: \"#fff\",\n              width: \"100%\",\n            }}\n          >\n            {correct_answer}\n          </span>\n        </li>\n      </React.Fragment>\n    );\n  };\n\n  getAnswerType = problem => {\n    const { correct_answer } = problem;\n    if (!parseFloat(correct_answer) && correct_answer !== '0.0') {\n      return null;\n    }\n    return correct_answer;\n  };\n\n  render() {\n    const { problem, onAddStudentAnswerToTest, testSection } = this.props;\n    const { open, status } = this.state;\n    return (\n      <React.Fragment>\n        <li\n          className=\"answers-list-holder\"\n          key={problem.test_problem_id}\n          style={{ marginRight: \"15px\" }}\n        >\n          <div className=\"answer-row row mb-0\">\n            <div className=\"col col-120\">\n              <ul className=\"answer-list\">\n                <Choose>\n                  <When condition={this.getAnswerType(problem)}>{this.mapNumberBubbles()}</When>\n                  <When condition={problem.type === \"fill_in_the_blank\"}>\n                    <FreeResponse\n                      problem={problem}\n                      testSection={testSection}\n                      answerStatus={{ complete: false }}\n                    />\n                  </When>\n                  <Otherwise>\n                    <BubbleGroup\n                      id={problem.id}\n                      testSection={testSection}\n                      onAddStudentAnswerToTest={onAddStudentAnswerToTest}\n                      problem={problem}\n                    />\n                  </Otherwise>\n                </Choose>\n              </ul>\n            </div>\n            <div className=\"col col-30\">\n              {/* @TODO Difficulty level of test problems should be here */}\n              {/* <span className=\"status-info\">E</span> */}\n            </div>\n            <div className=\"col col-auto\">\n              <If condition={status === \"FLAGGED\"}>\n                <span className=\"status-answer\" style={{ color: \"#c0272d\" }}>\n                  <i className=\"icon-flag\"></i>\n                  <b className=\"status-text\">Review</b>\n                </span>\n              </If>\n              <If condition={status === \"REVIEWED\"}>\n                <span className=\"status-answer status-disabled\" style={{ color: \"#c0272d\" }}>\n                  <i className=\"icon-flag\"></i>\n                  <b className=\"status-text\">Reviewed</b>\n                </span>\n              </If>\n            </div>\n            <div className=\"dropdown-block col col-35\">\n              <a\n                className=\"dropdown-trigger\"\n                href=\"#\"\n                data-target=\"dropdown01\"\n                onClick={() => this.onOpenQuestionModal()}\n              >\n                <i className=\"material-icons dots-icon\">more_vert</i>\n              </a>\n              <DropDownMenuOptions\n                open={open}\n                onOpenQuestionModal={this.onOpenQuestionModal}\n                onCloseQuestionModal={this.onCloseQuestionModal}\n                question={problem}\n                studentTestId={this.props.testSection.student_test_id}\n              />\n            </div>\n          </div>\n        </li>\n      </React.Fragment>\n    );\n  }\n}\n\nAnswerRow.propTypes = {\n  problem: PropTypes.object,\n};\n\nexport default AnswerRow;\n"]},"metadata":{},"sourceType":"module"}