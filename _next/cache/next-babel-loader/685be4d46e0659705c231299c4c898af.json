{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/TestVersionPage/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport TestVersionSettings from '../EditTestModal/components/TestVersionSettings';\nimport Settings from '../EditTestModal/components/Settings';\nimport { updateStudentTestDueDate, updateStudentTestAssignmentDate } from '../../../index/api';\n\nvar TestVersion =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TestVersion, _React$Component);\n\n  function TestVersion(props) {\n    var _this;\n\n    _classCallCheck(this, TestVersion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestVersion).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTestVersionSettingsChange\", function (event) {\n      var sections = _this.state.testVersion.sections;\n      var testVersion;\n\n      if (event.target) {\n        var setting = event.target.name;\n\n        if (sections[setting] !== undefined) {\n          testVersion = update(_this.state.testVersion, {\n            sections: _defineProperty({}, setting, {\n              $set: !sections[setting]\n            })\n          });\n        } else {\n          testVersion = update(_this.state.testVersion, _defineProperty({}, setting, {\n            $set: !_this.state.testVersion[setting]\n          }));\n        }\n      } else {\n        testVersion = update(_this.state.testVersion, {\n          version: {\n            $set: event\n          }\n        });\n      }\n\n      _this.setState({\n        testVersion: testVersion\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSettingsChange\", function (event) {\n      var previousSettings = _this.state.settings;\n      var setting = event.target.name;\n      var settings = update(_this.state.settings, _defineProperty({}, setting, {\n        $set: !previousSettings[setting]\n      }));\n\n      _this.setState({\n        settings: settings\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDatePickerChange\", function (field, value) {\n      var settings = update(_this.state.settings, _defineProperty({}, field, {\n        $set: value\n      }));\n\n      _this.setState({\n        settings: settings\n      }, function () {\n        return _this.handleStudentTestApiUpdate(field, value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveTestChanges\", function () {\n      var onSaveTestChanges = _this.props.onSaveTestChanges;\n      var _this$state = _this.state,\n          testVersion = _this$state.testVersion,\n          _this$state$settings = _this$state.settings,\n          unformattedTestDate = _this$state$settings.testDate,\n          unformattedDueDate = _this$state$settings.dueDate,\n          allowStudentToEnterAnswers = _this$state$settings.allowStudentToEnterAnswers,\n          timed = _this$state$settings.timed;\n      var testDate = moment(unformattedTestDate).format('MM/DD/YY');\n      var dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n      onSaveTestChanges(testVersion, {\n        testDate: testDate,\n        dueDate: dueDate,\n        allowStudentToEnterAnswers: allowStudentToEnterAnswers,\n        timed: timed\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStudentTestApiUpdate\", function _callee(name, value) {\n      var student_test_id, postDate;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              student_test_id = _this.props.test.student_test_id;\n              postDate = moment(value).format('YYYY-MM-DD');\n              _context.t0 = name;\n              _context.next = _context.t0 === \"dueDate\" ? 5 : _context.t0 === \"testDate\" ? 6 : 7;\n              break;\n\n            case 5:\n              return _context.abrupt(\"return\", updateStudentTestDueDate({\n                student_test_id: student_test_id,\n                due_date: postDate\n              }));\n\n            case 6:\n              return _context.abrupt(\"return\", updateStudentTestAssignmentDate({\n                student_test_id: student_test_id,\n                assignment_date: postDate\n              }));\n\n            case 7:\n              return _context.abrupt(\"break\", 8);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _this.state = {\n      testVersion: {\n        version: '',\n        sections: {\n          reading: false,\n          writing: false,\n          math: false,\n          essay: false\n        },\n        includeScoreInImprovementMetrics: false\n      },\n      settings: {\n        testDate: '',\n        dueDate: '',\n        allowStudentToEnterAnswers: false,\n        timed: false\n      }\n    };\n    return _this;\n  }\n\n  _createClass(TestVersion, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$test = this.props.test,\n          unformattedTestDate = _this$props$test.assignment_date,\n          unformattedDueDate = _this$props$test.dueDate;\n      var testDate = new Date(unformattedTestDate);\n      var dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n      var settings = update(this.state.settings, {\n        testDate: {\n          $set: testDate\n        },\n        dueDate: {\n          $set: dueDate\n        }\n      });\n      this.setState({\n        settings: settings\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props$test2 = this.props.test,\n          unformattedTestDate = _this$props$test2.testDate,\n          unformattedDueDate = _this$props$test2.dueDate;\n      var testDate = new Date(unformattedTestDate);\n      var dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n\n      if (prevProps.test.id !== this.props.test.id) {\n        var settings = update(this.state.settings, {\n          testDate: {\n            $set: testDate\n          },\n          dueDate: {\n            $set: dueDate\n          }\n        });\n        this.setState({\n          settings: settings\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          test = _this$props.test,\n          user = _this$props.user,\n          onDeleteTest = _this$props.onDeleteTest;\n      var completionDate = test.completionDate,\n          completionTime = test.completionTime;\n      var _user$studentInformat = user.studentInformation,\n          firstName = _user$studentInformat.firstName,\n          lastName = _user$studentInformat.lastName;\n      var _this$state2 = this.state,\n          _this$state2$testVers = _this$state2.testVersion,\n          _this$state2$testVers2 = _this$state2$testVers.sections,\n          reading = _this$state2$testVers2.reading,\n          writing = _this$state2$testVers2.writing,\n          math = _this$state2$testVers2.math,\n          essay = _this$state2$testVers2.essay,\n          version = _this$state2$testVers.version,\n          includeScoreInImprovementMetrics = _this$state2$testVers.includeScoreInImprovementMetrics,\n          _this$state2$settings = _this$state2.settings,\n          testDate = _this$state2$settings.testDate,\n          dueDate = _this$state2$settings.dueDate,\n          allowStudentToEnterAnswers = _this$state2$settings.allowStudentToEnterAnswers,\n          timed = _this$state2$settings.timed;\n      return __jsx(\"div\", {\n        className: \"container-xsmall\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"row d-flex-content card-width-322\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-main-col col s12 m8 l7 xl5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, __jsx(TestVersionSettings, {\n        version: version,\n        reading: reading,\n        writing: writing,\n        math: math,\n        essay: essay,\n        includeScoreInImprovementMetrics: includeScoreInImprovementMetrics,\n        handleTestVersionSettingsChange: this.handleTestVersionSettingsChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), __jsx(Settings, {\n        timed: timed,\n        testDate: testDate,\n        dueDate: dueDate,\n        handleSettingsChange: this.handleSettingsChange,\n        handleDatePickerChange: this.handleDatePickerChange,\n        allowStudentToEnterAnswers: allowStudentToEnterAnswers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        className: \"card-main-col col s12 m8 l7 xl5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Status\"), __jsx(\"div\", {\n        className: \"card card-test-detail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"meta-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, completionDate.length ? __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"Completed :\", \" \", __jsx(\"time\", {\n        dateTime: \"2018-12-29\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, completionDate, \" at \", completionTime), completionDate.length && test.dueDate < completionDate ? __jsx(\"span\", {\n        className: \"badge white-text badge-rounded-sm\",\n        style: {\n          backgroundColor: \"#db1d41\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, __jsx(\"b\", {\n        className: \"badge-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"late\")) : null) : null, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Answers Entered by: \", firstName, \" \", lastName, \" (student)\")))))), __jsx(\"div\", {\n        className: \"btn-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        href: \"#\",\n        className: \"btn\",\n        onClick: this.saveTestChanges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Save\"), __jsx(\"a\", {\n        href: \"#\",\n        className: \"waves-effect waves-teal btn-flat pink-text text-darken-1\",\n        onClick: onDeleteTest,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Delete\")));\n    }\n  }]);\n\n  return TestVersion;\n}(React.Component);\n\nexport default TestVersion;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/TestVersionPage/index.js"],"names":["React","update","moment","TestVersionSettings","Settings","updateStudentTestDueDate","updateStudentTestAssignmentDate","TestVersion","props","event","sections","state","testVersion","target","setting","name","undefined","$set","version","setState","previousSettings","settings","field","value","handleStudentTestApiUpdate","onSaveTestChanges","unformattedTestDate","testDate","unformattedDueDate","dueDate","allowStudentToEnterAnswers","timed","format","student_test_id","test","postDate","due_date","assignment_date","reading","writing","math","essay","includeScoreInImprovementMetrics","Date","prevProps","id","user","onDeleteTest","completionDate","completionTime","studentInformation","firstName","lastName","handleTestVersionSettingsChange","handleSettingsChange","handleDatePickerChange","length","backgroundColor","saveTestChanges","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport TestVersionSettings from '../EditTestModal/components/TestVersionSettings';\nimport Settings from '../EditTestModal/components/Settings';\n\n\nimport {\n  updateStudentTestDueDate,\n  updateStudentTestAssignmentDate,\n} from '../../../index/api';\n\nclass TestVersion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      testVersion: {\n        version: '',\n        sections: {\n          reading: false,\n          writing: false,\n          math: false,\n          essay: false,\n        },\n        includeScoreInImprovementMetrics: false,\n      },\n      settings: {\n        testDate: '',\n        dueDate: '',\n        allowStudentToEnterAnswers: false,\n        timed: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { test: { assignment_date: unformattedTestDate, dueDate: unformattedDueDate } } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n    const settings = update(this.state.settings, {\n      testDate: {\n        $set: testDate,\n      },\n      dueDate: {\n        $set: dueDate,\n      },\n    });\n    this.setState({ settings });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { test: { testDate: unformattedTestDate, dueDate: unformattedDueDate } } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n    if (prevProps.test.id !== this.props.test.id) {\n      const settings = update(this.state.settings, {\n        testDate: {\n          $set: testDate,\n        },\n        dueDate: {\n          $set: dueDate,\n        },\n      });\n      this.setState({ settings });\n    }\n  }\n\n  handleTestVersionSettingsChange = (event) => {\n    const { testVersion: { sections } } = this.state;\n    let testVersion;\n    if (event.target) {\n      const { target: { name: setting } } = event;\n      if (sections[setting] !== undefined) {\n        testVersion = update(this.state.testVersion, {\n          sections: {\n            [setting]: {\n              $set: !sections[setting],\n            },\n          },\n        });\n      } else {\n        testVersion = update(this.state.testVersion, {\n          [setting]: {\n            $set: !this.state.testVersion[setting],\n          },\n        });\n      }\n    } else {\n      testVersion = update(this.state.testVersion, {\n        version: {\n          $set: event,\n        },\n      });\n    }\n    this.setState({ testVersion });\n  }\n\n  handleSettingsChange = (event) => {\n    const { settings: previousSettings } = this.state;\n    const { target: { name: setting } } = event;\n    const settings = update(this.state.settings, {\n      [setting]: {\n        $set: !previousSettings[setting],\n      },\n    });\n    this.setState({ settings });\n  }\n\n  handleDatePickerChange = (field, value) => {\n    const settings = update(this.state.settings, {\n      [field]: {\n        $set: value,\n      },\n    });\n    this.setState({ settings }, () => this.handleStudentTestApiUpdate(field, value));\n  }\n\n  saveTestChanges = () => {\n    const { onSaveTestChanges } = this.props;\n    const { testVersion, settings: { testDate: unformattedTestDate, dueDate: unformattedDueDate, allowStudentToEnterAnswers, timed } } = this.state;\n    const testDate = moment(unformattedTestDate).format('MM/DD/YY');\n    const dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n    onSaveTestChanges(testVersion, { testDate, dueDate, allowStudentToEnterAnswers, timed });\n  }\n\n  handleStudentTestApiUpdate = async(name, value) => {\n    const {student_test_id} = this.props.test;\n    const postDate =  moment(value).format('YYYY-MM-DD');\n    switch (name) {\n      case \"dueDate\":\n        return updateStudentTestDueDate({student_test_id:student_test_id,due_date:postDate});\n      case \"testDate\":\n        return updateStudentTestAssignmentDate({student_test_id:student_test_id,assignment_date:postDate});\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const { test, user, onDeleteTest } = this.props;\n    const { completionDate, completionTime } = test;\n    const { studentInformation: { firstName, lastName } } = user;\n    const { testVersion: {sections: { reading, writing, math, essay },version, includeScoreInImprovementMetrics},\n      settings: { testDate, dueDate, allowStudentToEnterAnswers, timed },\n    } = this.state;\n    return (\n      <div className=\"container-xsmall\">\n        <div className=\"row d-flex-content card-width-322\">\n          <div className=\"card-main-col col s12 m8 l7 xl5\">\n            <TestVersionSettings\n              version={version}\n              reading={reading}\n              writing={writing}\n              math={math}\n              essay={essay}\n              includeScoreInImprovementMetrics={ includeScoreInImprovementMetrics}\n              handleTestVersionSettingsChange={ this.handleTestVersionSettingsChange}\n            />\n            <Settings\n              timed={timed}\n              testDate={testDate}\n              dueDate={dueDate}\n              handleSettingsChange={this.handleSettingsChange}\n              handleDatePickerChange={this.handleDatePickerChange}\n              allowStudentToEnterAnswers={allowStudentToEnterAnswers}\n            />\n          </div>\n          <div className=\"card-main-col col s12 m8 l7 xl5\">\n            <h2>Status</h2>\n            <div className=\"card card-test-detail\">\n              <div className=\"card-content\">\n                <div className=\"meta-info\">\n                  <If condition={completionDate.length}>\n                    <p>\n                      Completed :{\" \"}\n                      <time dateTime=\"2018-12-29\">\n                        {completionDate} at {completionTime}\n                      </time>\n                      <If\n                        condition={\n                          completionDate.length && test.dueDate < completionDate\n                        }\n                      >\n                        <span\n                          className=\"badge white-text badge-rounded-sm\"\n                          style={{ backgroundColor: \"#db1d41\" }}\n                        >\n                          <b className=\"badge-text\">late</b>\n                        </span>\n                      </If>\n                    </p>\n                  </If>\n                  <p>\n                    Answers Entered by: {firstName} {lastName} (student)\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"btn-holder\">\n          <a href=\"#\" className=\"btn\" onClick={this.saveTestChanges}>\n            Save\n          </a>\n          <a\n            href=\"#\"\n            className=\"waves-effect waves-teal btn-flat pink-text text-darken-1\"\n            onClick={onDeleteTest}\n          >\n            Delete\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TestVersion;\n"]},"metadata":{},"sourceType":"module"}