{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\nconst areaColorMap = {\n  maroon: '#ce237a',\n  blue: '#1aa3ef',\n  purple: '#752189',\n  green: '#3a8745',\n  orange: '#e28100'\n};\n\nconst data = (percentage, color) => ({\n  datasets: [{\n    data: [100, 100 - percentage],\n    backgroundColor: [areaColorMap[color], 'rgb(234, 234, 234)']\n  }]\n}); // TODO: Implement doughnut charts\n\n\nconst CourseProgress = ({\n  state: {\n    startDate,\n    testDate,\n    progress,\n    improvement,\n    lessons,\n    instruction,\n    practiceTests\n  },\n  active\n}) => __jsx(\"div\", {\n  className: \"col s12 l7 card-width-747\"\n}, __jsx(\"div\", {\n  className: \"card-main card card-chart\"\n}, __jsx(\"div\", {\n  className: \"card-content\"\n}, __jsx(\"h2\", null, \"Course Progress\"), __jsx(\"div\", {\n  className: \"progress-block\"\n}, __jsx(\"div\", {\n  className: \"progress-legend\"\n}, active ? [__jsx(\"div\", {\n  className: \"legend-block\",\n  key: \"0\"\n}, __jsx(\"span\", {\n  className: \"small-text\"\n}, \"Start Date\"), __jsx(\"time\", {\n  dateTime: \"2018-06-13\",\n  className: \"large-text\"\n}, startDate)), __jsx(\"div\", {\n  className: \"legend-block\",\n  key: \"1\"\n}, __jsx(\"span\", {\n  className: \"small-text\"\n}, \"Test Date\"), __jsx(\"time\", {\n  dateTime: \"2018-10-06\",\n  className: \"large-text\"\n}, \"Oct SAT (\", testDate, \")\"))] : __jsx(\"span\", {\n  className: \"text-frame\"\n}, \"Once the course begins, check here to be sure the student is on track.\")), __jsx(\"div\", {\n  className: \"progress\"\n}, __jsx(\"div\", {\n  className: \"determinate\",\n  style: {\n    width: active ? `${progress}%` : '0%'\n  }\n}, active && __jsx(\"span\", {\n  className: \"progress-label\"\n}, progress, \"%\")))), __jsx(\"div\", {\n  className: \"charts-container\"\n}, __jsx(\"div\", {\n  className: \"row mb-0\"\n}, __jsx(\"div\", {\n  className: \"col\"\n}, __jsx(\"div\", {\n  className: \"chart-block\"\n}, active ? __jsx(Doughnut, {\n  data: () => data(improvement, 'maroon'),\n  width: 156,\n  height: 156,\n  options: {\n    cutoutPercentage: 75\n  }\n}) : __jsx(\"div\", {\n  className: \"js-donut-chart js-donut-middle\",\n  \"data-stroke-width\": \"20\",\n  \"data-source\": \"./inc/score-data-improvement.json\"\n}), __jsx(\"div\", {\n  className: \"chart-text\"\n}, __jsx(\"span\", {\n  className: \"title\"\n}, \"Improvement\"), active ? [__jsx(\"span\", {\n  className: \"value\",\n  key: \"0\"\n}, improvement, \"%\"), __jsx(\"span\", {\n  className: \"description\",\n  key: \"1\"\n}, \"vs target score\")] : __jsx(\"span\", {\n  className: \"inactive-text\"\n}, \"None Yet\")))), __jsx(\"div\", {\n  className: \"col\"\n}, __jsx(\"div\", {\n  className: \"chart-block\"\n}, active ? __jsx(Doughnut, {\n  data: () => data(lessons, 'purple'),\n  width: 156,\n  height: 156,\n  options: {\n    cutoutPercentage: 75\n  }\n}) : __jsx(\"div\", {\n  className: \"js-donut-chart js-donut-middle\",\n  \"data-stroke-width\": \"20\",\n  \"data-source\": \"./inc/score-data-improvement.json\"\n}), __jsx(\"div\", {\n  className: \"chart-text\"\n}, __jsx(\"span\", {\n  className: \"title\"\n}, \"Lessons\"), active ? [__jsx(\"span\", {\n  className: \"value\",\n  key: \"0\"\n}, lessons, \"%\"), __jsx(\"span\", {\n  className: \"description\",\n  key: \"1\"\n}, \"vs scheduled lessons\")] : __jsx(\"span\", {\n  className: \"inactive-text\"\n}, \"None Scheduled\")))), __jsx(\"div\", {\n  className: \"col\"\n}, __jsx(\"div\", {\n  className: \"chart-block\"\n}, active ? __jsx(Doughnut, {\n  data: () => data(instruction, 'orange'),\n  width: 156,\n  height: 156,\n  options: {\n    cutoutPercentage: 75\n  }\n}) : __jsx(\"div\", {\n  className: \"js-donut-chart js-donut-middle\",\n  \"data-stroke-width\": \"20\",\n  \"data-source\": \"./inc/score-data-improvement.json\"\n}), __jsx(\"div\", {\n  className: \"chart-text\"\n}, __jsx(\"span\", {\n  className: \"title\"\n}, \"Instruction\"), active ? [__jsx(\"span\", {\n  className: \"value\",\n  key: \"0\"\n}, instruction, \"%\"), __jsx(\"span\", {\n  className: \"description\",\n  key: \"1\"\n}, \"vs scheduled instruction\")] : __jsx(\"span\", {\n  className: \"inactive-text\"\n}, \"None Scheduled\")))), __jsx(\"div\", {\n  className: \"col\"\n}, __jsx(\"div\", {\n  className: \"chart-block\"\n}, active ? __jsx(Doughnut, {\n  data: () => data(practiceTests, 'blue'),\n  width: 156,\n  height: 156,\n  options: {\n    cutoutPercentage: 75\n  }\n}) : __jsx(\"div\", {\n  className: \"js-donut-chart js-donut-middle\",\n  \"data-stroke-width\": \"20\",\n  \"data-source\": \"./inc/score-data-improvement.json\"\n}), __jsx(\"div\", {\n  className: \"chart-text\"\n}, __jsx(\"span\", {\n  className: \"title\"\n}, \"Practice Tests\"), active ? [__jsx(\"span\", {\n  className: \"value\",\n  key: \"0\"\n}, practiceTests, \"%\"), __jsx(\"span\", {\n  className: \"description\",\n  key: \"1\"\n}, \"vs scheduled tests\")] : __jsx(\"span\", {\n  className: \"inactive-text\"\n}, \"None Scheduled\"))))), active ? __jsx(\"div\", {\n  className: \"chart-legend\"\n}, __jsx(\"div\", {\n  className: \"row mb-0\"\n}, __jsx(\"div\", {\n  className: \"col legend-frame\"\n}, __jsx(\"span\", {\n  className: \"box complete\"\n}), __jsx(\"span\", {\n  className: \"text\"\n}, \"Complete\")), __jsx(\"div\", {\n  className: \"col legend-frame\"\n}, __jsx(\"span\", {\n  className: \"box behind\"\n}), __jsx(\"span\", {\n  className: \"text\"\n}, \"Behind Schedule\")))) : null))));\n\nCourseProgress.propTypes = {\n  state: PropTypes.object.isRequired,\n  active: PropTypes.bool.isRequired\n};\nexport default CourseProgress;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/DetailSummaryPage/components/CourseProgress/index.js"],"names":["React","PropTypes","Doughnut","areaColorMap","maroon","blue","purple","green","orange","data","percentage","color","datasets","backgroundColor","CourseProgress","state","startDate","testDate","progress","improvement","lessons","instruction","practiceTests","active","width","cutoutPercentage","propTypes","object","isRequired","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst areaColorMap = {\n  maroon: '#ce237a',\n  blue: '#1aa3ef',\n  purple: '#752189',\n  green: '#3a8745',\n  orange: '#e28100',\n};\n\nconst data = (percentage, color) => ({\n  datasets: [{\n    data: [100, 100-percentage],\n    backgroundColor: [\n      areaColorMap[color],\n      'rgb(234, 234, 234)',\n    ],\n  }],\n})\n\n  // TODO: Implement doughnut charts\n  const CourseProgress = ({ state: { startDate, testDate, progress, improvement, lessons, instruction, practiceTests }, active }) => (\n  <div className=\"col s12 l7 card-width-747\">\n    <div className=\"card-main card card-chart\">\n      <div className=\"card-content\">\n        <h2>Course Progress</h2>\n        <div className=\"progress-block\">\n          <div className=\"progress-legend\">\n            <Choose>\n              <When condition={active}>\n                <div className=\"legend-block\">\n                  <span className=\"small-text\">Start Date</span>\n                  <time dateTime=\"2018-06-13\" className=\"large-text\">{startDate}</time>\n                </div>\n                <div className=\"legend-block\">\n                  <span className=\"small-text\">Test Date</span>\n                  <time dateTime=\"2018-10-06\" className=\"large-text\">Oct SAT ({testDate})</time>\n                </div>\n              </When>\n              <Otherwise>\n                <span className=\"text-frame\">Once the course begins, check here to be sure the student is on track.</span>\n              </Otherwise>\n            </Choose>\n          </div>\n          <div className=\"progress\">\n            <div className=\"determinate\" style={{ width: active ? `${progress}%` : '0%'}}>\n                {active && <span className=\"progress-label\">{progress}%</span>}\n              </div>\n          </div>\n        </div>\n        <div className=\"charts-container\">\n          <div className=\"row mb-0\">\n            <div className=\"col\">\n              <div className=\"chart-block\">\n              <Choose>\n                <When condition={active}>\n                <Doughnut\n                  data={() => data(improvement, 'maroon')}\n                  width={156}\n                  height={156}\n                  options={{\n                    cutoutPercentage: 75,\n                  }}\n                />\n                </When>\n                <Otherwise>\n                <div className=\"js-donut-chart js-donut-middle\" data-stroke-width=\"20\" data-source='./inc/score-data-improvement.json'></div>\n                </Otherwise>\n              </Choose>\n                <div className=\"chart-text\">\n                  <span className=\"title\">Improvement</span>\n                  <Choose>\n                    <When condition={active}>\n                      <span className=\"value\">{improvement}%</span>\n                      <span className=\"description\">vs target score</span>\n                    </When>\n                    <Otherwise>\n                      <span className=\"inactive-text\">None Yet</span>\n                    </Otherwise>\n                  </Choose>\n\n                </div>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"chart-block\">\n              <Choose>\n                <When condition={active}>\n                <Doughnut\n                  data={() => data(lessons, 'purple')}\n                  width={156}\n                  height={156}\n                  options={{\n                    cutoutPercentage: 75,\n                  }}\n                />\n                </When>\n                <Otherwise>\n                <div className=\"js-donut-chart js-donut-middle\" data-stroke-width=\"20\" data-source='./inc/score-data-improvement.json'></div>\n                </Otherwise>\n              </Choose>\n                 <div className=\"chart-text\">\n                  <span className=\"title\">Lessons</span>\n                  <Choose>\n                    <When condition={active}>\n                      <span className=\"value\">{lessons}%</span>\n                      <span className=\"description\">vs scheduled lessons</span>\n                    </When>\n                    <Otherwise>\n                      <span className=\"inactive-text\">None Scheduled</span>\n                    </Otherwise>\n                  </Choose>\n                </div>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"chart-block\">\n              <Choose>\n                <When condition={active}>\n                <Doughnut\n                  data={() => data(instruction, 'orange')}\n                  width={156}\n                  height={156}\n                  options={{\n                    cutoutPercentage: 75,\n                  }}\n                />\n                </When>\n                <Otherwise>\n                <div className=\"js-donut-chart js-donut-middle\" data-stroke-width=\"20\" data-source='./inc/score-data-improvement.json'></div>\n                </Otherwise>\n              </Choose>\n                <div className=\"chart-text\">\n                  <span className=\"title\">Instruction</span>\n                  <Choose>\n                    <When condition={active}>\n                      <span className=\"value\">{instruction}%</span>\n                      <span className=\"description\">vs scheduled instruction</span>\n                    </When>\n                    <Otherwise>\n                      <span className=\"inactive-text\">None Scheduled</span>\n                    </Otherwise>\n                  </Choose>\n                </div>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"chart-block\">\n              <Choose>\n                <When condition={active}>\n                  <Doughnut\n                    data={() => data(practiceTests, 'blue')}\n                    width={156}\n                    height={156}\n                    options={{\n                      cutoutPercentage: 75,\n                    }}\n                  />\n                </When>\n                <Otherwise>\n                  <div className=\"js-donut-chart js-donut-middle\" data-stroke-width=\"20\" data-source='./inc/score-data-improvement.json'></div>\n                </Otherwise>\n              </Choose>\n                 <div className=\"chart-text\">\n                  <span className=\"title\">Practice Tests</span>\n                  <Choose>\n                    <When condition={active}>\n                      <span className=\"value\">{practiceTests}%</span>\n                      <span className=\"description\">vs scheduled tests</span>\n                    </When>\n                    <Otherwise>\n                      <span className=\"inactive-text\">None Scheduled</span>\n                    </Otherwise>\n                  </Choose>\n                </div>\n              </div>\n            </div>\n          </div>\n          <If condition={active}>\n            <div className=\"chart-legend\">\n              <div className=\"row mb-0\">\n                <div className=\"col legend-frame\">\n                  <span className=\"box complete\"></span>\n                  <span className=\"text\">Complete</span>\n                </div>\n                <div className=\"col legend-frame\">\n                  <span className=\"box behind\"></span>\n                  <span className=\"text\">Behind Schedule</span>\n                </div>\n              </div>\n            </div>\n          </If>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nCourseProgress.propTypes = {\n  state: PropTypes.object.isRequired,\n  active: PropTypes.bool.isRequired,\n};\n\nexport default CourseProgress;\n"]},"metadata":{},"sourceType":"module"}