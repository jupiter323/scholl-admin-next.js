{"ast":null,"code":"import _objectSpread2 from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createStructuredSelector } from 'reselect';\nimport { deleteStudent } from '../components/Student/index/actions';\nimport { fetchStudents, addNewStudent } from '../components/Student/index/actions';\nimport { makeSelectStudents } from '../components/Student/index/selectors';\nimport StudentCard from '../components/Student/components/StudentCard';\nimport sampleStudentList from '../components/Student/utils/sampleStudentList';\nimport FilterSection from '../components/Student/ListPage/Components/FilterSection';\nimport StudentModal from '../components/Student/components/StudentModal';\nimport IndividualStudentPage from '../components/Student/IndividualStudentPage';\nimport LocationModal from '../components/Location/components/LocationModal';\nimport { fetchStudentsApi, deleteStudentApi } from '../components/Student/index/api';\n\nvar idGenerator = function idGenerator() {\n  return subIdGenerator() + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + subIdGenerator() + subIdGenerator();\n};\n\nvar subIdGenerator = function subIdGenerator() {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar Students =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Students, _Component);\n\n  function Students(props) {\n    var _this;\n\n    _classCallCheck(this, Students);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Students).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var onFetchStudents = _this.props.onFetchStudents;\n      onFetchStudents();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenStudentModal\", function () {\n      return _this.setState({\n        studentModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseStudentModal\", function () {\n      return _this.setState({\n        studentModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenLocationModal\", function () {\n      return _this.setState({\n        locationModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseLocationModal\", function () {\n      return _this.setState({\n        locationModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (filterName) {\n      return _this.setState({\n        filterName: filterName\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function () {\n      return _this.setState({\n        filterName: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredLocationState\", function (location) {\n      return _this.setState({\n        location: location\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredLocationState\", function () {\n      return _this.setState({\n        location: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveNewStudent\", function _callee() {\n      var previousStudentState, onAddNewStudent, newStudent;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              previousStudentState = _this.state.newStudent; // dispatch add student action\n\n              onAddNewStudent = _this.props.onAddNewStudent;\n              onAddNewStudent(previousStudentState);\n              newStudent = update(previousStudentState, {\n                $set: {\n                  active: false,\n                  studentInformation: {\n                    firstName: '',\n                    lastName: '',\n                    gender: ''\n                  },\n                  contactInformation: {\n                    phone: '',\n                    addressLine1: '',\n                    addressLine2: '',\n                    city: '',\n                    state: '',\n                    zipCode: ''\n                  },\n                  emailAddress: {\n                    email: ''\n                  },\n                  location: {\n                    locations: []\n                  }\n                }\n              });\n\n              _this.setState({\n                newStudent: newStudent\n              }); // eslint-disable-next-line no-console\n\n\n              console.warn('do something with the new student info');\n\n              _this.onCloseStudentModal();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteNewStudent\", function () {\n      var previousStudentState = _this.state.newStudent;\n      var newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: '',\n            lastName: '',\n            gender: ''\n          },\n          contactInformation: {\n            phone: '',\n            addressLine1: '',\n            addressLine2: '',\n            city: '',\n            state: '',\n            zipCode: ''\n          },\n          emailAddress: {\n            email: ''\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n\n      _this.setState({\n        newStudent: newStudent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRemoveLocation\", function (index) {\n      var previousStudentState = _this.state.newStudent;\n      var locations = _this.state.newStudent.location.locations;\n\n      var newLocationsArray = _this.arrayItemRemover(locations, locations[index]);\n\n      var newStudent = update(previousStudentState, {\n        location: {\n          $set: {\n            locations: newLocationsArray\n          }\n        }\n      });\n\n      _this.setState({\n        newStudent: newStudent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByName\", function () {\n      var _this$state = _this.state,\n          students = _this$state.students,\n          filterName = _this$state.filterName;\n      return students.reduce(function (finalArr, currentStudent) {\n        var lastName = currentStudent.lastName,\n            firstName = currentStudent.firstName;\n        var studentString = \"\".concat(firstName.toLowerCase()).concat(lastName.toLowerCase());\n\n        if (studentString.indexOf(filterName) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n          finalArr.push(currentStudent);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleStudentCard\", function (index) {\n      var students = _this.state.students;\n\n      _this.setState({\n        selectedStudent: students[index]\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRedirectToStudentPage\", function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        selectedStudent: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteStudent\", function (index) {\n      var onDeleteStudent = _this.props.onDeleteStudent;\n      var students = _this.state.students; // Dispatch deleteStudent\n\n      onDeleteStudent(students[index].id);\n\n      var newStudentArray = _this.arrayItemRemover(students, students[index]);\n\n      _this.setState({\n        students: newStudentArray\n      });\n\n      var student_id = students[index].id;\n      deleteStudentApi({\n        student_id: student_id\n      });\n\n      _this.onCloseDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloneStudent\", function (index) {\n      var students = _this.state.students;\n      var newStudent = update(students[index], {\n        id: {\n          $set: idGenerator()\n        }\n      });\n\n      _this.setState(function (prevState) {\n        prevState.students.push(newStudent);\n        return {\n          students: prevState.students\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event, name, section) {\n      var previousStudentState = _this.state.newStudent;\n      var value = event.target ? event.target.value : event;\n      var updatedStudent = update(previousStudentState, _defineProperty({}, section, {\n        $merge: _defineProperty({}, name, value)\n      }));\n\n      _this.setState({\n        newStudent: updatedStudent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveStudentChanges\", function (updatedStudent) {\n      var originalStudents = _this.state.students;\n      var active = updatedStudent.active,\n          studentInformation = updatedStudent.studentInformation,\n          contactInformation = updatedStudent.contactInformation,\n          emailAddress = updatedStudent.emailAddress,\n          location = updatedStudent.location;\n      var studentToUpdate = originalStudents.filter(function (student) {\n        return student.id === updatedStudent.id;\n      })[0];\n      var updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n      var students = update(originalStudents, _defineProperty({}, updatedStudentIndex, {\n        $merge: {\n          active: active,\n          studentInformation: studentInformation,\n          contactInformation: contactInformation,\n          emailAddress: emailAddress,\n          location: location\n        }\n      }));\n\n      _this.setState({\n        students: students\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIsOpen: true,\n        dropdownIndex: dropdownIndex\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false,\n        dropdownIndex: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"arrayItemRemover\", function (array, value) {\n      return array.filter(function (student) {\n        return student !== value;\n      });\n    });\n\n    _this.state = {\n      selectedStudent: null,\n      students: sampleStudentList,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Students, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          studentModalOpen = _this$state2.studentModalOpen,\n          students = _this$state2.students,\n          selectedStudent = _this$state2.selectedStudent;\n      return __jsx(\"main\", {\n        id: \"main\",\n        role: \"main\"\n      }, __jsx(\"div\", {\n        className: \"main-holder grey lighten-5\"\n      }, __jsx(StickyContainer, null, !selectedStudent && __jsx(React.Fragment, null, __jsx(Sticky, null, function (_ref) {\n        var style = _ref.style;\n        return __jsx(\"div\", {\n          className: \"title-row card-panel\",\n          style: _objectSpread2({}, style, {\n            zIndex: 1999\n          })\n        }, __jsx(\"div\", {\n          className: \"mobile-header\"\n        }, __jsx(\"a\", {\n          href: \"#\",\n          \"data-target\": \"slide-out\",\n          className: \"sidenav-trigger\"\n        }, __jsx(\"i\", {\n          className: \"material-icons\"\n        }, \"menu\"))), __jsx(\"h2\", {\n          className: \"h1 white-text\"\n        }, __jsx(\"span\", {\n          className: \"heading-holder\"\n        }, __jsx(\"i\", {\n          className: \"icon-student\"\n        }), __jsx(\"span\", {\n          className: \"heading-block\"\n        }, \"Students\"))));\n      }), __jsx(FilterSection, {\n        onSetSort: this.onSetSort,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState,\n        onSetFilteredLocationState: this.onSetFilteredLocationState,\n        onUnsetFilteredLocationState: this.onUnsetFilteredLocationState,\n        handleFilterClick: this.handleFilterClick,\n        onFilterByName: this.onFilterByName\n      }), __jsx(\"div\", {\n        className: \"content-section\"\n      }, __jsx(\"div\", {\n        className: \"row d-flex-content\"\n      }, students.map(function (student, index) {\n        return __jsx(StudentCard, {\n          student: student,\n          index: index,\n          id: student.id,\n          key: student.id,\n          dropdownIsOpen: _this2.state.dropdownIsOpen,\n          dropdownIndex: _this2.state.dropdownIndex,\n          onSetDropdown: _this2.onSetDropdown,\n          onCloseDropdown: _this2.onCloseDropdown,\n          onHandleStudentCard: function onHandleStudentCard() {\n            return _this2.onHandleStudentCard(index);\n          },\n          onDeleteStudent: function onDeleteStudent() {\n            return _this2.onDeleteStudent(index);\n          },\n          onCloneStudent: function onCloneStudent() {\n            return _this2.onCloneStudent(index, student.id);\n          },\n          onSaveStudentChanges: _this2.onSaveStudentChanges\n        });\n      }))), __jsx(\"a\", {\n        href: \"#\",\n        className: \"waves-effect waves-teal btn add-btn modal-trigger\",\n        onClick: this.onOpenStudentModal\n      }, __jsx(\"i\", {\n        className: \"material-icons\"\n      }, \"add\"), \"New Student\"), __jsx(StudentModal, {\n        open: studentModalOpen,\n        onClose: this.onCloseStudentModal,\n        handleChange: this.handleChange,\n        state: this.state.newStudent,\n        onSave: this.onSaveNewStudent,\n        onOpenLocationModal: this.onOpenLocationModal,\n        onRemoveLocation: this.onRemoveLocation,\n        onDeleteNewStudent: this.onDeleteNewStudent\n      }), __jsx(LocationModal, {\n        open: this.state.locationModalOpen,\n        onClose: this.onCloseLocationModal,\n        handleLocationsChange: function handleLocationsChange(selectedLocations) {\n          return _this2.handleChange(selectedLocations, 'locations', 'location');\n        }\n      })), selectedStudent && __jsx(IndividualStudentPage, {\n        student: selectedStudent,\n        onRedirectToStudentPage: this.onRedirectToStudentPage\n      }))));\n    }\n  }]);\n\n  return Students;\n}(Component);\n\nStudents.propTypes = {\n  students: PropTypes.array.isRequired,\n  onFetchStudents: PropTypes.func.isRequired,\n  onAddNewStudent: PropTypes.func.isRequired,\n  onDeleteStudent: PropTypes.func.isRequired\n};\nvar mapStateToProps = createStructuredSelector({\n  students: makeSelectStudents()\n});\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onDeleteStudent: function onDeleteStudent(id) {\n      return dispatch(deleteStudent(id));\n    },\n    onFetchStudents: function onFetchStudents() {\n      return dispatch(fetchStudents());\n    },\n    onAddNewStudent: function onAddNewStudent(student) {\n      return dispatch(addNewStudent(student));\n    }\n  };\n};\n\nvar withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(Students);","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/pages/students.js"],"names":["React","Component","update","StickyContainer","Sticky","compose","connect","PropTypes","createStructuredSelector","deleteStudent","fetchStudents","addNewStudent","makeSelectStudents","StudentCard","sampleStudentList","FilterSection","StudentModal","IndividualStudentPage","LocationModal","fetchStudentsApi","deleteStudentApi","idGenerator","subIdGenerator","Math","floor","random","toString","substring","Students","props","onFetchStudents","setState","studentModalOpen","locationModalOpen","sort","filterName","location","previousStudentState","state","newStudent","onAddNewStudent","$set","active","studentInformation","firstName","lastName","gender","contactInformation","phone","addressLine1","addressLine2","city","zipCode","emailAddress","email","locations","console","warn","onCloseStudentModal","index","newLocationsArray","arrayItemRemover","students","reduce","finalArr","currentStudent","studentString","toLowerCase","indexOf","push","selectedStudent","event","preventDefault","onDeleteStudent","id","newStudentArray","student_id","onCloseDropdown","prevState","name","section","value","target","updatedStudent","$merge","originalStudents","studentToUpdate","filter","student","updatedStudentIndex","dropdownIndex","dropdownIsOpen","array","style","zIndex","onSetSort","onSetFilteredState","onUnsetFilteredState","onSetFilteredLocationState","onUnsetFilteredLocationState","handleFilterClick","onFilterByName","map","onSetDropdown","onHandleStudentCard","onCloneStudent","onSaveStudentChanges","onOpenStudentModal","handleChange","onSaveNewStudent","onOpenLocationModal","onRemoveLocation","onDeleteNewStudent","onCloseLocationModal","selectedLocations","onRedirectToStudentPage","propTypes","isRequired","func","mapStateToProps","mapDispatchToProps","dispatch","withConnect"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createStructuredSelector } from 'reselect';\nimport {deleteStudent} from '../components/Student/index/actions';\nimport {fetchStudents, addNewStudent} from '../components/Student/index/actions';\nimport {makeSelectStudents} from '../components/Student/index/selectors';\nimport StudentCard from '../components/Student/components/StudentCard';\n  import sampleStudentList from '../components/Student/utils/sampleStudentList';\nimport FilterSection from '../components/Student/ListPage/Components/FilterSection';\nimport StudentModal from '../components/Student/components/StudentModal';\nimport IndividualStudentPage from '../components/Student/IndividualStudentPage';\nimport LocationModal from '../components/Location/components/LocationModal';\n\nimport {\n  fetchStudentsApi,\n  deleteStudentApi,\n} from '../components/Student/index/api';\n\n\nconst idGenerator = () => {\n  return subIdGenerator() + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + '-' +\n  subIdGenerator() + '-' + subIdGenerator() + subIdGenerator() + subIdGenerator();\n}\nconst subIdGenerator = () =>{\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedStudent: null,\n      students: sampleStudentList,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n     },\n    }\n  }\n\n  componentDidMount = () => {\n    const {onFetchStudents} = this.props;\n    onFetchStudents();\n  }\n\n  onOpenStudentModal = () => this.setState({ studentModalOpen: true });\n  onCloseStudentModal = () => this.setState({ studentModalOpen: false });\n  onOpenLocationModal = () => this.setState({locationModalOpen: true});\n  onCloseLocationModal = () => this.setState({locationModalOpen: false});\n\n\n  onSetSort = (sort) => this.setState({ sort });\n  onSetFilteredState = (filterName) => this.setState({ filterName });\n  onUnsetFilteredState = () => this.setState({ filterName: '' });\n\n  onSetFilteredLocationState = (location) => this.setState({ location });\n  onUnsetFilteredLocationState = () => this.setState({ location: '' });\n\n // TODO add a toas or some notification that a student has been saved\n  onSaveNewStudent = async () => {\n    const {newStudent: previousStudentState} = this.state;\n\n    // dispatch add student action\n    const {onAddNewStudent} = this.props;\n    onAddNewStudent(previousStudentState);\n\n    const newStudent = update(previousStudentState, {\n      $set:\n       { active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n    }}\n    );\n    this.setState({newStudent})\n    // eslint-disable-next-line no-console\n    console.warn('do something with the new student info');\n    this.onCloseStudentModal();\n  };\n\n  onDeleteNewStudent = () => {\n    const {newStudent: previousStudentState} = this.state;\n    const newStudent = update(previousStudentState, {\n      $set:\n       { active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n    }}\n    );\n    this.setState({newStudent})\n  };\n\n  onRemoveLocation = (index) => {\n    const {newStudent: previousStudentState} = this.state;\n    const {location: { locations } } = this.state.newStudent;\n    const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n    const newStudent = update(previousStudentState, {\n      location: { $set: {locations: newLocationsArray}},\n    });\n    this.setState({newStudent})\n  };\n\n  onFilterByName = () => {\n    const { students, filterName } = this.state;\n    return students.reduce((finalArr, currentStudent) => {\n      const { lastName, firstName } = currentStudent;\n      const studentString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n      if (studentString.indexOf(filterName) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n        finalArr.push(currentStudent);\n      }\n      return finalArr;\n    }, []);\n  };\n\n  onHandleStudentCard = (index) => {\n    const { students } = this.state;\n    this.setState({ selectedStudent: students[index] });\n  };\n\n  onRedirectToStudentPage = (event) => {\n    event.preventDefault();\n    this.setState({selectedStudent: null})\n  };\n\n  onDeleteStudent = (index) => {\n    const {onDeleteStudent} = this.props;\n    const { students } = this.state;\n    // Dispatch deleteStudent\n    onDeleteStudent(students[index].id);\n    const newStudentArray = this.arrayItemRemover(students, students[index])\n    this.setState({students: newStudentArray});\n    const student_id = students[index].id;\n    deleteStudentApi({student_id});\n    this.onCloseDropdown();\n  }\n\n  onCloneStudent = (index) => {\n    const { students } = this.state;\n    const newStudent = update(students[index],{\n      id:{$set:idGenerator()}\n    })\n    this.setState(prevState => {\n      prevState.students.push(newStudent);\n      return { students: prevState.students}\n    })\n  };\n\n  handleChange = (event, name, section) => {\n    const { newStudent: previousStudentState } = this.state;\n    const value = event.target ? event.target.value : event;\n    const updatedStudent = update(previousStudentState, {\n      [section]: { $merge: { [name]: value }},\n    });\n    this.setState({newStudent: updatedStudent})\n};\n\n  onSaveStudentChanges = (updatedStudent) => {\n    const { students: originalStudents } = this.state;\n    const {active,studentInformation, contactInformation, emailAddress, location } = updatedStudent;\n    const studentToUpdate = originalStudents.filter(student => student.id === updatedStudent.id)[0];\n    const updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n    const students = update(originalStudents, {\n      [updatedStudentIndex]:{$merge:{active:active,studentInformation:studentInformation,contactInformation:contactInformation,emailAddress:emailAddress,location:location}},\n    });\n    this.setState({ students });\n  }\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIsOpen: true, dropdownIndex });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  arrayItemRemover = (array, value) => array.filter((student) => student !== value)\n\n  render() {\n    const { studentModalOpen, students, selectedStudent } = this.state;\n    return (\n      <main id=\"main\" role=\"main\">\n        <div className=\"main-holder grey lighten-5\">\n        <StickyContainer>\n          {!selectedStudent && (\n            <React.Fragment>\n              <Sticky>\n                {({style}) => (\n\n                  <div className=\"title-row card-panel\" style={{...style, zIndex: 1999}}>\n                <div className=\"mobile-header\">\n                  <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n                </div>\n                <h2 className=\"h1 white-text\">\n                  <span className=\"heading-holder\">\n                    <i className=\"icon-student\"/>\n                    <span className=\"heading-block\">Students</span>\n                  </span>\n                </h2>\n              </div>\n               )}\n             </Sticky>\n              <FilterSection\n                onSetSort={this.onSetSort}\n                onSetFilteredState={this.onSetFilteredState}\n                onUnsetFilteredState={this.onUnsetFilteredState}\n                onSetFilteredLocationState={this.onSetFilteredLocationState}\n                onUnsetFilteredLocationState={this.onUnsetFilteredLocationState}\n                handleFilterClick={this.handleFilterClick}\n                onFilterByName={this.onFilterByName} />\n              <div className=\"content-section\">\n                <div className=\"row d-flex-content\">\n                  {students.map((student, index) => (\n                    <StudentCard\n                    student={student}\n                    index={index}\n                    id={student.id}\n                    key={student.id}\n                    dropdownIsOpen={this.state.dropdownIsOpen}\n                    dropdownIndex={this.state.dropdownIndex}\n                    onSetDropdown={this.onSetDropdown}\n                    onCloseDropdown={this.onCloseDropdown}\n                    onHandleStudentCard={() => this.onHandleStudentCard(index)}\n                    onDeleteStudent={() => this.onDeleteStudent(index)}\n                    onCloneStudent={() => this.onCloneStudent(index, student.id)}\n                    onSaveStudentChanges = {this.onSaveStudentChanges}\n                    />\n                  ))}\n                </div>\n              </div>\n              <a href=\"#\" className=\"waves-effect waves-teal btn add-btn modal-trigger\" onClick={this.onOpenStudentModal}><i className=\"material-icons\">add</i>New Student</a>\n              <StudentModal\n                open={studentModalOpen}\n                onClose={this.onCloseStudentModal}\n                handleChange={this.handleChange}\n                state={this.state.newStudent}\n                onSave={this.onSaveNewStudent}\n                onOpenLocationModal={this.onOpenLocationModal}\n                onRemoveLocation={this.onRemoveLocation}\n                onDeleteNewStudent={this.onDeleteNewStudent}\n                />\n                <LocationModal\n                open={this.state.locationModalOpen}\n                onClose={this.onCloseLocationModal}\n                handleLocationsChange={(selectedLocations) => this.handleChange(selectedLocations, 'locations', 'location')}\n                />\n                </React.Fragment>\n          )}\n          {selectedStudent && (\n            <IndividualStudentPage student={selectedStudent} onRedirectToStudentPage={this.onRedirectToStudentPage} />\n          )}\n          </StickyContainer>\n        </div>\n      </main>\n    );\n  }\n}\n\nStudents.propTypes = {\n  students: PropTypes.array.isRequired,\n  onFetchStudents: PropTypes.func.isRequired,\n  onAddNewStudent: PropTypes.func.isRequired,\n  onDeleteStudent: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n    students: makeSelectStudents(),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteStudent: (id) => dispatch(deleteStudent(id)),\n  onFetchStudents: () => dispatch(fetchStudents()),\n  onAddNewStudent: (student) => dispatch(addNewStudent(student)),\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(Students);\n"]},"metadata":{},"sourceType":"module"}