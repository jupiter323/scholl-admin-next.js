{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport { getProblemCompletionStatusColor, getLessonActivityStatus } from '../../utils';\n\nvar LessonCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LessonCard, _React$Component);\n\n  function LessonCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LessonCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LessonCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDropdownClick\", function (event) {\n      var _this$props = _this.props,\n          onSetDropdown = _this$props.onSetDropdown,\n          onCloseDropdown = _this$props.onCloseDropdown,\n          dropdownIsOpen = _this$props.dropdownIsOpen,\n          index = _this$props.index;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderLessonIcon\", function (subject) {\n      switch (subject) {\n        case 'Reading':\n          return 'icon-books';\n\n        case 'Writing':\n          return 'icon-hands';\n\n        case 'Math':\n          return 'icon-calculator';\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProblemCount\", function (assigned, totalProblems, solvedProblems) {\n      if (assigned) {\n        return React.createElement(\"span\", {\n          className: \"chart-value chart-value-column\",\n          style: getProblemCompletionStatusColor(solvedProblems, totalProblems)\n        }, React.createElement(\"span\", {\n          className: \"chart-count\",\n          \"data-count-up\": true,\n          \"data-start-val\": \"0\",\n          \"data-end-val\": \"4\",\n          \"data-duration\": \"1\"\n        }, React.createElement(\"span\", {\n          className: \"text-large\"\n        }, solvedProblems)), React.createElement(\"span\", {\n          className: \"text-small\"\n        }, \"out of\"), \" \", React.createElement(\"span\", {\n          className: \"text-large\"\n        }, totalProblems));\n      }\n\n      return React.createElement(\"span\", {\n        className: \"chart-value chart-value-column\",\n        style: {\n          backgroundColor: '#666'\n        }\n      }, React.createElement(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"0\",\n        \"data-end-val\": \"0\",\n        \"data-duration\": \"1\"\n      }, React.createElement(\"span\", {\n        className: \"text-large\"\n      }, totalProblems), React.createElement(\"span\", {\n        className: \"text-small\"\n      }, \"problems\")));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProblemCompletionStatus\", function (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) {\n      if (completed) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Completed \", React.createElement(\"time\", {\n          dateTime: \"2018-11-18T20:43\"\n        }, completionDate, \" at \", completionTime), completedLate && React.createElement(\"span\", {\n          className: \"status status-late\"\n        }, \" (late)\")));\n      }\n\n      if (availableDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Available \", React.createElement(\"time\", {\n          dateTime: \"2018-12-13\"\n        }, availableDate)), React.createElement(\"p\", null, React.createElement(\"time\", {\n          dateTime: \"2018-12-17\"\n        }, \"(due \", dueDate, \")\")));\n      }\n\n      if (overdue) {\n        return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n          className: \"text-large\",\n          style: {\n            color: '#c1272d'\n          }\n        }, \"Overdue\"));\n      }\n\n      if (!availableDate && dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Due \", React.createElement(\"time\", {\n          dateTime: \"2018-12-15\"\n        }, dueDate)));\n      }\n\n      if (!assigned && !dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Not Assigned\"));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n        className: \"text-large\",\n        style: {\n          color: '#006837'\n        }\n      }, \"Due Today at \", dueTime));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderAlerts\", function (alerts) {\n      if (alerts.length) {\n        return React.createElement(\"div\", {\n          className: \"right-col col s3\"\n        }, React.createElement(\"span\", {\n          className: \"badge-rounded badge red darken-2 white-text\"\n        }, React.createElement(\"b\", {\n          className: \"badge-text\"\n        }, alerts.length), \" \", React.createElement(\"i\", {\n          className: \"icon-flag\"\n        })));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"right-col col s3\"\n      }, \"\\xA0\");\n    });\n\n    return _this;\n  }\n\n  _createClass(LessonCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          _this$props2$lesson = _this$props2.lesson,\n          subject = _this$props2$lesson.subject,\n          unitNumber = _this$props2$lesson.unitNumber,\n          lessonName = _this$props2$lesson.lessonName,\n          assigned = _this$props2$lesson.assigned,\n          alerts = _this$props2$lesson.alerts,\n          lessonType = _this$props2$lesson.lessonType,\n          totalProblems = _this$props2$lesson.totalProblems,\n          _this$props2$lesson$s = _this$props2$lesson.solvedProblems,\n          solvedProblems = _this$props2$lesson$s === void 0 ? '' : _this$props2$lesson$s,\n          passage = _this$props2$lesson.passage,\n          dueDate = _this$props2$lesson.dueDate,\n          dueTime = _this$props2$lesson.dueTime,\n          completed = _this$props2$lesson.completed,\n          availableDate = _this$props2$lesson.availableDate,\n          completionDate = _this$props2$lesson.completionDate,\n          completionTime = _this$props2$lesson.completionTime,\n          completedLate = _this$props2$lesson.completedLate,\n          overdue = _this$props2$lesson.overdue,\n          dropdownIsOpen = _this$props2.dropdownIsOpen,\n          dropdownIndex = _this$props2.dropdownIndex,\n          onToggleDetailModalOpen = _this$props2.onToggleDetailModalOpen,\n          index = _this$props2.index;\n      return React.createElement(\"div\", {\n        className: \"card-main-col col s12 m8 l7 xl5\"\n      }, React.createElement(\"div\", {\n        className: getLessonActivityStatus(assigned, dueDate)\n      }, React.createElement(\"div\", {\n        className: \"card-panel\",\n        style: {\n          backgroundColor: '#666',\n          color: '#fff'\n        }\n      }, React.createElement(\"div\", {\n        className: \"card-panel-row row\"\n      }, React.createElement(\"div\", {\n        className: \"icon-col col s1\"\n      }, React.createElement(\"i\", {\n        className: this.renderLessonIcon(subject)\n      })), React.createElement(\"div\", {\n        className: \"col s9\"\n      }, React.createElement(\"div\", {\n        className: \"card-panel-text center-align\"\n      }, React.createElement(\"div\", {\n        className: \"text-small\"\n      }, subject, \" Unit \", unitNumber), React.createElement(\"div\", {\n        className: \"text-large\"\n      }, lessonName))), React.createElement(\"div\", {\n        className: \"col s1 right-align\"\n      }, React.createElement(\"div\", {\n        className: \"row icons-row\"\n      }, React.createElement(\"div\", {\n        className: \"dropdown-block col\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        \"data-target\": \"dropdown01\",\n        className: \"dropdown-trigger btn\",\n        onClick: this.handleDropdownClick\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? React.createElement(\"ul\", {\n        id: \"dropdown01\",\n        className: \"dropdown-content dropdown-wide\",\n        style: {\n          display: 'block',\n          transformOrigin: '0px 0px 0px',\n          opacity: '1',\n          transform: 'scaleX(1) scaleY(1)'\n        }\n      }, React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: function onClick() {\n          return onToggleDetailModalOpen(index);\n        },\n        className: \"modal-trigger link-block\"\n      }, \"Edit\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Clone\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Show Owner\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Delete\"))) : null))))), React.createElement(\"div\", {\n        className: \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"card-top-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"left-col col s3\"\n      }, React.createElement(\"span\", {\n        className: \"meta-num\"\n      }, \"p.\", passage)), React.createElement(\"div\", {\n        className: \"center-col col s6 center-align\"\n      }, React.createElement(\"span\", {\n        className: \"meta-name\"\n      }, \"(\", lessonType, \")\")), this.renderAlerts(alerts)), React.createElement(\"div\", {\n        className: \"chart-container chart-container-xlarge\"\n      }, React.createElement(\"div\", {\n        className: \"chart-holder\"\n      }, React.createElement(\"span\", {\n        className: \"svg-curved-bar\",\n        \"data-values\": \"{\\\"from\\\": 0, \\\"to\\\": 0, \\\"current\\\": 0}\",\n        \"data-duration\": \"1\"\n      }, React.createElement(\"svg\", {\n        width: \"207px\",\n        height: \"207px\",\n        viewBox: \"0 0 207 207\",\n        preserveAspectRatio: \"xMidYMid meet\"\n      }, React.createElement(\"path\", {\n        fill: \"none\",\n        style: {\n          strokeWidth: '42',\n          stroke: '#eaeaea'\n        },\n        d: \"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 1 1 180.09035447382598 134.16215259197702\"\n      }), React.createElement(\"path\", {\n        \"data-dinamic\": true,\n        fill: \"none\",\n        style: {\n          strokeWidth: '42',\n          stroke: '#62b771'\n        },\n        d: \"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 0 1 26.909645526174018 134.16215259197702\"\n      }))), this.renderProblemCount(assigned, totalProblems, solvedProblems))), React.createElement(\"div\", {\n        className: \"card-footer-row center-align\"\n      }, React.createElement(\"div\", {\n        className: \"card-footer-holder\"\n      }, this.renderProblemCompletionStatus(dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned))))));\n    }\n  }]);\n\n  return LessonCard;\n}(React.Component);\n\nexport default LessonCard;","map":null,"metadata":{},"sourceType":"module"}