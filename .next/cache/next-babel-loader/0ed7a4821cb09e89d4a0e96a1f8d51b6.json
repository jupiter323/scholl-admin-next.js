{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { difficultyMap, getAnswerColor, getCompleteAnswerColor } from '../../utils';\n\nclass Question extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"mapAnswerChoices\", () => {\n      const {\n        question: {\n          answerType,\n          answerChoices,\n          studentAnswer\n        },\n        answerSheetComplete\n      } = this.props;\n\n      if (answerSheetComplete) {\n        if (answerType === 'letter') {\n          return React.createElement(\"ul\", {\n            className: \"answer-list\"\n          }, answerChoices.map(answer => React.createElement(\"li\", {\n            key: answer.answerLetter\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: getCompleteAnswerColor('letter', answer, studentAnswer)\n          }, answer.answerLetter))));\n        }\n\n        return React.createElement(\"ul\", {\n          className: \"answer-list\"\n        }, answerChoices.map(answer => React.createElement(\"li\", {\n          key: answer.answerValue\n        }, React.createElement(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: getCompleteAnswerColor('value', answer, studentAnswer)\n        }, answer.answerValue))));\n      }\n\n      if (answerType === 'letter') {\n        return React.createElement(\"ul\", {\n          className: \"answer-list\"\n        }, answerChoices.map(answer => React.createElement(\"li\", {\n          key: answer.answerLetter\n        }, React.createElement(\"span\", {\n          className: \"badge-circle badge-circle-bordered\",\n          style: getAnswerColor(answer)\n        }, answer.answerLetter))));\n      }\n\n      return React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, answerChoices.map(answer => React.createElement(\"li\", {\n        key: answer.answerValue\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: getAnswerColor(answer)\n      }, answer.answerValue))));\n    });\n  }\n\n  render() {\n    const {\n      onOpenQuestionModal,\n      question,\n      answerSheetComplete\n    } = this.props;\n    const {\n      difficulty,\n      hasVideo,\n      flagged,\n      studentNotes\n    } = question;\n    return React.createElement(\"li\", {\n      className: \"answers-list-holder\"\n    }, React.createElement(\"div\", {\n      className: \"answer-row row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col col-120\"\n    }, this.mapAnswerChoices()), React.createElement(\"div\", {\n      className: \"col col-30\"\n    }, React.createElement(\"span\", {\n      className: \"status-info\"\n    }, difficultyMap[difficulty])), hasVideo && React.createElement(\"div\", {\n      className: \"col col-43\"\n    }, React.createElement(\"span\", {\n      className: \"play-progress\",\n      \"data-video-id\": \"video001\"\n    }, React.createElement(\"span\", {\n      className: \"play\"\n    }), React.createElement(\"svg\", {\n      viewBox: \"0 0 50 50\",\n      width: \"50\",\n      height: \"50\",\n      version: \"1.1\",\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }, React.createElement(\"circle\", {\n      className: \"circle-static\",\n      cx: \"25.8\",\n      cy: \"24.3\",\n      r: \"22.8\",\n      style: {\n        strokeWidth: '3',\n        fill: 'rgba(0,0,0,0)'\n      }\n    }), React.createElement(\"circle\", {\n      className: \"circle-progress\",\n      cx: \"25.8\",\n      cy: \"24.3\",\n      r: \"22.8\",\n      style: {\n        stroke: 'none',\n        strokeWidth: '3',\n        fill: 'rgba(0,0,0,0)'\n      }\n    })))), React.createElement(\"div\", {\n      className: \"col col-auto\"\n    }, answerSheetComplete && flagged ? React.createElement(\"span\", {\n      className: \"status-answer\",\n      style: {\n        color: '#c0272d'\n      }\n    }, React.createElement(\"i\", {\n      className: \"icon-flag\"\n    }), React.createElement(\"b\", {\n      className: \"status-text\"\n    }, \"Review\")) : null), React.createElement(\"div\", {\n      className: \"dropdown-block col col-35\"\n    }, React.createElement(\"a\", {\n      className: \"modal-trigger\",\n      onClick: () => onOpenQuestionModal(question),\n      href: \"#\"\n    }, React.createElement(\"i\", {\n      className: \"material-icons dots-icon\"\n    }, \"more_vert\")))), answerSheetComplete && studentNotes ? React.createElement(\"div\", {\n      className: \"comment-block\"\n    }, React.createElement(\"p\", null, \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore?  tincidunt ut laoreet dolore?\")) : null);\n  }\n\n}\n\n;\nQuestion.propTypes = {\n  question: PropTypes.object.isRequired,\n  onOpenQuestionModal: PropTypes.func.isRequired,\n  answerSheetComplete: PropTypes.bool.isRequired\n};\nexport default Question;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/LessonDetailAnswerSheet/components/Question/index.js"],"names":["React","PropTypes","difficultyMap","getAnswerColor","getCompleteAnswerColor","Question","Component","question","answerType","answerChoices","studentAnswer","answerSheetComplete","props","map","answer","answerLetter","answerValue","render","onOpenQuestionModal","difficulty","hasVideo","flagged","studentNotes","mapAnswerChoices","strokeWidth","fill","stroke","color","propTypes","object","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { difficultyMap, getAnswerColor, getCompleteAnswerColor } from '../../utils';\n\nclass Question extends React.Component {\n  mapAnswerChoices = () => {\n    const { question: { answerType, answerChoices, studentAnswer }, answerSheetComplete } = this.props;\n    if (answerSheetComplete) {\n      if (answerType === 'letter') {\n        return (\n          <ul className=\"answer-list\">\n            {answerChoices.map(answer => (\n              <li key={answer.answerLetter}>\n                <span\n                  className=\"badge-circle badge-circle-bordered\"\n                  style={getCompleteAnswerColor('letter', answer, studentAnswer)}\n                >\n                  {answer.answerLetter}\n                </span>\n              </li>\n            ))}\n          </ul>\n        );\n      }\n      return (\n        <ul className=\"answer-list\">\n          {answerChoices.map(answer => (\n            <li key={answer.answerValue}>\n              <span\n                className=\"badge badge-rounded badge-rounded-bordered\"\n                style={getCompleteAnswerColor('value', answer, studentAnswer)}\n              >\n                {answer.answerValue}\n              </span>\n            </li>\n          ))}\n        </ul>\n      )\n    }\n    if (answerType === 'letter') {\n      return (\n        <ul className=\"answer-list\">\n          {answerChoices.map(answer => (\n            <li key={answer.answerLetter}>\n              <span\n                className=\"badge-circle badge-circle-bordered\"\n                style={getAnswerColor(answer)}\n              >\n                {answer.answerLetter}\n              </span>\n            </li>\n          ))}\n        </ul>\n      );\n    }\n    return (\n      <ul className=\"answer-list\">\n        {answerChoices.map(answer => (\n          <li key={answer.answerValue}>\n            <span\n              className=\"badge badge-rounded badge-rounded-bordered\"\n              style={getAnswerColor(answer)}\n            >\n              {answer.answerValue}\n            </span>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  render() {\n    const { onOpenQuestionModal, question, answerSheetComplete } = this.props;\n    const { difficulty, hasVideo, flagged, studentNotes } = question;\n    return (\n      <li className=\"answers-list-holder\">\n        <div className=\"answer-row row mb-0\">\n          <div className=\"col col-120\">\n            {this.mapAnswerChoices()}\n          </div>\n          <div className=\"col col-30\">\n            <span className=\"status-info\">{difficultyMap[difficulty]}</span>\n          </div>\n          {hasVideo && (\n            <div className=\"col col-43\">\n              <span className=\"play-progress\" data-video-id=\"video001\">\n                <span className=\"play\"></span>\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle className=\"circle-static\" cx=\"25.8\" cy=\"24.3\" r=\"22.8\" style={{ strokeWidth: '3', fill: 'rgba(0,0,0,0)' }}/>\n                  <circle className=\"circle-progress\" cx=\"25.8\" cy=\"24.3\" r=\"22.8\" style={{ stroke: 'none', strokeWidth: '3', fill: 'rgba(0,0,0,0)' }}/>\n                </svg>\n              </span>\n            </div>\n          )}\n          <div className=\"col col-auto\">\n            <If condition={answerSheetComplete && flagged}>\n              <span className=\"status-answer\" style={{ color: '#c0272d' }}>\n                <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n              </span>\n            </If>\n          </div>\n          <div className=\"dropdown-block col col-35\">\n            <a className='modal-trigger' onClick={() => onOpenQuestionModal(question)} href=\"#\"><i className=\"material-icons dots-icon\">more_vert</i></a>\n          </div>\n        </div>\n        <If condition={answerSheetComplete && studentNotes}>\n          <div className=\"comment-block\">\n            <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore?  tincidunt ut laoreet dolore?</p>\n          </div>\n        </If>\n      </li>\n    );\n  }\n};\n\nQuestion.propTypes = {\n  question: PropTypes.object.isRequired,\n  onOpenQuestionModal: PropTypes.func.isRequired,\n  answerSheetComplete: PropTypes.bool.isRequired,\n};\n\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}