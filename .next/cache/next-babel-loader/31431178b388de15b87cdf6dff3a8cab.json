{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport statusColorMap from '../../../../DetailWorksheetPage/utils/statusColorMap';\n\nvar LessonListItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LessonListItem, _React$Component);\n\n  function LessonListItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LessonListItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LessonListItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"renderLessonIcon\", function (subject) {\n      switch (subject) {\n        case 'Reading':\n          return 'icon-books';\n\n        case 'Writing':\n          return 'icon-hands';\n\n        case 'Math':\n          return 'icon-calculator';\n\n        default:\n          break;\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(LessonListItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          checkedLessons = _this$props.checkedLessons,\n          selectAll = _this$props.selectAll,\n          handleCheckbox = _this$props.handleCheckbox,\n          index = _this$props.index,\n          lesson = _this$props.lesson,\n          _this$props$lesson = _this$props.lesson,\n          id = _this$props$lesson.id,\n          lessonName = _this$props$lesson.lessonName,\n          status = _this$props$lesson.status,\n          assigned = _this$props$lesson.assigned,\n          score = _this$props$lesson.score,\n          scoreStatus = _this$props$lesson.scoreStatus,\n          reviewedAlerts = _this$props$lesson.reviewedAlerts,\n          subject = _this$props$lesson.subject,\n          unit = _this$props$lesson.unit,\n          passage = _this$props$lesson.passage,\n          timeEstimate = _this$props$lesson.timeEstimate,\n          problems = _this$props$lesson.problems,\n          lessonType = _this$props$lesson.lessonType,\n          flags = _this$props$lesson.flags;\n      return React.createElement(\"div\", {\n        className: \"card list-table-row\",\n        key: id,\n        style: {\n          opacity: assigned ? .5 : 1\n        }\n      }, React.createElement(\"div\", {\n        className: \"list-table-cell icon-cell\"\n      }, React.createElement(\"label\", {\n        htmlFor: index\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: index,\n        checked: !selectAll ? checkedLessons.indexOf(lesson) > -1 : true,\n        onChange: function onChange() {\n          return handleCheckbox(lesson);\n        },\n        className: \"filled-in\"\n      }), React.createElement(\"span\", null, React.createElement(\"b\", null, \"\\xA0\")))), React.createElement(\"div\", {\n        className: \"list-table-cell icon-cell\"\n      }, React.createElement(\"span\", {\n        className: \"block-icon\"\n      }, React.createElement(\"i\", {\n        className: this.renderLessonIcon(subject)\n      }))), React.createElement(\"div\", {\n        className: \"list-table-cell name-cell\",\n        style: {\n          width: '140px'\n        }\n      }, React.createElement(\"div\", {\n        className: \"card-panel-text truncate\"\n      }, React.createElement(\"div\", {\n        className: \"text-large truncate\",\n        id: \"lessonName\"\n      }, unit, \" \", lessonName))), React.createElement(\"div\", {\n        className: \"list-table-cell graph-cell\",\n        style: {\n          marginLeft: '50px'\n        }\n      }, scoreStatus && React.createElement(\"span\", {\n        className: \"chart-bar \".concat(statusColorMap[scoreStatus], \" white-text\")\n      }, Math.floor(\"\".concat(score / problems * 100)), \"%\")), React.createElement(\"div\", {\n        className: \"list-table-cell status-cell\"\n      }, scoreStatus !== \"\" ? React.createElement(\"span\", {\n        className: \"badge badge-rounded-md \".concat(statusColorMap[scoreStatus], \" white-text\")\n      }, scoreStatus) : React.createElement(\"span\", {\n        className: \"badge badge-rounded-md \".concat(statusColorMap[status], \" white-text\")\n      }, status)), React.createElement(\"div\", {\n        className: \"list-table-cell type-cell\",\n        style: {\n          marginLeft: '10px'\n        }\n      }, subject), React.createElement(\"div\", {\n        className: \"list-table-cell type-cell\"\n      }, \"p. \", passage), React.createElement(\"div\", {\n        className: \"list-table-cell date-cell\"\n      }, timeEstimate), React.createElement(\"div\", {\n        className: \"list-table-cell date-cell\",\n        style: {\n          paddingLeft: '50px'\n        }\n      }, problems), React.createElement(\"div\", {\n        className: \"list-table-cell name-cell\"\n      }, React.createElement(\"div\", {\n        className: \"card-panel-text truncate\"\n      }, React.createElement(\"div\", {\n        className: \"text-large truncate\",\n        style: {\n          paddingLeft: '70px'\n        }\n      }, lessonType))), React.createElement(\"div\", {\n        className: \"list-table-cell graph-cell\"\n      }, reviewedAlerts.length > 0 && React.createElement(\"span\", {\n        className: \"badge-rounded-xs badge grey darken-1 white-text\"\n      }, React.createElement(\"b\", {\n        className: \"badge-text\"\n      }, reviewedAlerts.length), \" \", React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }))), React.createElement(\"div\", {\n        className: \"list-table-cell flags-cell\"\n      }, flags.length > 0 && React.createElement(\"span\", {\n        className: \"badge-rounded-xs badge red darken-2 white-text\"\n      }, React.createElement(\"b\", {\n        className: \"badge-text\"\n      }, flags.length), \" \", React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }))));\n    }\n  }]);\n\n  return LessonListItem;\n}(React.Component);\n\nexport default LessonListItem;","map":null,"metadata":{},"sourceType":"module"}