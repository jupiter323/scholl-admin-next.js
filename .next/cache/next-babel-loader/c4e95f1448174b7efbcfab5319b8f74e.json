{"ast":null,"code":"import _objectSpread2 from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport update from 'immutability-helper';\nimport { Sticky } from 'react-sticky';\nimport FilterSection from './components/FilterSection';\nimport FullView from './components/FullView';\nimport ListView from './components/ListView';\nimport sampleWorksheets from '../utils/sampleWorksheets';\nimport { dueDate, assignDate, problems, completed, flags, score, timeEstimate } from '../utils/sortFunctions';\nimport { worksheetTypeMap, worksheetSourceMap, worksheetDifficultyMap, worksheetSubjectMap } from '../utils/worksheetFilterMap';\n\nclass ListPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onChangeView\", view => this.setState({\n      currentView: view\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      worksheetsAreFiltered: true,\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      worksheetsAreFiltered: false,\n      filterName: ''\n    }));\n\n    _defineProperty(this, \"onSetFilteredTopicState\", filterTopic => this.setState({\n      worksheetsAreFiltered: true,\n      filterTopic\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredTopicState\", () => this.setState({\n      filterTopic: ''\n    }, this.checkForFilteredState));\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      subjectFilters: [],\n      difficultyFilters: [],\n      typeFilters: [],\n      sourceFilters: [],\n      workbookFilters: [],\n      topicFilter: ''\n    }));\n\n    _defineProperty(this, \"onAssignWorksheet\", assignType => {\n      console.warn('Stubbed out assign worksheet click', assignType);\n    });\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        worksheets,\n        filterName\n      } = this.state;\n      return worksheets.reduce((finalArr, currentWorksheet) => {\n        const {\n          accountInfo: {\n            lastName,\n            firstName\n          }\n        } = currentWorksheet;\n        const worksheetString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n\n        if (worksheetString.indexOf(filterName) !== -1 && finalArr.indexOf(currentWorksheet) === -1) {\n          finalArr.push(currentWorksheet);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterByTopic\", (preFilteredWorksheets = []) => {\n      const {\n        worksheets: allWorksheets,\n        filterTopic\n      } = this.state;\n      let worksheets;\n\n      if (preFilteredWorksheets.length) {\n        worksheets = preFilteredWorksheets;\n      } else {\n        worksheets = allWorksheets;\n      }\n\n      return worksheets.reduce((finalArr, currentWorksheet) => {\n        const {\n          topic\n        } = currentWorksheet;\n\n        if (topic === filterTopic && finalArr.indexOf(currentWorksheet) === -1) {\n          finalArr.push(currentWorksheet);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onSortWorksheets\", worksheets => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'dueDate':\n          return worksheets.sort(dueDate);\n\n        case 'assignDate':\n          return worksheets.sort(assignDate);\n\n        case 'problems':\n          return worksheets.sort(problems);\n\n        case 'completed':\n          return worksheets.sort(completed);\n\n        case 'flags':\n          return worksheets.sort(flags);\n\n        case 'score':\n          return worksheets.sort(score);\n\n        case 'timeEstimate':\n          return worksheets.sort(timeEstimate);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onFilterWorksheets\", () => {\n      const {\n        subjectFilters,\n        difficultyFilters,\n        typeFilters,\n        sourceFilters,\n        worksheets: allWorksheets\n      } = this.state;\n      let worksheets = allWorksheets;\n\n      if (subjectFilters.length) {\n        worksheets = worksheets.filter(worksheet => subjectFilters.indexOf(worksheetSubjectMap[worksheet.subject]) !== -1);\n      }\n\n      if (typeFilters.length && typeFilters.indexOf('mixedType') === -1) {\n        worksheets = worksheets.filter(worksheet => typeFilters.indexOf(worksheetTypeMap[worksheet.problemType]) !== -1);\n      }\n\n      if (sourceFilters.length) {\n        worksheets = worksheets.filter(worksheet => sourceFilters.indexOf(worksheetSourceMap[worksheet.worksheetSource]) !== -1);\n      }\n\n      if (difficultyFilters.length && difficultyFilters.indexOf('mixedDifficulty') === -1) {\n        worksheets = worksheets.filter(worksheet => difficultyFilters.indexOf(worksheetDifficultyMap[worksheet.difficulty]) !== -1);\n      }\n\n      return worksheets;\n    });\n\n    _defineProperty(this, \"getMappableWorksheets\", () => {\n      const {\n        filterName,\n        filterTopic,\n        worksheets: allWorksheets,\n        sort,\n        subjectFilters,\n        difficultyFilters,\n        typeFilters,\n        sourceFilters\n      } = this.state;\n      let worksheets;\n\n      if (filterName.length && !filterTopic.length) {\n        worksheets = this.onFilterByName();\n      } else if (!filterName.length && filterTopic.length) {\n        worksheets = this.onFilterByTopic();\n      } else if (filterName.length && filterTopic.length) {\n        const filteredByName = this.onFilterByName();\n        worksheets = this.onFilterByTopic(filteredByName);\n      } else {\n        worksheets = allWorksheets;\n      }\n\n      if (subjectFilters.length || difficultyFilters.length || typeFilters.length || sourceFilters.length) {\n        worksheets = this.onFilterWorksheets();\n      }\n\n      if (sort) {\n        return this.onSortWorksheets(worksheets);\n      }\n\n      return worksheets;\n    });\n\n    _defineProperty(this, \"handleFilterClick\", (filterType, filter) => {\n      const {\n        subjectFilters: currentSubjectFilters,\n        difficultyFilters: currentDifficultyFilters,\n        typeFilters: currentTypeFilters,\n        sourceFilters: currentSourceFilters\n      } = this.state;\n      let modifiedFilterCurrentState;\n      let modifiedFilterName;\n      let modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'difficulty':\n          modifiedFilterCurrentState = currentDifficultyFilters;\n          modifiedFilterName = 'difficultyFilters';\n          break;\n\n        case 'type':\n          modifiedFilterCurrentState = currentTypeFilters;\n          modifiedFilterName = 'typeFilters';\n          break;\n\n        case 'source':\n          modifiedFilterCurrentState = currentSourceFilters;\n          modifiedFilterName = 'sourceFilters';\n          break;\n\n        default:\n          break;\n      }\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        [modifiedFilterName]: modifiedFilterUpdatedState\n      });\n    });\n\n    _defineProperty(this, \"renderWorksheetView\", () => {\n      const {\n        currentView\n      } = this.state;\n      const {\n        onSetActiveWorksheet\n      } = this.props;\n\n      switch (currentView) {\n        case 'list':\n          return __jsx(ListView, {\n            onSetActiveWorksheet: onSetActiveWorksheet,\n            worksheets: this.getMappableWorksheets()\n          });\n\n        case 'full':\n          return __jsx(FullView, {\n            onSetActiveWorksheet: onSetActiveWorksheet,\n            worksheets: this.getMappableWorksheets()\n          });\n\n        default:\n          break;\n      }\n    });\n\n    this.state = {\n      sort: '',\n      subjectFilters: [],\n      difficultyFilters: [],\n      typeFilters: [],\n      sourceFilters: [],\n      filterName: '',\n      filterTopic: '',\n      currentView: 'full',\n      worksheets: sampleWorksheets\n    };\n  }\n\n  render() {\n    const {\n      currentView,\n      subjectFilters,\n      difficultyFilters,\n      typeFilters,\n      sourceFilters\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Sticky, null, ({\n      style\n    }) => __jsx(\"div\", {\n      className: \"title-row card-panel\",\n      style: _objectSpread2({}, style, {\n        zIndex: 1999\n      })\n    }, __jsx(\"div\", {\n      className: \"mobile-header\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), __jsx(\"h2\", {\n      className: \"h1 white-text\"\n    }, __jsx(\"span\", {\n      className: \"heading-holder\"\n    }, __jsx(\"i\", {\n      className: \"icon-sheets-w\"\n    }), __jsx(\"span\", {\n      className: \"heading-block\"\n    }, \"Custom Worksheet Library\"))))), __jsx(FilterSection, {\n      currentView: currentView,\n      typeFilters: typeFilters,\n      sourceFilters: sourceFilters,\n      subjectFilters: subjectFilters,\n      difficultyFilters: difficultyFilters,\n      onSetSort: this.onSetSort,\n      onChangeView: this.onChangeView,\n      onClearFilters: this.onClearFilters,\n      handleFilterClick: this.handleFilterClick,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredTopicState: this.onSetFilteredTopicState,\n      onUnsetFilteredTopicState: this.onUnsetFilteredTopicState\n    }), this.renderWorksheetView(), __jsx(\"div\", {\n      className: \"add-btn-block\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"dropdown-trigger waves-effect waves-teal btn add-btn\",\n      \"data-target\": \"dropdown_assign_selected\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \" Custom Worksheet\"), __jsx(\"ul\", {\n      id: \"dropdown_assign_selected\",\n      className: \"dropdown-content dropdown-small\"\n    }, __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\"\n    }, \"From Saved\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\"\n    }, \"Create New\")))));\n  }\n\n}\n\nexport default ListPage;","map":null,"metadata":{},"sourceType":"module"}