{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nvar styles = {\n  red: {\n    position: 'relative',\n    color: '#fff',\n    borderColor: '#fff',\n    border: '1px solid',\n    backgroundColor: '#db1d41',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  greenFilled: {\n    position: 'relative',\n    color: '#fff',\n    borderColor: '#32955c',\n    border: '1px solid',\n    backgroundColor: '#32955c',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  greenBorderOnly: {\n    position: 'relative',\n    color: '#32955c',\n    borderColor: '#32955c',\n    border: '1px solid',\n    backgroundColor: '#fff',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  plain: {\n    position: 'relative',\n    color: '#a6a8ab',\n    border: '1px solid',\n    borderColor: '#a6a8ab',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  } // maybe don't map, but have set bubbles wiht set ids, then check for correct based on quesiton passed as props\n\n};\n\nvar Bubble =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Bubble, _React$Component);\n\n  function Bubble(props) {\n    var _this;\n\n    _classCallCheck(this, Bubble);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Bubble).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleBubbleChange\", function (event, letter) {\n      _this.setState({\n        selected: event.target.value\n      }, function () {\n        return _this.checkIfCorrect(letter);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkIfCorrect\", function (letter) {\n      var question = _this.props.question;\n\n      if (letter === question.answer) {\n        _this.setState({\n          correct: true\n        });\n      } else {\n        _this.setState({\n          correct: false\n        });\n      } // update counter on writing page\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderBubbleStyle\", function (letter) {\n      var _this$state = _this.state,\n          correct = _this$state.correct,\n          selected = _this$state.selected;\n      var answer = _this.props.question.answer;\n\n      if (selected === letter && correct) {\n        return styles.greenFilled;\n      }\n\n      if (selected === letter && !correct) {\n        return styles.red;\n      }\n\n      if (letter !== selected && letter === !answer) {\n        return styles.plain;\n      }\n\n      if (letter !== selected && letter === answer) {\n        return styles.greenBorderOnly;\n      }\n\n      return styles.plain;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderBubble\", function (letter, id) {\n      return React.createElement(\"li\", {\n        key: letter\n      }, React.createElement(\"form\", null, React.createElement(\"input\", {\n        type: \"radio\",\n        id: id,\n        name: \"letter\",\n        value: letter,\n        checked: _this.state.selected === letter,\n        onChange: function onChange(event) {\n          return _this.onHandleBubbleChange(event, letter);\n        }\n      }), React.createElement(\"label\", {\n        htmlFor: letter,\n        style: _this.renderBubbleStyle(letter)\n      }, React.createElement(\"span\", {\n        style: {\n          display: 'block',\n          marginTop: '2px',\n          paddingLeft: \"4.5px\"\n        }\n      }, letter))));\n    });\n\n    _this.state = {\n      selected: \"\",\n      correct: false\n    };\n    return _this;\n  }\n\n  _createClass(Bubble, [{\n    key: \"render\",\n    value: function render() {\n      var _props = props,\n          id = _props.question.id;\n      return React.createElement(React.Fragment, null, this.renderBubble(\"A\", id), this.renderBubble(\"B\", id), this.renderBubble(\"C\", id), this.renderBubble(\"D\", id));\n    }\n  }]);\n\n  return Bubble;\n}(React.Component);\n\nBubble.propTypes = {\n  question: PropTypes.object.isRequired\n};\nexport default Bubble; // mapLetterBubbles = ({index}) => {\n//   const letters = [\"A\", \"B\", \"C\", \"D\"];\n//   const { sampleAnswers } = this.props;\n//   const { correct } = this.state\n//   const { studentChoice, answer } = sampleAnswers[index];\n//   if (studentChoice === \"\") {\n//     return letters.map((letter) => {\n//       return (\n//         this.renderInput(letter, bubbleType.plain)\n//       )\n//     })\n//   }\n// return letters.map(letter => {\n//   if (correct){\n//     return (\n//      this.renderInput(letter, bubbleType.greenFilled)\n//     )\n//   }\n//   if (letter === answer && letter !== studentChoice){\n//     return (\n//       this.renderInput(letter, bubbleType.greenBorderOnly)\n//     )\n//   }\n//   if (letter !== answer && letter === studentChoice){\n//     return (\n//       this.renderInput(letter, bubbleType.red)\n//     )\n//   }\n//   return (\n//      this.renderInput(letter, bubbleType.plain)\n//     )\n//   })\n// };","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailTestAnswerSheetComplete\\components\\WritingPage\\components\\Bubble\\index.js"],"names":["React","PropTypes","styles","red","position","color","borderColor","border","backgroundColor","height","width","borderRadius","greenFilled","greenBorderOnly","plain","Bubble","props","event","letter","setState","selected","target","value","checkIfCorrect","question","answer","correct","state","id","onHandleBubbleChange","renderBubbleStyle","display","marginTop","paddingLeft","renderBubble","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst styles = {\r\n  red: { position: 'relative', color: '#fff', borderColor: '#fff', border: '1px solid', backgroundColor: '#db1d41', height: '19px', width: '19px', borderRadius: '50%' },\r\n  greenFilled: { position: 'relative', color: '#fff', borderColor: '#32955c', border: '1px solid', backgroundColor: '#32955c', height: '19px', width: '19px', borderRadius: '50%' },\r\n  greenBorderOnly: { position: 'relative', color: '#32955c', borderColor: '#32955c', border: '1px solid', backgroundColor: '#fff', height: '19px', width: '19px', borderRadius: '50%' },\r\n  plain: { position: 'relative', color: '#a6a8ab', border: '1px solid', borderColor: '#a6a8ab', height: '19px', width: '19px', borderRadius: '50%' }\r\n}\r\n\r\n// maybe don't map, but have set bubbles wiht set ids, then check for correct based on quesiton passed as props\r\n\r\nclass Bubble extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selected: \"\",\r\n      correct: false,\r\n    }\r\n  }\r\n\r\n  onHandleBubbleChange = (event, letter) => {\r\n   this.setState({selected: event.target.value},\r\n    () => this.checkIfCorrect(letter))\r\n  }\r\n\r\n  checkIfCorrect = (letter) => {\r\n    const { question } = this.props;\r\n    if(letter === question.answer) {\r\n      this.setState({correct: true});\r\n    }else{\r\n      this.setState({correct: false})\r\n    }\r\n    // update counter on writing page\r\n  }\r\n  \r\n\r\n  renderBubbleStyle = ( letter ) => {\r\n    const { correct, selected } = this.state;\r\n    const { question: { answer } } = this.props;\r\n    if (selected === letter && correct) {\r\n      return styles.greenFilled\r\n    }\r\n    if (selected === letter && !correct) {\r\n      return styles.red\r\n    }\r\n    if (letter !== selected && letter === !answer) {\r\n      return styles.plain\r\n    }if(letter !== selected && letter === answer){\r\n      return styles.greenBorderOnly\r\n    }\r\n    return styles.plain\r\n  }\r\n\r\n  renderBubble = (letter, id) => (\r\n    <li key={letter}>\r\n        <form>\r\n          <input\r\n            type=\"radio\"\r\n            id={id}\r\n            name=\"letter\"\r\n            value={letter}\r\n            checked={this.state.selected === letter}\r\n            onChange={(event) => this.onHandleBubbleChange(event, letter)}\r\n            />\r\n          <label\r\n            htmlFor={letter}\r\n            style={this.renderBubbleStyle(letter)}\r\n            >\r\n          <span style={{ display: 'block', marginTop: '2px', paddingLeft: \"4.5px\" }}>{letter}</span>\r\n          </label>\r\n        </form>\r\n      </li>\r\n  )\r\n\r\n  render() {\r\n    const { question: { id } } = props\r\n      return (\r\n        <React.Fragment>\r\n          {this.renderBubble(\"A\", id)}\r\n          {this.renderBubble(\"B\", id)}\r\n          {this.renderBubble(\"C\", id)}\r\n          {this.renderBubble(\"D\", id)}\r\n      {/* <li key=\"A\">\r\n        <form>\r\n          <input\r\n            type=\"radio\"\r\n            id=\"A\"\r\n            name=\"letter\"\r\n            value=\"A\"\r\n            checked={this.state.selected === \"A\"}\r\n            onChange={() => this.onHandleBubbleChange(event, letter)}\r\n            />\r\n          <label\r\n            htmlFor={letter}\r\n            style={this.renderBubbleStyle(\"A\")}\r\n            >\r\n          <span style={{ display: 'block', marginTop: '2px', paddingLeft: \"4.5px\" }}>{letter}</span>\r\n          </label>\r\n        </form>\r\n      </li>\r\n      <li key=\"B\">\r\n        <form>\r\n          <input\r\n            type=\"radio\"\r\n            id=\"B\"\r\n            name=\"letter\"\r\n            value=\"B\"\r\n            checked={this.state.selected === \"B\"}\r\n            onChange={() => this.onHandleBubbleChange(event, letter)}\r\n            />\r\n          <label\r\n            htmlFor={letter}\r\n            style={this.renderBubbleStyle(\"B\")}\r\n            >\r\n          <span style={{ display: 'block', marginTop: '2px', paddingLeft: \"4.5px\" }}>{letter}</span>\r\n          </label>\r\n        </form>\r\n      </li> */}\r\n        </React.Fragment>\r\n      )\r\n  }\r\n}\r\n\r\nBubble.propTypes = {\r\n  question: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default Bubble;\r\n  // mapLetterBubbles = ({index}) => {\r\n  //   const letters = [\"A\", \"B\", \"C\", \"D\"];\r\n  //   const { sampleAnswers } = this.props;\r\n  //   const { correct } = this.state\r\n  //   const { studentChoice, answer } = sampleAnswers[index];\r\n  //   if (studentChoice === \"\") {\r\n  //     return letters.map((letter) => {\r\n  //       return (\r\n  //         this.renderInput(letter, bubbleType.plain)\r\n  //       )\r\n  //     })\r\n  //   }\r\n  // return letters.map(letter => {\r\n  //   if (correct){\r\n  //     return (\r\n  //      this.renderInput(letter, bubbleType.greenFilled)\r\n  //     )\r\n  //   }\r\n  //   if (letter === answer && letter !== studentChoice){\r\n  //     return (\r\n  //       this.renderInput(letter, bubbleType.greenBorderOnly)\r\n  //     )\r\n  //   }\r\n  //   if (letter !== answer && letter === studentChoice){\r\n  //     return (\r\n  //       this.renderInput(letter, bubbleType.red)\r\n  //     )\r\n  //   }\r\n  //   return (\r\n  //      this.renderInput(letter, bubbleType.plain)\r\n  //     )\r\n  //   })\r\n  // };"]},"metadata":{},"sourceType":"module"}