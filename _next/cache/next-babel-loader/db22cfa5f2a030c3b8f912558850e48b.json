{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EditTestModal/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable react/no-did-update-set-state */\n\n/* eslint-disable react/no-did-mount-set-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { toast } from 'react-toastify';\nimport TestVersionPage from '../TestVersionPage';\nimport DetailTestScorePage from '../../../DetailTestScorePage';\nimport DetailTestAnswerSheetComplete from '../../../DetailTestAnswerSheetComplete';\nimport StrengthsAndWeaknesses from '../../../DetailTestStrengthsAndWeakesses';\nimport pdfMakeReport from './pdfMakeReport';\nimport { makeSelectStudentSections, makeSelectActiveStudentToken, makeSelectTests, makeSelectAssignedStudentTests, makeSelectActiveStudent, makeSelectActiveTestScores, makeSelectErrorMessages } from '../../../index/selectors';\nimport { setStudentAssignedTests, setStudentCompletedTests, updateTestStatus, setActiveTestScores, getTestScores, resetErrorMessage, fetchStudentTestSections } from '../../../index/actions';\nimport { updateStudentTestSectionStatusApi, updateStudentTestStatusApi, fetchTestsByStudentIdApi } from '../../../index/api';\nimport { css } from '@emotion/core';\nimport BarLoader from 'react-spinners/BarLoader';\n\nvar EditTestModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditTestModal, _React$Component);\n\n  function EditTestModal(props) {\n    var _this;\n\n    _classCallCheck(this, EditTestModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditTestModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function _callee() {\n      var _this$props, onFetchStudentTestSections, studentToken, student_test_id, id, postBody;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, onFetchStudentTestSections = _this$props.onFetchStudentTestSections, studentToken = _this$props.studentToken, student_test_id = _this$props.test.student_test_id, id = _this$props.activeStudent.id;\n              postBody = {\n                id: id,\n                student_test_id: student_test_id,\n                studentToken: studentToken\n              };\n              onFetchStudentTestSections(postBody);\n\n              _this.props.onRef(_assertThisInitialized(_this));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getBase64ImageFromURL\", function (url) {\n      return new _Promise(function (resolve, reject) {\n        var img = new Image();\n        img.setAttribute('crossOrigin', 'anonymous');\n\n        img.onload = function () {\n          var canvas = document.createElement('canvas');\n          canvas.width = img.width;\n          canvas.height = img.height;\n          var ctx = canvas.getContext('2d');\n          ctx.drawImage(img, 0, 0);\n          var dataURL = canvas.toDataURL('image/png');\n          resolve(dataURL);\n        };\n\n        img.onerror = function (error) {\n          reject(error);\n        };\n\n        img.src = url;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetActivePage\", function (activePage) {\n      _this.setState({\n        activePage: activePage\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getTargetImage\", function (currentRef) {\n      var html2canvas = require('html2canvas');\n\n      var defaultCanvasSetting = {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: 'rgba(0,0,0,0)',\n        removeContainer: true\n      };\n      var targetImg = html2canvas(currentRef, defaultCanvasSetting).then(function (canvas) {\n        var imgData = canvas.toDataURL('image/png', 1.0);\n        return imgData;\n      });\n      return targetImg;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getData\", function (item) {\n      return new _Promise(function (resolve) {\n        var currentChild = item.child;\n\n        _this.setState({\n          activePage: item.state\n        }, function _callee2() {\n          var data;\n          return _regeneratorRuntime.async(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return _regeneratorRuntime.awrap(_this[currentChild].getComponentImages());\n\n                case 2:\n                  data = _context2.sent;\n                  _context2.t0 = item.state;\n                  _context2.next = _context2.t0 === 'StrengthsAndWeaknesses' ? 6 : _context2.t0 === 'answerSheet' ? 8 : _context2.t0 === 'scores' ? 10 : 12;\n                  break;\n\n                case 6:\n                  _this.setState({\n                    analysisCicleImages: data.circleImageList,\n                    analysisBarImages: data.barImageList\n                  });\n\n                  return _context2.abrupt(\"break\", 13);\n\n                case 8:\n                  _this.setState({\n                    answerSheetImages: data\n                  });\n\n                  return _context2.abrupt(\"break\", 13);\n\n                case 10:\n                  _this.setState({\n                    scoresImages: data\n                  });\n\n                  return _context2.abrupt(\"break\", 13);\n\n                case 12:\n                  return _context2.abrupt(\"break\", 13);\n\n                case 13:\n                  resolve();\n\n                case 14:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          });\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generateScoreReportPdf\", function _callee4() {\n      var imgDataLists, _this$state, subjects, adminInfo, headerGradient, coverBackgroundImg, logoImg, backgroundImage, logo, pageStates, getImagesPromise;\n\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this.setState({\n                enablePublish: false\n              });\n\n              imgDataLists = [];\n              _this$state = _this.state, subjects = _this$state.subjects, adminInfo = _this$state.adminInfo, headerGradient = _this$state.headerGradient;\n              coverBackgroundImg = './static/images/sunset.jpg';\n              logoImg = './static/images/study-hut-logo.png';\n              _context4.next = 7;\n              return _regeneratorRuntime.awrap(_this.getBase64ImageFromURL(\"\".concat(coverBackgroundImg, \"?auto=compress&cs=tinysrgb&dpr=1&w=500\")));\n\n            case 7:\n              backgroundImage = _context4.sent;\n              _context4.next = 10;\n              return _regeneratorRuntime.awrap(_this.getBase64ImageFromURL(\"\".concat(logoImg, \"?auto=compress&cs=tinysrgb&dpr=1&w=500\")));\n\n            case 10:\n              logo = _context4.sent;\n              pageStates = [{\n                state: 'scores',\n                child: 'ScoresChild'\n              }, {\n                state: 'StrengthsAndWeaknesses',\n                child: 'AnalysisChild'\n              }, {\n                state: 'answerSheet',\n                child: 'AnswerSheetChild'\n              }];\n              getImagesPromise = pageStates.reduce(function (accumulatorPromise, item) {\n                return accumulatorPromise.then(function _callee3() {\n                  var images;\n                  return _regeneratorRuntime.async(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return _regeneratorRuntime.awrap(_this.getData(item));\n\n                        case 2:\n                          images = _context3.sent;\n\n                        case 3:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  });\n                })[\"catch\"](console.error);\n              }, _Promise.resolve());\n              getImagesPromise.then(function () {\n                _this.setState({\n                  enablePublish: true\n                });\n\n                var _this$state2 = _this.state,\n                    scoresImages = _this$state2.scoresImages,\n                    analysisCicleImages = _this$state2.analysisCicleImages,\n                    analysisBarImages = _this$state2.analysisBarImages,\n                    answerSheetImages = _this$state2.answerSheetImages;\n                imgDataLists.push({\n                  image: scoresImages,\n                  width: 550,\n                  margin: [0, 20, 0, 0],\n                  pageBreak: 'after'\n                });\n\n                for (var i = 0; i < 3; i++) {\n                  imgDataLists.push({\n                    image: analysisCicleImages[i],\n                    width: 300,\n                    margin: [0, 20, 0, 0]\n                  });\n                  imgDataLists.push({\n                    image: analysisBarImages[i],\n                    width: 550,\n                    margin: [0, 20, 0, 0],\n                    pageBreak: 'after'\n                  });\n                  imgDataLists.push({\n                    image: analysisBarImages[i],\n                    width: 550,\n                    margin: [0, 20, 0, 0],\n                    pageBreak: 'after'\n                  });\n                  imgDataLists.push({\n                    image: answerSheetImages[i],\n                    width: 550,\n                    margin: [0, 20, 0, 0],\n                    pageBreak: 'after'\n                  });\n                }\n\n                imgDataLists.push({\n                  image: answerSheetImages[3],\n                  width: 550,\n                  margin: [0, 20, 0, 0]\n                });\n                var _this$props2 = _this.props,\n                    _this$props2$test = _this$props2.test,\n                    test_description = _this$props2$test.test_description,\n                    completion_date = _this$props2$test.completion_date,\n                    _this$props2$activeSt = _this$props2.activeStudent.studentInformation,\n                    firstName = _this$props2$activeSt.firstName,\n                    lastName = _this$props2$activeSt.lastName;\n                var userInfo = update(_this.state.userInfo, {\n                  $merge: {\n                    name: \"\".concat(firstName, \" \").concat(lastName),\n                    version: test_description,\n                    test_date: moment(completion_date).format('MMMM Do YYYY')\n                  }\n                });\n                pdfMakeReport(imgDataLists, userInfo, subjects, adminInfo, backgroundImage, headerGradient, logo);\n              });\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUpdateTestSectionMsg\", function (message) {\n      return _this.setState({\n        updateTestSectionMessage: message\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCurrentPage\", function () {\n      var activePage = _this.state.activePage;\n      var _this$props3 = _this.props,\n          test = _this$props3.test,\n          user = _this$props3.user,\n          onDeleteTest = _this$props3.onDeleteTest,\n          onSaveTestChanges = _this$props3.onSaveTestChanges,\n          onOpentTestScore = _this$props3.onOpentTestScore;\n\n      if (activePage === 'testVersion') {\n        return __jsx(TestVersionPage, {\n          test: test,\n          user: user,\n          onDeleteTest: onDeleteTest,\n          onSaveTestChanges: onSaveTestChanges,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340\n          },\n          __self: this\n        });\n      }\n\n      if (activePage === 'scores') {\n        return __jsx(\"div\", {\n          id: \"wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 350\n          },\n          __self: this\n        }, __jsx(DetailTestScorePage, {\n          test: test,\n          getTargetImage: _this.getTargetImage,\n          onRef: function onRef(ref) {\n            return _this.ScoresChild = ref;\n          },\n          onGetTestScores: _this.props.onGetTestScores,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351\n          },\n          __self: this\n        }));\n      }\n\n      if (activePage === 'answerSheet') {\n        var _this$state3 = _this.state,\n            readingSectionCompleted = _this$state3.readingSectionCompleted,\n            writingSectionCompleted = _this$state3.writingSectionCompleted,\n            mathNoCalcSectionCompleted = _this$state3.mathNoCalcSectionCompleted,\n            mathCalcSectionCompleted = _this$state3.mathCalcSectionCompleted,\n            updateTestSectionMessage = _this$state3.updateTestSectionMessage,\n            setIsCompleted = _this$state3.setIsCompleted;\n        return __jsx(DetailTestAnswerSheetComplete, {\n          testScoreDetails: test,\n          getTargetImage: _this.getTargetImage,\n          onRef: function onRef(ref) {\n            return _this.AnswerSheetChild = ref;\n          },\n          handleTestScore: _this.handleTestScore,\n          completedSections: {\n            readingSectionCompleted: readingSectionCompleted,\n            writingSectionCompleted: writingSectionCompleted,\n            mathNoCalcSectionCompleted: mathNoCalcSectionCompleted,\n            mathCalcSectionCompleted: mathCalcSectionCompleted\n          },\n          setIsCompleted: setIsCompleted,\n          test: _this.props.test,\n          updateTestSectionMessage: updateTestSectionMessage,\n          onUpdateTestSectionMsg: _this.onUpdateTestSectionMsg,\n          openTestScores: onOpentTestScore,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 370\n          },\n          __self: this\n        });\n      }\n\n      if (activePage === 'StrengthsAndWeaknesses') {\n        return __jsx(StrengthsAndWeaknesses, {\n          getTargetImage: _this.getTargetImage,\n          onRef: function onRef(ref) {\n            return _this.AnalysisChild = ref;\n          },\n          test: _this.props.test,\n          activeStudent: _this.props.activeStudent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 392\n          },\n          __self: this\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTestScore\", function _callee5(activeSection, problemsByTest) {\n      var testReadingProblems, testWritingProblems, testMathCalcProblems, testMathNoCalcProblems, _this$props4, tests, test_id, test, postBody, res, currentTestSectionId, testIds, currentTestIndex, currentTestSections, testSectionIds, currentTestSectionIndex, currentTestSection, _this$state4, readingSectionCompleted, writingSectionCompleted, mathCalcSectionCompleted, mathNoCalcSectionCompleted, _postBody, _this$props5, onOpentTestScore, onUpdateTestStatus, currentTestStatus;\n\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Check for non-existing sections and set them to completed\n              testReadingProblems = problemsByTest.testReadingProblems, testWritingProblems = problemsByTest.testWritingProblems, testMathCalcProblems = problemsByTest.testMathCalcProblems, testMathNoCalcProblems = problemsByTest.testMathNoCalcProblems;\n              if (!testReadingProblems) _this.setState({\n                readingSectionCompleted: true\n              });\n              if (!testWritingProblems) _this.setState({\n                writingSectionCompleted: true\n              });\n              if (!testMathCalcProblems) _this.setState({\n                mathCalcSectionCompleted: true\n              });\n              if (!testMathNoCalcProblems) _this.setState({\n                mathNoCalcSectionCompleted: true\n              }); // @TODO bring back started check for a test that was just created\n              // if (activeTest.test_section_status === 'STARTED') {\n\n              _this$props4 = _this.props, tests = _this$props4.tests, test_id = _this$props4.test.test_id, test = _this$props4.test;\n              postBody = {\n                student_test_id: test.student_test_id,\n                student_test_section_id: activeSection.id,\n                student_test_section_status: 'COMPLETED'\n              };\n              _context5.next = 9;\n              return _regeneratorRuntime.awrap(updateStudentTestSectionStatusApi(postBody));\n\n            case 9:\n              res = _context5.sent;\n\n              if (!(res && res.message)) {\n                _context5.next = 12;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", _this.onUpdateTestSectionMsg('Something went wrong completing this test section. Please try again later.'));\n\n            case 12:\n              // Update current section as completed\n              currentTestSectionId = activeSection.test_section_id;\n              testIds = tests.map(function (test) {\n                return test.id;\n              });\n              currentTestIndex = testIds.findIndex(function (testId) {\n                return testId === test_id;\n              });\n              currentTestSections = tests[currentTestIndex].test_sections;\n              testSectionIds = currentTestSections.map(function (testSection) {\n                return testSection.id;\n              });\n              currentTestSectionIndex = testSectionIds.findIndex(function (testSectionId) {\n                return testSectionId === currentTestSectionId;\n              });\n              currentTestSection = currentTestSections[currentTestSectionIndex];\n              _context5.t0 = currentTestSection.name;\n              _context5.next = _context5.t0 === 'Math (Calculator)' ? 22 : _context5.t0 === 'Writing' ? 24 : _context5.t0 === 'Math (No Calculator)' ? 26 : _context5.t0 === 'Reading' ? 28 : 30;\n              break;\n\n            case 22:\n              _this.setState({\n                mathCalcSectionCompleted: true\n              });\n\n              return _context5.abrupt(\"break\", 31);\n\n            case 24:\n              _this.setState({\n                writingSectionCompleted: true\n              });\n\n              return _context5.abrupt(\"break\", 31);\n\n            case 26:\n              _this.setState({\n                mathNoCalcSectionCompleted: true\n              });\n\n              return _context5.abrupt(\"break\", 31);\n\n            case 28:\n              _this.setState({\n                readingSectionCompleted: true\n              });\n\n              return _context5.abrupt(\"break\", 31);\n\n            case 30:\n              _this.setState({\n                readingSectionCompleted: true\n              });\n\n            case 31:\n              _this$state4 = _this.state, readingSectionCompleted = _this$state4.readingSectionCompleted, writingSectionCompleted = _this$state4.writingSectionCompleted, mathCalcSectionCompleted = _this$state4.mathCalcSectionCompleted, mathNoCalcSectionCompleted = _this$state4.mathNoCalcSectionCompleted;\n\n              if (readingSectionCompleted && writingSectionCompleted && mathCalcSectionCompleted && mathNoCalcSectionCompleted) {\n                _postBody = {\n                  student_test_id: test.student_test_id,\n                  status: 'COMPLETED'\n                };\n                _this$props5 = _this.props, onOpentTestScore = _this$props5.onOpentTestScore, onUpdateTestStatus = _this$props5.onUpdateTestStatus;\n                currentTestStatus = test.due_status === 'OVERDUE' ? 'overdueStudentTests' : 'assignedStudentTests';\n                onUpdateTestStatus(_postBody, currentTestStatus, test.student_id); // Delay set on saga before running onOpentTestScore()\n\n                onOpentTestScore(_objectSpread({}, test, {\n                  status: 'COMPLETED'\n                }));\n              }\n\n            case 33:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    });\n\n    _this.state = {\n      activePage: props.activePage,\n      scoresImages: null,\n      analysisBarImages: [],\n      analysisCicleImages: [],\n      answerSheetImages: [],\n      enablePublish: true,\n      subjects: ['Practice Test Scores', 'Reading Analysis', 'Reading Analysis (cont’d)', 'Reading Answer Sheet', 'Writing Analysis', 'Writing Analysis (cont’d)', 'Writing Answer Sheet', 'Math Analysis', \"Math Analysis (cont'd)\", 'Math Answer Sheet(no calc)', 'Math Answer Sheet(calculator)'],\n      adminInfo: 'Study Hut Tutoring | www.studyhut.com | (310) 555-1212 | info@studyhut.com',\n      userInfo: {\n        version: '',\n        target: 'Score Report',\n        test_date: '',\n        name: '',\n        test_type: 'Practice Test',\n        order: '3rd'\n      },\n      headerGradient: ['#ec693d 0%', '#649aab 61%', '#30add6 87%', '#18b5e9 100%'],\n      readingSectionCompleted: false,\n      writingSectionCompleted: false,\n      mathNoCalcSectionCompleted: false,\n      mathCalcSectionCompleted: false,\n      fetchScoresMsg: \"\",\n      updateTestStatusMsg: \"\",\n      updateTestSectionMessage: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(EditTestModal, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.onRef(undefined);\n      this.props.onResetErrorMessage(\"fetchScoresMsg\");\n      this.props.onResetErrorMessage(\"updateTestStatusMsg\");\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var activePage = nextProps.activePage,\n          sections = nextProps.sections,\n          errorMessages = nextProps.errorMessages;\n      var onCloseEditTestModal = this.props.onCloseEditTestModal;\n\n      if (activePage !== this.state.activePage && activePage !== this.props.activePage) {\n        this.setState({\n          activePage: activePage\n        });\n      }\n\n      if (sections.length !== 0) {\n        var _this$props6 = this.props,\n            tests = _this$props6.tests,\n            test_id = _this$props6.test.test_id;\n        sections.map(function (section) {\n          if (section.test_section_status === 'COMPLETED') {\n            var testIds = tests.map(function (test) {\n              return test.id;\n            });\n            var currentTestIndex = testIds.findIndex(function (testId) {\n              return testId === test_id;\n            });\n            var currentTestSections = tests[currentTestIndex].test_sections;\n            var testSectionIndex = currentTestSections.findIndex(function (testSection) {\n              return testSection.id === section.test_section_id;\n            }); // If no match return and wait for new props\n\n            if (!currentTestSections[testSectionIndex]) return;\n            var sectionType = currentTestSections[testSectionIndex].name;\n\n            switch (sectionType) {\n              case 'Reading':\n                return _this2.setState({\n                  readingSectionCompleted: true\n                });\n\n              case 'Writing':\n                return _this2.setState({\n                  writingSectionCompleted: true\n                });\n\n              case 'Math (Calculator)':\n                return _this2.setState({\n                  mathCalcSectionCompleted: true\n                });\n\n              case 'Math (No Calculator)':\n                return _this2.setState({\n                  mathNoCalcSectionCompleted: true\n                });\n\n              default:\n            }\n          }\n        });\n      }\n\n      var errorConditon = function errorConditon(name) {\n        return errorMessages[name] && errorMessages[name] !== _this2.state[name] && errorMessages[name] !== \"\";\n      };\n\n      if (errorConditon(\"fetchScoresMsg\")) {\n        this.setState({\n          fetchScoresMsg: errorMessages.fetchScoresMsg\n        });\n        toast.error(errorMessages.fetchScoresMsg);\n        onCloseEditTestModal();\n      }\n\n      if (errorConditon(\"updateTestStatusMsg\")) {\n        this.setState({\n          updateTestStatusMsg: errorMessages.updateTestStatusMsg\n        });\n        toast.error(errorMessages.updateTestStatusMsg);\n        onCloseEditTestModal();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props7 = this.props,\n          test = _this$props7.test,\n          user = _this$props7.user,\n          onCloseEditTestModal = _this$props7.onCloseEditTestModal;\n      var _this$state5 = this.state,\n          activePage = _this$state5.activePage,\n          enablePublish = _this$state5.enablePublish;\n      var title = test.title,\n          test_name = test.test_name;\n      var _user$studentInformat = user.studentInformation,\n          firstName = _user$studentInformat.firstName,\n          lastName = _user$studentInformat.lastName;\n      var completedTest = test.status === 'COMPLETED';\n      return __jsx(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-modal card-main card switcher-section grey lighten-5 modal\",\n        style: {\n          zIndex: '1003',\n          display: 'block',\n          position: 'absolute',\n          top: '0',\n          minHeight: '100%',\n          minWidth: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"header-row card-panel light-blue lighten-1 white-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-panel-row row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"icon-col col s1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511\n        },\n        __self: this\n      }, __jsx(\"i\", {\n        className: \"icon-letter-a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        className: \"col s9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-panel-text center-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"text-xlarge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516\n        },\n        __self: this\n      }, title), __jsx(\"div\", {\n        className: \"text-small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }, \"Version: \", test_name))), __jsx(\"div\", {\n        className: \"col s1 right-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"close-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        href: \"#\",\n        className: \"modal-close close\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526\n        },\n        __self: this\n      }, __jsx(\"i\", {\n        className: \"icon-close-thin\",\n        onClick: onCloseEditTestModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527\n        },\n        __self: this\n      }))))), __jsx(\"div\", {\n        className: \"header-row-block card-panel-row row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"col s3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533\n        },\n        __self: this\n      }, \"\\xA0\"), __jsx(\"div\", {\n        className: \"col s9 right-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536\n        },\n        __self: this\n      }, firstName, \" \", lastName))))), __jsx(\"div\", {\n        className: \"nav-header white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"nav-additional\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544\n        },\n        __self: this\n      }, __jsx(\"ul\", {\n        className: \"menu-additional\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545\n        },\n        __self: this\n      }, completedTest && __jsx(\"li\", {\n        className: \"col s3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        className: activePage === 'scores' ? 'active' : '',\n        onClick: function onClick() {\n          return enablePublish && _this3.onSetActivePage('scores');\n        },\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548\n        },\n        __self: this\n      }, \"Scores\")), __jsx(\"li\", {\n        className: \"col s3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        className: activePage === 'answerSheet' ? 'active' : '',\n        onClick: function onClick() {\n          return enablePublish && _this3.onSetActivePage('answerSheet');\n        },\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557\n        },\n        __self: this\n      }, \"Answer Sheet\")), completedTest && __jsx(\"li\", {\n        className: \"col s3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        className: activePage === 'StrengthsAndWeaknesses' ? 'active' : '',\n        onClick: function onClick() {\n          return enablePublish && _this3.onSetActivePage('StrengthsAndWeaknesses');\n        },\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567\n        },\n        __self: this\n      }, \"Strengths & Weaknesses\")), completedTest && __jsx(\"li\", {\n        className: \"menu-special col s3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        href: \"#\",\n        onClick: function onClick() {\n          return enablePublish && _this3.generateScoreReportPdf();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578\n        },\n        __self: this\n      }, \"Download Score Report\", __jsx(\"i\", {\n        className: \"icon-download-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580\n        },\n        __self: this\n      })))))), __jsx(\"div\", {\n        className: \"sweet-loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586\n        },\n        __self: this\n      }, __jsx(BarLoader, {\n        height: 3,\n        width: '100%',\n        color: '#36D7B7',\n        loading: !this.state.enablePublish,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587\n        },\n        __self: this\n      })), !this.state.enablePublish && __jsx(\"div\", {\n        style: {\n          textAlign: 'center',\n          padding: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595\n        },\n        __self: this\n      }, \"please wait the test score report downloading...\"), __jsx(\"div\", {\n        className: \"content-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"content-section-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598\n        },\n        __self: this\n      }, this.renderCurrentPage()))));\n    }\n  }]);\n\n  return EditTestModal;\n}(React.Component);\n\nEditTestModal.propTypes = {\n  test: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSaveTestChanges: PropTypes.func.isRequired,\n  onCloseEditTestModal: PropTypes.func.isRequired\n};\nvar mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  tests: makeSelectTests(),\n  assignedTests: makeSelectAssignedStudentTests(),\n  activeStudent: makeSelectActiveStudent(),\n  activeTestScores: makeSelectActiveTestScores(),\n  errorMessages: makeSelectErrorMessages()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: function onFetchStudentTestSections(postBody) {\n      return dispatch(fetchStudentTestSections(postBody));\n    },\n    onSetAssignedTests: function onSetAssignedTests(tests) {\n      return dispatch(setStudentAssignedTests(tests));\n    },\n    onSetCompletedTests: function onSetCompletedTests(tests) {\n      return dispatch(setStudentCompletedTests(tests));\n    },\n    onUpdateTestStatus: function onUpdateTestStatus(payload, currentStatus, studentId) {\n      return dispatch(updateTestStatus(payload, currentStatus, studentId));\n    },\n    onSetScores: function onSetScores(scores) {\n      return dispatch(setActiveTestScores(scores));\n    },\n    onGetTestScores: function onGetTestScores(postBody) {\n      return dispatch(getTestScores(postBody));\n    },\n    onResetErrorMessage: function onResetErrorMessage(errorName) {\n      return dispatch(resetErrorMessage(errorName));\n    }\n  };\n}\n\nvar withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(EditTestModal);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EditTestModal/index.js"],"names":["React","PropTypes","update","moment","connect","createStructuredSelector","compose","toast","TestVersionPage","DetailTestScorePage","DetailTestAnswerSheetComplete","StrengthsAndWeaknesses","pdfMakeReport","makeSelectStudentSections","makeSelectActiveStudentToken","makeSelectTests","makeSelectAssignedStudentTests","makeSelectActiveStudent","makeSelectActiveTestScores","makeSelectErrorMessages","setStudentAssignedTests","setStudentCompletedTests","updateTestStatus","setActiveTestScores","getTestScores","resetErrorMessage","fetchStudentTestSections","updateStudentTestSectionStatusApi","updateStudentTestStatusApi","fetchTestsByStudentIdApi","css","BarLoader","EditTestModal","props","onFetchStudentTestSections","studentToken","student_test_id","test","id","activeStudent","postBody","onRef","url","resolve","reject","img","Image","setAttribute","onload","canvas","document","createElement","width","height","ctx","getContext","drawImage","dataURL","toDataURL","onerror","error","src","activePage","setState","currentRef","html2canvas","require","defaultCanvasSetting","scale","useCORS","allowTaint","backgroundColor","removeContainer","targetImg","then","imgData","item","currentChild","child","state","getComponentImages","data","analysisCicleImages","circleImageList","analysisBarImages","barImageList","answerSheetImages","scoresImages","enablePublish","imgDataLists","subjects","adminInfo","headerGradient","coverBackgroundImg","logoImg","getBase64ImageFromURL","backgroundImage","logo","pageStates","getImagesPromise","reduce","accumulatorPromise","getData","images","console","push","image","margin","pageBreak","i","test_description","completion_date","studentInformation","firstName","lastName","userInfo","$merge","name","version","test_date","format","message","updateTestSectionMessage","user","onDeleteTest","onSaveTestChanges","onOpentTestScore","getTargetImage","ref","ScoresChild","onGetTestScores","readingSectionCompleted","writingSectionCompleted","mathNoCalcSectionCompleted","mathCalcSectionCompleted","setIsCompleted","AnswerSheetChild","handleTestScore","onUpdateTestSectionMsg","AnalysisChild","activeSection","problemsByTest","testReadingProblems","testWritingProblems","testMathCalcProblems","testMathNoCalcProblems","tests","test_id","student_test_section_id","student_test_section_status","res","currentTestSectionId","test_section_id","testIds","map","currentTestIndex","findIndex","testId","currentTestSections","test_sections","testSectionIds","testSection","currentTestSectionIndex","testSectionId","currentTestSection","status","onUpdateTestStatus","currentTestStatus","due_status","student_id","target","test_type","order","fetchScoresMsg","updateTestStatusMsg","undefined","onResetErrorMessage","nextProps","sections","errorMessages","onCloseEditTestModal","length","section","test_section_status","testSectionIndex","sectionType","errorConditon","title","test_name","completedTest","zIndex","display","position","top","minHeight","minWidth","onSetActivePage","generateScoreReportPdf","textAlign","padding","renderCurrentPage","Component","propTypes","object","isRequired","func","mapStateToProps","assignedTests","activeTestScores","mapDispatchToProps","dispatch","onSetAssignedTests","onSetCompletedTests","payload","currentStatus","studentId","onSetScores","scores","errorName","withConnect"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-did-update-set-state */\n/* eslint-disable react/no-did-mount-set-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { toast } from 'react-toastify';\nimport TestVersionPage from '../TestVersionPage';\nimport DetailTestScorePage from '../../../DetailTestScorePage';\nimport DetailTestAnswerSheetComplete from '../../../DetailTestAnswerSheetComplete';\nimport StrengthsAndWeaknesses from '../../../DetailTestStrengthsAndWeakesses';\nimport pdfMakeReport from './pdfMakeReport';\nimport {\n  makeSelectStudentSections,\n  makeSelectActiveStudentToken,\n  makeSelectTests,\n  makeSelectAssignedStudentTests,\n  makeSelectActiveStudent,\n  makeSelectActiveTestScores,\n  makeSelectErrorMessages,\n} from '../../../index/selectors';\nimport {\n  setStudentAssignedTests,\n  setStudentCompletedTests,\n  updateTestStatus,\n  setActiveTestScores,\n  getTestScores,\n  resetErrorMessage,\n  fetchStudentTestSections,\n} from '../../../index/actions';\nimport {\n  updateStudentTestSectionStatusApi,\n  updateStudentTestStatusApi,\n  fetchTestsByStudentIdApi,\n} from '../../../index/api';\n\nimport { css } from '@emotion/core';\nimport BarLoader from 'react-spinners/BarLoader';\n\nclass EditTestModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activePage: props.activePage,\n      scoresImages: null,\n      analysisBarImages: [],\n      analysisCicleImages: [],\n      answerSheetImages: [],\n      enablePublish: true,\n      subjects: [\n        'Practice Test Scores',\n        'Reading Analysis',\n        'Reading Analysis (cont’d)',\n        'Reading Answer Sheet',\n        'Writing Analysis',\n        'Writing Analysis (cont’d)',\n        'Writing Answer Sheet',\n        'Math Analysis',\n        \"Math Analysis (cont'd)\",\n        'Math Answer Sheet(no calc)',\n        'Math Answer Sheet(calculator)',\n      ],\n      adminInfo: 'Study Hut Tutoring | www.studyhut.com | (310) 555-1212 | info@studyhut.com',\n      userInfo: {\n        version: '',\n        target: 'Score Report',\n        test_date: '',\n        name: '',\n        test_type: 'Practice Test',\n        order: '3rd',\n      },\n      headerGradient: ['#ec693d 0%', '#649aab 61%', '#30add6 87%', '#18b5e9 100%'],\n      readingSectionCompleted: false,\n      writingSectionCompleted: false,\n      mathNoCalcSectionCompleted: false,\n      mathCalcSectionCompleted: false,\n      fetchScoresMsg: \"\",\n      updateTestStatusMsg: \"\",\n      updateTestSectionMessage: \"\",\n    };\n  }\n\n  componentDidMount = async () => {\n    const {\n      onFetchStudentTestSections,\n      studentToken,\n      test: { student_test_id },\n      activeStudent: { id },\n    } = this.props;\n\n    const postBody = {\n      id,\n      student_test_id,\n      studentToken,\n    };\n    onFetchStudentTestSections(postBody);\n    this.props.onRef(this);\n  };\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n    this.props.onResetErrorMessage(\"fetchScoresMsg\");\n    this.props.onResetErrorMessage(\"updateTestStatusMsg\");\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { activePage, sections, errorMessages } = nextProps;\n    const { onCloseEditTestModal } = this.props;\n    if (activePage !== this.state.activePage && activePage !== this.props.activePage) {\n      this.setState({ activePage });\n    }\n    if (sections.length !== 0) {\n      const { tests, test: { test_id } } = this.props;\n      sections.map(section => {\n        if (section.test_section_status === 'COMPLETED') {\n          const testIds = tests.map(test => test.id);\n          const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n          const currentTestSections = tests[currentTestIndex].test_sections;\n          const testSectionIndex = currentTestSections.findIndex(\n            testSection => testSection.id === section.test_section_id,\n          );\n          // If no match return and wait for new props\n          if (!currentTestSections[testSectionIndex]) return;\n\n          const sectionType = currentTestSections[testSectionIndex].name;\n          switch (sectionType) {\n            case 'Reading':\n              return this.setState({ readingSectionCompleted: true });\n            case 'Writing':\n              return this.setState({ writingSectionCompleted: true });\n            case 'Math (Calculator)':\n              return this.setState({ mathCalcSectionCompleted: true });\n            case 'Math (No Calculator)':\n              return this.setState({ mathNoCalcSectionCompleted: true });\n            default:\n          }\n        }\n      });\n    }\n    const errorConditon = (name) => (errorMessages[name] && errorMessages[name] !== this.state[name] && errorMessages[name] !== \"\");\n    if (errorConditon(\"fetchScoresMsg\")) {\n      this.setState({ fetchScoresMsg: errorMessages.fetchScoresMsg });\n      toast.error(errorMessages.fetchScoresMsg);\n      onCloseEditTestModal();\n    }\n    if (errorConditon(\"updateTestStatusMsg\")) {\n      this.setState({ updateTestStatusMsg: errorMessages.updateTestStatusMsg });\n      toast.error(errorMessages.updateTestStatusMsg);\n      onCloseEditTestModal();\n    }\n  }\n\n  getBase64ImageFromURL = url =>\n    new Promise((resolve, reject) => {\n      const img = new Image();\n      img.setAttribute('crossOrigin', 'anonymous');\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const dataURL = canvas.toDataURL('image/png');\n        resolve(dataURL);\n      };\n      img.onerror = error => {\n        reject(error);\n      };\n      img.src = url;\n    });\n\n  onSetActivePage = activePage => {\n    this.setState({\n      activePage,\n    });\n  };\n\n  getTargetImage = currentRef => {\n    const html2canvas = require('html2canvas');\n    const defaultCanvasSetting = {\n      scale: 2,\n      useCORS: true,\n      allowTaint: true,\n      backgroundColor: 'rgba(0,0,0,0)',\n      removeContainer: true,\n    };\n    const targetImg = html2canvas(currentRef, defaultCanvasSetting).then(canvas => {\n      const imgData = canvas.toDataURL('image/png', 1.0);\n      return imgData;\n    });\n    return targetImg;\n  };\n\n  getData = item =>\n    new Promise(resolve => {\n      const currentChild = item.child;\n      this.setState(\n        {\n          activePage: item.state,\n        },\n        async () => {\n          const data = await this[currentChild].getComponentImages();\n          switch (item.state) {\n            case 'StrengthsAndWeaknesses':\n              this.setState({\n                analysisCicleImages: data.circleImageList,\n                analysisBarImages: data.barImageList,\n              });\n              break;\n            case 'answerSheet':\n              this.setState({\n                answerSheetImages: data,\n              });\n              break;\n            case 'scores':\n              this.setState({\n                scoresImages: data,\n              });\n              break;\n            default:\n              break;\n          }\n          resolve();\n        },\n      );\n    });\n\n  generateScoreReportPdf = async () => {\n    this.setState({\n      enablePublish: false,\n    });\n    const imgDataLists = [];\n    const { subjects, adminInfo, headerGradient } = this.state;\n    const coverBackgroundImg = './static/images/sunset.jpg';\n    const logoImg = './static/images/study-hut-logo.png';\n    const backgroundImage = await this.getBase64ImageFromURL(\n      `${coverBackgroundImg}?auto=compress&cs=tinysrgb&dpr=1&w=500`,\n    );\n    const logo = await this.getBase64ImageFromURL(\n      `${logoImg}?auto=compress&cs=tinysrgb&dpr=1&w=500`,\n    );\n    const pageStates = [\n      {\n        state: 'scores',\n        child: 'ScoresChild',\n      },\n      {\n        state: 'StrengthsAndWeaknesses',\n        child: 'AnalysisChild',\n      },\n      {\n        state: 'answerSheet',\n        child: 'AnswerSheetChild',\n      },\n    ];\n    const getImagesPromise = pageStates.reduce(\n      (accumulatorPromise, item) =>\n        accumulatorPromise\n          .then(async () => {\n            const images = await this.getData(item);\n          })\n          .catch(console.error),\n      Promise.resolve(),\n    );\n\n    getImagesPromise.then(() => {\n      this.setState({\n        enablePublish: true,\n      });\n      const { scoresImages, analysisCicleImages, analysisBarImages, answerSheetImages } = this.state;\n      imgDataLists.push({\n        image: scoresImages,\n        width: 550,\n        margin: [0, 20, 0, 0],\n        pageBreak: 'after',\n      });\n      for (let i = 0; i < 3; i++) {\n        imgDataLists.push({\n          image: analysisCicleImages[i],\n          width: 300,\n          margin: [0, 20, 0, 0],\n        });\n        imgDataLists.push({\n          image: analysisBarImages[i],\n          width: 550,\n          margin: [0, 20, 0, 0],\n          pageBreak: 'after',\n        });\n        imgDataLists.push({\n          image: analysisBarImages[i],\n          width: 550,\n          margin: [0, 20, 0, 0],\n          pageBreak: 'after',\n        });\n        imgDataLists.push({\n          image: answerSheetImages[i],\n          width: 550,\n          margin: [0, 20, 0, 0],\n          pageBreak: 'after',\n        });\n      }\n      imgDataLists.push({\n        image: answerSheetImages[3],\n        width: 550,\n        margin: [0, 20, 0, 0],\n      });\n      const {\n        test: { test_description, completion_date },\n        activeStudent: { studentInformation: { firstName, lastName } },\n      } = this.props;\n      const userInfo = update(this.state.userInfo, {\n        $merge: {\n          name: `${firstName} ${lastName}`,\n          version: test_description,\n          test_date: moment(completion_date).format('MMMM Do YYYY'),\n        },\n      });\n      pdfMakeReport(\n        imgDataLists,\n        userInfo,\n        subjects,\n        adminInfo,\n        backgroundImage,\n        headerGradient,\n        logo,\n      );\n    });\n  };\n\n  onUpdateTestSectionMsg = (message) => this.setState({ updateTestSectionMessage: message })\n\n  renderCurrentPage = () => {\n    const { activePage } = this.state;\n    const { test, user, onDeleteTest, onSaveTestChanges, onOpentTestScore } = this.props;\n    if (activePage === 'testVersion') {\n      return (\n        <TestVersionPage\n          test={test}\n          user={user}\n          onDeleteTest={onDeleteTest}\n          onSaveTestChanges={onSaveTestChanges}\n        />\n      );\n    }\n    if (activePage === 'scores') {\n      return (\n        <div id=\"wrapper\">\n          <DetailTestScorePage\n            test={test}\n            getTargetImage={this.getTargetImage}\n            onRef={ref => (this.ScoresChild = ref)}\n            onGetTestScores={this.props.onGetTestScores}\n          />\n        </div>\n      );\n    }\n    if (activePage === 'answerSheet') {\n      const {\n        readingSectionCompleted,\n        writingSectionCompleted,\n        mathNoCalcSectionCompleted,\n        mathCalcSectionCompleted,\n        updateTestSectionMessage,\n        setIsCompleted,\n      } = this.state;\n      return (\n        <DetailTestAnswerSheetComplete\n          testScoreDetails={test}\n          getTargetImage={this.getTargetImage}\n          onRef={ref => (this.AnswerSheetChild = ref)}\n          handleTestScore={this.handleTestScore}\n          completedSections={{\n            readingSectionCompleted,\n            writingSectionCompleted,\n            mathNoCalcSectionCompleted,\n            mathCalcSectionCompleted,\n          }}\n          setIsCompleted={setIsCompleted}\n          test={this.props.test}\n          updateTestSectionMessage={updateTestSectionMessage}\n          onUpdateTestSectionMsg={this.onUpdateTestSectionMsg}\n          openTestScores={onOpentTestScore}\n        />\n      );\n    }\n\n    if (activePage === 'StrengthsAndWeaknesses') {\n      return (\n        <StrengthsAndWeaknesses\n          getTargetImage={this.getTargetImage}\n          onRef={ref => (this.AnalysisChild = ref)}\n          test={this.props.test}\n          activeStudent={this.props.activeStudent}\n        />\n      );\n    }\n    return null;\n  };\n\n  handleTestScore = async (activeSection, problemsByTest) => {\n    // Check for non-existing sections and set them to completed\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = problemsByTest;\n    if (!testReadingProblems) this.setState({ readingSectionCompleted: true });\n    if (!testWritingProblems) this.setState({ writingSectionCompleted: true });\n    if (!testMathCalcProblems) this.setState({ mathCalcSectionCompleted: true });\n    if (!testMathNoCalcProblems) this.setState({ mathNoCalcSectionCompleted: true });\n\n    // @TODO bring back started check for a test that was just created\n    // if (activeTest.test_section_status === 'STARTED') {\n    const { tests, test: { test_id }, test } = this.props;\n    const postBody = {\n      student_test_id: test.student_test_id,\n      student_test_section_id: activeSection.id,\n      student_test_section_status: 'COMPLETED',\n    };\n    const res = await updateStudentTestSectionStatusApi(postBody);\n    if (res && res.message) {\n      return this.onUpdateTestSectionMsg('Something went wrong completing this test section. Please try again later.');\n    }\n\n    // Update current section as completed\n    const currentTestSectionId = activeSection.test_section_id;\n    const testIds = tests.map(test => test.id);\n    const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    const testSectionIds = currentTestSections.map(testSection => testSection.id);\n    const currentTestSectionIndex = testSectionIds.findIndex(\n      testSectionId => testSectionId === currentTestSectionId,\n    );\n    const currentTestSection = currentTestSections[currentTestSectionIndex];\n    switch (currentTestSection.name) {\n      case 'Math (Calculator)':\n        this.setState({\n          mathCalcSectionCompleted: true,\n        });\n        break;\n      case 'Writing':\n        this.setState({\n          writingSectionCompleted: true,\n        });\n        break;\n      case 'Math (No Calculator)':\n        this.setState({\n          mathNoCalcSectionCompleted: true,\n        });\n        break;\n      case 'Reading':\n        this.setState({\n          readingSectionCompleted: true,\n        });\n        break;\n      default:\n        this.setState({\n          readingSectionCompleted: true,\n        });\n    }\n    const {\n      readingSectionCompleted,\n      writingSectionCompleted,\n      mathCalcSectionCompleted,\n      mathNoCalcSectionCompleted,\n    } = this.state;\n    if (\n      readingSectionCompleted &&\n      writingSectionCompleted &&\n      mathCalcSectionCompleted &&\n      mathNoCalcSectionCompleted\n    ) {\n      const postBody = {\n        student_test_id: test.student_test_id,\n        status: 'COMPLETED',\n      };\n      const { onOpentTestScore, onUpdateTestStatus } = this.props;\n      const currentTestStatus =\n        test.due_status === 'OVERDUE' ? 'overdueStudentTests' : 'assignedStudentTests';\n      onUpdateTestStatus(postBody, currentTestStatus, test.student_id);\n      // Delay set on saga before running onOpentTestScore()\n      onOpentTestScore({ ...test, status: 'COMPLETED' });\n    }\n  };\n\n  render() {\n    const { test, user, onCloseEditTestModal } = this.props;\n    const { activePage, enablePublish } = this.state;\n    const { title, test_name } = test;\n    const { studentInformation: { firstName, lastName } } = user;\n    const completedTest = test.status === 'COMPLETED';\n    return (\n      <div className=\"wrapper\">\n        <div\n          className=\"card-modal card-main card switcher-section grey lighten-5 modal\"\n          style={{\n            zIndex: '1003',\n            display: 'block',\n            position: 'absolute',\n            top: '0',\n            minHeight: '100%',\n            minWidth: '100%',\n          }}\n        >\n          <div className=\"header-row card-panel light-blue lighten-1 white-text\">\n            <div className=\"card-panel-row row\">\n              <div className=\"icon-col col s1\">\n                <i className=\"icon-letter-a\" />\n              </div>\n              <div className=\"col s9\">\n                <div className=\"card-panel-text center-align\">\n                  <div className=\"text-xlarge\">\n                    {title}\n                  </div>\n                  <div className=\"text-small\">\n                    Version: {test_name}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col s1 right-align\">\n                <div className=\"close-block\">\n                  <a href=\"#\" className=\"modal-close close\">\n                    <i className=\"icon-close-thin\" onClick={onCloseEditTestModal} />\n                  </a>\n                </div>\n              </div>\n            </div>\n            <div className=\"header-row-block card-panel-row row\">\n              <div className=\"col s3\">&nbsp;</div>\n              <div className=\"col s9 right-align\">\n                <div>\n                  <span className=\"name\">\n                    {firstName} {lastName}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"nav-header white\">\n            <div className=\"nav-additional\">\n              <ul className=\"menu-additional\">\n                {completedTest &&\n                  <li className=\"col s3\">\n                    <a\n                      className={activePage === 'scores' ? 'active' : ''}\n                      onClick={() => enablePublish && this.onSetActivePage('scores')}\n                      href=\"#\"\n                    >\n                      Scores\n                    </a>\n                  </li>}\n                <li className=\"col s3\">\n                  <a\n                    className={activePage === 'answerSheet' ? 'active' : ''}\n                    onClick={() => enablePublish && this.onSetActivePage('answerSheet')}\n                    href=\"#\"\n                  >\n                    Answer Sheet\n                  </a>\n                </li>\n                {completedTest &&\n                  <li className=\"col s3\">\n                    <a\n                      className={activePage === 'StrengthsAndWeaknesses' ? 'active' : ''}\n                      onClick={() =>\n                        enablePublish && this.onSetActivePage('StrengthsAndWeaknesses')}\n                      href=\"#\"\n                    >\n                      Strengths &amp; Weaknesses\n                    </a>\n                  </li>}\n                {completedTest &&\n                  <li className=\"menu-special col s3\">\n                    <a href=\"#\" onClick={() => enablePublish && this.generateScoreReportPdf()}>\n                      Download Score Report\n                      <i className=\"icon-download-file\" />\n                    </a>\n                  </li>}\n              </ul>\n            </div>\n          </div>\n          <div className=\"sweet-loading\">\n            <BarLoader\n              height={3}\n              width={'100%'}\n              color={'#36D7B7'}\n              loading={!this.state.enablePublish}\n            />\n          </div>\n          {\n            !this.state.enablePublish && <div style={{ textAlign: 'center', padding: 10 }}>please wait the test score report downloading...</div>\n          }\n          <div className=\"content-section\">\n            <div className=\"content-section-holder\">\n              {this.renderCurrentPage()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nEditTestModal.propTypes = {\n  test: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSaveTestChanges: PropTypes.func.isRequired,\n  onCloseEditTestModal: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  tests: makeSelectTests(),\n  assignedTests: makeSelectAssignedStudentTests(),\n  activeStudent: makeSelectActiveStudent(),\n  activeTestScores: makeSelectActiveTestScores(),\n  errorMessages: makeSelectErrorMessages(),\n});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n    onSetAssignedTests: tests => dispatch(setStudentAssignedTests(tests)),\n    onSetCompletedTests: tests => dispatch(setStudentCompletedTests(tests)),\n    onUpdateTestStatus: (payload, currentStatus, studentId) =>\n      dispatch(updateTestStatus(payload, currentStatus, studentId)),\n    onSetScores: scores => dispatch(setActiveTestScores(scores)),\n    onGetTestScores: (postBody) => dispatch(getTestScores(postBody)),\n    onResetErrorMessage: errorName => dispatch(resetErrorMessage(errorName)),\n  };\n}\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(EditTestModal);\n"]},"metadata":{},"sourceType":"module"}