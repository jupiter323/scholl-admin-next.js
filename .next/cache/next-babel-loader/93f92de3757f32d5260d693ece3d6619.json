{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\n\nvar Settings = function Settings(_ref) {\n  var testDate = _ref.testDate,\n      dueDate = _ref.dueDate,\n      handleDatePickerChange = _ref.handleDatePickerChange,\n      allowStudentToEnterAnswers = _ref.allowStudentToEnterAnswers,\n      timed = _ref.timed,\n      handleSettingsChange = _ref.handleSettingsChange;\n  return __jsx(React.Fragment, null, __jsx(\"h2\", null, \"Settings\"), __jsx(\"div\", {\n    className: \"card card-test-detail\"\n  }, __jsx(\"div\", {\n    className: \"card-content\"\n  }, __jsx(\"div\", {\n    className: \"datepicker-field input-field\"\n  }, __jsx(\"i\", {\n    className: \"icon-calendar\"\n  }), __jsx(DatePicker, {\n    selected: testDate,\n    withPortal: true,\n    dateFormat: \"MM/dd/yy\",\n    id: \"testDate\",\n    name: \"testDate\",\n    onChange: function onChange(event) {\n      return handleDatePickerChange('testDate', event);\n    }\n  }), __jsx(\"label\", {\n    className: testDate ? 'label active' : 'label',\n    htmlFor: \"date_Test\"\n  }, \"Test Date\")), __jsx(\"div\", {\n    className: \"datepicker-field input-field\"\n  }, __jsx(\"i\", {\n    className: \"icon-calendar\"\n  }), __jsx(DatePicker, {\n    selected: dueDate,\n    withPortal: true,\n    dateFormat: \"MM/dd/yy\",\n    id: \"dueDate\",\n    name: \"dueDate\",\n    onChange: function onChange(event) {\n      return handleDatePickerChange('dueDate', event);\n    }\n  }), __jsx(\"label\", {\n    className: dueDate ? 'label active' : 'label',\n    htmlFor: \"date_Test\"\n  }, \"Due Date (optional)\")), __jsx(\"div\", {\n    className: \"input-field\"\n  }, __jsx(\"p\", null, __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"checkbox\",\n    name: \"allowStudentToEnterAnswers\",\n    className: \"filled-in\",\n    checked: allowStudentToEnterAnswers,\n    onChange: handleSettingsChange\n  }), __jsx(\"span\", null, \"Allow Student to Enter Answers\")))), __jsx(\"div\", {\n    className: \"input-field\"\n  }, __jsx(\"p\", null, __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"checkbox\",\n    name: \"timed\",\n    className: \"filled-in\",\n    checked: timed,\n    onChange: handleSettingsChange\n  }), __jsx(\"span\", null, \"Timed\")))))));\n};\n\nSettings.propTypes = {\n  dueDate: PropTypes.any,\n  testDate: PropTypes.any,\n  timed: PropTypes.bool.isRequired,\n  handleSettingsChange: PropTypes.func.isRequired,\n  handleDatePickerChange: PropTypes.func.isRequired,\n  allowStudentToEnterAnswers: PropTypes.bool.isRequired\n};\nexport default Settings;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/DetailTestList/components/EditTestModal/components/Settings/index.js"],"names":["React","PropTypes","DatePicker","Settings","testDate","dueDate","handleDatePickerChange","allowStudentToEnterAnswers","timed","handleSettingsChange","event","propTypes","any","bool","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,4CAAP;AACA,OAAO,uDAAP;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,OAAb,QAAaA,OAAb;AAAA,MAAsBC,sBAAtB,QAAsBA,sBAAtB;AAAA,MAA8CC,0BAA9C,QAA8CA,0BAA9C;AAAA,MAA0EC,KAA1E,QAA0EA,KAA1E;AAAA,MAAiFC,oBAAjF,QAAiFA,oBAAjF;AAAA,SACf,MAAC,KAAD,CAAO,QAAP,QACE,6BADF,EAEE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAG,IAAA,SAAS,EAAC;AAAb,IADF,EAEE,MAAC,UAAD;AACE,IAAA,QAAQ,EAAEL,QADZ;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,UAAU,EAAC,UAHb;AAIE,IAAA,EAAE,EAAC,UAJL;AAKE,IAAA,IAAI,EAAC,UALP;AAME,IAAA,QAAQ,EAAE,kBAACM,KAAD;AAAA,aAAWJ,sBAAsB,CAAC,UAAD,EAAaI,KAAb,CAAjC;AAAA;AANZ,IAFF,EAUE;AAAO,IAAA,SAAS,EAAEN,QAAQ,GAAG,cAAH,GAAoB,OAA9C;AAAuD,IAAA,OAAO,EAAC;AAA/D,iBAVF,CADF,EAaE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAG,IAAA,SAAS,EAAC;AAAb,IADF,EAEE,MAAC,UAAD;AACE,IAAA,QAAQ,EAAEC,OADZ;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,UAAU,EAAC,UAHb;AAIE,IAAA,EAAE,EAAC,SAJL;AAKE,IAAA,IAAI,EAAC,SALP;AAME,IAAA,QAAQ,EAAE,kBAACK,KAAD;AAAA,aAAWJ,sBAAsB,CAAC,SAAD,EAAYI,KAAZ,CAAjC;AAAA;AANZ,IAFF,EAUE;AAAO,IAAA,SAAS,EAAEL,OAAO,GAAG,cAAH,GAAoB,OAA7C;AAAsD,IAAA,OAAO,EAAC;AAA9D,2BAVF,CAbF,EAyBE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,iBACE,qBACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,4BAFP;AAGE,IAAA,SAAS,EAAC,WAHZ;AAIE,IAAA,OAAO,EAAEE,0BAJX;AAKE,IAAA,QAAQ,EAAEE;AALZ,IADF,EAQE,qDARF,CADF,CADF,CAzBF,EAuCE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,iBACE,qBACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,SAAS,EAAC,WAHZ;AAIE,IAAA,OAAO,EAAED,KAJX;AAKE,IAAA,QAAQ,EAAEC;AALZ,IADF,EAQE,4BARF,CADF,CADF,CAvCF,CADF,CAFF,CADe;AAAA,CAAjB;;AA8DAN,QAAQ,CAACQ,SAAT,GAAqB;AACnBN,EAAAA,OAAO,EAAEJ,SAAS,CAACW,GADA;AAEnBR,EAAAA,QAAQ,EAAEH,SAAS,CAACW,GAFD;AAGnBJ,EAAAA,KAAK,EAAEP,SAAS,CAACY,IAAV,CAAeC,UAHH;AAInBL,EAAAA,oBAAoB,EAAER,SAAS,CAACc,IAAV,CAAeD,UAJlB;AAKnBR,EAAAA,sBAAsB,EAAEL,SAAS,CAACc,IAAV,CAAeD,UALpB;AAMnBP,EAAAA,0BAA0B,EAAEN,SAAS,CAACY,IAAV,CAAeC;AANxB,CAArB;AASA,eAAeX,QAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\n\nconst Settings = ({ testDate, dueDate, handleDatePickerChange, allowStudentToEnterAnswers, timed, handleSettingsChange }) => (\n  <React.Fragment>\n    <h2>Settings</h2>\n    <div className=\"card card-test-detail\">\n      <div className=\"card-content\">\n        <div className=\"datepicker-field input-field\">\n          <i className=\"icon-calendar\"></i>\n          <DatePicker\n            selected={testDate}\n            withPortal\n            dateFormat=\"MM/dd/yy\"\n            id=\"testDate\"\n            name=\"testDate\"\n            onChange={(event) => handleDatePickerChange('testDate', event)}\n          />\n          <label className={testDate ? 'label active' : 'label'} htmlFor=\"date_Test\">Test Date</label>\n        </div>\n        <div className=\"datepicker-field input-field\">\n          <i className=\"icon-calendar\"></i>\n          <DatePicker\n            selected={dueDate}\n            withPortal\n            dateFormat=\"MM/dd/yy\"\n            id=\"dueDate\"\n            name=\"dueDate\"\n            onChange={(event) => handleDatePickerChange('dueDate', event)}\n          />\n          <label className={dueDate ? 'label active' : 'label'} htmlFor=\"date_Test\">Due Date (optional)</label>\n        </div>\n        <div className=\"input-field\">\n          <p>\n            <label>\n              <input\n                type=\"checkbox\"\n                name=\"allowStudentToEnterAnswers\"\n                className=\"filled-in\"\n                checked={allowStudentToEnterAnswers}\n                onChange={handleSettingsChange}\n              />\n              <span>Allow Student to Enter Answers</span>\n            </label>\n          </p>\n        </div>\n        <div className=\"input-field\">\n          <p>\n            <label>\n              <input\n                type=\"checkbox\"\n                name=\"timed\"\n                className=\"filled-in\"\n                checked={timed}\n                onChange={handleSettingsChange}\n              />\n              <span>Timed</span>\n            </label>\n          </p>\n        </div>\n      </div>\n    </div>\n  </React.Fragment>\n);\n\nSettings.propTypes = {\n  dueDate: PropTypes.any,\n  testDate: PropTypes.any,\n  timed: PropTypes.bool.isRequired,\n  handleSettingsChange: PropTypes.func.isRequired,\n  handleDatePickerChange: PropTypes.func.isRequired,\n  allowStudentToEnterAnswers: PropTypes.bool.isRequired,\n}\n\nexport default Settings;\n"]},"metadata":{},"sourceType":"module"}