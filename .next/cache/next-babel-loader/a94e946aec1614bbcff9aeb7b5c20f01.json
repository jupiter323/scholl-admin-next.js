{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-did-mount-set-state */\n\n/* eslint-disable react/no-did-update-set-state */\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport FilterSection from './components/FilterSection';\nimport FullView from './components/FullView';\nimport { dueDateAscending, subjectAscending, subjectDescending, passageAscending, passageDescending, lessonNameDescending, lessonNameAscending, statusDescending, statusAscending, availableDateAscending, availableDateDescending, dueDate, flagsAscending, flagsDescending, completionDateAscending, completionDateDescending, lessonTypeAscending, lessonTypeDescending } from '../../utils/sortFunctions';\nimport ListView from './components/ListView';\nimport AssignLessonModal from './components/AssignLessonModal'; // TODO: compare updatedlessons to lessons and update lesson list\n\nvar DetailLessonList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DetailLessonList, _React$Component);\n\n  function DetailLessonList(props) {\n    var _this;\n\n    _classCallCheck(this, DetailLessonList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DetailLessonList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenModal\", function () {\n      return _this.setState({\n        modalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseModal\", function () {\n      return _this.setState({\n        modalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClearFilters\", function () {\n      return _this.setState({\n        statusFilters: [],\n        subjectFilters: [],\n        completeFilters: [],\n        flagFilters: [],\n        classTypeFilters: [],\n        dueDateFilters: [],\n        unitFilter: \"\",\n        nameFilter: \"\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (lesson) {\n      return _this.setState({\n        nameFilter: lesson\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function (filter) {\n      return _this.setState(_defineProperty({}, filter, \"\"));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeView\", function (view) {\n      return _this.setState({\n        currentView: view,\n        active: view\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetUnitFilter\", function (unit) {\n      return _this.setState({\n        unitFilter: unit\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortLessons\", function (lessons) {\n      var sort = _this.state.sort;\n\n      switch (sort) {\n        case 'subjectAscending':\n          return lessons.sort(subjectAscending);\n\n        case 'subjectDescending':\n          return lessons.sort(subjectDescending);\n\n        case 'passageAscending':\n          return lessons.sort(passageAscending);\n\n        case 'statusAscending':\n          return lessons.sort(statusAscending);\n\n        case 'passageDescending':\n          return lessons.sort(passageDescending);\n\n        case 'statusDescending':\n          return lessons.sort(statusDescending);\n\n        case 'availableDateAscending':\n          return lessons.sort(availableDateAscending);\n\n        case 'availableDateDescending':\n          return lessons.sort(availableDateDescending);\n\n        case 'dueDateDescending':\n          return lessons.sort(dueDate);\n\n        case 'dueDateAscending':\n          return lessons.sort(dueDateAscending);\n\n        case 'flagsAscending':\n          return lessons.sort(flagsAscending);\n\n        case 'flagsDescending':\n          return lessons.sort(flagsDescending);\n\n        case 'lessonNameAscending':\n          return lessons.sort(lessonNameAscending);\n\n        case 'lessonNameDescending':\n          return lessons.sort(lessonNameDescending);\n\n        case 'completionDateAscending':\n          return lessons.sort(completionDateAscending);\n\n        case 'completionDateDescending':\n          return lessons.sort(completionDateDescending);\n\n        case 'lessonTypeAscending':\n          return lessons.sort(lessonTypeAscending);\n\n        case 'lessonTypeDescending':\n          return lessons.sort(lessonTypeDescending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddUpdatedLessons\", function (lessons) {\n      return _this.setState({\n        updatedLessons: lessons\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByName\", function () {\n      var _this$state = _this.state,\n          lessons = _this$state.lessons,\n          nameFilter = _this$state.nameFilter;\n      return lessons.reduce(function (finalArr, currentLesson) {\n        var lessonName = currentLesson.lessonName;\n        var lessonString = lessonName.replace(/\\s/g, \"\").toLowerCase();\n\n        if (lessonString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n          finalArr.push(currentLesson);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloneLesson\", function (index) {\n      var lessons = _this.state.lessons;\n\n      _this.setState(function (prevState) {\n        prevState.lessons.push(lessons[index]);\n        return {\n          lessons: prevState.lessons\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteLesson\", function (index) {\n      var lessons = _this.state.lessons;\n\n      var newLessonsArray = _this.arrayItemRemover(lessons, lessons[index]);\n\n      _this.setState({\n        lessons: newLessonsArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterLessons\", function () {\n      var _this$state2 = _this.state,\n          statusFilters = _this$state2.statusFilters,\n          subjectFilters = _this$state2.subjectFilters,\n          unitFilter = _this$state2.unitFilter,\n          classTypeFilters = _this$state2.classTypeFilters,\n          scoreStatusFilters = _this$state2.scoreStatusFilters,\n          flagFilters = _this$state2.flagFilters,\n          allLessons = _this$state2.lessons;\n      var lessons = allLessons;\n\n      if (scoreStatusFilters.length && scoreStatusFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return scoreStatusFilters.indexOf(lesson.scoreStatus) !== -1;\n        });\n      }\n\n      if (statusFilters.length && statusFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return statusFilters.indexOf(lesson.status) !== -1;\n        });\n      }\n\n      if (subjectFilters.length && subjectFilters.indexOf('all') === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return subjectFilters.indexOf(lesson.subject) !== -1;\n        });\n      }\n\n      if (flagFilters.length && flagFilters.indexOf('all') === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return lesson.flags.length !== 0;\n        });\n      }\n\n      if (classTypeFilters.length && classTypeFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return classTypeFilters.indexOf(lesson.type) !== -1;\n        });\n      }\n\n      if (unitFilter.length && unitFilter.indexOf('all') === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return unitFilter.indexOf(lesson.unit) !== -1;\n        });\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMappableLessons\", function () {\n      var _this$state3 = _this.state,\n          sort = _this$state3.sort,\n          unitFilter = _this$state3.unitFilter,\n          lessons = _this$state3.lessons,\n          dueDateFilters = _this$state3.dueDateFilters,\n          nameFilter = _this$state3.nameFilter,\n          statusFilters = _this$state3.statusFilters,\n          subjectFilters = _this$state3.subjectFilters,\n          scoreStatusFilters = _this$state3.scoreStatusFilters,\n          classTypeFilters = _this$state3.classTypeFilters,\n          flagFilters = _this$state3.flagFilters;\n      var mappableLessons = lessons;\n\n      if (nameFilter.length) {\n        mappableLessons = _this.onFilterByName();\n      }\n\n      if (statusFilters.length || unitFilter.length || scoreStatusFilters.length || subjectFilters.length || classTypeFilters.length || flagFilters.length) {\n        mappableLessons = _this.onFilterLessons();\n      }\n\n      if (dueDateFilters.length) {\n        mappableLessons = _this.filterDueDate();\n      }\n\n      if (sort) {\n        return _this.onSortLessons(mappableLessons);\n      }\n\n      return mappableLessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterDueDate\", function () {\n      var user = _this.props.user;\n      var _this$state4 = _this.state,\n          dueDateFilters = _this$state4.dueDateFilters,\n          allLessons = _this$state4.lessons;\n      var lessons = allLessons;\n\n      if (dueDateFilters.length && dueDateFilters.indexOf('all') === -1) {\n        if (dueDateFilters.includes('overdue')) {\n          lessons = lessons.filter(function (lesson) {\n            return lesson.overdue === true;\n          });\n        }\n\n        if (dueDateFilters.includes('dueToday')) {\n          lessons = lessons.filter(function (lesson) {\n            return lesson.dueDate === moment().format(\"MM/DD/Y\");\n          });\n        }\n\n        if (dueDateFilters.includes('dueThisWeek')) {\n          lessons = lessons.filter(function (lesson) {\n            return moment(lesson.dueDate).format('w') === moment().format(\"W\");\n          });\n        }\n\n        if (dueDateFilters.includes('dueNextSession')) {\n          lessons = lessons.filter(function (lesson) {\n            return moment(user.nextSession).isSameOrAfter(lesson.dueDate, 'day');\n          });\n        }\n\n        return lessons;\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFilterClick\", function (filterType, filter) {\n      var _this$state5 = _this.state,\n          currentSubjectFilters = _this$state5.subjectFilters,\n          currentScoreStatusFilters = _this$state5.scoreStatusFilters,\n          currentStatusFilters = _this$state5.statusFilters,\n          currentFlagFilters = _this$state5.flagFilters,\n          currentDueDateFilters = _this$state5.dueDateFilters,\n          currentClassTypeFilters = _this$state5.classTypeFilters;\n      var modifiedFilterCurrentState;\n      var modifiedFilterName;\n      var modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'status':\n          modifiedFilterCurrentState = currentStatusFilters;\n          modifiedFilterName = 'statusFilters';\n          break;\n\n        case 'score':\n          modifiedFilterCurrentState = currentScoreStatusFilters;\n          modifiedFilterName = 'scoreStatusFilters';\n          break;\n\n        case 'flags':\n          modifiedFilterCurrentState = currentFlagFilters;\n          modifiedFilterName = 'flagFilters';\n          break;\n\n        case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n\n        case 'classType':\n          modifiedFilterCurrentState = currentClassTypeFilters;\n          modifiedFilterName = 'classTypeFilters';\n          break;\n\n        default:\n          break;\n      } // Decide whether we're adding or removing the selected filter\n\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        var filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      _this.setState(_defineProperty({}, modifiedFilterName, modifiedFilterUpdatedState));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"arrayItemRemover\", function (array, value) {\n      return array.filter(function (lesson) {\n        return lesson !== value;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCurrentView\", function () {\n      var active = _this.state.active;\n      var user = _this.props.user;\n\n      if (active === 'full') {\n        return __jsx(FullView, {\n          user: user,\n          lessons: _this.getMappableLessons(),\n          onDeleteLesson: _this.onDeleteLesson,\n          onCloneLesson: _this.onCloneLesson\n        });\n      }\n\n      return __jsx(ListView, {\n        user: user,\n        lessons: _this.getMappableLessons(),\n        onSetSort: _this.onSetSort,\n        sort: _this.state.sort\n      });\n    });\n\n    _this.state = {\n      test: true,\n      lessons: _this.props.user.lessons,\n      modalOpen: false,\n      currentView: 'full',\n      active: 'full',\n      statusFilters: [],\n      subjectFilters: [],\n      scoreStatusFilters: [],\n      flagFilters: [],\n      classTypeFilters: [],\n      dueDateFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\",\n      updatedLessons: []\n    };\n    return _this;\n  }\n\n  _createClass(DetailLessonList, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state6 = this.state,\n          currentView = _this$state6.currentView,\n          subjectFilters = _this$state6.subjectFilters,\n          statusFilters = _this$state6.statusFilters,\n          scoreStatusFilters = _this$state6.scoreStatusFilters,\n          flagFilters = _this$state6.flagFilters,\n          dueDateFilters = _this$state6.dueDateFilters,\n          classTypeFilters = _this$state6.classTypeFilters;\n      return __jsx(React.Fragment, null, __jsx(FilterSection, {\n        currentView: currentView,\n        onChangeView: this.onChangeView,\n        onHandleFilterClick: this.onHandleFilterClick,\n        onClearFilters: this.onClearFilters,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState,\n        onSetSort: this.onSetSort,\n        subjectFilters: subjectFilters,\n        statusFilters: statusFilters,\n        scoreStatusFilters: scoreStatusFilters,\n        flagFilters: flagFilters,\n        dueDateFilters: dueDateFilters,\n        classTypeFilters: classTypeFilters,\n        handleFilterClick: this.handleFilterClick,\n        onSetUnitFilter: this.onSetUnitFilter,\n        filterDueDate: this.filterDueDate\n      }), this.renderCurrentView(), __jsx(AssignLessonModal, {\n        open: this.state.modalOpen,\n        lessons: this.props.user.lessons,\n        onCloseModal: this.onCloseModal,\n        onAddUpdatedLessons: this.onAddUpdatedLessons\n      }), __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onOpenModal,\n        className: \"waves-effect waves-teal btn add-btn modal-trigger\"\n      }, __jsx(\"i\", {\n        className: \"material-icons\"\n      }, \"add\"), \"Assign Lesson\"));\n    }\n  }]);\n\n  return DetailLessonList;\n}(React.Component);\n\nDetailLessonList.propTypes = {\n  user: PropTypes.object.isRequired\n};\nexport default DetailLessonList;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/DetailLessonList/index.js"],"names":["React","PropTypes","update","moment","FilterSection","FullView","dueDateAscending","subjectAscending","subjectDescending","passageAscending","passageDescending","lessonNameDescending","lessonNameAscending","statusDescending","statusAscending","availableDateAscending","availableDateDescending","dueDate","flagsAscending","flagsDescending","completionDateAscending","completionDateDescending","lessonTypeAscending","lessonTypeDescending","ListView","AssignLessonModal","DetailLessonList","props","setState","modalOpen","statusFilters","subjectFilters","completeFilters","flagFilters","classTypeFilters","dueDateFilters","unitFilter","nameFilter","sort","lesson","filter","view","currentView","active","unit","lessons","state","updatedLessons","reduce","finalArr","currentLesson","lessonName","lessonString","replace","toLowerCase","indexOf","push","index","prevState","newLessonsArray","arrayItemRemover","scoreStatusFilters","allLessons","length","scoreStatus","status","subject","flags","type","mappableLessons","onFilterByName","onFilterLessons","filterDueDate","onSortLessons","user","includes","overdue","format","nextSession","isSameOrAfter","filterType","currentSubjectFilters","currentScoreStatusFilters","currentStatusFilters","currentFlagFilters","currentDueDateFilters","currentClassTypeFilters","modifiedFilterCurrentState","modifiedFilterName","modifiedFilterUpdatedState","$push","filterIndex","$splice","array","value","getMappableLessons","onDeleteLesson","onCloneLesson","onSetSort","test","onChangeView","onHandleFilterClick","onClearFilters","onSetFilteredState","onUnsetFilteredState","handleFilterClick","onSetUnitFilter","renderCurrentView","onCloseModal","onAddUpdatedLessons","onOpenModal","Component","propTypes","object","isRequired"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,iBAA7C,EAAgEC,gBAAhE,EAAkFC,iBAAlF,EAAqGC,oBAArG,EAA2HC,mBAA3H,EAAgJC,gBAAhJ,EAAkKC,eAAlK,EAAmLC,sBAAnL,EAA2MC,uBAA3M,EAAoOC,OAApO,EAA6OC,cAA7O,EAA6PC,eAA7P,EAA8QC,uBAA9Q,EAAuSC,wBAAvS,EAAiUC,mBAAjU,EAAsVC,oBAAtV,QAAiX,2BAAjX;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B,C,CAEA;;IACMC,gB;;;;;AACJ,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,0FAAMA,KAAN;;AADiB,kEAqBL;AAAA,aAAM,MAAKC,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAd,CAAN;AAAA,KArBK;;AAAA,mEAsBJ;AAAA,aAAM,MAAKD,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAd,CAAN;AAAA,KAtBI;;AAAA,qEAuBF;AAAA,aAAM,MAAKD,QAAL,CAAc;AAAEE,QAAAA,aAAa,EAAE,EAAjB;AAAqBC,QAAAA,cAAc,EAAE,EAArC;AAAyCC,QAAAA,eAAe,EAAE,EAA1D;AAA8DC,QAAAA,WAAW,EAAE,EAA3E;AAA+EC,QAAAA,gBAAgB,EAAE,EAAjG;AAAqGC,QAAAA,cAAc,EAAE,EAArH;AAAyHC,QAAAA,UAAU,EAAE,EAArI;AAAyIC,QAAAA,UAAU,EAAE;AAArJ,OAAd,CAAN;AAAA,KAvBE;;AAAA,gEAwBP,UAACC,IAAD;AAAA,aAAU,MAAKV,QAAL,CAAc;AAACU,QAAAA,IAAI,EAAJA;AAAD,OAAd,CAAV;AAAA,KAxBO;;AAAA,yEAyBE,UAACC,MAAD;AAAA,aAAY,MAAKX,QAAL,CAAc;AAACS,QAAAA,UAAU,EAAEE;AAAb,OAAd,CAAZ;AAAA,KAzBF;;AAAA,2EA0BI,UAACC,MAAD;AAAA,aAAY,MAAKZ,QAAL,qBAAgBY,MAAhB,EAAyB,EAAzB,EAAZ;AAAA,KA1BJ;;AAAA,mEA2BJ,UAACC,IAAD;AAAA,aAAU,MAAKb,QAAL,CAAc;AAACc,QAAAA,WAAW,EAAED,IAAd;AAAoBE,QAAAA,MAAM,EAAEF;AAA5B,OAAd,CAAV;AAAA,KA3BI;;AAAA,sEA6BD,UAACG,IAAD;AAAA,aAAU,MAAKhB,QAAL,CAAc;AAACQ,QAAAA,UAAU,EAAEQ;AAAb,OAAd,CAAV;AAAA,KA7BC;;AAAA,oEAgCH,UAACC,OAAD,EAAa;AAAA,UACnBP,IADmB,GACV,MAAKQ,KADK,CACnBR,IADmB;;AAE3B,cAAOA,IAAP;AACE,aAAK,kBAAL;AACE,iBAAOO,OAAO,CAACP,IAAR,CAAa/B,gBAAb,CAAP;;AACF,aAAK,mBAAL;AACE,iBAAOsC,OAAO,CAACP,IAAR,CAAa9B,iBAAb,CAAP;;AACF,aAAK,kBAAL;AACE,iBAAOqC,OAAO,CAACP,IAAR,CAAa7B,gBAAb,CAAP;;AACF,aAAK,iBAAL;AACE,iBAAOoC,OAAO,CAACP,IAAR,CAAaxB,eAAb,CAAP;;AACF,aAAK,mBAAL;AACE,iBAAO+B,OAAO,CAACP,IAAR,CAAa5B,iBAAb,CAAP;;AACF,aAAK,kBAAL;AACE,iBAAOmC,OAAO,CAACP,IAAR,CAAazB,gBAAb,CAAP;;AACF,aAAK,wBAAL;AACI,iBAAOgC,OAAO,CAACP,IAAR,CAAavB,sBAAb,CAAP;;AACJ,aAAK,yBAAL;AACC,iBAAO8B,OAAO,CAACP,IAAR,CAAatB,uBAAb,CAAP;;AACD,aAAK,mBAAL;AACE,iBAAO6B,OAAO,CAACP,IAAR,CAAarB,OAAb,CAAP;;AACF,aAAK,kBAAL;AACE,iBAAO4B,OAAO,CAACP,IAAR,CAAahC,gBAAb,CAAP;;AACF,aAAK,gBAAL;AACE,iBAAOuC,OAAO,CAACP,IAAR,CAAapB,cAAb,CAAP;;AACF,aAAK,iBAAL;AACE,iBAAO2B,OAAO,CAACP,IAAR,CAAanB,eAAb,CAAP;;AACF,aAAK,qBAAL;AACE,iBAAO0B,OAAO,CAACP,IAAR,CAAa1B,mBAAb,CAAP;;AACF,aAAK,sBAAL;AACE,iBAAOiC,OAAO,CAACP,IAAR,CAAa3B,oBAAb,CAAP;;AACF,aAAK,yBAAL;AACE,iBAAOkC,OAAO,CAACP,IAAR,CAAalB,uBAAb,CAAP;;AACF,aAAK,0BAAL;AACE,iBAAOyB,OAAO,CAACP,IAAR,CAAajB,wBAAb,CAAP;;AACF,aAAK,qBAAL;AACE,iBAAOwB,OAAO,CAACP,IAAR,CAAahB,mBAAb,CAAP;;AACF,aAAK,sBAAL;AACE,iBAAOuB,OAAO,CAACP,IAAR,CAAaf,oBAAb,CAAP;;AACF;AACE;AAtCJ;AAwCD,KA1EkB;;AAAA,0EA2EG,UAACsB,OAAD;AAAA,aAAa,MAAKjB,QAAL,CAAc;AAACmB,QAAAA,cAAc,EAAEF;AAAjB,OAAd,CAAb;AAAA,KA3EH;;AAAA,qEA8EF,YAAM;AAAA,wBACW,MAAKC,KADhB;AAAA,UACbD,OADa,eACbA,OADa;AAAA,UACJR,UADI,eACJA,UADI;AAErB,aAAOQ,OAAO,CAACG,MAAR,CAAe,UAACC,QAAD,EAAWC,aAAX,EAA6B;AAAA,YACzCC,UADyC,GAC1BD,aAD0B,CACzCC,UADyC;AAEjD,YAAMC,YAAY,GAAGD,UAAU,CAACE,OAAX,CAAmB,KAAnB,EAA0B,EAA1B,EAA8BC,WAA9B,EAArB;;AACA,YAAIF,YAAY,CAACG,OAAb,CAAqBlB,UAArB,MAAqC,CAAC,CAAtC,IAA2CY,QAAQ,CAACM,OAAT,CAAiBL,aAAjB,MAAoC,CAAC,CAApF,EAAuF;AACrFD,UAAAA,QAAQ,CAACO,IAAT,CAAcN,aAAd;AACD;;AACD,eAAOD,QAAP;AACD,OAPM,EAOJ,EAPI,CAAP;AAQD,KAxFkB;;AAAA,oEAyFH,UAACQ,KAAD,EAAW;AAAA,UACjBZ,OADiB,GACL,MAAKC,KADA,CACjBD,OADiB;;AAEzB,YAAKjB,QAAL,CAAc,UAAA8B,SAAS,EAAI;AACzBA,QAAAA,SAAS,CAACb,OAAV,CAAkBW,IAAlB,CAAuBX,OAAO,CAACY,KAAD,CAA9B;AACA,eAAO;AAAEZ,UAAAA,OAAO,EAAEa,SAAS,CAACb;AAArB,SAAP;AACA,OAHF;AAID,KA/FkB;;AAAA,qEAiGF,UAACY,KAAD,EAAW;AAAA,UAClBZ,OADkB,GACN,MAAKC,KADC,CAClBD,OADkB;;AAE1B,UAAMc,eAAe,GAAG,MAAKC,gBAAL,CAAsBf,OAAtB,EAA+BA,OAAO,CAACY,KAAD,CAAtC,CAAxB;;AACA,YAAK7B,QAAL,CAAc;AAACiB,QAAAA,OAAO,EAAEc;AAAV,OAAd;AACD,KArGkB;;AAAA,sEAuGD,YAAM;AAAA,yBACwG,MAAKb,KAD7G;AAAA,UACdhB,aADc,gBACdA,aADc;AAAA,UACCC,cADD,gBACCA,cADD;AAAA,UACiBK,UADjB,gBACiBA,UADjB;AAAA,UAC6BF,gBAD7B,gBAC6BA,gBAD7B;AAAA,UAC+C2B,kBAD/C,gBAC+CA,kBAD/C;AAAA,UACmE5B,WADnE,gBACmEA,WADnE;AAAA,UACyF6B,UADzF,gBACgFjB,OADhF;AAEtB,UAAIA,OAAO,GAAGiB,UAAd;;AACA,UAAID,kBAAkB,CAACE,MAAnB,IAA6BF,kBAAkB,CAACN,OAAnB,CAA2B,KAA3B,MAAsC,CAAC,CAAxE,EAA2E;AACzEV,QAAAA,OAAO,GAAGA,OAAO,CAACL,MAAR,CAAe,UAAAD,MAAM;AAAA,iBAAIsB,kBAAkB,CAACN,OAAnB,CAA2BhB,MAAM,CAACyB,WAAlC,MAAmD,CAAC,CAAxD;AAAA,SAArB,CAAV;AACD;;AACD,UAAIlC,aAAa,CAACiC,MAAd,IAAwBjC,aAAa,CAACyB,OAAd,CAAsB,KAAtB,MAAiC,CAAC,CAA9D,EAAiE;AAC/DV,QAAAA,OAAO,GAAGA,OAAO,CAACL,MAAR,CAAe,UAAAD,MAAM;AAAA,iBAAIT,aAAa,CAACyB,OAAd,CAAsBhB,MAAM,CAAC0B,MAA7B,MAAyC,CAAC,CAA9C;AAAA,SAArB,CAAV;AACD;;AACD,UAAIlC,cAAc,CAACgC,MAAf,IAAyBhC,cAAc,CAACwB,OAAf,CAAuB,KAAvB,MAAkC,CAAC,CAAhE,EAAmE;AACjEV,QAAAA,OAAO,GAAGA,OAAO,CAACL,MAAR,CAAe,UAAAD,MAAM;AAAA,iBAAIR,cAAc,CAACwB,OAAf,CAAuBhB,MAAM,CAAC2B,OAA9B,MAA2C,CAAC,CAAhD;AAAA,SAArB,CAAV;AACD;;AACD,UAAIjC,WAAW,CAAC8B,MAAZ,IAAsB9B,WAAW,CAACsB,OAAZ,CAAoB,KAApB,MAA+B,CAAC,CAA1D,EAA6D;AAC3DV,QAAAA,OAAO,GAAGA,OAAO,CAACL,MAAR,CAAe,UAAAD,MAAM;AAAA,iBAAIA,MAAM,CAAC4B,KAAP,CAAaJ,MAAb,KAAwB,CAA5B;AAAA,SAArB,CAAV;AACD;;AACD,UAAI7B,gBAAgB,CAAC6B,MAAjB,IAA2B7B,gBAAgB,CAACqB,OAAjB,CAAyB,KAAzB,MAAoC,CAAC,CAApE,EAAuE;AACrEV,QAAAA,OAAO,GAAGA,OAAO,CAACL,MAAR,CAAe,UAAAD,MAAM;AAAA,iBAAIL,gBAAgB,CAACqB,OAAjB,CAAyBhB,MAAM,CAAC6B,IAAhC,MAA0C,CAAC,CAA/C;AAAA,SAArB,CAAV;AACD;;AACD,UAAIhC,UAAU,CAAC2B,MAAX,IAAqB3B,UAAU,CAACmB,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAAxD,EAA2D;AACzDV,QAAAA,OAAO,GAAGA,OAAO,CAACL,MAAR,CAAe,UAAAD,MAAM;AAAA,iBAAIH,UAAU,CAACmB,OAAX,CAAmBhB,MAAM,CAACK,IAA1B,MAAoC,CAAC,CAAzC;AAAA,SAArB,CAAV;AACD;;AACD,aAAOC,OAAP;AACD,KA7HkB;;AAAA,yEA+HE,YAAM;AAAA,yBAC0H,MAAKC,KAD/H;AAAA,UACjBR,IADiB,gBACjBA,IADiB;AAAA,UACXF,UADW,gBACXA,UADW;AAAA,UACCS,OADD,gBACCA,OADD;AAAA,UACUV,cADV,gBACUA,cADV;AAAA,UAC0BE,UAD1B,gBAC0BA,UAD1B;AAAA,UACsCP,aADtC,gBACsCA,aADtC;AAAA,UACqDC,cADrD,gBACqDA,cADrD;AAAA,UACqE8B,kBADrE,gBACqEA,kBADrE;AAAA,UACyF3B,gBADzF,gBACyFA,gBADzF;AAAA,UAC2GD,WAD3G,gBAC2GA,WAD3G;AAEzB,UAAIoC,eAAe,GAAGxB,OAAtB;;AACA,UAAIR,UAAU,CAAC0B,MAAf,EAAuB;AACrBM,QAAAA,eAAe,GAAG,MAAKC,cAAL,EAAlB;AACD;;AACD,UAAIxC,aAAa,CAACiC,MAAd,IAAwB3B,UAAU,CAAC2B,MAAnC,IAA6CF,kBAAkB,CAACE,MAAhE,IAA0EhC,cAAc,CAACgC,MAAzF,IAAmG7B,gBAAgB,CAAC6B,MAApH,IAA8H9B,WAAW,CAAC8B,MAA9I,EAAsJ;AACpJM,QAAAA,eAAe,GAAG,MAAKE,eAAL,EAAlB;AACD;;AACD,UAAIpC,cAAc,CAAC4B,MAAnB,EAA0B;AACxBM,QAAAA,eAAe,GAAG,MAAKG,aAAL,EAAlB;AACD;;AACD,UAAIlC,IAAJ,EAAU;AACR,eAAO,MAAKmC,aAAL,CAAmBJ,eAAnB,CAAP;AACD;;AACD,aAAOA,eAAP;AACD,KA/IkB;;AAAA,oEAoJF,YAAM;AAAA,UACZK,IADY,GACH,MAAK/C,KADF,CACZ+C,IADY;AAAA,yBAE2B,MAAK5B,KAFhC;AAAA,UAEbX,cAFa,gBAEbA,cAFa;AAAA,UAEY2B,UAFZ,gBAEGjB,OAFH;AAGrB,UAAIA,OAAO,GAAGiB,UAAd;;AACA,UAAI3B,cAAc,CAAC4B,MAAf,IAAyB5B,cAAc,CAACoB,OAAf,CAAuB,KAAvB,MAAkC,CAAC,CAAhE,EAAmE;AACjE,YAAIpB,cAAc,CAACwC,QAAf,CAAwB,SAAxB,CAAJ,EAAwC;AACxC9B,UAAAA,OAAO,GAAGA,OAAO,CAACL,MAAR,CAAe,UAAAD,MAAM;AAAA,mBAAIA,MAAM,CAACqC,OAAP,KAAmB,IAAvB;AAAA,WAArB,CAAV;AACC;;AACD,YAAGzC,cAAc,CAACwC,QAAf,CAAwB,UAAxB,CAAH,EAAwC;AACtC9B,UAAAA,OAAO,GAAGA,OAAO,CAACL,MAAR,CAAe,UAAAD,MAAM;AAAA,mBAAIA,MAAM,CAACtB,OAAP,KAAmBd,MAAM,GAAG0E,MAAT,CAAgB,SAAhB,CAAvB;AAAA,WAArB,CAAV;AACD;;AACD,YAAG1C,cAAc,CAACwC,QAAf,CAAwB,aAAxB,CAAH,EAA2C;AACzC9B,UAAAA,OAAO,GAAGA,OAAO,CAACL,MAAR,CAAe,UAAAD,MAAM;AAAA,mBAAIpC,MAAM,CAACoC,MAAM,CAACtB,OAAR,CAAN,CAAuB4D,MAAvB,CAA8B,GAA9B,MAAuC1E,MAAM,GAAG0E,MAAT,CAAgB,GAAhB,CAA3C;AAAA,WAArB,CAAV;AACD;;AACD,YAAI1C,cAAc,CAACwC,QAAf,CAAwB,gBAAxB,CAAJ,EAA+C;AAC7C9B,UAAAA,OAAO,GAAGA,OAAO,CAACL,MAAR,CAAe,UAAAD,MAAM;AAAA,mBAAIpC,MAAM,CAACuE,IAAI,CAACI,WAAN,CAAN,CAAyBC,aAAzB,CAAuCxC,MAAM,CAACtB,OAA9C,EAAuD,KAAvD,CAAJ;AAAA,WAArB,CAAV;AACD;;AACD,eAAO4B,OAAP;AACD;;AACD,aAAOA,OAAP;AACD,KAxKkB;;AAAA,wEA2KC,UAACmC,UAAD,EAAaxC,MAAb,EAAwB;AAAA,yBAC+M,MAAKM,KADpN;AAAA,UAClBmC,qBADkB,gBAClClD,cADkC;AAAA,UACyBmD,yBADzB,gBACKrB,kBADL;AAAA,UACmEsB,oBADnE,gBACoDrD,aADpD;AAAA,UACsGsD,kBADtG,gBACyFnD,WADzF;AAAA,UAC0IoD,qBAD1I,gBAC0HlD,cAD1H;AAAA,UACmLmD,uBADnL,gBACiKpD,gBADjK;AAE1C,UAAIqD,0BAAJ;AACA,UAAIC,kBAAJ;AACA,UAAIC,0BAAJ;;AACA,cAAQT,UAAR;AACE,aAAK,SAAL;AACEO,UAAAA,0BAA0B,GAAGN,qBAA7B;AACAO,UAAAA,kBAAkB,GAAG,gBAArB;AACA;;AACF,aAAK,QAAL;AACED,UAAAA,0BAA0B,GAAGJ,oBAA7B;AACAK,UAAAA,kBAAkB,GAAG,eAArB;AACA;;AACF,aAAK,OAAL;AACED,UAAAA,0BAA0B,GAAGL,yBAA7B;AACAM,UAAAA,kBAAkB,GAAG,oBAArB;AACA;;AACF,aAAK,OAAL;AACID,UAAAA,0BAA0B,GAAGH,kBAA7B;AACAI,UAAAA,kBAAkB,GAAG,aAArB;AACA;;AACJ,aAAK,SAAL;AACID,UAAAA,0BAA0B,GAAGF,qBAA7B;AACAG,UAAAA,kBAAkB,GAAG,gBAArB;AACA;;AACJ,aAAK,WAAL;AACID,UAAAA,0BAA0B,GAAGD,uBAA7B;AACAE,UAAAA,kBAAkB,GAAG,kBAArB;AACA;;AACF;AACA;AA1BJ,OAL0C,CAiC1C;;;AACA,UAAID,0BAA0B,CAAChC,OAA3B,CAAmCf,MAAnC,MAA+C,CAAC,CAApD,EAAuD;AACrDiD,QAAAA,0BAA0B,GAAGvF,MAAM,CAACqF,0BAAD,EAA6B;AAC9DG,UAAAA,KAAK,EAAE,CAAClD,MAAD;AADuD,SAA7B,CAAnC;AAGD,OAJD,MAIO;AACL,YAAMmD,WAAW,GAAGJ,0BAA0B,CAAChC,OAA3B,CAAmCf,MAAnC,CAApB;AACAiD,QAAAA,0BAA0B,GAAGvF,MAAM,CAACqF,0BAAD,EAA6B;AAC9DK,UAAAA,OAAO,EAAE,CAAC,CAAED,WAAF,EAAe,CAAf,CAAD;AADqD,SAA7B,CAAnC;AAGD;;AACD,YAAK/D,QAAL,qBAAiB4D,kBAAjB,EAAsCC,0BAAtC;AACD,KAxNkB;;AAAA,uEA0NA,UAACI,KAAD,EAAQC,KAAR;AAAA,aAAkBD,KAAK,CAACrD,MAAN,CAAa,UAACD,MAAD;AAAA,eAAYA,MAAM,KAAKuD,KAAvB;AAAA,OAAb,CAAlB;AAAA,KA1NA;;AAAA,wEA4NC,YAAM;AAAA,UAChBnD,MADgB,GACL,MAAKG,KADA,CAChBH,MADgB;AAAA,UAEhB+B,IAFgB,GAEP,MAAK/C,KAFE,CAEhB+C,IAFgB;;AAGxB,UAAI/B,MAAM,KAAK,MAAf,EAAuB;AACrB,eAAO,MAAC,QAAD;AAAU,UAAA,IAAI,EAAE+B,IAAhB;AAAsB,UAAA,OAAO,EAAE,MAAKqB,kBAAL,EAA/B;AAA0D,UAAA,cAAc,EAAE,MAAKC,cAA/E;AAA+F,UAAA,aAAa,EAAE,MAAKC;AAAnH,UAAP;AACD;;AACD,aAAO,MAAC,QAAD;AAAU,QAAA,IAAI,EAAEvB,IAAhB;AAAsB,QAAA,OAAO,EAAE,MAAKqB,kBAAL,EAA/B;AAA0D,QAAA,SAAS,EAAE,MAAKG,SAA1E;AAAqF,QAAA,IAAI,EAAE,MAAKpD,KAAL,CAAWR;AAAtG,QAAP;AACD,KAnOkB;;AAEjB,UAAKQ,KAAL,GAAa;AACXqD,MAAAA,IAAI,EAAE,IADK;AAEXtD,MAAAA,OAAO,EAAE,MAAKlB,KAAL,CAAW+C,IAAX,CAAgB7B,OAFd;AAGXhB,MAAAA,SAAS,EAAE,KAHA;AAIXa,MAAAA,WAAW,EAAE,MAJF;AAKXC,MAAAA,MAAM,EAAE,MALG;AAMXb,MAAAA,aAAa,EAAE,EANJ;AAOXC,MAAAA,cAAc,EAAE,EAPL;AAQX8B,MAAAA,kBAAkB,EAAE,EART;AASX5B,MAAAA,WAAW,EAAE,EATF;AAUXC,MAAAA,gBAAgB,EAAE,EAVP;AAWXC,MAAAA,cAAc,EAAE,EAXL;AAYXG,MAAAA,IAAI,EAAE,EAZK;AAaXD,MAAAA,UAAU,EAAE,EAbD;AAcXD,MAAAA,UAAU,EAAE,EAdD;AAeXW,MAAAA,cAAc,EAAE;AAfL,KAAb;AAFiB;AAmBlB;;;;6BAmNQ;AAAA,yBACmH,KAAKD,KADxH;AAAA,UACCJ,WADD,gBACCA,WADD;AAAA,UACcX,cADd,gBACcA,cADd;AAAA,UAC8BD,aAD9B,gBAC8BA,aAD9B;AAAA,UAC6C+B,kBAD7C,gBAC6CA,kBAD7C;AAAA,UACiE5B,WADjE,gBACiEA,WADjE;AAAA,UAC8EE,cAD9E,gBAC8EA,cAD9E;AAAA,UAC8FD,gBAD9F,gBAC8FA,gBAD9F;AAEP,aACE,MAAC,KAAD,CAAO,QAAP,QACE,MAAC,aAAD;AACA,QAAA,WAAW,EAAEQ,WADb;AAEA,QAAA,YAAY,EAAE,KAAK0D,YAFnB;AAGA,QAAA,mBAAmB,EAAE,KAAKC,mBAH1B;AAIA,QAAA,cAAc,EAAE,KAAKC,cAJrB;AAKA,QAAA,kBAAkB,EAAE,KAAKC,kBALzB;AAMA,QAAA,oBAAoB,EAAE,KAAKC,oBAN3B;AAOA,QAAA,SAAS,EAAE,KAAKN,SAPhB;AAQA,QAAA,cAAc,EAAEnE,cARhB;AASA,QAAA,aAAa,EAAED,aATf;AAUA,QAAA,kBAAkB,EAAE+B,kBAVpB;AAWA,QAAA,WAAW,EAAE5B,WAXb;AAYA,QAAA,cAAc,EAAEE,cAZhB;AAaA,QAAA,gBAAgB,EAAED,gBAblB;AAcA,QAAA,iBAAiB,EAAE,KAAKuE,iBAdxB;AAeA,QAAA,eAAe,EAAE,KAAKC,eAftB;AAgBA,QAAA,aAAa,EAAE,KAAKlC;AAhBpB,QADF,EAmBG,KAAKmC,iBAAL,EAnBH,EAoBE,MAAC,iBAAD;AACE,QAAA,IAAI,EAAE,KAAK7D,KAAL,CAAWjB,SADnB;AAEE,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAW+C,IAAX,CAAgB7B,OAF3B;AAGE,QAAA,YAAY,EAAE,KAAK+D,YAHrB;AAIE,QAAA,mBAAmB,EAAE,KAAKC;AAJ5B,QApBF,EAyBA;AAAG,QAAA,IAAI,EAAC,GAAR;AAAY,QAAA,OAAO,EAAE,KAAKC,WAA1B;AAAuC,QAAA,SAAS,EAAC;AAAjD,SAAqG;AAAG,QAAA,SAAS,EAAC;AAAb,eAArG,kBAzBA,CADF;AA6BD;;;;EAtQ4B9G,KAAK,CAAC+G,S;;AAyQrCrF,gBAAgB,CAACsF,SAAjB,GAA6B;AAC3BtC,EAAAA,IAAI,EAAEzE,SAAS,CAACgH,MAAV,CAAiBC;AADI,CAA7B;AAIA,eAAexF,gBAAf","sourcesContent":["/* eslint-disable react/no-did-mount-set-state */\n/* eslint-disable react/no-did-update-set-state */\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport FilterSection from './components/FilterSection';\nimport FullView from './components/FullView';\nimport { dueDateAscending, subjectAscending, subjectDescending, passageAscending, passageDescending, lessonNameDescending, lessonNameAscending, statusDescending, statusAscending, availableDateAscending, availableDateDescending, dueDate, flagsAscending, flagsDescending, completionDateAscending, completionDateDescending, lessonTypeAscending, lessonTypeDescending} from '../../utils/sortFunctions';\nimport ListView from './components/ListView';\nimport AssignLessonModal from './components/AssignLessonModal';\n\n// TODO: compare updatedlessons to lessons and update lesson list\nclass DetailLessonList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: true,\n      lessons: this.props.user.lessons,\n      modalOpen: false,\n      currentView: 'full',\n      active: 'full',\n      statusFilters: [],\n      subjectFilters: [],\n      scoreStatusFilters: [],\n      flagFilters: [],\n      classTypeFilters: [],\n      dueDateFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\",\n      updatedLessons: [],\n    }\n  };\n\n  onOpenModal = () => this.setState({modalOpen: true});\n  onCloseModal = () => this.setState({modalOpen: false});\n  onClearFilters = () => this.setState({ statusFilters: [], subjectFilters: [], completeFilters: [], flagFilters: [], classTypeFilters: [], dueDateFilters: [], unitFilter: \"\", nameFilter: \"\" })\n  onSetSort = (sort) => this.setState({sort})\n  onSetFilteredState = (lesson) => this.setState({nameFilter: lesson })\n  onUnsetFilteredState = (filter) => this.setState({[filter]: \"\" })\n  onChangeView = (view) => this.setState({currentView: view, active: view})\n\n  onSetUnitFilter = (unit) => this.setState({unitFilter: unit})\n\n  // eslint-disable-next-line consistent-return\n  onSortLessons = (lessons) => {\n    const { sort } = this.state;\n    switch(sort) {\n      case 'subjectAscending':\n        return lessons.sort(subjectAscending);\n      case 'subjectDescending':\n        return lessons.sort(subjectDescending);\n      case 'passageAscending':\n        return lessons.sort(passageAscending);\n      case 'statusAscending':\n        return lessons.sort(statusAscending);\n      case 'passageDescending':\n        return lessons.sort(passageDescending);\n      case 'statusDescending':\n        return lessons.sort(statusDescending);\n      case 'availableDateAscending':\n          return lessons.sort(availableDateAscending);\n      case 'availableDateDescending':\n       return lessons.sort(availableDateDescending)\n      case 'dueDateDescending':\n        return lessons.sort(dueDate);\n      case 'dueDateAscending':\n        return lessons.sort(dueDateAscending)\n      case 'flagsAscending':\n        return lessons.sort(flagsAscending);\n      case 'flagsDescending':\n        return lessons.sort(flagsDescending);\n      case 'lessonNameAscending':\n        return lessons.sort(lessonNameAscending);\n      case 'lessonNameDescending':\n        return lessons.sort(lessonNameDescending);\n      case 'completionDateAscending':\n        return lessons.sort(completionDateAscending);\n      case 'completionDateDescending':\n        return lessons.sort(completionDateDescending);\n      case 'lessonTypeAscending':\n        return lessons.sort(lessonTypeAscending);\n      case 'lessonTypeDescending':\n        return lessons.sort(lessonTypeDescending);\n      default:\n        break;\n    }\n  }\n  onAddUpdatedLessons = (lessons) => this.setState({updatedLessons: lessons})\n\n\n  onFilterByName = () => {\n    const { lessons, nameFilter } = this.state;\n    return lessons.reduce((finalArr, currentLesson) => {\n      const { lessonName } = currentLesson;\n      const lessonString = lessonName.replace(/\\s/g, \"\").toLowerCase();\n      if (lessonString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n        finalArr.push(currentLesson);\n      }\n      return finalArr;\n    }, []);\n  }\n  onCloneLesson = (index) => {\n    const { lessons } = this.state;\n    this.setState(prevState => {\n      prevState.lessons.push(lessons[index]);\n      return { lessons: prevState.lessons}\n     })\n  }\n\n  onDeleteLesson = (index) => {\n    const { lessons } = this.state;\n    const newLessonsArray = this.arrayItemRemover(lessons, lessons[index])\n    this.setState({lessons: newLessonsArray})\n  }\n  // note: unassigned and incomplete are filtering opposite, but this works for some reason\n  onFilterLessons = () => {\n    const { statusFilters, subjectFilters, unitFilter, classTypeFilters, scoreStatusFilters, flagFilters, lessons: allLessons } = this.state;\n    let lessons = allLessons;\n    if (scoreStatusFilters.length && scoreStatusFilters.indexOf(\"all\") === -1) {\n      lessons = lessons.filter(lesson => scoreStatusFilters.indexOf(lesson.scoreStatus) !== -1);\n    }\n    if (statusFilters.length && statusFilters.indexOf(\"all\") === -1) {\n      lessons = lessons.filter(lesson => statusFilters.indexOf(lesson.status) !== -1);\n    }\n    if (subjectFilters.length && subjectFilters.indexOf('all') === -1) {\n      lessons = lessons.filter(lesson => subjectFilters.indexOf(lesson.subject) !== -1)\n    }\n    if (flagFilters.length && flagFilters.indexOf('all') === -1) {\n      lessons = lessons.filter(lesson => lesson.flags.length !== 0)\n    }\n    if (classTypeFilters.length && classTypeFilters.indexOf(\"all\") === -1) {\n      lessons = lessons.filter(lesson => classTypeFilters.indexOf(lesson.type) !== -1)\n    }\n    if (unitFilter.length && unitFilter.indexOf('all') === -1) {\n      lessons = lessons.filter(lesson => unitFilter.indexOf(lesson.unit) !== -1)\n    }\n    return lessons;\n  }\n\n  getMappableLessons = () => {\n    const { sort, unitFilter, lessons, dueDateFilters, nameFilter, statusFilters, subjectFilters, scoreStatusFilters, classTypeFilters, flagFilters} = this.state;\n    let mappableLessons = lessons;\n    if (nameFilter.length) {\n      mappableLessons = this.onFilterByName();\n    }\n    if (statusFilters.length || unitFilter.length || scoreStatusFilters.length || subjectFilters.length || classTypeFilters.length || flagFilters.length) {\n      mappableLessons = this.onFilterLessons();\n    }\n    if (dueDateFilters.length){\n      mappableLessons = this.filterDueDate();\n    }\n    if (sort) {\n      return this.onSortLessons(mappableLessons)\n    }\n    return mappableLessons\n  }\n\n\n  // may need to alter dueNextSession depending if client wants ALL vs incomplete/overdue\n  // TODO: only works with one due date filter, not multiple\n   filterDueDate = () => {\n     const { user } = this.props;\n    const { dueDateFilters, lessons: allLessons } = this.state;\n    let lessons = allLessons;\n    if (dueDateFilters.length && dueDateFilters.indexOf('all') === -1) {\n      if (dueDateFilters.includes('overdue')) {\n      lessons = lessons.filter(lesson => lesson.overdue === true)\n      }\n      if(dueDateFilters.includes('dueToday')) {\n        lessons = lessons.filter(lesson => lesson.dueDate === moment().format(\"MM/DD/Y\"))\n      }\n      if(dueDateFilters.includes('dueThisWeek')) {\n        lessons = lessons.filter(lesson => moment(lesson.dueDate).format('w') === moment().format(\"W\"))\n      }\n      if (dueDateFilters.includes('dueNextSession')) {\n        lessons = lessons.filter(lesson => moment(user.nextSession).isSameOrAfter(lesson.dueDate, 'day'))\n      }\n      return lessons\n    }\n    return lessons\n  }\n\n\n  handleFilterClick = (filterType, filter) => {\n    const { subjectFilters: currentSubjectFilters, scoreStatusFilters: currentScoreStatusFilters, statusFilters: currentStatusFilters, flagFilters: currentFlagFilters, dueDateFilters: currentDueDateFilters, classTypeFilters: currentClassTypeFilters } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case 'subject':\n        modifiedFilterCurrentState = currentSubjectFilters;\n        modifiedFilterName = 'subjectFilters';\n        break;\n      case 'status':\n        modifiedFilterCurrentState = currentStatusFilters;\n        modifiedFilterName = 'statusFilters';\n        break;\n      case 'score':\n        modifiedFilterCurrentState = currentScoreStatusFilters;\n        modifiedFilterName = 'scoreStatusFilters';\n        break;\n      case 'flags':\n          modifiedFilterCurrentState = currentFlagFilters;\n          modifiedFilterName = 'flagFilters';\n          break;\n      case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n      case 'classType':\n          modifiedFilterCurrentState = currentClassTypeFilters;\n          modifiedFilterName = 'classTypeFilters';\n          break;\n        default:\n        break;\n    }\n    // Decide whether we're adding or removing the selected filter\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[ filterIndex, 1 ]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  }\n\n  arrayItemRemover = (array, value) => array.filter((lesson) => lesson !== value)\n\n  renderCurrentView = () => {\n    const { active } = this.state;\n    const { user } = this.props;\n    if (active === 'full') {\n      return <FullView user={user} lessons={this.getMappableLessons()} onDeleteLesson={this.onDeleteLesson} onCloneLesson={this.onCloneLesson}/>\n    }\n    return <ListView user={user} lessons={this.getMappableLessons()} onSetSort={this.onSetSort} sort={this.state.sort}/>\n  }\n\n\n  render() {\n    const { currentView, subjectFilters, statusFilters, scoreStatusFilters, flagFilters, dueDateFilters, classTypeFilters } = this.state;\n    return (\n      <React.Fragment>\n        <FilterSection\n        currentView={currentView}\n        onChangeView={this.onChangeView}\n        onHandleFilterClick={this.onHandleFilterClick}\n        onClearFilters={this.onClearFilters}\n        onSetFilteredState={this.onSetFilteredState}\n        onUnsetFilteredState={this.onUnsetFilteredState}\n        onSetSort={this.onSetSort}\n        subjectFilters={subjectFilters}\n        statusFilters={statusFilters}\n        scoreStatusFilters={scoreStatusFilters}\n        flagFilters={flagFilters}\n        dueDateFilters={dueDateFilters}\n        classTypeFilters={classTypeFilters}\n        handleFilterClick={this.handleFilterClick}\n        onSetUnitFilter={this.onSetUnitFilter}\n        filterDueDate={this.filterDueDate}\n        />\n        {this.renderCurrentView()}\n        <AssignLessonModal\n          open={this.state.modalOpen}\n          lessons={this.props.user.lessons}\n          onCloseModal={this.onCloseModal}\n          onAddUpdatedLessons={this.onAddUpdatedLessons}/>\n      <a href=\"#\" onClick={this.onOpenModal} className=\"waves-effect waves-teal btn add-btn modal-trigger\"><i className=\"material-icons\">add</i>Assign Lesson</a>\n      </React.Fragment>\n    )\n  }\n}\n\nDetailLessonList.propTypes = {\n  user: PropTypes.object.isRequired,\n};\n\nexport default DetailLessonList;\n"]},"metadata":{},"sourceType":"module"}