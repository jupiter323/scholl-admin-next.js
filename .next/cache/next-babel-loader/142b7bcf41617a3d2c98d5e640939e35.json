{"ast":null,"code":"import _objectSpread2 from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport update from 'immutability-helper';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport FilterSection from '../components/CourseTemplate/components/FilterSection';\nimport TemplateCard from '../components/CourseTemplate/components/TemplateCard';\nimport sampleTemplates from '../components/CourseTemplate/utils/sampleTemplate';\nimport { sessionSort, lessonSort, estimatedTotalCourseWorkSort } from '../components/CourseTemplate/utils/sortOptions';\n\nclass CourseTemplates extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      subjectFilters: [],\n      sourceFilters: [],\n      titleFilter: '',\n      sort: ''\n    }));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", titleFilter => this.setState({\n      templatesAreFiltered: true,\n      titleFilter\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      templatesAreFiltered: false,\n      titleFilter: ''\n    }));\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIndex,\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false\n    }));\n\n    _defineProperty(this, \"onToggleEditModal\", () => this.setState(({\n      editModalOpen\n    }) => ({\n      editModalOpen: !editModalOpen\n    })));\n\n    _defineProperty(this, \"onSortTemplates\", templates => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'sessions':\n          return templates.sort(sessionSort);\n\n        case 'estimatedTotalCourseWork':\n          return templates.sort(estimatedTotalCourseWorkSort);\n\n        case 'lessons':\n          return templates.sort(lessonSort);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onFilterByTitle\", () => {\n      const {\n        templates,\n        titleFilter\n      } = this.state;\n      return templates.reduce((finalArr, currentTemplate) => {\n        const {\n          title\n        } = currentTemplate;\n        const templateString = title.replace(/\\s/g, \"\").toLowerCase();\n\n        if (templateString.indexOf(titleFilter) !== -1 && finalArr.indexOf(currentTemplate) === -1) {\n          finalArr.push(currentTemplate);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterTemplates\", () => {\n      const {\n        subjectFilters,\n        sourceFilters,\n        templates: allTemplates\n      } = this.state;\n      let templates = allTemplates;\n\n      if (subjectFilters.length && subjectFilters.indexOf('all') === -1) {\n        templates = templates.filter(template => subjectFilters.indexOf(template.subject) !== -1);\n      }\n\n      if (sourceFilters.length) {\n        templates = templates.filter(template => sourceFilters.indexOf(template.source) !== -1);\n      }\n\n      return templates;\n    });\n\n    _defineProperty(this, \"getMappableTemplates\", () => {\n      const {\n        subjectFilters,\n        sourceFilters,\n        titleFilter,\n        sort,\n        templates\n      } = this.state;\n      let mappableTemplates = templates;\n\n      if (titleFilter.length) {\n        mappableTemplates = this.onFilterByTitle();\n      }\n\n      if (subjectFilters.length || sourceFilters.length) {\n        mappableTemplates = this.onFilterTemplates();\n      }\n\n      if (sort) {\n        return this.onSortTemplates(mappableTemplates);\n      }\n\n      return mappableTemplates;\n    });\n\n    _defineProperty(this, \"importTemplateFromFile\", () => {\n      console.warn('stubbed out import function');\n    });\n\n    _defineProperty(this, \"handleFilterClick\", (filterType, filter) => {\n      const {\n        subjectFilters: currentSubjectFilters,\n        sourceFilters: currentSourceFilters\n      } = this.state;\n      let modifiedFilterCurrentState;\n      let modifiedFilterName;\n      let modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'source':\n          modifiedFilterCurrentState = currentSourceFilters;\n          modifiedFilterName = 'sourceFilters';\n          break;\n\n        default:\n          break;\n      } // Decide whether we're adding or removing the selected filter\n\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        [modifiedFilterName]: modifiedFilterUpdatedState\n      });\n    });\n\n    _defineProperty(this, \"mapTemplateCards\", () => this.getMappableTemplates().map((template, index) => __jsx(TemplateCard, {\n      template: template,\n      index: index,\n      dropdownIndex: this.state.dropdownIndex,\n      dropdownIsOpen: this.state.dropdownIsOpen,\n      onCloseDropdown: this.onCloseDropdown,\n      onSetDropdown: this.onSetDropdown,\n      onToggleEditModal: this.onToggleEditModal\n    })));\n\n    this.state = {\n      templates: sampleTemplates,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      editModalOpen: false,\n      subjectFilters: [],\n      sourceFilters: [],\n      titleFilter: '',\n      sort: ''\n    };\n  }\n\n  render() {\n    const {\n      subjectFilters,\n      sourceFilters\n    } = this.state;\n    return __jsx(\"main\", {\n      id: \"main\",\n      role: \"main\"\n    }, __jsx(\"div\", {\n      className: \"main-holder grey lighten-5 switcher-section\"\n    }, __jsx(StickyContainer, null, __jsx(Sticky, null, ({\n      style\n    }) => __jsx(\"div\", {\n      className: \"title-row card-panel\",\n      style: _objectSpread2({}, style, {\n        zIndex: 1999\n      })\n    }, __jsx(\"div\", {\n      className: \"mobile-header\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), __jsx(\"h2\", {\n      className: \"h1 white-text\"\n    }, __jsx(\"span\", {\n      className: \"heading-holder\"\n    }, __jsx(\"i\", {\n      className: \"icon-module\"\n    }), __jsx(\"span\", {\n      className: \"heading-block\"\n    }, \"Course Template Library\"))))), __jsx(FilterSection, {\n      subjectFilters: subjectFilters,\n      sourceFilters: sourceFilters,\n      onSetSort: this.onSetSort,\n      onClearFilters: this.onClearFilters,\n      handleFilterClick: this.handleFilterClick,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState\n    }), __jsx(\"div\", {\n      className: \"content-section\"\n    }, __jsx(\"div\", {\n      className: \"container-middle\"\n    }, __jsx(\"div\", {\n      className: \"result-row center-align\"\n    }, __jsx(\"b\", {\n      className: \"result\"\n    }, \"- \", this.getMappableTemplates().length, \" matches -\")), __jsx(\"div\", {\n      className: \"d-flex-content row card-width-470\"\n    }, this.mapTemplateCards()))), __jsx(\"div\", {\n      className: \"add-btn-block\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.importTemplateFromFile,\n      className: \"waves-effect waves-teal btn add-btn\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \" Import Template from File\")))));\n  }\n\n}\n\nexport default CourseTemplates;","map":null,"metadata":{},"sourceType":"module"}