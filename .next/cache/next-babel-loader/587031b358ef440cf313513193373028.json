{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport ClassCard from \"./components/ClassCard\";\nimport FilterSection from \"./components/FilterSection\";\nimport { firstNameAscending, firstNameDescending, lastNameAscending, lastNameDescending } from '../../utils/sortFunctions';\nimport ClassModal from \"../ClassModal\";\n\nclass ListPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetFilteredLocationState\", filterLocation => this.setState({\n      classesAreFiltered: true,\n      filterLocation\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredLocationState\", () => this.setState({\n      filterLocation: \"\"\n    }, this.checkForFilteredState));\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIsOpen: true,\n      dropdownIndex\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onCloneClass\", index => {\n      const {\n        onCloneClass\n      } = this.props;\n      this.onCloseDropdown();\n      onCloneClass(index);\n    });\n\n    _defineProperty(this, \"onDeleteClass\", index => {\n      const {\n        onDeleteClass\n      } = this.props;\n      this.onCloseDropdown();\n      onDeleteClass(index);\n    });\n\n    _defineProperty(this, \"checkForFilteredState\", () => {\n      const {\n        filterName,\n        filterLocation\n      } = this.state;\n\n      if (!filterName.length && !filterLocation.length) {\n        this.setState({\n          classesAreFiltered: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"onOpenClassModal\", event => {\n      event.preventDefault();\n      this.setState({\n        classModalOpen: true\n      });\n    });\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      classesAreFiltered: true,\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      classesAreFiltered: false,\n      filterName: ''\n    }));\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        classes\n      } = this.props;\n      const {\n        filterName\n      } = this.state;\n      return classes.reduce((finalArr, currentClass) => {\n        const {\n          accountInfo: {\n            lastName,\n            firstName\n          }\n        } = currentClass;\n        const classString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n\n        if (classString.indexOf(filterName) !== -1 && finalArr.indexOf(currentClass) === -1) {\n          finalArr.push(currentClass);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterByLocation\", (preFilteredClasses = []) => {\n      const {\n        classes: allClasses\n      } = this.props;\n      const {\n        filterLocation\n      } = this.state;\n      let classes;\n\n      if (preFilteredClasses.length) {\n        classes = preFilteredClasses;\n      } else {\n        classes = allClasses;\n      }\n\n      return classes.reduce((finalArr, currentInstructor) => {\n        const {\n          contactInfo: {\n            city\n          }\n        } = currentInstructor;\n\n        if (city === filterLocation && finalArr.indexOf(currentInstructor) === -1) {\n          finalArr.push(currentInstructor);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onSortClasses\", classes => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'firstNameAscending':\n          return classes.sort(firstNameAscending);\n\n        case 'firstNameDescending':\n          return classes.sort(firstNameDescending);\n\n        case 'lastNameAscending':\n          return classes.sort(lastNameAscending);\n\n        case 'lastNameDescending':\n          return classes.sort(lastNameDescending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"getMappableClasses\", () => {\n      const {\n        filterName,\n        filterLocation,\n        sort\n      } = this.state;\n      const {\n        classes: allClasses\n      } = this.props;\n      let classes;\n\n      if (filterName.length && !filterLocation.length) {\n        classes = this.onFilterByName();\n      } else if (!filterName.length && filterLocation.length) {\n        classes = this.onFilterByLocation();\n      } else if (filterName.length && filterLocation.length) {\n        const filteredByName = this.onFilterByName();\n        classes = this.onFilterByLocation(filteredByName);\n      } else {\n        classes = allClasses;\n      }\n\n      if (sort) {\n        return this.onSortClasses(classes);\n      }\n\n      return classes;\n    });\n\n    _defineProperty(this, \"onCloseClassModal\", () => this.setState({\n      classModalOpen: false\n    }));\n\n    _defineProperty(this, \"mapClassCards\", () => {\n      const classes = this.getMappableClasses();\n      return classes.map((item, index) => __jsx(ClassCard, {\n        key: index,\n        index: index,\n        classroom: item,\n        onSetDropdown: this.onSetDropdown,\n        onCloseDropdown: this.onCloseDropdown,\n        onCloneClass: () => this.onCloneClass(index),\n        onDeleteClass: () => this.onDeleteClass(index),\n        dropdownIsOpen: this.state.dropdownIsOpen,\n        dropdownIndex: this.state.dropdownIndex,\n        onHandleClassCard: () => this.props.onHandleClassCard(index),\n        onSaveClassChanges: this.props.onSaveClassChanges\n      }));\n    });\n\n    this.state = {\n      classesAreFiltered: false,\n      filterName: \"\",\n      filterLocation: '',\n      sort: '',\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      classModalOpen: false\n    };\n  }\n\n  render() {\n    const {\n      classModalOpen\n    } = this.state;\n    const {\n      onSaveNewClass\n    } = this.props;\n    return __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"title-row card-panel\"\n    }, __jsx(\"div\", {\n      className: \"mobile-header\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), __jsx(\"nav\", {\n      className: \"breadcrumb-holder\"\n    }, __jsx(\"div\", {\n      className: \"nav-wrapper \"\n    }, __jsx(\"a\", {\n      href: \"#!\",\n      className: \"breadcrumb\"\n    }, \"< Classes\"))), __jsx(\"h2\", {\n      className: \"h1 white-text\"\n    }, __jsx(\"span\", {\n      className: \"heading-holder\"\n    }, __jsx(\"i\", {\n      className: \"icon-members\"\n    }), __jsx(\"span\", {\n      className: \"heading-block\"\n    }, \"Classes\")))), __jsx(FilterSection, {\n      onSetSort: this.onSetSort,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredLocationState: this.onSetFilteredLocationState,\n      onUnsetFilteredLocationState: this.onUnsetFilteredLocationState\n    }), __jsx(\"div\", {\n      className: \"content-section\"\n    }, __jsx(\"div\", {\n      className: \"container-md\"\n    }, __jsx(\"div\", {\n      className: \"result-row center-align\"\n    }, __jsx(\"b\", {\n      className: \"result\"\n    }, \"- 23 matches -\"))), __jsx(\"div\", {\n      className: \"row d-flex-content card-width-366\"\n    }, this.mapClassCards())), __jsx(\"div\", {\n      className: \"add-btn-block\"\n    }, __jsx(\"a\", {\n      href: \"#modal_add_new_class\",\n      className: \"modal-trigger waves-effect waves-teal btn add-btn\",\n      onClick: () => this.onOpenClassModal(event)\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \" New Class\")), __jsx(ClassModal, {\n      open: classModalOpen,\n      onClose: this.onCloseClassModal,\n      onSave: onSaveNewClass\n    }));\n  }\n\n}\n\nexport default ListPage;","map":null,"metadata":{},"sourceType":"module"}