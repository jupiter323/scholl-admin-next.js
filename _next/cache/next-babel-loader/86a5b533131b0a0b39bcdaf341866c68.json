{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EditTestModal/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable react/no-did-update-set-state */\n\n/* eslint-disable react/no-did-mount-set-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { toast } from 'react-toastify';\nimport TestVersionPage from '../TestVersionPage';\nimport DetailTestScorePage from '../../../DetailTestScorePage';\nimport DetailTestAnswerSheetComplete from '../../../DetailTestAnswerSheetComplete';\nimport StrengthsAndWeaknesses from '../../../DetailTestStrengthsAndWeakesses';\nimport pdfMakeReport from './pdfMakeReport';\nimport { makeSelectStudentSections, makeSelectActiveStudentToken, makeSelectTests, makeSelectAssignedStudentTests, makeSelectActiveStudent, makeSelectActiveTestScores, makeSelectErrorMessages } from '../../../index/selectors';\nimport { setStudentAssignedTests, setStudentCompletedTests, updateTestStatus, setActiveTestScores, getTestScores, resetErrorMessage, fetchStudentTestSections } from '../../../index/actions';\nimport { updateStudentTestSectionStatusApi, updateStudentTestStatusApi, fetchTestsByStudentIdApi } from '../../../index/api';\nimport { css } from '@emotion/core';\nimport BarLoader from 'react-spinners/BarLoader';\n\nclass EditTestModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      const {\n        onFetchStudentTestSections,\n        studentToken,\n        test: {\n          student_test_id\n        },\n        activeStudent: {\n          id\n        }\n      } = this.props;\n      const postBody = {\n        id,\n        student_test_id,\n        studentToken\n      };\n      onFetchStudentTestSections(postBody);\n      this.props.onRef(this);\n    });\n\n    _defineProperty(this, \"getBase64ImageFromURL\", url => new _Promise((resolve, reject) => {\n      const img = new Image();\n      img.setAttribute('crossOrigin', 'anonymous');\n\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const dataURL = canvas.toDataURL('image/png');\n        resolve(dataURL);\n      };\n\n      img.onerror = error => {\n        reject(error);\n      };\n\n      img.src = url;\n    }));\n\n    _defineProperty(this, \"onSetActivePage\", activePage => {\n      this.setState({\n        activePage\n      });\n    });\n\n    _defineProperty(this, \"getTargetImage\", currentRef => {\n      const html2canvas = require('html2canvas');\n\n      const defaultCanvasSetting = {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: 'rgba(0,0,0,0)',\n        removeContainer: true\n      };\n      const targetImg = html2canvas(currentRef, defaultCanvasSetting).then(canvas => {\n        const imgData = canvas.toDataURL('image/png', 1.0);\n        return imgData;\n      });\n      return targetImg;\n    });\n\n    _defineProperty(this, \"getData\", item => new _Promise(resolve => {\n      const currentChild = item.child;\n      this.setState({\n        activePage: item.state\n      }, async () => {\n        const data = await this[currentChild].getComponentImages();\n\n        switch (item.state) {\n          case 'StrengthsAndWeaknesses':\n            this.setState({\n              analysisCicleImages: data.circleImageList,\n              analysisBarImages: data.barImageList\n            });\n            break;\n\n          case 'answerSheet':\n            this.setState({\n              answerSheetImages: data\n            });\n            break;\n\n          case 'scores':\n            this.setState({\n              scoresImages: data\n            });\n            break;\n\n          default:\n            break;\n        }\n\n        resolve();\n      });\n    }));\n\n    _defineProperty(this, \"generateScoreReportPdf\", async () => {\n      this.setState({\n        enablePublish: false\n      });\n      const imgDataLists = [];\n      const {\n        subjects,\n        adminInfo,\n        headerGradient\n      } = this.state;\n      const coverBackgroundImg = './static/images/sunset.jpg';\n      const logoImg = './static/images/study-hut-logo.png';\n      const backgroundImage = await this.getBase64ImageFromURL(`${coverBackgroundImg}?auto=compress&cs=tinysrgb&dpr=1&w=500`);\n      const logo = await this.getBase64ImageFromURL(`${logoImg}?auto=compress&cs=tinysrgb&dpr=1&w=500`);\n      const pageStates = [{\n        state: 'scores',\n        child: 'ScoresChild'\n      }, {\n        state: 'StrengthsAndWeaknesses',\n        child: 'AnalysisChild'\n      }, {\n        state: 'answerSheet',\n        child: 'AnswerSheetChild'\n      }];\n      const getImagesPromise = pageStates.reduce((accumulatorPromise, item) => accumulatorPromise.then(async () => {\n        const images = await this.getData(item);\n      }).catch(console.error), _Promise.resolve());\n      getImagesPromise.then(() => {\n        this.setState({\n          enablePublish: true\n        });\n        const {\n          scoresImages,\n          analysisCicleImages,\n          analysisBarImages,\n          answerSheetImages\n        } = this.state;\n        imgDataLists.push({\n          image: scoresImages,\n          width: 550,\n          margin: [0, 20, 0, 0],\n          pageBreak: 'after'\n        });\n\n        for (let i = 0; i < 3; i++) {\n          imgDataLists.push({\n            image: analysisCicleImages[i],\n            width: 300,\n            margin: [0, 20, 0, 0]\n          });\n          imgDataLists.push({\n            image: analysisBarImages[i],\n            width: 550,\n            margin: [0, 20, 0, 0],\n            pageBreak: 'after'\n          });\n          imgDataLists.push({\n            image: analysisBarImages[i],\n            width: 550,\n            margin: [0, 20, 0, 0],\n            pageBreak: 'after'\n          });\n          imgDataLists.push({\n            image: answerSheetImages[i],\n            width: 550,\n            margin: [0, 20, 0, 0],\n            pageBreak: 'after'\n          });\n        }\n\n        imgDataLists.push({\n          image: answerSheetImages[3],\n          width: 550,\n          margin: [0, 20, 0, 0]\n        });\n        const {\n          test: {\n            test_description,\n            completion_date\n          },\n          activeStudent: {\n            studentInformation: {\n              firstName,\n              lastName\n            }\n          }\n        } = this.props;\n        const userInfo = update(this.state.userInfo, {\n          $merge: {\n            name: `${firstName} ${lastName}`,\n            version: test_description,\n            test_date: moment(completion_date).format('MMMM Do YYYY')\n          }\n        });\n        pdfMakeReport(imgDataLists, userInfo, subjects, adminInfo, backgroundImage, headerGradient, logo);\n      });\n    });\n\n    _defineProperty(this, \"onUpdateTestSectionMsg\", message => this.setState({\n      updateTestSectionMessage: message\n    }));\n\n    _defineProperty(this, \"renderCurrentPage\", () => {\n      const {\n        activePage\n      } = this.state;\n      const {\n        test,\n        user,\n        onDeleteTest,\n        onSaveTestChanges,\n        onOpentTestScore\n      } = this.props;\n\n      if (activePage === 'testVersion') {\n        return __jsx(TestVersionPage, {\n          test: test,\n          user: user,\n          onDeleteTest: onDeleteTest,\n          onSaveTestChanges: onSaveTestChanges,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340\n          },\n          __self: this\n        });\n      }\n\n      if (activePage === 'scores') {\n        return __jsx(\"div\", {\n          id: \"wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 350\n          },\n          __self: this\n        }, __jsx(DetailTestScorePage, {\n          test: test,\n          getTargetImage: this.getTargetImage,\n          onRef: ref => this.ScoresChild = ref,\n          onGetTestScores: this.props.onGetTestScores,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351\n          },\n          __self: this\n        }));\n      }\n\n      if (activePage === 'answerSheet') {\n        const {\n          readingSectionCompleted,\n          writingSectionCompleted,\n          mathNoCalcSectionCompleted,\n          mathCalcSectionCompleted,\n          updateTestSectionMessage,\n          setIsCompleted\n        } = this.state;\n        return __jsx(DetailTestAnswerSheetComplete, {\n          testScoreDetails: test,\n          getTargetImage: this.getTargetImage,\n          onRef: ref => this.AnswerSheetChild = ref,\n          handleTestScore: this.handleTestScore,\n          completedSections: {\n            readingSectionCompleted,\n            writingSectionCompleted,\n            mathNoCalcSectionCompleted,\n            mathCalcSectionCompleted\n          },\n          setIsCompleted: setIsCompleted,\n          test: this.props.test,\n          updateTestSectionMessage: updateTestSectionMessage,\n          onUpdateTestSectionMsg: this.onUpdateTestSectionMsg,\n          openTestScores: onOpentTestScore,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 370\n          },\n          __self: this\n        });\n      }\n\n      if (activePage === 'StrengthsAndWeaknesses') {\n        return __jsx(StrengthsAndWeaknesses, {\n          getTargetImage: this.getTargetImage,\n          onRef: ref => this.AnalysisChild = ref,\n          test: this.props.test,\n          activeStudent: this.props.activeStudent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 392\n          },\n          __self: this\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"handleTestScore\", async (activeSection, problemsByTest) => {\n      // Check for non-existing sections and set them to completed\n      const {\n        testReadingProblems,\n        testWritingProblems,\n        testMathCalcProblems,\n        testMathNoCalcProblems\n      } = problemsByTest;\n      if (!testReadingProblems) this.setState({\n        readingSectionCompleted: true\n      });\n      if (!testWritingProblems) this.setState({\n        writingSectionCompleted: true\n      });\n      if (!testMathCalcProblems) this.setState({\n        mathCalcSectionCompleted: true\n      });\n      if (!testMathNoCalcProblems) this.setState({\n        mathNoCalcSectionCompleted: true\n      }); // @TODO bring back started check for a test that was just created\n      // if (activeTest.test_section_status === 'STARTED') {\n\n      const {\n        tests,\n        test: {\n          test_id\n        },\n        test\n      } = this.props;\n      const postBody = {\n        student_test_id: test.student_test_id,\n        student_test_section_id: activeSection.id,\n        student_test_section_status: 'COMPLETED'\n      };\n      const res = await updateStudentTestSectionStatusApi(postBody);\n\n      if (res && res.message) {\n        return this.onUpdateTestSectionMsg('Something went wrong completing this test section. Please try again later.');\n      } // Update current section as completed\n\n\n      const currentTestSectionId = activeSection.test_section_id;\n      const testIds = tests.map(test => test.id);\n      const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n      const currentTestSections = tests[currentTestIndex].test_sections;\n      const testSectionIds = currentTestSections.map(testSection => testSection.id);\n      const currentTestSectionIndex = testSectionIds.findIndex(testSectionId => testSectionId === currentTestSectionId);\n      const currentTestSection = currentTestSections[currentTestSectionIndex];\n\n      switch (currentTestSection.name) {\n        case 'Math (Calculator)':\n          this.setState({\n            mathCalcSectionCompleted: true\n          });\n          break;\n\n        case 'Writing':\n          this.setState({\n            writingSectionCompleted: true\n          });\n          break;\n\n        case 'Math (No Calculator)':\n          this.setState({\n            mathNoCalcSectionCompleted: true\n          });\n          break;\n\n        case 'Reading':\n          this.setState({\n            readingSectionCompleted: true\n          });\n          break;\n\n        default:\n          this.setState({\n            readingSectionCompleted: true\n          });\n      }\n\n      const {\n        readingSectionCompleted,\n        writingSectionCompleted,\n        mathCalcSectionCompleted,\n        mathNoCalcSectionCompleted\n      } = this.state;\n\n      if (readingSectionCompleted && writingSectionCompleted && mathCalcSectionCompleted && mathNoCalcSectionCompleted) {\n        const postBody = {\n          student_test_id: test.student_test_id,\n          status: 'COMPLETED'\n        };\n        const {\n          onOpentTestScore,\n          onUpdateTestStatus\n        } = this.props;\n        const currentTestStatus = test.due_status === 'OVERDUE' ? 'overdueStudentTests' : 'assignedStudentTests';\n        onUpdateTestStatus(postBody, currentTestStatus, test.student_id); // Delay set on saga before running onOpentTestScore()\n\n        onOpentTestScore(_objectSpread({}, test, {\n          status: 'COMPLETED'\n        }));\n      }\n    });\n\n    this.state = {\n      activePage: props.activePage,\n      scoresImages: null,\n      analysisBarImages: [],\n      analysisCicleImages: [],\n      answerSheetImages: [],\n      enablePublish: true,\n      subjects: ['Practice Test Scores', 'Reading Analysis', 'Reading Analysis (cont’d)', 'Reading Answer Sheet', 'Writing Analysis', 'Writing Analysis (cont’d)', 'Writing Answer Sheet', 'Math Analysis', \"Math Analysis (cont'd)\", 'Math Answer Sheet(no calc)', 'Math Answer Sheet(calculator)'],\n      adminInfo: 'Study Hut Tutoring | www.studyhut.com | (310) 555-1212 | info@studyhut.com',\n      userInfo: {\n        version: '',\n        target: 'Score Report',\n        test_date: '',\n        name: '',\n        test_type: 'Practice Test',\n        order: '3rd'\n      },\n      headerGradient: ['#ec693d 0%', '#649aab 61%', '#30add6 87%', '#18b5e9 100%'],\n      readingSectionCompleted: false,\n      writingSectionCompleted: false,\n      mathNoCalcSectionCompleted: false,\n      mathCalcSectionCompleted: false,\n      fetchScoresMsg: \"\",\n      updateTestStatusMsg: \"\",\n      updateTestSectionMessage: \"\"\n    };\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n    this.props.onResetErrorMessage(\"fetchScoresMsg\");\n    this.props.onResetErrorMessage(\"updateTestStatusMsg\");\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      activePage,\n      sections,\n      errorMessages\n    } = nextProps;\n    const {\n      onCloseEditTestModal\n    } = this.props;\n\n    if (activePage !== this.state.activePage && activePage !== this.props.activePage) {\n      this.setState({\n        activePage\n      });\n    }\n\n    if (sections.length !== 0) {\n      const {\n        tests,\n        test: {\n          test_id\n        }\n      } = this.props;\n      sections.map(section => {\n        if (section.test_section_status === 'COMPLETED') {\n          const testIds = tests.map(test => test.id);\n          const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n          const currentTestSections = tests[currentTestIndex].test_sections;\n          const testSectionIndex = currentTestSections.findIndex(testSection => testSection.id === section.test_section_id); // If no match return and wait for new props\n\n          if (!currentTestSections[testSectionIndex]) return;\n          const sectionType = currentTestSections[testSectionIndex].name;\n\n          switch (sectionType) {\n            case 'Reading':\n              return this.setState({\n                readingSectionCompleted: true\n              });\n\n            case 'Writing':\n              return this.setState({\n                writingSectionCompleted: true\n              });\n\n            case 'Math (Calculator)':\n              return this.setState({\n                mathCalcSectionCompleted: true\n              });\n\n            case 'Math (No Calculator)':\n              return this.setState({\n                mathNoCalcSectionCompleted: true\n              });\n\n            default:\n          }\n        }\n      });\n    }\n\n    const errorConditon = name => errorMessages[name] && errorMessages[name] !== this.state[name] && errorMessages[name] !== \"\";\n\n    if (errorConditon(\"fetchScoresMsg\")) {\n      this.setState({\n        fetchScoresMsg: errorMessages.fetchScoresMsg\n      });\n      toast.error(errorMessages.fetchScoresMsg);\n      onCloseEditTestModal();\n    }\n\n    if (errorConditon(\"updateTestStatusMsg\")) {\n      this.setState({\n        updateTestStatusMsg: errorMessages.updateTestStatusMsg\n      });\n      toast.error(errorMessages.updateTestStatusMsg);\n      onCloseEditTestModal();\n    }\n  }\n\n  render() {\n    const {\n      test,\n      user,\n      onCloseEditTestModal\n    } = this.props;\n    const {\n      activePage,\n      enablePublish\n    } = this.state;\n    const {\n      title,\n      test_name\n    } = test;\n    const {\n      studentInformation: {\n        firstName,\n        lastName\n      }\n    } = user;\n    const completedTest = test.status === 'COMPLETED';\n    return __jsx(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-modal card-main card switcher-section grey lighten-5 modal\",\n      style: {\n        zIndex: '1003',\n        display: 'block',\n        position: 'absolute',\n        top: '0',\n        minHeight: '100%',\n        minWidth: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"header-row card-panel light-blue lighten-1 white-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-panel-row row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"icon-col col s1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"icon-letter-a\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"col s9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-panel-text center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"text-xlarge\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, title), __jsx(\"div\", {\n      className: \"text-small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, \"Version: \", test_name))), __jsx(\"div\", {\n      className: \"col s1 right-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"close-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"modal-close close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"icon-close-thin\",\n      onClick: onCloseEditTestModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }))))), __jsx(\"div\", {\n      className: \"header-row-block card-panel-row row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col s3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"\\xA0\"), __jsx(\"div\", {\n      className: \"col s9 right-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, firstName, \" \", lastName))))), __jsx(\"div\", {\n      className: \"nav-header white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"nav-additional\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, __jsx(\"ul\", {\n      className: \"menu-additional\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, completedTest && __jsx(\"li\", {\n      className: \"col s3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: activePage === 'scores' ? 'active' : '',\n      onClick: () => enablePublish && this.onSetActivePage('scores'),\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, \"Scores\")), __jsx(\"li\", {\n      className: \"col s3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: activePage === 'answerSheet' ? 'active' : '',\n      onClick: () => enablePublish && this.onSetActivePage('answerSheet'),\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, \"Answer Sheet\")), completedTest && __jsx(\"li\", {\n      className: \"col s3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: activePage === 'StrengthsAndWeaknesses' ? 'active' : '',\n      onClick: () => enablePublish && this.onSetActivePage('StrengthsAndWeaknesses'),\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, \"Strengths & Weaknesses\")), completedTest && __jsx(\"li\", {\n      className: \"menu-special col s3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => enablePublish && this.generateScoreReportPdf(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, \"Download Score Report\", __jsx(\"i\", {\n      className: \"icon-download-file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    })))))), __jsx(\"div\", {\n      className: \"sweet-loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, __jsx(BarLoader, {\n      height: 3,\n      width: '100%',\n      color: '#36D7B7',\n      loading: !this.state.enablePublish,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    })), !this.state.enablePublish && __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, \"please wait the test score report downloading...\"), __jsx(\"div\", {\n      className: \"content-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"content-section-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, this.renderCurrentPage()))));\n  }\n\n}\n\nEditTestModal.propTypes = {\n  test: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSaveTestChanges: PropTypes.func.isRequired,\n  onCloseEditTestModal: PropTypes.func.isRequired\n};\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  tests: makeSelectTests(),\n  assignedTests: makeSelectAssignedStudentTests(),\n  activeStudent: makeSelectActiveStudent(),\n  activeTestScores: makeSelectActiveTestScores(),\n  errorMessages: makeSelectErrorMessages()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n    onSetAssignedTests: tests => dispatch(setStudentAssignedTests(tests)),\n    onSetCompletedTests: tests => dispatch(setStudentCompletedTests(tests)),\n    onUpdateTestStatus: (payload, currentStatus, studentId) => dispatch(updateTestStatus(payload, currentStatus, studentId)),\n    onSetScores: scores => dispatch(setActiveTestScores(scores)),\n    onGetTestScores: postBody => dispatch(getTestScores(postBody)),\n    onResetErrorMessage: errorName => dispatch(resetErrorMessage(errorName))\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(EditTestModal);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EditTestModal/index.js"],"names":["React","PropTypes","update","moment","connect","createStructuredSelector","compose","toast","TestVersionPage","DetailTestScorePage","DetailTestAnswerSheetComplete","StrengthsAndWeaknesses","pdfMakeReport","makeSelectStudentSections","makeSelectActiveStudentToken","makeSelectTests","makeSelectAssignedStudentTests","makeSelectActiveStudent","makeSelectActiveTestScores","makeSelectErrorMessages","setStudentAssignedTests","setStudentCompletedTests","updateTestStatus","setActiveTestScores","getTestScores","resetErrorMessage","fetchStudentTestSections","updateStudentTestSectionStatusApi","updateStudentTestStatusApi","fetchTestsByStudentIdApi","css","BarLoader","EditTestModal","Component","constructor","props","onFetchStudentTestSections","studentToken","test","student_test_id","activeStudent","id","postBody","onRef","url","resolve","reject","img","Image","setAttribute","onload","canvas","document","createElement","width","height","ctx","getContext","drawImage","dataURL","toDataURL","onerror","error","src","activePage","setState","currentRef","html2canvas","require","defaultCanvasSetting","scale","useCORS","allowTaint","backgroundColor","removeContainer","targetImg","then","imgData","item","currentChild","child","state","data","getComponentImages","analysisCicleImages","circleImageList","analysisBarImages","barImageList","answerSheetImages","scoresImages","enablePublish","imgDataLists","subjects","adminInfo","headerGradient","coverBackgroundImg","logoImg","backgroundImage","getBase64ImageFromURL","logo","pageStates","getImagesPromise","reduce","accumulatorPromise","images","getData","catch","console","push","image","margin","pageBreak","i","test_description","completion_date","studentInformation","firstName","lastName","userInfo","$merge","name","version","test_date","format","message","updateTestSectionMessage","user","onDeleteTest","onSaveTestChanges","onOpentTestScore","getTargetImage","ref","ScoresChild","onGetTestScores","readingSectionCompleted","writingSectionCompleted","mathNoCalcSectionCompleted","mathCalcSectionCompleted","setIsCompleted","AnswerSheetChild","handleTestScore","onUpdateTestSectionMsg","AnalysisChild","activeSection","problemsByTest","testReadingProblems","testWritingProblems","testMathCalcProblems","testMathNoCalcProblems","tests","test_id","student_test_section_id","student_test_section_status","res","currentTestSectionId","test_section_id","testIds","map","currentTestIndex","findIndex","testId","currentTestSections","test_sections","testSectionIds","testSection","currentTestSectionIndex","testSectionId","currentTestSection","status","onUpdateTestStatus","currentTestStatus","due_status","student_id","target","test_type","order","fetchScoresMsg","updateTestStatusMsg","componentWillUnmount","undefined","onResetErrorMessage","componentWillReceiveProps","nextProps","sections","errorMessages","onCloseEditTestModal","length","section","test_section_status","testSectionIndex","sectionType","errorConditon","render","title","test_name","completedTest","zIndex","display","position","top","minHeight","minWidth","onSetActivePage","generateScoreReportPdf","textAlign","padding","renderCurrentPage","propTypes","object","isRequired","func","mapStateToProps","assignedTests","activeTestScores","mapDispatchToProps","dispatch","onSetAssignedTests","onSetCompletedTests","payload","currentStatus","studentId","onSetScores","scores","errorName","withConnect"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AACA,OAAOC,6BAAP,MAA0C,wCAA1C;AACA,OAAOC,sBAAP,MAAmC,0CAAnC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SACEC,yBADF,EAEEC,4BAFF,EAGEC,eAHF,EAIEC,8BAJF,EAKEC,uBALF,EAMEC,0BANF,EAOEC,uBAPF,QAQO,0BARP;AASA,SACEC,uBADF,EAEEC,wBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,aALF,EAMEC,iBANF,EAOEC,wBAPF,QAQO,wBARP;AASA,SACEC,iCADF,EAEEC,0BAFF,EAGEC,wBAHF,QAIO,oBAJP;AAMA,SAASC,GAAT,QAAoB,eAApB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,MAAMC,aAAN,SAA4BhC,KAAK,CAACiC,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,+CA0CC,YAAY;AAC9B,YAAM;AACJC,QAAAA,0BADI;AAEJC,QAAAA,YAFI;AAGJC,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF,SAHF;AAIJC,QAAAA,aAAa,EAAE;AAAEC,UAAAA;AAAF;AAJX,UAKF,KAAKN,KALT;AAOA,YAAMO,QAAQ,GAAG;AACfD,QAAAA,EADe;AAEfF,QAAAA,eAFe;AAGfF,QAAAA;AAHe,OAAjB;AAKAD,MAAAA,0BAA0B,CAACM,QAAD,CAA1B;AACA,WAAKP,KAAL,CAAWQ,KAAX,CAAiB,IAAjB;AACD,KAzDkB;;AAAA,mDAgHKC,GAAG,IACzB,aAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,YAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,MAAAA,GAAG,CAACE,YAAJ,CAAiB,aAAjB,EAAgC,WAAhC;;AACAF,MAAAA,GAAG,CAACG,MAAJ,GAAa,MAAM;AACjB,cAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,QAAAA,MAAM,CAACG,KAAP,GAAeP,GAAG,CAACO,KAAnB;AACAH,QAAAA,MAAM,CAACI,MAAP,GAAgBR,GAAG,CAACQ,MAApB;AACA,cAAMC,GAAG,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAZ;AACAD,QAAAA,GAAG,CAACE,SAAJ,CAAcX,GAAd,EAAmB,CAAnB,EAAsB,CAAtB;AACA,cAAMY,OAAO,GAAGR,MAAM,CAACS,SAAP,CAAiB,WAAjB,CAAhB;AACAf,QAAAA,OAAO,CAACc,OAAD,CAAP;AACD,OARD;;AASAZ,MAAAA,GAAG,CAACc,OAAJ,GAAcC,KAAK,IAAI;AACrBhB,QAAAA,MAAM,CAACgB,KAAD,CAAN;AACD,OAFD;;AAGAf,MAAAA,GAAG,CAACgB,GAAJ,GAAUnB,GAAV;AACD,KAhBD,CAjHiB;;AAAA,6CAmIDoB,UAAU,IAAI;AAC9B,WAAKC,QAAL,CAAc;AACZD,QAAAA;AADY,OAAd;AAGD,KAvIkB;;AAAA,4CAyIFE,UAAU,IAAI;AAC7B,YAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,YAAMC,oBAAoB,GAAG;AAC3BC,QAAAA,KAAK,EAAE,CADoB;AAE3BC,QAAAA,OAAO,EAAE,IAFkB;AAG3BC,QAAAA,UAAU,EAAE,IAHe;AAI3BC,QAAAA,eAAe,EAAE,eAJU;AAK3BC,QAAAA,eAAe,EAAE;AALU,OAA7B;AAOA,YAAMC,SAAS,GAAGR,WAAW,CAACD,UAAD,EAAaG,oBAAb,CAAX,CAA8CO,IAA9C,CAAmDzB,MAAM,IAAI;AAC7E,cAAM0B,OAAO,GAAG1B,MAAM,CAACS,SAAP,CAAiB,WAAjB,EAA8B,GAA9B,CAAhB;AACA,eAAOiB,OAAP;AACD,OAHiB,CAAlB;AAIA,aAAOF,SAAP;AACD,KAvJkB;;AAAA,qCAyJTG,IAAI,IACZ,aAAYjC,OAAO,IAAI;AACrB,YAAMkC,YAAY,GAAGD,IAAI,CAACE,KAA1B;AACA,WAAKf,QAAL,CACE;AACED,QAAAA,UAAU,EAAEc,IAAI,CAACG;AADnB,OADF,EAIE,YAAY;AACV,cAAMC,IAAI,GAAG,MAAM,KAAKH,YAAL,EAAmBI,kBAAnB,EAAnB;;AACA,gBAAQL,IAAI,CAACG,KAAb;AACE,eAAK,wBAAL;AACE,iBAAKhB,QAAL,CAAc;AACZmB,cAAAA,mBAAmB,EAAEF,IAAI,CAACG,eADd;AAEZC,cAAAA,iBAAiB,EAAEJ,IAAI,CAACK;AAFZ,aAAd;AAIA;;AACF,eAAK,aAAL;AACE,iBAAKtB,QAAL,CAAc;AACZuB,cAAAA,iBAAiB,EAAEN;AADP,aAAd;AAGA;;AACF,eAAK,QAAL;AACE,iBAAKjB,QAAL,CAAc;AACZwB,cAAAA,YAAY,EAAEP;AADF,aAAd;AAGA;;AACF;AACE;AAlBJ;;AAoBArC,QAAAA,OAAO;AACR,OA3BH;AA6BD,KA/BD,CA1JiB;;AAAA,oDA2LM,YAAY;AACnC,WAAKoB,QAAL,CAAc;AACZyB,QAAAA,aAAa,EAAE;AADH,OAAd;AAGA,YAAMC,YAAY,GAAG,EAArB;AACA,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,SAAZ;AAAuBC,QAAAA;AAAvB,UAA0C,KAAKb,KAArD;AACA,YAAMc,kBAAkB,GAAG,4BAA3B;AACA,YAAMC,OAAO,GAAG,oCAAhB;AACA,YAAMC,eAAe,GAAG,MAAM,KAAKC,qBAAL,CAC3B,GAAEH,kBAAmB,wCADM,CAA9B;AAGA,YAAMI,IAAI,GAAG,MAAM,KAAKD,qBAAL,CAChB,GAAEF,OAAQ,wCADM,CAAnB;AAGA,YAAMI,UAAU,GAAG,CACjB;AACEnB,QAAAA,KAAK,EAAE,QADT;AAEED,QAAAA,KAAK,EAAE;AAFT,OADiB,EAKjB;AACEC,QAAAA,KAAK,EAAE,wBADT;AAEED,QAAAA,KAAK,EAAE;AAFT,OALiB,EASjB;AACEC,QAAAA,KAAK,EAAE,aADT;AAEED,QAAAA,KAAK,EAAE;AAFT,OATiB,CAAnB;AAcA,YAAMqB,gBAAgB,GAAGD,UAAU,CAACE,MAAX,CACvB,CAACC,kBAAD,EAAqBzB,IAArB,KACEyB,kBAAkB,CACf3B,IADH,CACQ,YAAY;AAChB,cAAM4B,MAAM,GAAG,MAAM,KAAKC,OAAL,CAAa3B,IAAb,CAArB;AACD,OAHH,EAIG4B,KAJH,CAISC,OAAO,CAAC7C,KAJjB,CAFqB,EAOvB,SAAQjB,OAAR,EAPuB,CAAzB;AAUAwD,MAAAA,gBAAgB,CAACzB,IAAjB,CAAsB,MAAM;AAC1B,aAAKX,QAAL,CAAc;AACZyB,UAAAA,aAAa,EAAE;AADH,SAAd;AAGA,cAAM;AAAED,UAAAA,YAAF;AAAgBL,UAAAA,mBAAhB;AAAqCE,UAAAA,iBAArC;AAAwDE,UAAAA;AAAxD,YAA8E,KAAKP,KAAzF;AACAU,QAAAA,YAAY,CAACiB,IAAb,CAAkB;AAChBC,UAAAA,KAAK,EAAEpB,YADS;AAEhBnC,UAAAA,KAAK,EAAE,GAFS;AAGhBwD,UAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,CAAX,CAHQ;AAIhBC,UAAAA,SAAS,EAAE;AAJK,SAAlB;;AAMA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BrB,UAAAA,YAAY,CAACiB,IAAb,CAAkB;AAChBC,YAAAA,KAAK,EAAEzB,mBAAmB,CAAC4B,CAAD,CADV;AAEhB1D,YAAAA,KAAK,EAAE,GAFS;AAGhBwD,YAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,CAAX;AAHQ,WAAlB;AAKAnB,UAAAA,YAAY,CAACiB,IAAb,CAAkB;AAChBC,YAAAA,KAAK,EAAEvB,iBAAiB,CAAC0B,CAAD,CADR;AAEhB1D,YAAAA,KAAK,EAAE,GAFS;AAGhBwD,YAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,CAAX,CAHQ;AAIhBC,YAAAA,SAAS,EAAE;AAJK,WAAlB;AAMApB,UAAAA,YAAY,CAACiB,IAAb,CAAkB;AAChBC,YAAAA,KAAK,EAAEvB,iBAAiB,CAAC0B,CAAD,CADR;AAEhB1D,YAAAA,KAAK,EAAE,GAFS;AAGhBwD,YAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,CAAX,CAHQ;AAIhBC,YAAAA,SAAS,EAAE;AAJK,WAAlB;AAMApB,UAAAA,YAAY,CAACiB,IAAb,CAAkB;AAChBC,YAAAA,KAAK,EAAErB,iBAAiB,CAACwB,CAAD,CADR;AAEhB1D,YAAAA,KAAK,EAAE,GAFS;AAGhBwD,YAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,CAAX,CAHQ;AAIhBC,YAAAA,SAAS,EAAE;AAJK,WAAlB;AAMD;;AACDpB,QAAAA,YAAY,CAACiB,IAAb,CAAkB;AAChBC,UAAAA,KAAK,EAAErB,iBAAiB,CAAC,CAAD,CADR;AAEhBlC,UAAAA,KAAK,EAAE,GAFS;AAGhBwD,UAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,CAAX;AAHQ,SAAlB;AAKA,cAAM;AACJxE,UAAAA,IAAI,EAAE;AAAE2E,YAAAA,gBAAF;AAAoBC,YAAAA;AAApB,WADF;AAEJ1E,UAAAA,aAAa,EAAE;AAAE2E,YAAAA,kBAAkB,EAAE;AAAEC,cAAAA,SAAF;AAAaC,cAAAA;AAAb;AAAtB;AAFX,YAGF,KAAKlF,KAHT;AAIA,cAAMmF,QAAQ,GAAGpH,MAAM,CAAC,KAAK+E,KAAL,CAAWqC,QAAZ,EAAsB;AAC3CC,UAAAA,MAAM,EAAE;AACNC,YAAAA,IAAI,EAAG,GAAEJ,SAAU,IAAGC,QAAS,EADzB;AAENI,YAAAA,OAAO,EAAER,gBAFH;AAGNS,YAAAA,SAAS,EAAEvH,MAAM,CAAC+G,eAAD,CAAN,CAAwBS,MAAxB,CAA+B,cAA/B;AAHL;AADmC,SAAtB,CAAvB;AAOA/G,QAAAA,aAAa,CACX+E,YADW,EAEX2B,QAFW,EAGX1B,QAHW,EAIXC,SAJW,EAKXI,eALW,EAMXH,cANW,EAOXK,IAPW,CAAb;AASD,OA7DD;AA8DD,KA/RkB;;AAAA,oDAiSOyB,OAAD,IAAa,KAAK3D,QAAL,CAAc;AAAE4D,MAAAA,wBAAwB,EAAED;AAA5B,KAAd,CAjSnB;;AAAA,+CAmSC,MAAM;AACxB,YAAM;AAAE5D,QAAAA;AAAF,UAAiB,KAAKiB,KAA5B;AACA,YAAM;AAAE3C,QAAAA,IAAF;AAAQwF,QAAAA,IAAR;AAAcC,QAAAA,YAAd;AAA4BC,QAAAA,iBAA5B;AAA+CC,QAAAA;AAA/C,UAAoE,KAAK9F,KAA/E;;AACA,UAAI6B,UAAU,KAAK,aAAnB,EAAkC;AAChC,eACE,MAAC,eAAD;AACE,UAAA,IAAI,EAAE1B,IADR;AAEE,UAAA,IAAI,EAAEwF,IAFR;AAGE,UAAA,YAAY,EAAEC,YAHhB;AAIE,UAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AACD,UAAIhE,UAAU,KAAK,QAAnB,EAA6B;AAC3B,eACE;AAAK,UAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,mBAAD;AACE,UAAA,IAAI,EAAE1B,IADR;AAEE,UAAA,cAAc,EAAE,KAAK4F,cAFvB;AAGE,UAAA,KAAK,EAAEC,GAAG,IAAK,KAAKC,WAAL,GAAmBD,GAHpC;AAIE,UAAA,eAAe,EAAE,KAAKhG,KAAL,CAAWkG,eAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAUD;;AACD,UAAIrE,UAAU,KAAK,aAAnB,EAAkC;AAChC,cAAM;AACJsE,UAAAA,uBADI;AAEJC,UAAAA,uBAFI;AAGJC,UAAAA,0BAHI;AAIJC,UAAAA,wBAJI;AAKJZ,UAAAA,wBALI;AAMJa,UAAAA;AANI,YAOF,KAAKzD,KAPT;AAQA,eACE,MAAC,6BAAD;AACE,UAAA,gBAAgB,EAAE3C,IADpB;AAEE,UAAA,cAAc,EAAE,KAAK4F,cAFvB;AAGE,UAAA,KAAK,EAAEC,GAAG,IAAK,KAAKQ,gBAAL,GAAwBR,GAHzC;AAIE,UAAA,eAAe,EAAE,KAAKS,eAJxB;AAKE,UAAA,iBAAiB,EAAE;AACjBN,YAAAA,uBADiB;AAEjBC,YAAAA,uBAFiB;AAGjBC,YAAAA,0BAHiB;AAIjBC,YAAAA;AAJiB,WALrB;AAWE,UAAA,cAAc,EAAEC,cAXlB;AAYE,UAAA,IAAI,EAAE,KAAKvG,KAAL,CAAWG,IAZnB;AAaE,UAAA,wBAAwB,EAAEuF,wBAb5B;AAcE,UAAA,sBAAsB,EAAE,KAAKgB,sBAd/B;AAeE,UAAA,cAAc,EAAEZ,gBAflB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;AAED,UAAIjE,UAAU,KAAK,wBAAnB,EAA6C;AAC3C,eACE,MAAC,sBAAD;AACE,UAAA,cAAc,EAAE,KAAKkE,cADvB;AAEE,UAAA,KAAK,EAAEC,GAAG,IAAK,KAAKW,aAAL,GAAqBX,GAFtC;AAGE,UAAA,IAAI,EAAE,KAAKhG,KAAL,CAAWG,IAHnB;AAIE,UAAA,aAAa,EAAE,KAAKH,KAAL,CAAWK,aAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AACD,aAAO,IAAP;AACD,KArWkB;;AAAA,6CAuWD,OAAOuG,aAAP,EAAsBC,cAAtB,KAAyC;AACzD;AACA,YAAM;AACJC,QAAAA,mBADI;AAEJC,QAAAA,mBAFI;AAGJC,QAAAA,oBAHI;AAIJC,QAAAA;AAJI,UAKFJ,cALJ;AAMA,UAAI,CAACC,mBAAL,EAA0B,KAAKhF,QAAL,CAAc;AAAEqE,QAAAA,uBAAuB,EAAE;AAA3B,OAAd;AAC1B,UAAI,CAACY,mBAAL,EAA0B,KAAKjF,QAAL,CAAc;AAAEsE,QAAAA,uBAAuB,EAAE;AAA3B,OAAd;AAC1B,UAAI,CAACY,oBAAL,EAA2B,KAAKlF,QAAL,CAAc;AAAEwE,QAAAA,wBAAwB,EAAE;AAA5B,OAAd;AAC3B,UAAI,CAACW,sBAAL,EAA6B,KAAKnF,QAAL,CAAc;AAAEuE,QAAAA,0BAA0B,EAAE;AAA9B,OAAd,EAX4B,CAazD;AACA;;AACA,YAAM;AAAEa,QAAAA,KAAF;AAAS/G,QAAAA,IAAI,EAAE;AAAEgH,UAAAA;AAAF,SAAf;AAA4BhH,QAAAA;AAA5B,UAAqC,KAAKH,KAAhD;AACA,YAAMO,QAAQ,GAAG;AACfH,QAAAA,eAAe,EAAED,IAAI,CAACC,eADP;AAEfgH,QAAAA,uBAAuB,EAAER,aAAa,CAACtG,EAFxB;AAGf+G,QAAAA,2BAA2B,EAAE;AAHd,OAAjB;AAKA,YAAMC,GAAG,GAAG,MAAM9H,iCAAiC,CAACe,QAAD,CAAnD;;AACA,UAAI+G,GAAG,IAAIA,GAAG,CAAC7B,OAAf,EAAwB;AACtB,eAAO,KAAKiB,sBAAL,CAA4B,4EAA5B,CAAP;AACD,OAxBwD,CA0BzD;;;AACA,YAAMa,oBAAoB,GAAGX,aAAa,CAACY,eAA3C;AACA,YAAMC,OAAO,GAAGP,KAAK,CAACQ,GAAN,CAAUvH,IAAI,IAAIA,IAAI,CAACG,EAAvB,CAAhB;AACA,YAAMqH,gBAAgB,GAAGF,OAAO,CAACG,SAAR,CAAkBC,MAAM,IAAIA,MAAM,KAAKV,OAAvC,CAAzB;AACA,YAAMW,mBAAmB,GAAGZ,KAAK,CAACS,gBAAD,CAAL,CAAwBI,aAApD;AACA,YAAMC,cAAc,GAAGF,mBAAmB,CAACJ,GAApB,CAAwBO,WAAW,IAAIA,WAAW,CAAC3H,EAAnD,CAAvB;AACA,YAAM4H,uBAAuB,GAAGF,cAAc,CAACJ,SAAf,CAC9BO,aAAa,IAAIA,aAAa,KAAKZ,oBADL,CAAhC;AAGA,YAAMa,kBAAkB,GAAGN,mBAAmB,CAACI,uBAAD,CAA9C;;AACA,cAAQE,kBAAkB,CAAC/C,IAA3B;AACE,aAAK,mBAAL;AACE,eAAKvD,QAAL,CAAc;AACZwE,YAAAA,wBAAwB,EAAE;AADd,WAAd;AAGA;;AACF,aAAK,SAAL;AACE,eAAKxE,QAAL,CAAc;AACZsE,YAAAA,uBAAuB,EAAE;AADb,WAAd;AAGA;;AACF,aAAK,sBAAL;AACE,eAAKtE,QAAL,CAAc;AACZuE,YAAAA,0BAA0B,EAAE;AADhB,WAAd;AAGA;;AACF,aAAK,SAAL;AACE,eAAKvE,QAAL,CAAc;AACZqE,YAAAA,uBAAuB,EAAE;AADb,WAAd;AAGA;;AACF;AACE,eAAKrE,QAAL,CAAc;AACZqE,YAAAA,uBAAuB,EAAE;AADb,WAAd;AAtBJ;;AA0BA,YAAM;AACJA,QAAAA,uBADI;AAEJC,QAAAA,uBAFI;AAGJE,QAAAA,wBAHI;AAIJD,QAAAA;AAJI,UAKF,KAAKvD,KALT;;AAMA,UACEqD,uBAAuB,IACvBC,uBADA,IAEAE,wBAFA,IAGAD,0BAJF,EAKE;AACA,cAAM9F,QAAQ,GAAG;AACfH,UAAAA,eAAe,EAAED,IAAI,CAACC,eADP;AAEfiI,UAAAA,MAAM,EAAE;AAFO,SAAjB;AAIA,cAAM;AAAEvC,UAAAA,gBAAF;AAAoBwC,UAAAA;AAApB,YAA2C,KAAKtI,KAAtD;AACA,cAAMuI,iBAAiB,GACrBpI,IAAI,CAACqI,UAAL,KAAoB,SAApB,GAAgC,qBAAhC,GAAwD,sBAD1D;AAEAF,QAAAA,kBAAkB,CAAC/H,QAAD,EAAWgI,iBAAX,EAA8BpI,IAAI,CAACsI,UAAnC,CAAlB,CARA,CASA;;AACA3C,QAAAA,gBAAgB,mBAAM3F,IAAN;AAAYkI,UAAAA,MAAM,EAAE;AAApB,WAAhB;AACD;AACF,KA5bkB;;AAEjB,SAAKvF,KAAL,GAAa;AACXjB,MAAAA,UAAU,EAAE7B,KAAK,CAAC6B,UADP;AAEXyB,MAAAA,YAAY,EAAE,IAFH;AAGXH,MAAAA,iBAAiB,EAAE,EAHR;AAIXF,MAAAA,mBAAmB,EAAE,EAJV;AAKXI,MAAAA,iBAAiB,EAAE,EALR;AAMXE,MAAAA,aAAa,EAAE,IANJ;AAOXE,MAAAA,QAAQ,EAAE,CACR,sBADQ,EAER,kBAFQ,EAGR,2BAHQ,EAIR,sBAJQ,EAKR,kBALQ,EAMR,2BANQ,EAOR,sBAPQ,EAQR,eARQ,EASR,wBATQ,EAUR,4BAVQ,EAWR,+BAXQ,CAPC;AAoBXC,MAAAA,SAAS,EAAE,4EApBA;AAqBXyB,MAAAA,QAAQ,EAAE;AACRG,QAAAA,OAAO,EAAE,EADD;AAERoD,QAAAA,MAAM,EAAE,cAFA;AAGRnD,QAAAA,SAAS,EAAE,EAHH;AAIRF,QAAAA,IAAI,EAAE,EAJE;AAKRsD,QAAAA,SAAS,EAAE,eALH;AAMRC,QAAAA,KAAK,EAAE;AANC,OArBC;AA6BXjF,MAAAA,cAAc,EAAE,CAAC,YAAD,EAAe,aAAf,EAA8B,aAA9B,EAA6C,cAA7C,CA7BL;AA8BXwC,MAAAA,uBAAuB,EAAE,KA9Bd;AA+BXC,MAAAA,uBAAuB,EAAE,KA/Bd;AAgCXC,MAAAA,0BAA0B,EAAE,KAhCjB;AAiCXC,MAAAA,wBAAwB,EAAE,KAjCf;AAkCXuC,MAAAA,cAAc,EAAE,EAlCL;AAmCXC,MAAAA,mBAAmB,EAAE,EAnCV;AAoCXpD,MAAAA,wBAAwB,EAAE;AApCf,KAAb;AAsCD;;AAmBDqD,EAAAA,oBAAoB,GAAG;AACrB,SAAK/I,KAAL,CAAWQ,KAAX,CAAiBwI,SAAjB;AACA,SAAKhJ,KAAL,CAAWiJ,mBAAX,CAA+B,gBAA/B;AACA,SAAKjJ,KAAL,CAAWiJ,mBAAX,CAA+B,qBAA/B;AACD;;AAEDC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,UAAM;AAAEtH,MAAAA,UAAF;AAAcuH,MAAAA,QAAd;AAAwBC,MAAAA;AAAxB,QAA0CF,SAAhD;AACA,UAAM;AAAEG,MAAAA;AAAF,QAA2B,KAAKtJ,KAAtC;;AACA,QAAI6B,UAAU,KAAK,KAAKiB,KAAL,CAAWjB,UAA1B,IAAwCA,UAAU,KAAK,KAAK7B,KAAL,CAAW6B,UAAtE,EAAkF;AAChF,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd;AACD;;AACD,QAAIuH,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAM;AAAErC,QAAAA,KAAF;AAAS/G,QAAAA,IAAI,EAAE;AAAEgH,UAAAA;AAAF;AAAf,UAA+B,KAAKnH,KAA1C;AACAoJ,MAAAA,QAAQ,CAAC1B,GAAT,CAAa8B,OAAO,IAAI;AACtB,YAAIA,OAAO,CAACC,mBAAR,KAAgC,WAApC,EAAiD;AAC/C,gBAAMhC,OAAO,GAAGP,KAAK,CAACQ,GAAN,CAAUvH,IAAI,IAAIA,IAAI,CAACG,EAAvB,CAAhB;AACA,gBAAMqH,gBAAgB,GAAGF,OAAO,CAACG,SAAR,CAAkBC,MAAM,IAAIA,MAAM,KAAKV,OAAvC,CAAzB;AACA,gBAAMW,mBAAmB,GAAGZ,KAAK,CAACS,gBAAD,CAAL,CAAwBI,aAApD;AACA,gBAAM2B,gBAAgB,GAAG5B,mBAAmB,CAACF,SAApB,CACvBK,WAAW,IAAIA,WAAW,CAAC3H,EAAZ,KAAmBkJ,OAAO,CAAChC,eADnB,CAAzB,CAJ+C,CAO/C;;AACA,cAAI,CAACM,mBAAmB,CAAC4B,gBAAD,CAAxB,EAA4C;AAE5C,gBAAMC,WAAW,GAAG7B,mBAAmB,CAAC4B,gBAAD,CAAnB,CAAsCrE,IAA1D;;AACA,kBAAQsE,WAAR;AACE,iBAAK,SAAL;AACE,qBAAO,KAAK7H,QAAL,CAAc;AAAEqE,gBAAAA,uBAAuB,EAAE;AAA3B,eAAd,CAAP;;AACF,iBAAK,SAAL;AACE,qBAAO,KAAKrE,QAAL,CAAc;AAAEsE,gBAAAA,uBAAuB,EAAE;AAA3B,eAAd,CAAP;;AACF,iBAAK,mBAAL;AACE,qBAAO,KAAKtE,QAAL,CAAc;AAAEwE,gBAAAA,wBAAwB,EAAE;AAA5B,eAAd,CAAP;;AACF,iBAAK,sBAAL;AACE,qBAAO,KAAKxE,QAAL,CAAc;AAAEuE,gBAAAA,0BAA0B,EAAE;AAA9B,eAAd,CAAP;;AACF;AATF;AAWD;AACF,OAxBD;AAyBD;;AACD,UAAMuD,aAAa,GAAIvE,IAAD,IAAWgE,aAAa,CAAChE,IAAD,CAAb,IAAuBgE,aAAa,CAAChE,IAAD,CAAb,KAAwB,KAAKvC,KAAL,CAAWuC,IAAX,CAA/C,IAAmEgE,aAAa,CAAChE,IAAD,CAAb,KAAwB,EAA5H;;AACA,QAAIuE,aAAa,CAAC,gBAAD,CAAjB,EAAqC;AACnC,WAAK9H,QAAL,CAAc;AAAE+G,QAAAA,cAAc,EAAEQ,aAAa,CAACR;AAAhC,OAAd;AACAzK,MAAAA,KAAK,CAACuD,KAAN,CAAY0H,aAAa,CAACR,cAA1B;AACAS,MAAAA,oBAAoB;AACrB;;AACD,QAAIM,aAAa,CAAC,qBAAD,CAAjB,EAA0C;AACxC,WAAK9H,QAAL,CAAc;AAAEgH,QAAAA,mBAAmB,EAAEO,aAAa,CAACP;AAArC,OAAd;AACA1K,MAAAA,KAAK,CAACuD,KAAN,CAAY0H,aAAa,CAACP,mBAA1B;AACAQ,MAAAA,oBAAoB;AACrB;AACF;;AAgVDO,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE1J,MAAAA,IAAF;AAAQwF,MAAAA,IAAR;AAAc2D,MAAAA;AAAd,QAAuC,KAAKtJ,KAAlD;AACA,UAAM;AAAE6B,MAAAA,UAAF;AAAc0B,MAAAA;AAAd,QAAgC,KAAKT,KAA3C;AACA,UAAM;AAAEgH,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAuB5J,IAA7B;AACA,UAAM;AAAE6E,MAAAA,kBAAkB,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb;AAAtB,QAAkDS,IAAxD;AACA,UAAMqE,aAAa,GAAG7J,IAAI,CAACkI,MAAL,KAAgB,WAAtC;AACA,WACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAC,iEADZ;AAEE,MAAA,KAAK,EAAE;AACL4B,QAAAA,MAAM,EAAE,MADH;AAELC,QAAAA,OAAO,EAAE,OAFJ;AAGLC,QAAAA,QAAQ,EAAE,UAHL;AAILC,QAAAA,GAAG,EAAE,GAJA;AAKLC,QAAAA,SAAS,EAAE,MALN;AAMLC,QAAAA,QAAQ,EAAE;AANL,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWE;AAAK,MAAA,SAAS,EAAC,uDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGR,KADH,CADF,EAIE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACYC,SADZ,CAJF,CADF,CAJF,EAcE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,IAAI,EAAC,GAAR;AAAY,MAAA,SAAS,EAAC,mBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAA+B,MAAA,OAAO,EAAET,oBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAdF,CADF,EAuBE;AAAK,MAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGrE,SADH,OACeC,QADf,CADF,CADF,CAFF,CAvBF,CAXF,EA6CE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG8E,aAAa,IACZ;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAEnI,UAAU,KAAK,QAAf,GAA0B,QAA1B,GAAqC,EADlD;AAEE,MAAA,OAAO,EAAE,MAAM0B,aAAa,IAAI,KAAKgH,eAAL,CAAqB,QAArB,CAFlC;AAGE,MAAA,IAAI,EAAC,GAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CAFJ,EAWE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAE1I,UAAU,KAAK,aAAf,GAA+B,QAA/B,GAA0C,EADvD;AAEE,MAAA,OAAO,EAAE,MAAM0B,aAAa,IAAI,KAAKgH,eAAL,CAAqB,aAArB,CAFlC;AAGE,MAAA,IAAI,EAAC,GAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CAXF,EAoBGP,aAAa,IACZ;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAEnI,UAAU,KAAK,wBAAf,GAA0C,QAA1C,GAAqD,EADlE;AAEE,MAAA,OAAO,EAAE,MACP0B,aAAa,IAAI,KAAKgH,eAAL,CAAqB,wBAArB,CAHrB;AAIE,MAAA,IAAI,EAAC,GAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,CArBJ,EA+BGP,aAAa,IACZ;AAAI,MAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,IAAI,EAAC,GAAR;AAAY,MAAA,OAAO,EAAE,MAAMzG,aAAa,IAAI,KAAKiH,sBAAL,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAEE;AAAG,MAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CAhCJ,CADF,CADF,CA7CF,EAwFE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AACE,MAAA,MAAM,EAAE,CADV;AAEE,MAAA,KAAK,EAAE,MAFT;AAGE,MAAA,KAAK,EAAE,SAHT;AAIE,MAAA,OAAO,EAAE,CAAC,KAAK1H,KAAL,CAAWS,aAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAxFF,EAiGI,CAAC,KAAKT,KAAL,CAAWS,aAAZ,IAA6B;AAAK,MAAA,KAAK,EAAE;AAAEkH,QAAAA,SAAS,EAAE,QAAb;AAAuBC,QAAAA,OAAO,EAAE;AAAhC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAjGjC,EAmGE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKC,iBAAL,EADH,CADF,CAnGF,CADF,CADF;AA6GD;;AAljByC;;AAqjB5C9K,aAAa,CAAC+K,SAAd,GAA0B;AACxBzK,EAAAA,IAAI,EAAErC,SAAS,CAAC+M,MAAV,CAAiBC,UADC;AAExBnF,EAAAA,IAAI,EAAE7H,SAAS,CAAC+M,MAAV,CAAiBC,UAFC;AAGxBlF,EAAAA,YAAY,EAAE9H,SAAS,CAACiN,IAAV,CAAeD,UAHL;AAIxBjF,EAAAA,iBAAiB,EAAE/H,SAAS,CAACiN,IAAV,CAAeD,UAJV;AAKxBxB,EAAAA,oBAAoB,EAAExL,SAAS,CAACiN,IAAV,CAAeD;AALb,CAA1B;AAQA,MAAME,eAAe,GAAG9M,wBAAwB,CAAC;AAC/CkL,EAAAA,QAAQ,EAAE1K,yBAAyB,EADY;AAE/CwB,EAAAA,YAAY,EAAEvB,4BAA4B,EAFK;AAG/CuI,EAAAA,KAAK,EAAEtI,eAAe,EAHyB;AAI/CqM,EAAAA,aAAa,EAAEpM,8BAA8B,EAJE;AAK/CwB,EAAAA,aAAa,EAAEvB,uBAAuB,EALS;AAM/CoM,EAAAA,gBAAgB,EAAEnM,0BAA0B,EANG;AAO/CsK,EAAAA,aAAa,EAAErK,uBAAuB;AAPS,CAAD,CAAhD;;AASA,SAASmM,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLnL,IAAAA,0BAA0B,EAAEM,QAAQ,IAAI6K,QAAQ,CAAC7L,wBAAwB,CAACgB,QAAD,CAAzB,CAD3C;AAEL8K,IAAAA,kBAAkB,EAAEnE,KAAK,IAAIkE,QAAQ,CAACnM,uBAAuB,CAACiI,KAAD,CAAxB,CAFhC;AAGLoE,IAAAA,mBAAmB,EAAEpE,KAAK,IAAIkE,QAAQ,CAAClM,wBAAwB,CAACgI,KAAD,CAAzB,CAHjC;AAILoB,IAAAA,kBAAkB,EAAE,CAACiD,OAAD,EAAUC,aAAV,EAAyBC,SAAzB,KAClBL,QAAQ,CAACjM,gBAAgB,CAACoM,OAAD,EAAUC,aAAV,EAAyBC,SAAzB,CAAjB,CALL;AAMLC,IAAAA,WAAW,EAAEC,MAAM,IAAIP,QAAQ,CAAChM,mBAAmB,CAACuM,MAAD,CAApB,CAN1B;AAOLzF,IAAAA,eAAe,EAAG3F,QAAD,IAAc6K,QAAQ,CAAC/L,aAAa,CAACkB,QAAD,CAAd,CAPlC;AAQL0I,IAAAA,mBAAmB,EAAE2C,SAAS,IAAIR,QAAQ,CAAC9L,iBAAiB,CAACsM,SAAD,CAAlB;AARrC,GAAP;AAUD;;AACD,MAAMC,WAAW,GAAG5N,OAAO,CAAC+M,eAAD,EAAkBG,kBAAlB,CAA3B;AACA,eAAehN,OAAO,CAAC0N,WAAD,CAAP,CAAqBhM,aAArB,CAAf","sourcesContent":["/* eslint-disable react/no-did-update-set-state */\n/* eslint-disable react/no-did-mount-set-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { toast } from 'react-toastify';\nimport TestVersionPage from '../TestVersionPage';\nimport DetailTestScorePage from '../../../DetailTestScorePage';\nimport DetailTestAnswerSheetComplete from '../../../DetailTestAnswerSheetComplete';\nimport StrengthsAndWeaknesses from '../../../DetailTestStrengthsAndWeakesses';\nimport pdfMakeReport from './pdfMakeReport';\nimport {\n  makeSelectStudentSections,\n  makeSelectActiveStudentToken,\n  makeSelectTests,\n  makeSelectAssignedStudentTests,\n  makeSelectActiveStudent,\n  makeSelectActiveTestScores,\n  makeSelectErrorMessages,\n} from '../../../index/selectors';\nimport {\n  setStudentAssignedTests,\n  setStudentCompletedTests,\n  updateTestStatus,\n  setActiveTestScores,\n  getTestScores,\n  resetErrorMessage,\n  fetchStudentTestSections,\n} from '../../../index/actions';\nimport {\n  updateStudentTestSectionStatusApi,\n  updateStudentTestStatusApi,\n  fetchTestsByStudentIdApi,\n} from '../../../index/api';\n\nimport { css } from '@emotion/core';\nimport BarLoader from 'react-spinners/BarLoader';\n\nclass EditTestModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activePage: props.activePage,\n      scoresImages: null,\n      analysisBarImages: [],\n      analysisCicleImages: [],\n      answerSheetImages: [],\n      enablePublish: true,\n      subjects: [\n        'Practice Test Scores',\n        'Reading Analysis',\n        'Reading Analysis (cont’d)',\n        'Reading Answer Sheet',\n        'Writing Analysis',\n        'Writing Analysis (cont’d)',\n        'Writing Answer Sheet',\n        'Math Analysis',\n        \"Math Analysis (cont'd)\",\n        'Math Answer Sheet(no calc)',\n        'Math Answer Sheet(calculator)',\n      ],\n      adminInfo: 'Study Hut Tutoring | www.studyhut.com | (310) 555-1212 | info@studyhut.com',\n      userInfo: {\n        version: '',\n        target: 'Score Report',\n        test_date: '',\n        name: '',\n        test_type: 'Practice Test',\n        order: '3rd',\n      },\n      headerGradient: ['#ec693d 0%', '#649aab 61%', '#30add6 87%', '#18b5e9 100%'],\n      readingSectionCompleted: false,\n      writingSectionCompleted: false,\n      mathNoCalcSectionCompleted: false,\n      mathCalcSectionCompleted: false,\n      fetchScoresMsg: \"\",\n      updateTestStatusMsg: \"\",\n      updateTestSectionMessage: \"\",\n    };\n  }\n\n  componentDidMount = async () => {\n    const {\n      onFetchStudentTestSections,\n      studentToken,\n      test: { student_test_id },\n      activeStudent: { id },\n    } = this.props;\n\n    const postBody = {\n      id,\n      student_test_id,\n      studentToken,\n    };\n    onFetchStudentTestSections(postBody);\n    this.props.onRef(this);\n  };\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n    this.props.onResetErrorMessage(\"fetchScoresMsg\");\n    this.props.onResetErrorMessage(\"updateTestStatusMsg\");\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { activePage, sections, errorMessages } = nextProps;\n    const { onCloseEditTestModal } = this.props;\n    if (activePage !== this.state.activePage && activePage !== this.props.activePage) {\n      this.setState({ activePage });\n    }\n    if (sections.length !== 0) {\n      const { tests, test: { test_id } } = this.props;\n      sections.map(section => {\n        if (section.test_section_status === 'COMPLETED') {\n          const testIds = tests.map(test => test.id);\n          const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n          const currentTestSections = tests[currentTestIndex].test_sections;\n          const testSectionIndex = currentTestSections.findIndex(\n            testSection => testSection.id === section.test_section_id,\n          );\n          // If no match return and wait for new props\n          if (!currentTestSections[testSectionIndex]) return;\n\n          const sectionType = currentTestSections[testSectionIndex].name;\n          switch (sectionType) {\n            case 'Reading':\n              return this.setState({ readingSectionCompleted: true });\n            case 'Writing':\n              return this.setState({ writingSectionCompleted: true });\n            case 'Math (Calculator)':\n              return this.setState({ mathCalcSectionCompleted: true });\n            case 'Math (No Calculator)':\n              return this.setState({ mathNoCalcSectionCompleted: true });\n            default:\n          }\n        }\n      });\n    }\n    const errorConditon = (name) => (errorMessages[name] && errorMessages[name] !== this.state[name] && errorMessages[name] !== \"\");\n    if (errorConditon(\"fetchScoresMsg\")) {\n      this.setState({ fetchScoresMsg: errorMessages.fetchScoresMsg });\n      toast.error(errorMessages.fetchScoresMsg);\n      onCloseEditTestModal();\n    }\n    if (errorConditon(\"updateTestStatusMsg\")) {\n      this.setState({ updateTestStatusMsg: errorMessages.updateTestStatusMsg });\n      toast.error(errorMessages.updateTestStatusMsg);\n      onCloseEditTestModal();\n    }\n  }\n\n  getBase64ImageFromURL = url =>\n    new Promise((resolve, reject) => {\n      const img = new Image();\n      img.setAttribute('crossOrigin', 'anonymous');\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const dataURL = canvas.toDataURL('image/png');\n        resolve(dataURL);\n      };\n      img.onerror = error => {\n        reject(error);\n      };\n      img.src = url;\n    });\n\n  onSetActivePage = activePage => {\n    this.setState({\n      activePage,\n    });\n  };\n\n  getTargetImage = currentRef => {\n    const html2canvas = require('html2canvas');\n    const defaultCanvasSetting = {\n      scale: 2,\n      useCORS: true,\n      allowTaint: true,\n      backgroundColor: 'rgba(0,0,0,0)',\n      removeContainer: true,\n    };\n    const targetImg = html2canvas(currentRef, defaultCanvasSetting).then(canvas => {\n      const imgData = canvas.toDataURL('image/png', 1.0);\n      return imgData;\n    });\n    return targetImg;\n  };\n\n  getData = item =>\n    new Promise(resolve => {\n      const currentChild = item.child;\n      this.setState(\n        {\n          activePage: item.state,\n        },\n        async () => {\n          const data = await this[currentChild].getComponentImages();\n          switch (item.state) {\n            case 'StrengthsAndWeaknesses':\n              this.setState({\n                analysisCicleImages: data.circleImageList,\n                analysisBarImages: data.barImageList,\n              });\n              break;\n            case 'answerSheet':\n              this.setState({\n                answerSheetImages: data,\n              });\n              break;\n            case 'scores':\n              this.setState({\n                scoresImages: data,\n              });\n              break;\n            default:\n              break;\n          }\n          resolve();\n        },\n      );\n    });\n\n  generateScoreReportPdf = async () => {\n    this.setState({\n      enablePublish: false,\n    });\n    const imgDataLists = [];\n    const { subjects, adminInfo, headerGradient } = this.state;\n    const coverBackgroundImg = './static/images/sunset.jpg';\n    const logoImg = './static/images/study-hut-logo.png';\n    const backgroundImage = await this.getBase64ImageFromURL(\n      `${coverBackgroundImg}?auto=compress&cs=tinysrgb&dpr=1&w=500`,\n    );\n    const logo = await this.getBase64ImageFromURL(\n      `${logoImg}?auto=compress&cs=tinysrgb&dpr=1&w=500`,\n    );\n    const pageStates = [\n      {\n        state: 'scores',\n        child: 'ScoresChild',\n      },\n      {\n        state: 'StrengthsAndWeaknesses',\n        child: 'AnalysisChild',\n      },\n      {\n        state: 'answerSheet',\n        child: 'AnswerSheetChild',\n      },\n    ];\n    const getImagesPromise = pageStates.reduce(\n      (accumulatorPromise, item) =>\n        accumulatorPromise\n          .then(async () => {\n            const images = await this.getData(item);\n          })\n          .catch(console.error),\n      Promise.resolve(),\n    );\n\n    getImagesPromise.then(() => {\n      this.setState({\n        enablePublish: true,\n      });\n      const { scoresImages, analysisCicleImages, analysisBarImages, answerSheetImages } = this.state;\n      imgDataLists.push({\n        image: scoresImages,\n        width: 550,\n        margin: [0, 20, 0, 0],\n        pageBreak: 'after',\n      });\n      for (let i = 0; i < 3; i++) {\n        imgDataLists.push({\n          image: analysisCicleImages[i],\n          width: 300,\n          margin: [0, 20, 0, 0],\n        });\n        imgDataLists.push({\n          image: analysisBarImages[i],\n          width: 550,\n          margin: [0, 20, 0, 0],\n          pageBreak: 'after',\n        });\n        imgDataLists.push({\n          image: analysisBarImages[i],\n          width: 550,\n          margin: [0, 20, 0, 0],\n          pageBreak: 'after',\n        });\n        imgDataLists.push({\n          image: answerSheetImages[i],\n          width: 550,\n          margin: [0, 20, 0, 0],\n          pageBreak: 'after',\n        });\n      }\n      imgDataLists.push({\n        image: answerSheetImages[3],\n        width: 550,\n        margin: [0, 20, 0, 0],\n      });\n      const {\n        test: { test_description, completion_date },\n        activeStudent: { studentInformation: { firstName, lastName } },\n      } = this.props;\n      const userInfo = update(this.state.userInfo, {\n        $merge: {\n          name: `${firstName} ${lastName}`,\n          version: test_description,\n          test_date: moment(completion_date).format('MMMM Do YYYY'),\n        },\n      });\n      pdfMakeReport(\n        imgDataLists,\n        userInfo,\n        subjects,\n        adminInfo,\n        backgroundImage,\n        headerGradient,\n        logo,\n      );\n    });\n  };\n\n  onUpdateTestSectionMsg = (message) => this.setState({ updateTestSectionMessage: message })\n\n  renderCurrentPage = () => {\n    const { activePage } = this.state;\n    const { test, user, onDeleteTest, onSaveTestChanges, onOpentTestScore } = this.props;\n    if (activePage === 'testVersion') {\n      return (\n        <TestVersionPage\n          test={test}\n          user={user}\n          onDeleteTest={onDeleteTest}\n          onSaveTestChanges={onSaveTestChanges}\n        />\n      );\n    }\n    if (activePage === 'scores') {\n      return (\n        <div id=\"wrapper\">\n          <DetailTestScorePage\n            test={test}\n            getTargetImage={this.getTargetImage}\n            onRef={ref => (this.ScoresChild = ref)}\n            onGetTestScores={this.props.onGetTestScores}\n          />\n        </div>\n      );\n    }\n    if (activePage === 'answerSheet') {\n      const {\n        readingSectionCompleted,\n        writingSectionCompleted,\n        mathNoCalcSectionCompleted,\n        mathCalcSectionCompleted,\n        updateTestSectionMessage,\n        setIsCompleted,\n      } = this.state;\n      return (\n        <DetailTestAnswerSheetComplete\n          testScoreDetails={test}\n          getTargetImage={this.getTargetImage}\n          onRef={ref => (this.AnswerSheetChild = ref)}\n          handleTestScore={this.handleTestScore}\n          completedSections={{\n            readingSectionCompleted,\n            writingSectionCompleted,\n            mathNoCalcSectionCompleted,\n            mathCalcSectionCompleted,\n          }}\n          setIsCompleted={setIsCompleted}\n          test={this.props.test}\n          updateTestSectionMessage={updateTestSectionMessage}\n          onUpdateTestSectionMsg={this.onUpdateTestSectionMsg}\n          openTestScores={onOpentTestScore}\n        />\n      );\n    }\n\n    if (activePage === 'StrengthsAndWeaknesses') {\n      return (\n        <StrengthsAndWeaknesses\n          getTargetImage={this.getTargetImage}\n          onRef={ref => (this.AnalysisChild = ref)}\n          test={this.props.test}\n          activeStudent={this.props.activeStudent}\n        />\n      );\n    }\n    return null;\n  };\n\n  handleTestScore = async (activeSection, problemsByTest) => {\n    // Check for non-existing sections and set them to completed\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = problemsByTest;\n    if (!testReadingProblems) this.setState({ readingSectionCompleted: true });\n    if (!testWritingProblems) this.setState({ writingSectionCompleted: true });\n    if (!testMathCalcProblems) this.setState({ mathCalcSectionCompleted: true });\n    if (!testMathNoCalcProblems) this.setState({ mathNoCalcSectionCompleted: true });\n\n    // @TODO bring back started check for a test that was just created\n    // if (activeTest.test_section_status === 'STARTED') {\n    const { tests, test: { test_id }, test } = this.props;\n    const postBody = {\n      student_test_id: test.student_test_id,\n      student_test_section_id: activeSection.id,\n      student_test_section_status: 'COMPLETED',\n    };\n    const res = await updateStudentTestSectionStatusApi(postBody);\n    if (res && res.message) {\n      return this.onUpdateTestSectionMsg('Something went wrong completing this test section. Please try again later.');\n    }\n\n    // Update current section as completed\n    const currentTestSectionId = activeSection.test_section_id;\n    const testIds = tests.map(test => test.id);\n    const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    const testSectionIds = currentTestSections.map(testSection => testSection.id);\n    const currentTestSectionIndex = testSectionIds.findIndex(\n      testSectionId => testSectionId === currentTestSectionId,\n    );\n    const currentTestSection = currentTestSections[currentTestSectionIndex];\n    switch (currentTestSection.name) {\n      case 'Math (Calculator)':\n        this.setState({\n          mathCalcSectionCompleted: true,\n        });\n        break;\n      case 'Writing':\n        this.setState({\n          writingSectionCompleted: true,\n        });\n        break;\n      case 'Math (No Calculator)':\n        this.setState({\n          mathNoCalcSectionCompleted: true,\n        });\n        break;\n      case 'Reading':\n        this.setState({\n          readingSectionCompleted: true,\n        });\n        break;\n      default:\n        this.setState({\n          readingSectionCompleted: true,\n        });\n    }\n    const {\n      readingSectionCompleted,\n      writingSectionCompleted,\n      mathCalcSectionCompleted,\n      mathNoCalcSectionCompleted,\n    } = this.state;\n    if (\n      readingSectionCompleted &&\n      writingSectionCompleted &&\n      mathCalcSectionCompleted &&\n      mathNoCalcSectionCompleted\n    ) {\n      const postBody = {\n        student_test_id: test.student_test_id,\n        status: 'COMPLETED',\n      };\n      const { onOpentTestScore, onUpdateTestStatus } = this.props;\n      const currentTestStatus =\n        test.due_status === 'OVERDUE' ? 'overdueStudentTests' : 'assignedStudentTests';\n      onUpdateTestStatus(postBody, currentTestStatus, test.student_id);\n      // Delay set on saga before running onOpentTestScore()\n      onOpentTestScore({ ...test, status: 'COMPLETED' });\n    }\n  };\n\n  render() {\n    const { test, user, onCloseEditTestModal } = this.props;\n    const { activePage, enablePublish } = this.state;\n    const { title, test_name } = test;\n    const { studentInformation: { firstName, lastName } } = user;\n    const completedTest = test.status === 'COMPLETED';\n    return (\n      <div className=\"wrapper\">\n        <div\n          className=\"card-modal card-main card switcher-section grey lighten-5 modal\"\n          style={{\n            zIndex: '1003',\n            display: 'block',\n            position: 'absolute',\n            top: '0',\n            minHeight: '100%',\n            minWidth: '100%',\n          }}\n        >\n          <div className=\"header-row card-panel light-blue lighten-1 white-text\">\n            <div className=\"card-panel-row row\">\n              <div className=\"icon-col col s1\">\n                <i className=\"icon-letter-a\" />\n              </div>\n              <div className=\"col s9\">\n                <div className=\"card-panel-text center-align\">\n                  <div className=\"text-xlarge\">\n                    {title}\n                  </div>\n                  <div className=\"text-small\">\n                    Version: {test_name}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col s1 right-align\">\n                <div className=\"close-block\">\n                  <a href=\"#\" className=\"modal-close close\">\n                    <i className=\"icon-close-thin\" onClick={onCloseEditTestModal} />\n                  </a>\n                </div>\n              </div>\n            </div>\n            <div className=\"header-row-block card-panel-row row\">\n              <div className=\"col s3\">&nbsp;</div>\n              <div className=\"col s9 right-align\">\n                <div>\n                  <span className=\"name\">\n                    {firstName} {lastName}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"nav-header white\">\n            <div className=\"nav-additional\">\n              <ul className=\"menu-additional\">\n                {completedTest &&\n                  <li className=\"col s3\">\n                    <a\n                      className={activePage === 'scores' ? 'active' : ''}\n                      onClick={() => enablePublish && this.onSetActivePage('scores')}\n                      href=\"#\"\n                    >\n                      Scores\n                    </a>\n                  </li>}\n                <li className=\"col s3\">\n                  <a\n                    className={activePage === 'answerSheet' ? 'active' : ''}\n                    onClick={() => enablePublish && this.onSetActivePage('answerSheet')}\n                    href=\"#\"\n                  >\n                    Answer Sheet\n                  </a>\n                </li>\n                {completedTest &&\n                  <li className=\"col s3\">\n                    <a\n                      className={activePage === 'StrengthsAndWeaknesses' ? 'active' : ''}\n                      onClick={() =>\n                        enablePublish && this.onSetActivePage('StrengthsAndWeaknesses')}\n                      href=\"#\"\n                    >\n                      Strengths &amp; Weaknesses\n                    </a>\n                  </li>}\n                {completedTest &&\n                  <li className=\"menu-special col s3\">\n                    <a href=\"#\" onClick={() => enablePublish && this.generateScoreReportPdf()}>\n                      Download Score Report\n                      <i className=\"icon-download-file\" />\n                    </a>\n                  </li>}\n              </ul>\n            </div>\n          </div>\n          <div className=\"sweet-loading\">\n            <BarLoader\n              height={3}\n              width={'100%'}\n              color={'#36D7B7'}\n              loading={!this.state.enablePublish}\n            />\n          </div>\n          {\n            !this.state.enablePublish && <div style={{ textAlign: 'center', padding: 10 }}>please wait the test score report downloading...</div>\n          }\n          <div className=\"content-section\">\n            <div className=\"content-section-holder\">\n              {this.renderCurrentPage()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nEditTestModal.propTypes = {\n  test: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSaveTestChanges: PropTypes.func.isRequired,\n  onCloseEditTestModal: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  tests: makeSelectTests(),\n  assignedTests: makeSelectAssignedStudentTests(),\n  activeStudent: makeSelectActiveStudent(),\n  activeTestScores: makeSelectActiveTestScores(),\n  errorMessages: makeSelectErrorMessages(),\n});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n    onSetAssignedTests: tests => dispatch(setStudentAssignedTests(tests)),\n    onSetCompletedTests: tests => dispatch(setStudentCompletedTests(tests)),\n    onUpdateTestStatus: (payload, currentStatus, studentId) =>\n      dispatch(updateTestStatus(payload, currentStatus, studentId)),\n    onSetScores: scores => dispatch(setActiveTestScores(scores)),\n    onGetTestScores: (postBody) => dispatch(getTestScores(postBody)),\n    onResetErrorMessage: errorName => dispatch(resetErrorMessage(errorName)),\n  };\n}\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(EditTestModal);\n"]},"metadata":{},"sourceType":"module"}