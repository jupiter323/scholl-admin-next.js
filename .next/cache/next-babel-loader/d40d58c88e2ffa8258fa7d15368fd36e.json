{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\nexport const data = percentage => ({\n  datasets: [{\n    data: [percentage, 100 - percentage],\n    backgroundColor: ['#00bbf7', '#eaeaea']\n  }]\n});\n\nconst getCardClass = (disabled, available) => {\n  if (disabled) {\n    return 'card-test card-disabled card-main card';\n  }\n\n  if (!available) {\n    return 'card-test card-nonavailable card-main card';\n  }\n\n  return 'card-test card-main card';\n};\n\nclass ScoredTestCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIndex,\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onCreateTest\", event => {\n      event.preventDefault();\n      console.warn('Pending implementation of create test UI and functionality');\n    });\n\n    _defineProperty(this, \"handleDropdownClick\", event => {\n      const {\n        onSetDropdown,\n        onCloseDropdown,\n        dropdownIsOpen,\n        index\n      } = this.props;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n  }\n\n  render() {\n    const {\n      test,\n      dropdownIndex,\n      index,\n      dropdownIsOpen,\n      onEditTest,\n      onDownloadReport,\n      onResetTest,\n      onDeleteTest\n    } = this.props;\n    const {\n      flags = [],\n      disabled,\n      available,\n      testType,\n      testDate,\n      title,\n      version,\n      availableDate,\n      dueDate,\n      completionDate,\n      initialScore,\n      targetScore,\n      currentScore,\n      totalGain,\n      subjects\n    } = test;\n    return __jsx(\"div\", {\n      className: \"col s12 m8 l7 xl5\"\n    }, __jsx(\"div\", {\n      className: \"card-main-col\"\n    }, __jsx(\"div\", {\n      className: getCardClass(disabled, available)\n    }, __jsx(\"div\", {\n      className: \"card-content\"\n    }, __jsx(\"div\", {\n      className: \"card-title-row row\"\n    }, __jsx(\"div\", {\n      className: \"col s9\"\n    }, __jsx(\"div\", {\n      className: \"card-title-block\"\n    }, __jsx(\"h4\", {\n      className: \"h2\"\n    }, __jsx(\"b\", null, testType === 'real' ? 'Real SAT' : title), testType === 'real' ? [\"- \", title] : null), __jsx(\"time\", {\n      dateTime: \"2018-03-05\",\n      className: \"title-meta\"\n    }, testType === 'real' ? testDate : [\"Version \", version]))), __jsx(\"div\", {\n      className: \"col s3\"\n    }, __jsx(\"div\", {\n      className: \"row icons-row\"\n    }, flags.length ? __jsx(\"span\", {\n      className: \"badge-rounded-xs badge red darken-2 white-text\"\n    }, __jsx(\"b\", {\n      className: \"badge-text\"\n    }, flags.length), __jsx(\"i\", {\n      className: \"icon-flag\"\n    })) : null, __jsx(\"div\", {\n      className: \"dropdown-block col\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"dropdown01\",\n      className: \"dropdown-trigger btn\",\n      onClick: this.handleDropdownClick\n    }, __jsx(\"i\", {\n      className: \"material-icons dots-icon\"\n    }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? __jsx(\"ul\", {\n      id: \"dropdown01\",\n      className: \"dropdown-content\",\n      style: {\n        display: 'block',\n        transformOrigin: '0px 0px 0px',\n        opacity: '1',\n        transform: 'scaleX(1) scaleY(1)'\n      }\n    }, __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onEditTest\n    }, \"View/Edit\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onDownloadReport\n    }, \"Download Score Report\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      className: \"red-text text-darken-3\",\n      onClick: onResetTest\n    }, \"Reset\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      className: \"red-text text-darken-3\",\n      onClick: onDeleteTest\n    }, \"Delete\"))) : null)))), __jsx(\"div\", {\n      className: \"card-test-row row d-flex mb-0\"\n    }, __jsx(\"div\", {\n      className: \"col s6\"\n    }, __jsx(\"div\", {\n      className: \"card-description\"\n    }, testType !== 'real' ? [__jsx(\"dl\", {\n      className: \"dl-horizontal\",\n      key: \"0\"\n    }, __jsx(\"dt\", null, \"Available:\"), __jsx(\"dd\", null, __jsx(\"time\", {\n      dateTime: \"2018-12-15\"\n    }, availableDate))), __jsx(\"dl\", {\n      className: \"dl-horizontal\",\n      key: \"1\"\n    }, __jsx(\"dt\", null, \"Due:\"), __jsx(\"dd\", null, __jsx(\"time\", {\n      dateTime: \"2018-12-15\"\n    }, dueDate))), completionDate.length ? __jsx(\"dl\", {\n      className: \"dl-horizontal\",\n      key: \"2\"\n    }, __jsx(\"dt\", null, \"Complete:\"), __jsx(\"dd\", null, __jsx(\"time\", {\n      dateTime: \"2018-12-15\"\n    }, completionDate))) : null] : null), __jsx(\"div\", {\n      className: currentScore ? 'chart-container chart-container-160' : 'chart-container chart-container-160 chart-value-zero start-anim'\n    }, __jsx(\"div\", {\n      className: \"chart-holder\"\n    }, __jsx(\"span\", {\n      className: \"svg-curved-bar\",\n      \"data-values\": \"{\\\"from\\\": 1100, \\\"to\\\": 1460, \\\"current\\\": 1210}\",\n      \"data-duration\": \"1\"\n    }, __jsx(Doughnut, {\n      data: () => data(initialScore && !disabled && available && currentScore ? Number(initialScore / targetScore) * 100 : 0),\n      options: {\n        circumference: 1 * Math.PI,\n        rotation: 1 * Math.PI,\n        cutoutPercentage: 60,\n        tooltips: false\n      }\n    }), __jsx(\"span\", {\n      className: \"js-diff-holder\"\n    }, __jsx(\"span\", {\n      className: \"js-diff\"\n    }, __jsx(\"span\", {\n      className: \"txt\",\n      style: {\n        opacity: '1',\n        bottom: '65px',\n        color: 'black',\n        fontWeight: '600',\n        fontSize: '12px'\n      }\n    }, \"+\", totalGain)))), __jsx(\"span\", {\n      className: \"chart-value\",\n      style: {\n        backgroundColor: '#00bbf7'\n      }\n    }, __jsx(\"span\", {\n      \"data-count-up\": true,\n      \"data-start-val\": \"1100\",\n      \"data-end-val\": \"1210\",\n      \"data-duration\": \"1\"\n    }, currentScore))), __jsx(\"div\", {\n      className: \"chart-row\"\n    }, __jsx(\"div\", {\n      className: \"chart-col chart-start\"\n    }, __jsx(\"span\", {\n      className: \"amount\"\n    }, initialScore), __jsx(\"br\", null), __jsx(\"span\", {\n      className: \"amount-text\"\n    }, \"initial\")), __jsx(\"div\", {\n      className: \"chart-col chart-end\"\n    }, __jsx(\"span\", {\n      className: \"amount\"\n    }, targetScore), __jsx(\"br\", null), __jsx(\"span\", {\n      className: \"amount-text\"\n    }, \"target\"))))), __jsx(\"div\", {\n      className: \"col s6 right-align\"\n    }, __jsx(\"div\", {\n      className: \"charts-row row mb-0\"\n    }, __jsx(\"div\", {\n      className: \"col s6\"\n    }, __jsx(\"div\", {\n      className: \"chart-block chart-block-test-sm\"\n    }, __jsx(\"span\", {\n      className: \"value-max\"\n    }, subjects[0].targetScore), __jsx(\"div\", {\n      className: \"js-donut-chart\",\n      \"data-stroke-width\": \"11\",\n      \"data-source\": \"./inc/score-data-test-reading.json\"\n    }), __jsx(\"div\", {\n      className: \"chart-text\"\n    }, __jsx(\"span\", {\n      className: \"title\"\n    }, \"Reading\"), __jsx(\"span\", {\n      className: \"value\"\n    }, subjects[0].currentScore), __jsx(\"span\", {\n      className: \"description\"\n    }, \"+\", subjects[0].totalGain)))), __jsx(\"div\", {\n      className: \"col s6\"\n    }, __jsx(\"div\", {\n      className: \"chart-block chart-block-test-sm\"\n    }, __jsx(\"span\", {\n      className: \"value-max\"\n    }, subjects[1].targetScore), __jsx(\"div\", {\n      className: \"js-donut-chart\",\n      \"data-stroke-width\": \"11\",\n      \"data-source\": \"./inc/score-data-test-writing.json\"\n    }), __jsx(\"div\", {\n      className: \"chart-text\"\n    }, __jsx(\"span\", {\n      className: \"title\"\n    }, \"Writing\"), __jsx(\"span\", {\n      className: \"value\"\n    }, subjects[1].currentScore), __jsx(\"span\", {\n      className: \"description\"\n    }, \"+\", subjects[1].totalGain))))), __jsx(\"div\", {\n      className: !subjects[2].currentScore ? 'chart-block chart-block-test' : 'chart-block chart-block-test chart-block-zero'\n    }, __jsx(\"span\", {\n      className: \"value-max\"\n    }, subjects[2].currentScore), __jsx(\"div\", {\n      className: \"js-donut-chart\",\n      \"data-stroke-width\": \"15\",\n      \"data-source\": \"./inc/score-data-test-math.json\"\n    }), __jsx(\"div\", {\n      className: \"chart-text\"\n    }, __jsx(\"span\", {\n      className: \"title\"\n    }, \"Math\"), __jsx(\"span\", {\n      className: \"value\"\n    }, subjects[2].currentScore), subjects[2].totalGain ? __jsx(\"span\", {\n      className: \"description\"\n    }, \"+\", subjects[2].totalGain) : null))))))));\n  }\n\n}\n\nScoredTestCard.propTypes = {\n  index: PropTypes.number,\n  dropdownIndex: PropTypes.number,\n  test: PropTypes.object.isRequired,\n  onEditTest: PropTypes.func.isRequired,\n  onResetTest: PropTypes.func.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onDownloadReport: PropTypes.func.isRequired\n};\nexport default ScoredTestCard;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/ScoredTestListPage/components/ScoredTestCard/index.js"],"names":["React","PropTypes","Doughnut","data","percentage","datasets","backgroundColor","getCardClass","disabled","available","ScoredTestCard","Component","dropdownIndex","setState","dropdownIsOpen","event","preventDefault","console","warn","onSetDropdown","onCloseDropdown","index","props","render","test","onEditTest","onDownloadReport","onResetTest","onDeleteTest","flags","testType","testDate","title","version","availableDate","dueDate","completionDate","initialScore","targetScore","currentScore","totalGain","subjects","length","handleDropdownClick","display","transformOrigin","opacity","transform","Number","circumference","Math","PI","rotation","cutoutPercentage","tooltips","bottom","color","fontWeight","fontSize","propTypes","number","object","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nexport const data = (percentage) => ({\n  datasets: [{\n    data: [percentage, 100 - percentage],\n    backgroundColor: [\n      '#00bbf7',\n      '#eaeaea',\n    ],\n  }],\n});\n\nconst getCardClass = (disabled, available) => {\n  if (disabled) {\n    return 'card-test card-disabled card-main card';\n  }\n  if (!available) {\n    return 'card-test card-nonavailable card-main card';\n  }\n  return 'card-test card-main card';\n}\n\nclass ScoredTestCard extends React.Component {\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  onCreateTest = (event) => {\n    event.preventDefault();\n    console.warn('Pending implementation of create test UI and functionality');\n  }\n\n  handleDropdownClick = (event) => {\n    const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  }\n\n\n  render() {\n    const { test, dropdownIndex, index, dropdownIsOpen, onEditTest, onDownloadReport, onResetTest, onDeleteTest } = this.props;\n    const { flags = [], disabled, available, testType, testDate, title, version, availableDate, dueDate, completionDate, initialScore, targetScore, currentScore, totalGain, subjects } = test;\n    return (\n      <div className=\"col s12 m8 l7 xl5\">\n        <div className=\"card-main-col\">\n          <div className={getCardClass(disabled, available)}>\n            <div className=\"card-content\">\n              <div className=\"card-title-row row\">\n                <div className=\"col s9\">\n                  <div className=\"card-title-block\">\n                    <h4 className=\"h2\">\n                      <b>{testType === 'real' ? 'Real SAT' : title}</b>\n                      <If condition={testType === 'real'}>\n                        - {title}\n                      </If>\n                    </h4>\n                    <time dateTime=\"2018-03-05\" className=\"title-meta\">\n                      <Choose>\n                        <When condition={testType === 'real'}>\n                          {testDate}\n                        </When>\n                        <Otherwise>\n                          Version {version}\n                        </Otherwise>\n                      </Choose>\n                    </time>\n                  </div>\n                </div>\n                <div className=\"col s3\">\n                  <div className=\"row icons-row\">\n                    <If condition={flags.length}>\n                      <span\n                        className=\"badge-rounded-xs badge red darken-2 white-text\"\n                      >\n                        <b className=\"badge-text\">{flags.length}</b>\n                        <i className=\"icon-flag\"></i>\n                      </span>\n                    </If>\n\n                    <div className=\"dropdown-block col\">\n                      <a\n                        href='#'\n                        data-target='dropdown01'\n                        className='dropdown-trigger btn'\n                        onClick={this.handleDropdownClick}\n                      >\n                        <i className=\"material-icons dots-icon\">more_vert</i>\n                      </a>\n                      <If condition={dropdownIsOpen && dropdownIndex === index}>\n                        <ul\n                          id='dropdown01'\n                          className='dropdown-content'\n                          style={{ display: 'block', transformOrigin: '0px 0px 0px', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}\n                        >\n                          <li><a href=\"#\" onClick={onEditTest}>View/Edit</a></li>\n                          <li><a href=\"#\" onClick={onDownloadReport}>Download Score Report</a></li>\n                          <li><a href=\"#\" className=\"red-text text-darken-3\" onClick={onResetTest}>Reset</a></li>\n                          <li><a href=\"#\" className=\"red-text text-darken-3\" onClick={onDeleteTest}>Delete</a></li>\n                        </ul>\n                      </If>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card-test-row row d-flex mb-0\">\n                <div className=\"col s6\">\n                  <div className=\"card-description\">\n                    <If condition={testType !== 'real'}>\n                      <dl className=\"dl-horizontal\">\n                        <dt>Available:</dt>\n                        <dd><time dateTime=\"2018-12-15\">{availableDate}</time></dd>\n                      </dl>\n                      <dl className=\"dl-horizontal\">\n                        <dt>Due:</dt>\n                        <dd><time dateTime=\"2018-12-15\">{dueDate}</time></dd>\n                      </dl>\n                      <If condition={completionDate.length}>\n                        <dl className=\"dl-horizontal\">\n                          <dt>Complete:</dt>\n                          <dd><time dateTime=\"2018-12-15\">{completionDate}</time></dd>\n                        </dl>\n                      </If>\n                    </If>\n                  </div>\n                  <div className={currentScore ? 'chart-container chart-container-160' : 'chart-container chart-container-160 chart-value-zero start-anim' }>\n                    <div className=\"chart-holder\">\n                      <span className=\"svg-curved-bar\" data-values='{\"from\": 1100, \"to\": 1460, \"current\": 1210}' data-duration=\"1\">\n                        <Doughnut\n                          data={() => (data(initialScore && (!disabled && available) && currentScore ? Number(initialScore / targetScore) * 100 : 0 ))}\n                          options={{\n                            circumference: 1 * Math.PI,\n                            rotation: 1 * Math.PI,\n                            cutoutPercentage: 60,\n                            tooltips: false,\n                          }}\n                        />\n                        <span className=\"js-diff-holder\">\n                          <span className=\"js-diff\">\n                            <span className=\"txt\" style={{ opacity: '1', bottom: '65px', color: 'black', fontWeight: '600', fontSize: '12px' }}>+{totalGain}</span>\n                          </span>\n                        </span>\n\n                      </span>\n                      <span className=\"chart-value\" style={{ backgroundColor: '#00bbf7' }}><span data-count-up data-start-val=\"1100\" data-end-val=\"1210\" data-duration=\"1\">{currentScore}</span></span>\n                    </div>\n                    <div className=\"chart-row\">\n                      <div className=\"chart-col chart-start\">\n                        <span className=\"amount\">{initialScore}</span><br />\n                        <span className=\"amount-text\">initial</span>\n                      </div>\n                      <div className=\"chart-col chart-end\">\n                        <span className=\"amount\">{targetScore}</span><br />\n                        <span className=\"amount-text\">target</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col s6 right-align\">\n                  <div className=\"charts-row row mb-0\">\n                    <div className=\"col s6\">\n                      <div className=\"chart-block chart-block-test-sm\">\n                        <span className=\"value-max\">{subjects[0].targetScore}</span>\n                        <div className=\"js-donut-chart\" data-stroke-width=\"11\" data-source='./inc/score-data-test-reading.json'></div>\n                        <div className=\"chart-text\">\n                          <span className=\"title\">Reading</span>\n                          <span className=\"value\">{subjects[0].currentScore}</span>\n                          <span className=\"description\">+{subjects[0].totalGain}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"col s6\">\n                      <div className=\"chart-block chart-block-test-sm\">\n                        <span className=\"value-max\">{subjects[1].targetScore}</span>\n                        <div className=\"js-donut-chart\" data-stroke-width=\"11\" data-source='./inc/score-data-test-writing.json'></div>\n                        <div className=\"chart-text\">\n                          <span className=\"title\">Writing</span>\n                          <span className=\"value\">{subjects[1].currentScore}</span>\n                          <span className=\"description\">+{subjects[1].totalGain}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className={!subjects[2].currentScore ? 'chart-block chart-block-test' : 'chart-block chart-block-test chart-block-zero'}>\n                    <span className=\"value-max\">{subjects[2].currentScore}</span>\n                    <div className=\"js-donut-chart\" data-stroke-width=\"15\" data-source='./inc/score-data-test-math.json'></div>\n                    <div className=\"chart-text\">\n                      <span className=\"title\">Math</span>\n                      <span className=\"value\">{subjects[2].currentScore}</span>\n                      <If condition={subjects[2].totalGain}>\n                        <span className=\"description\">+{subjects[2].totalGain}</span>\n                      </If>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nScoredTestCard.propTypes = {\n  index: PropTypes.number,\n  dropdownIndex: PropTypes.number,\n  test: PropTypes.object.isRequired,\n  onEditTest: PropTypes.func.isRequired,\n  onResetTest: PropTypes.func.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onDownloadReport: PropTypes.func.isRequired,\n}\n\nexport default ScoredTestCard;\n"]},"metadata":{},"sourceType":"module"}