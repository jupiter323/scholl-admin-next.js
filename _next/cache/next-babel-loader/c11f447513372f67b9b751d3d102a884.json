{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport update from 'immutability-helper';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport PropTypes from 'prop-types';\nimport NavBar from './common/NavBar';\nimport InCompleteTestSection from './components/InCompleteSection';\nimport PreStartTestSection from './components/StartSection';\nimport { toast } from 'react-toastify';\nimport Toast from '../../../../Toast';\nimport { addStudentAnswerToTestApi, updateStudentTestSectionStatusApi, updateStudentTestStatusApi } from '../../../index/api';\nimport { makeSelectStudentSections, makeSelectActiveStudentToken, makeSelectActiveStudent, makeSelectTests } from '../../../index/selectors';\nimport { fetchStudentTestSections } from '../../../index/actions';\n\nclass EnterAnswerWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const {\n        onFetchStudentTestSections,\n        sections,\n        studentToken,\n        test: {\n          student_test_id\n        },\n        activeStudent: {\n          id\n        }\n      } = this.props;\n      const postBody = {\n        id,\n        student_test_id,\n        studentToken\n      };\n      onFetchStudentTestSections(postBody);\n    });\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      const {\n        sections,\n        student_test_id\n      } = nextProps;\n\n      if (sections.length !== 0) {\n        this.onSetProblems(sections, student_test_id);\n      }\n    });\n\n    _defineProperty(this, \"onSetProblems\", (sections, studentTestId) => {\n      const {\n        tests,\n        test: {\n          test_id\n        }\n      } = this.props;\n      const testIds = tests.map(test => test.id);\n      const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n      const currentTestSections = tests[currentTestIndex].test_sections;\n      sections.map(section => {\n        const testSectionIds = currentTestSections.map(testSection => testSection.id);\n        const currentTestSectionIndex = testSectionIds.findIndex(testSectionId => testSectionId === section.test_section_id);\n        const currentTestSection = currentTestSections[currentTestSectionIndex];\n        if (!currentTestSection) return;\n\n        switch (currentTestSection.name) {\n          case \"Math (Calculator)\":\n            this.setState({\n              testMathCalcProblems: section\n            });\n            break;\n\n          case \"Writing\":\n            this.setState({\n              testWritingProblems: section\n            });\n            break;\n\n          case \"Math (No Calculator)\":\n            this.setState({\n              testMathNoCalcProblems: section\n            });\n            break;\n\n          case \"Reading\":\n            this.setState({\n              testReadingProblems: section\n            });\n            break;\n\n          default:\n            this.setState({\n              testReadingProblems: section\n            });\n            break;\n        }\n      });\n      this.setState({\n        testSections: sections,\n        studentTestId\n      });\n    });\n\n    _defineProperty(this, \"onSetActivePage\", async name => {\n      const currentSection = this.state.updatedState.activeSection;\n      let updatedState;\n\n      if (name === 'showInCompleteTest') {\n        updatedState = update(this.state.updatedState, {\n          [name]: {\n            $set: true\n          },\n          [currentSection]: {\n            $set: false\n          }\n        });\n      } else {\n        updatedState = update(this.state.updatedState, {\n          [name]: {\n            $set: true\n          },\n          [currentSection]: {\n            $set: false\n          },\n          activeSection: {\n            $set: name\n          }\n        });\n      }\n\n      this.setState({\n        updatedState\n      });\n\n      if (name === \"showInCompleteTest\") {\n        const currentProblems = this.getCurrentTestProblems();\n        const test_section_id = currentProblems.id;\n        const postBody = {\n          student_test_id: currentProblems.student_test_id,\n          student_test_section_id: test_section_id,\n          student_test_section_status: 'STARTED'\n        };\n        const response = await updateStudentTestSectionStatusApi(postBody);\n\n        if (response && response.ok === true) {\n          // Check for successful response before starting test or no answers will get recorded\n          toast.success(\"Test section is now STARTED.\");\n          this.setState({\n            previewTest: false,\n            startedTest: true\n          });\n        }\n      } else {\n        this.setState({\n          previewTest: true,\n          startedTest: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"onAddStudentAnswerToTest\", async (test_problem_id, answer) => {\n      const {\n        studentTestId\n      } = this.state;\n      const postBody = {\n        student_test_id: studentTestId,\n        test_problem_id,\n        answer\n      };\n      await addStudentAnswerToTestApi(postBody);\n    });\n\n    _defineProperty(this, \"getCurrentTestProblems\", () => {\n      const activeSection = this.state.updatedState.activeSection;\n      const {\n        testReadingProblems,\n        testWritingProblems,\n        testMathCalcProblems,\n        testMathNoCalcProblems\n      } = this.state;\n\n      switch (activeSection) {\n        case \"activeReadingSection\":\n          return testReadingProblems;\n\n        case \"activeWritingSection\":\n          return testWritingProblems;\n\n        case \"activeMathWithCalcSection\":\n          return testMathCalcProblems;\n\n        case \"activeMathNoCalcSection\":\n          return testMathNoCalcProblems;\n\n        default:\n          return '';\n      }\n    });\n\n    _defineProperty(this, \"handleTestScore\", async activeTest => {\n      // Check for non-existing sections and set them to completed\n      const {\n        testReadingProblems,\n        testWritingProblems,\n        testMathCalcProblems,\n        testMathNoCalcProblems\n      } = this.state;\n      if (!testReadingProblems) this.setState({\n        readingSectionCompleted: true\n      });\n      if (!testWritingProblems) this.setState({\n        writingSectionCompleted: true\n      });\n      if (!testMathCalcProblems) this.setState({\n        mathCalcSectionCompleted: true\n      });\n      if (!testMathNoCalcProblems) this.setState({\n        mathNoCalcSectionCompleted: true\n      }); // Update current section as completed\n\n      const {\n        tests,\n        test: {\n          test_id\n        }\n      } = this.props;\n      const currentTestSectionId = activeTest.test_section_id;\n      const testIds = tests.map(test => test.id);\n      const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n      const currentTestSections = tests[currentTestIndex].test_sections;\n      const testSectionIds = currentTestSections.map(testSection => testSection.id);\n      const currentTestSectionIndex = testSectionIds.findIndex(testSectionId => testSectionId === currentTestSectionId);\n      const currentTestSection = currentTestSections[currentTestSectionIndex];\n\n      switch (currentTestSection.name) {\n        case \"Math (Calculator)\":\n          this.setState({\n            mathCalcSectionCompleted: true\n          });\n          break;\n\n        case \"Writing\":\n          this.setState({\n            writingSectionCompleted: true\n          });\n          break;\n\n        case \"Math (No Calculator)\":\n          this.setState({\n            mathNoCalcSectionCompleted: true\n          });\n          break;\n\n        case \"Reading\":\n          this.setState({\n            readingSectionCompleted: true\n          });\n          break;\n\n        default:\n          this.setState({\n            readingSectionCompleted: true\n          });\n      } // @TODO bring back started check for a test that was just created\n      // if (activeTest.test_section_status === 'STARTED') {\n\n\n      const postBody = {\n        student_test_id: activeTest.student_test_id,\n        student_test_section_id: activeTest.id,\n        student_test_section_status: \"COMPLETED\"\n      };\n      await updateStudentTestSectionStatusApi(postBody);\n      const {\n        readingSectionCompleted,\n        writingSectionCompleted,\n        mathCalcSectionCompleted,\n        mathNoCalcSectionCompleted\n      } = this.state;\n\n      if (readingSectionCompleted && writingSectionCompleted && mathCalcSectionCompleted && mathNoCalcSectionCompleted) {\n        const postBody = {\n          student_test_id: activeTest.student_test_id,\n          status: \"COMPLETED\"\n        };\n        await updateStudentTestStatusApi(postBody);\n        toast.success(\"All test sections have been COMPLETED.\");\n        const {\n          onOpentTestScore\n        } = this.props;\n        onOpentTestScore(activeTest);\n      } else {\n        toast.success(\"Test section is now COMPLETED.\");\n      } // }\n      // }\n\n    });\n\n    _defineProperty(this, \"getExistingSections\", () => {\n      const {\n        testReadingProblems,\n        testWritingProblems,\n        testMathCalcProblems,\n        testMathNoCalcProblems\n      } = this.state;\n      return {\n        reading: !!testReadingProblems,\n        writing: !!testWritingProblems,\n        mathCalc: !!testMathCalcProblems,\n        mathNoCalc: !!testMathNoCalcProblems\n      };\n    });\n\n    this.state = {\n      previewTest: false,\n      startedTest: false,\n      testSections: [],\n      studentTestId: \"\",\n      testReadingProblems: null,\n      testWritingProblems: null,\n      testMathCalcProblems: null,\n      testMathNoCalcProblems: null,\n      updatedState: {\n        activeReadingSection: true,\n        showInCompleteTest: false,\n        activeWritingSection: false,\n        activeMathNoCalcSection: false,\n        activeMathWithCalcSection: false,\n        activeSection: \"\"\n      },\n      readingSectionCompleted: false,\n      writingSectionCompleted: false,\n      mathCalcSectionCompleted: false,\n      mathNoCalcSectionCompleted: false\n    };\n  }\n\n  render() {\n    const {\n      startedTest,\n      previewTest,\n      updatedState\n    } = this.state;\n    const {\n      onCloaseAnswerWrapper,\n      open,\n      test: {\n        test_description\n      },\n      test,\n      onAddStudentAnswerToTest\n    } = this.props;\n    if (!test) return;\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, open && __jsx(\"div\", {\n      className: \"starting\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"main-holder grey lighten-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, __jsx(NavBar, {\n      onCloaseAnswerWrapper: onCloaseAnswerWrapper,\n      onSetActivePage: this.onSetActivePage,\n      testDescription: test_description,\n      active: updatedState.activeSection,\n      existingSections: this.getExistingSections(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), __jsx(PreStartTestSection, {\n      open: previewTest && this.getCurrentTestProblems(),\n      onSetActivePage: this.onSetActivePage,\n      testSection: this.getCurrentTestProblems(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), __jsx(InCompleteTestSection, {\n      open: startedTest && this.getCurrentTestProblems(),\n      onAddStudentAnswerToTest: onAddStudentAnswerToTest,\n      testSection: this.getCurrentTestProblems(),\n      onStudentTestScore: onCloaseAnswerWrapper,\n      handleTestScore: this.handleTestScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), __jsx(Toast, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nEnterAnswerWrapper.propTypes = {\n  onCloaseAnswerWrapper: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  test: PropTypes.object,\n  onOpentTestScore: PropTypes.func.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired\n};\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeStudent: makeSelectActiveStudent(),\n  tests: makeSelectTests()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody))\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(EnterAnswerWrapper);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/index.js"],"names":["React","update","connect","compose","createStructuredSelector","PropTypes","NavBar","InCompleteTestSection","PreStartTestSection","toast","Toast","addStudentAnswerToTestApi","updateStudentTestSectionStatusApi","updateStudentTestStatusApi","makeSelectStudentSections","makeSelectActiveStudentToken","makeSelectActiveStudent","makeSelectTests","fetchStudentTestSections","EnterAnswerWrapper","Component","constructor","props","onFetchStudentTestSections","sections","studentToken","test","student_test_id","activeStudent","id","postBody","nextProps","length","onSetProblems","studentTestId","tests","test_id","testIds","map","currentTestIndex","findIndex","testId","currentTestSections","test_sections","section","testSectionIds","testSection","currentTestSectionIndex","testSectionId","test_section_id","currentTestSection","name","setState","testMathCalcProblems","testWritingProblems","testMathNoCalcProblems","testReadingProblems","testSections","currentSection","state","updatedState","activeSection","$set","currentProblems","getCurrentTestProblems","student_test_section_id","student_test_section_status","response","ok","success","previewTest","startedTest","test_problem_id","answer","activeTest","readingSectionCompleted","writingSectionCompleted","mathCalcSectionCompleted","mathNoCalcSectionCompleted","currentTestSectionId","status","onOpentTestScore","reading","writing","mathCalc","mathNoCalc","activeReadingSection","showInCompleteTest","activeWritingSection","activeMathNoCalcSection","activeMathWithCalcSection","render","onCloaseAnswerWrapper","open","test_description","onAddStudentAnswerToTest","onSetActivePage","getExistingSections","handleTestScore","propTypes","func","isRequired","bool","object","mapStateToProps","mapDispatchToProps","dispatch","withConnect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport update from 'immutability-helper';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {createStructuredSelector} from 'reselect';\nimport PropTypes from 'prop-types';\nimport NavBar from './common/NavBar';\nimport InCompleteTestSection from './components/InCompleteSection';\nimport PreStartTestSection from './components/StartSection';\nimport { toast } from 'react-toastify';\nimport Toast from '../../../../Toast';\nimport {\n  addStudentAnswerToTestApi,\n  updateStudentTestSectionStatusApi,\n  updateStudentTestStatusApi,\n} from '../../../index/api';\nimport {\n  makeSelectStudentSections,\n  makeSelectActiveStudentToken,\n  makeSelectActiveStudent,\n  makeSelectTests,\n} from '../../../index/selectors';\nimport {fetchStudentTestSections} from '../../../index/actions';\n\n\nclass EnterAnswerWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      previewTest: false,\n      startedTest: false,\n      testSections: [],\n      studentTestId: \"\",\n      testReadingProblems: null,\n      testWritingProblems: null,\n      testMathCalcProblems: null,\n      testMathNoCalcProblems: null,\n      updatedState: {\n        activeReadingSection: true,\n        showInCompleteTest: false,\n        activeWritingSection: false,\n        activeMathNoCalcSection: false,\n        activeMathWithCalcSection: false,\n        activeSection: \"\",\n      },\n      readingSectionCompleted: false,\n      writingSectionCompleted: false,\n      mathCalcSectionCompleted: false,\n      mathNoCalcSectionCompleted: false,\n    };\n  }\n\n  componentDidMount = () => {\n    const {\n      onFetchStudentTestSections,\n      sections,\n      studentToken,\n      test: {student_test_id},\n      activeStudent: {id},\n    } = this.props;\n    const postBody = {\n      id,\n      student_test_id,\n      studentToken,\n    };\n    onFetchStudentTestSections(postBody);\n  };\n\n  componentWillReceiveProps = (nextProps) => {\n    const { sections, student_test_id } = nextProps;\n    if (sections.length !== 0) {\n      this.onSetProblems(sections, student_test_id);\n    }\n  };\n\n  onSetProblems = (sections, studentTestId) => {\n    const {\n      tests,\n      test: { test_id },\n    } = this.props;\n    const testIds = tests.map((test) => test.id);\n    const currentTestIndex = testIds.findIndex((testId) => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    sections.map((section) => {\n      const testSectionIds = currentTestSections.map((testSection) => testSection.id);\n      const currentTestSectionIndex = testSectionIds.findIndex(\n        (testSectionId) => testSectionId === section.test_section_id,\n      );\n      const currentTestSection = currentTestSections[currentTestSectionIndex];\n      if (!currentTestSection) return;\n      switch (currentTestSection.name) {\n        case \"Math (Calculator)\":\n          this.setState({\n            testMathCalcProblems: section,\n          });\n          break;\n        case \"Writing\":\n          this.setState({\n            testWritingProblems: section,\n          });\n          break;\n        case \"Math (No Calculator)\":\n          this.setState({\n            testMathNoCalcProblems: section,\n          });\n          break;\n        case \"Reading\":\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n        default:\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n      }\n    });\n    this.setState({\n      testSections: sections,\n      studentTestId,\n    });\n  };\n\n  onSetActivePage = async (name) => {\n    const currentSection = this.state.updatedState.activeSection;\n    let updatedState;\n    if (name === 'showInCompleteTest') {\n      updatedState = update(this.state.updatedState, {\n        [name]: {$set: true},\n        [currentSection]: {$set: false},\n      });\n    } else {\n      updatedState = update(this.state.updatedState, {\n        [name]: {$set: true},\n        [currentSection]: {$set: false},\n        activeSection: {$set: name},\n      });\n    }\n    this.setState({ updatedState });\n    if (name === \"showInCompleteTest\") {\n      const currentProblems = this.getCurrentTestProblems();\n      const test_section_id = currentProblems.id;\n      const postBody = {\n        student_test_id: currentProblems.student_test_id,\n        student_test_section_id: test_section_id,\n        student_test_section_status: 'STARTED',\n      };\n      const response = await updateStudentTestSectionStatusApi(postBody);\n      if (response && response.ok === true) {\n        // Check for successful response before starting test or no answers will get recorded\n        toast.success(\"Test section is now STARTED.\");\n        this.setState({\n          previewTest: false,\n          startedTest: true,\n        });\n      }\n    } else {\n      this.setState({\n        previewTest: true,\n        startedTest: false,\n      });\n    }\n  };\n\n  onAddStudentAnswerToTest = async (test_problem_id, answer) => {\n    const {studentTestId} = this.state;\n    const postBody = {\n      student_test_id: studentTestId,\n      test_problem_id,\n      answer,\n    };\n    await addStudentAnswerToTestApi(postBody);\n  };\n\n  getCurrentTestProblems = () => {\n    const activeSection = this.state.updatedState.activeSection;\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    switch (activeSection) {\n      case \"activeReadingSection\":\n        return testReadingProblems;\n      case \"activeWritingSection\":\n        return testWritingProblems;\n      case \"activeMathWithCalcSection\":\n        return testMathCalcProblems;\n      case \"activeMathNoCalcSection\":\n        return testMathNoCalcProblems;\n      default:\n        return '';\n    }\n  };\n\n  handleTestScore = async (activeTest) => {\n    // Check for non-existing sections and set them to completed\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    if (!testReadingProblems) this.setState({ readingSectionCompleted: true });\n    if (!testWritingProblems) this.setState({ writingSectionCompleted: true });\n    if (!testMathCalcProblems) this.setState({ mathCalcSectionCompleted: true });\n    if (!testMathNoCalcProblems) this.setState({ mathNoCalcSectionCompleted: true });\n\n    // Update current section as completed\n    const {\n      tests,\n      test: { test_id },\n    } = this.props;\n    const currentTestSectionId = activeTest.test_section_id;\n    const testIds = tests.map((test) => test.id);\n    const currentTestIndex = testIds.findIndex((testId) => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    const testSectionIds = currentTestSections.map((testSection) => testSection.id);\n    const currentTestSectionIndex = testSectionIds.findIndex(\n      (testSectionId) => testSectionId === currentTestSectionId,\n    );\n    const currentTestSection = currentTestSections[currentTestSectionIndex];\n    switch (currentTestSection.name) {\n      case \"Math (Calculator)\":\n        this.setState({\n          mathCalcSectionCompleted: true,\n        });\n        break;\n      case \"Writing\":\n        this.setState({\n          writingSectionCompleted: true,\n        });\n        break;\n      case \"Math (No Calculator)\":\n        this.setState({\n          mathNoCalcSectionCompleted: true,\n        });\n        break;\n      case \"Reading\":\n        this.setState({\n          readingSectionCompleted: true,\n        });\n        break;\n      default:\n        this.setState({\n          readingSectionCompleted: true,\n        });\n    }\n    // @TODO bring back started check for a test that was just created\n    // if (activeTest.test_section_status === 'STARTED') {\n    const postBody = {\n      student_test_id: activeTest.student_test_id,\n      student_test_section_id: activeTest.id,\n      student_test_section_status: \"COMPLETED\",\n    };\n    await updateStudentTestSectionStatusApi(postBody);\n    const {\n      readingSectionCompleted,\n      writingSectionCompleted,\n      mathCalcSectionCompleted,\n      mathNoCalcSectionCompleted,\n    } = this.state;\n    if (\n      readingSectionCompleted &&\n        writingSectionCompleted &&\n        mathCalcSectionCompleted &&\n        mathNoCalcSectionCompleted\n    ) {\n      const postBody = {\n        student_test_id: activeTest.student_test_id,\n        status: \"COMPLETED\",\n      };\n      await updateStudentTestStatusApi(postBody);\n      toast.success(\"All test sections have been COMPLETED.\");\n      const { onOpentTestScore } = this.props;\n      onOpentTestScore(activeTest);\n    } else {\n      toast.success(\"Test section is now COMPLETED.\");\n    }\n    // }\n    // }\n  };\n\n  getExistingSections = () => {\n    const { testReadingProblems, testWritingProblems, testMathCalcProblems, testMathNoCalcProblems } = this.state;\n    return {\n      reading: !!testReadingProblems,\n      writing: !!testWritingProblems,\n      mathCalc: !!testMathCalcProblems,\n      mathNoCalc: !!testMathNoCalcProblems,\n    };\n  }\n\n  render() {\n    const {\n      startedTest,\n      previewTest,\n      updatedState,\n    } = this.state;\n    const {\n      onCloaseAnswerWrapper,\n      open,\n      test: {test_description},\n      test,\n      onAddStudentAnswerToTest,\n    } = this.props;\n    if (!test) return;\n    return (\n      <React.Fragment>\n        {open && (\n          <div className=\"starting\">\n            <div className=\"main-holder grey lighten-5\">\n              <NavBar\n                onCloaseAnswerWrapper={onCloaseAnswerWrapper}\n                onSetActivePage={this.onSetActivePage}\n                testDescription={test_description}\n                active={updatedState.activeSection}\n                existingSections={this.getExistingSections()}\n              />\n              <PreStartTestSection\n                open={previewTest && this.getCurrentTestProblems()}\n                onSetActivePage={this.onSetActivePage}\n                testSection={this.getCurrentTestProblems()}\n              />\n              <InCompleteTestSection\n                open={startedTest && this.getCurrentTestProblems()}\n                onAddStudentAnswerToTest={onAddStudentAnswerToTest}\n                testSection={this.getCurrentTestProblems()}\n                onStudentTestScore={onCloaseAnswerWrapper}\n                handleTestScore={this.handleTestScore}\n              />\n              <Toast />\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nEnterAnswerWrapper.propTypes = {\n  onCloaseAnswerWrapper: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  test: PropTypes.object,\n  onOpentTestScore: PropTypes.func.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeStudent: makeSelectActiveStudent(),\n  tests: makeSelectTests(),\n});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n  };\n}\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(EnterAnswerWrapper);\n"]},"metadata":{},"sourceType":"module"}