{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable array-callback-return */\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport Modal from '../../../../../Modal';\nimport NewLocationModal from '../../../../../Location/components/NewLocationModal';\nimport LocationDetailsModal from '../../../../../Location/components/LocationDetailsModal';\nimport LocationRow from './components/LocationRow';\nimport { saveNewSuccess as saveLocationSuccess, saveChangesSuccess, saveNewError as saveLocationError } from '../../../../../utils/fieldValidation';\nimport sampleLocations from '../../../../../Location/utils/sampleLocationList';\n\nconst idGenerator = () => Math.floor(Math.random() * 100 + 1);\n\nconst validationFieldMap = {\n  locationName: 'Location Name',\n  locationNickname: 'Location Nickname',\n  locationEmail: 'Location Email',\n  automatedEmailOrigin: 'Automated Email Origin',\n  automatedEmailSalutation: 'Automated Email Salutation',\n  locationUrl: 'Location Url',\n  headerColor1: 'Header Color 1',\n  headerColor2: 'Header Color 2',\n  headerLogoBackgroundColor: 'Header Logo Background Color',\n  headerLogoBackgroundAlpha: 'Header Logo Background Alpha',\n  horizontalLogoVariation: 'Horizonal Logo Variation',\n  squareLogoVariation: 'Square Logo Variation',\n  backgroundImage: 'Background Image',\n  backgroundBlur: 'Background Blur',\n  backgroundOverlayAlpha: 'Background Overlay  Alpha'\n}; // TODO: mock out update/delete action to backend\n// TODO: Will this delete just remove the location from the owner or delete the location altogethe?\n\nclass Locations extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetLocationValidation\", locationValidation => this.setState({\n      locationValidation\n    }));\n\n    _defineProperty(this, \"onSaveNewLocation\", ({\n      locationContactInfo,\n      locationEmailSettings,\n      locationBranding,\n      owner\n    }) => {\n      this.onCloseNewLocationModal();\n      const newLocation = {\n        id: idGenerator(),\n        owner,\n        locationContactInfo,\n        locationEmailSettings,\n        locationBranding,\n        locationBasicInfo: {\n          activeStudents: 0,\n          pastStudents: 0,\n          unactivatedStudents: 0,\n          averageImprovement: 0,\n          averageInitialScore: 0,\n          averageFinalScore: 0,\n          studentsAchievingTargetScore: 0\n        }\n      };\n      const locations = update(this.state.locations, {\n        $push: [newLocation]\n      });\n      this.setState({\n        locations\n      });\n      saveLocationSuccess('location');\n    });\n\n    _defineProperty(this, \"onSaveLocationChanges\", ({\n      id,\n      locationContactInfo,\n      locationEmailSettings,\n      locationBranding\n    }) => {\n      const {\n        locations: originalLocations\n      } = this.state;\n      const {\n        onCloseDropdown\n      } = this.props;\n      const locationToUpdate = originalLocations.filter(location => location.id === id)[0];\n      const updatedLocation = update(locationToUpdate, {\n        locationContactInfo: {\n          $set: locationContactInfo\n        },\n        locationEmailSettings: {\n          $set: locationEmailSettings\n        },\n        locationBranding: {\n          $set: locationBranding\n        }\n      });\n      const updatedLocationIndex = originalLocations.indexOf(locationToUpdate);\n      const locations = update(originalLocations, {\n        $splice: [[updatedLocationIndex, 1, updatedLocation]]\n      });\n      saveChangesSuccess();\n      this.setState({\n        locations\n      });\n      onCloseDropdown();\n      return this.onCloseEditLocationModal();\n    });\n\n    _defineProperty(this, \"onConfirmDeleteLocation\", () => {\n      const {\n        pendingLocationDelete,\n        onCloseDeleteLocationModal\n      } = this.props;\n      this.onDeleteLocation(pendingLocationDelete);\n      onCloseDeleteLocationModal();\n    });\n\n    _defineProperty(this, \"onDeleteLocation\", deletedLocation => {\n      const updatedState = update(this.state, {\n        locations: unfilteredLocations => unfilteredLocations.filter(location => location.id !== deletedLocation.id)\n      });\n      this.setState({\n        locations: updatedState.locations\n      });\n      this.props.onCloseDropdown();\n    });\n\n    _defineProperty(this, \"handleDropdownClick\", (event, index) => {\n      const {\n        dropdownIsOpen,\n        onCloseDropdown,\n        onSetDropdown\n      } = this.props;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    _defineProperty(this, \"mapUserLocations\", () => this.state.locations.map((location, index) => __jsx(LocationRow, {\n      key: index,\n      index: index,\n      location: location,\n      dropdownIndex: this.props.dropdownIndex,\n      dropdownIsOpen: this.props.dropdownIsOpen,\n      handleDropdownClick: this.handleDropdownClick,\n      onOpenEditLocationModal: () => this.props.onOpenEditLocationModal(location),\n      onOpenDeleteModal: () => this.props.onOpenDeleteLocationModal(location)\n    })));\n\n    this.state = {\n      locations: sampleLocations,\n      dropdownIndex: null,\n      pendingLocationDelete: {},\n      locationValidation: {}\n    };\n  }\n\n  render() {\n    const {\n      deleteLocationModalOpen,\n      activeLocation,\n      newLocationModalOpen,\n      editLocationModalOpen,\n      onOpenNewLocationModal,\n      onCloseNewLocationModal,\n      onCloseEditLocationModal,\n      onCloseDeleteLocationModal\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Modal, {\n      open: deleteLocationModalOpen,\n      onConfirm: this.onConfirmDeleteLocation,\n      onClose: onCloseDeleteLocationModal,\n      header: \"Are You Sure?\",\n      body: \"Deleting this location will be permanent\"\n    }), __jsx(NewLocationModal, {\n      fromInstructorPage: true,\n      open: newLocationModalOpen,\n      onClose: onCloseNewLocationModal,\n      onSaveNewLocation: this.onSaveNewLocation,\n      onSaveLocationError: () => saveLocationError(this.state.locationValidation, validationFieldMap),\n      onSetLocationValidation: this.onSetLocationValidation\n    }), __jsx(LocationDetailsModal, {\n      location: activeLocation,\n      open: editLocationModalOpen,\n      onClose: onCloseEditLocationModal,\n      onSaveLocationError: () => saveLocationError(this.state.locationValidation, validationFieldMap),\n      onSetLocationValidation: this.onSetLocationValidation,\n      onSaveLocationChanges: this.onSaveLocationChanges\n    }), __jsx(\"div\", {\n      className: \"card-block\"\n    }, __jsx(\"h3\", null, \"Location(s)\"), this.mapUserLocations(), __jsx(\"div\", {\n      className: \"add-box\"\n    }, __jsx(\"div\", {\n      className: \"add-box-holder\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onOpenNewLocationModal,\n      className: \"btn-floating waves-effect waves-light green lighten-1\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"))))));\n  }\n\n}\n\nexport default Locations;","map":null,"metadata":{},"sourceType":"module"}