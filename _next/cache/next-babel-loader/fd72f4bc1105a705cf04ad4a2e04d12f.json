{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/pages/students.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* jshint esversion: 6 */\nimport React, { Component } from \"react\";\nimport update from \"immutability-helper\";\nimport Router from \"next/router\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { createStructuredSelector } from \"reselect\";\nimport { fetchStudents, deleteStudent, setStudents, setActiveStudent } from \"../components/Student/index/actions\";\nimport { createStudentApi } from \"../components/Student/index/api\";\nimport { makeSelectStudents } from \"../components/Student/index/selectors\";\nimport StudentCard from \"../components/Student/components/StudentCard\";\nimport FilterSection from \"../components/Student/ListPage/Components/FilterSection\";\nimport StudentModal from \"../components/Student/components/StudentModal\";\nimport IndividualStudentPage from \"../components/Student/IndividualStudentPage\";\nimport LocationModal from \"../components/Location/components/LocationModal\";\nimport { studentFirstNameAscending, studentFirstNameDescending, studentLastNameAscending, studentLastNameDescending } from \"../components/utils/sortFunctions\";\nimport { loggedIn, logIn } from \"../utils/AuthService\";\nimport { fetchAllLocationns } from '../components/Location/index/actions';\nimport { makeSelectLocations } from \"../components/Location/index/selectors\";\nimport { makeSelectCurrentUser } from \"../components/User/index/selectors\"; // eslint-disable-next-line prefer-template\n\nconst idGenerator = () => `${subIdGenerator() + subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}${subIdGenerator()}${subIdGenerator()}`;\n\nconst subIdGenerator = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      if (!loggedIn()) {\n        Router.push(\"/login\");\n      } else {\n        const {\n          onFetchStudents,\n          students,\n          locations,\n          onFetchAllLocationns\n        } = this.props;\n\n        if (students.length === 0) {\n          onFetchStudents();\n        }\n      }\n    });\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      const {\n        onFetchAllLocationns\n      } = this.props;\n      const {\n        locations\n      } = nextProps;\n\n      if (!locations && nextProps.currentUser) {\n        const {\n          currentUser: {\n            id\n          }\n        } = nextProps;\n        onFetchAllLocationns(id);\n      }\n    });\n\n    _defineProperty(this, \"onOpenStudentModal\", () => this.setState({\n      studentModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseStudentModal\", () => this.setState({\n      studentModalOpen: false\n    }));\n\n    _defineProperty(this, \"onOpenLocationModal\", () => this.setState({\n      locationModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseLocationModal\", () => this.setState({\n      locationModalOpen: false\n    }));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      filterName: \"\"\n    }));\n\n    _defineProperty(this, \"onSetFilteredLocationState\", location => this.setState({\n      location\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredLocationState\", () => this.setState({\n      location: \"\"\n    }));\n\n    _defineProperty(this, \"onSaveNewStudent\", async () => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const {\n        onFetchStudents\n      } = this.props;\n      const {\n        firstName,\n        lastName\n      } = previousStudentState.studentInformation; // dispatch add student action\n\n      if (!firstName || !lastName) return this.setState({\n        hasRequiredFields: false\n      });\n      const {\n        firstName: first_name,\n        lastName: last_name\n      } = previousStudentState.studentInformation;\n      const {\n        email\n      } = previousStudentState.emailAddress;\n      const {\n        state,\n        addressLine,\n        city,\n        phone,\n        zipCode: zip\n      } = previousStudentState.contactInformation;\n      const {\n        locations\n      } = previousStudentState.location;\n      const formattedLocations = locations.map(location => location.id);\n      const studentPayload = {\n        first_name,\n        last_name,\n        email,\n        state,\n        locations: formattedLocations,\n        phone,\n        address: `${addressLine}`,\n        city,\n        zip\n      };\n      const {\n        user_id: id\n      } = await createStudentApi(studentPayload);\n      const {\n        studentInformation,\n        contactInformation,\n        emailAddress,\n        location\n      } = previousStudentState;\n      const newTestStudent = {\n        id,\n        active: false,\n        studentInformation,\n        contactInformation,\n        emailAddress,\n        location,\n        stats: {\n          complete: 0,\n          overdue: 0,\n          practice_tests: 0,\n          sessions_complete: 0,\n          total_sessions: 0\n        },\n        tutor: \"\",\n        testScores: {\n          initialScore: \"0\",\n          currentScore: \"0\"\n        },\n        courseContext: {\n          courseStartDateOption: \"secondOption\",\n          courseStartDate: \"\",\n          courseEndDateOption: \"secondOption\",\n          courseEndDate: \"\",\n          targetTestDate: \"12/12/2019\",\n          targetScore: \"1400\",\n          highSchool: \"Everglades High\",\n          graduationYear: \"2018\"\n        },\n        courseProgress: {\n          startDate: \"6/03/18\",\n          testDate: \"10/14/18\",\n          progress: \"77\",\n          improvement: \"82\",\n          lessons: \"73\",\n          instruction: \"68\",\n          practiceTests: \"47\"\n        },\n        overdueWork: {\n          lessons: \"12\",\n          worksheets: \"3\",\n          quizzes: \"1\",\n          practiceTests: \"5\"\n        },\n        summary: {\n          questionsAnswered: \"791\",\n          videoWatched: \"416\",\n          notesTaken: \"52\",\n          totalTimeLoggedIn: \"220\",\n          lastLogIn: \"3:12\",\n          loginTimeCode: \"pm\",\n          onTimePercentage: \"77\"\n        },\n        testScores: {\n          initialScore: \"1040\",\n          currentScore: \"1300\",\n          compositeScore: {\n            reading: \"83\",\n            writing: \"31\",\n            math: \"105\",\n            composite: \"218\"\n          },\n          subjectScores: {\n            reading: \"58\",\n            writing: \"44\",\n            math: \"91\",\n            composite: \"195\"\n          }\n        },\n        strengthsAndWeaknesses: {\n          reading: {\n            correctAnswers: \"32\",\n            totalAnswers: \"52\"\n          },\n          writing: {\n            correctAnswers: \"35\",\n            totalAnswers: \"52\"\n          },\n          math: {\n            correctAnswers: \"37\",\n            totalAnswers: \"52\"\n          }\n        }\n      };\n      const newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: \"\",\n            lastName: \"\"\n          },\n          contactInformation: {\n            phone: \"\",\n            addressLine: \"\",\n            city: \"\",\n            state: \"\",\n            zipCode: \"\"\n          },\n          emailAddress: {\n            email: \"\"\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n      const updatedStudents = update(this.state.students, {\n        $push: [newTestStudent]\n      });\n      this.setState({\n        students: updatedStudents\n      }); // const { onSetStudents } = this.props;\n      // onSetStudents(updatedStudents);\n\n      this.onCloseStudentModal();\n    });\n\n    _defineProperty(this, \"onDeleteNewStudent\", () => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: \"\",\n            lastName: \"\"\n          },\n          contactInformation: {\n            phone: \"\",\n            addressLine: \"\",\n            city: \"\",\n            state: \"\",\n            zipCode: \"\"\n          },\n          emailAddress: {\n            email: \"\"\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n    });\n\n    _defineProperty(this, \"onRemoveLocation\", index => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const {\n        location: {\n          locations\n        }\n      } = this.state.newStudent;\n      const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n      const newStudent = update(previousStudentState, {\n        location: {\n          $set: {\n            locations: newLocationsArray\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n    });\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        students,\n        nameFilter\n      } = this.state;\n      return students.reduce((finalArr, currentStudent) => {\n        const {\n          studentInformation: {\n            firstName,\n            lastName\n          }\n        } = currentStudent;\n        const studentString = `${firstName}${lastName}`.replace(/\\s/g, \"\").toLowerCase();\n\n        if (studentString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n          finalArr.push(currentStudent);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onHandleStudentCard\", async index => {\n      const {\n        students\n      } = this.state;\n      const {\n        onSetActiveStudent\n      } = this.props;\n      onSetActiveStudent(students[index]);\n      this.setState({\n        selectedStudent: students[index]\n      });\n    });\n\n    _defineProperty(this, \"onRedirectToStudentPage\", event => {\n      event.preventDefault();\n      this.setState({\n        selectedStudent: null\n      });\n    });\n\n    _defineProperty(this, \"onDeleteStudent\", index => {\n      const {\n        onDeleteStudent\n      } = this.props;\n      const {\n        students\n      } = this.state; // Dispatch deleteStudent\n      // eslint-disable-next-line camelcase\n\n      const student_id = students[index].id;\n      onDeleteStudent(student_id);\n      const newStudentArray = this.arrayItemRemover(students, students[index]);\n      this.setState({\n        students: newStudentArray\n      });\n      this.onCloseDropdown();\n    });\n\n    _defineProperty(this, \"onCloneStudent\", index => {\n      const {\n        students\n      } = this.state;\n      const newStudent = update(students[index], {\n        id: {\n          $set: idGenerator()\n        }\n      });\n      this.setState(prevState => {\n        prevState.students.push(newStudent);\n        return {\n          students: prevState.students\n        };\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", (event, name, section) => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const value = event.target ? event.target.value : event;\n      const updatedStudent = update(previousStudentState, {\n        [section]: {\n          $merge: {\n            [name]: value\n          }\n        }\n      });\n      this.setState({\n        newStudent: updatedStudent\n      });\n    });\n\n    _defineProperty(this, \"onSaveStudentChanges\", updatedStudent => {\n      const {\n        students: originalStudents\n      } = this.state;\n      const {\n        active,\n        studentInformation,\n        contactInformation,\n        emailAddress,\n        location\n      } = updatedStudent;\n      const studentToUpdate = originalStudents.filter(student => student.id === updatedStudent.id)[0];\n      const updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n      const students = update(originalStudents, {\n        [updatedStudentIndex]: {\n          $merge: {\n            active,\n            studentInformation,\n            contactInformation,\n            emailAddress,\n            location\n          }\n        }\n      });\n      this.setState({\n        students\n      });\n      const {\n        onSetStudents\n      } = this.props;\n      onSetStudents(students);\n    });\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIsOpen: true,\n      dropdownIndex\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onSortStudents\", students => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case \"lastNameDescending\":\n          return students.sort(studentLastNameDescending);\n\n        case \"lastNameAscending\":\n          return students.sort(studentLastNameAscending);\n\n        case \"firstNameDescending\":\n          return students.sort(studentFirstNameDescending);\n\n        case \"firstNameAscending\":\n          return students.sort(studentFirstNameAscending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"getMappableStudents\", () => {\n      const {\n        sort,\n        students\n      } = this.state;\n      const mappableStudents = students;\n\n      if (sort) {\n        return this.onSortStudents(mappableStudents);\n      }\n\n      return mappableStudents;\n    });\n\n    _defineProperty(this, \"arrayItemRemover\", (array, value) => array.filter(student => student !== value));\n\n    _defineProperty(this, \"mapStudents\", () => this.getMappableStudents().map((student, index) => __jsx(StudentCard, {\n      student: student,\n      index: index,\n      id: student.id,\n      key: student.id,\n      dropdownIsOpen: this.state.dropdownIsOpen,\n      dropdownIndex: this.state.dropdownIndex,\n      onSetDropdown: this.onSetDropdown,\n      onCloseDropdown: this.onCloseDropdown,\n      onHandleStudentCard: () => this.onHandleStudentCard(index),\n      onDeleteStudent: () => this.onDeleteStudent(index),\n      onCloneStudent: () => this.onCloneStudent(index, student.id),\n      onSaveStudentChanges: this.onSaveStudentChanges,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    })));\n\n    _defineProperty(this, \"updateStudentStatus\", () => this.setState({\n      selectedStudent: _objectSpread({}, this.state.selectedStudent, {\n        active: true\n      })\n    }));\n\n    this.state = {\n      selectedStudent: null,\n      students: this.props.students,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      location: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\"\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\"\n        },\n        emailAddress: {\n          email: \"\"\n        },\n        location: {\n          locations: []\n        }\n      },\n      hasRequiredFields: true\n    };\n  }\n\n  componentDidUpdate() {\n    const {\n      students: studentState\n    } = this.state;\n    const {\n      students\n    } = this.props;\n\n    if (studentState.length === 0 && students.length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        students\n      });\n    }\n  }\n\n  render() {\n    const {\n      studentModalOpen,\n      selectedStudent\n    } = this.state;\n    return __jsx(\"main\", {\n      id: \"main\",\n      role: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"main-holder grey lighten-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, __jsx(StickyContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, !selectedStudent && __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, __jsx(Sticky, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, ({\n      style\n    }) => __jsx(\"div\", {\n      className: \"title-row card-panel\",\n      style: _objectSpread({}, style, {\n        zIndex: 1999\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"mobile-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, \"menu\"))), __jsx(\"h2\", {\n      className: \"h1 white-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"heading-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"icon-student\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }), __jsx(\"span\", {\n      className: \"heading-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, \"Students\"))))), __jsx(FilterSection, {\n      onSetSort: this.onSetSort,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredLocationState: this.onSetFilteredLocationState,\n      onUnsetFilteredLocationState: this.onUnsetFilteredLocationState,\n      handleFilterClick: this.handleFilterClick,\n      onFilterByName: this.onFilterByName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"content-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"row d-flex-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, this.mapStudents())), __jsx(\"a\", {\n      href: \"#\",\n      className: \"waves-effect waves-teal btn add-btn modal-trigger\",\n      onClick: this.onOpenStudentModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, \"add\"), \"New Student\"), __jsx(StudentModal, {\n      open: studentModalOpen,\n      onClose: this.onCloseStudentModal,\n      handleChange: this.handleChange,\n      state: this.state.newStudent,\n      onSave: this.onSaveNewStudent,\n      onOpenLocationModal: this.onOpenLocationModal,\n      onRemoveLocation: this.onRemoveLocation,\n      onDeleteNewStudent: this.onDeleteNewStudent,\n      hasRequiredFields: this.state.hasRequiredFields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }), __jsx(LocationModal, {\n      open: this.state.locationModalOpen,\n      onClose: this.onCloseLocationModal,\n      handleLocationsChange: selectedLocations => this.handleChange(selectedLocations, \"locations\", \"location\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    })), selectedStudent && __jsx(IndividualStudentPage, {\n      student: selectedStudent,\n      onRedirectToStudentPage: this.onRedirectToStudentPage,\n      updateStudentStatus: this.updateStudentStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nStudents.propTypes = {\n  students: PropTypes.array.isRequired,\n  onFetchStudents: PropTypes.func.isRequired,\n  onCreateStudent: PropTypes.func.isRequired,\n  onDeleteStudent: PropTypes.func.isRequired,\n  onSetStudents: PropTypes.func.isRequired,\n  locations: PropTypes.array.isRequired\n};\nconst mapStateToProps = createStructuredSelector({\n  students: makeSelectStudents(),\n  locations: makeSelectLocations(),\n  currentUser: makeSelectCurrentUser()\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteStudent: id => dispatch(deleteStudent(id)),\n  onFetchStudents: () => dispatch(fetchStudents()),\n  onSetStudents: students => dispatch(setStudents(students)),\n  onSetActiveStudent: student => dispatch(setActiveStudent(student)),\n  onFetchAllLocationns: user_id => dispatch(fetchAllLocationns(user_id))\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(Students);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/pages/students.js"],"names":["React","Component","update","Router","StickyContainer","Sticky","compose","connect","PropTypes","createStructuredSelector","fetchStudents","deleteStudent","setStudents","setActiveStudent","createStudentApi","makeSelectStudents","StudentCard","FilterSection","StudentModal","IndividualStudentPage","LocationModal","studentFirstNameAscending","studentFirstNameDescending","studentLastNameAscending","studentLastNameDescending","loggedIn","logIn","fetchAllLocationns","makeSelectLocations","makeSelectCurrentUser","idGenerator","subIdGenerator","Math","floor","random","toString","substring","Students","constructor","props","push","onFetchStudents","students","locations","onFetchAllLocationns","length","nextProps","currentUser","id","setState","studentModalOpen","locationModalOpen","sort","filterName","location","newStudent","previousStudentState","state","firstName","lastName","studentInformation","hasRequiredFields","first_name","last_name","email","emailAddress","addressLine","city","phone","zipCode","zip","contactInformation","formattedLocations","map","studentPayload","address","user_id","newTestStudent","active","stats","complete","overdue","practice_tests","sessions_complete","total_sessions","tutor","testScores","initialScore","currentScore","courseContext","courseStartDateOption","courseStartDate","courseEndDateOption","courseEndDate","targetTestDate","targetScore","highSchool","graduationYear","courseProgress","startDate","testDate","progress","improvement","lessons","instruction","practiceTests","overdueWork","worksheets","quizzes","summary","questionsAnswered","videoWatched","notesTaken","totalTimeLoggedIn","lastLogIn","loginTimeCode","onTimePercentage","compositeScore","reading","writing","math","composite","subjectScores","strengthsAndWeaknesses","correctAnswers","totalAnswers","$set","updatedStudents","$push","onCloseStudentModal","index","newLocationsArray","arrayItemRemover","nameFilter","reduce","finalArr","currentStudent","studentString","replace","toLowerCase","indexOf","onSetActiveStudent","selectedStudent","event","preventDefault","onDeleteStudent","student_id","newStudentArray","onCloseDropdown","prevState","name","section","value","target","updatedStudent","$merge","originalStudents","studentToUpdate","filter","student","updatedStudentIndex","onSetStudents","dropdownIndex","dropdownIsOpen","mappableStudents","onSortStudents","array","getMappableStudents","onSetDropdown","onHandleStudentCard","onCloneStudent","onSaveStudentChanges","componentDidUpdate","studentState","render","style","zIndex","onSetSort","onSetFilteredState","onUnsetFilteredState","onSetFilteredLocationState","onUnsetFilteredLocationState","handleFilterClick","onFilterByName","mapStudents","onOpenStudentModal","handleChange","onSaveNewStudent","onOpenLocationModal","onRemoveLocation","onDeleteNewStudent","onCloseLocationModal","selectedLocations","onRedirectToStudentPage","updateStudentStatus","propTypes","isRequired","func","onCreateStudent","mapStateToProps","mapDispatchToProps","dispatch","withConnect"],"mappings":"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","sourcesContent":["/* jshint esversion: 6 */\nimport React, { Component } from \"react\";\nimport update from \"immutability-helper\";\nimport Router from \"next/router\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { createStructuredSelector } from \"reselect\";\nimport {\n  fetchStudents,\n  deleteStudent,\n  setStudents,\n  setActiveStudent,\n} from \"../components/Student/index/actions\";\n\n\nimport { createStudentApi } from \"../components/Student/index/api\";\n\nimport { makeSelectStudents } from \"../components/Student/index/selectors\";\nimport StudentCard from \"../components/Student/components/StudentCard\";\nimport FilterSection from \"../components/Student/ListPage/Components/FilterSection\";\nimport StudentModal from \"../components/Student/components/StudentModal\";\nimport IndividualStudentPage from \"../components/Student/IndividualStudentPage\";\nimport LocationModal from \"../components/Location/components/LocationModal\";\n\nimport {\n  studentFirstNameAscending,\n  studentFirstNameDescending,\n  studentLastNameAscending,\n  studentLastNameDescending,\n} from \"../components/utils/sortFunctions\";\nimport { loggedIn, logIn } from \"../utils/AuthService\";\n\n\nimport {\n  fetchAllLocationns,\n} from '../components/Location/index/actions';\n\nimport { makeSelectLocations } from \"../components/Location/index/selectors\";\nimport { makeSelectCurrentUser } from \"../components/User/index/selectors\";\n\n// eslint-disable-next-line prefer-template\nconst idGenerator = () =>\n  `${subIdGenerator() +\n  subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}${subIdGenerator()}${subIdGenerator()}`;\nconst subIdGenerator = () =>\n  Math.floor((1 + Math.random()) * 0x10000)\n    .toString(16)\n    .substring(1);\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedStudent: null,\n      students: this.props.students,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      location: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\",\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\",\n        },\n        emailAddress: {\n          email: \"\",\n        },\n        location: {\n          locations: [],\n        },\n      },\n      hasRequiredFields: true,\n    };\n  }\n\n  componentDidMount = () => {\n    if (!loggedIn()) {\n      Router.push(\"/login\");\n    } else {\n      const { onFetchStudents, students, locations, onFetchAllLocationns } = this.props;\n      if (students.length === 0) {\n        onFetchStudents();\n      }\n    }\n  };\n\n  componentWillReceiveProps = (nextProps) => {\n    const { onFetchAllLocationns } = this.props;\n    const { locations } = nextProps;\n    if (!locations && nextProps.currentUser) {\n      const { currentUser: { id } } = nextProps;\n      onFetchAllLocationns(id);\n    }\n  }\n\n  componentDidUpdate() {\n    const { students: studentState } = this.state;\n    const { students } = this.props;\n    if (studentState.length === 0 && students.length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ students });\n    }\n  }\n\n  onOpenStudentModal = () => this.setState({ studentModalOpen: true });\n  onCloseStudentModal = () => this.setState({ studentModalOpen: false });\n  onOpenLocationModal = () => this.setState({ locationModalOpen: true });\n  onCloseLocationModal = () => this.setState({ locationModalOpen: false });\n\n  onSetSort = sort => this.setState({ sort });\n  onSetFilteredState = filterName => this.setState({ filterName });\n  onUnsetFilteredState = () => this.setState({ filterName: \"\" });\n\n  onSetFilteredLocationState = location => this.setState({ location });\n  onUnsetFilteredLocationState = () => this.setState({ location: \"\" });\n\n  // TODO add a toas or some notification that a student has been saved\n  onSaveNewStudent = async () => {\n    const { newStudent: previousStudentState } = this.state;\n    const { onFetchStudents } = this.props;\n    const { firstName, lastName } = previousStudentState.studentInformation;\n    // dispatch add student action\n    if (!firstName || !lastName) return this.setState({ hasRequiredFields: false });\n    const { firstName: first_name, lastName: last_name } = previousStudentState.studentInformation;\n    const { email } = previousStudentState.emailAddress;\n    const {\n      state,\n      addressLine,\n      city,\n      phone,\n      zipCode: zip,\n    } = previousStudentState.contactInformation;\n    const { locations } = previousStudentState.location;\n    const formattedLocations = locations.map(location => location.id);\n    const studentPayload = {\n      first_name,\n      last_name,\n      email,\n      state,\n      locations: formattedLocations,\n      phone,\n      address: `${addressLine}`,\n      city,\n      zip,\n    };\n    const { user_id: id } = await createStudentApi(studentPayload);\n    const {\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n    } = previousStudentState;\n    const newTestStudent = {\n      id,\n      active: false,\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n      stats: {\n        complete: 0,\n        overdue: 0,\n        practice_tests: 0,\n        sessions_complete: 0,\n        total_sessions: 0,\n      },\n      tutor: \"\",\n      testScores: {\n        initialScore: \"0\",\n        currentScore: \"0\",\n      },\n      courseContext: {\n        courseStartDateOption: \"secondOption\",\n        courseStartDate: \"\",\n        courseEndDateOption: \"secondOption\",\n        courseEndDate: \"\",\n        targetTestDate: \"12/12/2019\",\n        targetScore: \"1400\",\n        highSchool: \"Everglades High\",\n        graduationYear: \"2018\",\n      },\n      courseProgress: {\n        startDate: \"6/03/18\",\n        testDate: \"10/14/18\",\n        progress: \"77\",\n        improvement: \"82\",\n        lessons: \"73\",\n        instruction: \"68\",\n        practiceTests: \"47\",\n      },\n      overdueWork: {\n        lessons: \"12\",\n        worksheets: \"3\",\n        quizzes: \"1\",\n        practiceTests: \"5\",\n      },\n      summary: {\n        questionsAnswered: \"791\",\n        videoWatched: \"416\",\n        notesTaken: \"52\",\n        totalTimeLoggedIn: \"220\",\n        lastLogIn: \"3:12\",\n        loginTimeCode: \"pm\",\n        onTimePercentage: \"77\",\n      },\n      testScores: {\n        initialScore: \"1040\",\n        currentScore: \"1300\",\n        compositeScore: {\n          reading: \"83\",\n          writing: \"31\",\n          math: \"105\",\n          composite: \"218\",\n        },\n        subjectScores: {\n          reading: \"58\",\n          writing: \"44\",\n          math: \"91\",\n          composite: \"195\",\n        },\n      },\n      strengthsAndWeaknesses: {\n        reading: {\n          correctAnswers: \"32\",\n          totalAnswers: \"52\",\n        },\n        writing: {\n          correctAnswers: \"35\",\n          totalAnswers: \"52\",\n        },\n        math: {\n          correctAnswers: \"37\",\n          totalAnswers: \"52\",\n        },\n      },\n    };\n    const newStudent = update(previousStudentState, {\n      $set: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\",\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\",\n        },\n        emailAddress: {\n          email: \"\",\n        },\n        location: {\n          locations: [],\n        },\n\n\n      },\n    });\n    this.setState({ newStudent });\n    const updatedStudents = update(this.state.students, {\n      $push: [newTestStudent],\n    });\n    this.setState({ students: updatedStudents });\n    // const { onSetStudents } = this.props;\n    // onSetStudents(updatedStudents);\n    this.onCloseStudentModal();\n  };\n\n  onDeleteNewStudent = () => {\n    const { newStudent: previousStudentState } = this.state;\n    const newStudent = update(previousStudentState, {\n      $set: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\",\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\",\n        },\n        emailAddress: {\n          email: \"\",\n        },\n        location: {\n          locations: [],\n        },\n      },\n    });\n    this.setState({ newStudent });\n  };\n\n  onRemoveLocation = index => {\n    const { newStudent: previousStudentState } = this.state;\n    const {\n      location: { locations },\n    } = this.state.newStudent;\n    const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n    const newStudent = update(previousStudentState, {\n      location: { $set: { locations: newLocationsArray } },\n    });\n    this.setState({ newStudent });\n  };\n\n  onFilterByName = () => {\n    const { students, nameFilter } = this.state;\n    return students.reduce((finalArr, currentStudent) => {\n      const {\n        studentInformation: { firstName, lastName },\n      } = currentStudent;\n      const studentString = `${firstName}${lastName}`.replace(/\\s/g, \"\").toLowerCase();\n      if (studentString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n        finalArr.push(currentStudent);\n      }\n      return finalArr;\n    }, []);\n  };\n\n  onHandleStudentCard = async index => {\n    const { students } = this.state;\n    const { onSetActiveStudent } = this.props;\n    onSetActiveStudent(students[index]);\n    this.setState({ selectedStudent: students[index] });\n  };\n\n  onRedirectToStudentPage = event => {\n    event.preventDefault();\n    this.setState({ selectedStudent: null });\n  };\n\n  onDeleteStudent = index => {\n    const { onDeleteStudent } = this.props;\n    const { students } = this.state;\n    // Dispatch deleteStudent\n    // eslint-disable-next-line camelcase\n    const student_id = students[index].id;\n    onDeleteStudent(student_id);\n    const newStudentArray = this.arrayItemRemover(students, students[index]);\n    this.setState({ students: newStudentArray });\n    this.onCloseDropdown();\n  };\n\n  onCloneStudent = index => {\n    const { students } = this.state;\n    const newStudent = update(students[index], {\n      id: { $set: idGenerator() },\n    });\n    this.setState(prevState => {\n      prevState.students.push(newStudent);\n      return { students: prevState.students };\n    });\n  };\n\n  handleChange = (event, name, section) => {\n    const { newStudent: previousStudentState } = this.state;\n    const value = event.target ? event.target.value : event;\n    const updatedStudent = update(previousStudentState, {\n      [section]: { $merge: { [name]: value } },\n    });\n    this.setState({ newStudent: updatedStudent });\n  };\n\n  onSaveStudentChanges = updatedStudent => {\n    const { students: originalStudents } = this.state;\n    const {\n      active,\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n    } = updatedStudent;\n    const studentToUpdate = originalStudents.filter(student => student.id === updatedStudent.id)[0];\n    const updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n    const students = update(originalStudents, {\n      [updatedStudentIndex]: {\n        $merge: { active, studentInformation, contactInformation, emailAddress, location },\n      },\n    });\n    this.setState({ students });\n    const { onSetStudents } = this.props;\n    onSetStudents(students);\n  };\n\n  onSetDropdown = dropdownIndex => this.setState({ dropdownIsOpen: true, dropdownIndex });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  // eslint-disable-next-line consistent-return\n  onSortStudents = students => {\n    const { sort } = this.state;\n    switch (sort) {\n      case \"lastNameDescending\":\n        return students.sort(studentLastNameDescending);\n      case \"lastNameAscending\":\n        return students.sort(studentLastNameAscending);\n      case \"firstNameDescending\":\n        return students.sort(studentFirstNameDescending);\n      case \"firstNameAscending\":\n        return students.sort(studentFirstNameAscending);\n      default:\n        break;\n    }\n  };\n\n  getMappableStudents = () => {\n    const { sort, students } = this.state;\n    const mappableStudents = students;\n    if (sort) {\n      return this.onSortStudents(mappableStudents);\n    }\n    return mappableStudents;\n  };\n\n  arrayItemRemover = (array, value) => array.filter(student => student !== value);\n\n  mapStudents = () =>\n    this.getMappableStudents().map((student, index) => (\n      <StudentCard\n        student={student}\n        index={index}\n        id={student.id}\n        key={student.id}\n        dropdownIsOpen={this.state.dropdownIsOpen}\n        dropdownIndex={this.state.dropdownIndex}\n        onSetDropdown={this.onSetDropdown}\n        onCloseDropdown={this.onCloseDropdown}\n        onHandleStudentCard={() => this.onHandleStudentCard(index)}\n        onDeleteStudent={() => this.onDeleteStudent(index)}\n        onCloneStudent={() => this.onCloneStudent(index, student.id)}\n        onSaveStudentChanges={this.onSaveStudentChanges}\n      />\n    ));\n\n  updateStudentStatus = () => this.setState({ selectedStudent: { ...this.state.selectedStudent, active: true } })\n  render() {\n    const { studentModalOpen, selectedStudent } = this.state;\n    return (\n      <main id=\"main\" role=\"main\">\n        <div className=\"main-holder grey lighten-5\">\n          <StickyContainer>\n            {!selectedStudent && (\n              <React.Fragment>\n                <Sticky>\n                  {({ style }) => (\n                    <div className=\"title-row card-panel\" style={{ ...style, zIndex: 1999 }}>\n                      <div className=\"mobile-header\">\n                        <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\">\n                          <i className=\"material-icons\">menu</i>\n                        </a>\n                      </div>\n                      <h2 className=\"h1 white-text\">\n                        <span className=\"heading-holder\">\n                          <i className=\"icon-student\"></i>\n                          <span className=\"heading-block\">Students</span>\n                        </span>\n                      </h2>\n                    </div>\n                  )}\n                </Sticky>\n                <FilterSection\n                  onSetSort={this.onSetSort}\n                  onSetFilteredState={this.onSetFilteredState}\n                  onUnsetFilteredState={this.onUnsetFilteredState}\n                  onSetFilteredLocationState={this.onSetFilteredLocationState}\n                  onUnsetFilteredLocationState={this.onUnsetFilteredLocationState}\n                  handleFilterClick={this.handleFilterClick}\n                  onFilterByName={this.onFilterByName}\n                />\n                <div className=\"content-section\">\n                  <div className=\"row d-flex-content\">{this.mapStudents()}</div>\n                </div>\n                <a\n                  href=\"#\"\n                  className=\"waves-effect waves-teal btn add-btn modal-trigger\"\n                  onClick={this.onOpenStudentModal}\n                >\n                  <i className=\"material-icons\">add</i>New Student\n                </a>\n                <StudentModal\n                  open={studentModalOpen}\n                  onClose={this.onCloseStudentModal}\n                  handleChange={this.handleChange}\n                  state={this.state.newStudent}\n                  onSave={this.onSaveNewStudent}\n                  onOpenLocationModal={this.onOpenLocationModal}\n                  onRemoveLocation={this.onRemoveLocation}\n                  onDeleteNewStudent={this.onDeleteNewStudent}\n                  hasRequiredFields={this.state.hasRequiredFields}\n                />\n                <LocationModal\n                  open={this.state.locationModalOpen}\n                  onClose={this.onCloseLocationModal}\n                  handleLocationsChange={selectedLocations =>\n                    this.handleChange(selectedLocations, \"locations\", \"location\")\n                  }\n                />\n              </React.Fragment>\n            )}\n            {selectedStudent && (\n              <IndividualStudentPage\n                student={selectedStudent}\n                onRedirectToStudentPage={this.onRedirectToStudentPage}\n                updateStudentStatus={this.updateStudentStatus}\n              />\n            )}\n          </StickyContainer>\n        </div>\n      </main>\n    );\n  }\n}\n\nStudents.propTypes = {\n  students: PropTypes.array.isRequired,\n  onFetchStudents: PropTypes.func.isRequired,\n  onCreateStudent: PropTypes.func.isRequired,\n  onDeleteStudent: PropTypes.func.isRequired,\n  onSetStudents: PropTypes.func.isRequired,\n  locations: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  students: makeSelectStudents(),\n  locations: makeSelectLocations(),\n  currentUser: makeSelectCurrentUser(),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteStudent: id => dispatch(deleteStudent(id)),\n  onFetchStudents: () => dispatch(fetchStudents()),\n  onSetStudents: students => dispatch(setStudents(students)),\n  onSetActiveStudent: student => dispatch(setActiveStudent(student)),\n  onFetchAllLocationns: (user_id) => dispatch(fetchAllLocationns(user_id)),\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(Students);\n"]},"metadata":{},"sourceType":"module"}