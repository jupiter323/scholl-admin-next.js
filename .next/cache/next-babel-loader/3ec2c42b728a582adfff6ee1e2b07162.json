{"ast":null,"code":"import _objectSpread2 from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { deleteStudent } from '../components/Student/index/actions';\nimport { fetchStudents, addNewStudent } from '../components/Student/index/actions';\nimport { makeSelectStudents } from '../components/Student/index/selectors';\nimport StudentCard from '../components/Student/components/StudentCard';\nimport sampleStudentList from '../components/Student/utils/sampleStudentList';\nimport FilterSection from '../components/Student/ListPage/Components/FilterSection';\nimport StudentModal from '../components/Student/components/StudentModal';\nimport IndividualStudentPage from '../components/Student/IndividualStudentPage';\nimport LocationModal from '../components/Location/components/LocationModal';\nimport { fetchStudentsApi, deleteStudentApi } from '../components/Student/index/api';\n\nvar idGenerator = function idGenerator() {\n  return subIdGenerator() + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + subIdGenerator() + subIdGenerator();\n};\n\nvar subIdGenerator = function subIdGenerator() {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar Students =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Students, _Component);\n\n  function Students(props) {\n    var _this;\n\n    _classCallCheck(this, Students);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Students).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var onFetchStudents = _this.props.onFetchStudents;\n      onFetchStudents();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenStudentModal\", function () {\n      return _this.setState({\n        studentModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseStudentModal\", function () {\n      return _this.setState({\n        studentModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenLocationModal\", function () {\n      return _this.setState({\n        locationModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseLocationModal\", function () {\n      return _this.setState({\n        locationModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (filterName) {\n      return _this.setState({\n        filterName: filterName\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function () {\n      return _this.setState({\n        filterName: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredLocationState\", function (location) {\n      return _this.setState({\n        location: location\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredLocationState\", function () {\n      return _this.setState({\n        location: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveNewStudent\", function _callee() {\n      var previousStudentState, onAddNewStudent, newStudent;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              previousStudentState = _this.state.newStudent; // dispatch add student action\n\n              onAddNewStudent = _this.props.onAddNewStudent;\n              onAddNewStudent(previousStudentState);\n              newStudent = update(previousStudentState, {\n                $set: {\n                  active: false,\n                  studentInformation: {\n                    firstName: '',\n                    lastName: '',\n                    gender: ''\n                  },\n                  contactInformation: {\n                    phone: '',\n                    addressLine1: '',\n                    addressLine2: '',\n                    city: '',\n                    state: '',\n                    zipCode: ''\n                  },\n                  emailAddress: {\n                    email: ''\n                  },\n                  location: {\n                    locations: []\n                  }\n                }\n              });\n\n              _this.setState({\n                newStudent: newStudent\n              }); // eslint-disable-next-line no-console\n\n\n              console.warn('do something with the new student info');\n\n              _this.onCloseStudentModal();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteNewStudent\", function () {\n      var previousStudentState = _this.state.newStudent;\n      var newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: '',\n            lastName: '',\n            gender: ''\n          },\n          contactInformation: {\n            phone: '',\n            addressLine1: '',\n            addressLine2: '',\n            city: '',\n            state: '',\n            zipCode: ''\n          },\n          emailAddress: {\n            email: ''\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n\n      _this.setState({\n        newStudent: newStudent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRemoveLocation\", function (index) {\n      var previousStudentState = _this.state.newStudent;\n      var locations = _this.state.newStudent.location.locations;\n\n      var newLocationsArray = _this.arrayItemRemover(locations, locations[index]);\n\n      var newStudent = update(previousStudentState, {\n        location: {\n          $set: {\n            locations: newLocationsArray\n          }\n        }\n      });\n\n      _this.setState({\n        newStudent: newStudent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByName\", function () {\n      var _this$state = _this.state,\n          students = _this$state.students,\n          filterName = _this$state.filterName;\n      return students.reduce(function (finalArr, currentStudent) {\n        var lastName = currentStudent.lastName,\n            firstName = currentStudent.firstName;\n        var studentString = \"\".concat(firstName.toLowerCase()).concat(lastName.toLowerCase());\n\n        if (studentString.indexOf(filterName) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n          finalArr.push(currentStudent);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleStudentCard\", function (index) {\n      var students = _this.state.students;\n\n      _this.setState({\n        selectedStudent: students[index]\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRedirectToStudentPage\", function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        selectedStudent: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteStudent\", function (index) {\n      var onDeleteStudent = _this.props.onDeleteStudent;\n      var students = _this.state.students; // Dispatch deleteStudent\n\n      onDeleteStudent(students[index].id);\n\n      var newStudentArray = _this.arrayItemRemover(students, students[index]);\n\n      _this.setState({\n        students: newStudentArray\n      });\n\n      var student_id = students[index].id;\n      deleteStudentApi({\n        student_id: student_id\n      });\n\n      _this.onCloseDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloneStudent\", function (index) {\n      var students = _this.state.students;\n      var newStudent = update(students[index], {\n        id: {\n          $set: idGenerator()\n        }\n      });\n\n      _this.setState(function (prevState) {\n        prevState.students.push(newStudent);\n        return {\n          students: prevState.students\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event, name, section) {\n      var previousStudentState = _this.state.newStudent;\n      var value = event.target ? event.target.value : event;\n      var updatedStudent = update(previousStudentState, _defineProperty({}, section, {\n        $merge: _defineProperty({}, name, value)\n      }));\n\n      _this.setState({\n        newStudent: updatedStudent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveStudentChanges\", function (updatedStudent) {\n      var originalStudents = _this.state.students;\n      var active = updatedStudent.active,\n          studentInformation = updatedStudent.studentInformation,\n          contactInformation = updatedStudent.contactInformation,\n          emailAddress = updatedStudent.emailAddress,\n          location = updatedStudent.location;\n      var studentToUpdate = originalStudents.filter(function (student) {\n        return student.id === updatedStudent.id;\n      })[0];\n      var updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n      var students = update(originalStudents, _defineProperty({}, updatedStudentIndex, {\n        $merge: {\n          active: active,\n          studentInformation: studentInformation,\n          contactInformation: contactInformation,\n          emailAddress: emailAddress,\n          location: location\n        }\n      }));\n\n      _this.setState({\n        students: students\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIsOpen: true,\n        dropdownIndex: dropdownIndex\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false,\n        dropdownIndex: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"arrayItemRemover\", function (array, value) {\n      return array.filter(function (student) {\n        return student !== value;\n      });\n    });\n\n    _this.state = {\n      selectedStudent: null,\n      students: sampleStudentList,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Students, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          studentModalOpen = _this$state2.studentModalOpen,\n          students = _this$state2.students,\n          selectedStudent = _this$state2.selectedStudent;\n      return __jsx(\"main\", {\n        id: \"main\",\n        role: \"main\"\n      }, __jsx(\"div\", {\n        className: \"main-holder grey lighten-5\"\n      }, __jsx(StickyContainer, null, !selectedStudent && __jsx(React.Fragment, null, __jsx(Sticky, null, function (_ref) {\n        var style = _ref.style;\n        return __jsx(\"div\", {\n          className: \"title-row card-panel\",\n          style: _objectSpread2({}, style, {\n            zIndex: 1999\n          })\n        }, __jsx(\"div\", {\n          className: \"mobile-header\"\n        }, __jsx(\"a\", {\n          href: \"#\",\n          \"data-target\": \"slide-out\",\n          className: \"sidenav-trigger\"\n        }, __jsx(\"i\", {\n          className: \"material-icons\"\n        }, \"menu\"))), __jsx(\"h2\", {\n          className: \"h1 white-text\"\n        }, __jsx(\"span\", {\n          className: \"heading-holder\"\n        }, __jsx(\"i\", {\n          className: \"icon-student\"\n        }), __jsx(\"span\", {\n          className: \"heading-block\"\n        }, \"Students\"))));\n      }), __jsx(FilterSection, {\n        onSetSort: this.onSetSort,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState,\n        onSetFilteredLocationState: this.onSetFilteredLocationState,\n        onUnsetFilteredLocationState: this.onUnsetFilteredLocationState,\n        handleFilterClick: this.handleFilterClick,\n        onFilterByName: this.onFilterByName\n      }), __jsx(\"div\", {\n        className: \"content-section\"\n      }, __jsx(\"div\", {\n        className: \"row d-flex-content\"\n      }, students.map(function (student, index) {\n        return __jsx(StudentCard, {\n          student: student,\n          index: index,\n          id: student.id,\n          key: student.id,\n          dropdownIsOpen: _this2.state.dropdownIsOpen,\n          dropdownIndex: _this2.state.dropdownIndex,\n          onSetDropdown: _this2.onSetDropdown,\n          onCloseDropdown: _this2.onCloseDropdown,\n          onHandleStudentCard: function onHandleStudentCard() {\n            return _this2.onHandleStudentCard(index);\n          },\n          onDeleteStudent: function onDeleteStudent() {\n            return _this2.onDeleteStudent(index);\n          },\n          onCloneStudent: function onCloneStudent() {\n            return _this2.onCloneStudent(index, student.id);\n          },\n          onSaveStudentChanges: _this2.onSaveStudentChanges\n        });\n      }))), __jsx(\"a\", {\n        href: \"#\",\n        className: \"waves-effect waves-teal btn add-btn modal-trigger\",\n        onClick: this.onOpenStudentModal\n      }, __jsx(\"i\", {\n        className: \"material-icons\"\n      }, \"add\"), \"New Student\"), __jsx(StudentModal, {\n        open: studentModalOpen,\n        onClose: this.onCloseStudentModal,\n        handleChange: this.handleChange,\n        state: this.state.newStudent,\n        onSave: this.onSaveNewStudent,\n        onOpenLocationModal: this.onOpenLocationModal,\n        onRemoveLocation: this.onRemoveLocation,\n        onDeleteNewStudent: this.onDeleteNewStudent\n      }), __jsx(LocationModal, {\n        open: this.state.locationModalOpen,\n        onClose: this.onCloseLocationModal,\n        handleLocationsChange: function handleLocationsChange(selectedLocations) {\n          return _this2.handleChange(selectedLocations, 'locations', 'location');\n        }\n      })), selectedStudent && __jsx(IndividualStudentPage, {\n        student: selectedStudent,\n        onRedirectToStudentPage: this.onRedirectToStudentPage\n      }))));\n    }\n  }]);\n\n  return Students;\n}(Component);\n\nvar mapStateToProps = createStructuredSelector({\n  students: makeSelectStudents()\n});\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onDeleteStudent: function onDeleteStudent(id) {\n      return dispatch(deleteStudent(id));\n    },\n    onFetchStudents: function onFetchStudents() {\n      return dispatch(fetchStudents());\n    },\n    onAddNewStudent: function onAddNewStudent(student) {\n      return dispatch(addNewStudent(student));\n    }\n  };\n};\n\nvar withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(Students);","map":null,"metadata":{},"sourceType":"module"}