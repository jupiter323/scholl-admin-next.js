{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\n\nvar AnswerRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnswerRow, _React$Component);\n\n  function AnswerRow(props) {\n    var _this;\n\n    _classCallCheck(this, AnswerRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnswerRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenQuestionModal\", function () {\n      return _this.setState({\n        open: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseQuestionModal\", function () {\n      return _this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBubbleChange\", function (event) {\n      _this.setState({\n        selectedAnswer: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapEmptyLetterBubbles\", function () {\n      var letters = [\"A\", \"B\", \"C\", \"D\"];\n      return letters.map(function (letter) {\n        return React.createElement(\"li\", {\n          key: letter\n        }, React.createElement(\"label\", {\n          htmlFor: letter\n        }, React.createElement(\"input\", {\n          type: \"radio\",\n          id: letter,\n          name: letter,\n          value: letter,\n          checked: _this.state.selectedAnswer === letter,\n          onChange: _this.handleBubbleChange\n        })));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapLetterBubbles\", function (_ref) {\n      var index = _ref.index;\n      var letters = [\"A\", \"B\", \"C\", \"D\"];\n      var sampleAnswers = _this.props.sampleAnswers;\n      var _sampleAnswers$index = sampleAnswers[index],\n          studentChoice = _sampleAnswers$index.studentChoice,\n          answer = _sampleAnswers$index.answer;\n      return letters.map(function (letter) {\n        if (letter === answer && letter === studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: '#fff',\n              borderColor: '#32955c',\n              backgroundColor: '#3eb777'\n            }\n          }, letter));\n        }\n\n        if (letter === answer && letter !== studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: '#32955c',\n              borderColor: '#32955c',\n              backgrounColor: '#fff'\n            }\n          }, letter));\n        }\n\n        if (letter !== answer && letter === studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: '#fff',\n              borderColor: '#ad1e3e',\n              backgroundColor: '#db1d41'\n            }\n          }, letter));\n        }\n\n        return React.createElement(\"li\", {\n          key: letter\n        }, React.createElement(\"span\", {\n          className: \"badge-circle badge-circle-bordered\"\n        }, letter));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapNumberBubbles\", function (_ref2) {\n      var index = _ref2.index;\n      var sampleAnswers = _this.props.sampleAnswers;\n      var _sampleAnswers$index2 = sampleAnswers[index],\n          answer = _sampleAnswers$index2.answer,\n          studentChoice = _sampleAnswers$index2.studentChoice;\n\n      if (answer === studentChoice) {\n        return React.createElement(\"li\", {\n          key: answer\n        }, React.createElement(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: {\n            color: '#fff',\n            borderColor: '#32955c',\n            backgroundColor: '#3eb777'\n          }\n        }, answer));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", {\n        key: studentChoice\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#fff',\n          borderColor: '#ad1e3e',\n          backgroundColor: '#db1d41'\n        }\n      }, studentChoice)), React.createElement(\"li\", {\n        key: answer\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#32955c',\n          borderColor: '#32955c',\n          backgroundColor: '#fff'\n        }\n      }, answer)));\n    });\n\n    _this.state = {\n      open: false,\n      selectedAnswer: \"A\"\n    };\n    return _this;\n  }\n\n  _createClass(AnswerRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          index = _this$props.index,\n          question = _this$props.question;\n      var open = this.state.open;\n      return React.createElement(React.Fragment, null, React.createElement(QuestionModal, {\n        open: open,\n        onOpenQuestionModal: this.onOpenQuestionModal,\n        onCloseQuestionModal: this.onCloseQuestionModal,\n        question: question\n      }), React.createElement(\"li\", {\n        className: \"answers-list-holder\",\n        key: question.problem\n      }, React.createElement(\"div\", {\n        className: \"answer-row row mb-0\"\n      }, React.createElement(\"form\", null, React.createElement(\"div\", {\n        className: \"col col-120\"\n      }, React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, this.mapEmptyLetterBubbles()))), React.createElement(\"div\", {\n        className: \"col col-30\"\n      }, React.createElement(\"span\", {\n        className: \"status-info\"\n      }, question.status)), React.createElement(\"div\", {\n        className: \"col col-43\"\n      }, React.createElement(\"span\", {\n        className: \"play-progress\",\n        \"data-video-id\": \"video001\"\n      }, React.createElement(\"span\", {\n        className: \"play\"\n      }), React.createElement(\"svg\", {\n        viewBox: \"0 0 50 50\",\n        width: \"50\",\n        height: \"50\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, React.createElement(\"circle\", {\n        className: \"circle-static\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      }), React.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      })))), React.createElement(\"div\", {\n        className: \"col col-auto\"\n      }, question.flagged ? React.createElement(\"span\", {\n        className: \"status-answer\",\n        style: {\n          color: '#c0272d'\n        }\n      }, React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }), React.createElement(\"b\", {\n        className: \"status-text\"\n      }, \"Review\")) : null), React.createElement(\"div\", {\n        className: \"dropdown-block col col-35\"\n      }, React.createElement(\"a\", {\n        className: \"modal-trigger\",\n        href: \"#\",\n        onClick: this.onOpenQuestionModal\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")))), question.studentNotes ? React.createElement(\"div\", {\n        className: \"comment-block\"\n      }, React.createElement(\"p\", null, question.studentNotes)) : null));\n    }\n  }]);\n\n  return AnswerRow;\n}(React.Component);\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  sampleAnswers: PropTypes.array.isRequired\n};\nexport default AnswerRow;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailTestAnswerSheetComplete\\components\\WritingPage\\components\\AnswerRow\\index.js"],"names":["React","PropTypes","QuestionModal","AnswerRow","props","setState","open","event","selectedAnswer","target","value","letters","map","letter","state","handleBubbleChange","index","sampleAnswers","studentChoice","answer","color","borderColor","backgroundColor","backgrounColor","question","onOpenQuestionModal","onCloseQuestionModal","problem","mapEmptyLetterBubbles","status","flagged","studentNotes","Component","propTypes","object","isRequired","number","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      selectedAnswer: \"A\",\n     }\n  };\n  onOpenQuestionModal = () => this.setState({open: true})\n  onCloseQuestionModal = () => this.setState({open: false});\n\n  handleBubbleChange = (event) => {\n    this.setState({\n      selectedAnswer: event.target.value,\n    })\n  }\n\n  mapEmptyLetterBubbles = () => {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    return letters.map((letter) => {\n      return (\n        <li key={letter}>\n          <label htmlFor={letter}>\n            <input\n              type=\"radio\"\n              id={letter}\n              name={letter}\n              value={letter}\n              checked={this.state.selectedAnswer === letter}\n              onChange={this.handleBubbleChange}\n            />\n          </label>\n        </li>\n      )\n    })\n\n  }\n\n\n  mapLetterBubbles = ({index}) => {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    const { sampleAnswers } = this.props;\n    const { studentChoice, answer } = sampleAnswers[index];\n    return letters.map(letter => {\n      if (letter === answer && letter === studentChoice){\n        return (\n          <li key={letter}>\n          <span className=\"badge-circle badge-circle-bordered\"  style={{color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777'}}>{letter}</span>\n        </li>\n        )\n      }\n      if (letter === answer && letter !== studentChoice){\n        return (\n          <li key={letter}>\n            <span className=\"badge-circle badge-circle-bordered\" style={{color: '#32955c', borderColor: '#32955c', backgrounColor: '#fff'}}>{letter}</span>\n          </li>\n        )\n      }\n      if (letter !== answer && letter === studentChoice){\n        return (\n          <li key={letter}>\n            <span className=\"badge-circle badge-circle-bordered\" style={{color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41'}}>{letter}</span>\n          </li>\n        )\n      }\n      return (\n          <li key={letter}>\n            <span className=\"badge-circle badge-circle-bordered\">{letter}</span>\n          </li>\n        )\n      }\n    )\n  };\n\n  mapNumberBubbles = ({ index} ) => {\n    const { sampleAnswers } = this.props;\n    const { answer, studentChoice }= sampleAnswers[index];\n          if ( answer === studentChoice) {\n        return (\n          <li key={answer}>\n            <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777'}}>{answer}</span>\n          </li>\n        )\n      }\n      return (\n          <React.Fragment>\n            <li key={studentChoice}>\n              <span className=\"badge badge-rounded badge-rounded-bordered\"  style={{color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41'}}>{studentChoice}</span>\n            </li>\n            <li key={answer} >\n              <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#32955c', borderColor: '#32955c', backgroundColor: '#fff'}}>{answer}</span>\n            </li>\n          </React.Fragment>\n        )\n      };\n\n      render() {\n        const { index, question } = this.props;\n        const { open } = this.state;\n        return (\n          <React.Fragment>\n          <QuestionModal open={open} onOpenQuestionModal={this.onOpenQuestionModal} onCloseQuestionModal={this.onCloseQuestionModal} question={question}/>\n        <li className=\"answers-list-holder\" key={question.problem}>\n          <div className=\"answer-row row mb-0\">\n                <form>\n            <div className=\"col col-120\">\n              <ul className=\"answer-list\" >\n                  {this.mapEmptyLetterBubbles()}\n                  </ul>\n                {/* <Choose>\n                  <When condition={!question.numeric}>\n                  {this.mapEmptyLetterBubbles()}\n                  </When>\n                  <Otherwise>\n                  {this.mapNumberBubbles({index})}\n                  </Otherwise>\n                </Choose> */}\n            </div>\n                </form>\n            <div className=\"col col-30\">\n              <span className=\"status-info\">{question.status}</span>\n            </div>\n            <div className=\"col col-43\">\n              <span className=\"play-progress\" data-video-id=\"video001\">\n                <span className=\"play\"></span>\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle className=\"circle-static\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n                  <circle className=\"circle-progress\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n                </svg>\n              </span>\n            </div>\n            <div className=\"col col-auto\">\n              <If condition={question.flagged}>\n                  <span className=\"status-answer\" style={{color: '#c0272d'}}>\n                    <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n                  </span>\n              </If>\n            </div>\n            <div className=\"dropdown-block col col-35\">\n\n              <a className='modal-trigger' href=\"#\" onClick={this.onOpenQuestionModal}><i className=\"material-icons dots-icon\">more_vert</i></a>\n            </div>\n          </div>\n          <If condition={question.studentNotes}>\n            <div className=\"comment-block\">\n              <p>{question.studentNotes}</p>\n            </div>\n          </If>\n        </li>\n      </React.Fragment>\n\n    )\n  }\n}\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  sampleAnswers: PropTypes.array.isRequired,\n}\n\nexport default AnswerRow;\n\n"]},"metadata":{},"sourceType":"module"}