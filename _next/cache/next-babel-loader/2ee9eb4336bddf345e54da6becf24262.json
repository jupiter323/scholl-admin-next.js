{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Dashboard/components/CalendarRow/index.js\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\nimport CalendarDate from '../CalendarDate';\n\nclass CalendarRow extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"toggleAssignSessionModal\", (event, date) => {\n      event.preventDefault();\n      const {\n        onToggleAssignSessionModal,\n        onToggleAddDropdown\n      } = this.props;\n      onToggleAssignSessionModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(this, \"toggleAssignLessonsModal\", (event, date) => {\n      event.preventDefault();\n      const {\n        onToggleAssignLessonsModal,\n        onToggleAddDropdown\n      } = this.props;\n      onToggleAssignLessonsModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(this, \"toggleAssignWorksheetsModal\", (event, date) => {\n      event.preventDefault();\n      const {\n        onToggleAssignWorksheetsModal,\n        onToggleAddDropdown\n      } = this.props;\n      onToggleAssignWorksheetsModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(this, \"toggleAssignTestSectionModal\", (event, date) => {\n      event.preventDefault();\n      const {\n        onToggleAssignTestSectionModal,\n        onToggleAddDropdown\n      } = this.props;\n      onToggleAssignTestSectionModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(this, \"toggleAssignSimulatedSatModal\", (event, date) => {\n      event.preventDefault();\n      const {\n        onToggleAssignSimulatedSatModal,\n        onToggleAddDropdown\n      } = this.props;\n      onToggleAssignSimulatedSatModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(this, \"mapDateSessions\", (shouldMapSessions, sessions) => {\n      if (shouldMapSessions) {\n        return sessions.map((session, index) => __jsx(\"li\", {\n          className: \"event-frame\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, __jsx(Draggable, {\n          key: index,\n          index: index,\n          draggableId: `sessions-${session.date}-${index}`,\n          style: {\n            userSelect: 'none'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, provided => __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }), __jsx(\"span\", {\n          className: \"event-title-box\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, session.title)))));\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"mapDateLessons\", (shouldMapLessons, lessons) => {\n      if (shouldMapLessons) {\n        return lessons.map((lesson, index) => __jsx(\"li\", {\n          className: \"event-frame\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, __jsx(Draggable, {\n          key: index,\n          index: index,\n          draggableId: `lessons-${lesson.date}-${index}`,\n          style: {\n            userSelect: 'none'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, provided => __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }), __jsx(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, lesson.completed && __jsx(\"span\", {\n          className: \"event-check lesson-check\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, __jsx(\"i\", {\n          className: \"icon-check02\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        })), __jsx(\"span\", {\n          className: \"event event-lesson-box\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, lesson.title))))));\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"mapDateWorksheets\", (shouldMapWorksheets, worksheets) => {\n      if (shouldMapWorksheets) {\n        return worksheets.map((worksheet, index) => __jsx(\"li\", {\n          className: \"event-frame\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, __jsx(Draggable, {\n          key: index,\n          index: index,\n          draggableId: `worksheets-${worksheet.date}-${index}`,\n          style: {\n            userSelect: 'none'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, provided => __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }), __jsx(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, worksheet.completed && __jsx(\"span\", {\n          className: \"event-check worksheet-check\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, __jsx(\"i\", {\n          className: \"icon-check02\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        })), __jsx(\"span\", {\n          className: \"event event-worksheet-box\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, worksheet.title))))));\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"mapTestSections\", (shouldMapTestSections, testSections) => {\n      if (shouldMapTestSections) {\n        return testSections.map((testSection, index) => __jsx(\"li\", {\n          className: \"event-frame\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, __jsx(Draggable, {\n          key: index,\n          index: index,\n          draggableId: `testSections-${testSection.date}-${index}`,\n          style: {\n            userSelect: 'none'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, provided => __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }), __jsx(\"span\", {\n          className: \"event event-test-box\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"Test Section: \", testSection.version)))));\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"mapSimulatedSats\", (shouldMapSimulatedSats, simulatedSat) => {\n      if (shouldMapSimulatedSats) {\n        return simulatedSat.map((sat, index) => __jsx(\"li\", {\n          className: \"event-frame\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, __jsx(Draggable, {\n          key: index,\n          index: index,\n          draggableId: `simulatedSat-${sat.date}-${index}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, provided => __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.dragHandleProps, provided.dragHandleProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }), __jsx(\"span\", {\n          className: \"event event-sat-box\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, sat.version)))));\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"mapRowDates\", () => this.props.rows && this.props.rows.map(rowDate => {\n      const {\n        eventFilters,\n        activeDate,\n        addDropdownOpen,\n        deleteDropdownOpen,\n        onSetActiveDate,\n        onToggleAddDropdown,\n        onToggleDeleteDropdown,\n        activeColumn\n      } = this.props;\n      const {\n        date,\n        dayDate,\n        calDate,\n        activeDateKey,\n        inMonth,\n        sessions = [],\n        lessons = [],\n        worksheets = [],\n        testSections = [],\n        simulatedSat = []\n      } = rowDate;\n      const hasEvents = sessions.length > 0 || lessons.length > 0 || worksheets.length > 0 || testSections.length > 0 || simulatedSat.length > 0;\n      const inActiveColumn = activeDateKey && activeDateKey[13] === activeColumn;\n      const isActiveDate = activeDate === activeDateKey;\n      const hasEventFilters = eventFilters.length > 0;\n      const shouldMapSessions = !hasEventFilters && sessions.length || sessions.length > 0 && hasEventFilters && eventFilters.indexOf('sessions') !== -1;\n      const shouldMapLessons = !hasEventFilters && lessons.length || lessons.length > 0 && hasEventFilters && eventFilters.indexOf('lessons') !== -1;\n      const shouldMapWorksheets = !hasEventFilters && worksheets.length || worksheets.length > 0 && hasEventFilters && eventFilters.indexOf('worksheets') !== -1;\n      const shouldMapTestSections = !hasEventFilters && testSections.length || testSections.length > 0 && hasEventFilters && eventFilters.indexOf('testSections') !== -1;\n      const shouldMapSimulatedSats = !hasEventFilters && simulatedSat.length || simulatedSat.length > 0 && hasEventFilters && eventFilters.indexOf('simulatedSats') !== -1;\n      return __jsx(CalendarDate, {\n        sessions: sessions,\n        lessons: lessons,\n        worksheets: worksheets,\n        testSections: testSections,\n        simulatedSat: simulatedSat,\n        key: date,\n        date: date,\n        dayDate: dayDate,\n        calDate: calDate,\n        inMonth: inMonth,\n        hasEvents: hasEvents,\n        isActiveDate: isActiveDate,\n        activeDateKey: activeDateKey,\n        inActiveColumn: inActiveColumn,\n        addDropdownOpen: addDropdownOpen,\n        onSetActiveDate: onSetActiveDate,\n        shouldMapLessons: shouldMapLessons,\n        shouldMapSessions: shouldMapSessions,\n        deleteDropdownOpen: deleteDropdownOpen,\n        onToggleAddDropdown: onToggleAddDropdown,\n        shouldMapWorksheets: shouldMapWorksheets,\n        shouldMapTestSections: shouldMapTestSections,\n        onToggleDeleteDropdown: onToggleDeleteDropdown,\n        shouldMapSimulatedSats: shouldMapSimulatedSats,\n        mapDateSessions: this.mapDateSessions,\n        mapDateLessons: this.mapDateLessons,\n        mapDateWorksheets: this.mapDateWorksheets,\n        mapTestSections: this.mapTestSections,\n        mapSimulatedSats: this.mapSimulatedSats,\n        toggleAssignSessionModal: this.toggleAssignSessionModal,\n        toggleAssignLessonsModal: this.toggleAssignLessonsModal,\n        toggleAssignWorksheetsModal: this.toggleAssignWorksheetsModal,\n        toggleAssignTestSectionModal: this.toggleAssignTestSectionModal,\n        toggleAssignSimulatedSatModal: this.toggleAssignSimulatedSatModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      });\n    }));\n  }\n\n  render() {\n    return __jsx(\"tr\", {\n      className: \"cal-row-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, this.mapRowDates());\n  }\n\n}\n\nCalendarRow.propTypes = {\n  activeDate: PropTypes.string,\n  activeColumn: PropTypes.string,\n  rows: PropTypes.array.isRequired,\n  eventFilters: PropTypes.array.isRequired,\n  onSetActiveDate: PropTypes.func.isRequired,\n  addDropdownOpen: PropTypes.bool.isRequired,\n  deleteDropdownOpen: PropTypes.bool.isRequired,\n  onToggleAddDropdown: PropTypes.func.isRequired,\n  onToggleDeleteDropdown: PropTypes.func.isRequired,\n  onToggleAssignSessionModal: PropTypes.func.isRequired,\n  onToggleAssignLessonsModal: PropTypes.func.isRequired,\n  onToggleAssignWorksheetsModal: PropTypes.func.isRequired,\n  onToggleAssignTestSectionModal: PropTypes.func.isRequired,\n  onToggleAssignSimulatedSatModal: PropTypes.func.isRequired\n};\nexport default CalendarRow;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Dashboard/components/CalendarRow/index.js"],"names":["React","PropTypes","Draggable","CalendarDate","CalendarRow","Component","event","date","preventDefault","onToggleAssignSessionModal","onToggleAddDropdown","props","onToggleAssignLessonsModal","onToggleAssignWorksheetsModal","onToggleAssignTestSectionModal","onToggleAssignSimulatedSatModal","shouldMapSessions","sessions","map","session","index","userSelect","provided","innerRef","draggableProps","dragHandleProps","title","shouldMapLessons","lessons","lesson","completed","shouldMapWorksheets","worksheets","worksheet","shouldMapTestSections","testSections","testSection","version","shouldMapSimulatedSats","simulatedSat","sat","rows","rowDate","eventFilters","activeDate","addDropdownOpen","deleteDropdownOpen","onSetActiveDate","onToggleDeleteDropdown","activeColumn","dayDate","calDate","activeDateKey","inMonth","hasEvents","length","inActiveColumn","isActiveDate","hasEventFilters","indexOf","mapDateSessions","mapDateLessons","mapDateWorksheets","mapTestSections","mapSimulatedSats","toggleAssignSessionModal","toggleAssignLessonsModal","toggleAssignWorksheetsModal","toggleAssignTestSectionModal","toggleAssignSimulatedSatModal","render","mapRowDates","propTypes","string","array","isRequired","func","bool"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport CalendarDate from '../CalendarDate';\n\nclass CalendarRow extends React.Component {\n  toggleAssignSessionModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignSessionModal, onToggleAddDropdown } = this.props;\n    onToggleAssignSessionModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignLessonsModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignLessonsModal, onToggleAddDropdown } = this.props;\n    onToggleAssignLessonsModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignWorksheetsModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignWorksheetsModal, onToggleAddDropdown } = this.props;\n    onToggleAssignWorksheetsModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignTestSectionModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignTestSectionModal, onToggleAddDropdown } = this.props;\n    onToggleAssignTestSectionModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignSimulatedSatModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignSimulatedSatModal, onToggleAddDropdown } = this.props;\n    onToggleAssignSimulatedSatModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  mapDateSessions = (shouldMapSessions, sessions) => {\n    if (shouldMapSessions) {\n      return sessions.map((session, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`sessions-${session.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <span className=\"event-title-box\">{session.title}</span>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapDateLessons = (shouldMapLessons, lessons) => {\n    if (shouldMapLessons) {\n      return lessons.map((lesson, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`lessons-${lesson.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <React.Fragment>\n                  {lesson.completed && <span className=\"event-check lesson-check\"><i className=\"icon-check02\"></i></span>}\n                  <span className=\"event event-lesson-box\">{lesson.title}</span>\n                </React.Fragment>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapDateWorksheets = (shouldMapWorksheets, worksheets) => {\n    if (shouldMapWorksheets) {\n      return worksheets.map((worksheet, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`worksheets-${worksheet.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <React.Fragment>\n                  {worksheet.completed && <span className=\"event-check worksheet-check\"><i className=\"icon-check02\"></i></span>}\n                  <span className=\"event event-worksheet-box\">{worksheet.title}</span>\n                </React.Fragment>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapTestSections = (shouldMapTestSections, testSections) => {\n    if (shouldMapTestSections) {\n      return testSections.map((testSection, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`testSections-${testSection.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <span className=\"event event-test-box\">Test Section: {testSection.version}</span>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapSimulatedSats = (shouldMapSimulatedSats, simulatedSat) => {\n    if (shouldMapSimulatedSats) {\n      return simulatedSat.map((sat, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`simulatedSat-${sat.date}-${index}`}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.dragHandleProps}\n                {...provided.dragHandleProps}\n              >\n                <span className=\"event event-sat-box\">{sat.version}</span>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapRowDates = () => this.props.rows && this.props.rows.map(rowDate => {\n    const { eventFilters, activeDate, addDropdownOpen, deleteDropdownOpen, onSetActiveDate, onToggleAddDropdown, onToggleDeleteDropdown, activeColumn } = this.props;\n    const { date, dayDate, calDate, activeDateKey, inMonth, sessions = [], lessons = [], worksheets = [], testSections = [], simulatedSat = [] } = rowDate;\n    const hasEvents = sessions.length > 0 || lessons.length > 0 || worksheets.length > 0 || testSections.length > 0 || simulatedSat.length > 0;\n    const inActiveColumn = activeDateKey && activeDateKey[13] === activeColumn;\n    const isActiveDate = activeDate === activeDateKey;\n    const hasEventFilters = eventFilters.length > 0;\n\n    const shouldMapSessions = (!hasEventFilters && sessions.length) || (sessions.length > 0 && hasEventFilters && eventFilters.indexOf('sessions') !== -1);\n    const shouldMapLessons = (!hasEventFilters && lessons.length) || (lessons.length > 0 && hasEventFilters && eventFilters.indexOf('lessons') !== -1);\n    const shouldMapWorksheets = (!hasEventFilters && worksheets.length) || (worksheets.length > 0 && hasEventFilters && eventFilters.indexOf('worksheets') !== -1);\n    const shouldMapTestSections = (!hasEventFilters && testSections.length) || (testSections.length > 0 && hasEventFilters && eventFilters.indexOf('testSections') !== -1);\n    const shouldMapSimulatedSats = (!hasEventFilters && simulatedSat.length) || (simulatedSat.length > 0 && hasEventFilters && eventFilters.indexOf('simulatedSats') !== -1);\n    return (\n      <CalendarDate\n        sessions={sessions}\n        lessons={lessons}\n        worksheets={worksheets}\n        testSections={testSections}\n        simulatedSat={simulatedSat}\n        key={date}\n        date={date}\n        dayDate={dayDate}\n        calDate={calDate}\n        inMonth={inMonth}\n        hasEvents={hasEvents}\n        isActiveDate={isActiveDate}\n        activeDateKey={activeDateKey}\n        inActiveColumn={inActiveColumn}\n        addDropdownOpen={addDropdownOpen}\n        onSetActiveDate={onSetActiveDate}\n        shouldMapLessons={shouldMapLessons}\n        shouldMapSessions={shouldMapSessions}\n        deleteDropdownOpen={deleteDropdownOpen}\n        onToggleAddDropdown={onToggleAddDropdown}\n        shouldMapWorksheets={shouldMapWorksheets}\n        shouldMapTestSections={shouldMapTestSections}\n        onToggleDeleteDropdown={onToggleDeleteDropdown}\n        shouldMapSimulatedSats={shouldMapSimulatedSats}\n        mapDateSessions={this.mapDateSessions}\n        mapDateLessons={this.mapDateLessons}\n        mapDateWorksheets={this.mapDateWorksheets}\n        mapTestSections={this.mapTestSections}\n        mapSimulatedSats={this.mapSimulatedSats}\n        toggleAssignSessionModal={this.toggleAssignSessionModal}\n        toggleAssignLessonsModal={this.toggleAssignLessonsModal}\n        toggleAssignWorksheetsModal={this.toggleAssignWorksheetsModal}\n        toggleAssignTestSectionModal={this.toggleAssignTestSectionModal}\n        toggleAssignSimulatedSatModal={this.toggleAssignSimulatedSatModal}\n      />\n    );\n  }\n)\n\n  render() {\n    return (\n      <tr className=\"cal-row-fluid\">\n        {this.mapRowDates()}\n      </tr>\n    )\n  }\n}\n\nCalendarRow.propTypes = {\n  activeDate: PropTypes.string,\n  activeColumn: PropTypes.string,\n  rows: PropTypes.array.isRequired,\n  eventFilters: PropTypes.array.isRequired,\n  onSetActiveDate: PropTypes.func.isRequired,\n  addDropdownOpen: PropTypes.bool.isRequired,\n  deleteDropdownOpen: PropTypes.bool.isRequired,\n  onToggleAddDropdown: PropTypes.func.isRequired,\n  onToggleDeleteDropdown: PropTypes.func.isRequired,\n  onToggleAssignSessionModal: PropTypes.func.isRequired,\n  onToggleAssignLessonsModal: PropTypes.func.isRequired,\n  onToggleAssignWorksheetsModal: PropTypes.func.isRequired,\n  onToggleAssignTestSectionModal: PropTypes.func.isRequired,\n  onToggleAssignSimulatedSatModal: PropTypes.func.isRequired,\n}\n\nexport default CalendarRow;"]},"metadata":{},"sourceType":"module"}