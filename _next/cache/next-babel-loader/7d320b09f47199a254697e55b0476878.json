{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestAnswerSheetComplete/components/WritingPage/components/Bubble/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport update from \"immutability-helper\";\nconst styles = {\n  red: {\n    position: \"relative\",\n    color: \"#fff\",\n    borderColor: \"#fff\",\n    border: \"1px solid\",\n    backgroundColor: \"#db1d41\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\"\n  },\n  greenFilled: {\n    position: \"relative\",\n    color: \"#fff\",\n    borderColor: \"#32955c\",\n    border: \"1px solid\",\n    backgroundColor: \"#32955c\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\"\n  },\n  greenBorderOnly: {\n    position: \"relative\",\n    color: \"#32955c\",\n    border: \"1px solid #32955c\",\n    backgroundColor: \"#fff\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\"\n  },\n  plain: {\n    position: \"relative\",\n    color: \"#a6a8ab\",\n    border: \"1px solid #a6a8ab\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\"\n  },\n  blueFilled: {\n    position: \"relative\",\n    color: \"#fff\",\n    border: \"1px solid #40c4ff\",\n    backgroundColor: \"#40c4ff\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\"\n  }\n};\n\nclass BubbleGroup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const {\n        problem\n      } = this.props;\n\n      if (!problem.student_answer) {\n        return;\n      }\n\n      const cells = this.state.problemCells;\n      let selectedIndex = -1;\n      cells.map((cell, index) => {\n        if (cell.label === problem.student_answer) {\n          cells[index] = _objectSpread({}, cell, {\n            selected: true\n          });\n          selectedIndex = index;\n        }\n      });\n      return this.setState({\n        problemCells: [...cells],\n        selectedIndex\n      });\n    });\n\n    _defineProperty(this, \"handleClickBadge\", index => {\n      const currentBadge = this.state.problemCells[index];\n      const selectedIndex = this.state.selectedIndex;\n\n      if (selectedIndex === -1) {\n        const updatedProblemCells = update(this.state.problemCells, {\n          [index]: {\n            selected: {\n              $set: !currentBadge.selected\n            }\n          }\n        });\n        return this.onSaveStudentAnswer(updatedProblemCells, index);\n      }\n\n      const updatedProblemCells = update(this.state.problemCells, {\n        [index]: {\n          selected: {\n            $set: !currentBadge.selected\n          }\n        },\n        [selectedIndex]: {\n          selected: {\n            $set: false\n          }\n        }\n      });\n\n      if (selectedIndex === index) {\n        return this.onSaveStudentAnswer(updatedProblemCells, -1);\n      }\n\n      return this.onSaveStudentAnswer(updatedProblemCells, index);\n    });\n\n    _defineProperty(this, \"onSaveStudentAnswer\", (updatedProblemCells, index) => {\n      const {\n        onAddStudentAnswerToTest,\n        problem,\n        testSection\n      } = this.props;\n      this.setState({\n        problemCells: updatedProblemCells,\n        selectedIndex: index\n      });\n      const label = index === -1 ? null : this.state.problemCells[index].label;\n      onAddStudentAnswerToTest(problem, label, testSection.student_test_id);\n    });\n\n    _defineProperty(this, \"mapEmptyBubbles\", id => {\n      const letters = [\"A\", \"B\", \"C\", \"D\"];\n      return letters.map((letter, index) => __jsx(\"li\", {\n        key: letter,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: () => this.handleClickBadge(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, __jsx(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        htmlFor: `${id}${letter}`,\n        style: this.renderBubbleStyle(letter),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        style: {\n          cursor: \"pointer\",\n          display: \"block\",\n          marginTop: \"2px\",\n          paddingLeft: \"4.5px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, letter)))));\n    });\n\n    _defineProperty(this, \"renderBubbleStyle\", letter => {\n      const {\n        problem: {\n          correct_answer,\n          student_answer\n        }\n      } = this.props;\n      const {\n        selectedIndex,\n        problemCells\n      } = this.state;\n      const selectedAnswer = problemCells[selectedIndex] ? problemCells[selectedIndex].label : null;\n      const studentAnswer = student_answer || selectedAnswer;\n\n      if (studentAnswer === letter && studentAnswer === correct_answer) {\n        return styles.greenFilled;\n      }\n\n      if (studentAnswer === letter && studentAnswer !== correct_answer && correct_answer) {\n        return styles.red;\n      }\n\n      if (letter !== studentAnswer && letter === correct_answer) {\n        return styles.greenBorderOnly;\n      }\n\n      if (!correct_answer && studentAnswer === letter) {\n        return styles.blueFilled;\n      }\n\n      return styles.plain;\n    });\n\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [{\n        id: 0,\n        label: \"A\",\n        selected: false\n      }, {\n        id: 1,\n        label: \"B\",\n        selected: false\n      }, {\n        id: 2,\n        label: \"C\",\n        selected: false\n      }, {\n        id: 3,\n        label: \"D\",\n        selected: false\n      }]\n    };\n  }\n  /**\n   * This exists to revert the user's answser choice if request fails but it is slow to update. Needs better solution in the future.\n   */\n\n\n  static getDerivedStateFromProps(props, state) {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    const {\n      problem: {\n        student_answer\n      }\n    } = props;\n    const {\n      problemCells,\n      selectedIndex\n    } = state;\n\n    if (letters.indexOf(student_answer) !== selectedIndex) {\n      const revertedProblemCells = problemCells.map((cell, index) => {\n        if (index === letters.indexOf(student_answer)) {\n          cell.selected = true;\n          return cell;\n        }\n\n        if (cell.selected) {\n          cell.selected = false;\n          return cell;\n        }\n\n        return cell;\n      });\n      return {\n        selectedIndex: letters.indexOf(student_answer),\n        problemCells: revertedProblemCells\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      problem: {\n        test_problem_id\n      }\n    } = this.props;\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, this.mapEmptyBubbles(test_problem_id));\n  }\n\n}\n\nBubbleGroup.propTypes = {\n  problem: PropTypes.object.isRequired\n};\nexport default BubbleGroup;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestAnswerSheetComplete/components/WritingPage/components/Bubble/index.js"],"names":["React","PropTypes","update","styles","red","position","color","borderColor","border","backgroundColor","height","width","borderRadius","greenFilled","greenBorderOnly","plain","blueFilled","BubbleGroup","Component","constructor","props","problem","student_answer","cells","state","problemCells","selectedIndex","map","cell","index","label","selected","setState","currentBadge","updatedProblemCells","$set","onSaveStudentAnswer","onAddStudentAnswerToTest","testSection","student_test_id","id","letters","letter","cursor","handleClickBadge","renderBubbleStyle","display","marginTop","paddingLeft","correct_answer","selectedAnswer","studentAnswer","getDerivedStateFromProps","indexOf","revertedProblemCells","render","test_problem_id","mapEmptyBubbles","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport update from \"immutability-helper\";\n\nconst styles = {\n  red: {\n    position: \"relative\",\n    color: \"#fff\",\n    borderColor: \"#fff\",\n    border: \"1px solid\",\n    backgroundColor: \"#db1d41\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  greenFilled: {\n    position: \"relative\",\n    color: \"#fff\",\n    borderColor: \"#32955c\",\n    border: \"1px solid\",\n    backgroundColor: \"#32955c\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  greenBorderOnly: {\n    position: \"relative\",\n    color: \"#32955c\",\n    border: \"1px solid #32955c\",\n    backgroundColor: \"#fff\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  plain: {\n    position: \"relative\",\n    color: \"#a6a8ab\",\n    border: \"1px solid #a6a8ab\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  blueFilled: {\n    position: \"relative\",\n    color: \"#fff\",\n    border: \"1px solid #40c4ff\",\n    backgroundColor: \"#40c4ff\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n};\n\nclass BubbleGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [\n        {\n          id: 0,\n          label: \"A\",\n          selected: false,\n        },\n        {\n          id: 1,\n          label: \"B\",\n          selected: false,\n        },\n        {\n          id: 2,\n          label: \"C\",\n          selected: false,\n        },\n        {\n          id: 3,\n          label: \"D\",\n          selected: false,\n        },\n      ],\n    };\n  }\n\n  /**\n   * This exists to revert the user's answser choice if request fails but it is slow to update. Needs better solution in the future.\n   */\n  static getDerivedStateFromProps(props, state) {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    const { problem: { student_answer } } = props;\n    const { problemCells, selectedIndex } = state;\n    if (letters.indexOf(student_answer) !== selectedIndex) {\n      const revertedProblemCells = problemCells.map((cell, index) => {\n        if (index === letters.indexOf(student_answer)) {\n          cell.selected = true;\n          return cell;\n        }\n        if (cell.selected) {\n          cell.selected = false;\n          return cell;\n        }\n        return cell;\n      });\n      return { selectedIndex: letters.indexOf(student_answer), problemCells: revertedProblemCells };\n    }\n    return null\n  }\n\n  componentDidMount = () => {\n    const { problem } = this.props;\n    if (!problem.student_answer) {\n      return;\n    }\n    const cells = this.state.problemCells;\n    let selectedIndex = -1;\n    cells.map((cell, index) => {\n      if (cell.label === problem.student_answer) {\n        cells[index] = { ...cell, selected: true };\n        selectedIndex = index;\n      }\n    });\n    return this.setState({ problemCells: [...cells], selectedIndex });\n  };\n\n  handleClickBadge = (index) => {\n    const currentBadge = this.state.problemCells[index];\n    const selectedIndex = this.state.selectedIndex;\n    if (selectedIndex === -1) {\n      const updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n      return this.onSaveStudentAnswer(updatedProblemCells, index);\n    }\n    const updatedProblemCells = update(this.state.problemCells, {\n      [index]: { selected: { $set: !currentBadge.selected } },\n      [selectedIndex]: { selected: { $set: false } },\n    });\n    if (selectedIndex === index) {\n      return this.onSaveStudentAnswer(updatedProblemCells, -1);\n    }\n    return this.onSaveStudentAnswer(updatedProblemCells, index);\n  };\n\n  onSaveStudentAnswer = (updatedProblemCells, index) => {\n    const { onAddStudentAnswerToTest, problem, testSection } = this.props;\n    this.setState({ problemCells: updatedProblemCells, selectedIndex: index });\n    const label = index === -1 ? null : this.state.problemCells[index].label;\n    onAddStudentAnswerToTest(problem, label, testSection.student_test_id);\n  };\n\n  mapEmptyBubbles = id => {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    return letters.map((letter, index) => (\n      <li\n        key={letter}\n        style={{ cursor: \"pointer\" }}\n        onClick={() => this.handleClickBadge(index)}\n      >\n        <form>\n          <label\n            htmlFor={`${id}${letter}`}\n            style={this.renderBubbleStyle(letter)}\n          >\n            <span style={{ cursor: \"pointer\", display: \"block\", marginTop: \"2px\", paddingLeft: \"4.5px\" }}>\n              {letter}\n            </span>\n          </label>\n        </form>\n      </li>\n    ));\n  };\n\n  renderBubbleStyle = letter => {\n    const {\n      problem: { correct_answer, student_answer },\n    } = this.props;\n    const { selectedIndex, problemCells } = this.state;\n    const selectedAnswer = problemCells[selectedIndex] ? problemCells[selectedIndex].label : null;\n    const studentAnswer = student_answer || selectedAnswer;\n    if (studentAnswer === letter && studentAnswer === correct_answer) {\n      return styles.greenFilled;\n    }\n    if (studentAnswer === letter && studentAnswer !== correct_answer && correct_answer) {\n      return styles.red;\n    }\n    if (letter !== studentAnswer && letter === correct_answer) {\n      return styles.greenBorderOnly;\n    }\n    if (!correct_answer && studentAnswer === letter) {\n      return styles.blueFilled;\n    }\n    return styles.plain;\n  };\n\n  render() {\n    const {\n      problem: { test_problem_id },\n    } = this.props;\n    return <React.Fragment>{this.mapEmptyBubbles(test_problem_id)}</React.Fragment>;\n  }\n}\n\nBubbleGroup.propTypes = {\n  problem: PropTypes.object.isRequired,\n};\n\nexport default BubbleGroup;\n"]},"metadata":{},"sourceType":"module"}