{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestStrengthsAndWeakesses/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport StrengthsWeaknessesNavBar from './components/StrengthsWeaknessesNavBar';\nimport ReadingPage from './components/ReadingPage';\nimport WritingPage from './components/WritingPage';\nimport MathPage from './components/MathPage';\nimport SubjectsCard from './components/SubjectsCard';\nimport { makeSelectActiveTestScores } from '../index/selectors';\nimport { fetchStudentTestScoreApi } from '../index/api';\n\nclass DetailTestAnswerSheetComplete extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getComponentImages\", () => new _Promise(async resolve => {\n      const circleImageList = [];\n      let barImageList = [];\n      const circleRefs = [{\n        id: 'analysisReadingCicleImg'\n      }, {\n        id: 'analysisWritingCircleImg'\n      }, {\n        id: 'analysisMathCircleImg'\n      }];\n      const barRefs = [{\n        id: 'readingAnalysisBarImg',\n        state: 'reading'\n      }, {\n        id: 'writingAnalysisBarImg',\n        state: 'writing'\n      }, {\n        id: 'mathAnalysisBarImg',\n        state: 'math'\n      }];\n      const getCircleImagesPromise = circleRefs.reduce((accumulatorPromise, circleRef) => accumulatorPromise.then(async () => {\n        const [currentImg] = await _Promise.all([this.onHandleTargetImage(circleRef.id)]);\n        circleImageList.push(currentImg);\n      }).catch(console.error), _Promise.resolve());\n      barImageList = await _Promise.all(barRefs.map(async barRef => await this.getData(barRef)));\n      getCircleImagesPromise.then(() => {\n        const imgList = {\n          circleImageList,\n          barImageList\n        };\n        resolve(imgList);\n      });\n    }));\n\n    _defineProperty(this, \"getData\", item => new _Promise(async resolve => {\n      setTimeout(() => {\n        this.setState({\n          activeSlide: item.state\n        }, async () => {\n          const [currentImg] = await _Promise.all([this.onHandleTargetImage(item.id)]);\n          if (currentImg) resolve(currentImg);\n        });\n      }, 500);\n    }));\n\n    _defineProperty(this, \"onHandleTargetImage\", async currentRef => new _Promise(async resolve => {\n      const {\n        getTargetImage\n      } = this.props;\n      const [currentImg] = await _Promise.all([getTargetImage(document.getElementById(currentRef))]);\n      resolve(currentImg);\n    }));\n\n    _defineProperty(this, \"onSetActiveSlide\", activeSlide => this.setState({\n      activeSlide\n    }));\n\n    _defineProperty(this, \"renderCurrentSlide\", () => {\n      const {\n        activeSlide,\n        readingScores,\n        mathScores,\n        writingScores\n      } = this.state;\n\n      if (activeSlide === 'reading') {\n        return __jsx(ReadingPage, {\n          scores: readingScores,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        });\n      }\n\n      if (activeSlide === 'writing') {\n        return __jsx(WritingPage, {\n          scores: writingScores,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        });\n      }\n\n      if (activeSlide === 'math') {\n        return __jsx(MathPage, {\n          scores: mathScores,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        });\n      }\n\n      return null;\n    });\n\n    this.state = {\n      activeSlide: 'reading',\n      readingScores: null,\n      writingScores: null,\n      mathScores: null\n    };\n  }\n\n  async componentDidMount() {\n    this.props.onRef(this);\n    const {\n      activeTestScores\n    } = this.props;\n    let fetchedScores = {};\n\n    if (!this.props.activeTestScores) {\n      const {\n        test,\n        activeStudent\n      } = this.props;\n      const response = await fetchStudentTestScoreApi(activeStudent.id, test.student_test_id);\n\n      if (response && !response.message) {\n        fetchedScores = response.categories;\n      }\n    }\n\n    const categories = activeTestScores ? activeTestScores.categories : fetchedScores;\n\n    if (categories && categories.length !== 0) {\n      categories.map(category => {\n        switch (category.name) {\n          case 'Writing':\n            this.setState({\n              writingScores: category\n            });\n            break;\n\n          case 'Math':\n            this.setState({\n              mathScores: category\n            });\n            break;\n\n          case 'Reading':\n            this.setState({\n              readingScores: category\n            });\n            break;\n\n          default:\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  render() {\n    const {\n      activeSlide,\n      readingScores,\n      mathScores,\n      writingScores\n    } = this.state;\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, __jsx(SubjectsCard, {\n      readingScores: readingScores,\n      writingScores: writingScores,\n      mathScores: mathScores,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"card-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Details\"), __jsx(\"div\", {\n      className: \"card-main-full card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"slick-tabs-gallery\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, __jsx(StrengthsWeaknessesNavBar, {\n      activeSlide: activeSlide,\n      onSetActiveSlide: this.onSetActiveSlide,\n      scores: {\n        readingScores,\n        mathScores,\n        writingScores\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"main-slick\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, this.renderCurrentSlide())))));\n  }\n\n}\n\nDetailTestAnswerSheetComplete.propTypes = {\n  getTargetImage: PropTypes.func.isRequired,\n  activeTestScores: PropTypes.object.isRequired\n};\nconst mapStateToProps = createStructuredSelector({\n  activeTestScores: makeSelectActiveTestScores()\n});\nconst withConnect = connect(mapStateToProps, null);\nexport default compose(withConnect)(DetailTestAnswerSheetComplete);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestStrengthsAndWeakesses/index.js"],"names":["React","PropTypes","connect","compose","createStructuredSelector","StrengthsWeaknessesNavBar","ReadingPage","WritingPage","MathPage","SubjectsCard","makeSelectActiveTestScores","fetchStudentTestScoreApi","DetailTestAnswerSheetComplete","Component","constructor","props","resolve","circleImageList","barImageList","circleRefs","id","barRefs","state","getCircleImagesPromise","reduce","accumulatorPromise","circleRef","then","currentImg","all","onHandleTargetImage","push","catch","console","error","map","barRef","getData","imgList","item","setTimeout","setState","activeSlide","currentRef","getTargetImage","document","getElementById","readingScores","mathScores","writingScores","componentDidMount","onRef","activeTestScores","fetchedScores","test","activeStudent","response","student_test_id","message","categories","length","category","name","componentWillUnmount","undefined","render","onSetActiveSlide","renderCurrentSlide","propTypes","func","isRequired","object","mapStateToProps","withConnect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport StrengthsWeaknessesNavBar from './components/StrengthsWeaknessesNavBar';\nimport ReadingPage from './components/ReadingPage';\nimport WritingPage from './components/WritingPage';\nimport MathPage from './components/MathPage';\nimport SubjectsCard from './components/SubjectsCard';\n\nimport { makeSelectActiveTestScores } from '../index/selectors';\nimport { fetchStudentTestScoreApi } from '../index/api';\n\nclass DetailTestAnswerSheetComplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSlide: 'reading',\n      readingScores: null,\n      writingScores: null,\n      mathScores: null,\n    };\n  }\n\n  async componentDidMount() {\n    this.props.onRef(this);\n    const { activeTestScores } = this.props;\n    let fetchedScores = {};\n    if (!this.props.activeTestScores) {\n      const { test, activeStudent } = this.props;\n      const response = await fetchStudentTestScoreApi(activeStudent.id, test.student_test_id);\n      if (response && !response.message) {\n        fetchedScores = response.categories;\n      }\n    }\n    const categories = activeTestScores ? activeTestScores.categories : fetchedScores;\n    if (categories && categories.length !== 0) {\n      categories.map(category => {\n        switch (category.name) {\n          case 'Writing':\n            this.setState({\n              writingScores: category,\n            });\n            break;\n          case 'Math':\n            this.setState({\n              mathScores: category,\n            });\n            break;\n          case 'Reading':\n            this.setState({\n              readingScores: category,\n            });\n            break;\n          default:\n        }\n      });\n    }\n  }\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  getComponentImages = () =>\n    new Promise(async resolve => {\n      const circleImageList = [];\n      let barImageList = [];\n      const circleRefs = [\n        { id: 'analysisReadingCicleImg' },\n        { id: 'analysisWritingCircleImg' },\n        { id: 'analysisMathCircleImg' },\n      ];\n      const barRefs = [\n        { id: 'readingAnalysisBarImg', state: 'reading' },\n        { id: 'writingAnalysisBarImg', state: 'writing' },\n        { id: 'mathAnalysisBarImg', state: 'math' },\n      ];\n\n      const getCircleImagesPromise = circleRefs.reduce(\n        (accumulatorPromise, circleRef) =>\n          accumulatorPromise\n            .then(async () => {\n              const [currentImg] = await Promise.all([this.onHandleTargetImage(circleRef.id)]);\n              circleImageList.push(currentImg);\n            })\n            .catch(console.error),\n        Promise.resolve(),\n      );\n      barImageList = await Promise.all(barRefs.map(async barRef => await this.getData(barRef)));\n      getCircleImagesPromise.then(() => {\n        const imgList = { circleImageList, barImageList };\n        resolve(imgList);\n      });\n    });\n  getData = item =>\n    new Promise(async resolve => {\n      setTimeout(() => {\n        this.setState({ activeSlide: item.state }, async () => {\n          const [currentImg] = await Promise.all([this.onHandleTargetImage(item.id)]);\n          if (currentImg) resolve(currentImg);\n        });\n      }, 500);\n    });\n\n  onHandleTargetImage = async currentRef =>\n    new Promise(async resolve => {\n      const { getTargetImage } = this.props;\n      const [currentImg] = await Promise.all([getTargetImage(document.getElementById(currentRef))]);\n      resolve(currentImg);\n    });\n\n  onSetActiveSlide = activeSlide => this.setState({ activeSlide });\n\n  renderCurrentSlide = () => {\n    const { activeSlide, readingScores, mathScores, writingScores } = this.state;\n    if (activeSlide === 'reading') {\n      return <ReadingPage scores={readingScores} />;\n    }\n    if (activeSlide === 'writing') {\n      return <WritingPage scores={writingScores} />;\n    }\n    if (activeSlide === 'math') {\n      return <MathPage scores={mathScores} />;\n    }\n    return null;\n  };\n\n  render() {\n    const { activeSlide, readingScores, mathScores, writingScores } = this.state;\n    return (\n      <React.Fragment>\n        <SubjectsCard\n          readingScores={readingScores}\n          writingScores={writingScores}\n          mathScores={mathScores}\n        />\n        <div className=\"card-block\">\n          <h2>Details</h2>\n          <div className=\"card-main-full card\">\n            <div className=\"slick-tabs-gallery\">\n              <StrengthsWeaknessesNavBar\n                activeSlide={activeSlide}\n                onSetActiveSlide={this.onSetActiveSlide}\n                scores={{ readingScores, mathScores, writingScores }}\n              />\n            </div>\n            <div className=\"card-content\">\n              <div className=\"main-slick\">\n                {this.renderCurrentSlide()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nDetailTestAnswerSheetComplete.propTypes = {\n  getTargetImage: PropTypes.func.isRequired,\n  activeTestScores: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  activeTestScores: makeSelectActiveTestScores(),\n});\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect)(DetailTestAnswerSheetComplete);\n"]},"metadata":{},"sourceType":"module"}