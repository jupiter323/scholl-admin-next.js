{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\n\nvar AnswerRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnswerRow, _React$Component);\n\n  function AnswerRow(props) {\n    var _this;\n\n    _classCallCheck(this, AnswerRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnswerRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenQuestionModal\", function () {\n      return _this.setState({\n        open: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseQuestionModal\", function () {\n      return _this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapLetterBubbles\", function (_ref) {\n      var index = _ref.index;\n      var letters = [\"A\", \"B\", \"C\", \"D\"];\n      var sampleAnswers = _this.props.sampleAnswers;\n      var _sampleAnswers$index = sampleAnswers[index],\n          studentChoice = _sampleAnswers$index.studentChoice,\n          answer = _sampleAnswers$index.answer;\n      return letters.map(function (letter) {\n        if (letter === answer && letter === studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: '#fff',\n              borderColor: '#32955c',\n              backgroundColor: '#3eb777'\n            }\n          }, letter));\n        }\n\n        if (letter === answer && letter !== studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: '#32955c',\n              borderColor: '#32955c',\n              backgrounColor: '#fff'\n            }\n          }, letter));\n        }\n\n        if (letter !== answer && letter === studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: '#fff',\n              borderColor: '#ad1e3e',\n              backgroundColor: '#db1d41'\n            }\n          }, letter));\n        }\n\n        return React.createElement(\"li\", {\n          key: letter\n        }, React.createElement(\"span\", {\n          className: \"badge-circle badge-circle-bordered\"\n        }, letter));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapNumberBubbles\", function (_ref2) {\n      var index = _ref2.index;\n      var sampleAnswers = _this.props.sampleAnswers;\n      var _sampleAnswers$index2 = sampleAnswers[index],\n          answer = _sampleAnswers$index2.answer,\n          studentChoice = _sampleAnswers$index2.studentChoice;\n\n      if (answer === studentChoice) {\n        return React.createElement(\"li\", {\n          key: answer\n        }, React.createElement(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: {\n            color: '#fff',\n            borderColor: '#32955c',\n            backgroundColor: '#3eb777'\n          }\n        }, answer));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", {\n        key: studentChoice\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#fff',\n          borderColor: '#ad1e3e',\n          backgroundColor: '#db1d41'\n        }\n      }, studentChoice)), React.createElement(\"li\", {\n        key: answer\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#32955c',\n          borderColor: '#32955c',\n          backgroundColor: '#fff'\n        }\n      }, answer)));\n    });\n\n    _this.state = {\n      open: false\n    };\n    return _this;\n  }\n\n  _createClass(AnswerRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          index = _this$props.index,\n          question = _this$props.question;\n      var open = this.state.open;\n      return React.createElement(\"div\", {\n        className: \"rightsec activesection padleft clearfix\"\n      }, React.createElement(\"div\", {\n        className: \"boxgroup\"\n      }, React.createElement(\"div\", {\n        className: \"question_tbl\"\n      }, React.createElement(\"div\", {\n        className: \"box\"\n      }, React.createElement(\"div\", {\n        className: \"tableoption clearfix\"\n      }, React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col l4 m4 s12\"\n      }, React.createElement(\"div\", {\n        className: \"opt_list truefalse\"\n      }, React.createElement(\"p\", null, \"1\"), React.createElement(\"ul\", null, React.createElement(\"li\", null, React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"a\",\n        id: \"a\"\n      }), React.createElement(\"label\", {\n        htmlFor: \"a\"\n      })), React.createElement(\"li\", {\n        className: \"true\"\n      }, React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"a\",\n        id: \"b\"\n      }), React.createElement(\"label\", {\n        htmlFor: \"b\"\n      })), React.createElement(\"li\", {\n        className: \"false\"\n      }, React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"a\",\n        id: \"c\"\n      }), React.createElement(\"label\", {\n        htmlFor: \"c\"\n      })), React.createElement(\"li\", null, React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"a\",\n        id: \"d\"\n      }), React.createElement(\"label\", {\n        htmlFor: \"d\"\n      }))), React.createElement(\"a\", {\n        href: \"\",\n        className: \"comment_icon\"\n      }, React.createElement(\"img\", {\n        src: \"/images/note_icon_blue.png\",\n        alt: \"\"\n      }))))))))));\n    }\n  }]);\n\n  return AnswerRow;\n}(React.Component);\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  sampleAnswers: PropTypes.array.isRequired\n};\nexport default AnswerRow; //     <React.Fragment>\n//     <QuestionModal open={open} onOpenQuestionModal={this.onOpenQuestionModal} onCloseQuestionModal={this.onCloseQuestionModal} question={question}/>\n//   <li className=\"answers-list-holder\" key={question.problem}>\n//     <div className=\"answer-row row mb-0\">\n//       <div className=\"col col-120\">\n//         <ul className=\"answer-list\" >\n//           <Choose>\n//             <When condition={!question.numeric}>\n//             {this.mapLetterBubbles({index})}\n//             </When>\n//             <Otherwise>\n//             {this.mapNumberBubbles({index})}\n//             </Otherwise>\n//           </Choose>\n//          </ul>\n//       </div>\n//       <div className=\"col col-30\">\n//         <span className=\"status-info\">{question.status}</span>\n//       </div>\n//       <div className=\"col col-43\">\n//         <span className=\"play-progress\" data-video-id=\"video001\">\n//           <span className=\"play\"></span>\n//           <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n//             <circle className=\"circle-static\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n//             <circle className=\"circle-progress\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n//           </svg>\n//         </span>\n//       </div>\n//       <div className=\"col col-auto\">\n//         <If condition={question.flagged}>\n//             <span className=\"status-answer\" style={{color: '#c0272d'}}>\n//               <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n//             </span>\n//         </If>\n//       </div>\n//       <div className=\"dropdown-block col col-35\">\n//         <a className='modal-trigger' href=\"#\" onClick={this.onOpenQuestionModal}><i className=\"material-icons dots-icon\">more_vert</i></a>\n//       </div>\n//     </div>\n//     <If condition={question.studentNotes}>\n//       <div className=\"comment-block\">\n//         <p>{question.studentNotes}</p>\n//       </div>\n//     </If>\n//   </li>\n// </React.Fragment>","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailTestAnswerSheetComplete\\components\\WritingPage\\components\\AnswerRow\\index.js"],"names":["React","PropTypes","QuestionModal","AnswerRow","props","setState","open","index","letters","sampleAnswers","studentChoice","answer","map","letter","color","borderColor","backgroundColor","backgrounColor","state","question","Component","propTypes","object","isRequired","number","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n     }\n  };\n  onOpenQuestionModal = () => this.setState({open: true})\n  onCloseQuestionModal = () => this.setState({open: false});\n\n\n  mapLetterBubbles = ({index}) => {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    const { sampleAnswers } = this.props;\n    const { studentChoice, answer } = sampleAnswers[index];\n    return letters.map(letter => {\n      if (letter === answer && letter === studentChoice){\n        return (\n          <li key={letter}>\n          <span className=\"badge-circle badge-circle-bordered\"  style={{color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777'}}>{letter}</span>\n        </li>\n        )\n      }\n      if (letter === answer && letter !== studentChoice){\n        return (\n          <li key={letter}>\n            <span className=\"badge-circle badge-circle-bordered\" style={{color: '#32955c', borderColor: '#32955c', backgrounColor: '#fff'}}>{letter}</span>\n          </li>\n        )\n      }\n      if (letter !== answer && letter === studentChoice){\n        return (\n          <li key={letter}>\n            <span className=\"badge-circle badge-circle-bordered\" style={{color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41'}}>{letter}</span>\n          </li>\n        )\n      }\n      return (\n          <li key={letter}>\n            <span className=\"badge-circle badge-circle-bordered\">{letter}</span>\n          </li>\n        )\n      }\n    )\n  };\n\n  mapNumberBubbles = ({ index} ) => {\n    const { sampleAnswers } = this.props;\n    const { answer, studentChoice }= sampleAnswers[index];\n          if ( answer === studentChoice) {\n        return (\n          <li key={answer}>\n            <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777'}}>{answer}</span>\n          </li>\n        )\n      }\n      return (\n          <React.Fragment>\n            <li key={studentChoice}>\n              <span className=\"badge badge-rounded badge-rounded-bordered\"  style={{color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41'}}>{studentChoice}</span>\n            </li>\n            <li key={answer} >\n              <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#32955c', borderColor: '#32955c', backgroundColor: '#fff'}}>{answer}</span>\n            </li>\n          </React.Fragment>\n        )\n      };\n\n      render() {\n        const { index, question } = this.props;\n        const { open } = this.state;\n        return (\n          <div className=\"rightsec activesection padleft clearfix\">\n        <div className=\"boxgroup\">\n          <div className=\"question_tbl\">\n            <div className=\"box\">\n              <div className=\"tableoption clearfix\">\n                <div className=\"row\">\n                  <div className=\"col l4 m4 s12\">\n                    <div className=\"opt_list truefalse\">\n                      <p>1</p>\n                      <ul>\n                        <li>\n                          <input type=\"radio\" name=\"a\" id=\"a\" />\n                          <label htmlFor=\"a\"></label>\n                        </li>\n                        <li className=\"true\">\n                          <input type=\"radio\" name=\"a\" id=\"b\" />\n                          <label htmlFor=\"b\"></label>\n                        </li>\n                        <li className=\"false\">\n                          <input type=\"radio\" name=\"a\" id=\"c\" />\n                          <label htmlFor=\"c\"></label>\n                        </li>\n                        <li>\n                          <input type=\"radio\" name=\"a\" id=\"d\" />\n                          <label htmlFor=\"d\"></label>\n                        </li>\n                      </ul>\n                      <a href=\"\" className=\"comment_icon\"><img src=\"/images/note_icon_blue.png\" alt=\"\" /></a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n          )\n        }\n      }\n      \n      AnswerRow.propTypes = {\n        question: PropTypes.object.isRequired,\n        index: PropTypes.number.isRequired,\n        sampleAnswers: PropTypes.array.isRequired,\n      }\n      \n      export default AnswerRow;\n      \n      //     <React.Fragment>\n      //     <QuestionModal open={open} onOpenQuestionModal={this.onOpenQuestionModal} onCloseQuestionModal={this.onCloseQuestionModal} question={question}/>\n      //   <li className=\"answers-list-holder\" key={question.problem}>\n      //     <div className=\"answer-row row mb-0\">\n      //       <div className=\"col col-120\">\n      //         <ul className=\"answer-list\" >\n      //           <Choose>\n      //             <When condition={!question.numeric}>\n      //             {this.mapLetterBubbles({index})}\n      //             </When>\n      //             <Otherwise>\n      //             {this.mapNumberBubbles({index})}\n      //             </Otherwise>\n      //           </Choose>\n      //          </ul>\n      //       </div>\n      //       <div className=\"col col-30\">\n      //         <span className=\"status-info\">{question.status}</span>\n      //       </div>\n      //       <div className=\"col col-43\">\n      //         <span className=\"play-progress\" data-video-id=\"video001\">\n      //           <span className=\"play\"></span>\n      //           <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n      //             <circle className=\"circle-static\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n      //             <circle className=\"circle-progress\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n      //           </svg>\n      //         </span>\n      //       </div>\n      //       <div className=\"col col-auto\">\n      //         <If condition={question.flagged}>\n      //             <span className=\"status-answer\" style={{color: '#c0272d'}}>\n      //               <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n      //             </span>\n      //         </If>\n      //       </div>\n      //       <div className=\"dropdown-block col col-35\">\n\n      //         <a className='modal-trigger' href=\"#\" onClick={this.onOpenQuestionModal}><i className=\"material-icons dots-icon\">more_vert</i></a>\n      //       </div>\n      //     </div>\n      //     <If condition={question.studentNotes}>\n      //       <div className=\"comment-block\">\n      //         <p>{question.studentNotes}</p>\n      //       </div>\n      //     </If>\n      //   </li>\n      // </React.Fragment>\n"]},"metadata":{},"sourceType":"module"}