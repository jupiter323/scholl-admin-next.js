{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport ScoredTestCard from './components/ScoredTestCard';\nimport FilterSection from './components/FilterSection';\nimport { availableDateSort, dueDateSort, completionDateSort, flagsSort } from '../utils';\n\nvar ScoredTestListPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ScoredTestListPage, _React$Component);\n\n  function ScoredTestListPage(props) {\n    var _this;\n\n    _classCallCheck(this, ScoredTestListPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScoredTestListPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClearFilters\", function () {\n      return _this.setState({\n        sort: '',\n        testVersionFilter: '',\n        flagFilter: false,\n        availableDateFilters: [],\n        dueDateFilters: []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false,\n        dropdownIndex: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (value) {\n      return _this.setState({\n        testVersionFilter: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function () {\n      return _this.setState({\n        testVersionFilter: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEditTest\", function () {\n      return console.warn('Pending implementation edit test UI and functionality');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResetTest\", function () {\n      return console.warn('Pending implementation of reset UI and functionality');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteTest\", function () {\n      return console.warn('Pending implementation of delete test UI and functionality');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDownloadReport\", function () {\n      return console.warn('Pending implementation of download report ui and functionality');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortTests\", function (testSections) {\n      var sort = _this.state.sort;\n\n      switch (sort) {\n        case 'flags':\n          return testSections.sort(flagsSort);\n\n        case 'dueDate':\n          return testSections.sort(dueDateSort);\n\n        case 'availableDate':\n          return testSections.sort(availableDateSort);\n\n        case 'completionDate':\n          return testSections.sort(completionDateSort);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByTestVersion\", function () {\n      var _this$state = _this.state,\n          tests = _this$state.tests,\n          testVersionFilter = _this$state.testVersionFilter;\n      return tests.reduce(function (finalArr, currentTest) {\n        var version = currentTest.version;\n        var testString = version.replace(/\\s/g, \"\").toLowerCase();\n\n        if (testString.indexOf(testVersionFilter) !== -1 && finalArr.indexOf(currentTest) === -1) {\n          finalArr.push(currentTest);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByDate\", function (incomingTests, dateType) {\n      var _this$state2 = _this.state,\n          dueDateFilters = _this$state2.dueDateFilters,\n          availableDateFilters = _this$state2.availableDateFilters;\n      var dateFilters;\n      var tests = incomingTests;\n      var currentDate = moment().format('MM/DD/YY');\n      var currentDateIndex = new Date().getDay();\n      var endOfWeekIndex = 6 - currentDateIndex;\n      var endOfWeekDate = moment().add(endOfWeekIndex, 'days').format('MM/DD/YY');\n\n      if (dateType === 'dueDate') {\n        dateFilters = dueDateFilters;\n\n        if (dateFilters.indexOf('dueToday') !== -1) {\n          tests = tests.filter(function (test) {\n            return test.dueDate === currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('dueNextSession') !== -1) {\n          console.warn('Pending decision on how next session date is calculated');\n        }\n\n        if (dateFilters.indexOf('overdue') !== -1) {\n          tests = tests.filter(function (test) {\n            return test.dueDate < currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('dueThisWeek') !== -1) {\n          tests = tests.filter(function (test) {\n            return test.dueDate >= currentDate && test.dueDate <= endOfWeekDate;\n          });\n        }\n      } else {\n        dateFilters = availableDateFilters;\n\n        if (dateFilters.indexOf('future') !== -1) {\n          tests = tests.filter(function (test) {\n            return test.availableDate > currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('available') !== -1) {\n          tests = tests.filter(function (test) {\n            return test.availableDate <= currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('complete') !== -1) {\n          tests = tests.filter(function (test) {\n            return test.completionDate.length;\n          });\n        }\n      }\n\n      return tests;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterTests\", function () {\n      var _this$state3 = _this.state,\n          dueDateFilters = _this$state3.dueDateFilters,\n          availableDateFilters = _this$state3.availableDateFilters,\n          flagFilter = _this$state3.flagFilter,\n          allTests = _this$state3.tests;\n      var tests = allTests;\n\n      if (dueDateFilters.length) {\n        tests = _this.onFilterByDate(tests, 'dueDate');\n      }\n\n      if (availableDateFilters.length) {\n        tests = _this.onFilterByDate(tests, 'availableDate');\n      }\n\n      if (flagFilter) {\n        tests = tests.filter(function (testSection) {\n          return testSection.flags.length;\n        });\n      }\n\n      return tests;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMappableTests\", function () {\n      var _this$state4 = _this.state,\n          dueDateFilters = _this$state4.dueDateFilters,\n          availableDateFilters = _this$state4.availableDateFilters,\n          flagFilter = _this$state4.flagFilter,\n          sort = _this$state4.sort,\n          testVersionFilter = _this$state4.testVersionFilter,\n          tests = _this$state4.tests;\n      var mappableTests = tests;\n\n      if (testVersionFilter.length) {\n        mappableTests = _this.onFilterByTestVersion();\n      }\n\n      if (dueDateFilters.length || availableDateFilters.length || flagFilter) {\n        mappableTests = _this.onFilterTests();\n      }\n\n      if (sort) {\n        return _this.onSortTests(mappableTests);\n      }\n\n      return mappableTests;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFilterClick\", function (filterType, filter) {\n      var _this$state5 = _this.state,\n          currentAvailableDateFilters = _this$state5.availableDateFilters,\n          currentDueDateFilters = _this$state5.dueDateFilters,\n          flagFilter = _this$state5.flagFilter;\n      var modifiedFilterCurrentState;\n      var modifiedFilterName;\n      var modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n\n        case 'availableDate':\n          modifiedFilterCurrentState = currentAvailableDateFilters;\n          modifiedFilterName = 'availableDateFilters';\n          break;\n\n        case 'hasFlags':\n          return _this.setState({\n            flagFilter: !flagFilter\n          });\n\n        default:\n          break;\n      }\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        var filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      _this.setState(_defineProperty({}, modifiedFilterName, modifiedFilterUpdatedState));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapScoredTests\", function () {\n      return _this.getMappableTests().map(function (test, index) {\n        return __jsx(ScoredTestCard, {\n          test: test,\n          index: index,\n          key: test.id,\n          onEditTest: _this.onEditTest,\n          onResetTest: _this.onResetTest,\n          onDeleteTest: _this.onDeleteTest,\n          onSetDropdown: _this.onSetDropdown,\n          onCloseDropdown: _this.onCloseDropdown,\n          onDownloadReport: _this.onDownloadReport,\n          dropdownIndex: _this.state.dropdownIndex,\n          dropdownIsOpen: _this.state.dropdownIsOpen\n        });\n      });\n    });\n\n    _this.state = {\n      sort: '',\n      testVersionFilter: '',\n      availableDateFilters: [],\n      dueDateFilters: [],\n      flagFilter: false,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      tests: _this.props.user.scoredTests\n    };\n    return _this;\n  }\n\n  _createClass(ScoredTestListPage, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(FilterSection, {\n        sort: this.state.sort,\n        onSetSort: this.onSetSort,\n        flagFilter: this.state.flagFilter,\n        onClearFilters: this.onClearFilters,\n        handleFilterClick: this.handleFilterClick,\n        dueDateFilters: this.state.dueDateFilters,\n        availableDateFilters: this.state.availableDateFilters,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState\n      }), __jsx(\"div\", {\n        className: \"content-section\"\n      }, __jsx(\"div\", {\n        className: \"row d-flex-content card-width-366\"\n      }, this.mapScoredTests())));\n    }\n  }]);\n\n  return ScoredTestListPage;\n}(React.Component);\n\nScoredTestListPage.propTypes = {\n  user: PropTypes.object.isRequired\n};\nexport default ScoredTestListPage;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/ScoredTestListPage/index.js"],"names":["React","PropTypes","update","moment","ScoredTestCard","FilterSection","availableDateSort","dueDateSort","completionDateSort","flagsSort","ScoredTestListPage","props","sort","setState","testVersionFilter","flagFilter","availableDateFilters","dueDateFilters","dropdownIndex","dropdownIsOpen","value","console","warn","testSections","state","tests","reduce","finalArr","currentTest","version","testString","replace","toLowerCase","indexOf","push","incomingTests","dateType","dateFilters","currentDate","format","currentDateIndex","Date","getDay","endOfWeekIndex","endOfWeekDate","add","filter","test","dueDate","availableDate","completionDate","length","allTests","onFilterByDate","testSection","flags","mappableTests","onFilterByTestVersion","onFilterTests","onSortTests","filterType","currentAvailableDateFilters","currentDueDateFilters","modifiedFilterCurrentState","modifiedFilterName","modifiedFilterUpdatedState","$push","filterIndex","$splice","getMappableTests","map","index","id","onEditTest","onResetTest","onDeleteTest","onSetDropdown","onCloseDropdown","onDownloadReport","user","scoredTests","onSetSort","onClearFilters","handleFilterClick","onSetFilteredState","onUnsetFilteredState","mapScoredTests","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\n\nimport ScoredTestCard from './components/ScoredTestCard';\nimport FilterSection from './components/FilterSection';\n\nimport { availableDateSort, dueDateSort, completionDateSort, flagsSort } from '../utils';\n\nclass ScoredTestListPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sort: '',\n      testVersionFilter: '',\n      availableDateFilters: [],\n      dueDateFilters: [],\n      flagFilter: false,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      tests: this.props.user.scoredTests,\n    };\n  }\n\n  onSetSort = (sort) => this.setState({ sort })\n  onClearFilters = () => this.setState({ sort: '', testVersionFilter: '', flagFilter: false, availableDateFilters: [], dueDateFilters: [] })\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  onSetFilteredState = (value) => this.setState({ testVersionFilter: value })\n  onUnsetFilteredState = () => this.setState({ testVersionFilter: '' })\n\n  onEditTest = () => console.warn('Pending implementation edit test UI and functionality')\n  onResetTest = () => console.warn('Pending implementation of reset UI and functionality')\n  onDeleteTest = () => console.warn('Pending implementation of delete test UI and functionality')\n  onDownloadReport = () => console.warn('Pending implementation of download report ui and functionality')\n\n  // eslint-disable-next-line consistent-return\n  onSortTests = (testSections) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case 'flags':\n        return testSections.sort(flagsSort);\n      case 'dueDate':\n        return testSections.sort(dueDateSort);\n      case 'availableDate':\n        return testSections.sort(availableDateSort);\n      case 'completionDate':\n        return testSections.sort(completionDateSort);\n      default:\n        break;\n    }\n  }\n\n  onFilterByTestVersion = () => {\n    const { tests, testVersionFilter } = this.state;\n    return tests.reduce((finalArr, currentTest) => {\n      const { version } = currentTest;\n      const testString = version.replace(/\\s/g, \"\").toLowerCase();\n      if (testString.indexOf(testVersionFilter) !== -1 && finalArr.indexOf(currentTest) === -1) {\n        finalArr.push(currentTest);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterByDate = (incomingTests, dateType) => {\n    const { dueDateFilters, availableDateFilters } = this.state;\n    let dateFilters;\n    let tests = incomingTests;\n\n    const currentDate = moment().format('MM/DD/YY');\n    const currentDateIndex = new Date().getDay();\n    const endOfWeekIndex = 6 - currentDateIndex;\n    const endOfWeekDate = moment().add(endOfWeekIndex, 'days').format('MM/DD/YY')\n    if (dateType === 'dueDate') {\n      dateFilters = dueDateFilters;\n      if (dateFilters.indexOf('dueToday') !== -1) {\n        tests = tests.filter(test => test.dueDate === currentDate);\n      }\n      if (dateFilters.indexOf('dueNextSession') !== -1) {\n        console.warn('Pending decision on how next session date is calculated');\n      }\n      if (dateFilters.indexOf('overdue') !== -1) {\n        tests = tests.filter(test => test.dueDate < currentDate);\n      }\n      if (dateFilters.indexOf('dueThisWeek') !== -1) {\n        tests = tests.filter(test => test.dueDate >= currentDate && test.dueDate <= endOfWeekDate);\n      }\n    } else {\n      dateFilters = availableDateFilters;\n      if (dateFilters.indexOf('future') !== -1) {\n        tests = tests.filter(test => test.availableDate > currentDate);\n      }\n      if (dateFilters.indexOf('available') !== -1) {\n        tests = tests.filter(test => test.availableDate <= currentDate);\n      }\n      if (dateFilters.indexOf('complete') !== -1) {\n        tests = tests.filter(test => test.completionDate.length);\n      }\n    }\n    return tests;\n  }\n\n  onFilterTests = () => {\n    const { dueDateFilters, availableDateFilters, flagFilter, tests: allTests } = this.state;\n    let tests = allTests;\n    if (dueDateFilters.length) {\n      tests = this.onFilterByDate(tests, 'dueDate');\n    }\n    if (availableDateFilters.length) {\n      tests = this.onFilterByDate(tests, 'availableDate');\n    }\n    if (flagFilter) {\n      tests = tests.filter(testSection => testSection.flags.length);\n    }\n    return tests;\n  }\n\n  getMappableTests = () => {\n    const { dueDateFilters, availableDateFilters, flagFilter, sort, testVersionFilter, tests } = this.state;\n    let mappableTests = tests;\n    if (testVersionFilter.length) {\n      mappableTests = this.onFilterByTestVersion();\n    }\n    if (dueDateFilters.length || availableDateFilters.length || flagFilter) {\n      mappableTests = this.onFilterTests();\n    }\n    if (sort) {\n      return this.onSortTests(mappableTests);\n    }\n    return mappableTests;\n  }\n\n  // eslint-disable-next-line consistent-return\n  handleFilterClick = (filterType, filter) => {\n    const { availableDateFilters: currentAvailableDateFilters, dueDateFilters: currentDueDateFilters, flagFilter } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case 'dueDate':\n        modifiedFilterCurrentState = currentDueDateFilters;\n        modifiedFilterName = 'dueDateFilters';\n        break;\n      case 'availableDate':\n        modifiedFilterCurrentState = currentAvailableDateFilters;\n        modifiedFilterName = 'availableDateFilters';\n        break;\n      case 'hasFlags':\n        return this.setState({ flagFilter: !flagFilter });\n      default:\n        break;\n    }\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[ filterIndex, 1 ]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  }\n\n  mapScoredTests = () => this.getMappableTests().map((test, index) => (\n    <ScoredTestCard\n      test={test}\n      index={index}\n      key={test.id}\n      onEditTest={this.onEditTest}\n      onResetTest={this.onResetTest}\n      onDeleteTest={this.onDeleteTest}\n      onSetDropdown={this.onSetDropdown}\n      onCloseDropdown={this.onCloseDropdown}\n      onDownloadReport={this.onDownloadReport}\n      dropdownIndex={this.state.dropdownIndex}\n      dropdownIsOpen={this.state.dropdownIsOpen}\n    />\n  ))\n\n  render() {\n    return (\n      <React.Fragment>\n        <FilterSection\n          sort={this.state.sort}\n          onSetSort={this.onSetSort}\n          flagFilter={this.state.flagFilter}\n          onClearFilters={this.onClearFilters}\n          handleFilterClick={this.handleFilterClick}\n          dueDateFilters={this.state.dueDateFilters}\n          availableDateFilters={this.state.availableDateFilters}\n          onSetFilteredState={this.onSetFilteredState}\n          onUnsetFilteredState={this.onUnsetFilteredState}\n        />\n        <div className=\"content-section\">\n          <div className=\"row d-flex-content card-width-366\">\n            {this.mapScoredTests()}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nScoredTestListPage.propTypes = {\n  user: PropTypes.object.isRequired,\n};\n\nexport default ScoredTestListPage;\n"]},"metadata":{},"sourceType":"module"}