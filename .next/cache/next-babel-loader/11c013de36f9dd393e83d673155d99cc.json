{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable no-console */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport { toast } from 'react-toastify';\nimport Toast from '../../Toast';\nimport StudentInformation from './components/StudentInformation';\nimport ContactInformation from './components/ContactInformation';\nimport EmailAddress from './components/EmailAddress';\nimport Location from './components/Location';\nimport Instructor from './components/Instructor';\nimport Class from './components/Class';\nimport AccountStatus from './components/AccountStatus';\nimport AccountType from './components/AccountType';\nimport CourseContext from './components/CourseContext';\nimport AccountSettings from './components/AccountSettings';\nimport Actions from './components/Actions';\nimport DeleteAccount from './components/DeleteAccount';\nimport ClassModal from '../ClassModal';\nimport LocationModal from '../../Location/components/LocationModal';\nimport InstructorModal from '../../Instructor/components/InstructorModal';\nimport { nestedEditFieldValidation } from '../../utils/fieldValidation';\n\nvar AccountPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AccountPage, _React$Component);\n\n  function AccountPage(props) {\n    var _this;\n\n    _classCallCheck(this, AccountPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillReceiveProps\", function (nextProps) {\n      if (!_this.state.originalUser || nextProps.user.id !== _this.state.originalUser.id) {\n        var _nextProps$user = nextProps.user;\n        _nextProps$user = _nextProps$user === void 0 ? {} : _nextProps$user;\n        var id = _nextProps$user.id,\n            studentInformation = _nextProps$user.studentInformation,\n            contactInformation = _nextProps$user.contactInformation,\n            emailAddress = _nextProps$user.emailAddress,\n            location = _nextProps$user.location,\n            instructor = _nextProps$user.instructor,\n            course = _nextProps$user.course,\n            courseContext = _nextProps$user.courseContext,\n            accountSettings = _nextProps$user.accountSettings;\n        var updatedUser = {\n          id: id,\n          studentInformation: studentInformation,\n          contactInformation: contactInformation,\n          emailAddress: emailAddress,\n          location: location,\n          instructor: instructor,\n          course: course,\n          courseContext: courseContext,\n          accountSettings: accountSettings\n        };\n        var originalUserState = _this.state.originalUser;\n        var originalUser = update(originalUserState, {\n          $merge: nextProps.user\n        });\n\n        _this.setState({\n          originalUser: originalUser,\n          updatedUser: updatedUser\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenLocationModal\", function () {\n      return _this.setState({\n        locationModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseLocationModal\", function () {\n      return _this.setState({\n        locationModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenInstructorModal\", function () {\n      return _this.setState({\n        instructorModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseInstructorModal\", function () {\n      return _this.setState({\n        instructorModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenClassModal\", function () {\n      return _this.setState({\n        classModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseClassModal\", function () {\n      return _this.setState({\n        classModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetValidation\", function (validation, cb) {\n      return _this.setState({\n        validation: validation\n      }, cb);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveChanges\", function _callee(event) {\n      var updatedUser, valid;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault(); // const { onSavePassageChanges, onSaveChangesError, onSetPassageValidation } = this.props;\n\n              updatedUser = _this.state.updatedUser;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(nestedEditFieldValidation(_this.state, _this.state.updatedUser, _this.onSetValidation, function (validation) {\n                return console.warn('validation', validation);\n              }));\n\n            case 4:\n              valid = _context.sent;\n\n              if (!valid) {\n                // return onSaveChangesError();\n                console.warn('not valid');\n              }\n\n              _this.setState({\n                originalUser: _this.state.updatedUser\n              }); // return onSavePassageChanges(updatedUser);\n\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteAccount\", function () {\n      console.warn('Stubbed out delete user');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSendWelcomeEmail\", function (event) {\n      event.preventDefault();\n      console.warn('Stubbed out send email');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSendPasswordResetEmail\", function (event) {\n      event.preventDefault();\n      console.warn('Stubbed out password reset email');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResetPassword\", function (event) {\n      event.preventDefault();\n      var _this$state$actions = _this.state.actions,\n          password = _this$state$actions.password,\n          confirmPassword = _this$state$actions.confirmPassword;\n\n      if (password !== confirmPassword) {\n        console.warn('Toast is broken, have a console log'); // return this.notify\n      }\n\n      if (!confirmPassword.length) {\n        console.warn('Toast is broken, have a console log'); // return this.notify()\n      }\n\n      return console.warn('stubbed out password reset');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRemoveOption\", function (optionIndex, section, array) {\n      var updatedUser = update(_this.state.updatedUser, _defineProperty({}, section, _defineProperty({}, array, {\n        $splice: [[optionIndex, 1]]\n      })));\n\n      _this.setState({\n        updatedUser: updatedUser\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initialUserMount\", function () {\n      return _this.state.originalUser.id !== _this.props.user.id;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleActionsChange\", function (event, name) {\n      var checkBox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var previousActions = _this.state.actions;\n      var value;\n\n      if (checkBox) {\n        value = !previousActions.ccAdmin;\n      } else {\n        value = event.target.value;\n      }\n\n      var updatedState = update(_this.state, {\n        actions: {\n          $merge: _defineProperty({}, name, value)\n        }\n      });\n\n      _this.setState(updatedState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOptionsChange\", function (selectedOptions, section, array) {\n      var updatedUser = update(_this.state.updatedUser, _defineProperty({}, section, _defineProperty({}, array, {\n        $set: selectedOptions\n      })));\n\n      _this.setState({\n        updatedUser: updatedUser\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDetailsChange\", function (event, name, section) {\n      var checkBox = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var previousUserState = _this.state.updatedUser;\n      var value;\n\n      if (checkBox) {\n        value = !previousUserState[section][name];\n      } else {\n        value = event.target ? event.target.value : event;\n      }\n\n      var updatedUser = update(previousUserState, _defineProperty({}, section, {\n        $merge: _defineProperty({}, name, value)\n      }));\n\n      _this.setState({\n        updatedUser: updatedUser\n      });\n    });\n\n    _this.state = {\n      locationModalOpen: false,\n      instructorModalOpen: false,\n      classModalOpen: false,\n      originalUser: {\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        },\n        instructor: {\n          instructors: []\n        },\n        course: {\n          classes: []\n        },\n        courseContext: {\n          courseStartDateOption: '',\n          courseStartDate: '',\n          courseEndDateOption: '',\n          courseEndDate: '',\n          targetTestDate: '',\n          targetScore: '',\n          highSchool: '',\n          graduationYear: ''\n        },\n        accountSettings: {\n          loginBeforeActivation: false,\n          unstructuredCourseMode: false,\n          defaultSessionDuration: '',\n          videoSolutionsRequired: false,\n          preventLogin: false,\n          inactive: false,\n          excludeFromStatistics: false\n        }\n      },\n      updatedUser: {\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        },\n        instructor: {\n          instructors: []\n        },\n        course: {\n          classes: []\n        },\n        courseContext: {\n          courseStartDateOption: '',\n          courseStartDate: '',\n          courseEndDateOption: '',\n          courseEndDate: '',\n          targetTestDate: '',\n          targetScore: '',\n          highSchool: '',\n          graduationYear: ''\n        },\n        accountSettings: {\n          loginBeforeActivation: false,\n          unstructuredCourseMode: false,\n          defaultSessionDuration: '',\n          videoSolutionsRequired: false,\n          preventLogin: false,\n          inactive: false,\n          excludeFromStatistics: false\n        }\n      },\n      actions: {\n        ccAdmin: false,\n        requireUserToChange: false,\n        password: '',\n        confirmPassword: ''\n      },\n      validation: {\n        studentInformation: {\n          firstName: true,\n          lastName: true,\n          gender: true\n        },\n        emailAddress: {\n          email: true\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(AccountPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$user = this.props.user;\n      _this$props$user = _this$props$user === void 0 ? {} : _this$props$user;\n      var id = _this$props$user.id,\n          studentInformation = _this$props$user.studentInformation,\n          contactInformation = _this$props$user.contactInformation,\n          emailAddress = _this$props$user.emailAddress,\n          location = _this$props$user.location,\n          instructor = _this$props$user.instructor,\n          course = _this$props$user.course,\n          courseContext = _this$props$user.courseContext,\n          accountSettings = _this$props$user.accountSettings;\n      var updatedUser = {\n        id: id,\n        studentInformation: studentInformation,\n        contactInformation: contactInformation,\n        emailAddress: emailAddress,\n        location: location,\n        instructor: instructor,\n        course: course,\n        courseContext: courseContext,\n        accountSettings: accountSettings\n      };\n      var originalUserState = this.state.originalUser;\n      var originalUser = update(originalUserState, {\n        $merge: updatedUser\n      });\n      this.setState({\n        originalUser: originalUser,\n        updatedUser: updatedUser\n      }); // eslint-disable-line\n    } // TODO: This seems to be working well - confirm that only one isntance of this edit modal is opening on the user edit page\n    // This resets the component state to reflect the details of the next user the user clicks on\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          locationModalOpen = _this$state.locationModalOpen,\n          instructorModalOpen = _this$state.instructorModalOpen,\n          classModalOpen = _this$state.classModalOpen,\n          actions = _this$state.actions,\n          _this$state$updatedUs = _this$state.updatedUser,\n          updatedStudentInformation = _this$state$updatedUs.studentInformation,\n          updatedContactInformation = _this$state$updatedUs.contactInformation,\n          updatedEmailAddress = _this$state$updatedUs.emailAddress,\n          updatedLocation = _this$state$updatedUs.location,\n          updatedInstructor = _this$state$updatedUs.instructor,\n          updatedClasses = _this$state$updatedUs.course,\n          updatedCourseContext = _this$state$updatedUs.courseContext,\n          updatedAccountSettings = _this$state$updatedUs.accountSettings;\n      var _this$props$user2 = this.props.user;\n      _this$props$user2 = _this$props$user2 === void 0 ? {} : _this$props$user2;\n      var studentInformation = _this$props$user2.studentInformation,\n          contactInformation = _this$props$user2.contactInformation,\n          emailAddress = _this$props$user2.emailAddress,\n          location = _this$props$user2.location,\n          instructor = _this$props$user2.instructor,\n          course = _this$props$user2.course,\n          courseContext = _this$props$user2.courseContext,\n          accountSettings = _this$props$user2.accountSettings,\n          accountStatus = _this$props$user2.accountStatus,\n          accountType = _this$props$user2.accountType;\n      return __jsx(React.Fragment, null, __jsx(Toast, null), __jsx(ClassModal, {\n        open: classModalOpen,\n        onClose: this.onCloseClassModal,\n        handleClassChange: this.handleOptionsChange\n      }), __jsx(LocationModal, {\n        open: locationModalOpen,\n        onClose: this.onCloseLocationModal,\n        handleLocationsChange: function handleLocationsChange(selectedLocations) {\n          return _this2.handleOptionsChange(selectedLocations, 'location', 'locations');\n        }\n      }), __jsx(InstructorModal, {\n        open: instructorModalOpen,\n        onClose: this.onCloseInstructorModal,\n        handleInstructorsChange: function handleInstructorsChange(selectedInstructors) {\n          return _this2.handleOptionsChange(selectedInstructors, 'instructor', 'instructors');\n        }\n      }), __jsx(\"div\", {\n        className: \"content-section\"\n      }, __jsx(\"div\", {\n        className: \"content-section-holder\"\n      }, __jsx(\"div\", {\n        className: \"row mb-0 d-flex-content large\"\n      }, __jsx(\"div\", {\n        className: \"col s12 l5\"\n      }, __jsx(StudentInformation, {\n        state: this.initialUserMount() ? studentInformation : updatedStudentInformation,\n        handleDetailsChange: this.handleDetailsChange\n      }), __jsx(ContactInformation, {\n        state: this.initialUserMount() ? contactInformation : updatedContactInformation,\n        handleDetailsChange: this.handleDetailsChange\n      }), __jsx(EmailAddress, {\n        state: this.initialUserMount() ? emailAddress : updatedEmailAddress,\n        handleDetailsChange: this.handleDetailsChange\n      })), __jsx(\"div\", {\n        className: \"col s12 l5\"\n      }, __jsx(Location, {\n        state: this.initialUserMount() ? location : updatedLocation,\n        onOpenLocationModal: this.onOpenLocationModal,\n        onRemoveLocation: this.onRemoveOption\n      }), __jsx(Instructor, {\n        state: this.initialUserMount() ? instructor : updatedInstructor,\n        onOpenInstructorModal: this.onOpenInstructorModal,\n        onRemoveInstructor: this.onRemoveOption\n      }), __jsx(Class, {\n        state: this.initialUserMount() ? course : updatedClasses,\n        onOpenClassModal: this.onOpenClassModal,\n        onRemoveClass: this.onRemoveOption\n      }))), __jsx(\"div\", {\n        className: \"row mb-0 d-flex-content large sameheight\"\n      }, __jsx(AccountStatus, {\n        state: accountStatus\n      }), __jsx(AccountType, {\n        state: accountType\n      })), __jsx(CourseContext, {\n        state: this.initialUserMount() ? courseContext : updatedCourseContext,\n        handleDetailsChange: this.handleDetailsChange\n      }), __jsx(AccountSettings, {\n        state: this.initialUserMount() ? accountSettings : updatedAccountSettings,\n        handleDetailsChange: this.handleDetailsChange\n      }), __jsx(Actions, {\n        state: actions,\n        handleActionsChange: this.handleActionsChange,\n        onResetPassword: this.onResetPassword,\n        onSendWelcomeEmail: this.onSendWelcomeEmail,\n        onSendPasswordResetEmail: this.onSendPasswordResetEmail\n      }), __jsx(DeleteAccount, {\n        activeButton: accountStatus.status !== 'Activated',\n        onDeleteAccount: this.onDeleteAccount\n      }), __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onSaveChanges,\n        className: \"btn\"\n      }, \"Save\"))));\n    }\n  }]);\n\n  return AccountPage;\n}(React.Component);\n\nexport default AccountPage;","map":null,"metadata":{},"sourceType":"module"}