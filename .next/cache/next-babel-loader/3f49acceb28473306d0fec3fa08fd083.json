{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport StatusPage from \"../components/Classes/StatusPage\";\nimport ListPage from \"../components/Classes/ListPage\";\nimport Moment from 'moment';\nimport sampleClass from \"../components/Classes/utils/sampleClass\";\nimport createNewClassRoomApi from '../components/Classes/index/api';\n\nclass Classes extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onHandleClassCard\", index => {\n      const {\n        classes\n      } = this.state;\n      this.setState({\n        selectedClass: classes[index]\n      });\n    });\n\n    _defineProperty(this, \"onAddNewClass\", newClass => {\n      const {\n        classes: prevClassState\n      } = this.state;\n      const formattedNewClass = {\n        summary: {\n          amount_students: 10,\n          start_date: \"6/1/19\",\n          end_date: \"8/5/19\",\n          improvement: 123,\n          coursework_assigned: 60,\n          coursework_completed: 90,\n          problems_flagged_review: 40,\n          average_score: 1256,\n          achieved_target_score: 85,\n          average_practice_tests_completed: 1.8,\n          instruction: 14\n        },\n        accountInfo: {\n          lastName: 'Admin',\n          firstName: 'Company',\n          email: 'test2@example.com',\n          gender: 'M'\n        },\n        contactInfo: {\n          phone: '1234567890',\n          streetAddress: '1234 Test Road',\n          city: 'Austin',\n          state: 'TX',\n          zip: '78751'\n        },\n        classInfo: newClass.classInfo,\n        location: newClass.location,\n        instructor: newClass.instructor\n      };\n      const updatedClasses = update(prevClassState, {\n        $push: [formattedNewClass]\n      });\n      this.setState({\n        classes: updatedClasses\n      });\n      this.onCreateNewClassApi(newClass);\n    });\n\n    _defineProperty(this, \"onCloneClass\", index => {\n      const {\n        classes\n      } = this.state;\n      this.setState(prevState => {\n        prevState.classes.push(classes[index]);\n        return {\n          classes: prevState.classes\n        };\n      });\n    });\n\n    _defineProperty(this, \"arrayItemRemover\", (array, value) => array.filter(classroom => classroom !== value));\n\n    _defineProperty(this, \"onDeleteClass\", index => {\n      const {\n        classes\n      } = this.state;\n      const newClassesArray = this.arrayItemRemover(classes, classes[index]);\n      this.setState({\n        classes: newClassesArray\n      });\n    });\n\n    _defineProperty(this, \"onCreateNewClassApi\", async classroom => {\n      const newId = this.state.classes.length + 1;\n      const {\n        classInfo: {\n          className\n        },\n        accountInfo: {\n          start_date,\n          end_date,\n          isExclude\n        },\n        location: {\n          locations\n        },\n        instructor: {\n          instructors\n        }\n      } = classroom;\n      const formattedClassRoom = {\n        id: newId,\n        name: className,\n        start_date: Moment(start_date).format('YYYY-MM-DD'),\n        end_date: Moment(end_date).format('YYYY-MM-DD'),\n        duration: \"string\",\n        exclude_from_statistics: isExclude,\n        locations,\n        instructors,\n        students: \"\"\n      };\n      await createNewClassRoomApi(formattedClassRoom);\n    });\n\n    _defineProperty(this, \"onSaveClassChanges\", updatedClasRoom => {\n      const {\n        classes: originalClasses\n      } = this.state;\n      const classToUpdate = originalClasses.filter(classroom => classroom.id === updatedClasRoom.id)[0];\n      const updatedClassIndex = originalClasses.indexOf(classToUpdate);\n      const classes = update(originalClasses, {\n        $splice: [[updatedClassIndex, 1, updatedClasRoom]]\n      }); // saveChangesSuccess();\n\n      this.setState({\n        classes\n      });\n    });\n\n    this.state = {\n      selectedClass: null,\n      classes: sampleClass\n    };\n  }\n\n  render() {\n    const {\n      selectedClass\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(\"main\", {\n      id: \"main\",\n      role: \"main\"\n    }, __jsx(\"div\", {\n      className: \"main-holder grey lighten-5 switcher-section\"\n    }, !selectedClass && __jsx(ListPage, {\n      classes: this.state.classes,\n      onHandleClassCard: this.onHandleClassCard,\n      onCloneClass: this.onCloneClass,\n      onDeleteClass: this.onDeleteClass,\n      onSaveNewClass: this.onAddNewClass,\n      onSaveClassChanges: this.onSaveClassChanges\n    }), selectedClass && __jsx(StatusPage, null))));\n  }\n\n}\n\nexport default Classes;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/pages/classes.js"],"names":["React","update","StatusPage","ListPage","Moment","sampleClass","createNewClassRoomApi","Classes","Component","constructor","props","index","classes","state","setState","selectedClass","newClass","prevClassState","formattedNewClass","summary","amount_students","start_date","end_date","improvement","coursework_assigned","coursework_completed","problems_flagged_review","average_score","achieved_target_score","average_practice_tests_completed","instruction","accountInfo","lastName","firstName","email","gender","contactInfo","phone","streetAddress","city","zip","classInfo","location","instructor","updatedClasses","$push","onCreateNewClassApi","prevState","push","array","value","filter","classroom","newClassesArray","arrayItemRemover","newId","length","className","isExclude","locations","instructors","formattedClassRoom","id","name","format","duration","exclude_from_statistics","students","updatedClasRoom","originalClasses","classToUpdate","updatedClassIndex","indexOf","$splice","render","onHandleClassCard","onCloneClass","onDeleteClass","onAddNewClass","onSaveClassChanges"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport update from 'immutability-helper';\nimport StatusPage from \"../components/Classes/StatusPage\";\nimport ListPage from \"../components/Classes/ListPage\";\nimport Moment from 'moment';\nimport sampleClass from \"../components/Classes/utils/sampleClass\";\nimport createNewClassRoomApi from '../components/Classes/index/api';\n\n\nclass Classes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedClass: null,\n      classes: sampleClass,\n    };\n  }\n\n  onHandleClassCard = (index) => {\n    const { classes } = this.state;\n    this.setState({ selectedClass: classes[index] });\n  };\n\n  onAddNewClass = (newClass) => {\n    const {classes:prevClassState} = this.state;\n    const formattedNewClass = {\n      summary:{\n        amount_students:10,\n        start_date:\"6/1/19\",\n        end_date:\"8/5/19\",\n        improvement:123,\n        coursework_assigned:60,\n        coursework_completed:90,\n        problems_flagged_review:40,\n        average_score:1256,\n        achieved_target_score:85,\n        average_practice_tests_completed:1.8,\n        instruction:14,\n      },\n      accountInfo:{\n        lastName: 'Admin',\n        firstName: 'Company',\n        email: 'test2@example.com',\n        gender: 'M',\n      },\n      contactInfo: {\n        phone: '1234567890',\n        streetAddress: '1234 Test Road',\n        city: 'Austin',\n        state: 'TX',\n        zip: '78751',\n      },\n      classInfo:newClass.classInfo,\n      location: newClass.location,\n      instructor: newClass.instructor,\n    };\n    const updatedClasses = update(prevClassState,{$push:[formattedNewClass]});\n    this.setState({ classes:updatedClasses})\n    this.onCreateNewClassApi(newClass);\n  }\n\n  onCloneClass = (index) => {\n    const { classes } = this.state;\n    this.setState(prevState => {\n      prevState.classes.push(classes[index]);\n      return { classes: prevState.classes}\n    })\n  }\n\n  arrayItemRemover = (array, value) => array.filter((classroom) => classroom !== value)\n\n  onDeleteClass = (index) => {\n    const { classes } = this.state;\n    const newClassesArray = this.arrayItemRemover(classes, classes[index])\n    this.setState({classes: newClassesArray})\n  }\n\n  onCreateNewClassApi = async(classroom) => {\n    const newId = this.state.classes.length + 1;\n    const {classInfo:{className},accountInfo:{start_date,end_date,isExclude},location:{locations},instructor:{instructors}} = classroom;\n    const formattedClassRoom = {\n      id:newId,\n      name: className,\n      start_date: Moment(start_date).format('YYYY-MM-DD'),\n      end_date: Moment(end_date).format('YYYY-MM-DD'),\n      duration: \"string\",\n      exclude_from_statistics: isExclude,\n      locations,\n      instructors,\n      students: \"\",\n    };\n    await createNewClassRoomApi(formattedClassRoom);\n  }\n\n  onSaveClassChanges = (updatedClasRoom) => {\n    const { classes: originalClasses } = this.state;\n    const classToUpdate = originalClasses.filter(classroom => classroom.id === updatedClasRoom.id)[0];\n    const updatedClassIndex = originalClasses.indexOf(classToUpdate);\n    const classes = update(originalClasses, {\n      $splice: [[updatedClassIndex, 1, updatedClasRoom]],\n    });\n    // saveChangesSuccess();\n    this.setState({ classes });\n  }\n\n  render() {\n    const { selectedClass } = this.state;\n    return (\n      <React.Fragment>\n        <main id=\"main\" role=\"main\">\n          <div className=\"main-holder grey lighten-5 switcher-section\">\n            {!selectedClass &&\n              <ListPage\n                classes={this.state.classes}\n                onHandleClassCard={this.onHandleClassCard}\n                onCloneClass = {this.onCloneClass}\n                onDeleteClass = {this.onDeleteClass}\n                onSaveNewClass = {this.onAddNewClass}\n                onSaveClassChanges = {this.onSaveClassChanges}\n              />\n            }\n            {selectedClass && <StatusPage />}\n          </div>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Classes;\n"]},"metadata":{},"sourceType":"module"}