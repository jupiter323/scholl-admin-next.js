{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable array-callback-return */\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport Modal from '../../../../../Modal';\nimport NewLocationModal from '../../../../../Location/components/NewLocationModal';\nimport LocationDetailsModal from '../../../../../Location/components/LocationDetailsModal';\nimport LocationRow from './components/LocationRow';\nimport { saveNewSuccess as saveLocationSuccess, saveChangesSuccess, saveNewError as saveLocationError } from '../../../../../utils/fieldValidation';\nimport sampleLocations from '../../../../../Location/utils/sampleLocationList';\n\nconst idGenerator = () => Math.floor(Math.random() * 100 + 1);\n\nconst validationFieldMap = {\n  locationName: 'Location Name',\n  locationNickname: 'Location Nickname',\n  locationEmail: 'Location Email',\n  automatedEmailOrigin: 'Automated Email Origin',\n  automatedEmailSalutation: 'Automated Email Salutation',\n  locationUrl: 'Location Url',\n  headerColor1: 'Header Color 1',\n  headerColor2: 'Header Color 2',\n  headerLogoBackgroundColor: 'Header Logo Background Color',\n  headerLogoBackgroundAlpha: 'Header Logo Background Alpha',\n  horizontalLogoVariation: 'Horizonal Logo Variation',\n  squareLogoVariation: 'Square Logo Variation',\n  backgroundImage: 'Background Image',\n  backgroundBlur: 'Background Blur',\n  backgroundOverlayAlpha: 'Background Overlay  Alpha'\n}; // TODO: mock out update/delete action to backend\n// TODO: Will this delete just remove the location from the owner or delete the location altogethe?\n\nclass Locations extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetLocationValidation\", locationValidation => this.setState({\n      locationValidation\n    }));\n\n    _defineProperty(this, \"onSaveNewLocation\", ({\n      locationContactInfo,\n      locationEmailSettings,\n      locationBranding,\n      owner\n    }) => {\n      this.onCloseNewLocationModal();\n      const newLocation = {\n        id: idGenerator(),\n        owner,\n        locationContactInfo,\n        locationEmailSettings,\n        locationBranding,\n        locationBasicInfo: {\n          activeStudents: 0,\n          pastStudents: 0,\n          unactivatedStudents: 0,\n          averageImprovement: 0,\n          averageInitialScore: 0,\n          averageFinalScore: 0,\n          studentsAchievingTargetScore: 0\n        }\n      };\n      const locations = update(this.state.locations, {\n        $push: [newLocation]\n      });\n      this.setState({\n        locations\n      });\n      saveLocationSuccess('location');\n    });\n\n    _defineProperty(this, \"onSaveLocationChanges\", ({\n      id,\n      locationContactInfo,\n      locationEmailSettings,\n      locationBranding\n    }) => {\n      const {\n        locations: originalLocations\n      } = this.state;\n      const {\n        onCloseDropdown\n      } = this.props;\n      const locationToUpdate = originalLocations.filter(location => location.id === id)[0];\n      const updatedLocation = update(locationToUpdate, {\n        locationContactInfo: {\n          $set: locationContactInfo\n        },\n        locationEmailSettings: {\n          $set: locationEmailSettings\n        },\n        locationBranding: {\n          $set: locationBranding\n        }\n      });\n      const updatedLocationIndex = originalLocations.indexOf(locationToUpdate);\n      const locations = update(originalLocations, {\n        $splice: [[updatedLocationIndex, 1, updatedLocation]]\n      });\n      saveChangesSuccess();\n      this.setState({\n        locations\n      });\n      onCloseDropdown();\n      return this.onCloseEditLocationModal();\n    });\n\n    _defineProperty(this, \"onConfirmDeleteLocation\", () => {\n      const {\n        pendingLocationDelete,\n        onCloseDeleteLocationModal\n      } = this.props;\n      this.onDeleteLocation(pendingLocationDelete);\n      onCloseDeleteLocationModal();\n    });\n\n    _defineProperty(this, \"onDeleteLocation\", deletedLocation => {\n      const updatedState = update(this.state, {\n        locations: unfilteredLocations => unfilteredLocations.filter(location => location.id !== deletedLocation.id)\n      });\n      this.setState({\n        locations: updatedState.locations\n      });\n      this.props.onCloseDropdown();\n    });\n\n    _defineProperty(this, \"handleDropdownClick\", (event, index) => {\n      const {\n        dropdownIsOpen,\n        onCloseDropdown,\n        onSetDropdown\n      } = this.props;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    _defineProperty(this, \"mapUserLocations\", () => this.state.locations.map((location, index) => __jsx(LocationRow, {\n      key: index,\n      index: index,\n      location: location,\n      dropdownIndex: this.props.dropdownIndex,\n      dropdownIsOpen: this.props.dropdownIsOpen,\n      handleDropdownClick: this.handleDropdownClick,\n      onOpenEditLocationModal: () => this.props.onOpenEditLocationModal(location),\n      onOpenDeleteModal: () => this.props.onOpenDeleteLocationModal(location)\n    })));\n\n    this.state = {\n      locations: sampleLocations,\n      dropdownIndex: null,\n      pendingLocationDelete: {},\n      locationValidation: {}\n    };\n  }\n\n  render() {\n    const {\n      deleteLocationModalOpen,\n      activeLocation,\n      newLocationModalOpen,\n      editLocationModalOpen,\n      onOpenNewLocationModal,\n      onCloseNewLocationModal,\n      onCloseEditLocationModal,\n      onCloseDeleteLocationModal\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Modal, {\n      open: deleteLocationModalOpen,\n      onConfirm: this.onConfirmDeleteLocation,\n      onClose: onCloseDeleteLocationModal,\n      header: \"Are You Sure?\",\n      body: \"Deleting this location will be permanent\"\n    }), __jsx(NewLocationModal, {\n      fromInstructorPage: true,\n      open: newLocationModalOpen,\n      onClose: onCloseNewLocationModal,\n      onSaveNewLocation: this.onSaveNewLocation,\n      onSaveLocationError: () => saveLocationError(this.state.locationValidation, validationFieldMap),\n      onSetLocationValidation: this.onSetLocationValidation\n    }), __jsx(LocationDetailsModal, {\n      location: activeLocation,\n      open: editLocationModalOpen,\n      onClose: onCloseEditLocationModal,\n      onSaveLocationError: () => saveLocationError(this.state.locationValidation, validationFieldMap),\n      onSetLocationValidation: this.onSetLocationValidation,\n      onSaveLocationChanges: this.onSaveLocationChanges\n    }), __jsx(\"div\", {\n      className: \"card-block\"\n    }, __jsx(\"h3\", null, \"Location(s)\"), this.mapUserLocations(), __jsx(\"div\", {\n      className: \"add-box\"\n    }, __jsx(\"div\", {\n      className: \"add-box-holder\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onOpenNewLocationModal,\n      className: \"btn-floating waves-effect waves-light green lighten-1\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"))))));\n  }\n\n}\n\nLocations.propTypes = {\n  activeLocation: PropTypes.object,\n  dropdownIndex: PropTypes.number,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  newLocationModalOpen: PropTypes.bool.isRequired,\n  editLocationModalOpen: PropTypes.bool.isRequired,\n  pendingLocationDelete: PropTypes.object.isRequired,\n  deleteLocationModalOpen: PropTypes.bool.isRequired,\n  onOpenNewLocationModal: PropTypes.func.isRequired,\n  onCloseNewLocationModal: PropTypes.func.isRequired,\n  onOpenEditLocationModal: PropTypes.func.isRequired,\n  onCloseEditLocationModal: PropTypes.func.isRequired,\n  onOpenDeleteLocationModal: PropTypes.func.isRequired,\n  onCloseDeleteLocationModal: PropTypes.func.isRequired\n};\nexport default Locations;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Classes/ListPage/components/SharedModalComponents/Locations/index.js"],"names":["React","PropTypes","update","Modal","NewLocationModal","LocationDetailsModal","LocationRow","saveNewSuccess","saveLocationSuccess","saveChangesSuccess","saveNewError","saveLocationError","sampleLocations","idGenerator","Math","floor","random","validationFieldMap","locationName","locationNickname","locationEmail","automatedEmailOrigin","automatedEmailSalutation","locationUrl","headerColor1","headerColor2","headerLogoBackgroundColor","headerLogoBackgroundAlpha","horizontalLogoVariation","squareLogoVariation","backgroundImage","backgroundBlur","backgroundOverlayAlpha","Locations","Component","constructor","props","locationValidation","setState","locationContactInfo","locationEmailSettings","locationBranding","owner","onCloseNewLocationModal","newLocation","id","locationBasicInfo","activeStudents","pastStudents","unactivatedStudents","averageImprovement","averageInitialScore","averageFinalScore","studentsAchievingTargetScore","locations","state","$push","originalLocations","onCloseDropdown","locationToUpdate","filter","location","updatedLocation","$set","updatedLocationIndex","indexOf","$splice","onCloseEditLocationModal","pendingLocationDelete","onCloseDeleteLocationModal","onDeleteLocation","deletedLocation","updatedState","unfilteredLocations","event","index","dropdownIsOpen","onSetDropdown","preventDefault","map","dropdownIndex","handleDropdownClick","onOpenEditLocationModal","onOpenDeleteLocationModal","render","deleteLocationModalOpen","activeLocation","newLocationModalOpen","editLocationModalOpen","onOpenNewLocationModal","onConfirmDeleteLocation","onSaveNewLocation","onSetLocationValidation","onSaveLocationChanges","mapUserLocations","propTypes","object","number","bool","isRequired","func"],"mappings":"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","sourcesContent":["/* eslint-disable array-callback-return */\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\n\nimport Modal from '../../../../../Modal';\n\nimport NewLocationModal from '../../../../../Location/components/NewLocationModal';\nimport LocationDetailsModal from '../../../../../Location/components/LocationDetailsModal';\nimport LocationRow from './components/LocationRow';\n\nimport { saveNewSuccess as saveLocationSuccess, saveChangesSuccess, saveNewError as saveLocationError } from '../../../../../utils/fieldValidation';\nimport sampleLocations from '../../../../../Location/utils/sampleLocationList';\n\nconst idGenerator = () => Math.floor((Math.random() * 100) + 1);\n\nconst validationFieldMap = {\n  locationName: 'Location Name',\n  locationNickname: 'Location Nickname',\n  locationEmail: 'Location Email',\n  automatedEmailOrigin: 'Automated Email Origin',\n  automatedEmailSalutation: 'Automated Email Salutation',\n  locationUrl: 'Location Url',\n  headerColor1: 'Header Color 1',\n  headerColor2: 'Header Color 2',\n  headerLogoBackgroundColor: 'Header Logo Background Color',\n  headerLogoBackgroundAlpha: 'Header Logo Background Alpha',\n  horizontalLogoVariation: 'Horizonal Logo Variation',\n  squareLogoVariation: 'Square Logo Variation',\n  backgroundImage: 'Background Image',\n  backgroundBlur: 'Background Blur',\n  backgroundOverlayAlpha: 'Background Overlay  Alpha',\n};\n\n// TODO: mock out update/delete action to backend\n// TODO: Will this delete just remove the location from the owner or delete the location altogethe?\nclass Locations extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locations: sampleLocations,\n      dropdownIndex: null,\n      pendingLocationDelete: {},\n      locationValidation: {},\n    };\n  }\n\n  onSetLocationValidation = locationValidation => this.setState({ locationValidation });\n\n  // This function is stubbing out what should happen when the location is saved\n  // We finish by pushing the new location to this page's state\n  onSaveNewLocation = ({ locationContactInfo, locationEmailSettings, locationBranding, owner }) => {\n    this.onCloseNewLocationModal();\n    const newLocation = {\n      id: idGenerator(),\n      owner,\n      locationContactInfo,\n      locationEmailSettings,\n      locationBranding,\n      locationBasicInfo: {\n        activeStudents: 0,\n        pastStudents: 0,\n        unactivatedStudents: 0,\n        averageImprovement: 0,\n        averageInitialScore: 0,\n        averageFinalScore: 0,\n        studentsAchievingTargetScore: 0,\n      },\n    };\n    const locations = update(this.state.locations, {\n      $push: [newLocation],\n    });\n    this.setState({ locations });\n    saveLocationSuccess('location');\n  }\n\n  // IMPORTANT: This update implementation starts by destructuring the three sections of the location being edited in addition to its id\n  // Grabs location to update based on its index in array of current locations\n  // Use immutability-helper splice function to replace previous instace of the location with the incoming updated version\n  onSaveLocationChanges = ({ id, locationContactInfo, locationEmailSettings, locationBranding }) => {\n    const { locations: originalLocations } = this.state;\n    const { onCloseDropdown } = this.props;\n    const locationToUpdate = originalLocations.filter(location => location.id === id)[0];\n    const updatedLocation = update(locationToUpdate, {\n      locationContactInfo: {\n        $set: locationContactInfo,\n      },\n      locationEmailSettings: {\n        $set: locationEmailSettings,\n      },\n      locationBranding: {\n        $set: locationBranding,\n      },\n    });\n    const updatedLocationIndex = originalLocations.indexOf(locationToUpdate);\n    const locations = update(originalLocations, {\n      $splice: [[updatedLocationIndex, 1, updatedLocation]],\n    });\n    saveChangesSuccess();\n    this.setState({ locations });\n    onCloseDropdown();\n    return this.onCloseEditLocationModal();\n  }\n\n  onConfirmDeleteLocation = () => {\n    const { pendingLocationDelete, onCloseDeleteLocationModal } = this.props;\n    this.onDeleteLocation(pendingLocationDelete);\n    onCloseDeleteLocationModal();\n  }\n\n  onDeleteLocation = (deletedLocation) => {\n    const updatedState = update(this.state, {\n      locations: unfilteredLocations => unfilteredLocations.filter(location => location.id !== deletedLocation.id),\n    });\n    this.setState({ locations: updatedState.locations });\n    this.props.onCloseDropdown();\n  }\n\n  handleDropdownClick = (event, index) => {\n    const { dropdownIsOpen, onCloseDropdown, onSetDropdown } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  }\n\n  mapUserLocations = () => this.state.locations.map((location, index) => (\n    <LocationRow\n      key={index}\n      index={index}\n      location={location}\n      dropdownIndex={this.props.dropdownIndex}\n      dropdownIsOpen={this.props.dropdownIsOpen}\n      handleDropdownClick={this.handleDropdownClick}\n      onOpenEditLocationModal={() => this.props.onOpenEditLocationModal(location)}\n      onOpenDeleteModal={() => this.props.onOpenDeleteLocationModal(location)}\n    />\n  ))\n\n  render() {\n    const { deleteLocationModalOpen, activeLocation, newLocationModalOpen, editLocationModalOpen, onOpenNewLocationModal, onCloseNewLocationModal, onCloseEditLocationModal, onCloseDeleteLocationModal } = this.props;\n    return (\n      <React.Fragment>\n        <Modal\n          open={deleteLocationModalOpen}\n          onConfirm={this.onConfirmDeleteLocation}\n          onClose={onCloseDeleteLocationModal}\n          header=\"Are You Sure?\"\n          body=\"Deleting this location will be permanent\"\n        />\n        <NewLocationModal\n          fromInstructorPage\n          open={newLocationModalOpen}\n          onClose={onCloseNewLocationModal}\n          onSaveNewLocation={this.onSaveNewLocation}\n          onSaveLocationError={() => saveLocationError(this.state.locationValidation, validationFieldMap)}\n          onSetLocationValidation={this.onSetLocationValidation}\n        />\n        <LocationDetailsModal\n          location={activeLocation}\n          open={editLocationModalOpen}\n          onClose={onCloseEditLocationModal}\n          onSaveLocationError={() => saveLocationError(this.state.locationValidation, validationFieldMap)}\n          onSetLocationValidation={this.onSetLocationValidation}\n          onSaveLocationChanges={this.onSaveLocationChanges}\n        />\n        <div className=\"card-block\">\n          <h3>Location(s)</h3>\n          {this.mapUserLocations()}\n          <div className=\"add-box\">\n            <div className=\"add-box-holder\">\n              <a\n                href=\"#\"\n                onClick={onOpenNewLocationModal}\n                className=\"btn-floating waves-effect waves-light green lighten-1\"\n              >\n                <i className=\"material-icons\">add</i>\n              </a>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nLocations.propTypes = {\n  activeLocation: PropTypes.object,\n  dropdownIndex: PropTypes.number,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  newLocationModalOpen: PropTypes.bool.isRequired,\n  editLocationModalOpen: PropTypes.bool.isRequired,\n  pendingLocationDelete: PropTypes.object.isRequired,\n  deleteLocationModalOpen: PropTypes.bool.isRequired,\n  onOpenNewLocationModal: PropTypes.func.isRequired,\n  onCloseNewLocationModal: PropTypes.func.isRequired,\n  onOpenEditLocationModal: PropTypes.func.isRequired,\n  onCloseEditLocationModal: PropTypes.func.isRequired,\n  onOpenDeleteLocationModal: PropTypes.func.isRequired,\n  onCloseDeleteLocationModal: PropTypes.func.isRequired,\n};\n\nexport default Locations;\n"]},"metadata":{},"sourceType":"module"}