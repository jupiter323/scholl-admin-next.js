{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/components/ProblemRow/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\n\nvar ProblemRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProblemRow, _React$Component);\n\n  function ProblemRow(props) {\n    var _this;\n\n    _classCallCheck(this, ProblemRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProblemRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var problem = _this.props.problem;\n\n      if (!problem && !problem.student_answer) {\n        return;\n      }\n\n      var studentAnswer = problem.student_answer;\n      var index = -1;\n\n      switch (studentAnswer) {\n        case \"A\":\n          index = 0;\n          break;\n\n        case \"B\":\n          index = 1;\n          break;\n\n        case \"C\":\n          index = 2;\n          break;\n\n        case \"D\":\n          index = 3;\n          break;\n\n        default:\n          break;\n      }\n\n      if (index !== -1) _this.handleClickBadge(index, false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickBadge\", function (index, isSavingStudentAns) {\n      var currentBadge = _this.state.problemCells[index];\n      var selectedIndex = _this.state.selectedIndex;\n\n      if (selectedIndex === -1) {\n        var updatedProblemCells = update(_this.state.problemCells, _defineProperty({}, index, {\n          selected: {\n            $set: !currentBadge.selected\n          }\n        }));\n\n        _this.onSaveStudentAnswer(updatedProblemCells, index, isSavingStudentAns);\n      } else {\n        var _update2;\n\n        var _updatedProblemCells = update(_this.state.problemCells, (_update2 = {}, _defineProperty(_update2, index, {\n          selected: {\n            $set: !currentBadge.selected\n          }\n        }), _defineProperty(_update2, selectedIndex, {\n          selected: {\n            $set: false\n          }\n        }), _update2));\n\n        _this.onSaveStudentAnswer(_updatedProblemCells, index, isSavingStudentAns);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveStudentAnswer\", function (updatedProblemCells, index, isSavingStudentAns) {\n      var _this$props = _this.props,\n          onAddStudentAnswerToTest = _this$props.onAddStudentAnswerToTest,\n          problem = _this$props.problem;\n\n      _this.setState({\n        problemCells: updatedProblemCells,\n        selectedIndex: index\n      });\n\n      var label = _this.state.problemCells[index].label;\n      if (isSavingStudentAns) onAddStudentAnswerToTest(problem.id, label);\n    });\n\n    _this.state = {\n      selectedIndex: -1,\n      problemCells: [{\n        id: 0,\n        label: \"A\",\n        selected: false\n      }, {\n        id: 1,\n        label: \"B\",\n        selected: false\n      }, {\n        id: 2,\n        label: \"C\",\n        selected: false\n      }, {\n        id: 3,\n        label: \"D\",\n        selected: false\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(ProblemRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var problemCells = this.state.problemCells;\n      return __jsx(\"li\", {\n        className: \"answers-list-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, __jsx(\"ul\", {\n        className: \"answer-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, problemCells.map(function (cell, index) {\n        return __jsx(\"li\", {\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: function onClick() {\n            return _this2.handleClickBadge(index, true);\n          },\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          className: \"badge-circle badge-circle-bordered\",\n          style: {\n            color: cell.selected ? \"#fff\" : \"\",\n            borderColor: cell.selected ? \"#19b4e9\" : \"\",\n            backgroundColor: cell.selected ? \"#19b4e9\" : \"\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, cell.label));\n      })));\n    }\n  }]);\n\n  return ProblemRow;\n}(React.Component);\n\nProblemRow.propTypes = {\n  problem: PropTypes.object.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired\n};\nexport default ProblemRow;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/components/ProblemRow/index.js"],"names":["React","update","PropTypes","ProblemRow","props","problem","student_answer","studentAnswer","index","handleClickBadge","isSavingStudentAns","currentBadge","state","problemCells","selectedIndex","updatedProblemCells","selected","$set","onSaveStudentAnswer","onAddStudentAnswerToTest","setState","label","id","map","cell","cursor","color","borderColor","backgroundColor","Component","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\n\nclass ProblemRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [\n        {\n          id: 0,\n          label: \"A\",\n          selected: false,\n        },\n        {\n          id: 1,\n          label: \"B\",\n          selected: false,\n        },\n        {\n          id: 2,\n          label: \"C\",\n          selected: false,\n        },\n        {\n          id: 3,\n          label: \"D\",\n          selected: false,\n        },\n      ],\n    };\n  }\n\n  componentDidMount = () => {\n    const { problem } = this.props;\n    if (!problem && !problem.student_answer) {\n      return;\n    }\n    const studentAnswer = problem.student_answer;\n    let index = -1;\n    switch (studentAnswer) {\n      case \"A\":\n        index = 0;\n        break;\n      case \"B\":\n        index = 1;\n        break;\n      case \"C\":\n        index = 2;\n        break;\n      case \"D\":\n        index = 3;\n        break;\n      default:\n        break;\n    }\n    if (index !== -1) this.handleClickBadge(index, false);\n  };\n\n  handleClickBadge = (index, isSavingStudentAns) => {\n    const currentBadge = this.state.problemCells[index];\n    const selectedIndex = this.state.selectedIndex;\n    if (selectedIndex === -1) {\n      const updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n      this.onSaveStudentAnswer(updatedProblemCells, index, isSavingStudentAns);\n    } else {\n      const updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n        [selectedIndex]: { selected: { $set: false } },\n      });\n      this.onSaveStudentAnswer(updatedProblemCells, index, isSavingStudentAns);\n    }\n  };\n\n  onSaveStudentAnswer = (updatedProblemCells, index, isSavingStudentAns) => {\n    const { onAddStudentAnswerToTest, problem } = this.props;\n    this.setState({ problemCells: updatedProblemCells, selectedIndex: index });\n    const { label } = this.state.problemCells[index];\n    if (isSavingStudentAns) onAddStudentAnswerToTest(problem.id, label);\n  };\n  render() {\n    const { problemCells } = this.state;\n    return (\n      <li className=\"answers-list-holder\">\n        {/* we are not using input box for now */}\n        {/* {this.props.problem.answerInput === true ? (<input type=\"text\" className=\"answer-input\" tabIndex={0} />):( */}\n        <ul className=\"answer-list\">\n          {problemCells.map((cell, index) => (\n            <li\n              style={{ cursor: \"pointer\" }}\n              onClick={() => this.handleClickBadge(index, true)}\n              key={index}\n            >\n              <span\n                className=\"badge-circle badge-circle-bordered\"\n                style={{\n                  color: cell.selected ? \"#fff\" : \"\",\n                  borderColor: cell.selected ? \"#19b4e9\" : \"\",\n                  backgroundColor: cell.selected ? \"#19b4e9\" : \"\",\n                }}\n              >\n                {cell.label}\n              </span>\n            </li>\n          ))}\n        </ul>\n        {/* )} */}\n      </li>\n    );\n  }\n}\n\nProblemRow.propTypes = {\n  problem: PropTypes.object.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n};\n\nexport default ProblemRow;\n"]},"metadata":{},"sourceType":"module"}