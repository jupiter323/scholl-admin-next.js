{"version":3,"file":"static/webpack/static/development/pages/students.js.1ef8c73e887dd2b94cf3.hot-update.js","sources":["webpack:///./pages/students.js"],"sourcesContent":["import React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport StudentCard from '../components/Student/components/StudentCard';\nimport FilterSection from '../components/Student/ListPage/Components/FilterSection';\nimport StudentModal from '../components/Student/components/StudentModal';\nimport IndividualStudentPage from '../components/Student/IndividualStudentPage';\nimport LocationModal from '../components/Location/components/LocationModal';\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedStudent: null,\n      students: sampleStudentList,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      sort: \"\",\n      filterName: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n     },\n    }\n  }\n  onOpenStudentModal = () => this.setState({ studentModalOpen: true });\n  onCloseStudentModal = () => this.setState({ studentModalOpen: false });\n  onOpenLocationModal = () => this.setState({locationModalOpen: true});\n  onCloseLocationModal = () => this.setState({locationModalOpen: false});\n\n\n  onSetSort = (sort) => this.setState({ sort });\n  onSetFilteredState = (filterName) => this.setState({ filterName });\n  onUnsetFilteredState = () => this.setState({ filterName: '' });\n\n  onSetFilteredLocationState = (location) => this.setState({ location });\n  onUnsetFilteredLocationState = () => this.setState({ location: '' });\n\n // TODO add a toas or some notification that a student has been saved\n  onSaveNewStudent = () => {\n    // eslint-disable-next-line no-console\n    console.warn('do something with the new student info');\n    this.onCloseStudentModal();\n  };\n\n  onDeleteNewStudent = () => {\n    const {newStudent: previousStudentState} = this.state;\n    const newStudent = update(previousStudentState, {\n      $set:\n       { active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n    }}\n    );\n    this.setState({newStudent})\n  };\n\n  onRemoveLocation = (index) => {\n    const {newStudent: previousStudentState} = this.state;\n    const {location: { locations } } = this.state.newStudent;\n    const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n    const newStudent = update(previousStudentState, {\n      location: { $set: {locations: newLocationsArray}},\n    });\n    this.setState({newStudent})\n  };\n\n  onFilterByName = () => {\n    const { students, filterName } = this.state;\n    return students.reduce((finalArr, currentStudent) => {\n      const { lastName, firstName } = currentStudent;\n      const studentString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n      if (studentString.indexOf(filterName) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n        finalArr.push(currentStudent);\n      }\n      return finalArr;\n    }, []);\n  };\n\n  onHandleStudentCard = (index) => {\n    const { students } = this.state;\n    this.setState({ selectedStudent: students[index] });\n  };\n\n  onRedirectToStudentPage = (event) => {\n    event.preventDefault();\n    this.setState({selectedStudent: null})\n  };\n\n  onDeleteStudent = (index) => {\n    const { students } = this.state;\n    const newStudentArray = this.arrayItemRemover(students, students[index]);\n    this.setState({students: newStudentArray})\n  };\n\n  onCloneStudent = (index) => {\n    const { students } = this.state;\n    this.setState(prevState => {\n      prevState.students.push(students[index]);\n      return { students: prevState.students}\n    })\n  };\n\n  handleChange = (event, name, section) => {\n    const { newStudent: previousStudentState } = this.state;\n    const value = event.target ? event.target.value : event;\n    const updatedStudent = update(previousStudentState, {\n      [section]: { $merge: { [name]: value }},\n    });\n    this.setState({newStudent: updatedStudent})\n};\n\n  arrayItemRemover = (array, value) => array.filter((student) => student !== value);\n\n  render() {\n    const { studentModalOpen, students, selectedStudent } = this.state;\n    return (\n      <main id=\"main\" role=\"main\">\n        <div className=\"main-holder grey lighten-5\">\n          {!selectedStudent && (\n            <React.Fragment>\n              <div className=\"title-row card-panel\">\n                <div className=\"mobile-header\">\n                  <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n                </div>\n                <h2 className=\"h1 white-text\">\n                  <span className=\"heading-holder\">\n                    <i className=\"icon-student\"/>\n                    <span className=\"heading-block\">Students</span>\n                  </span>\n                </h2>\n              </div>\n              <FilterSection\n                onSetSort={this.onSetSort}\n                onSetFilteredState={this.onSetFilteredState}\n                onUnsetFilteredState={this.onUnsetFilteredState}\n                onSetFilteredLocationState={this.onSetFilteredLocationState}\n                onUnsetFilteredLocationState={this.onUnsetFilteredLocationState}\n                handleFilterClick={this.handleFilterClick}\n                onFilterByName={this.onFilterByName} />\n              <div className=\"content-section\">\n                <div className=\"row d-flex-content\">\n                  {students.map((student, index) => (\n                    <StudentCard\n                    student={student}\n                    index={index}\n                    id={student.id}\n                    key={student.id}\n                    onHandleStudentCard={() => this.onHandleStudentCard(index)}\n                    onDeleteStudent={() => this.onDeleteStudent(index)}\n                    onCloneStudent={() => this.onCloneStudent(index, student.id)}\n                    />\n                  ))}\n                </div>\n              </div>\n              <a href=\"#\" className=\"waves-effect waves-teal btn add-btn modal-trigger\" onClick={this.onOpenStudentModal}><i className=\"material-icons\">add</i>New Student</a>\n              <StudentModal\n                open={studentModalOpen}\n                onClose={this.onCloseStudentModal}\n                handleChange={this.handleChange}\n                state={this.state.newStudent}\n                onSave={this.onSaveNewStudent}\n                onOpenLocationModal={this.onOpenLocationModal}\n                onRemoveLocation={this.onRemoveLocation}\n                onDeleteNewStudent={this.onDeleteNewStudent}\n                />\n                <LocationModal\n                open={this.state.locationModalOpen}\n                onClose={this.onCloseLocationModal}\n                handleLocationsChange={(selectedLocations) => this.handleChange(selectedLocations, 'locations', 'location')}\n                />\n                </React.Fragment>\n          )}\n          {selectedStudent && (\n            <IndividualStudentPage student={selectedStudent} onRedirectToStudentPage={this.onRedirectToStudentPage} />\n          )}\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Students;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiCA;AAAA;AAAA;AAAA;AACA;AAlCA;AAkCA;AAAA;AAAA;AAAA;AACA;AAnCA;AAmCA;AAAA;AAAA;AAAA;AACA;AApCA;AAoCA;AAAA;AAAA;AAAA;AACA;AArCA;AAuCA;AAAA;AAAA;AAAA;AACA;AAxCA;AAwCA;AAAA;AAAA;AAAA;AACA;AAzCA;AAyCA;AAAA;AAAA;AAAA;AACA;AA1CA;AA2CA;AAAA;AAAA;AAAA;AACA;AA5CA;AA4CA;AAAA;AAAA;AAAA;AACA;AA7CA;AAgDA;AACA;AACA;AAAA;AACA;AACA;AApDA;AAqDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AADA;AAjBA;AAFA;AACA;AAuBA;AAAA;AAAA;AACA;AACA;AAjFA;AAkFA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AA3FA;AA4FA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAvGA;AAwGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA5GA;AA8GA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAjHA;AAkHA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAvHA;AAwHA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA/HA;AAgIA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAxIA;AAyIA;AAAA;AAAA;AAAA;AACA;AAxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AADA;AAlBA;AAPA;AAFA;AAgCA;AACA;;;AA0GA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AADA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AAAA;AAAA;AAKA;;;;AA7MA;AACA;AA+MA;;;;A","sourceRoot":""}