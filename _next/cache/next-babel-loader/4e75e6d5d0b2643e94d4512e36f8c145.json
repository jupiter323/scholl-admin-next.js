{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/components/ProblemRow/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\n\nclass ProblemRow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const {\n        problem\n      } = this.props;\n\n      if (!problem && !problem.student_answer) {\n        return;\n      }\n\n      const studentAnswer = problem.student_answer;\n      let index = -1;\n\n      switch (studentAnswer) {\n        case \"A\":\n          index = 0;\n          break;\n\n        case \"B\":\n          index = 1;\n          break;\n\n        case \"C\":\n          index = 2;\n          break;\n\n        case \"D\":\n          index = 3;\n          break;\n\n        default:\n          break;\n      }\n\n      if (index !== -1) this.handleClickBadge(index, false);\n    });\n\n    _defineProperty(this, \"handleClickBadge\", (index, isSavingStudentAns) => {\n      const currentBadge = this.state.problemCells[index];\n      const selectedIndex = this.state.selectedIndex;\n\n      if (selectedIndex === -1) {\n        const updatedProblemCells = update(this.state.problemCells, {\n          [index]: {\n            selected: {\n              $set: !currentBadge.selected\n            }\n          }\n        });\n        this.onSaveStudentAnswer(updatedProblemCells, index, isSavingStudentAns);\n      } else {\n        const updatedProblemCells = update(this.state.problemCells, {\n          [index]: {\n            selected: {\n              $set: !currentBadge.selected\n            }\n          },\n          [selectedIndex]: {\n            selected: {\n              $set: false\n            }\n          }\n        });\n        this.onSaveStudentAnswer(updatedProblemCells, index, isSavingStudentAns);\n      }\n    });\n\n    _defineProperty(this, \"onSaveStudentAnswer\", (updatedProblemCells, index, isSavingStudentAns) => {\n      const {\n        onAddStudentAnswerToTest,\n        problem\n      } = this.props;\n      this.setState({\n        problemCells: updatedProblemCells,\n        selectedIndex: index\n      });\n      const {\n        label\n      } = this.state.problemCells[index];\n      if (isSavingStudentAns) onAddStudentAnswerToTest(problem.id, label);\n    });\n\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [{\n        id: 0,\n        label: \"A\",\n        selected: false\n      }, {\n        id: 1,\n        label: \"B\",\n        selected: false\n      }, {\n        id: 2,\n        label: \"C\",\n        selected: false\n      }, {\n        id: 3,\n        label: \"D\",\n        selected: false\n      }]\n    };\n  }\n\n  render() {\n    const {\n      problemCells\n    } = this.state;\n    return __jsx(\"li\", {\n      className: \"answers-list-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(\"ul\", {\n      className: \"answer-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, problemCells.map((cell, index) => __jsx(\"li\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: () => this.handleClickBadge(index, true),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"badge-circle badge-circle-bordered\",\n      style: {\n        color: cell.selected ? \"#fff\" : \"\",\n        borderColor: cell.selected ? \"#19b4e9\" : \"\",\n        backgroundColor: cell.selected ? \"#19b4e9\" : \"\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, cell.label)))));\n  }\n\n}\n\nProblemRow.propTypes = {\n  problem: PropTypes.object.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired\n};\nexport default ProblemRow;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/components/ProblemRow/index.js"],"names":["React","update","PropTypes","ProblemRow","Component","constructor","props","problem","student_answer","studentAnswer","index","handleClickBadge","isSavingStudentAns","currentBadge","state","problemCells","selectedIndex","updatedProblemCells","selected","$set","onSaveStudentAnswer","onAddStudentAnswerToTest","setState","label","id","render","map","cell","cursor","color","borderColor","backgroundColor","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\n\nclass ProblemRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [\n        {\n          id: 0,\n          label: \"A\",\n          selected: false,\n        },\n        {\n          id: 1,\n          label: \"B\",\n          selected: false,\n        },\n        {\n          id: 2,\n          label: \"C\",\n          selected: false,\n        },\n        {\n          id: 3,\n          label: \"D\",\n          selected: false,\n        },\n      ],\n    };\n  }\n\n  componentDidMount = () => {\n    const { problem } = this.props;\n    if (!problem && !problem.student_answer) {\n      return;\n    }\n    const studentAnswer = problem.student_answer;\n    let index = -1;\n    switch (studentAnswer) {\n      case \"A\":\n        index = 0;\n        break;\n      case \"B\":\n        index = 1;\n        break;\n      case \"C\":\n        index = 2;\n        break;\n      case \"D\":\n        index = 3;\n        break;\n      default:\n        break;\n    }\n    if (index !== -1) this.handleClickBadge(index, false);\n  };\n\n  handleClickBadge = (index, isSavingStudentAns) => {\n    const currentBadge = this.state.problemCells[index];\n    const selectedIndex = this.state.selectedIndex;\n    if (selectedIndex === -1) {\n      const updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n      this.onSaveStudentAnswer(updatedProblemCells, index, isSavingStudentAns);\n    } else {\n      const updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n        [selectedIndex]: { selected: { $set: false } },\n      });\n      this.onSaveStudentAnswer(updatedProblemCells, index, isSavingStudentAns);\n    }\n  };\n\n  onSaveStudentAnswer = (updatedProblemCells, index, isSavingStudentAns) => {\n    const { onAddStudentAnswerToTest, problem } = this.props;\n    this.setState({ problemCells: updatedProblemCells, selectedIndex: index });\n    const { label } = this.state.problemCells[index];\n    if (isSavingStudentAns) onAddStudentAnswerToTest(problem.id, label);\n  };\n  render() {\n    const { problemCells } = this.state;\n    return (\n      <li className=\"answers-list-holder\">\n        {/* we are not using input box for now */}\n        {/* {this.props.problem.answerInput === true ? (<input type=\"text\" className=\"answer-input\" tabIndex={0} />):( */}\n        <ul className=\"answer-list\">\n          {problemCells.map((cell, index) => (\n            <li\n              style={{ cursor: \"pointer\" }}\n              onClick={() => this.handleClickBadge(index, true)}\n              key={index}\n            >\n              <span\n                className=\"badge-circle badge-circle-bordered\"\n                style={{\n                  color: cell.selected ? \"#fff\" : \"\",\n                  borderColor: cell.selected ? \"#19b4e9\" : \"\",\n                  backgroundColor: cell.selected ? \"#19b4e9\" : \"\",\n                }}\n              >\n                {cell.label}\n              </span>\n            </li>\n          ))}\n        </ul>\n        {/* )} */}\n      </li>\n    );\n  }\n}\n\nProblemRow.propTypes = {\n  problem: PropTypes.object.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n};\n\nexport default ProblemRow;\n"]},"metadata":{},"sourceType":"module"}