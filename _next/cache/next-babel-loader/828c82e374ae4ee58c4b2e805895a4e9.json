{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestAnswerSheetComplete/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { toast } from 'react-toastify';\nimport AnswerSheetNavBar from './components/AnswerSheetNavBar';\nimport ReadingPage from './components/ReadingPage';\nimport WritingPage from './components/WritingPage';\nimport MathNoCalcPage from './components/MathNoCalcPage';\nimport MathCalculatorPage from './components/MathCalculatorPage';\nimport EssayPage from './components/EssayPage';\nimport { makeSelectStudentSections, makeSelectActiveStudentToken, makeSelectActiveStudent, makeSelectTests, makeSelectActiveStudentTestId, makeSelectActiveTestScores } from '../index/selectors';\nimport { fetchStudentTestSections, addStudentAnswerToTest, setEssayScore, resetErrorMessage, getTestScores } from '../index/actions';\nimport { updateStudentTestSectionStatusApi } from '../index/api';\nimport { makeSelectErrorMessages } from '../index/selectors';\n\nclass DetailTestAnswerSheetComplete extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      const {\n        sections,\n        student_test_id,\n        errorMessages: {\n          answerTestProblemMessage,\n          testFlagMessage,\n          fetchSectionsMessage,\n          fetchProblemsMessage,\n          fetchingStudentTestsMessage\n        }\n      } = nextProps;\n\n      if (sections.length !== 0 && !this.state.enableScoreReport) {\n        this.onSetProblems(sections, student_test_id);\n      }\n\n      if (answerTestProblemMessage !== this.state.answerTestProblemMessage) {\n        this.onErrorMessage(answerTestProblemMessage, \"answerTestProblemMessage\");\n      }\n\n      if (testFlagMessage !== this.state.testFlagMessage) {\n        this.onErrorMessage(testFlagMessage, \"testFlagMessage\");\n      }\n\n      if (fetchingStudentTestsMessage !== this.state.fetchingStudentTestsMessage) {\n        this.onErrorMessage(fetchingStudentTestsMessage, \"fetchingStudentTestsMessage\");\n      }\n\n      if (fetchProblemsMessage !== this.state.fetchProblemsMessage) {\n        this.setState({\n          fetchProblemsMessage\n        });\n      }\n\n      if (fetchSectionsMessage !== this.state.fetchSectionsMessage) {\n        this.setState({\n          fetchSectionsMessage\n        });\n      }\n\n      if (fetchingStudentTestsMessage !== this.state.fetchingStudentTestsMessage) {\n        this.setState({\n          fetchingStudentTestsMessage\n        });\n      }\n    });\n\n    _defineProperty(this, \"onSetProblems\", (sections, studentTestId) => new _Promise(async resolve => {\n      const {\n        tests,\n        testScoreDetails: {\n          test_id\n        },\n        testScoreDetails\n      } = this.props;\n      const testIds = tests.map(test => test.id);\n      const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n      const currentTestSections = tests[currentTestIndex].test_sections;\n      sections.map(section => {\n        const testSectionIds = currentTestSections.map(testSection => testSection.id);\n        const currentTestSectionIndex = testSectionIds.findIndex(testSectionId => testSectionId === section.test_section_id);\n        const currentTestSection = currentTestSections[currentTestSectionIndex]; // Confirm that the sections are for the current student_test_id\n\n        if (!currentTestSection || testScoreDetails.student_test_id !== section.student_test_id) return null;\n\n        switch (currentTestSection.name) {\n          case 'Math (Calculator)':\n            this.setState({\n              testMathCalcProblems: section\n            });\n            break;\n\n          case 'Writing':\n            this.setState({\n              testWritingProblems: section\n            });\n            break;\n\n          case 'Math (No Calculator)':\n            this.setState({\n              testMathNoCalcProblems: section\n            });\n            break;\n\n          case 'Reading':\n            this.setState({\n              testReadingProblems: section\n            });\n            break;\n\n          default:\n            this.setState({\n              testReadingProblems: section\n            });\n            break;\n        }\n      });\n      this.setState({\n        testSections: sections,\n        studentTestId,\n        showSectionMessage: false\n      });\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    }));\n\n    _defineProperty(this, \"getComponentImages\", () => new _Promise(resolve => {\n      this.setState({\n        enableScoreReport: true\n      });\n      const imgDataList = [];\n      const componentRefs = [{\n        id: 'readingAnswerSheetImg',\n        state: 'reading'\n      }, {\n        id: 'writingAnswerSheetImg',\n        state: 'writing'\n      }, {\n        id: 'mathNoCalcAnswerSheetImg',\n        state: 'math (no calc)'\n      }, {\n        id: 'mathCalcAnswerSheetImg',\n        state: 'math (calculator)'\n      }];\n      setTimeout(() => {\n        const {\n          sections,\n          testScoreDetails: {\n            student_test_id\n          }\n        } = this.props;\n        this.onSetProblems(sections, student_test_id).then(() => {\n          setTimeout(async () => {\n            const getImgListPromise = componentRefs.reduce((accumulatorPromise, item) => accumulatorPromise.then(async () => {\n              const result = await this.getData(item);\n              return imgDataList.push(result);\n            }).catch(console.error), _Promise.resolve());\n            getImgListPromise.then(() => {\n              resolve(imgDataList);\n            });\n          }, 1000);\n        });\n      }, 5000);\n    }));\n\n    _defineProperty(this, \"getData\", item => new _Promise(resolve => {\n      this.setState({\n        activeSlide: item.state\n      }, async () => {\n        const currentImg = await this.onHandleTargetImage(item.id);\n        resolve(currentImg);\n      });\n    }));\n\n    _defineProperty(this, \"onHandleTargetImage\", async currentRef => {\n      const {\n        getTargetImage\n      } = this.props;\n      const currentImg = await getTargetImage(document.getElementById(currentRef));\n      return currentImg;\n    });\n\n    _defineProperty(this, \"onSetActiveSlide\", activeSlide => {\n      const {\n        testReadingProblems,\n        testWritingProblems,\n        testMathCalcProblems,\n        testMathNoCalcProblems\n      } = this.state;\n      let currentSection;\n\n      switch (activeSlide) {\n        case 'reading':\n          currentSection = testReadingProblems;\n          break;\n\n        case 'writing':\n          currentSection = testWritingProblems;\n          break;\n\n        case 'math (no calc)':\n          currentSection = testMathNoCalcProblems;\n          break;\n\n        case 'math (calculator)':\n          currentSection = testMathCalcProblems;\n          break;\n\n        default:\n          currentSection = testReadingProblems;\n          break;\n      }\n\n      this.setState({\n        activeSlide,\n        activeTestSection: currentSection\n      }); // Remove any error message for the previous slide\n\n      this.props.onUpdateTestSectionMsg(\"\");\n    });\n\n    _defineProperty(this, \"renderCurrentSlide\", () => {\n      const {\n        activeSlide,\n        fetchSectionsMessage\n      } = this.state;\n      const {\n        sections,\n        activeStudentTestId,\n        activeTestScores,\n        onSetEssayScore\n      } = this.props;\n\n      if (sections) {\n        const {\n          testReadingProblems,\n          testWritingProblems,\n          testMathCalcProblems,\n          testMathNoCalcProblems\n        } = this.state;\n\n        if (activeSlide === 'reading') {\n          this.updateSectionStatus(activeSlide, testReadingProblems);\n          return __jsx(ReadingPage, {\n            testSection: testReadingProblems,\n            onAddStudentAnswerToTest: this.onAddStudentAnswerToTest,\n            fetchProblemsMessage: this.state.fetchProblemsMessage,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264\n            },\n            __self: this\n          });\n        } else if (activeSlide === 'writing') {\n          this.updateSectionStatus(activeSlide, testWritingProblems);\n          return __jsx(WritingPage, {\n            testSection: testWritingProblems,\n            onAddStudentAnswerToTest: this.onAddStudentAnswerToTest,\n            fetchProblemsMessage: this.state.fetchProblemsMessage,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273\n            },\n            __self: this\n          });\n        } else if (activeSlide === 'math (no calc)') {\n          this.updateSectionStatus(activeSlide, testMathNoCalcProblems);\n          return __jsx(MathNoCalcPage, {\n            testSection: testMathNoCalcProblems,\n            onAddStudentAnswerToTest: this.onAddStudentAnswerToTest,\n            fetchProblemsMessage: this.state.fetchProblemsMessage,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 282\n            },\n            __self: this\n          });\n        } else if (activeSlide === 'math (calculator)') {\n          this.updateSectionStatus(activeSlide, testMathCalcProblems);\n          return __jsx(MathCalculatorPage, {\n            testSection: testMathCalcProblems,\n            onAddStudentAnswerToTest: this.onAddStudentAnswerToTest,\n            fetchProblemsMessage: this.state.fetchProblemsMessage,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 291\n            },\n            __self: this\n          });\n        } else if (activeSlide === 'essay') {\n          return __jsx(EssayPage, {\n            testId: activeStudentTestId,\n            testScores: activeTestScores,\n            setEssayScore: onSetEssayScore,\n            onGetTestScores: this.props.onGetTestScores,\n            testScoreDetails: this.props.testScoreDetails,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 299\n            },\n            __self: this\n          });\n        }\n\n        if (!fetchSectionsMessage) {\n          return __jsx(\"h1\", {\n            style: {\n              textAlign: 'center'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 309\n            },\n            __self: this\n          }, \"Loading Problems...\");\n        }\n\n        return __jsx(\"h1\", {\n          style: {\n            textAlign: 'center',\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312\n          },\n          __self: this\n        }, fetchSectionsMessage);\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"onAddStudentAnswerToTest\", async (problem, answer, student_test_id) => {\n      const {\n        dispatchAddStudentAnswerToTest\n      } = this.props;\n      const postBody = {\n        student_test_id,\n        test_problem_id: problem.id,\n        answer\n      };\n      dispatchAddStudentAnswerToTest(postBody, problem.test_section_id);\n    });\n\n    _defineProperty(this, \"updateSectionStatus\", async (activeSlide, currentSection) => {\n      if (!currentSection) return;\n\n      if (currentSection.test_section_status === 'CREATED') {\n        if (!this.state.updatedSectionStatus[`${activeSlide}Section`]) {\n          const postBody = {\n            student_test_id: currentSection.student_test_id,\n            student_test_section_id: currentSection.id,\n            student_test_section_status: 'STARTED'\n          };\n          await updateStudentTestSectionStatusApi(postBody);\n          this.setState({\n            updatedSectionStatus: _objectSpread({}, this.state.updatedSectionStatus, {\n              [`${activeSlide}Section`]: 'STARTED'\n            })\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"getExistingSections\", () => {\n      const {\n        testReadingProblems,\n        testWritingProblems,\n        testMathCalcProblems,\n        testMathNoCalcProblems\n      } = this.state;\n      return {\n        reading: !!testReadingProblems,\n        writing: !!testWritingProblems,\n        mathCalc: !!testMathCalcProblems,\n        mathNoCalc: !!testMathNoCalcProblems\n      };\n    });\n\n    _defineProperty(this, \"completedSectionMessage\", () => __jsx(\"p\", {\n      style: {\n        color: \"white\",\n        backgroundColor: \"#28a745\",\n        fontSize: \"14px\",\n        borderRadius: \"25px\"\n      },\n      className: \"center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"This test section is complete. You can still edit answer choices if needed.\"));\n\n    this.state = {\n      activeSlide: '',\n      isOpened: false,\n      testSections: [],\n      studentTestId: '',\n      testReadingProblems: null,\n      testWritingProblems: null,\n      testMathCalcProblems: null,\n      testMathNoCalcProblems: null,\n      activeTestSection: null,\n      updatedState: {\n        activeReadingSection: false,\n        showInCompleteTest: false,\n        activeWritingSection: false,\n        activeMathNoCalcSection: false,\n        activeMathWithCalcSection: false,\n        activeSection: ''\n      },\n      updatedSectionStatus: {},\n      showSectionMessage: false,\n      answerTestProblemMessage: \"\",\n      testFlagMessage: \"\",\n      fetchSectionsMessage: \"\",\n      fetchingStudentTestsMessage: \"\",\n      enableScoreReport: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      enableScoreReport\n    } = this.state;\n    const {\n      sections,\n      testScoreDetails: {\n        student_test_id\n      }\n    } = this.props;\n\n    if (sections.length !== 0 && !enableScoreReport) {\n      this.onSetProblems(sections, student_test_id);\n    }\n\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    const {\n      onResetErrorMessage\n    } = this.props;\n    this.props.onRef(undefined);\n    onResetErrorMessage('answerTestProblemMessage');\n    onResetErrorMessage('testFlagMessage');\n    onResetErrorMessage('fetchSectionsMessage');\n    onResetErrorMessage('fetchProblemsMessage');\n    onResetErrorMessage('fetchingStudentTestsMessage');\n  }\n\n  onErrorMessage(message, name) {\n    if (!message) return this.setState({\n      [name]: \"\"\n    });\n    toast.error(message, {\n      className: 'update-error',\n      progressClassName: 'progress-bar-error'\n    });\n    this.setState({\n      [name]: message\n    });\n  }\n\n  render() {\n    const {\n      activeSlide,\n      activeTestSection,\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems\n    } = this.state;\n    const {\n      completedSections,\n      testScoreDetails: {\n        status\n      },\n      updateTestSectionMessage\n    } = this.props;\n    let showSectionMessage = this.state.showSectionMessage;\n\n    switch (activeSlide) {\n      case 'reading':\n        if (completedSections.readingSectionCompleted) {\n          showSectionMessage = true;\n        }\n\n        break;\n\n      case 'writing':\n        if (completedSections.writingSectionCompleted) {\n          showSectionMessage = true;\n        }\n\n        break;\n\n      case 'math (no calc)':\n        if (completedSections.mathNoCalcSectionCompleted) {\n          showSectionMessage = true;\n        }\n\n        break;\n\n      case 'math (calculator)':\n        if (completedSections.mathCalcSectionCompleted) {\n          showSectionMessage = true;\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    return __jsx(\"div\", {\n      className: \"card-main-full card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"slick-tabs-gallery\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, __jsx(AnswerSheetNavBar, {\n      activeSlide: activeSlide,\n      onSetActiveSlide: this.onSetActiveSlide,\n      getExistingSections: this.getExistingSections(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, showSectionMessage && status !== \"COMPLETED\" && this.completedSectionMessage(), __jsx(\"div\", {\n      className: \"main-slick\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, this.renderCurrentSlide()), activeSlide && activeSlide !== \"essay\" && status !== \"COMPLETED\" && __jsx(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"btn-holder right-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"btn btn-xlarge waves-effect waves-light bg-blue\",\n      onClick: () => {\n        this.props.handleTestScore(activeTestSection, {\n          testReadingProblems,\n          testWritingProblems,\n          testMathNoCalcProblems,\n          testMathCalcProblems\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, !showSectionMessage ? \"Submit Test Section\" : \"Resubmit Test\"))), __jsx(\"p\", {\n      className: \"red-text right-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, updateTestSectionMessage)));\n  }\n\n}\n\nDetailTestAnswerSheetComplete.propTypes = {\n  getTargetImage: PropTypes.func.isRequired\n};\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeStudent: makeSelectActiveStudent(),\n  tests: makeSelectTests(),\n  activeStudentTestId: makeSelectActiveStudentTestId(),\n  activeTestScores: makeSelectActiveTestScores(),\n  errorMessages: makeSelectErrorMessages()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n    onSetEssayScore: score => dispatch(setEssayScore(score)),\n    dispatchAddStudentAnswerToTest: (payload, sectionId) => dispatch(addStudentAnswerToTest(payload, sectionId)),\n    onResetErrorMessage: errorName => dispatch(resetErrorMessage(errorName)),\n    onGetTestScores: postBody => dispatch(getTestScores(postBody))\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(DetailTestAnswerSheetComplete);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestAnswerSheetComplete/index.js"],"names":["React","PropTypes","connect","compose","createStructuredSelector","toast","AnswerSheetNavBar","ReadingPage","WritingPage","MathNoCalcPage","MathCalculatorPage","EssayPage","makeSelectStudentSections","makeSelectActiveStudentToken","makeSelectActiveStudent","makeSelectTests","makeSelectActiveStudentTestId","makeSelectActiveTestScores","fetchStudentTestSections","addStudentAnswerToTest","setEssayScore","resetErrorMessage","getTestScores","updateStudentTestSectionStatusApi","makeSelectErrorMessages","DetailTestAnswerSheetComplete","Component","constructor","props","nextProps","sections","student_test_id","errorMessages","answerTestProblemMessage","testFlagMessage","fetchSectionsMessage","fetchProblemsMessage","fetchingStudentTestsMessage","length","state","enableScoreReport","onSetProblems","onErrorMessage","setState","studentTestId","resolve","tests","testScoreDetails","test_id","testIds","map","test","id","currentTestIndex","findIndex","testId","currentTestSections","test_sections","section","testSectionIds","testSection","currentTestSectionIndex","testSectionId","test_section_id","currentTestSection","name","testMathCalcProblems","testWritingProblems","testMathNoCalcProblems","testReadingProblems","testSections","showSectionMessage","setTimeout","imgDataList","componentRefs","then","getImgListPromise","reduce","accumulatorPromise","item","result","getData","push","catch","console","error","activeSlide","currentImg","onHandleTargetImage","currentRef","getTargetImage","document","getElementById","currentSection","activeTestSection","onUpdateTestSectionMsg","activeStudentTestId","activeTestScores","onSetEssayScore","updateSectionStatus","onAddStudentAnswerToTest","onGetTestScores","textAlign","color","problem","answer","dispatchAddStudentAnswerToTest","postBody","test_problem_id","test_section_status","updatedSectionStatus","student_test_section_id","student_test_section_status","reading","writing","mathCalc","mathNoCalc","backgroundColor","fontSize","borderRadius","isOpened","updatedState","activeReadingSection","showInCompleteTest","activeWritingSection","activeMathNoCalcSection","activeMathWithCalcSection","activeSection","componentDidMount","onRef","componentWillUnmount","onResetErrorMessage","undefined","message","className","progressClassName","render","completedSections","status","updateTestSectionMessage","readingSectionCompleted","writingSectionCompleted","mathNoCalcSectionCompleted","mathCalcSectionCompleted","onSetActiveSlide","getExistingSections","completedSectionMessage","renderCurrentSlide","handleTestScore","propTypes","func","isRequired","mapStateToProps","studentToken","activeStudent","mapDispatchToProps","dispatch","onFetchStudentTestSections","score","payload","sectionId","errorName","withConnect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { toast } from 'react-toastify';\nimport AnswerSheetNavBar from './components/AnswerSheetNavBar';\nimport ReadingPage from './components/ReadingPage';\nimport WritingPage from './components/WritingPage';\nimport MathNoCalcPage from './components/MathNoCalcPage';\nimport MathCalculatorPage from './components/MathCalculatorPage';\nimport EssayPage from './components/EssayPage';\nimport {\n  makeSelectStudentSections,\n  makeSelectActiveStudentToken,\n  makeSelectActiveStudent,\n  makeSelectTests,\n  makeSelectActiveStudentTestId,\n  makeSelectActiveTestScores,\n} from '../index/selectors';\n\nimport {\n  fetchStudentTestSections,\n  addStudentAnswerToTest,\n  setEssayScore,\n  resetErrorMessage,\n  getTestScores,\n} from '../index/actions';\nimport { updateStudentTestSectionStatusApi } from '../index/api';\nimport { makeSelectErrorMessages } from '../index/selectors';\nclass DetailTestAnswerSheetComplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSlide: '',\n      isOpened: false,\n      testSections: [],\n      studentTestId: '',\n      testReadingProblems: null,\n      testWritingProblems: null,\n      testMathCalcProblems: null,\n      testMathNoCalcProblems: null,\n      activeTestSection: null,\n      updatedState: {\n        activeReadingSection: false,\n        showInCompleteTest: false,\n        activeWritingSection: false,\n        activeMathNoCalcSection: false,\n        activeMathWithCalcSection: false,\n        activeSection: '',\n      },\n      updatedSectionStatus: {},\n      showSectionMessage: false,\n      answerTestProblemMessage: \"\",\n      testFlagMessage: \"\",\n      fetchSectionsMessage: \"\",\n      fetchingStudentTestsMessage: \"\",\n      enableScoreReport: false,\n    };\n  }\n\n  componentDidMount() {\n    const { enableScoreReport } = this.state;\n    const { sections, testScoreDetails: { student_test_id } } = this.props;\n    if (sections.length !== 0 && !enableScoreReport) {\n      this.onSetProblems(sections, student_test_id);\n    }\n    this.props.onRef(this);\n  }\n  componentWillUnmount() {\n    const { onResetErrorMessage } = this.props;\n    this.props.onRef(undefined);\n    onResetErrorMessage('answerTestProblemMessage');\n    onResetErrorMessage('testFlagMessage');\n    onResetErrorMessage('fetchSectionsMessage');\n    onResetErrorMessage('fetchProblemsMessage');\n    onResetErrorMessage('fetchingStudentTestsMessage');\n  }\n\n  componentWillReceiveProps = nextProps => {\n    const {\n      sections,\n      student_test_id,\n      errorMessages: {\n        answerTestProblemMessage,\n        testFlagMessage,\n        fetchSectionsMessage,\n        fetchProblemsMessage,\n        fetchingStudentTestsMessage,\n      },\n    } = nextProps;\n    if (sections.length !== 0 && !this.state.enableScoreReport) {\n      this.onSetProblems(sections, student_test_id);\n    }\n    if (answerTestProblemMessage !== this.state.answerTestProblemMessage) {\n      this.onErrorMessage(answerTestProblemMessage, \"answerTestProblemMessage\");\n    }\n    if (testFlagMessage !== this.state.testFlagMessage) {\n      this.onErrorMessage(testFlagMessage, \"testFlagMessage\");\n    }\n    if (fetchingStudentTestsMessage !== this.state.fetchingStudentTestsMessage) {\n      this.onErrorMessage(fetchingStudentTestsMessage, \"fetchingStudentTestsMessage\");\n    }\n    if (fetchProblemsMessage !== this.state.fetchProblemsMessage) {\n      this.setState({ fetchProblemsMessage });\n    }\n    if (fetchSectionsMessage !== this.state.fetchSectionsMessage) {\n      this.setState({ fetchSectionsMessage });\n    }\n    if (fetchingStudentTestsMessage !== this.state.fetchingStudentTestsMessage) {\n      this.setState({ fetchingStudentTestsMessage });\n    }\n  };\n  onErrorMessage(message, name) {\n    if (!message) return this.setState({ [name]: \"\" });\n    toast.error(message, {\n      className: 'update-error',\n      progressClassName: 'progress-bar-error',\n    });\n    this.setState({ [name]: message });\n  }\n  onSetProblems = (sections, studentTestId) => new Promise(async resolve => {\n    const { tests, testScoreDetails: { test_id }, testScoreDetails } = this.props;\n    const testIds = tests.map(test => test.id);\n    const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    sections.map(section => {\n      const testSectionIds = currentTestSections.map(testSection => testSection.id);\n      const currentTestSectionIndex = testSectionIds.findIndex(\n        testSectionId => testSectionId === section.test_section_id,\n      );\n      const currentTestSection = currentTestSections[currentTestSectionIndex];\n      // Confirm that the sections are for the current student_test_id\n      if (!currentTestSection || testScoreDetails.student_test_id !== section.student_test_id) return null;\n      switch (currentTestSection.name) {\n        case 'Math (Calculator)':\n          this.setState({\n            testMathCalcProblems: section,\n          });\n          break;\n        case 'Writing':\n          this.setState({\n            testWritingProblems: section,\n          });\n          break;\n        case 'Math (No Calculator)':\n          this.setState({\n            testMathNoCalcProblems: section,\n          });\n          break;\n        case 'Reading':\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n        default:\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n      }\n    });\n    this.setState({\n      testSections: sections,\n      studentTestId,\n      showSectionMessage: false,\n    });\n    setTimeout(() => {\n      resolve();\n    }, 1000);\n  });\n\n  getComponentImages = () =>\n    new Promise(resolve => {\n      this.setState({\n        enableScoreReport: true,\n      });\n      const imgDataList = [];\n      const componentRefs = [\n        { id: 'readingAnswerSheetImg', state: 'reading' },\n        { id: 'writingAnswerSheetImg', state: 'writing' },\n        { id: 'mathNoCalcAnswerSheetImg', state: 'math (no calc)' },\n        { id: 'mathCalcAnswerSheetImg', state: 'math (calculator)' },\n      ];\n      setTimeout(() => {\n        const { sections, testScoreDetails: { student_test_id } } = this.props;\n        this.onSetProblems(sections, student_test_id).then(() => {\n          setTimeout(async () => {\n            const getImgListPromise = componentRefs.reduce(\n              (accumulatorPromise, item) =>\n                accumulatorPromise\n                  .then(async () => {\n                    const result = await this.getData(item);\n                    return imgDataList.push(result);\n                  })\n                  .catch(console.error),\n              Promise.resolve(),\n            );\n            getImgListPromise.then(() => {\n              resolve(imgDataList);\n            });\n          }, 1000);\n        });\n      }, 5000);\n    });\n\n  getData = item =>\n    new Promise(resolve => {\n      this.setState({ activeSlide: item.state }, async () => {\n        const currentImg = await this.onHandleTargetImage(item.id);\n        resolve(currentImg);\n      });\n    });\n\n  onHandleTargetImage = async currentRef => {\n    const { getTargetImage } = this.props;\n    const currentImg = await getTargetImage(document.getElementById(currentRef));\n    return currentImg;\n  };\n\n  onSetActiveSlide = activeSlide => {\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    let currentSection;\n    switch (activeSlide) {\n      case 'reading':\n        currentSection = testReadingProblems;\n        break;\n      case 'writing':\n        currentSection = testWritingProblems;\n        break;\n      case 'math (no calc)':\n        currentSection = testMathNoCalcProblems;\n        break;\n      case 'math (calculator)':\n        currentSection = testMathCalcProblems;\n        break;\n      default:\n        currentSection = testReadingProblems;\n        break;\n    }\n    this.setState({ activeSlide, activeTestSection: currentSection });\n    // Remove any error message for the previous slide\n    this.props.onUpdateTestSectionMsg(\"\");\n  };\n\n  renderCurrentSlide = () => {\n    const { activeSlide, fetchSectionsMessage } = this.state;\n    const { sections, activeStudentTestId, activeTestScores, onSetEssayScore } = this.props;\n    if (sections) {\n      const {\n        testReadingProblems,\n        testWritingProblems,\n        testMathCalcProblems,\n        testMathNoCalcProblems,\n      } = this.state;\n      if (activeSlide === 'reading') {\n        this.updateSectionStatus(activeSlide, testReadingProblems);\n        return (\n          <ReadingPage\n            testSection={testReadingProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'writing') {\n        this.updateSectionStatus(activeSlide, testWritingProblems);\n        return (\n          <WritingPage\n            testSection={testWritingProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'math (no calc)') {\n        this.updateSectionStatus(activeSlide, testMathNoCalcProblems);\n        return (\n          <MathNoCalcPage\n            testSection={testMathNoCalcProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'math (calculator)') {\n        this.updateSectionStatus(activeSlide, testMathCalcProblems);\n        return (\n          <MathCalculatorPage\n            testSection={testMathCalcProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'essay') {\n        return (\n          <EssayPage\n            testId={activeStudentTestId}\n            testScores={activeTestScores}\n            setEssayScore={onSetEssayScore}\n            onGetTestScores={this.props.onGetTestScores}\n            testScoreDetails={this.props.testScoreDetails}\n          />\n        );\n      }\n      if (!fetchSectionsMessage) {\n        return <h1 style={{ textAlign: 'center' }}>Loading Problems...</h1>;\n      }\n      return (\n        <h1 style={{ textAlign: 'center', color: 'red' }}>\n          {fetchSectionsMessage}\n        </h1>\n      );\n    }\n    return null;\n  };\n\n  onAddStudentAnswerToTest = async (problem, answer, student_test_id) => {\n    const { dispatchAddStudentAnswerToTest } = this.props;\n    const postBody = {\n      student_test_id,\n      test_problem_id: problem.id,\n      answer,\n    };\n    dispatchAddStudentAnswerToTest(postBody, problem.test_section_id);\n  };\n\n  updateSectionStatus = async (activeSlide, currentSection) => {\n    if (!currentSection) return;\n    if (currentSection.test_section_status === 'CREATED') {\n      if (!this.state.updatedSectionStatus[`${activeSlide}Section`]) {\n        const postBody = {\n          student_test_id: currentSection.student_test_id,\n          student_test_section_id: currentSection.id,\n          student_test_section_status: 'STARTED',\n        };\n        await updateStudentTestSectionStatusApi(postBody);\n        this.setState({\n          updatedSectionStatus: {\n            ...this.state.updatedSectionStatus,\n            [`${activeSlide}Section`]: 'STARTED',\n          },\n        });\n      }\n    }\n  };\n\n  getExistingSections = () => {\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    return {\n      reading: !!testReadingProblems,\n      writing: !!testWritingProblems,\n      mathCalc: !!testMathCalcProblems,\n      mathNoCalc: !!testMathNoCalcProblems,\n    };\n  };\n\n  completedSectionMessage = () => (\n    <p\n      style={{\n        color: \"white\",\n        backgroundColor: \"#28a745\",\n        fontSize: \"14px\",\n        borderRadius: \"25px\",\n      }}\n      className=\"center-align\"\n    >\n        This test section is complete. You can still edit answer choices if needed.\n    </p>\n  );\n\n  render() {\n    const {\n      activeSlide,\n      activeTestSection,\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    const { completedSections, testScoreDetails: { status }, updateTestSectionMessage } = this.props;\n    let showSectionMessage = this.state.showSectionMessage;\n    switch (activeSlide) {\n      case 'reading':\n        if (completedSections.readingSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      case 'writing':\n        if (completedSections.writingSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      case 'math (no calc)':\n        if (completedSections.mathNoCalcSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      case 'math (calculator)':\n        if (completedSections.mathCalcSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      default:\n        break;\n    }\n    return (\n      <div className=\"card-main-full card\">\n        <div className=\"slick-tabs-gallery\">\n          <AnswerSheetNavBar\n            activeSlide={activeSlide}\n            onSetActiveSlide={this.onSetActiveSlide}\n            getExistingSections={this.getExistingSections()}\n          />\n        </div>\n        <div className=\"card-content\">\n          {showSectionMessage && status !== \"COMPLETED\" && this.completedSectionMessage()}\n          <div className=\"main-slick\">\n            {this.renderCurrentSlide()}\n          </div>\n          {activeSlide && activeSlide !== \"essay\" && status !== \"COMPLETED\" && (\n            <div className=\"row\">\n              <div className=\"btn-holder right-align\">\n                <a\n                  href=\"#\"\n                  className=\"btn btn-xlarge waves-effect waves-light bg-blue\"\n                  onClick={() => {\n                    this.props.handleTestScore(activeTestSection, {\n                      testReadingProblems,\n                      testWritingProblems,\n                      testMathNoCalcProblems,\n                      testMathCalcProblems,\n                    });\n                  }}\n                >\n                  {!showSectionMessage ? \"Submit Test Section\" : \"Resubmit Test\"}\n                </a>\n              </div>\n            </div>)}\n          <p className=\"red-text right-align\">{updateTestSectionMessage}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nDetailTestAnswerSheetComplete.propTypes = {\n  getTargetImage: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeStudent: makeSelectActiveStudent(),\n  tests: makeSelectTests(),\n  activeStudentTestId: makeSelectActiveStudentTestId(),\n  activeTestScores: makeSelectActiveTestScores(),\n  errorMessages: makeSelectErrorMessages(),\n});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n    onSetEssayScore: score => dispatch(setEssayScore(score)),\n    dispatchAddStudentAnswerToTest: (payload, sectionId) =>\n      dispatch(addStudentAnswerToTest(payload, sectionId)),\n    onResetErrorMessage: errorName => dispatch(resetErrorMessage(errorName)),\n    onGetTestScores: (postBody) => dispatch(getTestScores(postBody)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(DetailTestAnswerSheetComplete);\n"]},"metadata":{},"sourceType":"module"}