{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TableHeader from './components/TableHeader';\nimport formatTimeEstimate from '../../../../../utils/formatTimeEstimate';\nimport statusColorMap from '../../utils/statusColorMap';\n\nvar ListView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListView, _React$Component);\n\n  function ListView(props) {\n    var _this;\n\n    _classCallCheck(this, ListView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListView).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDropdownClick\", function (event, index) {\n      var dropdownIsOpen = _this.state.dropdownIsOpen;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return _this.onCloseDropdown();\n      }\n\n      return _this.onSetDropdown(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapWorksheetRows\", function () {\n      var _this$props = _this.props,\n          worksheets = _this$props.worksheets,\n          onToggleDetailModalOpen = _this$props.onToggleDetailModalOpen;\n      var _this$state = _this.state,\n          dropdownIndex = _this$state.dropdownIndex,\n          dropdownIsOpen = _this$state.dropdownIsOpen;\n      return worksheets.map(function (worksheet, index) {\n        var disabled = worksheet.disabled,\n            worksheetName = worksheet.worksheetName,\n            score = worksheet.score,\n            status = worksheet.status,\n            problems = worksheet.problems,\n            timeEstimate = worksheet.timeEstimate,\n            assignDate = worksheet.assignDate,\n            dueDate = worksheet.dueDate,\n            completed = worksheet.completed,\n            flags = worksheet.flags;\n        return __jsx(\"div\", {\n          className: disabled ? 'card card-disabled list-table-row' : 'card list-table-row',\n          key: worksheet.id\n        }, __jsx(\"div\", {\n          className: \"list-table-cell icon-cell\"\n        }, __jsx(\"span\", {\n          className: \"block-icon\"\n        }, __jsx(\"i\", {\n          className: \"icon-sheets-w\"\n        }))), __jsx(\"div\", {\n          className: \"list-table-cell name-cell\"\n        }, __jsx(\"div\", {\n          className: \"card-panel-text truncate\"\n        }, __jsx(\"div\", {\n          className: \"text-large truncate\"\n        }, worksheetName))), __jsx(\"div\", {\n          className: \"list-table-cell graph-cell\"\n        }, score && __jsx(\"span\", {\n          className: \"chart-bar \".concat(statusColorMap[status], \" white-text\")\n        }, score, \"%\")), __jsx(\"div\", {\n          className: \"list-table-cell description-cell\"\n        }, problems), __jsx(\"div\", {\n          className: \"list-table-cell time-cell\"\n        }, formatTimeEstimate(timeEstimate)), __jsx(\"div\", {\n          className: \"list-table-cell date-cell\"\n        }, __jsx(\"time\", {\n          dateTime: \"2019-01-27\"\n        }, assignDate)), __jsx(\"div\", {\n          className: \"list-table-cell date-cell\"\n        }, __jsx(\"time\", {\n          dateTime: \"2019-01-27\"\n        }, dueDate)), __jsx(\"div\", {\n          className: \"list-table-cell completed-cell\"\n        }, completed && __jsx(React.Fragment, null, completed, \" of \", problems)), __jsx(\"div\", {\n          className: \"list-table-cell flags-cell\"\n        }, flags.length > 0 && __jsx(\"span\", {\n          className: \"badge-rounded-xs badge red darken-2 white-text\"\n        }, __jsx(\"b\", {\n          className: \"badge-text\"\n        }, flags.length), \" \", __jsx(\"i\", {\n          className: \"icon-flag\"\n        }))), __jsx(\"div\", {\n          className: \"list-table-cell status-cell\"\n        }, __jsx(\"span\", {\n          className: \"badge badge-rounded-md \".concat(statusColorMap[status], \" white-text\")\n        }, status)), __jsx(\"div\", {\n          className: \"list-table-cell drop-cell\"\n        }, __jsx(\"div\", {\n          className: \"dropdown-block\"\n        }, __jsx(\"a\", {\n          href: \"#\",\n          \"data-target\": \"dropdown01\",\n          className: \"dropdown-trigger btn\",\n          onClick: function onClick(event) {\n            return _this.handleDropdownClick(event, index);\n          }\n        }, __jsx(\"i\", {\n          className: \"material-icons dots-icon\"\n        }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? __jsx(\"ul\", {\n          id: \"dropdown01\",\n          className: \"dropdown-content dropdown-wide\",\n          style: {\n            display: 'block',\n            opacity: '1',\n            transform: 'scaleX(1) scaleY(1)'\n          }\n        }, __jsx(\"li\", null, __jsx(\"a\", {\n          href: \"#\",\n          className: \"modal-trigger link-block\",\n          onClick: function onClick() {\n            return onToggleDetailModalOpen(index);\n          }\n        }, \"View Details\")), __jsx(\"li\", null, __jsx(\"a\", {\n          href: \"#!\"\n        }, \"Dismiss Flags\")), __jsx(\"li\", null, __jsx(\"a\", {\n          href: \"#!\"\n        }, \"Reset\")), __jsx(\"li\", null, __jsx(\"a\", {\n          href: \"#!\",\n          className: \"link-delete\"\n        }, \"Delete\"))) : null)));\n      });\n    });\n\n    _this.state = {\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    };\n    return _this;\n  }\n\n  _createClass(ListView, [{\n    key: \"render\",\n    value: function render() {\n      var worksheets = this.props.worksheets;\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"content-section\"\n      }, __jsx(\"div\", {\n        className: \"container-md\"\n      }, __jsx(\"div\", {\n        className: \"result-row center-align\"\n      }, __jsx(\"b\", {\n        className: \"result\"\n      }, \" - \", worksheets.length, \" results -\")), __jsx(\"div\", {\n        className: \"list-view-section\"\n      }, __jsx(\"div\", {\n        className: \"list-table\"\n      }, __jsx(TableHeader, null), __jsx(\"div\", {\n        className: \"list-table-body\"\n      }, this.mapWorksheetRows()))))));\n    }\n  }]);\n\n  return ListView;\n}(React.Component);\n\nListView.propTypes = {\n  worksheets: PropTypes.array.isRequired,\n  onToggleDetailModalOpen: PropTypes.func.isRequired\n};\nexport default ListView;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Classes/DetailWorksheetPage/components/ListView/index.js"],"names":["React","PropTypes","TableHeader","formatTimeEstimate","statusColorMap","ListView","props","dropdownIndex","setState","dropdownIsOpen","event","index","state","preventDefault","onCloseDropdown","onSetDropdown","worksheets","onToggleDetailModalOpen","map","worksheet","disabled","worksheetName","score","status","problems","timeEstimate","assignDate","dueDate","completed","flags","id","length","handleDropdownClick","display","opacity","transform","mapWorksheetRows","Component","propTypes","array","isRequired","func"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAOC,kBAAP,MAA+B,yCAA/B;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;IAEMC,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;;AADiB,oEAQH,UAACC,aAAD;AAAA,aAAmB,MAAKC,QAAL,CAAc;AAAED,QAAAA,aAAa,EAAbA,aAAF;AAAiBE,QAAAA,cAAc,EAAE;AAAjC,OAAd,CAAnB;AAAA,KARG;;AAAA,sEASD;AAAA,aAAM,MAAKD,QAAL,CAAc;AAAEC,QAAAA,cAAc,EAAE;AAAlB,OAAd,CAAN;AAAA,KATC;;AAAA,0EAWG,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAAA,UAC9BF,cAD8B,GACX,MAAKG,KADM,CAC9BH,cAD8B;AAEtCC,MAAAA,KAAK,CAACG,cAAN;;AACA,UAAIJ,cAAJ,EAAoB;AAClB,eAAO,MAAKK,eAAL,EAAP;AACD;;AACD,aAAO,MAAKC,aAAL,CAAmBJ,KAAnB,CAAP;AACD,KAlBkB;;AAAA,uEAoBA,YAAM;AAAA,wBACyB,MAAKL,KAD9B;AAAA,UACfU,UADe,eACfA,UADe;AAAA,UACHC,uBADG,eACHA,uBADG;AAAA,wBAEmB,MAAKL,KAFxB;AAAA,UAEfL,aAFe,eAEfA,aAFe;AAAA,UAEAE,cAFA,eAEAA,cAFA;AAGvB,aAAOO,UAAU,CAACE,GAAX,CAAe,UAACC,SAAD,EAAYR,KAAZ,EAAsB;AAAA,YAClCS,QADkC,GACwED,SADxE,CAClCC,QADkC;AAAA,YACxBC,aADwB,GACwEF,SADxE,CACxBE,aADwB;AAAA,YACTC,KADS,GACwEH,SADxE,CACTG,KADS;AAAA,YACFC,MADE,GACwEJ,SADxE,CACFI,MADE;AAAA,YACMC,QADN,GACwEL,SADxE,CACMK,QADN;AAAA,YACgBC,YADhB,GACwEN,SADxE,CACgBM,YADhB;AAAA,YAC8BC,UAD9B,GACwEP,SADxE,CAC8BO,UAD9B;AAAA,YAC0CC,OAD1C,GACwER,SADxE,CAC0CQ,OAD1C;AAAA,YACmDC,SADnD,GACwET,SADxE,CACmDS,SADnD;AAAA,YAC8DC,KAD9D,GACwEV,SADxE,CAC8DU,KAD9D;AAE1C,eACE;AAAK,UAAA,SAAS,EAAET,QAAQ,GAAG,mCAAH,GAAyC,qBAAjE;AAAwF,UAAA,GAAG,EAAED,SAAS,CAACW;AAAvG,WACE;AAAK,UAAA,SAAS,EAAC;AAAf,WACE;AAAM,UAAA,SAAS,EAAC;AAAhB,WACE;AAAG,UAAA,SAAS,EAAC;AAAb,UADF,CADF,CADF,EAME;AAAK,UAAA,SAAS,EAAC;AAAf,WACE;AAAK,UAAA,SAAS,EAAC;AAAf,WACE;AAAK,UAAA,SAAS,EAAC;AAAf,WAAsCT,aAAtC,CADF,CADF,CANF,EAWE;AAAK,UAAA,SAAS,EAAC;AAAf,WACGC,KAAK,IACJ;AAAM,UAAA,SAAS,sBAAelB,cAAc,CAACmB,MAAD,CAA7B;AAAf,WAAoED,KAApE,MAFJ,CAXF,EAgBE;AAAK,UAAA,SAAS,EAAC;AAAf,WAAmDE,QAAnD,CAhBF,EAiBE;AAAK,UAAA,SAAS,EAAC;AAAf,WAA4CrB,kBAAkB,CAACsB,YAAD,CAA9D,CAjBF,EAkBE;AAAK,UAAA,SAAS,EAAC;AAAf,WAA2C;AAAM,UAAA,QAAQ,EAAC;AAAf,WAA6BC,UAA7B,CAA3C,CAlBF,EAmBE;AAAK,UAAA,SAAS,EAAC;AAAf,WAA2C;AAAM,UAAA,QAAQ,EAAC;AAAf,WAA6BC,OAA7B,CAA3C,CAnBF,EAoBE;AAAK,UAAA,SAAS,EAAC;AAAf,WACGC,SAAS,IACR,MAAC,KAAD,CAAO,QAAP,QACGA,SADH,UACkBJ,QADlB,CAFJ,CApBF,EA2BE;AAAK,UAAA,SAAS,EAAC;AAAf,WACGK,KAAK,CAACE,MAAN,GAAe,CAAf,IACC;AAAM,UAAA,SAAS,EAAC;AAAhB,WAAiE;AAAG,UAAA,SAAS,EAAC;AAAb,WAA2BF,KAAK,CAACE,MAAjC,CAAjE,OAA8G;AAAG,UAAA,SAAS,EAAC;AAAb,UAA9G,CAFJ,CA3BF,EAgCE;AAAK,UAAA,SAAS,EAAC;AAAf,WACE;AAAM,UAAA,SAAS,mCAA4B3B,cAAc,CAACmB,MAAD,CAA1C;AAAf,WAAiFA,MAAjF,CADF,CAhCF,EAmCE;AAAK,UAAA,SAAS,EAAC;AAAf,WACE;AAAK,UAAA,SAAS,EAAC;AAAf,WACE;AACE,UAAA,IAAI,EAAC,GADP;AAEE,yBAAY,YAFd;AAGE,UAAA,SAAS,EAAC,sBAHZ;AAIE,UAAA,OAAO,EAAE,iBAACb,KAAD;AAAA,mBAAW,MAAKsB,mBAAL,CAAyBtB,KAAzB,EAAgCC,KAAhC,CAAX;AAAA;AAJX,WAME;AAAG,UAAA,SAAS,EAAC;AAAb,uBANF,CADF,EASiBF,cAAc,IAAIF,aAAa,KAAKI,KATrD,GAUI;AAAI,UAAA,EAAE,EAAC,YAAP;AAAoB,UAAA,SAAS,EAAC,gCAA9B;AAA+D,UAAA,KAAK,EAAE;AAAEsB,YAAAA,OAAO,EAAE,OAAX;AAAoBC,YAAAA,OAAO,EAAE,GAA7B;AAAkCC,YAAAA,SAAS,EAAE;AAA7C;AAAtE,WACE,kBACE;AACE,UAAA,IAAI,EAAC,GADP;AAEE,UAAA,SAAS,EAAC,0BAFZ;AAGE,UAAA,OAAO,EAAE;AAAA,mBAAMlB,uBAAuB,CAACN,KAAD,CAA7B;AAAA;AAHX,0BADF,CADF,EAUE,kBAAI;AAAG,UAAA,IAAI,EAAC;AAAR,2BAAJ,CAVF,EAWE,kBAAI;AAAG,UAAA,IAAI,EAAC;AAAR,mBAAJ,CAXF,EAYE,kBAAI;AAAG,UAAA,IAAI,EAAC,IAAR;AAAa,UAAA,SAAS,EAAC;AAAvB,oBAAJ,CAZF,CAVJ,QADF,CAnCF,CADF;AAkED,OApEM,CAAP;AAqED,KA5FkB;;AAEjB,UAAKC,KAAL,GAAa;AACXH,MAAAA,cAAc,EAAE,KADL;AAEXF,MAAAA,aAAa,EAAE;AAFJ,KAAb;AAFiB;AAMlB;;;;6BAwFQ;AAAA,UACCS,UADD,GACgB,KAAKV,KADrB,CACCU,UADD;AAEP,aACE,MAAC,KAAD,CAAO,QAAP,QACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAG,QAAA,SAAS,EAAC;AAAb,gBAA0BA,UAAU,CAACe,MAArC,eADF,CADF,EAIE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,MAAC,WAAD,OADF,EAEE;AAAK,QAAA,SAAS,EAAC;AAAf,SACG,KAAKK,gBAAL,EADH,CAFF,CADF,CAJF,CADF,CADF,CADF;AAmBD;;;;EApHoBpC,KAAK,CAACqC,S;;AAuH7BhC,QAAQ,CAACiC,SAAT,GAAqB;AACnBtB,EAAAA,UAAU,EAAEf,SAAS,CAACsC,KAAV,CAAgBC,UADT;AAEnBvB,EAAAA,uBAAuB,EAAEhB,SAAS,CAACwC,IAAV,CAAeD;AAFrB,CAArB;AAKA,eAAenC,QAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TableHeader from './components/TableHeader';\n\nimport formatTimeEstimate from '../../../../../utils/formatTimeEstimate';\nimport statusColorMap from '../../utils/statusColorMap';\n\nclass ListView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n    };\n  }\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  handleDropdownClick = (event, index) => {\n    const { dropdownIsOpen } = this.state;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return this.onCloseDropdown();\n    }\n    return this.onSetDropdown(index);\n  }\n\n  mapWorksheetRows = () => {\n    const { worksheets, onToggleDetailModalOpen } = this.props;\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    return worksheets.map((worksheet, index) => {\n      const { disabled, worksheetName, score, status, problems, timeEstimate, assignDate, dueDate, completed, flags } = worksheet;\n      return (\n        <div className={disabled ? 'card card-disabled list-table-row' : 'card list-table-row'} key={worksheet.id}>\n          <div className=\"list-table-cell icon-cell\">\n            <span className=\"block-icon\">\n              <i className=\"icon-sheets-w\"></i>\n            </span>\n          </div>\n          <div className=\"list-table-cell name-cell\">\n            <div className=\"card-panel-text truncate\">\n              <div className=\"text-large truncate\">{worksheetName}</div>\n            </div>\n          </div>\n          <div className=\"list-table-cell graph-cell\">\n            {score && (\n              <span className={`chart-bar ${statusColorMap[status]} white-text`}>{score}%</span>\n            )}\n          </div>\n          <div className=\"list-table-cell description-cell\">{problems}</div>\n          <div className=\"list-table-cell time-cell\">{formatTimeEstimate(timeEstimate)}</div>\n          <div className=\"list-table-cell date-cell\"><time dateTime=\"2019-01-27\">{assignDate}</time></div>\n          <div className=\"list-table-cell date-cell\"><time dateTime=\"2019-01-27\">{dueDate}</time></div>\n          <div className=\"list-table-cell completed-cell\">\n            {completed && (\n              <React.Fragment>\n                {completed} of {problems}\n              </React.Fragment>\n            )}\n          </div>\n          <div className=\"list-table-cell flags-cell\">\n            {flags.length > 0 && (\n              <span className=\"badge-rounded-xs badge red darken-2 white-text\"><b className=\"badge-text\">{flags.length}</b> <i className=\"icon-flag\"></i></span>\n            )}\n          </div>\n          <div className=\"list-table-cell status-cell\">\n            <span className={`badge badge-rounded-md ${statusColorMap[status]} white-text`}>{status}</span>\n          </div>\n          <div className=\"list-table-cell drop-cell\">\n            <div className=\"dropdown-block\">\n              <a\n                href='#'\n                data-target='dropdown01'\n                className='dropdown-trigger btn'\n                onClick={(event) => this.handleDropdownClick(event, index)}\n              >\n                <i className=\"material-icons dots-icon\">more_vert</i>\n              </a>\n              <If condition={dropdownIsOpen && dropdownIndex === index}>\n                <ul id='dropdown01' className='dropdown-content dropdown-wide' style={{ display: 'block', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}>\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"modal-trigger link-block\"\n                      onClick={() => onToggleDetailModalOpen(index)}\n                    >\n                      View Details\n                    </a>\n                  </li>\n                  <li><a href=\"#!\">Dismiss Flags</a></li>\n                  <li><a href=\"#!\">Reset</a></li>\n                  <li><a href=\"#!\" className=\"link-delete\">Delete</a></li>\n                </ul>\n              </If>\n            </div>\n          </div>\n        </div>\n      )\n    })\n  }\n\n  render() {\n    const { worksheets } = this.props;\n    return (\n      <React.Fragment>\n        <div className=\"content-section\">\n          <div className=\"container-md\">\n            <div className=\"result-row center-align\">\n              <b className=\"result\"> - {worksheets.length} results -</b>\n            </div>\n            <div className=\"list-view-section\">\n              <div className=\"list-table\">\n                <TableHeader />\n                <div className=\"list-table-body\">\n                  {this.mapWorksheetRows()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nListView.propTypes = {\n  worksheets: PropTypes.array.isRequired,\n  onToggleDetailModalOpen: PropTypes.func.isRequired,\n}\n\nexport default ListView;\n"]},"metadata":{},"sourceType":"module"}