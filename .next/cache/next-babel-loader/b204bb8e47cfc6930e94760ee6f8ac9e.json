{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable react/no-did-update-set-state */\n\n/* eslint-disable react/no-did-mount-set-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport Portal from '../../../../Portal';\nimport TestVersionSettings from './components/TestVersionSettings';\nimport Settings from './components/Settings';\n\nclass EditTestModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleTestVersionSettingsChange\", event => {\n      const {\n        testVersion: {\n          sections\n        }\n      } = this.state;\n      let testVersion;\n\n      if (event.target) {\n        const {\n          target: {\n            name: setting\n          }\n        } = event;\n\n        if (sections[setting] !== undefined) {\n          testVersion = update(this.state.testVersion, {\n            sections: {\n              [setting]: {\n                $set: !sections[setting]\n              }\n            }\n          });\n        } else {\n          testVersion = update(this.state.testVersion, {\n            [setting]: {\n              $set: !this.state.testVersion[setting]\n            }\n          });\n        }\n      } else {\n        testVersion = update(this.state.testVersion, {\n          version: {\n            $set: event\n          }\n        });\n      }\n\n      this.setState({\n        testVersion\n      });\n    });\n\n    _defineProperty(this, \"handleSettingsChange\", event => {\n      const {\n        settings: previousSettings\n      } = this.state;\n      const {\n        target: {\n          name: setting\n        }\n      } = event;\n      const settings = update(this.state.settings, {\n        [setting]: {\n          $set: !previousSettings[setting]\n        }\n      });\n      this.setState({\n        settings\n      });\n    });\n\n    _defineProperty(this, \"handleDatePickerChange\", (field, value) => {\n      const settings = update(this.state.settings, {\n        [field]: {\n          $set: value\n        }\n      });\n      this.setState({\n        settings\n      });\n    });\n\n    _defineProperty(this, \"saveTestChanges\", () => {\n      const {\n        onSaveTestChanges\n      } = this.props;\n      const {\n        testVersion,\n        settings: {\n          testDate: unformattedTestDate,\n          dueDate: unformattedDueDate,\n          allowStudentToEnterAnswers,\n          timed\n        }\n      } = this.state;\n      const testDate = moment(unformattedTestDate).format('MM/DD/YY');\n      const dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n      onSaveTestChanges(testVersion, {\n        testDate,\n        dueDate,\n        allowStudentToEnterAnswers,\n        timed\n      });\n    });\n\n    this.state = {\n      testVersion: {\n        version: '',\n        sections: {\n          reading: false,\n          writing: false,\n          math: false,\n          essay: false\n        },\n        includeScoreInImprovementMetrics: false\n      },\n      settings: {\n        testDate: '',\n        dueDate: '',\n        allowStudentToEnterAnswers: false,\n        timed: false\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      test: {\n        testDate: unformattedTestDate,\n        dueDate: unformattedDueDate\n      }\n    } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n    const settings = update(this.state.settings, {\n      testDate: {\n        $set: testDate\n      },\n      dueDate: {\n        $set: dueDate\n      }\n    });\n    this.setState({\n      settings\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      test: {\n        testDate: unformattedTestDate,\n        dueDate: unformattedDueDate\n      }\n    } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n\n    if (prevProps.test.id !== this.props.test.id) {\n      const settings = update(this.state.settings, {\n        testDate: {\n          $set: testDate\n        },\n        dueDate: {\n          $set: dueDate\n        }\n      });\n      this.setState({\n        settings\n      });\n    }\n  }\n\n  render() {\n    const {\n      test,\n      user,\n      onDeleteTest\n    } = this.props;\n    const {\n      title,\n      version: testVersion,\n      completionDate,\n      completionTime\n    } = test;\n    const {\n      studentInformation: {\n        firstName,\n        lastName\n      }\n    } = user;\n    const {\n      testVersion: {\n        sections: {\n          reading,\n          writing,\n          math,\n          essay\n        },\n        version,\n        includeScoreInImprovementMetrics\n      },\n      settings: {\n        testDate,\n        dueDate,\n        allowStudentToEnterAnswers,\n        timed\n      }\n    } = this.state;\n    return React.createElement(Portal, {\n      selector: \"#modal\"\n    }, React.createElement(\"div\", {\n      className: \"main-holder grey lighten-5 modal\",\n      style: {\n        zIndex: '1003',\n        display: 'block',\n        position: 'absolute',\n        top: '0',\n        width: '100%'\n      }\n    }, React.createElement(\"div\", {\n      className: \"header-row card-panel light-blue lighten-1 white-text\"\n    }, React.createElement(\"div\", {\n      className: \"card-panel-row row\"\n    }, React.createElement(\"div\", {\n      className: \"icon-col col s1\"\n    }, React.createElement(\"i\", {\n      className: \"icon-letter-a\"\n    })), React.createElement(\"div\", {\n      className: \"col s9\"\n    }, React.createElement(\"div\", {\n      className: \"card-panel-text center-align\"\n    }, React.createElement(\"div\", {\n      className: \"text-xlarge\"\n    }, title), React.createElement(\"div\", {\n      className: \"text-small\"\n    }, \"Version: SAT Practice Test #\", testVersion))), React.createElement(\"div\", {\n      className: \"col s1 right-align\"\n    }, React.createElement(\"div\", {\n      className: \"row icons-row\"\n    }, \"\\xA0\"))), React.createElement(\"div\", {\n      className: \"header-row-block card-panel-row row\"\n    }, React.createElement(\"div\", {\n      className: \"col s3\"\n    }, \"\\xA0\"), React.createElement(\"div\", {\n      className: \"col s9 right-align\"\n    }, React.createElement(\"div\", null, React.createElement(\"span\", {\n      className: \"name\"\n    }, firstName, \" \", lastName))))), React.createElement(\"div\", {\n      className: \"nav-header white\"\n    }, React.createElement(\"div\", {\n      className: \"nav-additional\"\n    }, React.createElement(\"ul\", {\n      className: \"menu-additional\"\n    }, React.createElement(\"li\", {\n      className: \"col s3\"\n    }, React.createElement(\"a\", {\n      className: \"active\",\n      href: \"#\"\n    }, \"Scores\")), React.createElement(\"li\", {\n      className: \"col s3\"\n    }, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"Answer Sheet\")), React.createElement(\"li\", {\n      className: \"col s3\"\n    }, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"Strengths & Weaknesses\")), React.createElement(\"li\", {\n      className: \"col s3\"\n    }, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"Test Version\")), React.createElement(\"li\", {\n      className: \"menu-special col s3\"\n    }, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"Download Score Report \", React.createElement(\"i\", {\n      className: \"icon-download-file\"\n    })))))), React.createElement(\"div\", {\n      className: \"content-section\"\n    }, React.createElement(\"div\", {\n      className: \"content-section-holder\"\n    }, React.createElement(\"div\", {\n      className: \"container-xsmall\"\n    }, React.createElement(\"div\", {\n      className: \"row d-flex-content card-width-322\"\n    }, React.createElement(\"div\", {\n      className: \"card-main-col col s12 m8 l7 xl5\"\n    }, React.createElement(TestVersionSettings, {\n      version: version,\n      reading: reading,\n      writing: writing,\n      math: math,\n      essay: essay,\n      includeScoreInImprovementMetrics: includeScoreInImprovementMetrics,\n      handleTestVersionSettingsChange: this.handleTestVersionSettingsChange\n    }), React.createElement(Settings, {\n      timed: timed,\n      testDate: testDate,\n      dueDate: dueDate,\n      handleSettingsChange: this.handleSettingsChange,\n      handleDatePickerChange: this.handleDatePickerChange,\n      allowStudentToEnterAnswers: allowStudentToEnterAnswers\n    })), React.createElement(\"div\", {\n      className: \"card-main-col col s12 m8 l7 xl5\"\n    }, React.createElement(\"h2\", null, \"Status\"), React.createElement(\"div\", {\n      className: \"card card-test-detail\"\n    }, React.createElement(\"div\", {\n      className: \"card-content\"\n    }, React.createElement(\"div\", {\n      className: \"meta-info\"\n    }, completionDate.length ? React.createElement(\"p\", null, \"Completed : \", React.createElement(\"time\", {\n      dateTime: \"2018-12-29\"\n    }, completionDate, \" at \", completionTime), completionDate.length && test.dueDate < completionDate ? React.createElement(\"span\", {\n      className: \"badge white-text badge-rounded-sm\",\n      style: {\n        backgroundColor: '#db1d41'\n      }\n    }, React.createElement(\"b\", {\n      className: \"badge-text\"\n    }, \"late\")) : null) : null, React.createElement(\"p\", null, \"Answers Entered by: \", firstName, \" \", lastName, \" (student)\")))))), React.createElement(\"div\", {\n      className: \"btn-holder\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      className: \"btn\",\n      onClick: this.saveTestChanges\n    }, \"Save\"), React.createElement(\"a\", {\n      href: \"#\",\n      className: \"waves-effect waves-teal btn-flat pink-text text-darken-1\",\n      onClick: onDeleteTest\n    }, \"Delete\")))))));\n  }\n\n}\n\nEditTestModal.propTypes = {\n  test: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSaveTestChanges: PropTypes.func.isRequired\n};\nexport default EditTestModal;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/DetailTestList/components/EditTestModal/index.js"],"names":["React","PropTypes","update","moment","Portal","TestVersionSettings","Settings","EditTestModal","Component","constructor","props","event","testVersion","sections","state","target","name","setting","undefined","$set","version","setState","settings","previousSettings","field","value","onSaveTestChanges","testDate","unformattedTestDate","dueDate","unformattedDueDate","allowStudentToEnterAnswers","timed","format","reading","writing","math","essay","includeScoreInImprovementMetrics","componentDidMount","test","Date","componentDidUpdate","prevProps","id","render","user","onDeleteTest","title","completionDate","completionTime","studentInformation","firstName","lastName","zIndex","display","position","top","width","handleTestVersionSettingsChange","handleSettingsChange","handleDatePickerChange","length","backgroundColor","saveTestChanges","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-did-update-set-state */\n/* eslint-disable react/no-did-mount-set-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\n\nimport Portal from '../../../../Portal';\nimport TestVersionSettings from './components/TestVersionSettings';\nimport Settings from './components/Settings';\n\nclass EditTestModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      testVersion: {\n        version: '',\n        sections: {\n          reading: false,\n          writing: false,\n          math: false,\n          essay: false,\n        },\n        includeScoreInImprovementMetrics: false,\n      },\n      settings: {\n        testDate: '',\n        dueDate: '',\n        allowStudentToEnterAnswers: false,\n        timed: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { test: { testDate: unformattedTestDate, dueDate: unformattedDueDate } } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n    const settings = update(this.state.settings, {\n      testDate: {\n        $set: testDate,\n      },\n      dueDate: {\n        $set: dueDate,\n      },\n    });\n    this.setState({ settings });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { test: { testDate: unformattedTestDate, dueDate: unformattedDueDate } } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n    if (prevProps.test.id !== this.props.test.id) {\n      const settings = update(this.state.settings, {\n        testDate: {\n          $set: testDate,\n        },\n        dueDate: {\n          $set: dueDate,\n        },\n      });\n      this.setState({ settings });\n    }\n  }\n\n  handleTestVersionSettingsChange = (event) => {\n    const { testVersion: { sections } } = this.state;\n    let testVersion;\n    if (event.target) {\n      const { target: { name: setting } } = event;\n      if (sections[setting] !== undefined) {\n        testVersion = update(this.state.testVersion, {\n          sections: {\n            [setting]: {\n              $set: !sections[setting],\n            },\n          },\n        });\n      } else {\n        testVersion = update(this.state.testVersion, {\n          [setting]: {\n            $set: !this.state.testVersion[setting],\n          },\n        });\n      }\n    } else {\n      testVersion = update(this.state.testVersion, {\n        version: {\n          $set: event,\n        },\n      });\n    }\n    this.setState({ testVersion });\n  }\n\n  handleSettingsChange = (event) => {\n    const { settings: previousSettings } = this.state;\n    const { target: { name: setting } } = event;\n    const settings = update(this.state.settings, {\n      [setting]: {\n        $set: !previousSettings[setting],\n      },\n    });\n    this.setState({ settings });\n  }\n\n  handleDatePickerChange = (field, value) => {\n    const settings = update(this.state.settings, {\n      [field]: {\n        $set: value,\n      },\n    });\n    this.setState({ settings });\n  }\n\n  saveTestChanges = () => {\n    const { onSaveTestChanges } = this.props;\n    const { testVersion, settings: { testDate: unformattedTestDate, dueDate: unformattedDueDate, allowStudentToEnterAnswers, timed } } = this.state;\n    const testDate = moment(unformattedTestDate).format('MM/DD/YY');\n    const dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n    onSaveTestChanges(testVersion, { testDate, dueDate, allowStudentToEnterAnswers, timed });\n  }\n\n  render() {\n    const { test, user, onDeleteTest } = this.props;\n    const { title, version: testVersion, completionDate, completionTime } = test;\n    const { studentInformation: { firstName, lastName } } = user;\n    const {\n      testVersion: {\n        sections: {\n          reading, writing, math, essay,\n        },\n        version, includeScoreInImprovementMetrics,\n      },\n      settings: { testDate, dueDate, allowStudentToEnterAnswers, timed },\n    } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        <div className=\"main-holder grey lighten-5 modal\" style={{ zIndex: '1003', display: 'block', position: 'absolute', top: '0', width: '100%' }}>\n          <div className=\"header-row card-panel light-blue lighten-1 white-text\">\n            <div className=\"card-panel-row row\">\n              <div className=\"icon-col col s1\">\n                <i className=\"icon-letter-a\"></i>\n              </div>\n              <div className=\"col s9\">\n                <div className=\"card-panel-text center-align\">\n                  <div className=\"text-xlarge\">{title}</div>\n                  <div className=\"text-small\">Version: SAT Practice Test #{testVersion}</div>\n                </div>\n              </div>\n              <div className=\"col s1 right-align\">\n                <div className=\"row icons-row\">&nbsp;</div>\n              </div>\n            </div>\n            <div className=\"header-row-block card-panel-row row\">\n              <div className=\"col s3\">&nbsp;</div>\n              <div className=\"col s9 right-align\">\n                <div><span className=\"name\">{firstName} {lastName}</span></div>\n              </div>\n            </div>\n          </div>\n          <div className=\"nav-header white\">\n            <div className=\"nav-additional\">\n              <ul className=\"menu-additional\">\n                <li className=\"col s3\"><a className=\"active\" href=\"#\">Scores</a></li>\n                <li className=\"col s3\"><a href=\"#\">Answer Sheet</a></li>\n                <li className=\"col s3\"><a href=\"#\">Strengths &amp; Weaknesses</a></li>\n                <li className=\"col s3\"><a href=\"#\">Test Version</a></li>\n                <li className=\"menu-special col s3\"><a href=\"#\">Download Score Report <i className=\"icon-download-file\"></i></a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"content-section\">\n            <div className=\"content-section-holder\">\n              <div className=\"container-xsmall\">\n                <div className=\"row d-flex-content card-width-322\">\n                  <div className=\"card-main-col col s12 m8 l7 xl5\">\n                    <TestVersionSettings\n                      version={version}\n                      reading={reading}\n                      writing={writing}\n                      math={math}\n                      essay={essay}\n                      includeScoreInImprovementMetrics={includeScoreInImprovementMetrics}\n                      handleTestVersionSettingsChange={this.handleTestVersionSettingsChange}\n                    />\n                    <Settings\n                      timed={timed}\n                      testDate={testDate}\n                      dueDate={dueDate}\n                      handleSettingsChange={this.handleSettingsChange}\n                      handleDatePickerChange={this.handleDatePickerChange}\n                      allowStudentToEnterAnswers={allowStudentToEnterAnswers}\n                    />\n                  </div>\n                  <div className=\"card-main-col col s12 m8 l7 xl5\">\n                    <h2>Status</h2>\n                    <div className=\"card card-test-detail\">\n                      <div className=\"card-content\">\n                        <div className=\"meta-info\">\n                          <If condition={completionDate.length}>\n                            <p>\n                              Completed : <time dateTime=\"2018-12-29\">{completionDate} at {completionTime}</time>\n                              <If condition={completionDate.length && test.dueDate < completionDate}>\n                                <span className=\"badge white-text badge-rounded-sm\" style={{ backgroundColor: '#db1d41' }}><b className=\"badge-text\">late</b></span>\n                              </If>\n                            </p>\n                          </If>\n                          <p>Answers Entered by: {firstName} {lastName} (student)</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"btn-holder\">\n                  <a href=\"#\" className=\"btn\" onClick={this.saveTestChanges}>Save</a>\n                  <a href=\"#\" className=\"waves-effect waves-teal btn-flat pink-text text-darken-1\" onClick={onDeleteTest}>Delete</a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Portal>\n    );\n  }\n}\n\nEditTestModal.propTypes = {\n  test: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSaveTestChanges: PropTypes.func.isRequired,\n}\n\nexport default EditTestModal;\n"]},"metadata":{},"sourceType":"module"}