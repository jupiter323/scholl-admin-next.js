{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable no-console */\nimport React from 'react';\nimport TestCard from './components/TestCard';\nimport TestSections from '../TestSections';\nimport sampleTests from './utils/sampleTests';\nimport EditTestModal from './components/EditTestModal';\n\nclass DetailTestList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onToggleEditTestModal\", (activeTest = null) => this.setState(({\n      editTestModalOpen\n    }) => ({\n      editTestModalOpen: !editTestModalOpen,\n      activeTest\n    }), this.onCloseDropdown));\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIndex,\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onCreateTest\", event => {\n      event.preventDefault();\n      console.warn('Pending implementation of create test UI and functionality');\n    });\n\n    _defineProperty(this, \"onEnterAnswers\", () => console.warn('Pending implementation of enter answers UI and functionality'));\n\n    _defineProperty(this, \"onEditTest\", () => console.warn('Pending implementation edit test UI and functionality'));\n\n    _defineProperty(this, \"onDownloadReport\", () => console.warn('Pending implementation of download report ui and functionality'));\n\n    _defineProperty(this, \"onDeleteTest\", () => this.setState({\n      editTestModalOpen: false\n    }, () => console.warn('Pending implementation of delete test UI and functionality')));\n\n    _defineProperty(this, \"onSaveTestChanges\", (testVersion, settings) => {\n      this.onToggleEditTestModal();\n      console.warn('Pending save test changes functionality', testVersion, settings);\n    });\n\n    _defineProperty(this, \"openTestScores\", index => {\n      const {\n        tests\n      } = this.state;\n      const newTestArray = tests.filter(test => test.status === 'complete');\n      this.setState({\n        selectedTest: newTestArray[index.index]\n      }, console.log(\"clicked\", index[0], newTestArray, newTestArray[{\n        index\n      }]));\n    });\n\n    _defineProperty(this, \"mapCompletedTests\", () => {\n      const {\n        tests\n      } = this.state;\n      return tests.filter(test => test.status === 'complete').map((test, index) => React.createElement(TestCard, {\n        test: test,\n        key: `completed-${test.id}`,\n        index: index,\n        onEditTest: () => this.onToggleEditTestModal(test),\n        onDeleteTest: this.onDeleteTest,\n        onSetDropdown: this.onSetDropdown,\n        onEnterAnswers: this.onEnterAnswers,\n        onCloseDropdown: this.onCloseDropdown,\n        onDownloadReport: this.onDownloadReport,\n        dropdownIndex: this.state.dropdownIndex,\n        dropdownIsOpen: this.state.dropdownIsOpen,\n        openTestScores: this.openTestScores\n      }));\n    });\n\n    _defineProperty(this, \"mapFutureTests\", () => {\n      const {\n        tests\n      } = this.state;\n      return tests.filter(test => test.status !== 'complete').map((test, index) => React.createElement(TestCard, {\n        futureTest: true,\n        test: test,\n        key: `future-${test.id}`,\n        onEditTest: () => this.onToggleEditTestModal(test),\n        onDeleteTest: this.onDeleteTest,\n        onSetDropdown: this.onSetDropdown,\n        onEnterAnswers: this.onEnterAnswers,\n        onCloseDropdown: this.onCloseDropdown,\n        onDownloadReport: this.onDownloadReport,\n        dropdownIndex: this.state.dropdownIndex,\n        dropdownIsOpen: this.state.dropdownIsOpen,\n        openTestScores: this.openTestScores,\n        index: tests.filter(filterTest => filterTest.status === 'complete').length + index\n      }));\n    });\n\n    this.state = {\n      tests: sampleTests,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      editTestModalOpen: false,\n      activeTest: null,\n      selectedTest: null\n    };\n  }\n\n  render() {\n    const {\n      editTestModalOpen,\n      activeTest,\n      selectedTest\n    } = this.state;\n    const {\n      user\n    } = this.props;\n    return React.createElement(React.Fragment, null, !selectedTest && (editTestModalOpen ? React.createElement(EditTestModal, {\n      user: user,\n      test: activeTest,\n      onDeleteTest: this.onDeleteTest,\n      onSaveTestChanges: this.onSaveTestChanges\n    }) : React.createElement(\"div\", {\n      className: \"content-section\"\n    }, React.createElement(\"div\", {\n      className: \"section-holder\"\n    }, React.createElement(\"div\", {\n      className: \"content-container\"\n    }, React.createElement(\"h2\", null, \"Completed Tests\"), React.createElement(\"div\", {\n      className: \"row d-flex-content card-width-366\"\n    }, this.mapCompletedTests())), React.createElement(\"div\", {\n      className: \"content-container\"\n    }, React.createElement(\"h2\", null, \"Future Tests\"), React.createElement(\"div\", {\n      className: \"row d-flex-content card-width-366\"\n    }, this.mapFutureTests()))), React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.onCreateTest,\n      className: \"waves-effect waves-teal btn add-btn\"\n    }, React.createElement(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"New Test\"))), selectedTest && React.createElement(TestSections, {\n      test: selectedTest\n    }));\n  }\n\n}\n\nexport default DetailTestList;","map":null,"metadata":{},"sourceType":"module"}