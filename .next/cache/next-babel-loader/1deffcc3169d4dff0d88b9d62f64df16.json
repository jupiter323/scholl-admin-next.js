{"ast":null,"code":"import _objectSpread2 from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport FilterSection from '../components/Dashboard/components/FilterSection';\nimport CalendarHeader from '../components/Dashboard/components/CalendarHeader';\nimport CalendarRow from '../components/Dashboard/components/CalendarRow';\nimport AssignSessionModal from '../components/Dashboard/components/Modals/AssignSessionModal';\nimport AssignLessonModal from '../components/Dashboard/components/Modals/AssignLessonModal';\nimport AssignWorksheetModal from '../components/Dashboard/components/Modals/AssignWorksheetModal';\nimport AssignTestSectionModal from '../components/Dashboard/components/Modals/AssignTestSectionModal';\nimport AssignSimulatedSatModal from '../components/Dashboard/components/Modals/AssignSimulatedSATModal';\nimport AssignTargetTestModal from '../components/Dashboard/components/Modals/AssignTargetTestModal';\nimport { currentYear, getFirstDay, getDaysInActiveMonth, getDaysInPreviousMonth, getDayDate, getNextMonthAsCurrentMonth } from '../components/Dashboard/utils/dateAndCalendarUtils';\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetActiveMonth\", activeMonthIndex => {\n      // daysInPreviousMonth is used to handle cases where the calendar for the month starts with dates from the preceding month\n      // firstDay indicates the day the first day of the month falls on in a zero-based index manner, meaning Sunday is 0, Monday is 1, etc\n      const daysInPreviousMonth = getDaysInPreviousMonth(activeMonthIndex);\n      const daysInActiveMonth = getDaysInActiveMonth(activeMonthIndex);\n      const firstDay = getFirstDay(activeMonthIndex);\n      const rows = []; // We increment calDate and change inMonth in the case where dates from the next month appear in row 1 or row 6\n      // Since activeMonthIndex is zero-based, currentMonth adds 1 so the cells are accurate as actual calendar dates\n      // getNextMonthAsCurrentMonth is used to derive the current month to ensure it matches the format of incoming dates - 01/15/19 vs 1/15/19, otherwise new events wouldn't find the date to be assigned to\n\n      let inMonth = true;\n      let calDate = 1;\n      let currentMonth = getNextMonthAsCurrentMonth(activeMonthIndex);\n\n      if (firstDay !== 0) {\n        currentMonth = currentMonth > 9 ? currentMonth -= 1 : `0${currentMonth - 1}`;\n        calDate = daysInPreviousMonth - firstDay + 1;\n        inMonth = false;\n      } // First for loop handles the 6 calendar rows, second for loop handles the 7 days of the week\n\n\n      for (let i = 0; i < 6; i++) {\n        const rowArr = [];\n\n        for (let j = 0; j < 7; j++) {\n          const date = `${currentMonth}/${calDate > 9 ? calDate : `0${calDate}`}/${currentYear}`;\n          const dayDate = getDayDate(date);\n          const activeDateKey = `row-${i + 1}-column-${j + 1}`; // This if statement handles the easiest calendar month scenario, where the 1st of the month falls on a Sunday\n\n          if (firstDay === 0) {\n            const dateCell = {\n              date,\n              dayDate,\n              calDate,\n              activeDateKey,\n              inMonth,\n              sessions: [],\n              lessons: [],\n              worksheets: [],\n              testSections: [],\n              simulatedSat: []\n            }; // This if statement handles the case where the date spills over into the next month\n\n            if (calDate === daysInActiveMonth) {\n              calDate = 1;\n              currentMonth = activeMonthIndex > 9 ? activeMonthIndex + 2 : `0${activeMonthIndex + 2}`;\n              inMonth = false;\n            } else {\n              calDate += 1;\n            }\n\n            rowArr.push(dateCell);\n          } // This else statement handles the more likely scenario, where the first row contains several days from the preceding month\n          else {\n              const dateCell = {\n                date,\n                dayDate,\n                calDate,\n                activeDateKey,\n                inMonth,\n                sessions: [],\n                lessons: [],\n                worksheets: [],\n                testSections: [],\n                simulatedSat: []\n              }; // This if statement handles the case where the date spills over into the next month\n\n              if (inMonth === false && calDate === daysInPreviousMonth) {\n                calDate = 1;\n                currentMonth = getNextMonthAsCurrentMonth(activeMonthIndex);\n                inMonth = true;\n              } else if (inMonth === true && calDate === daysInActiveMonth) {\n                currentMonth = activeMonthIndex > 9 ? activeMonthIndex + 2 : `0${activeMonthIndex + 2}`;\n                calDate = 1;\n                inMonth = false;\n              } else {\n                calDate += 1;\n              }\n\n              rowArr.push(dateCell);\n            }\n        }\n\n        ;\n        rows.push(...rowArr);\n      }\n\n      ;\n      this.setState({\n        activeMonth: activeMonthIndex,\n        rows\n      });\n    });\n\n    _defineProperty(this, \"onSetActiveDate\", incomingDate => {\n      this.setState({\n        activeDate: incomingDate,\n        activeColumn: incomingDate[13]\n      });\n    });\n\n    _defineProperty(this, \"onAssignSession\", session => {\n      const {\n        rows\n      } = this.state;\n      const updatedDate = rows.filter(row => row.date === session.date)[0];\n      const updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.sessions.push(session);\n      const updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n      this.setState({\n        rows: updatedRows\n      });\n      this.onToggleAssignSessionModal();\n    });\n\n    _defineProperty(this, \"onAssignLessons\", (lessons, date) => {\n      const {\n        rows\n      } = this.state;\n      const updatedDate = rows.filter(row => row.date === date)[0];\n      const updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.lessons.push(...lessons);\n      const updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n      this.setState({\n        rows: updatedRows\n      });\n      this.onToggleAssignLessonsModal();\n    });\n\n    _defineProperty(this, \"onAssignWorksheets\", (worksheets, date) => {\n      const {\n        rows\n      } = this.state;\n      const updatedDate = rows.filter(row => row.date === date)[0];\n      const updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.worksheets.push(...worksheets);\n      const updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n      this.setState({\n        rows: updatedRows\n      });\n      this.onToggleAssignWorksheetsModal();\n    });\n\n    _defineProperty(this, \"onAssignTestSection\", testSection => {\n      const {\n        rows\n      } = this.state;\n      const updatedDate = rows.filter(row => row.date === testSection.assignDate)[0];\n      const updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.testSections.push(testSection);\n      const updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n      this.setState({\n        rows: updatedRows\n      });\n      this.onToggleAssignTestSectionModal();\n    });\n\n    _defineProperty(this, \"onAssignSimulatedSat\", simulatedSat => {\n      const {\n        rows\n      } = this.state;\n      const updatedDate = rows.filter(row => row.date === simulatedSat.assignDate)[0];\n      const updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.simulatedSat.push(simulatedSat);\n      const updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n      this.setState({\n        rows: updatedRows\n      });\n      this.onToggleAssignSimulatedSatModal();\n    });\n\n    _defineProperty(this, \"onAssignTargetTest\", targetTestDate => {\n      // eslint-disable-next-line no-throw-literal\n      throw `pending decision of what test date assign ui looks like${targetTestDate.toString()}`; // console.warn(, targetTestDate);\n    });\n\n    _defineProperty(this, \"onToggleAssignSessionModal\", (event = null, modalDate = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState(({\n        assignSessionModalOpen\n      }) => ({\n        assignSessionModalOpen: !assignSessionModalOpen,\n        modalDate,\n        assignDropdownIsOpen: false\n      }));\n    });\n\n    _defineProperty(this, \"onToggleAssignLessonsModal\", (event = null, modalDate = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState(({\n        assignLessonsModalOpen\n      }) => ({\n        assignLessonsModalOpen: !assignLessonsModalOpen,\n        modalDate,\n        assignDropdownIsOpen: false\n      }));\n    });\n\n    _defineProperty(this, \"onToggleAssignWorksheetsModal\", (event = null, modalDate = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState(({\n        assignWorksheetsModalOpen\n      }) => ({\n        assignWorksheetsModalOpen: !assignWorksheetsModalOpen,\n        modalDate,\n        assignDropdownIsOpen: false\n      }));\n    });\n\n    _defineProperty(this, \"onToggleAssignTestSectionModal\", (event = null, modalDate = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState(({\n        assignTestSectionModalOpen\n      }) => ({\n        assignTestSectionModalOpen: !assignTestSectionModalOpen,\n        modalDate,\n        assignDropdownIsOpen: false\n      }));\n    });\n\n    _defineProperty(this, \"onToggleAssignSimulatedSatModal\", (event = null, modalDate = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState(({\n        assignSimulatedSatModalOpen\n      }) => ({\n        assignSimulatedSatModalOpen: !assignSimulatedSatModalOpen,\n        modalDate,\n        assignDropdownIsOpen: false\n      }));\n    });\n\n    _defineProperty(this, \"onToggleAssignTargetTestModal\", (event = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState(({\n        assignTargetTestDateModalOpen\n      }) => ({\n        assignTargetTestDateModalOpen: !assignTargetTestDateModalOpen,\n        assignDropdownIsOpen: false\n      }));\n    });\n\n    _defineProperty(this, \"onToggleAddDropdown\", () => this.setState(({\n      addDropdownOpen\n    }) => ({\n      addDropdownOpen: !addDropdownOpen,\n      deleteDropdownOpen: false\n    })));\n\n    _defineProperty(this, \"onToggleDeleteDropdown\", () => this.setState(({\n      deleteDropdownOpen\n    }) => ({\n      deleteDropdownOpen: !deleteDropdownOpen,\n      addDropdownOpen: false\n    })));\n\n    _defineProperty(this, \"onToggleAssignDropdown\", () => this.setState(({\n      assignDropdownIsOpen\n    }) => ({\n      assignDropdownIsOpen: !assignDropdownIsOpen\n    })));\n\n    _defineProperty(this, \"onToggleHandleFilteredItemsDropdown\", () => this.setState(({\n      onToggleHandleFilteredItemsDropdown\n    }) => ({\n      onToggleHandleFilteredItemsDropdown: !onToggleHandleFilteredItemsDropdown\n    })));\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      filters: [],\n      eventFilters: []\n    }));\n\n    _defineProperty(this, \"onHandleDetailsChange\", (name, event) => this.setState({\n      [name]: event.target.value\n    }));\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      const {\n        rows\n      } = this.state;\n      const {\n        source,\n        destination,\n        draggableId\n      } = result; // The following draggable vars are pulled from the dragged item to identify the event type (lesson, worksheet, etc), date, and index in that date's array of that type of event\n\n      const draggableKeys = draggableId.split('-');\n      const draggableType = draggableKeys[0];\n      const draggableIndex = draggableKeys[2]; // If the event isn't switching dates, we return out of the function early and do nothing\n\n      if (!destination || source.droppableId === destination.droppableId) {\n        return;\n      } // The follwing sourceDate and destinationDate vars are used to find the dates being modified and their index in the month of calendar dates\n\n\n      const sourceDateKey = source.droppableId.split('-')[1];\n      const destinationDateKey = destination.droppableId.split('-')[1];\n      const sourceDate = rows.filter(row => row.date === sourceDateKey)[0];\n      const destinationDate = rows.filter(row => row.date === destinationDateKey)[0];\n      const sourceDateIndex = rows.indexOf(sourceDate);\n      const destinationDateIndex = rows.indexOf(destinationDate); // Here we target the event being moved, alter its date to that of the destintion, splice it from the source and push it to the destination\n      // Finally, we perform two splice operations to replace the old source and destination dates with their updated equivalents\n\n      const movedEvent = sourceDate[draggableType][draggableIndex];\n      movedEvent.date = destinationDate.date;\n      sourceDate[draggableType].splice(draggableIndex, 1);\n      destinationDate[draggableType].push(movedEvent);\n      const updatedRows = update(rows, {\n        $splice: [[sourceDateIndex, 1, sourceDate], [destinationDateIndex, 1, destinationDate]]\n      });\n      this.setState({\n        rows: updatedRows\n      });\n    });\n\n    _defineProperty(this, \"handleFilterClick\", (filter, eventFilter = false) => {\n      // TODO: Only the following filters are active: sessions, lessons, worksheets, test sections, simulated sats, target tests\n      // The other filters dont seem to have corresponding data in this page\n      const {\n        filters: allFilters,\n        eventFilters\n      } = this.state;\n      let filters;\n      let filterName;\n\n      if (eventFilter) {\n        filters = eventFilters;\n        filterName = 'eventFilters';\n      } else {\n        filters = allFilters;\n        filterName = 'filters';\n      }\n\n      let updatedFilters;\n\n      if (filters.indexOf(filter) === -1) {\n        updatedFilters = update(filters, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = filters.indexOf(filter);\n        updatedFilters = update(filters, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        [filterName]: updatedFilters\n      });\n    });\n\n    _defineProperty(this, \"mapRows\", () => {\n      const {\n        rows,\n        filters,\n        eventFilters,\n        activeDate,\n        activeColumn,\n        addDropdownOpen,\n        deleteDropdownOpen\n      } = this.state;\n      let startIndex = -7;\n      let endIndex = 0;\n      const rowArray = [];\n\n      for (let i = 0; i < 6; i++) {\n        startIndex += 7;\n        endIndex += 7;\n        rowArray.push(__jsx(CalendarRow, {\n          key: i,\n          rows: rows.slice(startIndex, endIndex),\n          filters: filters,\n          eventFilters: eventFilters,\n          activeDate: activeDate,\n          activeColumn: activeColumn,\n          addDropdownOpen: addDropdownOpen,\n          deleteDropdownOpen: deleteDropdownOpen,\n          onSetActiveDate: this.onSetActiveDate,\n          onToggleAddDropdown: this.onToggleAddDropdown,\n          onToggleDeleteDropdown: this.onToggleDeleteDropdown,\n          onToggleAssignLessonsModal: this.onToggleAssignLessonsModal,\n          onToggleAssignSessionModal: this.onToggleAssignSessionModal,\n          onToggleAssignWorksheetsModal: this.onToggleAssignWorksheetsModal,\n          onToggleAssignTestSectionModal: this.onToggleAssignTestSectionModal,\n          onToggleAssignSimulatedSatModal: this.onToggleAssignSimulatedSatModal\n        }));\n      }\n\n      return rowArray;\n    });\n\n    this.state = {\n      activeMonth: '',\n      filters: [],\n      eventFilters: [],\n      rows: [],\n      activeDate: null,\n      activeColumn: null,\n      addDropdownOpen: false,\n      deleteDropdownOpen: false,\n      assignDropdownIsOpen: false,\n      onToggleHandleFilteredItemsDropdown: false,\n      assignSessionModalOpen: false,\n      assignLessonsModalOpen: false,\n      assignWorksheetsModalOpen: false,\n      assignTestSectionModalOpen: false,\n      assignSimulatedSatModalOpen: false,\n      assignTargetTestDateModalOpen: false,\n      modalDate: null,\n      accountActivated: false,\n      activationDropdownOpen: false,\n      licenseCode: ''\n    };\n  } // This is called onMount in CalendarHeader component to set the current month calendar rows, and every time the month changes afterward\n  // IMPORTANT: activeMonthIndex is zero-based, meaning January is 0, February is 1, etc.\n\n\n  render() {\n    const {\n      assignSessionModalOpen,\n      assignLessonsModalOpen,\n      assignWorksheetsModalOpen,\n      activeMonth,\n      assignTestSectionModalOpen,\n      assignSimulatedSatModalOpen,\n      assignTargetTestDateModalOpen,\n      modalDate,\n      assignDropdownIsOpen,\n      onToggleHandleFilteredItemsDropdown,\n      filters,\n      eventFilters,\n      accountActivated,\n      activationDropdownOpen,\n      licenseCode\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(AssignSessionModal, {\n      modalDate: modalDate,\n      open: assignSessionModalOpen,\n      onClose: this.onToggleAssignSessionModal,\n      onAssignSession: this.onAssignSession\n    }), __jsx(AssignLessonModal, {\n      modalDate: modalDate,\n      open: assignLessonsModalOpen,\n      onClose: this.onToggleAssignLessonsModal,\n      onAssignLessons: this.onAssignLessons\n    }), __jsx(AssignWorksheetModal, {\n      modalDate: modalDate,\n      open: assignWorksheetsModalOpen,\n      onClose: this.onToggleAssignWorksheetsModal,\n      onAssignWorksheets: this.onAssignWorksheets\n    }), __jsx(AssignTestSectionModal, {\n      modalDate: modalDate,\n      open: assignTestSectionModalOpen,\n      onClose: this.onToggleAssignTestSectionModal,\n      onAssignTestSection: this.onAssignTestSection\n    }), __jsx(AssignSimulatedSatModal, {\n      modalDate: modalDate,\n      open: assignSimulatedSatModalOpen,\n      onClose: this.onToggleAssignSimulatedSatModal,\n      onAssignSimulatedSat: this.onAssignSimulatedSat\n    }), __jsx(AssignTargetTestModal, {\n      open: assignTargetTestDateModalOpen,\n      onClose: this.onToggleAssignTargetTestModal,\n      onAssignTargetTest: this.onAssignTargetTest\n    }), __jsx(\"main\", {\n      id: \"main\",\n      role: \"main\"\n    }, __jsx(\"div\", {\n      className: \"main-holder grey lighten-3\"\n    }, __jsx(StickyContainer, null, __jsx(Sticky, null, ({\n      style\n    }) => __jsx(\"div\", {\n      className: \"title-row card-panel\",\n      style: _objectSpread2({}, style, {\n        zIndex: 1999\n      })\n    }, __jsx(\"div\", {\n      className: \"mobile-header\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), __jsx(\"nav\", {\n      className: \"breadcrumb-holder\"\n    }, __jsx(\"div\", {\n      className: \"nav-wrapper \"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"breadcrumb\"\n    }, \"< Classes\"))), __jsx(\"h2\", {\n      className: \"h1 white-text\"\n    }, __jsx(\"span\", {\n      className: \"heading-holder\"\n    }, __jsx(\"i\", {\n      className: \"icon-members\"\n    }), __jsx(\"span\", {\n      className: \"heading-block\"\n    }, \"Some Class in June\"))), __jsx(\"nav\", {\n      className: \"nav-additional\"\n    }, __jsx(\"ul\", {\n      className: \"menu-additional\"\n    }, __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\"\n    }, \"Summary\")), __jsx(\"li\", null, __jsx(\"a\", {\n      className: \"active\",\n      href: \"#\"\n    }, \"Calendar\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\"\n    }, \"Lessons\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\"\n    }, \"Tests\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\"\n    }, \"Account\")))), __jsx(\"div\", {\n      className: \"activate-block\"\n    }, accountActivated ? __jsx(\"a\", {\n      href: \"#\",\n      className: \"waves-effect waves-teal btn btn-white btn-bordered btn-account_activated\"\n    }, __jsx(\"b\", {\n      className: \"btn-text visible-lg\"\n    }, \"Account Activated\"), \" \", __jsx(\"i\", {\n      className: \"icon-unlock\"\n    })) : __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleActivationDropdown,\n      className: \"waves-effect btn btn-orange btn-account_inactive dropdown-trigger\",\n      \"data-target\": \"dropdown_activate\"\n    }, __jsx(\"b\", {\n      className: \"btn-text visible-lg\"\n    }, \"Activate Account\"), \" \", __jsx(\"i\", {\n      className: \"icon-key\"\n    })), __jsx(\"div\", {\n      id: \"dropdown_activate\",\n      className: \"dropdown-content\",\n      style: activationDropdownOpen ? {\n        display: 'block',\n        opacity: '1'\n      } : {}\n    }, __jsx(\"div\", {\n      className: \"card-panel\"\n    }, __jsx(\"div\", {\n      className: \"title-block\"\n    }, __jsx(\"div\", {\n      className: \"h3\"\n    }, \"Ready to begin your course?\"), __jsx(\"div\", {\n      className: \"subtitle\"\n    }, \"Please enter a valid license code below.\")), __jsx(\"div\", {\n      className: \"input-field\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: licenseCode,\n      id: \"license-code\",\n      onChange: event => this.onHandleDetailsChange('licenseCode', event)\n    }), __jsx(\"label\", {\n      className: \"label\",\n      htmlFor: \"license_code\"\n    }, \"License Code\")), __jsx(\"div\", {\n      className: \"btn-holder center-align\"\n    }, __jsx(\"button\", {\n      className: \"btn btn-blue\",\n      type: \"submit\"\n    }, \"Activate\")), __jsx(\"div\", {\n      className: \"text-block center-align\"\n    }, __jsx(\"p\", null, \"If you need license codes, you can get them here: \", __jsx(\"a\", {\n      href: \"#\",\n      className: \"waves-effect waves-light btn-small btn-blue\"\n    }, \"Purchase Licenses\"))), __jsx(\"div\", {\n      className: \"text-block\"\n    }, __jsx(\"p\", null, \"*Note: \"), __jsx(\"p\", null, \"We o\\uFB00er discounted account licenses for students enrolled in courses with 5 or more students in a class or group format (as opposed to individual instruction). These licenses provide the features necessary to conduct a customized course for the class as a whole, rather than for individual students.\"))))))), __jsx(FilterSection, {\n      filters: filters,\n      eventFilters: eventFilters,\n      onClearFilters: this.onClearFilters,\n      handleFilterClick: this.handleFilterClick\n    }), __jsx(\"div\", {\n      className: \"calendar-section view-month\"\n    }, __jsx(\"div\", {\n      className: \"calendar-slider\"\n    }, __jsx(CalendarHeader, {\n      activeMonth: Number(activeMonth),\n      onSetActiveMonth: this.onSetActiveMonth\n    }), __jsx(\"div\", {\n      id: \"calendar\",\n      className: \"main-slick-calendar cal-context\",\n      style: {\n        width: '100%'\n      }\n    }, __jsx(\"div\", {\n      className: \"slide\"\n    }, __jsx(\"table\", {\n      className: \"calendar-table cal-month-box\"\n    }, __jsx(\"thead\", null, __jsx(\"tr\", {\n      className: \"calendar-head-row\"\n    }, __jsx(\"th\", null, \"Su\"), __jsx(\"th\", null, \"M\"), __jsx(\"th\", null, \"Tu\"), __jsx(\"th\", null, \"W\"), __jsx(\"th\", null, \"Th\"), __jsx(\"th\", null, \"F\"), __jsx(\"th\", null, \"Sa\"))), __jsx(\"tbody\", null, __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd\n    }, this.mapRows()))))), __jsx(\"div\", {\n      className: \"add-btn-block\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"dropdown_assign\",\n      onClick: this.onToggleAssignDropdown,\n      className: \"dropdown-trigger waves-effect waves-teal btn add-btn\"\n    }, \"Assign...\"), __jsx(\"ul\", {\n      id: \"dropdown_assign\",\n      className: \"dropdown-content\",\n      style: {\n        display: assignDropdownIsOpen ? 'block' : 'none',\n        opacity: assignDropdownIsOpen ? '100' : '0'\n      }\n    }, __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignSessionModal,\n      className: \"modal-trigger\"\n    }, \"Session\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignLessonsModal,\n      className: \"modal-trigger\"\n    }, \"Lesson\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignWorksheetsModal,\n      className: \"modal-trigger\"\n    }, \"Worksheet\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignTestSectionModal,\n      className: \"modal-trigger\"\n    }, \"Test Section\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignSimulatedSatModal,\n      className: \"modal-trigger\"\n    }, \"Simulated SAT\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignTargetTestModal,\n      className: \"modal-trigger\"\n    }, \"Target Test\")), __jsx(\"li\", {\n      className: \"divider\",\n      tabIndex: \"-1\"\n    }), __jsx(\"li\", {\n      className: \"dropdown-footer\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"modal-trigger\"\n    }, \"Apply Course Template\")))), __jsx(\"div\", {\n      className: \"add-btn-block btn-block-right\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"dropdown_other\",\n      onClick: this.onToggleHandleFilteredItemsDropdown,\n      className: \"dropdown-trigger waves-effect waves-teal btn add-btn-circle\"\n    }, __jsx(\"i\", {\n      className: \"icon-dots\"\n    })), __jsx(\"ul\", {\n      id: \"dropdown_other\",\n      className: \"dropdown-content\",\n      style: {\n        display: onToggleHandleFilteredItemsDropdown ? 'block' : 'none',\n        opacity: onToggleHandleFilteredItemsDropdown ? '100' : '0'\n      }\n    }, __jsx(\"li\", {\n      className: \"dropdown-header\"\n    }, __jsx(\"b\", null, \"With Filtered Items... \"), __jsx(\"b\", {\n      className: \"small\"\n    }, \"(items currently visible on calendar)\")), __jsx(\"li\", {\n      className: \"divider\"\n    }), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      className: \"modal-trigger\"\n    }, \"Save Course as Template\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\"\n    }, \"Reset All\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\"\n    }, \"Delete All\"))))))))));\n  }\n\n}\n\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}