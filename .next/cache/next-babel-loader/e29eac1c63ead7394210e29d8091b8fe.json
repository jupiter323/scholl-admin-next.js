{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react'; // import PropTypes from 'prop-types';\n\nimport update from 'immutability-helper';\nimport InstructorCard from './components/InstructorCard';\nimport FilterSection from './components/FilterSection';\nimport NewInstructorModal from './components/NewInstructorModal';\nimport sampleInstructorList from '../utils/sampleInstructorList'; // import { saveNewSuccess as savePracticeTestSuccess, saveChangesSuccess, saveNewError as savePracticeTestError } from '../../utils/fieldValidation';\n\nimport { firstNameAscending, firstNameDescending, lastNameAscending, lastNameDescending } from '../../utils/sortFunctions';\n\nclass InstructorListPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIsOpen: true,\n      dropdownIndex\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onOpenInstructorModal\", () => this.setState({\n      instructorModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseInstructorModal\", () => this.setState({\n      instructorModalOpen: false\n    }));\n\n    _defineProperty(this, \"onAddNewInstructor\", newInstructor => this.setState(({\n      instructors\n    }) => ({\n      instructors: [...instructors, newInstructor]\n    })));\n\n    _defineProperty(this, \"onDeleteInstructor\", deletedInstructor => {\n      const updatedState = update(this.state, {\n        instructors: unfilteredInstructors => unfilteredInstructors.filter(instructor => instructor.id !== deletedInstructor.id)\n      });\n      this.setState({\n        instructors: updatedState.instructors\n      });\n    });\n\n    _defineProperty(this, \"onCloneInstructor\", instructor => {\n      const cloneIndex = this.state.instructors.indexOf(instructor);\n      const instructors = update(this.state.instructors, {\n        $splice: [[cloneIndex, 0, instructor]]\n      });\n      this.setState({\n        instructors\n      }, this.onCloseDropdown);\n    });\n\n    _defineProperty(this, \"onSaveInstructorChanges\", updatedInstructor => {\n      const {\n        instructors: originalInstructors\n      } = this.state;\n      const instructorToUpdate = originalInstructors.filter(instructor => instructor.id === updatedInstructor.id)[0];\n      const updatedInstructorIndex = originalInstructors.indexOf(instructorToUpdate);\n      const instructors = update(originalInstructors, {\n        $splice: [[updatedInstructorIndex, 1, updatedInstructor]]\n      }); // saveChangesSuccess();\n\n      this.setState({\n        instructors\n      });\n    });\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      instructorsAreFiltered: true,\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      instructorsAreFiltered: false,\n      filterName: ''\n    }));\n\n    _defineProperty(this, \"onSetFilteredLocationState\", filterLocation => this.setState({\n      instructorsAreFiltered: true,\n      filterLocation\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredLocationState\", () => this.setState({\n      filterLocation: ''\n    }, this.checkForFilteredState));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        instructors,\n        filterName\n      } = this.state;\n      return instructors.reduce((finalArr, currentInstructor) => {\n        const {\n          accountInfo: {\n            lastName,\n            firstName\n          }\n        } = currentInstructor;\n        const instructorString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n\n        if (instructorString.indexOf(filterName) !== -1 && finalArr.indexOf(currentInstructor) === -1) {\n          finalArr.push(currentInstructor);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterByLocation\", (preFilteredInstructors = []) => {\n      const {\n        instructors: allInstructors,\n        filterLocation\n      } = this.state;\n      let instructors;\n\n      if (preFilteredInstructors.length) {\n        instructors = preFilteredInstructors;\n      } else {\n        instructors = allInstructors;\n      }\n\n      return instructors.reduce((finalArr, currentInstructor) => {\n        const {\n          contactInfo: {\n            city\n          }\n        } = currentInstructor;\n\n        if (city === filterLocation && finalArr.indexOf(currentInstructor) === -1) {\n          finalArr.push(currentInstructor);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onSortInstructors\", instructors => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'firstNameAscending':\n          return instructors.sort(firstNameAscending);\n\n        case 'firstNameDescending':\n          return instructors.sort(firstNameDescending);\n\n        case 'lastNameAscending':\n          return instructors.sort(lastNameAscending);\n\n        case 'lastNameDescending':\n          return instructors.sort(lastNameDescending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"getMappableInstructors\", () => {\n      const {\n        filterName,\n        filterLocation,\n        instructors: allInstructors,\n        sort\n      } = this.state;\n      let instructors;\n\n      if (filterName.length && !filterLocation.length) {\n        instructors = this.onFilterByName();\n      } else if (!filterName.length && filterLocation.length) {\n        instructors = this.onFilterByLocation();\n      } else if (filterName.length && filterLocation.length) {\n        const filteredByName = this.onFilterByName();\n        instructors = this.onFilterByLocation(filteredByName);\n      } else {\n        instructors = allInstructors;\n      }\n\n      if (sort) {\n        return this.onSortInstructors(instructors);\n      }\n\n      return instructors;\n    });\n\n    _defineProperty(this, \"checkForFilteredState\", () => {\n      const {\n        filterName,\n        filterLocation\n      } = this.state;\n\n      if (!filterName.length && !filterLocation.length) {\n        this.setState({\n          instructorsAreFiltered: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"mapInstructors\", () => {\n      const instructors = this.getMappableInstructors();\n      return instructors.map((instructor, index) => React.createElement(InstructorCard, {\n        index: index,\n        key: instructor.id,\n        instructor: instructor,\n        dropdownIsOpen: this.state.dropdownIsOpen,\n        onSetDropdown: this.onSetDropdown,\n        onCloseDropdown: this.onCloseDropdown,\n        dropdownIndex: this.state.dropdownIndex,\n        onDeleteInstructor: this.onDeleteInstructor,\n        onCloneInstructor: this.onCloneInstructor,\n        onSaveInstructorChanges: this.onSaveInstructorChanges\n      }));\n    });\n\n    this.state = {\n      instructorModalOpen: false,\n      instructors: sampleInstructorList,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      instructorsAreFiltered: false,\n      filterName: '',\n      filterLocation: '',\n      sort: ''\n    };\n  }\n\n  render() {\n    const {\n      instructorModalOpen\n    } = this.state;\n    return React.createElement(React.Fragment, null, React.createElement(NewInstructorModal, {\n      open: instructorModalOpen,\n      onClose: this.onCloseInstructorModal,\n      onAddNewInstructor: this.onAddNewInstructor\n    }), React.createElement(\"div\", {\n      className: \"main-holder grey lighten-5\"\n    }, React.createElement(\"div\", {\n      className: \"title-row card-panel\"\n    }, React.createElement(\"div\", {\n      className: \"mobile-header\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, React.createElement(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), React.createElement(\"h2\", {\n      className: \"h1 white-text\"\n    }, React.createElement(\"span\", {\n      className: \"heading-holder\"\n    }, React.createElement(\"i\", {\n      className: \"icon-instructors\"\n    }), React.createElement(\"span\", {\n      className: \"heading-block\"\n    }, \"Instructors\")))), React.createElement(FilterSection, {\n      onSetSort: this.onSetSort,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredLocationState: this.onSetFilteredLocationState,\n      onUnsetFilteredLocationState: this.onUnsetFilteredLocationState\n    }), React.createElement(\"div\", {\n      className: \"content-section\"\n    }, React.createElement(\"div\", {\n      className: \"row d-flex-content\"\n    }, this.mapInstructors()))), React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.onOpenInstructorModal,\n      className: \"waves-effect waves-teal btn add-btn\"\n    }, React.createElement(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"New Location\"));\n  }\n\n}\n\nexport default InstructorListPage;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Instructor/ListPage/index.js"],"names":["React","update","InstructorCard","FilterSection","NewInstructorModal","sampleInstructorList","firstNameAscending","firstNameDescending","lastNameAscending","lastNameDescending","InstructorListPage","Component","constructor","props","dropdownIndex","setState","dropdownIsOpen","instructorModalOpen","newInstructor","instructors","deletedInstructor","updatedState","state","unfilteredInstructors","filter","instructor","id","cloneIndex","indexOf","$splice","onCloseDropdown","updatedInstructor","originalInstructors","instructorToUpdate","updatedInstructorIndex","filterName","instructorsAreFiltered","filterLocation","checkForFilteredState","sort","reduce","finalArr","currentInstructor","accountInfo","lastName","firstName","instructorString","toLowerCase","push","preFilteredInstructors","allInstructors","length","contactInfo","city","onFilterByName","onFilterByLocation","filteredByName","onSortInstructors","getMappableInstructors","map","index","onSetDropdown","onDeleteInstructor","onCloneInstructor","onSaveInstructorChanges","render","onCloseInstructorModal","onAddNewInstructor","onSetSort","onSetFilteredState","onUnsetFilteredState","onSetFilteredLocationState","onUnsetFilteredLocationState","mapInstructors","onOpenInstructorModal"],"mappings":"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","sourcesContent":["import React from 'react';\n// import PropTypes from 'prop-types';\nimport update from 'immutability-helper';\n\nimport InstructorCard from './components/InstructorCard';\nimport FilterSection from './components/FilterSection';\nimport NewInstructorModal from './components/NewInstructorModal';\n\nimport sampleInstructorList from '../utils/sampleInstructorList';\n// import { saveNewSuccess as savePracticeTestSuccess, saveChangesSuccess, saveNewError as savePracticeTestError } from '../../utils/fieldValidation';\nimport { firstNameAscending, firstNameDescending, lastNameAscending, lastNameDescending } from '../../utils/sortFunctions';\n\nclass InstructorListPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      instructorModalOpen: false,\n      instructors: sampleInstructorList,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      instructorsAreFiltered: false,\n      filterName: '',\n      filterLocation: '',\n      sort: '',\n    };\n  }\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIsOpen: true, dropdownIndex });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  onOpenInstructorModal = () => this.setState({ instructorModalOpen: true });\n  onCloseInstructorModal = () => this.setState({ instructorModalOpen: false });\n\n  onAddNewInstructor = (newInstructor) => this.setState(({ instructors }) => ({ instructors: [...instructors, newInstructor] }))\n\n  onDeleteInstructor = (deletedInstructor) => {\n    const updatedState = update(this.state, {\n      instructors: unfilteredInstructors => unfilteredInstructors.filter(instructor => instructor.id !== deletedInstructor.id),\n    });\n    this.setState({ instructors: updatedState.instructors });\n  }\n\n  onCloneInstructor = (instructor) => {\n    const cloneIndex = this.state.instructors.indexOf(instructor);\n    const instructors = update(this.state.instructors, {\n      $splice: [[cloneIndex, 0, instructor]],\n    });\n    this.setState({ instructors }, this.onCloseDropdown);\n  }\n\n  onSaveInstructorChanges = (updatedInstructor) => {\n    const { instructors: originalInstructors } = this.state;\n    const instructorToUpdate = originalInstructors.filter(instructor => instructor.id === updatedInstructor.id)[0];\n    const updatedInstructorIndex = originalInstructors.indexOf(instructorToUpdate);\n    const instructors = update(originalInstructors, {\n      $splice: [[updatedInstructorIndex, 1, updatedInstructor]],\n    });\n    // saveChangesSuccess();\n    this.setState({ instructors });\n  }\n\n  onSetFilteredState = (filterName) => this.setState({ instructorsAreFiltered: true, filterName })\n  onUnsetFilteredState = () => this.setState({ instructorsAreFiltered: false, filterName: '' })\n\n  onSetFilteredLocationState = (filterLocation) => this.setState({ instructorsAreFiltered: true, filterLocation })\n  onUnsetFilteredLocationState = () => this.setState({ filterLocation: '' }, this.checkForFilteredState)\n\n  onSetSort = (sort) => this.setState({ sort })\n\n  onFilterByName = () => {\n    const { instructors, filterName } = this.state;\n    return instructors.reduce((finalArr, currentInstructor) => {\n      const { accountInfo: { lastName, firstName } } = currentInstructor;\n      const instructorString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n      if (instructorString.indexOf(filterName) !== -1 && finalArr.indexOf(currentInstructor) === -1) {\n        finalArr.push(currentInstructor);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterByLocation = (preFilteredInstructors = []) => {\n    const { instructors: allInstructors, filterLocation } = this.state;\n    let instructors;\n    if (preFilteredInstructors.length) {\n      instructors = preFilteredInstructors;\n    } else {\n      instructors = allInstructors;\n    }\n    return instructors.reduce((finalArr, currentInstructor) => {\n      const { contactInfo: { city } } = currentInstructor;\n      if (city === filterLocation && finalArr.indexOf(currentInstructor) === -1) {\n        finalArr.push(currentInstructor);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  // eslint-disable-next-line consistent-return\n  onSortInstructors = (instructors) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case 'firstNameAscending':\n        return instructors.sort(firstNameAscending);\n      case 'firstNameDescending':\n        return instructors.sort(firstNameDescending);\n      case 'lastNameAscending':\n        return instructors.sort(lastNameAscending);\n      case 'lastNameDescending':\n        return instructors.sort(lastNameDescending);\n      default:\n        break;\n    }\n  }\n\n  getMappableInstructors = () => {\n    const { filterName, filterLocation, instructors: allInstructors, sort } = this.state;\n    let instructors;\n    if (filterName.length && !filterLocation.length) {\n      instructors = this.onFilterByName();\n    } else if (!filterName.length && filterLocation.length) {\n      instructors = this.onFilterByLocation();\n    } else if (filterName.length && filterLocation.length) {\n      const filteredByName = this.onFilterByName();\n      instructors = this.onFilterByLocation(filteredByName);\n    } else {\n      instructors = allInstructors;\n    }\n    if (sort) {\n      return this.onSortInstructors(instructors);\n    }\n    return instructors;\n  }\n\n  checkForFilteredState = () => {\n    const { filterName, filterLocation } = this.state;\n    if (!filterName.length && !filterLocation.length) {\n      this.setState({ instructorsAreFiltered: false });\n    }\n  }\n\n  mapInstructors = () => {\n    const instructors = this.getMappableInstructors();\n    return instructors.map((instructor, index) => (\n      <InstructorCard\n        index={index}\n        key={instructor.id}\n        instructor={instructor}\n        dropdownIsOpen={this.state.dropdownIsOpen}\n        onSetDropdown={this.onSetDropdown}\n        onCloseDropdown={this.onCloseDropdown}\n        dropdownIndex={this.state.dropdownIndex}\n        onDeleteInstructor={this.onDeleteInstructor}\n        onCloneInstructor={this.onCloneInstructor}\n        onSaveInstructorChanges={this.onSaveInstructorChanges}\n      />\n    ));\n  }\n\n  render() {\n    const { instructorModalOpen } = this.state;\n    return (\n      <React.Fragment>\n        <NewInstructorModal\n          open={instructorModalOpen}\n          onClose={this.onCloseInstructorModal}\n          onAddNewInstructor={this.onAddNewInstructor}\n        />\n        <div className=\"main-holder grey lighten-5\">\n          <div className=\"title-row card-panel\">\n            <div className=\"mobile-header\">\n              <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n            </div>\n            <h2 className=\"h1 white-text\">\n              <span className=\"heading-holder\">\n                <i className=\"icon-instructors\"></i>\n                <span className=\"heading-block\">Instructors</span>\n              </span>\n            </h2>\n          </div>\n          <FilterSection\n            onSetSort={this.onSetSort}\n            onSetFilteredState={this.onSetFilteredState}\n            onUnsetFilteredState={this.onUnsetFilteredState}\n            onSetFilteredLocationState={this.onSetFilteredLocationState}\n            onUnsetFilteredLocationState={this.onUnsetFilteredLocationState}\n          />\n          <div className=\"content-section\">\n            <div className=\"row d-flex-content\">\n              {this.mapInstructors()}\n            </div>\n          </div>\n        </div>\n        <a\n          href=\"#\"\n          onClick={this.onOpenInstructorModal}\n          className=\"waves-effect waves-teal btn add-btn\"\n        >\n          <i className=\"material-icons\">add</i>\n          New Location\n        </a>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default InstructorListPage;\n"]},"metadata":{},"sourceType":"module"}