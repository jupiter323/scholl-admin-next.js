{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\nimport BubbleGroup from '../Bubble';\nvar styles = {\n  red: {\n    position: 'relative',\n    color: '#fff',\n    borderColor: '#fff',\n    border: '1px solid',\n    backgroundColor: '#db1d41',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  greenFilled: {\n    position: 'relative',\n    color: '#fff',\n    borderColor: '#32955c',\n    border: '1px solid',\n    backgroundColor: '#32955c',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  greenBorderOnly: {\n    position: 'relative',\n    color: '#32955c',\n    borderColor: '#32955c',\n    border: '1px solid',\n    backgroundColor: '#fff',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  plain: {\n    position: 'relative',\n    color: '#a6a8ab',\n    border: '1px solid',\n    borderColor: '#a6a8ab',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  }\n};\n\nvar AnswerRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnswerRow, _React$Component);\n\n  function AnswerRow(props) {\n    var _this;\n\n    _classCallCheck(this, AnswerRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnswerRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var studentChoice = _this.props.question.studentChoice;\n      _this.setState = ({\n        selected: studentChoice\n      }, function () {\n        _this.checkIfCorrect(_this.state.selected);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenQuestionModal\", function () {\n      return _this.setState({\n        open: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseQuestionModal\", function () {\n      return _this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleBubbleChange\", function (event, letter) {\n      _this.setState({\n        selected: event.target.value\n      }, function () {\n        return _this.checkIfCorrect(letter);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectedBubbleClick\", function (event) {\n      var selected = _this.state.selected;\n      var studentChoice = _this.props.question.studentChoice;\n\n      if (selected === event.target.value && studentChoice !== event.target.value) {\n        _this.setState({\n          selected: \"\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkIfCorrect\", function (letter) {\n      var question = _this.props.question;\n\n      if (letter === question.answer) {\n        _this.setState({\n          correct: true\n        });\n      } else {\n        _this.setState({\n          correct: false\n        });\n      } // update counter on writing page\n\n    });\n\n    _this.state = {\n      open: false,\n      selected: \"\",\n      correct: false\n    };\n    return _this;\n  }\n\n  _createClass(AnswerRow, [{\n    key: \"render\",\n    // renderBubbleStyle = ( letter ) => {\n    //   const { correct, selected } = this.state;\n    //   const { question: { answer } } = this.props;\n    //   if (selected === letter && correct) {\n    //     return styles.greenFilled\n    //   }\n    //   if (selected === letter && !correct) {\n    //     return styles.red\n    //   }\n    //   if (letter !== selected && letter === !answer) {\n    //     return styles.plain\n    //   }if(letter !== selected && letter === answer){\n    //     return styles.greenBorderOnly\n    //   }\n    //   return styles.plain\n    // }\n    // mapNumberBubbles = ({ index} ) => {\n    //   const { sampleAnswers } = this.props;\n    //   const { answer, studentChoice }= sampleAnswers[index];\n    //         if ( answer === studentChoice) {\n    //       return (\n    //         <li key={answer}>\n    //           <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777'}}>{answer}</span>\n    //         </li>\n    //       )\n    //     }\n    //     return (\n    //         <React.Fragment>\n    //           <li key={studentChoice}>\n    //             <span className=\"badge badge-rounded badge-rounded-bordered\"  style={{color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41'}}>{studentChoice}</span>\n    //           </li>\n    //           <li key={answer} >\n    //             <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#32955c', borderColor: '#32955c', backgroundColor: '#fff'}}>{answer}</span>\n    //           </li>\n    //         </React.Fragment>\n    //       )\n    //     };\n    value: function render() {\n      var _this$props = this.props,\n          index = _this$props.index,\n          question = _this$props.question;\n      var _this$state = this.state,\n          open = _this$state.open,\n          correct = _this$state.correct,\n          selected = _this$state.selected;\n      return React.createElement(React.Fragment, null, React.createElement(QuestionModal, {\n        open: open,\n        onOpenQuestionModal: this.onOpenQuestionModal,\n        onCloseQuestionModal: this.onCloseQuestionModal,\n        question: question\n      }), React.createElement(\"li\", {\n        className: \"answers-list-holder\",\n        key: question.problem\n      }, React.createElement(\"div\", {\n        className: \"answer-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col col-120\"\n      }, React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, React.createElement(BubbleGroup, {\n        id: question.id,\n        question: question,\n        correct: correct,\n        selected: selected,\n        onHandleBubbleChange: this.onHandleBubbleChange,\n        onSelectedBubbleClick: this.onSelectedBubbleClick\n      }))), React.createElement(\"div\", {\n        className: \"col col-30\"\n      }, React.createElement(\"span\", {\n        className: \"status-info\"\n      }, question.status)), React.createElement(\"div\", {\n        className: \"col col-43\"\n      }, React.createElement(\"span\", {\n        className: \"play-progress\",\n        \"data-video-id\": \"video001\"\n      }, React.createElement(\"span\", {\n        className: \"play\"\n      }), React.createElement(\"svg\", {\n        viewBox: \"0 0 50 50\",\n        width: \"50\",\n        height: \"50\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, React.createElement(\"circle\", {\n        className: \"circle-static\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      }), React.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      })))), React.createElement(\"div\", {\n        className: \"col col-auto\"\n      }, question.flagged ? React.createElement(\"span\", {\n        className: \"status-answer\",\n        style: {\n          color: '#c0272d'\n        }\n      }, React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }), React.createElement(\"b\", {\n        className: \"status-text\"\n      }, \"Review\")) : null), React.createElement(\"div\", {\n        className: \"dropdown-block col col-35\"\n      }, React.createElement(\"a\", {\n        className: \"modal-trigger\",\n        href: \"#\",\n        onClick: this.onOpenQuestionModal\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")))), question.studentNotes ? React.createElement(\"div\", {\n        className: \"comment-block\"\n      }, React.createElement(\"p\", null, question.studentNotes)) : null));\n    }\n  }]);\n\n  return AnswerRow;\n}(React.Component);\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired // index: PropTypes.number.isRequired,\n  // sampleAnswers: PropTypes.array.isRequired,\n\n};\nexport default AnswerRow;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailTestAnswerSheetComplete\\components\\WritingPage\\components\\AnswerRow\\index.js"],"names":["React","PropTypes","QuestionModal","BubbleGroup","styles","red","position","color","borderColor","border","backgroundColor","height","width","borderRadius","greenFilled","greenBorderOnly","plain","AnswerRow","props","studentChoice","question","setState","selected","checkIfCorrect","state","open","event","letter","target","value","answer","correct","index","onOpenQuestionModal","onCloseQuestionModal","problem","id","onHandleBubbleChange","onSelectedBubbleClick","status","flagged","studentNotes","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\nimport BubbleGroup from '../Bubble';\n\nconst styles = {\n  red: { position: 'relative', color: '#fff', borderColor: '#fff', border: '1px solid', backgroundColor: '#db1d41', height: '19px', width: '19px', borderRadius: '50%' },\n  greenFilled: { position: 'relative', color: '#fff', borderColor: '#32955c', border: '1px solid', backgroundColor: '#32955c', height: '19px', width: '19px', borderRadius: '50%' },\n  greenBorderOnly: { position: 'relative', color: '#32955c', borderColor: '#32955c', border: '1px solid', backgroundColor: '#fff', height: '19px', width: '19px', borderRadius: '50%' },\n  plain: { position: 'relative', color: '#a6a8ab', border: '1px solid', borderColor: '#a6a8ab', height: '19px', width: '19px', borderRadius: '50%' }\n}\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      selected: \"\",\n      correct: false,\n     }\n  };\n\n    componentDidMount = () => {\n    const { question: { studentChoice} } = this.props;\n      this.setState = ({selected: studentChoice}, () => {\n        this.checkIfCorrect(this.state.selected)\n      })\n  }\n\n  onOpenQuestionModal = () => this.setState({open: true})\n  onCloseQuestionModal = () => this.setState({open: false});\n\n  onHandleBubbleChange = (event, letter) => {\n    this.setState({selected: event.target.value},\n     () => this.checkIfCorrect(letter))\n   }\n\n   onSelectedBubbleClick = (event) => {\n    const { selected } = this.state;\n    const { question: {studentChoice} }  = this.props;\n    if (selected === event.target.value  && studentChoice !== event.target.value){\n      this.setState({selected: \"\"})\n    }\n  }\n \n  checkIfCorrect = (letter) => {\n    const { question } = this.props;\n    if(letter === question.answer) {\n      this.setState({correct: true});\n    }else{\n      this.setState({correct: false})\n    }\n    // update counter on writing page\n  }\n\n  // renderBubbleStyle = ( letter ) => {\n  //   const { correct, selected } = this.state;\n  //   const { question: { answer } } = this.props;\n  //   if (selected === letter && correct) {\n  //     return styles.greenFilled\n  //   }\n  //   if (selected === letter && !correct) {\n  //     return styles.red\n  //   }\n  //   if (letter !== selected && letter === !answer) {\n  //     return styles.plain\n  //   }if(letter !== selected && letter === answer){\n  //     return styles.greenBorderOnly\n  //   }\n  //   return styles.plain\n  // }\n\n  // mapNumberBubbles = ({ index} ) => {\n  //   const { sampleAnswers } = this.props;\n  //   const { answer, studentChoice }= sampleAnswers[index];\n  //         if ( answer === studentChoice) {\n  //       return (\n  //         <li key={answer}>\n  //           <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777'}}>{answer}</span>\n  //         </li>\n  //       )\n  //     }\n  //     return (\n  //         <React.Fragment>\n  //           <li key={studentChoice}>\n  //             <span className=\"badge badge-rounded badge-rounded-bordered\"  style={{color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41'}}>{studentChoice}</span>\n  //           </li>\n  //           <li key={answer} >\n  //             <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#32955c', borderColor: '#32955c', backgroundColor: '#fff'}}>{answer}</span>\n  //           </li>\n  //         </React.Fragment>\n  //       )\n  //     };\n\n \n      render() {\n        const { index, question } = this.props;\n        const { open, correct, selected } = this.state;\n        return (\n          <React.Fragment>\n          <QuestionModal open={open} onOpenQuestionModal={this.onOpenQuestionModal} onCloseQuestionModal={this.onCloseQuestionModal} question={question}/>\n        <li className=\"answers-list-holder\" key={question.problem}>\n          <div className=\"answer-row row mb-0\" >\n            <div className=\"col col-120\">\n              <ul className=\"answer-list\">\n                <BubbleGroup\n                id={question.id}\n                 question={question}\n                 correct={correct}\n                 selected={selected}\n                 onHandleBubbleChange={this.onHandleBubbleChange}\n                 onSelectedBubbleClick={this.onSelectedBubbleClick}/>\n                {/* <Choose>\n                  <When condition={!question.numeric}>\n                  {this.mapLetterBubbles({index})}\n\n                </When>\n                \n                  </When>\n                  <Otherwise>\n                  {this.mapNumberBubbles({index})}\n                  </Otherwise>\n                </Choose> */}\n                </ul>\n            </div>\n            <div className=\"col col-30\">\n              <span className=\"status-info\">{question.status}</span>\n            </div>\n            <div className=\"col col-43\">\n              <span className=\"play-progress\" data-video-id=\"video001\">\n                <span className=\"play\"></span>\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle className=\"circle-static\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n                  <circle className=\"circle-progress\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n                </svg>\n              </span>\n            </div>\n            <div className=\"col col-auto\">\n              <If condition={question.flagged}>\n                  <span className=\"status-answer\" style={{color: '#c0272d'}}>\n                    <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n                  </span>\n              </If>\n            </div>\n            <div className=\"dropdown-block col col-35\">\n\n              <a className='modal-trigger' href=\"#\" onClick={this.onOpenQuestionModal}><i className=\"material-icons dots-icon\">more_vert</i></a>\n            </div>\n          </div>\n          <If condition={question.studentNotes}>\n            <div className=\"comment-block\">\n              <p>{question.studentNotes}</p>\n            </div>\n          </If>\n        </li>\n      </React.Fragment>\n\n    )\n  }\n}\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  // index: PropTypes.number.isRequired,\n  // sampleAnswers: PropTypes.array.isRequired,\n}\n\nexport default AnswerRow;\n\n"]},"metadata":{},"sourceType":"module"}