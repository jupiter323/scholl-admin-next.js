{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { difficultyMap, getAnswerColor, getCompleteAnswerColor } from '../../utils';\n\nvar Question =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Question, _React$Component);\n\n  function Question() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Question);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Question)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"mapAnswerChoices\", function () {\n      var _this$props = _this.props,\n          _this$props$question = _this$props.question,\n          answerType = _this$props$question.answerType,\n          answerChoices = _this$props$question.answerChoices,\n          studentAnswer = _this$props$question.studentAnswer,\n          answerSheetComplete = _this$props.answerSheetComplete;\n\n      if (answerSheetComplete) {\n        if (answerType === 'letter') {\n          return React.createElement(\"ul\", {\n            className: \"answer-list\"\n          }, answerChoices.map(function (answer) {\n            return React.createElement(\"li\", {\n              key: answer.answerLetter\n            }, React.createElement(\"span\", {\n              className: \"badge-circle badge-circle-bordered\",\n              style: getCompleteAnswerColor('letter', answer, studentAnswer)\n            }, answer.answerLetter));\n          }));\n        }\n\n        return React.createElement(\"ul\", {\n          className: \"answer-list\"\n        }, answerChoices.map(function (answer) {\n          return React.createElement(\"li\", {\n            key: answer.answerValue\n          }, React.createElement(\"span\", {\n            className: \"badge badge-rounded badge-rounded-bordered\",\n            style: getCompleteAnswerColor('value', answer, studentAnswer)\n          }, answer.answerValue));\n        }));\n      }\n\n      if (answerType === 'letter') {\n        return React.createElement(\"ul\", {\n          className: \"answer-list\"\n        }, answerChoices.map(function (answer) {\n          return React.createElement(\"li\", {\n            key: answer.answerLetter\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: getAnswerColor(answer)\n          }, answer.answerLetter));\n        }));\n      }\n\n      return React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, answerChoices.map(function (answer) {\n        return React.createElement(\"li\", {\n          key: answer.answerValue\n        }, React.createElement(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: getAnswerColor(answer)\n        }, answer.answerValue));\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(Question, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          onOpenQuestionModal = _this$props2.onOpenQuestionModal,\n          question = _this$props2.question,\n          answerSheetComplete = _this$props2.answerSheetComplete,\n          handleQuestionDropdownClick = _this$props2.handleQuestionDropdownClick,\n          questionDropdownOpen = _this$props2.questionDropdownOpen,\n          questionDropdownIndex = _this$props2.questionDropdownIndex;\n      var difficulty = question.difficulty,\n          hasVideo = question.hasVideo,\n          flagged = question.flagged,\n          studentNotes = question.studentNotes;\n      return React.createElement(\"li\", {\n        className: \"answers-list-holder\"\n      }, React.createElement(\"div\", {\n        className: \"answer-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col col-120\"\n      }, this.mapAnswerChoices()), React.createElement(\"div\", {\n        className: \"col col-30\"\n      }, React.createElement(\"span\", {\n        className: \"status-info\"\n      }, difficultyMap[difficulty])), hasVideo && React.createElement(\"div\", {\n        className: \"col col-43\"\n      }, React.createElement(\"span\", {\n        className: \"play-progress\",\n        \"data-video-id\": \"video001\"\n      }, React.createElement(\"span\", {\n        className: \"play\"\n      }), React.createElement(\"svg\", {\n        viewBox: \"0 0 50 50\",\n        width: \"50\",\n        height: \"50\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, React.createElement(\"circle\", {\n        className: \"circle-static\",\n        cx: \"25.8\",\n        cy: \"24.3\",\n        r: \"22.8\",\n        style: {\n          strokeWidth: '3',\n          fill: 'rgba(0,0,0,0)'\n        }\n      }), React.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: \"25.8\",\n        cy: \"24.3\",\n        r: \"22.8\",\n        style: {\n          stroke: 'none',\n          strokeWidth: '3',\n          fill: 'rgba(0,0,0,0)'\n        }\n      })))), React.createElement(\"div\", {\n        className: \"col col-auto\"\n      }, answerSheetComplete && flagged ? React.createElement(\"span\", {\n        className: \"status-answer\",\n        style: {\n          color: '#c0272d'\n        }\n      }, React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }), React.createElement(\"b\", {\n        className: \"status-text\"\n      }, \"Review\")) : null), React.createElement(\"div\", {\n        className: \"dropdown-block col col-35\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        className: \"dropdown-trigger\",\n        \"data-target\": \"dropdown_answer01-3\",\n        onClick: function onClick(event) {\n          return handleQuestionDropdownClick(event, question);\n        }\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), questionDropdownOpen && question.id === questionDropdownIndex ? React.createElement(\"ul\", {\n        id: \"dropdown_answer01-3\",\n        className: \"dropdown-content dropdown-exwide\",\n        style: {\n          display: 'block',\n          opacity: '1',\n          transform: 'scaleX(1) scaleY(1)'\n        }\n      }, React.createElement(\"li\", null, React.createElement(\"a\", {\n        className: \"modal-trigger\",\n        href: \"#\",\n        onClick: function onClick() {\n          return onOpenQuestionModal(question);\n        }\n      }, \"View Problem\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\"\n      }, \"Dismiss Flag\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\"\n      }, \"Edit Response\"))) : null)), answerSheetComplete && studentNotes ? React.createElement(\"div\", {\n        className: \"comment-block\"\n      }, React.createElement(\"p\", null, \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore?  tincidunt ut laoreet dolore?\")) : null);\n    }\n  }]);\n\n  return Question;\n}(React.Component);\n\n;\nexport default Question;","map":null,"metadata":{},"sourceType":"module"}