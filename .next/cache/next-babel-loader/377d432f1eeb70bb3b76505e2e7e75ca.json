{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nvar _data = function data(percentage) {\n  return {\n    datasets: [{\n      data: [percentage, 100 - percentage],\n      backgroundColor: ['#00bbf7', '#eaeaea']\n    }]\n  };\n};\n\nexport { _data as data };\n\nvar getCardClass = function getCardClass(disabled, available) {\n  if (disabled) {\n    return 'card-test card-disabled card-main card';\n  }\n\n  if (!available) {\n    return 'card-test card-nonavailable card-main card';\n  }\n\n  return 'card-test card-main card';\n};\n\nvar ScoredTestCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ScoredTestCard, _React$Component);\n\n  function ScoredTestCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ScoredTestCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScoredTestCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false,\n        dropdownIndex: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCreateTest\", function (event) {\n      event.preventDefault();\n      console.warn('Pending implementation of create test UI and functionality');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDropdownClick\", function (event) {\n      var _this$props = _this.props,\n          onSetDropdown = _this$props.onSetDropdown,\n          onCloseDropdown = _this$props.onCloseDropdown,\n          dropdownIsOpen = _this$props.dropdownIsOpen,\n          index = _this$props.index;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    return _this;\n  }\n\n  _createClass(ScoredTestCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          test = _this$props2.test,\n          dropdownIndex = _this$props2.dropdownIndex,\n          index = _this$props2.index,\n          dropdownIsOpen = _this$props2.dropdownIsOpen,\n          onEditTest = _this$props2.onEditTest,\n          onDownloadReport = _this$props2.onDownloadReport,\n          onResetTest = _this$props2.onResetTest,\n          onDeleteTest = _this$props2.onDeleteTest;\n      var _test$flags = test.flags,\n          flags = _test$flags === void 0 ? [] : _test$flags,\n          disabled = test.disabled,\n          available = test.available,\n          testType = test.testType,\n          testDate = test.testDate,\n          title = test.title,\n          version = test.version,\n          availableDate = test.availableDate,\n          dueDate = test.dueDate,\n          completionDate = test.completionDate,\n          initialScore = test.initialScore,\n          targetScore = test.targetScore,\n          currentScore = test.currentScore,\n          totalGain = test.totalGain,\n          subjects = test.subjects;\n      return __jsx(\"div\", {\n        className: \"col s12 m8 l7 xl5\"\n      }, __jsx(\"div\", {\n        className: \"card-main-col\"\n      }, __jsx(\"div\", {\n        className: getCardClass(disabled, available)\n      }, __jsx(\"div\", {\n        className: \"card-content\"\n      }, __jsx(\"div\", {\n        className: \"card-title-row row\"\n      }, __jsx(\"div\", {\n        className: \"col s9\"\n      }, __jsx(\"div\", {\n        className: \"card-title-block\"\n      }, __jsx(\"h4\", {\n        className: \"h2\"\n      }, __jsx(\"b\", null, testType === 'real' ? 'Real SAT' : title), testType === 'real' ? [\"- \", title] : null), __jsx(\"time\", {\n        dateTime: \"2018-03-05\",\n        className: \"title-meta\"\n      }, testType === 'real' ? testDate : [\"Version \", version]))), __jsx(\"div\", {\n        className: \"col s3\"\n      }, __jsx(\"div\", {\n        className: \"row icons-row\"\n      }, flags.length ? __jsx(\"span\", {\n        className: \"badge-rounded-xs badge red darken-2 white-text\"\n      }, __jsx(\"b\", {\n        className: \"badge-text\"\n      }, flags.length), __jsx(\"i\", {\n        className: \"icon-flag\"\n      })) : null, __jsx(\"div\", {\n        className: \"dropdown-block col\"\n      }, __jsx(\"a\", {\n        href: \"#\",\n        \"data-target\": \"dropdown01\",\n        className: \"dropdown-trigger btn\",\n        onClick: this.handleDropdownClick\n      }, __jsx(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? __jsx(\"ul\", {\n        id: \"dropdown01\",\n        className: \"dropdown-content\",\n        style: {\n          display: 'block',\n          transformOrigin: '0px 0px 0px',\n          opacity: '1',\n          transform: 'scaleX(1) scaleY(1)'\n        }\n      }, __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: onEditTest\n      }, \"View/Edit\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: onDownloadReport\n      }, \"Download Score Report\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        className: \"red-text text-darken-3\",\n        onClick: onResetTest\n      }, \"Reset\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        className: \"red-text text-darken-3\",\n        onClick: onDeleteTest\n      }, \"Delete\"))) : null)))), __jsx(\"div\", {\n        className: \"card-test-row row d-flex mb-0\"\n      }, __jsx(\"div\", {\n        className: \"col s6\"\n      }, __jsx(\"div\", {\n        className: \"card-description\"\n      }, testType !== 'real' ? [__jsx(\"dl\", {\n        className: \"dl-horizontal\",\n        key: \"0\"\n      }, __jsx(\"dt\", null, \"Available:\"), __jsx(\"dd\", null, __jsx(\"time\", {\n        dateTime: \"2018-12-15\"\n      }, availableDate))), __jsx(\"dl\", {\n        className: \"dl-horizontal\",\n        key: \"1\"\n      }, __jsx(\"dt\", null, \"Due:\"), __jsx(\"dd\", null, __jsx(\"time\", {\n        dateTime: \"2018-12-15\"\n      }, dueDate))), completionDate.length ? __jsx(\"dl\", {\n        className: \"dl-horizontal\",\n        key: \"2\"\n      }, __jsx(\"dt\", null, \"Complete:\"), __jsx(\"dd\", null, __jsx(\"time\", {\n        dateTime: \"2018-12-15\"\n      }, completionDate))) : null] : null), __jsx(\"div\", {\n        className: currentScore ? 'chart-container chart-container-160' : 'chart-container chart-container-160 chart-value-zero start-anim'\n      }, __jsx(\"div\", {\n        className: \"chart-holder\"\n      }, __jsx(\"span\", {\n        className: \"svg-curved-bar\",\n        \"data-values\": \"{\\\"from\\\": 1100, \\\"to\\\": 1460, \\\"current\\\": 1210}\",\n        \"data-duration\": \"1\"\n      }, __jsx(Doughnut, {\n        data: function data() {\n          return _data(initialScore && !disabled && available && currentScore ? Number(initialScore / targetScore) * 100 : 0);\n        },\n        options: {\n          circumference: 1 * Math.PI,\n          rotation: 1 * Math.PI,\n          cutoutPercentage: 60,\n          tooltips: false\n        }\n      }), __jsx(\"span\", {\n        className: \"js-diff-holder\"\n      }, __jsx(\"span\", {\n        className: \"js-diff\"\n      }, __jsx(\"span\", {\n        className: \"txt\",\n        style: {\n          opacity: '1',\n          bottom: '65px',\n          color: 'black',\n          fontWeight: '600',\n          fontSize: '12px'\n        }\n      }, \"+\", totalGain)))), __jsx(\"span\", {\n        className: \"chart-value\",\n        style: {\n          backgroundColor: '#00bbf7'\n        }\n      }, __jsx(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"1100\",\n        \"data-end-val\": \"1210\",\n        \"data-duration\": \"1\"\n      }, currentScore))), __jsx(\"div\", {\n        className: \"chart-row\"\n      }, __jsx(\"div\", {\n        className: \"chart-col chart-start\"\n      }, __jsx(\"span\", {\n        className: \"amount\"\n      }, initialScore), __jsx(\"br\", null), __jsx(\"span\", {\n        className: \"amount-text\"\n      }, \"initial\")), __jsx(\"div\", {\n        className: \"chart-col chart-end\"\n      }, __jsx(\"span\", {\n        className: \"amount\"\n      }, targetScore), __jsx(\"br\", null), __jsx(\"span\", {\n        className: \"amount-text\"\n      }, \"target\"))))), __jsx(\"div\", {\n        className: \"col s6 right-align\"\n      }, __jsx(\"div\", {\n        className: \"charts-row row mb-0\"\n      }, __jsx(\"div\", {\n        className: \"col s6\"\n      }, __jsx(\"div\", {\n        className: \"chart-block chart-block-test-sm\"\n      }, __jsx(\"span\", {\n        className: \"value-max\"\n      }, subjects[0].targetScore), __jsx(\"div\", {\n        className: \"js-donut-chart\",\n        \"data-stroke-width\": \"11\",\n        \"data-source\": \"./inc/score-data-test-reading.json\"\n      }), __jsx(\"div\", {\n        className: \"chart-text\"\n      }, __jsx(\"span\", {\n        className: \"title\"\n      }, \"Reading\"), __jsx(\"span\", {\n        className: \"value\"\n      }, subjects[0].currentScore), __jsx(\"span\", {\n        className: \"description\"\n      }, \"+\", subjects[0].totalGain)))), __jsx(\"div\", {\n        className: \"col s6\"\n      }, __jsx(\"div\", {\n        className: \"chart-block chart-block-test-sm\"\n      }, __jsx(\"span\", {\n        className: \"value-max\"\n      }, subjects[1].targetScore), __jsx(\"div\", {\n        className: \"js-donut-chart\",\n        \"data-stroke-width\": \"11\",\n        \"data-source\": \"./inc/score-data-test-writing.json\"\n      }), __jsx(\"div\", {\n        className: \"chart-text\"\n      }, __jsx(\"span\", {\n        className: \"title\"\n      }, \"Writing\"), __jsx(\"span\", {\n        className: \"value\"\n      }, subjects[1].currentScore), __jsx(\"span\", {\n        className: \"description\"\n      }, \"+\", subjects[1].totalGain))))), __jsx(\"div\", {\n        className: !subjects[2].currentScore ? 'chart-block chart-block-test' : 'chart-block chart-block-test chart-block-zero'\n      }, __jsx(\"span\", {\n        className: \"value-max\"\n      }, subjects[2].currentScore), __jsx(\"div\", {\n        className: \"js-donut-chart\",\n        \"data-stroke-width\": \"15\",\n        \"data-source\": \"./inc/score-data-test-math.json\"\n      }), __jsx(\"div\", {\n        className: \"chart-text\"\n      }, __jsx(\"span\", {\n        className: \"title\"\n      }, \"Math\"), __jsx(\"span\", {\n        className: \"value\"\n      }, subjects[2].currentScore), subjects[2].totalGain ? __jsx(\"span\", {\n        className: \"description\"\n      }, \"+\", subjects[2].totalGain) : null))))))));\n    }\n  }]);\n\n  return ScoredTestCard;\n}(React.Component);\n\nScoredTestCard.propTypes = {\n  index: PropTypes.number,\n  dropdownIndex: PropTypes.number,\n  test: PropTypes.object.isRequired,\n  onEditTest: PropTypes.func.isRequired,\n  onResetTest: PropTypes.func.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onDownloadReport: PropTypes.func.isRequired\n};\nexport default ScoredTestCard;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/ScoredTestListPage/components/ScoredTestCard/index.js"],"names":["React","PropTypes","Doughnut","data","percentage","datasets","backgroundColor","getCardClass","disabled","available","ScoredTestCard","dropdownIndex","setState","dropdownIsOpen","event","preventDefault","console","warn","props","onSetDropdown","onCloseDropdown","index","test","onEditTest","onDownloadReport","onResetTest","onDeleteTest","flags","testType","testDate","title","version","availableDate","dueDate","completionDate","initialScore","targetScore","currentScore","totalGain","subjects","length","handleDropdownClick","display","transformOrigin","opacity","transform","Number","circumference","Math","PI","rotation","cutoutPercentage","tooltips","bottom","color","fontWeight","fontSize","Component","propTypes","number","object","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nexport const data = (percentage) => ({\n  datasets: [{\n    data: [percentage, 100 - percentage],\n    backgroundColor: [\n      '#00bbf7',\n      '#eaeaea',\n    ],\n  }],\n});\n\nconst getCardClass = (disabled, available) => {\n  if (disabled) {\n    return 'card-test card-disabled card-main card';\n  }\n  if (!available) {\n    return 'card-test card-nonavailable card-main card';\n  }\n  return 'card-test card-main card';\n}\n\nclass ScoredTestCard extends React.Component {\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  onCreateTest = (event) => {\n    event.preventDefault();\n    console.warn('Pending implementation of create test UI and functionality');\n  }\n\n  handleDropdownClick = (event) => {\n    const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  }\n\n\n  render() {\n    const { test, dropdownIndex, index, dropdownIsOpen, onEditTest, onDownloadReport, onResetTest, onDeleteTest } = this.props;\n    const { flags = [], disabled, available, testType, testDate, title, version, availableDate, dueDate, completionDate, initialScore, targetScore, currentScore, totalGain, subjects } = test;\n    return (\n      <div className=\"col s12 m8 l7 xl5\">\n        <div className=\"card-main-col\">\n          <div className={getCardClass(disabled, available)}>\n            <div className=\"card-content\">\n              <div className=\"card-title-row row\">\n                <div className=\"col s9\">\n                  <div className=\"card-title-block\">\n                    <h4 className=\"h2\">\n                      <b>{testType === 'real' ? 'Real SAT' : title}</b>\n                      <If condition={testType === 'real'}>\n                        - {title}\n                      </If>\n                    </h4>\n                    <time dateTime=\"2018-03-05\" className=\"title-meta\">\n                      <Choose>\n                        <When condition={testType === 'real'}>\n                          {testDate}\n                        </When>\n                        <Otherwise>\n                          Version {version}\n                        </Otherwise>\n                      </Choose>\n                    </time>\n                  </div>\n                </div>\n                <div className=\"col s3\">\n                  <div className=\"row icons-row\">\n                    <If condition={flags.length}>\n                      <span\n                        className=\"badge-rounded-xs badge red darken-2 white-text\"\n                      >\n                        <b className=\"badge-text\">{flags.length}</b>\n                        <i className=\"icon-flag\"></i>\n                      </span>\n                    </If>\n\n                    <div className=\"dropdown-block col\">\n                      <a\n                        href='#'\n                        data-target='dropdown01'\n                        className='dropdown-trigger btn'\n                        onClick={this.handleDropdownClick}\n                      >\n                        <i className=\"material-icons dots-icon\">more_vert</i>\n                      </a>\n                      <If condition={dropdownIsOpen && dropdownIndex === index}>\n                        <ul\n                          id='dropdown01'\n                          className='dropdown-content'\n                          style={{ display: 'block', transformOrigin: '0px 0px 0px', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}\n                        >\n                          <li><a href=\"#\" onClick={onEditTest}>View/Edit</a></li>\n                          <li><a href=\"#\" onClick={onDownloadReport}>Download Score Report</a></li>\n                          <li><a href=\"#\" className=\"red-text text-darken-3\" onClick={onResetTest}>Reset</a></li>\n                          <li><a href=\"#\" className=\"red-text text-darken-3\" onClick={onDeleteTest}>Delete</a></li>\n                        </ul>\n                      </If>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card-test-row row d-flex mb-0\">\n                <div className=\"col s6\">\n                  <div className=\"card-description\">\n                    <If condition={testType !== 'real'}>\n                      <dl className=\"dl-horizontal\">\n                        <dt>Available:</dt>\n                        <dd><time dateTime=\"2018-12-15\">{availableDate}</time></dd>\n                      </dl>\n                      <dl className=\"dl-horizontal\">\n                        <dt>Due:</dt>\n                        <dd><time dateTime=\"2018-12-15\">{dueDate}</time></dd>\n                      </dl>\n                      <If condition={completionDate.length}>\n                        <dl className=\"dl-horizontal\">\n                          <dt>Complete:</dt>\n                          <dd><time dateTime=\"2018-12-15\">{completionDate}</time></dd>\n                        </dl>\n                      </If>\n                    </If>\n                  </div>\n                  <div className={currentScore ? 'chart-container chart-container-160' : 'chart-container chart-container-160 chart-value-zero start-anim' }>\n                    <div className=\"chart-holder\">\n                      <span className=\"svg-curved-bar\" data-values='{\"from\": 1100, \"to\": 1460, \"current\": 1210}' data-duration=\"1\">\n                        <Doughnut\n                          data={() => (data(initialScore && (!disabled && available) && currentScore ? Number(initialScore / targetScore) * 100 : 0 ))}\n                          options={{\n                            circumference: 1 * Math.PI,\n                            rotation: 1 * Math.PI,\n                            cutoutPercentage: 60,\n                            tooltips: false,\n                          }}\n                        />\n                        <span className=\"js-diff-holder\">\n                          <span className=\"js-diff\">\n                            <span className=\"txt\" style={{ opacity: '1', bottom: '65px', color: 'black', fontWeight: '600', fontSize: '12px' }}>+{totalGain}</span>\n                          </span>\n                        </span>\n\n                      </span>\n                      <span className=\"chart-value\" style={{ backgroundColor: '#00bbf7' }}><span data-count-up data-start-val=\"1100\" data-end-val=\"1210\" data-duration=\"1\">{currentScore}</span></span>\n                    </div>\n                    <div className=\"chart-row\">\n                      <div className=\"chart-col chart-start\">\n                        <span className=\"amount\">{initialScore}</span><br />\n                        <span className=\"amount-text\">initial</span>\n                      </div>\n                      <div className=\"chart-col chart-end\">\n                        <span className=\"amount\">{targetScore}</span><br />\n                        <span className=\"amount-text\">target</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col s6 right-align\">\n                  <div className=\"charts-row row mb-0\">\n                    <div className=\"col s6\">\n                      <div className=\"chart-block chart-block-test-sm\">\n                        <span className=\"value-max\">{subjects[0].targetScore}</span>\n                        <div className=\"js-donut-chart\" data-stroke-width=\"11\" data-source='./inc/score-data-test-reading.json'></div>\n                        <div className=\"chart-text\">\n                          <span className=\"title\">Reading</span>\n                          <span className=\"value\">{subjects[0].currentScore}</span>\n                          <span className=\"description\">+{subjects[0].totalGain}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"col s6\">\n                      <div className=\"chart-block chart-block-test-sm\">\n                        <span className=\"value-max\">{subjects[1].targetScore}</span>\n                        <div className=\"js-donut-chart\" data-stroke-width=\"11\" data-source='./inc/score-data-test-writing.json'></div>\n                        <div className=\"chart-text\">\n                          <span className=\"title\">Writing</span>\n                          <span className=\"value\">{subjects[1].currentScore}</span>\n                          <span className=\"description\">+{subjects[1].totalGain}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className={!subjects[2].currentScore ? 'chart-block chart-block-test' : 'chart-block chart-block-test chart-block-zero'}>\n                    <span className=\"value-max\">{subjects[2].currentScore}</span>\n                    <div className=\"js-donut-chart\" data-stroke-width=\"15\" data-source='./inc/score-data-test-math.json'></div>\n                    <div className=\"chart-text\">\n                      <span className=\"title\">Math</span>\n                      <span className=\"value\">{subjects[2].currentScore}</span>\n                      <If condition={subjects[2].totalGain}>\n                        <span className=\"description\">+{subjects[2].totalGain}</span>\n                      </If>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nScoredTestCard.propTypes = {\n  index: PropTypes.number,\n  dropdownIndex: PropTypes.number,\n  test: PropTypes.object.isRequired,\n  onEditTest: PropTypes.func.isRequired,\n  onResetTest: PropTypes.func.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onDownloadReport: PropTypes.func.isRequired,\n}\n\nexport default ScoredTestCard;\n"]},"metadata":{},"sourceType":"module"}