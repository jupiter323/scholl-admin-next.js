{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport statusColorMap from '../../../../DetailWorksheetPage/utils/statusColorMap';\nimport LessonDetailAnswerSheet from '../../../../LessonDetailAnswerSheet';\n\nvar ListItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListItem, _React$Component);\n\n  function ListItem(props) {\n    var _this;\n\n    _classCallCheck(this, ListItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListItem).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenDetailModal\", function () {\n      return _this.setState({\n        detailModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDetailModal\", function () {\n      return _this.setState({\n        detailModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderLessonIcon\", function (subject) {\n      switch (subject) {\n        case 'Reading':\n          return 'icon-books';\n\n        case 'Writing':\n          return 'icon-hands';\n\n        case 'Math':\n          return 'icon-calculator';\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderDropdownOptions\", function (status) {\n      if (status === \"Scheduled\" || status === 'Assigned') {\n        return React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#\"\n        }, \"Reschedule\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#!\"\n        }, \"Unassign\")));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Reschedule\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\"\n      }, \"Mark all Flags Reviewed\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\"\n      }, \"Reset\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\"\n      }, \"Unassign\")));\n    });\n\n    _this.state = {\n      detailModalOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(ListItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props$lesson = this.props.lesson,\n          lessonName = _this$props$lesson.lessonName,\n          score = _this$props$lesson.score,\n          scoreStatus = _this$props$lesson.scoreStatus,\n          passage = _this$props$lesson.passage,\n          reviewedAlerts = _this$props$lesson.reviewedAlerts,\n          overdue = _this$props$lesson.overdue,\n          subject = _this$props$lesson.subject,\n          status = _this$props$lesson.status,\n          completionDate = _this$props$lesson.completionDate,\n          problems = _this$props$lesson.problems,\n          type = _this$props$lesson.type,\n          availableDate = _this$props$lesson.availableDate,\n          dueDate = _this$props$lesson.dueDate,\n          flags = _this$props$lesson.flags;\n      var _this$props = this.props,\n          dropdownIndex = _this$props.dropdownIndex,\n          lesson = _this$props.lesson,\n          dropdownIsOpen = _this$props.dropdownIsOpen,\n          index = _this$props.index,\n          user = _this$props.user,\n          handleDropdownClick = _this$props.handleDropdownClick;\n      return React.createElement(React.Fragment, null, React.createElement(LessonDetailAnswerSheet, {\n        onCloseDetailModal: this.onCloseDetailModal,\n        open: this.state.detailModalOpen,\n        user: user,\n        lesson: lesson\n      }), React.createElement(\"div\", {\n        className: \"card list-table-row\",\n        key: index\n      }, React.createElement(\"div\", {\n        className: \"list-table-cell icon-cell\"\n      }, React.createElement(\"span\", {\n        className: \"block-icon\"\n      }, React.createElement(\"i\", {\n        className: this.renderLessonIcon(subject)\n      }))), React.createElement(\"div\", {\n        className: \"list-table-cell type-cell\"\n      }, React.createElement(\"div\", {\n        className: \"card-panel-text truncate\"\n      }, React.createElement(\"div\", {\n        className: \"text-large truncate\",\n        id: \"lessonName\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.onOpenDetailModal\n      }, lessonName)))), React.createElement(\"div\", {\n        className: \"list-table-cell graph-cell\",\n        style: {\n          marginLeft: '50px'\n        }\n      }, scoreStatus && React.createElement(\"span\", {\n        className: \"chart-bar \".concat(statusColorMap[scoreStatus], \" white-text\")\n      }, Math.floor(\"\".concat(score / problems * 100)), \"%\")), React.createElement(\"div\", {\n        className: \"list-table-cell status-cell\"\n      }, scoreStatus !== \"\" ? React.createElement(\"span\", {\n        className: \"badge badge-rounded-md \".concat(statusColorMap[scoreStatus], \" white-text\")\n      }, scoreStatus) : React.createElement(\"span\", {\n        className: \"badge badge-rounded-md \".concat(statusColorMap[status], \" white-text\")\n      }, status)), React.createElement(\"div\", {\n        className: \"list-table-cell type-cell\",\n        style: {\n          marginLeft: '10px'\n        }\n      }, subject), React.createElement(\"div\", {\n        className: \"list-table-cell type-cell\"\n      }, \"p. \", passage), React.createElement(\"div\", {\n        className: \"list-table-cell date-cell\"\n      }, React.createElement(\"time\", {\n        dateTime: \"2019-01-27\"\n      }, availableDate)), React.createElement(\"div\", {\n        className: \"list-table-cell dueDate-cell\",\n        style: {\n          color: overdue ? \"#db1b29\" : \"\"\n        }\n      }, React.createElement(\"time\", {\n        dateTime: \"2019-01-27\"\n      }, dueDate)), React.createElement(\"div\", {\n        className: \"list-table-cell completed-cell\"\n      }, completionDate), React.createElement(\"div\", {\n        className: \"list-table-cell name-cell\"\n      }, React.createElement(\"div\", {\n        className: \"card-panel-text truncate\"\n      }, React.createElement(\"div\", {\n        className: \"text-large truncate\"\n      }, type))), React.createElement(\"div\", {\n        className: \"list-table-cell graph-cell\"\n      }, reviewedAlerts.length > 0 && React.createElement(\"span\", {\n        className: \"badge-rounded-xs badge grey darken-1 white-text\"\n      }, React.createElement(\"b\", {\n        className: \"badge-text\"\n      }, reviewedAlerts.length), \" \", React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }))), React.createElement(\"div\", {\n        className: \"list-table-cell flags-cell\"\n      }, flags.length > 0 && React.createElement(\"span\", {\n        className: \"badge-rounded-xs badge red darken-2 white-text\"\n      }, React.createElement(\"b\", {\n        className: \"badge-text\"\n      }, flags.length), \" \", React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }))), React.createElement(\"div\", {\n        className: \"list-table-cell drop-cell\"\n      }, React.createElement(\"div\", {\n        className: \"dropdown-block\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        \"data-target\": \"dropdown01\",\n        className: \"dropdown-trigger btn\",\n        onClick: function onClick(event) {\n          return handleDropdownClick(event, index);\n        }\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? React.createElement(\"ul\", {\n        id: \"dropdown01\",\n        className: \"dropdown-content dropdown-wide\",\n        style: {\n          display: 'block',\n          opacity: '1',\n          transform: 'scaleX(1) scaleY(1)'\n        }\n      }, this.renderDropdownOptions(status)) : null))));\n    }\n  }]);\n\n  return ListItem;\n}(React.Component);\n\nexport default ListItem;","map":null,"metadata":{},"sourceType":"module"}