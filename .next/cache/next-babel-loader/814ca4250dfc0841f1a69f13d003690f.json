{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport FilterSection from './components/FilterSection';\nimport LessonCard from './components/LessonCard';\nimport sampleLessons from '../../../utils/sampleLessons';\nimport { pageNumberSort, problemSort, timeEstimateSort, subjectSort } from '../../../utils/sortOptions';\nconst lessonTypeMap = {\n  'Challenge + Practice': 'challenge',\n  'Homework Drill': 'homework',\n  'Reading from Workbook': 'readingFromWorkbook'\n};\n\nclass AssignLessonModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onToggleAssignSelectedDropdown\", () => this.setState(({\n      assignSelectedDropdownOpen\n    }) => ({\n      assignSelectedDropdownOpen: !assignSelectedDropdownOpen\n    })));\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIndex,\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false\n    }));\n\n    _defineProperty(this, \"onResetModal\", () => this.setState({\n      subjectFilters: [],\n      typeFilters: [],\n      sort: ''\n    }));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", (titleFilter, value) => this.setState({\n      [titleFilter]: value\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", titleFilter => this.setState({\n      [titleFilter]: ''\n    }));\n\n    _defineProperty(this, \"onCloseModal\", () => {\n      const {\n        onClose\n      } = this.props;\n      onClose();\n      this.onResetModal();\n    });\n\n    _defineProperty(this, \"onSortLessons\", lessons => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'pageNumber':\n          return lessons.sort(pageNumberSort);\n\n        case 'problems':\n          return lessons.sort(problemSort);\n\n        case 'timeEstimate':\n          return lessons.sort(timeEstimateSort);\n\n        case 'subject':\n          return lessons.sort(subjectSort);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onFilterByTitle\", () => {\n      const {\n        lessons,\n        titleFilter\n      } = this.state;\n      return lessons.reduce((finalArr, currentLesson) => {\n        const {\n          title\n        } = currentLesson;\n        const lessonString = title.replace(/\\s/g, \"\").toLowerCase();\n\n        if (lessonString.indexOf(titleFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n          finalArr.push(currentLesson);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterByUnit\", () => {\n      const {\n        lessons,\n        unitFilter\n      } = this.state;\n      return lessons.reduce((finalArr, currentLesson) => {\n        const {\n          unit\n        } = currentLesson;\n        const lessonString = unit.replace(/\\s/g, \"\").toLowerCase();\n\n        if (lessonString.indexOf(unitFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n          finalArr.push(currentLesson);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterLessons\", () => {\n      const {\n        subjectFilters,\n        typeFilters,\n        lessons: allLessons\n      } = this.state;\n      let lessons = allLessons;\n\n      if (subjectFilters.length) {\n        lessons = lessons.filter(lesson => subjectFilters.indexOf(lesson.subject) !== -1);\n      }\n\n      if (typeFilters.length) {\n        lessons = lessons.filter(lesson => typeFilters.indexOf(lessonTypeMap[lesson.type]) !== -1);\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(this, \"getMappableLessons\", () => {\n      const {\n        subjectFilters,\n        typeFilters,\n        sort,\n        unitFilter,\n        titleFilter,\n        lessons\n      } = this.state;\n      let mappableLessons = lessons;\n\n      if (titleFilter.length) {\n        mappableLessons = this.onFilterByTitle();\n      }\n\n      if (unitFilter.length) {\n        mappableLessons = this.onFilterByUnit();\n      }\n\n      if (subjectFilters.length || typeFilters.length) {\n        mappableLessons = this.onFilterLessons();\n      }\n\n      if (sort) {\n        return this.onSortLessons(mappableLessons);\n      }\n\n      return mappableLessons;\n    });\n\n    _defineProperty(this, \"handleFilterClick\", (filterType, filter) => {\n      const {\n        subjectFilters: currentSubjectFilters,\n        typeFilters: currentTypeFilters\n      } = this.state;\n      let modifiedFilterCurrentState;\n      let modifiedFilterName;\n      let modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'type':\n          modifiedFilterCurrentState = currentTypeFilters;\n          modifiedFilterName = 'typeFilters';\n          break;\n\n        default:\n          break;\n      }\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        [modifiedFilterName]: modifiedFilterUpdatedState\n      });\n    });\n\n    _defineProperty(this, \"handleLessonClick\", lesson => {\n      const {\n        selectedLessons\n      } = this.state;\n      let modifiedLessons;\n\n      if (selectedLessons.indexOf(lesson) === -1) {\n        modifiedLessons = update(selectedLessons, {\n          $push: [lesson]\n        });\n      } else {\n        const lessonIndex = selectedLessons.indexOf(lesson);\n        modifiedLessons = update(selectedLessons, {\n          $splice: [[lessonIndex, 1]]\n        });\n      }\n\n      this.setState({\n        selectedLessons: modifiedLessons\n      });\n    });\n\n    _defineProperty(this, \"assignLessons\", date => {\n      const {\n        onAssignLessons\n      } = this.props;\n      const {\n        selectedLessons\n      } = this.state;\n      let assignDate;\n\n      switch (date) {\n        case 'today':\n          assignDate = moment().format('MM/DD/YY');\n          break;\n\n        case 'tomorrow':\n          assignDate = moment().add(1, 'days').format('MM/DD/YY');\n          break;\n\n        case 'nextSession':\n          break;\n\n        case 'customDate':\n          assignDate = '01/05/19';\n          break;\n\n        default:\n          break;\n      }\n\n      this.onToggleAssignSelectedDropdown();\n      this.onResetModal();\n      onAssignLessons(selectedLessons, assignDate);\n    });\n\n    _defineProperty(this, \"mapLessons\", () => this.getMappableLessons().map((lesson, index) => __jsx(LessonCard, {\n      lesson: lesson,\n      index: index,\n      key: lesson.id,\n      onSetDropdown: this.onSetDropdown,\n      onCloseDropdown: this.onCloseDropdown,\n      dropdownIndex: this.state.dropdownIndex,\n      dropdownIsOpen: this.state.dropdownIsOpen,\n      handleLessonClick: this.handleLessonClick,\n      selectedLessons: this.state.selectedLessons\n    })));\n\n    this.state = {\n      sort: '',\n      unitFilter: '',\n      titleFilter: '',\n      typeFilters: [],\n      subjectFilters: [],\n      selectedLessons: [],\n      lessons: sampleLessons,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      assignSelectedDropdownOpen: false\n    };\n  }\n\n  render() {\n    const {\n      open\n    } = this.props;\n    const {\n      assignSelectedDropdownOpen,\n      subjectFilters,\n      typeFilters,\n      sort\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"jsx-4152893512\"\n    }, open && __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"wrapper\"\n    }, __jsx(\"div\", {\n      style: {\n        minWidth: \"100%\"\n      },\n      className: \"jsx-4152893512\" + \" \" + \"card-modal card-main card switcher-section grey lighten-3\"\n    }, __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"header-row card-panel light-blue lighten-1 white-text\"\n    }, __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"card-panel-row row\"\n    }, __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"col s11\"\n    }, __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"d-flex\"\n    }, __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"icon-col\"\n    }, __jsx(\"i\", {\n      className: \"jsx-4152893512\" + \" \" + \"icon-books-l\"\n    })), __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"card-panel-text\"\n    }, __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"text-large\"\n    }, \"Assign Lessons\")))), __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"col s1 right-align\"\n    }, __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"row icons-row\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onCloseModal,\n      className: \"jsx-4152893512\" + \" \" + \"modal-close close\"\n    }, __jsx(\"i\", {\n      className: \"jsx-4152893512\" + \" \" + \"icon-close-thin\"\n    })))))), __jsx(FilterSection, {\n      sort: sort,\n      typeFilters: typeFilters,\n      subjectFilters: subjectFilters,\n      onSetSort: this.onSetSort,\n      onClearFilters: this.onResetModal,\n      handleFilterClick: this.handleFilterClick,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState\n    }), __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"card-content\"\n    }, __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"card-body\"\n    }, __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"result-row center-align\"\n    }, __jsx(\"b\", {\n      className: \"jsx-4152893512\" + \" \" + \"result\"\n    }, \" - \", this.getMappableLessons().length, \" results -\")), __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"checkboxes-section row d-flex-content card-width-322\"\n    }, this.mapLessons())))), __jsx(\"div\", {\n      className: \"jsx-4152893512\" + \" \" + \"add-btn-block\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignSelectedDropdown,\n      \"data-target\": \"dropdown_assign_selected_lessons\",\n      className: \"jsx-4152893512\" + \" \" + \"dropdown-trigger waves-effect waves-teal btn add-btn\"\n    }, __jsx(\"i\", {\n      className: \"jsx-4152893512\" + \" \" + \"material-icons\"\n    }, \"add\"), \" Assign Selected\"), __jsx(\"ul\", {\n      id: \"dropdown_assign_selected_lessons\",\n      style: {\n        display: assignSelectedDropdownOpen ? 'block' : '0',\n        opacity: assignSelectedDropdownOpen ? '1' : '0'\n      },\n      className: \"jsx-4152893512\" + \" \" + 'dropdown-content'\n    }, __jsx(\"li\", {\n      className: \"jsx-4152893512\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.assignLessons('today'),\n      className: \"jsx-4152893512\"\n    }, \"For Today\")), __jsx(\"li\", {\n      className: \"jsx-4152893512\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.assignLessons('tomorrow'),\n      className: \"jsx-4152893512\"\n    }, \"For Tomorrow\")), __jsx(\"li\", {\n      className: \"jsx-4152893512\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.assignLessons('nextSession'),\n      className: \"jsx-4152893512\"\n    }, \"For Next Session\")), __jsx(\"li\", {\n      className: \"jsx-4152893512\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.assignLessons('customDate'),\n      className: \"jsx-4152893512\"\n    }, \"For Date...\"))))), __jsx(_JSXStyle, {\n      id: \"4152893512\"\n    }, [\".card-modal.jsx-4152893512{margin:0;border-radius:6px;}\", \".modal-custom.jsx-4152893512{opacity:1;visibility:visible;}\", \".modal-footer.jsx-4152893512{background-color:white;}\"]));\n  }\n\n}\n\nexport default AssignLessonModal;","map":null,"metadata":{},"sourceType":"module"}