{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { oAuthTokenApi } from \"../components/User/index/api\";\nimport decode from \"jwt-decode\";\nexport var logIn = function logIn(postBody) {\n  var data;\n  return _regeneratorRuntime.async(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(oAuthTokenApi(postBody));\n\n        case 2:\n          data = _context.sent;\n          return _context.abrupt(\"return\", data);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var loggedIn = function loggedIn() {\n  // Checks if there is a saved token and it's still valid\n  var token = getToken();\n  return !!token && !isTokenExpired(token); // handwaiving here\n};\nexport var setToken = function setToken(token, expires_at) {\n  // Saves user token to sessionStorage\n  localStorage.setItem('token', token);\n  localStorage.setItem('expires_at', expires_at);\n};\nexport var getToken = function getToken() {\n  // Retrieves the user token from sessionStorage\n  if (true) {\n    // Is running on the client\n    return localStorage.getItem('token');\n  }\n};\nexport var logout = function logout() {\n  // Clear user token from sessionStorage\n  localStorage.removeItem('token');\n  localStorage.removeItem('expires_at');\n};\nexport var isTokenExpired = function isTokenExpired(token) {\n  try {\n    var decoded = decode(token);\n\n    if (decoded.exp < _Date$now() / 1000) {\n      // Checking if token is expired.\n      return true;\n    }\n\n    return false;\n  } catch (err) {\n    return false;\n  }\n};\nexport default [loggedIn, setToken, getToken, logout];","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/utils/AuthService.js"],"names":["oAuthTokenApi","decode","logIn","postBody","data","loggedIn","token","getToken","isTokenExpired","setToken","expires_at","localStorage","setItem","getItem","logout","removeItem","decoded","exp","err"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,8BAA9B;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACAH,aAAa,CAACG,QAAD,CADb;;AAAA;AACbC,UAAAA,IADa;AAAA,2CAEZA,IAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;AAIP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC5B;AACA,MAAMC,KAAK,GAAGC,QAAQ,EAAtB;AACA,SAAO,CAAC,CAACD,KAAF,IAAW,CAACE,cAAc,CAACF,KAAD,CAAjC,CAH4B,CAGc;AAC3C,CAJM;AAMP,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACH,KAAD,EAAQI,UAAR,EAAuB;AAC7C;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BN,KAA9B;AACAK,EAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCF,UAAnC;AACD,CAJM;AAMP,OAAO,IAAMH,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC9B;AACE,YAAmC;AACjC;AACA,WAAOI,YAAY,CAACE,OAAb,CAAqB,OAArB,CAAP;AACD;AACF,CANM;AAQP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAC1B;AACAH,EAAAA,YAAY,CAACI,UAAb,CAAwB,OAAxB;AACAJ,EAAAA,YAAY,CAACI,UAAb,CAAwB,YAAxB;AACD,CAJM;AAMP,OAAO,IAAMP,cAAc,GAAG,SAAjBA,cAAiB,CAAAF,KAAK,EAAI;AACrC,MAAI;AACF,QAAMU,OAAO,GAAGf,MAAM,CAACK,KAAD,CAAtB;;AACA,QAAIU,OAAO,CAACC,GAAR,GAAc,cAAa,IAA/B,EAAqC;AACnC;AACA,aAAO,IAAP;AACD;;AAAC,WAAO,KAAP;AACH,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,WAAO,KAAP;AACD;AACF,CAVM;AAYP,eAAe,CACbb,QADa,EAEbI,QAFa,EAGbF,QAHa,EAIbO,MAJa,CAAf","sourcesContent":["import { oAuthTokenApi } from \"../components/User/index/api\";\nimport decode from \"jwt-decode\";\n\nexport const logIn = async (postBody) => {\n  const data = await oAuthTokenApi(postBody);\n  return data;\n};\nexport const loggedIn = () => {\n  // Checks if there is a saved token and it's still valid\n  const token = getToken();\n  return !!token && !isTokenExpired(token); // handwaiving here\n};\n\nexport const setToken = (token, expires_at) => {\n  // Saves user token to sessionStorage\n  localStorage.setItem('token', token);\n  localStorage.setItem('expires_at', expires_at);\n};\n\nexport const getToken = () => {\n// Retrieves the user token from sessionStorage\n  if (typeof window !== 'undefined') {\n    // Is running on the client\n    return localStorage.getItem('token');\n  }\n};\n\nexport const logout = () => {\n  // Clear user token from sessionStorage\n  localStorage.removeItem('token');\n  localStorage.removeItem('expires_at');\n};\n\nexport const isTokenExpired = token => {\n  try {\n    const decoded = decode(token);\n    if (decoded.exp < Date.now() / 1000) {\n      // Checking if token is expired.\n      return true;\n    } return false;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport default [\n  loggedIn,\n  setToken,\n  getToken,\n  logout,\n];\n"]},"metadata":{},"sourceType":"module"}