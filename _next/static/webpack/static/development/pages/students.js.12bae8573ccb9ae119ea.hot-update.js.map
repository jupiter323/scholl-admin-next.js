{"version":3,"file":"static/webpack/static/development/pages/students.js.12bae8573ccb9ae119ea.hot-update.js","sources":["webpack:///./components/Student/DetailTestScorePage/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport TotalScoreCard from './components/TotalScoreCard';\nimport SectionScoreCard from './components/SectionScoreCard';\nimport TestScoreCard from './components/TestScoreCard';\nimport EssayScoresCard from './components/EssayScoresCard';\nimport CrossTestScoresCard from './components/CrossTestScoresCard';\nimport SubScoresCard from './components/SubscoresCard';\nimport { makeSelectActiveTestScores, makeSelectActiveStudent } from '../index/selectors';\nimport { setActiveTestScores } from '../index/actions';\nimport { fetchStudentTestScoreApi } from '../index/api';\n\nclass DetailTestScorePage extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount = () => {\n    this.props.onRef(this);\n  };\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  delay = () => {\n    const { scores, test: { student_test_id }, onGetTestScores, activeStudent: { id } } = this.props;\n    return new Promise(async resolve => {\n      if (!scores) {\n        const postBody = { studentId: id, student_test_id };\n        onGetTestScores(postBody);\n      }\n      console.log('resolved!')\n      resolve();\n    });\n  };\n\n  getComponentImages = () =>\n    new Promise(resolve => {\n      this.delay().then(() => {\n        setTimeout(async () => {\n          console.log(\"5000!\")\n          const { getTargetImage } = this.props;\n          const [scoresImages] = await Promise.all([\n            getTargetImage(document.getElementById('scoresRef')),\n          ]);\n          resolve(scoresImages);\n        }, 10000);\n      });\n    });\n\n  loadingSpinner = () => (\n    <div className=\"overlay-spinning\">\n      <h1>Fetching Scores...</h1>\n      <div className=\"spinning\" />\n    </div>\n  )\n\n  render() {\n    const { scores, test } = this.props;\n    if (!scores) {\n      return this.loadingSpinner();\n    }\n    if (scores.student_test_id !== test.student_test_id) {\n      return this.loadingSpinner();\n    }\n    const { subjects, cross_test_score, sub_section_score, essay } = scores;\n    return (\n      <div className=\"container\" id=\"scoresRef\">\n        <div className=\"cards-section\">\n          <div className=\"d-flex-content same-height justify-center row mb-0\">\n            <TotalScoreCard subjectScores={subjects} />\n            {/* <SectionScoreCard sectionScores={sub_section_score} /> */}\n          </div>\n          <div className=\"d-flex-content same-height justify-center row mb-0\">\n            <TestScoreCard subjectScores={subjects} />\n            <EssayScoresCard essayScores={essay} />\n          </div>\n          <div className=\"d-flex-content justify-center row mb-0\">\n            <CrossTestScoresCard crossTestScores={cross_test_score} />\n            <SubScoresCard subScores={sub_section_score} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nDetailTestScorePage.propTypes = {\n  getTargetImage: PropTypes.func.isRequired,\n  test: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  scores: makeSelectActiveTestScores(),\n  activeStudent: makeSelectActiveStudent(),\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetScores: scores => dispatch(setActiveTestScores(scores)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(DetailTestScorePage);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AAPA;AAWA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAtBA;AAuBA;AAEA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AAGA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAZA;AACA;AAxBA;AAqCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAtCA;AAEA;AACA;;;AAIA;AACA;AACA;;;AAmCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAxEA;AACA;AA0EA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAEA;;;;A","sourceRoot":""}