{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport StatusPage from \"../components/Classes/StatusPage\";\nimport ListPage from \"../components/Classes/ListPage\";\nimport Moment from 'moment';\nimport sampleClass from \"../components/Classes/utils/sampleClass\";\nimport createNewClassRoomApi from '../components/Classes/index/api';\n\nclass Classes extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onHandleClassCard\", index => {\n      const {\n        classes\n      } = this.state;\n      this.setState({\n        selectedClass: classes[index]\n      });\n    });\n\n    _defineProperty(this, \"onAddNewClass\", newClass => {\n      const {\n        classes: prevClassState\n      } = this.state;\n      const formattedNewClass = {\n        summary: {\n          amount_students: 10,\n          start_date: \"6/1/19\",\n          end_date: \"8/5/19\",\n          improvement: 123,\n          coursework_assigned: 60,\n          coursework_completed: 90,\n          problems_flagged_review: 40,\n          average_score: 1256,\n          achieved_target_score: 85,\n          average_practice_tests_completed: 1.8,\n          instruction: 14\n        },\n        accountInfo: {\n          lastName: 'Admin',\n          firstName: 'Company',\n          email: 'test2@example.com',\n          gender: 'M'\n        },\n        contactInfo: {\n          phone: '1234567890',\n          streetAddress: '1234 Test Road',\n          city: 'Austin',\n          state: 'TX',\n          zip: '78751'\n        },\n        classInfo: newClass.classInfo,\n        location: newClass.location,\n        instructor: newClass.instructor\n      };\n      const updatedClasses = update(prevClassState, {\n        $push: [formattedNewClass]\n      });\n      this.setState({\n        classes: updatedClasses\n      });\n      this.onCreateNewClassApi(newClass);\n    });\n\n    _defineProperty(this, \"onCloneClass\", index => {\n      const {\n        classes\n      } = this.state;\n      this.setState(prevState => {\n        prevState.classes.push(classes[index]);\n        return {\n          classes: prevState.classes\n        };\n      });\n    });\n\n    _defineProperty(this, \"arrayItemRemover\", (array, value) => array.filter(classroom => classroom !== value));\n\n    _defineProperty(this, \"onDeleteClass\", index => {\n      const {\n        classes\n      } = this.state;\n      const newClassesArray = this.arrayItemRemover(classes, classes[index]);\n      this.setState({\n        classes: newClassesArray\n      });\n    });\n\n    _defineProperty(this, \"onCreateNewClassApi\", async classroom => {\n      const newId = this.state.classes.length + 1;\n      const {\n        classInfo: {\n          className\n        },\n        accountInfo: {\n          start_date,\n          end_date,\n          isExclude\n        },\n        location: {\n          locations\n        },\n        instructor: {\n          instructors\n        }\n      } = classroom;\n      const formattedClassRoom = {\n        id: newId,\n        name: className,\n        start_date: Moment(start_date).format('YYYY-MM-DD'),\n        end_date: Moment(end_date).format('YYYY-MM-DD'),\n        duration: \"string\",\n        exclude_from_statistics: isExclude,\n        locations,\n        instructors,\n        students: \"\"\n      };\n      await createNewClassRoomApi(formattedClassRoom);\n    });\n\n    _defineProperty(this, \"onSaveClassChanges\", updatedClasRoom => {\n      const {\n        classes: originalClasses\n      } = this.state;\n      const classToUpdate = originalClasses.filter(classroom => classroom.id === updatedClasRoom.id)[0];\n      const updatedClassIndex = originalClasses.indexOf(classToUpdate);\n      const classes = update(originalClasses, {\n        $splice: [[updatedClassIndex, 1, updatedClasRoom]]\n      }); // saveChangesSuccess();\n\n      this.setState({\n        classes\n      });\n    });\n\n    this.state = {\n      selectedClass: null,\n      classes: sampleClass\n    };\n  }\n\n  render() {\n    const {\n      selectedClass\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(\"main\", {\n      id: \"main\",\n      role: \"main\"\n    }, __jsx(\"div\", {\n      className: \"main-holder grey lighten-5 switcher-section\"\n    }, !selectedClass && __jsx(ListPage, {\n      classes: this.state.classes,\n      onHandleClassCard: this.onHandleClassCard,\n      onCloneClass: this.onCloneClass,\n      onDeleteClass: this.onDeleteClass,\n      onSaveNewClass: this.onAddNewClass,\n      onSaveClassChanges: this.onSaveClassChanges\n    }), selectedClass && __jsx(StatusPage, null))));\n  }\n\n}\n\nexport default Classes;","map":null,"metadata":{},"sourceType":"module"}