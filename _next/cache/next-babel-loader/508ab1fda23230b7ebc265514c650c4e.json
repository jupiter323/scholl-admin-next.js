{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { fromJS } from 'immutable';\nimport moment from 'moment';\nimport { SET_STUDENTS, SET_STUDENTS_CALENDAR_ASSIGN_LESSONS_MODAL_OPEN, SET_STUDENTS_CALENDAR_ASSIGN_WORKSHEETS_MODAL_OPEN, SET_STUDENTS_CALENDAR_CALENDAR_ROWS, SET_IS_VISIBLE_TOP_BAR, SET_ACTIVE_TEST_SCORES, SET_ESSAY_SCORE, SET_STUDENT_COMPLETED_TESTS, SET_STUDENT_OVERDUE_TESTS, SET_STUDENT_ASSIGNED_TESTS, SET_STUDENT_TESTS, SET_STUDENT_SECTIONS, SET_ACTIVE_STUDENT_TEST_ID, FETCH_LESSON_LIST, FETCH_LESSON_LIST_SUCCESS, FETCH_LESSON_LIST_FAIL, FETCH_STUDENT_LESSSON_LIST_SUCCESS, FETCH_STUDENT_LESSONL_LIST_FAIL, CHECKED_LESSON, SELECT_ALL_LESSONS, UNSELECT_ALL_LESSONS, ADD_CHECKED_LESSON, REMOVE_CHECKED_LESSON, SET_UNIT_FILTER_OPTIONS, SET_ACTIVE_STUDENT_TOKEN, MERGE_STUDENT_LESSON_LISTS, ADD_ALL_LESSONS, REMOVE_ALL_LESSONS, SET_ACTIVE_LESSON, SET_OPEN_ACTIVE_PAGE, RESET_STUDENT_LESSONS_SUCCESS, UNASSIGN_STUDENT_LESSON_SUCCESS, RESCHEDULE_STUDENT_LESSONS_SUCCESS, FETCH_SUBJECTS_SUCCESS, SET_OPEN_ANSWERSHEET_STATUS, SET_TESTS, SET_EXCUSE_STUDENT_LATENESS, SET_ACTIVE_STUDENT, SET_STUDENT_TEST_SECTION_PROBLEMS, REMOVE_TEST, ASSIGN_NEW_TEST, ADD_NEW_TEST_TO_STUDENT_TESTS, UPDATE_STUDENT_TEST_ANSWER, UPDATE_TEST_STATUS_SUCCESS, REMOVE_TEST_FROM_PREV_LIST, ADD_TEST_TO_COMPLETED, REMOVE_TEST_FROM_LIST, UPDATE_FLAG_STATUS_SUCCESS, FETCH_STUDENT_TESTS_SUCCESSFUL, SEND_ERROR_MESSAGE, RESET_ERROR_MESSAGE } from \"./constants\";\nconst initialState = fromJS({\n  students: [],\n  assignLessonsModalOpen: false,\n  assignWorkSheetsModalOpen: false,\n  calendarRows: [],\n  isVisibleTopBar: true,\n  activeTestScores: null,\n  overdueStudentTests: [],\n  assignedStudentTests: [],\n  completedStudentTests: [],\n  sections: [],\n  activeStudentTestId: '',\n  lessonList: [],\n  studentLessonList: [],\n  unassignedLessonList: [],\n  isLoading: false,\n  error: null,\n  unitFilterOptions: [],\n  activeStudentToken: '',\n  checkedLessons: [],\n  activeLesson: null,\n  openAnswerSheet: false,\n  subjects: {},\n  activeShowPage: '',\n  tests: [],\n  activeStudent: null,\n  testSectionProblems: [],\n  studentTests: [],\n  studentTestsFetchedStatus: false,\n  errorMessages: {\n    testFlagMessage: \"\",\n    answerTestProblemMessage: \"\",\n    fetchSectionsMessage: \"\",\n    fetchProblemsMessage: \"\",\n    fetchScoresMsg: \"\",\n    updateTestStatusMsg: \"\",\n    fetchingStudentTestsMessage: ''\n  }\n});\n\nfunction studentReducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_STUDENTS:\n      return state.set('students', action.students);\n\n    case SET_STUDENTS_CALENDAR_ASSIGN_LESSONS_MODAL_OPEN:\n      return state.set('assignLessonsModalOpen', action.value);\n\n    case SET_STUDENTS_CALENDAR_ASSIGN_WORKSHEETS_MODAL_OPEN:\n      return state.set('assignWorkSheetsModalOpen', action.value);\n\n    case SET_STUDENTS_CALENDAR_CALENDAR_ROWS:\n      return state.set('calendarRows', action.rows);\n\n    case SET_IS_VISIBLE_TOP_BAR:\n      return state.set('isVisibleTopBar', action.value);\n\n    case SET_ACTIVE_TEST_SCORES:\n      return state.set('activeTestScores', action.scores);\n\n    case SET_ESSAY_SCORE:\n      return state.set('activeTestScores', _objectSpread({}, state.get('activeTestScores'), {\n        essay: action.score\n      }));\n\n    case SET_STUDENT_COMPLETED_TESTS:\n      return state.set('completedStudentTests', action.tests);\n\n    case SET_STUDENT_OVERDUE_TESTS:\n      return state.set('overdueStudentTests', action.tests);\n\n    case SET_STUDENT_ASSIGNED_TESTS:\n      return state.set('assignedStudentTests', action.tests);\n\n    case SET_STUDENT_TESTS:\n      return state.set('studentTests', action.tests);\n\n    case SET_STUDENT_SECTIONS:\n      return state.set('sections', action.sections);\n\n    case SET_ACTIVE_STUDENT_TEST_ID:\n      return state.set('activeStudentTestId', action.studentTestId);\n\n    case FETCH_LESSON_LIST:\n      return state.set('isLoading', true);\n\n    case FETCH_LESSON_LIST_SUCCESS:\n      return state.set('unassignedLessonList', action.payload);\n\n    case FETCH_STUDENT_LESSSON_LIST_SUCCESS:\n      return state.set('studentLessonList', action.payload);\n\n    case SET_UNIT_FILTER_OPTIONS:\n      return state.set('unitFilterOptions', action.options);\n\n    case SET_ACTIVE_STUDENT_TOKEN:\n      return state.set('activeStudentToken', action.token);\n\n    case CHECKED_LESSON:\n      return state.set('lessonList', state.get('lessonList').map(lesson => {\n        if (lesson.id !== action.id) {\n          return lesson;\n        }\n\n        return _objectSpread({}, lesson, {\n          selected: !lesson.selected\n        });\n      }));\n\n    case SELECT_ALL_LESSONS:\n      return state.set('lessonList', state.get('lessonList').map(lesson => {\n        if (action.mappedLessons.includes(lesson.id)) {\n          return _objectSpread({}, lesson, {\n            selected: true\n          });\n        }\n\n        return lesson;\n      }));\n\n    case UNSELECT_ALL_LESSONS:\n      return state.set('lessonList', state.get('lessonList').map(lesson => _objectSpread({}, lesson, {\n        selected: false\n      })));\n\n    case ADD_ALL_LESSONS:\n      // Adds each lesson to the list of \"checkedLessons\"\n      return state.set('checkedLessons', action.mappedLessons.map(lesson => {\n        if (lesson.lesson_id) {\n          return lesson.lesson_id;\n        }\n\n        return lesson.id;\n      }));\n\n    case REMOVE_ALL_LESSONS:\n      return state.set('checkedLessons', []);\n\n    case ADD_CHECKED_LESSON:\n      return state.set('checkedLessons', [...state.get('checkedLessons'), action.lessonId]);\n\n    case REMOVE_CHECKED_LESSON:\n      return state.set('checkedLessons', state.get('checkedLessons').filter(lesson => lesson !== action.lessonId));\n\n    case MERGE_STUDENT_LESSON_LISTS:\n      // const getStudentLessonList = (studentLessonList) => studentLessonList.map(lesson => {\n      //   if (lesson.problems && lesson.problems.length > 0) {\n      //     lesson = { ...lesson, type: 'drill', selected: false };\n      //   } else if (lesson.sections) {\n      //     lesson = { ...lesson, type: 'module', selected: false };\n      //   } else if (lesson.problems && lesson.problems.length <= 0) {\n      //     lesson = { ...lesson, type: 'reading', selected: false };\n      //   }\n      //   return lesson;\n      // });\n      return state.set('lessonList', [...state.get('studentLessonList'), ...state.get('unassignedLessonList')]);\n\n    case SET_ACTIVE_LESSON:\n      return state.set('activeLesson', action.activeLesson);\n\n    case SET_OPEN_ANSWERSHEET_STATUS:\n      return state.set('openAnswerSheet', action.value);\n\n    case SET_OPEN_ACTIVE_PAGE:\n      return state.set('activeShowPage', action.value);\n\n    case RESCHEDULE_STUDENT_LESSONS_SUCCESS:\n      return state.set('lessonList', state.get('lessonList').map(lesson => {\n        const {\n          payload: {\n            due_date,\n            assignment_date\n          }\n        } = action;\n        let updatedLesson = {};\n        action.payload.student_lesson_ids.forEach(setLessons => {\n          if (setLessons === lesson.id) {\n            return updatedLesson = _objectSpread({}, lesson, {\n              assignment_date,\n              due_date\n            });\n          }\n\n          if (!updatedLesson.id) return updatedLesson = lesson;\n        });\n        return updatedLesson;\n      }));\n\n    case UNASSIGN_STUDENT_LESSON_SUCCESS:\n      return state.set('lessonList', state.get('lessonList').filter(lesson => !action.payload.includes(lesson.id)));\n\n    case RESET_STUDENT_LESSONS_SUCCESS:\n      return state.set('lessonList', state.get('lessonList').map(lesson => {\n        let updatedLesson = {};\n        action.payload.forEach(sentLessonId => {\n          if (sentLessonId === lesson.id) {\n            let status = 'ASSIGNED';\n            if (moment().isAfter(lesson.due_date)) status = 'OVERDUE';\n            return updatedLesson = _objectSpread({}, lesson, {\n              status,\n              challenge_completed_at: null,\n              practice_completed_at: null,\n              completed_at: null,\n              scoring: {}\n            });\n          }\n\n          if (!updatedLesson.id) return updatedLesson = lesson;\n        });\n        return updatedLesson;\n      }));\n\n    case FETCH_SUBJECTS_SUCCESS:\n      return state.set('subjects', action.payload);\n\n    case SET_TESTS:\n      return state.set('tests', action.tests);\n\n    case SET_EXCUSE_STUDENT_LATENESS:\n      return state.set('lessonList', state.get('lessonList').map(lesson => {\n        if (action.payload.student_lesson_id === lesson.id) {\n          return _objectSpread({}, lesson, {\n            lateness_excused: action.payload.was_excused\n          });\n        }\n\n        return lesson;\n      }));\n\n    case SET_ACTIVE_STUDENT:\n      return state.set('activeStudent', action.student);\n\n    case SET_STUDENT_TEST_SECTION_PROBLEMS:\n      return state.set('testSectionProblems', action.problems);\n\n    case REMOVE_TEST:\n      return state.set(action.testType, state.get(action.testType).filter(test => test.student_test_id !== action.studentTestId));\n\n    case REMOVE_TEST_FROM_LIST:\n      return state.set('studentTests', state.get('studentTests').filter(test => test.student_test_id !== action.studentTestId));\n\n    case ASSIGN_NEW_TEST:\n      return state.set('assignedStudentTests', [...state.get('assignedStudentTests'), action.newTest]);\n\n    case ADD_NEW_TEST_TO_STUDENT_TESTS:\n      return state.set('studentTests', [...state.get('studentTests'), action.newTest]);\n\n    case UPDATE_STUDENT_TEST_ANSWER:\n      return state.set('sections', state.get('sections').map(section => {\n        if (section.test_section_id === action.sectionId) {\n          section.problems.problems.map(problem => {\n            if (problem.id === action.payload.test_problem_id) {\n              problem.student_answer = action.payload.answer;\n              return problem;\n            }\n          });\n        }\n\n        return section;\n      }));\n\n    case UPDATE_TEST_STATUS_SUCCESS:\n      return state.set('studentTests', state.get('studentTests').map(test => {\n        if (test.student_test_id === action.payload.student_test_id) {\n          return _objectSpread({}, test, {\n            status: action.payload.status\n          });\n        }\n\n        return test;\n      }));\n\n    case REMOVE_TEST_FROM_PREV_LIST:\n      return state.set(action.testList, state.get(action.testList).filter(test => test.student_test_id !== action.payload.student_test_id));\n\n    case ADD_TEST_TO_COMPLETED:\n      // Grabs the test info from original test list and adds a completion date & status\n      return state.set('completedStudentTests', [...state.get('completedStudentTests'), _objectSpread({}, state.get(action.testList).filter(test => test.student_test_id === action.payload.student_test_id)[0], {\n        completion_date: _Date$now(),\n        status: action.payload.status\n      })]);\n\n    case FETCH_STUDENT_TESTS_SUCCESSFUL:\n      return state.set('studentTestsFetchedStatus', action.status);\n\n    case UPDATE_FLAG_STATUS_SUCCESS:\n      const newSections = state.get('sections').map(section => {\n        if (section.test_section_id === action.sectionId) {\n          const updatedProblems = section.problems.problems.map(problem => {\n            if (problem.id === action.question.id) {\n              return action.question;\n            }\n\n            return problem;\n          });\n\n          const updatedSection = _objectSpread({}, section, {\n            problems: _objectSpread({}, section.problems, {\n              problems: updatedProblems\n            })\n          });\n\n          return updatedSection;\n        }\n\n        return section;\n      });\n      return state.set('sections', newSections);\n\n    case SEND_ERROR_MESSAGE:\n      const updatedErrorMessages = _objectSpread({}, state.get('errorMessages'), {\n        [action.propertyName]: action.message\n      });\n\n      return state.set('errorMessages', updatedErrorMessages);\n\n    case RESET_ERROR_MESSAGE:\n      const resetErrorMessages = _objectSpread({}, state.get('errorMessages'), {\n        [action.propertyName]: \"\"\n      });\n\n      return state.set('errorMessages', resetErrorMessages);\n\n    default:\n      return state;\n  }\n}\n\nexport default studentReducer;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/index/reducers.js"],"names":["fromJS","moment","SET_STUDENTS","SET_STUDENTS_CALENDAR_ASSIGN_LESSONS_MODAL_OPEN","SET_STUDENTS_CALENDAR_ASSIGN_WORKSHEETS_MODAL_OPEN","SET_STUDENTS_CALENDAR_CALENDAR_ROWS","SET_IS_VISIBLE_TOP_BAR","SET_ACTIVE_TEST_SCORES","SET_ESSAY_SCORE","SET_STUDENT_COMPLETED_TESTS","SET_STUDENT_OVERDUE_TESTS","SET_STUDENT_ASSIGNED_TESTS","SET_STUDENT_TESTS","SET_STUDENT_SECTIONS","SET_ACTIVE_STUDENT_TEST_ID","FETCH_LESSON_LIST","FETCH_LESSON_LIST_SUCCESS","FETCH_LESSON_LIST_FAIL","FETCH_STUDENT_LESSSON_LIST_SUCCESS","FETCH_STUDENT_LESSONL_LIST_FAIL","CHECKED_LESSON","SELECT_ALL_LESSONS","UNSELECT_ALL_LESSONS","ADD_CHECKED_LESSON","REMOVE_CHECKED_LESSON","SET_UNIT_FILTER_OPTIONS","SET_ACTIVE_STUDENT_TOKEN","MERGE_STUDENT_LESSON_LISTS","ADD_ALL_LESSONS","REMOVE_ALL_LESSONS","SET_ACTIVE_LESSON","SET_OPEN_ACTIVE_PAGE","RESET_STUDENT_LESSONS_SUCCESS","UNASSIGN_STUDENT_LESSON_SUCCESS","RESCHEDULE_STUDENT_LESSONS_SUCCESS","FETCH_SUBJECTS_SUCCESS","SET_OPEN_ANSWERSHEET_STATUS","SET_TESTS","SET_EXCUSE_STUDENT_LATENESS","SET_ACTIVE_STUDENT","SET_STUDENT_TEST_SECTION_PROBLEMS","REMOVE_TEST","ASSIGN_NEW_TEST","ADD_NEW_TEST_TO_STUDENT_TESTS","UPDATE_STUDENT_TEST_ANSWER","UPDATE_TEST_STATUS_SUCCESS","REMOVE_TEST_FROM_PREV_LIST","ADD_TEST_TO_COMPLETED","REMOVE_TEST_FROM_LIST","UPDATE_FLAG_STATUS_SUCCESS","FETCH_STUDENT_TESTS_SUCCESSFUL","SEND_ERROR_MESSAGE","RESET_ERROR_MESSAGE","initialState","students","assignLessonsModalOpen","assignWorkSheetsModalOpen","calendarRows","isVisibleTopBar","activeTestScores","overdueStudentTests","assignedStudentTests","completedStudentTests","sections","activeStudentTestId","lessonList","studentLessonList","unassignedLessonList","isLoading","error","unitFilterOptions","activeStudentToken","checkedLessons","activeLesson","openAnswerSheet","subjects","activeShowPage","tests","activeStudent","testSectionProblems","studentTests","studentTestsFetchedStatus","errorMessages","testFlagMessage","answerTestProblemMessage","fetchSectionsMessage","fetchProblemsMessage","fetchScoresMsg","updateTestStatusMsg","fetchingStudentTestsMessage","studentReducer","state","action","type","set","value","rows","scores","get","essay","score","studentTestId","payload","options","token","map","lesson","id","selected","mappedLessons","includes","lesson_id","lessonId","filter","due_date","assignment_date","updatedLesson","student_lesson_ids","forEach","setLessons","sentLessonId","status","isAfter","challenge_completed_at","practice_completed_at","completed_at","scoring","student_lesson_id","lateness_excused","was_excused","student","problems","testType","test","student_test_id","newTest","section","test_section_id","sectionId","problem","test_problem_id","student_answer","answer","testList","completion_date","newSections","updatedProblems","question","updatedSection","updatedErrorMessages","propertyName","message","resetErrorMessages"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SACEC,YADF,EAEEC,+CAFF,EAGEC,kDAHF,EAIEC,mCAJF,EAKEC,sBALF,EAMEC,sBANF,EAOEC,eAPF,EAQEC,2BARF,EASEC,yBATF,EAUEC,0BAVF,EAWEC,iBAXF,EAYEC,oBAZF,EAaEC,0BAbF,EAcEC,iBAdF,EAeEC,yBAfF,EAgBEC,sBAhBF,EAiBEC,kCAjBF,EAkBEC,+BAlBF,EAmBEC,cAnBF,EAoBEC,kBApBF,EAqBEC,oBArBF,EAsBEC,kBAtBF,EAuBEC,qBAvBF,EAwBEC,uBAxBF,EAyBEC,wBAzBF,EA0BEC,0BA1BF,EA2BEC,eA3BF,EA4BEC,kBA5BF,EA6BEC,iBA7BF,EA8BEC,oBA9BF,EA+BEC,6BA/BF,EAgCEC,+BAhCF,EAiCEC,kCAjCF,EAkCEC,sBAlCF,EAmCEC,2BAnCF,EAoCEC,SApCF,EAqCEC,2BArCF,EAsCEC,kBAtCF,EAuCEC,iCAvCF,EAwCEC,WAxCF,EAyCEC,eAzCF,EA0CEC,6BA1CF,EA2CEC,0BA3CF,EA4CEC,0BA5CF,EA6CEC,0BA7CF,EA8CEC,qBA9CF,EA+CEC,qBA/CF,EAgDEC,0BAhDF,EAiDEC,8BAjDF,EAkDEC,kBAlDF,EAmDEC,mBAnDF,QAoDO,aApDP;AAsDA,MAAMC,YAAY,GAAGrD,MAAM,CAAC;AAC1BsD,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,sBAAsB,EAAE,KAFE;AAG1BC,EAAAA,yBAAyB,EAAE,KAHD;AAI1BC,EAAAA,YAAY,EAAE,EAJY;AAK1BC,EAAAA,eAAe,EAAE,IALS;AAM1BC,EAAAA,gBAAgB,EAAE,IANQ;AAO1BC,EAAAA,mBAAmB,EAAE,EAPK;AAQ1BC,EAAAA,oBAAoB,EAAE,EARI;AAS1BC,EAAAA,qBAAqB,EAAE,EATG;AAU1BC,EAAAA,QAAQ,EAAE,EAVgB;AAW1BC,EAAAA,mBAAmB,EAAE,EAXK;AAY1BC,EAAAA,UAAU,EAAE,EAZc;AAa1BC,EAAAA,iBAAiB,EAAE,EAbO;AAc1BC,EAAAA,oBAAoB,EAAE,EAdI;AAe1BC,EAAAA,SAAS,EAAE,KAfe;AAgB1BC,EAAAA,KAAK,EAAE,IAhBmB;AAiB1BC,EAAAA,iBAAiB,EAAE,EAjBO;AAkB1BC,EAAAA,kBAAkB,EAAE,EAlBM;AAmB1BC,EAAAA,cAAc,EAAE,EAnBU;AAoB1BC,EAAAA,YAAY,EAAE,IApBY;AAqB1BC,EAAAA,eAAe,EAAE,KArBS;AAsB1BC,EAAAA,QAAQ,EAAE,EAtBgB;AAuB1BC,EAAAA,cAAc,EAAE,EAvBU;AAwB1BC,EAAAA,KAAK,EAAE,EAxBmB;AAyB1BC,EAAAA,aAAa,EAAE,IAzBW;AA0B1BC,EAAAA,mBAAmB,EAAE,EA1BK;AA2B1BC,EAAAA,YAAY,EAAE,EA3BY;AA4B1BC,EAAAA,yBAAyB,EAAE,KA5BD;AA6B1BC,EAAAA,aAAa,EAAE;AACbC,IAAAA,eAAe,EAAE,EADJ;AAEbC,IAAAA,wBAAwB,EAAE,EAFb;AAGbC,IAAAA,oBAAoB,EAAE,EAHT;AAIbC,IAAAA,oBAAoB,EAAE,EAJT;AAKbC,IAAAA,cAAc,EAAE,EALH;AAMbC,IAAAA,mBAAmB,EAAE,EANR;AAObC,IAAAA,2BAA2B,EAAE;AAPhB;AA7BW,CAAD,CAA3B;;AAwCA,SAASC,cAAT,CAAwBC,KAAK,GAAGtC,YAAhC,EAA8CuC,MAA9C,EAAsD;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK3F,YAAL;AACE,aAAOyF,KAAK,CAACG,GAAN,CAAU,UAAV,EAAsBF,MAAM,CAACtC,QAA7B,CAAP;;AACF,SAAKnD,+CAAL;AACE,aAAOwF,KAAK,CAACG,GAAN,CAAU,wBAAV,EAAoCF,MAAM,CAACG,KAA3C,CAAP;;AACF,SAAK3F,kDAAL;AACE,aAAOuF,KAAK,CAACG,GAAN,CAAU,2BAAV,EAAuCF,MAAM,CAACG,KAA9C,CAAP;;AACF,SAAK1F,mCAAL;AACE,aAAOsF,KAAK,CAACG,GAAN,CAAU,cAAV,EAA0BF,MAAM,CAACI,IAAjC,CAAP;;AACF,SAAK1F,sBAAL;AACE,aAAOqF,KAAK,CAACG,GAAN,CAAU,iBAAV,EAA6BF,MAAM,CAACG,KAApC,CAAP;;AACF,SAAKxF,sBAAL;AACE,aAAOoF,KAAK,CAACG,GAAN,CAAU,kBAAV,EAA8BF,MAAM,CAACK,MAArC,CAAP;;AACF,SAAKzF,eAAL;AACE,aAAOmF,KAAK,CAACG,GAAN,CAAU,kBAAV,oBAAmCH,KAAK,CAACO,GAAN,CAAU,kBAAV,CAAnC;AAAkEC,QAAAA,KAAK,EAAEP,MAAM,CAACQ;AAAhF,SAAP;;AACF,SAAK3F,2BAAL;AACE,aAAOkF,KAAK,CAACG,GAAN,CAAU,uBAAV,EAAmCF,MAAM,CAACf,KAA1C,CAAP;;AACF,SAAKnE,yBAAL;AACE,aAAOiF,KAAK,CAACG,GAAN,CAAU,qBAAV,EAAiCF,MAAM,CAACf,KAAxC,CAAP;;AACF,SAAKlE,0BAAL;AACE,aAAOgF,KAAK,CAACG,GAAN,CAAU,sBAAV,EAAkCF,MAAM,CAACf,KAAzC,CAAP;;AACF,SAAKjE,iBAAL;AACE,aAAO+E,KAAK,CAACG,GAAN,CAAU,cAAV,EAA0BF,MAAM,CAACf,KAAjC,CAAP;;AACF,SAAKhE,oBAAL;AACE,aAAO8E,KAAK,CAACG,GAAN,CAAU,UAAV,EAAsBF,MAAM,CAAC7B,QAA7B,CAAP;;AACF,SAAKjD,0BAAL;AACE,aAAO6E,KAAK,CAACG,GAAN,CAAU,qBAAV,EAAiCF,MAAM,CAACS,aAAxC,CAAP;;AACF,SAAKtF,iBAAL;AACE,aAAO4E,KAAK,CAACG,GAAN,CAAU,WAAV,EAAuB,IAAvB,CAAP;;AAEF,SAAK9E,yBAAL;AACE,aAAO2E,KAAK,CAACG,GAAN,CAAU,sBAAV,EAAkCF,MAAM,CAACU,OAAzC,CAAP;;AAEF,SAAKpF,kCAAL;AACE,aAAOyE,KAAK,CAACG,GAAN,CAAU,mBAAV,EAA+BF,MAAM,CAACU,OAAtC,CAAP;;AACF,SAAK7E,uBAAL;AACE,aAAOkE,KAAK,CAACG,GAAN,CAAU,mBAAV,EAA+BF,MAAM,CAACW,OAAtC,CAAP;;AACF,SAAK7E,wBAAL;AACE,aAAOiE,KAAK,CAACG,GAAN,CAAU,oBAAV,EAAgCF,MAAM,CAACY,KAAvC,CAAP;;AAEF,SAAKpF,cAAL;AACE,aAAOuE,KAAK,CAACG,GAAN,CACL,YADK,EAELH,KAAK,CAACO,GAAN,CAAU,YAAV,EAAwBO,GAAxB,CAA4BC,MAAM,IAAI;AACpC,YAAIA,MAAM,CAACC,EAAP,KAAcf,MAAM,CAACe,EAAzB,EAA6B;AAC3B,iBAAOD,MAAP;AACD;;AACD,iCACKA,MADL;AAEEE,UAAAA,QAAQ,EAAE,CAACF,MAAM,CAACE;AAFpB;AAID,OARD,CAFK,CAAP;;AAaF,SAAKvF,kBAAL;AACE,aAAOsE,KAAK,CAACG,GAAN,CACL,YADK,EAELH,KAAK,CAACO,GAAN,CAAU,YAAV,EAAwBO,GAAxB,CAA4BC,MAAM,IAAI;AACpC,YAAId,MAAM,CAACiB,aAAP,CAAqBC,QAArB,CAA8BJ,MAAM,CAACC,EAArC,CAAJ,EAA8C;AAC5C,mCAAYD,MAAZ;AAAoBE,YAAAA,QAAQ,EAAE;AAA9B;AACD;;AACD,eAAOF,MAAP;AACD,OALD,CAFK,CAAP;;AAUF,SAAKpF,oBAAL;AACE,aAAOqE,KAAK,CAACG,GAAN,CACL,YADK,EAELH,KAAK,CAACO,GAAN,CAAU,YAAV,EAAwBO,GAAxB,CAA4BC,MAAM,sBAC7BA,MAD6B;AAEhCE,QAAAA,QAAQ,EAAE;AAFsB,QAAlC,CAFK,CAAP;;AAQF,SAAKhF,eAAL;AACE;AACA,aAAO+D,KAAK,CAACG,GAAN,CACL,gBADK,EAELF,MAAM,CAACiB,aAAP,CAAqBJ,GAArB,CAAyBC,MAAM,IAAI;AACjC,YAAIA,MAAM,CAACK,SAAX,EAAsB;AACpB,iBAAOL,MAAM,CAACK,SAAd;AACD;;AACD,eAAOL,MAAM,CAACC,EAAd;AACD,OALD,CAFK,CAAP;;AAUF,SAAK9E,kBAAL;AACE,aAAO8D,KAAK,CAACG,GAAN,CAAU,gBAAV,EAA4B,EAA5B,CAAP;;AAEF,SAAKvE,kBAAL;AACE,aAAOoE,KAAK,CAACG,GAAN,CAAU,gBAAV,EAA4B,CAAC,GAAGH,KAAK,CAACO,GAAN,CAAU,gBAAV,CAAJ,EAAiCN,MAAM,CAACoB,QAAxC,CAA5B,CAAP;;AAEF,SAAKxF,qBAAL;AACE,aAAOmE,KAAK,CAACG,GAAN,CACL,gBADK,EAELH,KAAK,CAACO,GAAN,CAAU,gBAAV,EAA4Be,MAA5B,CAAmCP,MAAM,IAAIA,MAAM,KAAKd,MAAM,CAACoB,QAA/D,CAFK,CAAP;;AAKF,SAAKrF,0BAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAOgE,KAAK,CAACG,GAAN,CAAU,YAAV,EAAwB,CAC7B,GAAGH,KAAK,CAACO,GAAN,CAAU,mBAAV,CAD0B,EAE7B,GAAGP,KAAK,CAACO,GAAN,CAAU,sBAAV,CAF0B,CAAxB,CAAP;;AAKF,SAAKpE,iBAAL;AACE,aAAO6D,KAAK,CAACG,GAAN,CAAU,cAAV,EAA0BF,MAAM,CAACnB,YAAjC,CAAP;;AAEF,SAAKrC,2BAAL;AACE,aAAOuD,KAAK,CAACG,GAAN,CAAU,iBAAV,EAA6BF,MAAM,CAACG,KAApC,CAAP;;AAEF,SAAKhE,oBAAL;AACE,aAAO4D,KAAK,CAACG,GAAN,CAAU,gBAAV,EAA4BF,MAAM,CAACG,KAAnC,CAAP;;AAEF,SAAK7D,kCAAL;AACE,aAAOyD,KAAK,CAACG,GAAN,CACL,YADK,EAELH,KAAK,CAACO,GAAN,CAAU,YAAV,EAAwBO,GAAxB,CAA4BC,MAAM,IAAI;AACpC,cAAM;AAAEJ,UAAAA,OAAO,EAAE;AAAEY,YAAAA,QAAF;AAAYC,YAAAA;AAAZ;AAAX,YAA6CvB,MAAnD;AACA,YAAIwB,aAAa,GAAG,EAApB;AACAxB,QAAAA,MAAM,CAACU,OAAP,CAAee,kBAAf,CAAkCC,OAAlC,CAA0CC,UAAU,IAAI;AACtD,cAAIA,UAAU,KAAKb,MAAM,CAACC,EAA1B,EAA8B;AAC5B,mBAAQS,aAAa,qBAChBV,MADgB;AAEnBS,cAAAA,eAFmB;AAGnBD,cAAAA;AAHmB,cAArB;AAKD;;AACD,cAAI,CAACE,aAAa,CAACT,EAAnB,EAAuB,OAAQS,aAAa,GAAGV,MAAxB;AACxB,SATD;AAUA,eAAOU,aAAP;AACD,OAdD,CAFK,CAAP;;AAmBF,SAAKnF,+BAAL;AACE,aAAO0D,KAAK,CAACG,GAAN,CACL,YADK,EAELH,KAAK,CAACO,GAAN,CAAU,YAAV,EAAwBe,MAAxB,CAA+BP,MAAM,IAAI,CAACd,MAAM,CAACU,OAAP,CAAeQ,QAAf,CAAwBJ,MAAM,CAACC,EAA/B,CAA1C,CAFK,CAAP;;AAKF,SAAK3E,6BAAL;AACE,aAAO2D,KAAK,CAACG,GAAN,CACL,YADK,EAELH,KAAK,CAACO,GAAN,CAAU,YAAV,EAAwBO,GAAxB,CAA4BC,MAAM,IAAI;AACpC,YAAIU,aAAa,GAAG,EAApB;AACAxB,QAAAA,MAAM,CAACU,OAAP,CAAegB,OAAf,CAAuBE,YAAY,IAAI;AACrC,cAAIA,YAAY,KAAKd,MAAM,CAACC,EAA5B,EAAgC;AAC9B,gBAAIc,MAAM,GAAG,UAAb;AACA,gBAAIxH,MAAM,GAAGyH,OAAT,CAAiBhB,MAAM,CAACQ,QAAxB,CAAJ,EAAuCO,MAAM,GAAG,SAAT;AACvC,mBAAQL,aAAa,qBAChBV,MADgB;AAEnBe,cAAAA,MAFmB;AAGnBE,cAAAA,sBAAsB,EAAE,IAHL;AAInBC,cAAAA,qBAAqB,EAAE,IAJJ;AAKnBC,cAAAA,YAAY,EAAE,IALK;AAMnBC,cAAAA,OAAO,EAAE;AANU,cAArB;AAQD;;AACD,cAAI,CAACV,aAAa,CAACT,EAAnB,EAAuB,OAAQS,aAAa,GAAGV,MAAxB;AACxB,SAdD;AAeA,eAAOU,aAAP;AACD,OAlBD,CAFK,CAAP;;AAuBF,SAAKjF,sBAAL;AACE,aAAOwD,KAAK,CAACG,GAAN,CAAU,UAAV,EAAsBF,MAAM,CAACU,OAA7B,CAAP;;AAEF,SAAKjE,SAAL;AACE,aAAOsD,KAAK,CAACG,GAAN,CAAU,OAAV,EAAmBF,MAAM,CAACf,KAA1B,CAAP;;AACF,SAAKvC,2BAAL;AACE,aAAOqD,KAAK,CAACG,GAAN,CACL,YADK,EAELH,KAAK,CAACO,GAAN,CAAU,YAAV,EAAwBO,GAAxB,CAA4BC,MAAM,IAAI;AACpC,YAAId,MAAM,CAACU,OAAP,CAAeyB,iBAAf,KAAqCrB,MAAM,CAACC,EAAhD,EAAoD;AAAE,mCAAYD,MAAZ;AAAoBsB,YAAAA,gBAAgB,EAAEpC,MAAM,CAACU,OAAP,CAAe2B;AAArD;AAAqE;;AAC3H,eAAOvB,MAAP;AACD,OAHD,CAFK,CAAP;;AAQF,SAAKnE,kBAAL;AACE,aAAOoD,KAAK,CAACG,GAAN,CAAU,eAAV,EAA2BF,MAAM,CAACsC,OAAlC,CAAP;;AAEF,SAAK1F,iCAAL;AACE,aAAOmD,KAAK,CAACG,GAAN,CAAU,qBAAV,EAAiCF,MAAM,CAACuC,QAAxC,CAAP;;AAEF,SAAK1F,WAAL;AACE,aAAOkD,KAAK,CAACG,GAAN,CACLF,MAAM,CAACwC,QADF,EAELzC,KAAK,CAACO,GAAN,CAAUN,MAAM,CAACwC,QAAjB,EAA2BnB,MAA3B,CAAkCoB,IAAI,IAAIA,IAAI,CAACC,eAAL,KAAyB1C,MAAM,CAACS,aAA1E,CAFK,CAAP;;AAKF,SAAKrD,qBAAL;AACE,aAAO2C,KAAK,CAACG,GAAN,CACL,cADK,EAELH,KAAK,CAACO,GAAN,CAAU,cAAV,EAA0Be,MAA1B,CAAiCoB,IAAI,IAAIA,IAAI,CAACC,eAAL,KAAyB1C,MAAM,CAACS,aAAzE,CAFK,CAAP;;AAKF,SAAK3D,eAAL;AACE,aAAOiD,KAAK,CAACG,GAAN,CAAU,sBAAV,EAAkC,CACvC,GAAGH,KAAK,CAACO,GAAN,CAAU,sBAAV,CADoC,EAEvCN,MAAM,CAAC2C,OAFgC,CAAlC,CAAP;;AAKF,SAAK5F,6BAAL;AACE,aAAOgD,KAAK,CAACG,GAAN,CAAU,cAAV,EAA0B,CAAC,GAAGH,KAAK,CAACO,GAAN,CAAU,cAAV,CAAJ,EAA+BN,MAAM,CAAC2C,OAAtC,CAA1B,CAAP;;AAEF,SAAK3F,0BAAL;AACE,aAAO+C,KAAK,CAACG,GAAN,CACL,UADK,EAELH,KAAK,CAACO,GAAN,CAAU,UAAV,EAAsBO,GAAtB,CAA0B+B,OAAO,IAAI;AACnC,YAAIA,OAAO,CAACC,eAAR,KAA4B7C,MAAM,CAAC8C,SAAvC,EAAkD;AAChDF,UAAAA,OAAO,CAACL,QAAR,CAAiBA,QAAjB,CAA0B1B,GAA1B,CAA8BkC,OAAO,IAAI;AACvC,gBAAIA,OAAO,CAAChC,EAAR,KAAef,MAAM,CAACU,OAAP,CAAesC,eAAlC,EAAmD;AACjDD,cAAAA,OAAO,CAACE,cAAR,GAAyBjD,MAAM,CAACU,OAAP,CAAewC,MAAxC;AACA,qBAAOH,OAAP;AACD;AACF,WALD;AAMD;;AACD,eAAOH,OAAP;AACD,OAVD,CAFK,CAAP;;AAeF,SAAK3F,0BAAL;AACE,aAAO8C,KAAK,CAACG,GAAN,CACL,cADK,EAELH,KAAK,CAACO,GAAN,CAAU,cAAV,EAA0BO,GAA1B,CAA8B4B,IAAI,IAAI;AACpC,YAAIA,IAAI,CAACC,eAAL,KAAyB1C,MAAM,CAACU,OAAP,CAAegC,eAA5C,EAA6D;AAC3D,mCAAYD,IAAZ;AAAkBZ,YAAAA,MAAM,EAAE7B,MAAM,CAACU,OAAP,CAAemB;AAAzC;AACD;;AACD,eAAOY,IAAP;AACD,OALD,CAFK,CAAP;;AAUF,SAAKvF,0BAAL;AACE,aAAO6C,KAAK,CAACG,GAAN,CACLF,MAAM,CAACmD,QADF,EAELpD,KAAK,CACFO,GADH,CACON,MAAM,CAACmD,QADd,EAEG9B,MAFH,CAEUoB,IAAI,IAAIA,IAAI,CAACC,eAAL,KAAyB1C,MAAM,CAACU,OAAP,CAAegC,eAF1D,CAFK,CAAP;;AAOF,SAAKvF,qBAAL;AACE;AACA,aAAO4C,KAAK,CAACG,GAAN,CAAU,uBAAV,EAAmC,CACxC,GAAGH,KAAK,CAACO,GAAN,CAAU,uBAAV,CADqC,oBAGnCP,KAAK,CACLO,GADA,CACIN,MAAM,CAACmD,QADX,EAEA9B,MAFA,CAEOoB,IAAI,IAAIA,IAAI,CAACC,eAAL,KAAyB1C,MAAM,CAACU,OAAP,CAAegC,eAFvD,EAEwE,CAFxE,CAHmC;AAMtCU,QAAAA,eAAe,EAAE,WANqB;AAOtCvB,QAAAA,MAAM,EAAE7B,MAAM,CAACU,OAAP,CAAemB;AAPe,SAAnC,CAAP;;AAWF,SAAKvE,8BAAL;AACE,aAAOyC,KAAK,CAACG,GAAN,CAAU,2BAAV,EAAuCF,MAAM,CAAC6B,MAA9C,CAAP;;AAEF,SAAKxE,0BAAL;AACE,YAAMgG,WAAW,GAAGtD,KAAK,CAACO,GAAN,CAAU,UAAV,EAAsBO,GAAtB,CAA0B+B,OAAO,IAAI;AACvD,YAAIA,OAAO,CAACC,eAAR,KAA4B7C,MAAM,CAAC8C,SAAvC,EAAkD;AAChD,gBAAMQ,eAAe,GAAGV,OAAO,CAACL,QAAR,CAAiBA,QAAjB,CAA0B1B,GAA1B,CAA8BkC,OAAO,IAAI;AAC/D,gBAAIA,OAAO,CAAChC,EAAR,KAAef,MAAM,CAACuD,QAAP,CAAgBxC,EAAnC,EAAuC;AACrC,qBAAOf,MAAM,CAACuD,QAAd;AACD;;AACD,mBAAOR,OAAP;AACD,WALuB,CAAxB;;AAMA,gBAAMS,cAAc,qBAAQZ,OAAR;AAAiBL,YAAAA,QAAQ,oBAAOK,OAAO,CAACL,QAAf;AAAyBA,cAAAA,QAAQ,EAAEe;AAAnC;AAAzB,YAApB;;AACA,iBAAOE,cAAP;AACD;;AACD,eAAOZ,OAAP;AACD,OAZmB,CAApB;AAaA,aAAO7C,KAAK,CAACG,GAAN,CAAU,UAAV,EAAsBmD,WAAtB,CAAP;;AAEF,SAAK9F,kBAAL;AACE,YAAMkG,oBAAoB,qBAAQ1D,KAAK,CAACO,GAAN,CAAU,eAAV,CAAR;AAAoC,SAACN,MAAM,CAAC0D,YAAR,GAAuB1D,MAAM,CAAC2D;AAAlE,QAA1B;;AACA,aAAO5D,KAAK,CAACG,GAAN,CAAU,eAAV,EAA2BuD,oBAA3B,CAAP;;AAEF,SAAKjG,mBAAL;AACE,YAAMoG,kBAAkB,qBAAQ7D,KAAK,CAACO,GAAN,CAAU,eAAV,CAAR;AAAoC,SAACN,MAAM,CAAC0D,YAAR,GAAuB;AAA3D,QAAxB;;AACA,aAAO3D,KAAK,CAACG,GAAN,CAAU,eAAV,EAA2B0D,kBAA3B,CAAP;;AAEF;AACE,aAAO7D,KAAP;AAlSJ;AAoSD;;AAED,eAAeD,cAAf","sourcesContent":["import { fromJS } from 'immutable';\nimport moment from 'moment';\nimport {\n  SET_STUDENTS,\n  SET_STUDENTS_CALENDAR_ASSIGN_LESSONS_MODAL_OPEN,\n  SET_STUDENTS_CALENDAR_ASSIGN_WORKSHEETS_MODAL_OPEN,\n  SET_STUDENTS_CALENDAR_CALENDAR_ROWS,\n  SET_IS_VISIBLE_TOP_BAR,\n  SET_ACTIVE_TEST_SCORES,\n  SET_ESSAY_SCORE,\n  SET_STUDENT_COMPLETED_TESTS,\n  SET_STUDENT_OVERDUE_TESTS,\n  SET_STUDENT_ASSIGNED_TESTS,\n  SET_STUDENT_TESTS,\n  SET_STUDENT_SECTIONS,\n  SET_ACTIVE_STUDENT_TEST_ID,\n  FETCH_LESSON_LIST,\n  FETCH_LESSON_LIST_SUCCESS,\n  FETCH_LESSON_LIST_FAIL,\n  FETCH_STUDENT_LESSSON_LIST_SUCCESS,\n  FETCH_STUDENT_LESSONL_LIST_FAIL,\n  CHECKED_LESSON,\n  SELECT_ALL_LESSONS,\n  UNSELECT_ALL_LESSONS,\n  ADD_CHECKED_LESSON,\n  REMOVE_CHECKED_LESSON,\n  SET_UNIT_FILTER_OPTIONS,\n  SET_ACTIVE_STUDENT_TOKEN,\n  MERGE_STUDENT_LESSON_LISTS,\n  ADD_ALL_LESSONS,\n  REMOVE_ALL_LESSONS,\n  SET_ACTIVE_LESSON,\n  SET_OPEN_ACTIVE_PAGE,\n  RESET_STUDENT_LESSONS_SUCCESS,\n  UNASSIGN_STUDENT_LESSON_SUCCESS,\n  RESCHEDULE_STUDENT_LESSONS_SUCCESS,\n  FETCH_SUBJECTS_SUCCESS,\n  SET_OPEN_ANSWERSHEET_STATUS,\n  SET_TESTS,\n  SET_EXCUSE_STUDENT_LATENESS,\n  SET_ACTIVE_STUDENT,\n  SET_STUDENT_TEST_SECTION_PROBLEMS,\n  REMOVE_TEST,\n  ASSIGN_NEW_TEST,\n  ADD_NEW_TEST_TO_STUDENT_TESTS,\n  UPDATE_STUDENT_TEST_ANSWER,\n  UPDATE_TEST_STATUS_SUCCESS,\n  REMOVE_TEST_FROM_PREV_LIST,\n  ADD_TEST_TO_COMPLETED,\n  REMOVE_TEST_FROM_LIST,\n  UPDATE_FLAG_STATUS_SUCCESS,\n  FETCH_STUDENT_TESTS_SUCCESSFUL,\n  SEND_ERROR_MESSAGE,\n  RESET_ERROR_MESSAGE,\n} from \"./constants\";\n\nconst initialState = fromJS({\n  students: [],\n  assignLessonsModalOpen: false,\n  assignWorkSheetsModalOpen: false,\n  calendarRows: [],\n  isVisibleTopBar: true,\n  activeTestScores: null,\n  overdueStudentTests: [],\n  assignedStudentTests: [],\n  completedStudentTests: [],\n  sections: [],\n  activeStudentTestId: '',\n  lessonList: [],\n  studentLessonList: [],\n  unassignedLessonList: [],\n  isLoading: false,\n  error: null,\n  unitFilterOptions: [],\n  activeStudentToken: '',\n  checkedLessons: [],\n  activeLesson: null,\n  openAnswerSheet: false,\n  subjects: {},\n  activeShowPage: '',\n  tests: [],\n  activeStudent: null,\n  testSectionProblems: [],\n  studentTests: [],\n  studentTestsFetchedStatus: false,\n  errorMessages: {\n    testFlagMessage: \"\",\n    answerTestProblemMessage: \"\",\n    fetchSectionsMessage: \"\",\n    fetchProblemsMessage: \"\",\n    fetchScoresMsg: \"\",\n    updateTestStatusMsg: \"\",\n    fetchingStudentTestsMessage: '',\n  },\n});\n\nfunction studentReducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_STUDENTS:\n      return state.set('students', action.students);\n    case SET_STUDENTS_CALENDAR_ASSIGN_LESSONS_MODAL_OPEN:\n      return state.set('assignLessonsModalOpen', action.value);\n    case SET_STUDENTS_CALENDAR_ASSIGN_WORKSHEETS_MODAL_OPEN:\n      return state.set('assignWorkSheetsModalOpen', action.value);\n    case SET_STUDENTS_CALENDAR_CALENDAR_ROWS:\n      return state.set('calendarRows', action.rows);\n    case SET_IS_VISIBLE_TOP_BAR:\n      return state.set('isVisibleTopBar', action.value);\n    case SET_ACTIVE_TEST_SCORES:\n      return state.set('activeTestScores', action.scores);\n    case SET_ESSAY_SCORE:\n      return state.set('activeTestScores', { ...state.get('activeTestScores'), essay: action.score });\n    case SET_STUDENT_COMPLETED_TESTS:\n      return state.set('completedStudentTests', action.tests);\n    case SET_STUDENT_OVERDUE_TESTS:\n      return state.set('overdueStudentTests', action.tests);\n    case SET_STUDENT_ASSIGNED_TESTS:\n      return state.set('assignedStudentTests', action.tests);\n    case SET_STUDENT_TESTS:\n      return state.set('studentTests', action.tests);\n    case SET_STUDENT_SECTIONS:\n      return state.set('sections', action.sections);\n    case SET_ACTIVE_STUDENT_TEST_ID:\n      return state.set('activeStudentTestId', action.studentTestId);\n    case FETCH_LESSON_LIST:\n      return state.set('isLoading', true);\n\n    case FETCH_LESSON_LIST_SUCCESS:\n      return state.set('unassignedLessonList', action.payload);\n\n    case FETCH_STUDENT_LESSSON_LIST_SUCCESS:\n      return state.set('studentLessonList', action.payload);\n    case SET_UNIT_FILTER_OPTIONS:\n      return state.set('unitFilterOptions', action.options);\n    case SET_ACTIVE_STUDENT_TOKEN:\n      return state.set('activeStudentToken', action.token);\n\n    case CHECKED_LESSON:\n      return state.set(\n        'lessonList',\n        state.get('lessonList').map(lesson => {\n          if (lesson.id !== action.id) {\n            return lesson;\n          }\n          return {\n            ...lesson,\n            selected: !lesson.selected,\n          };\n        }),\n      );\n\n    case SELECT_ALL_LESSONS:\n      return state.set(\n        'lessonList',\n        state.get('lessonList').map(lesson => {\n          if (action.mappedLessons.includes(lesson.id)) {\n            return { ...lesson, selected: true };\n          }\n          return lesson;\n        }),\n      );\n\n    case UNSELECT_ALL_LESSONS:\n      return state.set(\n        'lessonList',\n        state.get('lessonList').map(lesson => ({\n          ...lesson,\n          selected: false,\n        })),\n      );\n\n    case ADD_ALL_LESSONS:\n      // Adds each lesson to the list of \"checkedLessons\"\n      return state.set(\n        'checkedLessons',\n        action.mappedLessons.map(lesson => {\n          if (lesson.lesson_id) {\n            return lesson.lesson_id;\n          }\n          return lesson.id;\n        }),\n      );\n\n    case REMOVE_ALL_LESSONS:\n      return state.set('checkedLessons', []);\n\n    case ADD_CHECKED_LESSON:\n      return state.set('checkedLessons', [...state.get('checkedLessons'), action.lessonId]);\n\n    case REMOVE_CHECKED_LESSON:\n      return state.set(\n        'checkedLessons',\n        state.get('checkedLessons').filter(lesson => lesson !== action.lessonId),\n      );\n\n    case MERGE_STUDENT_LESSON_LISTS:\n      // const getStudentLessonList = (studentLessonList) => studentLessonList.map(lesson => {\n      //   if (lesson.problems && lesson.problems.length > 0) {\n      //     lesson = { ...lesson, type: 'drill', selected: false };\n      //   } else if (lesson.sections) {\n      //     lesson = { ...lesson, type: 'module', selected: false };\n      //   } else if (lesson.problems && lesson.problems.length <= 0) {\n      //     lesson = { ...lesson, type: 'reading', selected: false };\n      //   }\n      //   return lesson;\n      // });\n      return state.set('lessonList', [\n        ...state.get('studentLessonList'),\n        ...state.get('unassignedLessonList'),\n      ]);\n\n    case SET_ACTIVE_LESSON:\n      return state.set('activeLesson', action.activeLesson);\n\n    case SET_OPEN_ANSWERSHEET_STATUS:\n      return state.set('openAnswerSheet', action.value);\n\n    case SET_OPEN_ACTIVE_PAGE:\n      return state.set('activeShowPage', action.value);\n\n    case RESCHEDULE_STUDENT_LESSONS_SUCCESS:\n      return state.set(\n        'lessonList',\n        state.get('lessonList').map(lesson => {\n          const { payload: { due_date, assignment_date } } = action;\n          let updatedLesson = {};\n          action.payload.student_lesson_ids.forEach(setLessons => {\n            if (setLessons === lesson.id) {\n              return (updatedLesson = {\n                ...lesson,\n                assignment_date,\n                due_date,\n              });\n            }\n            if (!updatedLesson.id) return (updatedLesson = lesson);\n          });\n          return updatedLesson;\n        }),\n      );\n\n    case UNASSIGN_STUDENT_LESSON_SUCCESS:\n      return state.set(\n        'lessonList',\n        state.get('lessonList').filter(lesson => !action.payload.includes(lesson.id)),\n      );\n\n    case RESET_STUDENT_LESSONS_SUCCESS:\n      return state.set(\n        'lessonList',\n        state.get('lessonList').map(lesson => {\n          let updatedLesson = {};\n          action.payload.forEach(sentLessonId => {\n            if (sentLessonId === lesson.id) {\n              let status = 'ASSIGNED';\n              if (moment().isAfter(lesson.due_date)) status = 'OVERDUE';\n              return (updatedLesson = {\n                ...lesson,\n                status,\n                challenge_completed_at: null,\n                practice_completed_at: null,\n                completed_at: null,\n                scoring: {},\n              });\n            }\n            if (!updatedLesson.id) return (updatedLesson = lesson);\n          });\n          return updatedLesson;\n        }),\n      );\n\n    case FETCH_SUBJECTS_SUCCESS:\n      return state.set('subjects', action.payload);\n\n    case SET_TESTS:\n      return state.set('tests', action.tests);\n    case SET_EXCUSE_STUDENT_LATENESS:\n      return state.set(\n        'lessonList',\n        state.get('lessonList').map(lesson => {\n          if (action.payload.student_lesson_id === lesson.id) { return { ...lesson, lateness_excused: action.payload.was_excused }; }\n          return lesson;\n        }),\n      );\n\n    case SET_ACTIVE_STUDENT:\n      return state.set('activeStudent', action.student);\n\n    case SET_STUDENT_TEST_SECTION_PROBLEMS:\n      return state.set('testSectionProblems', action.problems);\n\n    case REMOVE_TEST:\n      return state.set(\n        action.testType,\n        state.get(action.testType).filter(test => test.student_test_id !== action.studentTestId),\n      );\n\n    case REMOVE_TEST_FROM_LIST:\n      return state.set(\n        'studentTests',\n        state.get('studentTests').filter(test => test.student_test_id !== action.studentTestId),\n      );\n\n    case ASSIGN_NEW_TEST:\n      return state.set('assignedStudentTests', [\n        ...state.get('assignedStudentTests'),\n        action.newTest,\n      ]);\n\n    case ADD_NEW_TEST_TO_STUDENT_TESTS:\n      return state.set('studentTests', [...state.get('studentTests'), action.newTest]);\n\n    case UPDATE_STUDENT_TEST_ANSWER:\n      return state.set(\n        'sections',\n        state.get('sections').map(section => {\n          if (section.test_section_id === action.sectionId) {\n            section.problems.problems.map(problem => {\n              if (problem.id === action.payload.test_problem_id) {\n                problem.student_answer = action.payload.answer;\n                return problem;\n              }\n            });\n          }\n          return section;\n        }),\n      );\n\n    case UPDATE_TEST_STATUS_SUCCESS:\n      return state.set(\n        'studentTests',\n        state.get('studentTests').map(test => {\n          if (test.student_test_id === action.payload.student_test_id) {\n            return { ...test, status: action.payload.status };\n          }\n          return test;\n        }),\n      );\n\n    case REMOVE_TEST_FROM_PREV_LIST:\n      return state.set(\n        action.testList,\n        state\n          .get(action.testList)\n          .filter(test => test.student_test_id !== action.payload.student_test_id),\n      );\n\n    case ADD_TEST_TO_COMPLETED:\n      // Grabs the test info from original test list and adds a completion date & status\n      return state.set('completedStudentTests', [\n        ...state.get('completedStudentTests'),\n        {\n          ...state\n            .get(action.testList)\n            .filter(test => test.student_test_id === action.payload.student_test_id)[0],\n          completion_date: Date.now(),\n          status: action.payload.status,\n        },\n      ]);\n\n    case FETCH_STUDENT_TESTS_SUCCESSFUL:\n      return state.set('studentTestsFetchedStatus', action.status);\n\n    case UPDATE_FLAG_STATUS_SUCCESS:\n      const newSections = state.get('sections').map(section => {\n        if (section.test_section_id === action.sectionId) {\n          const updatedProblems = section.problems.problems.map(problem => {\n            if (problem.id === action.question.id) {\n              return action.question;\n            }\n            return problem;\n          });\n          const updatedSection = { ...section, problems: { ...section.problems, problems: updatedProblems } };\n          return updatedSection;\n        }\n        return section;\n      });\n      return state.set('sections', newSections);\n\n    case SEND_ERROR_MESSAGE:\n      const updatedErrorMessages = { ...state.get('errorMessages'), [action.propertyName]: action.message };\n      return state.set('errorMessages', updatedErrorMessages);\n\n    case RESET_ERROR_MESSAGE:\n      const resetErrorMessages = { ...state.get('errorMessages'), [action.propertyName]: \"\" };\n      return state.set('errorMessages', resetErrorMessages);\n\n    default:\n      return state;\n  }\n}\n\nexport default studentReducer;\n"]},"metadata":{},"sourceType":"module"}