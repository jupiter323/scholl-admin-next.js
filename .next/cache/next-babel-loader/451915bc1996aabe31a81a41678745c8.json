{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSXStyle from \"styled-jsx/style\";\n\n/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport Portal from '../../../Portal';\nimport ClickOffComponentWrapper from '../../../ClickOffComponentWrapper';\nimport Dropdown from '../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../utils/getValueFromState';\nimport InstructorToggleCard from './components/InstructorToggleCard';\nimport sampleInstructors from '../../../utils/sampleInstructors';\nconst locationOptions = [{\n  label: 'Any',\n  value: 'all'\n}, {\n  label: 'Location 2',\n  value: 'location2'\n}, {\n  label: 'Location 3',\n  value: 'location3'\n}];\n\nclass InstructorModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onCloseModal\", () => this.setState({\n      selectedInstructors: []\n    }, this.props.onClose));\n\n    _defineProperty(this, \"onToggleInstructorSelect\", instructor => {\n      const {\n        selectedInstructors\n      } = this.state;\n\n      if (selectedInstructors.indexOf(instructor) === -1) {\n        this.setState({\n          selectedInstructors: [...selectedInstructors, instructor]\n        });\n      } else {\n        const updatedInstructors = update(selectedInstructors, {\n          $splice: [[selectedInstructors.indexOf(instructor), 1]]\n        });\n        this.setState({\n          selectedInstructors: updatedInstructors\n        });\n      }\n    });\n\n    _defineProperty(this, \"onSetLocation\", location => this.setState({\n      location\n    }));\n\n    _defineProperty(this, \"onSaveInstructorChanges\", () => {\n      const {\n        selectedInstructors\n      } = this.state;\n      const {\n        handleInstructorsChange\n      } = this.props;\n      handleInstructorsChange(selectedInstructors);\n      this.onCloseModal();\n    });\n\n    _defineProperty(this, \"handleSearchChange\", ({\n      target: {\n        value: searchTerm\n      }\n    }) => this.setState({\n      searchTerm\n    }));\n\n    _defineProperty(this, \"renderInstructors\", () => {\n      const {\n        location,\n        instructors: allInstructors,\n        searchTerm\n      } = this.state;\n      let instructors;\n\n      if (searchTerm) {\n        instructors = allInstructors.reduce((finalArr, currentInstructor) => {\n          const instructorName = `${currentInstructor.firstName}${currentInstructor.lastName}`.toLowerCase();\n\n          if (instructorName.indexOf(searchTerm) !== -1) {\n            finalArr.push(currentInstructor);\n          }\n\n          return finalArr;\n        }, []);\n      } else if (location === 'all') {\n        instructors = allInstructors;\n      } else {\n        instructors = allInstructors.filter(instructor => instructor.location === location);\n      }\n\n      return instructors.map(instructor => React.createElement(InstructorToggleCard, {\n        key: instructor.email,\n        instructor: instructor,\n        onToggleInstructorSelect: this.onToggleInstructorSelect\n      }));\n    });\n\n    this.state = {\n      open: false,\n      instructors: sampleInstructors,\n      location: 'all',\n      searchTerm: '',\n      selectedInstructors: []\n    };\n  }\n\n  render() {\n    const {\n      open\n    } = this.props;\n    const {\n      location,\n      searchTerm\n    } = this.state;\n    return React.createElement(Portal, {\n      selector: \"#modal\"\n    }, open && React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"overlay\"\n    }, React.createElement(ClickOffComponentWrapper, {\n      onOuterClick: this.onCloseModal\n    }, React.createElement(\"div\", {\n      id: \"modal_Instructor1\",\n      className: \"jsx-2013376804\" + \" \" + \"modal modal-custom modal-location\"\n    }, React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"card-modal card\"\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#00456b',\n        color: '#fff'\n      },\n      className: \"jsx-2013376804\" + \" \" + \"owner-box card-panel card-panel-title\"\n    }, React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"card-panel-row row\"\n    }, React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"col\"\n    }, React.createElement(\"h3\", {\n      className: \"jsx-2013376804\"\n    }, \"Select Instructor(s)\")))), React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"card-content\"\n    }, React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"card-body\"\n    }, React.createElement(\"span\", {\n      className: \"jsx-2013376804\" + \" \" + \"hint\"\n    }, \"Click to select or deselect.\"), React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"row-holder\"\n    }, React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"search-field input-field\"\n    }, React.createElement(\"input\", {\n      type: \"search\",\n      id: \"name_search\",\n      name: \"nameSearch\",\n      value: searchTerm,\n      onChange: this.handleSearchChange,\n      className: \"jsx-2013376804\" + \" \" + \"input-control validate\"\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"jsx-2013376804\" + \" \" + \"search-button\"\n    }, React.createElement(\"i\", {\n      className: \"jsx-2013376804\" + \" \" + \"icon-search\"\n    })), React.createElement(\"label\", {\n      htmlFor: \"name_search\",\n      className: \"jsx-2013376804\" + \" \" + ((searchTerm.length ? 'label active' : 'label') || \"\")\n    }, \"Search\")), React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"input-field\"\n    }, React.createElement(Dropdown, {\n      value: getValueFromState(location, locationOptions),\n      onChange: this.onSetLocation,\n      options: locationOptions,\n      label: \"State\",\n      stateKey: \"state\",\n      dropdownKey: \"state\"\n    }))), React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"box-scrollable\"\n    }, React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"height-40 jcf-scrollable\"\n    }, React.createElement(\"div\", {\n      style: {\n        height: '100%',\n        overflowY: 'scroll'\n      },\n      className: \"jsx-2013376804\" + \" \" + \"card-location-holder\"\n    }, React.createElement(\"ul\", {\n      className: \"jsx-2013376804\" + \" \" + \"checkbox-list\"\n    }, this.renderInstructors()))))), React.createElement(\"div\", {\n      className: \"jsx-2013376804\" + \" \" + \"modal-footer\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.onCloseModal,\n      className: \"jsx-2013376804\" + \" \" + \"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\"\n    }, \"Cancel\"), React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.onSaveInstructorChanges,\n      className: \"jsx-2013376804\" + \" \" + \"btn\"\n    }, \"Add\"))))))), React.createElement(_JSXStyle, {\n      id: \"2013376804\"\n    }, [\".overlay.jsx-2013376804{position:fixed;background-color:rgba(0,0,0,0.7);top:0;right:0;bottom:0;left:0;z-index:999;}\", \".card-modal.jsx-2013376804{margin:0;border-radius:6px;}\", \"#modal_Location1.jsx-2013376804{border-radius:6px;}\", \".modal.jsx-2013376804{display:block;background-color:white;position:absolute;top:10%;right:10%;left:10%;box-shadow:0 24px 38px 3px rgba(0,0,0,0.14),0 9px 46px 8px rgba(0,0,0,0.12),0 11px 15px -7px rgba(0,0,0,0.2);}\", \".modal-custom.jsx-2013376804{opacity:1;visibility:visible;}\", \".modal-footer.jsx-2013376804{background-color:white;}\"]));\n  }\n\n}\n\nexport default InstructorModal;","map":null,"metadata":{},"sourceType":"module"}