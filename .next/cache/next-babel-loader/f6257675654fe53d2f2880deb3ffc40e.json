{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport { toast } from 'react-toastify';\nimport Toast from '../../Toast';\nimport StudentInformation from './components/StudentInformation';\nimport ContactInformation from './components/ContactInformation';\nimport EmailAddress from './components/EmailAddress';\nimport Location from './components/Location';\nimport Instructor from './components/Instructor';\nimport Class from './components/Class';\nimport AccountStatus from './components/AccountStatus';\nimport AccountType from './components/AccountType';\nimport CourseContext from './components/CourseContext';\nimport AccountSettings from './components/AccountSettings';\nimport Actions from './components/Actions';\nimport DeleteAccount from './components/DeleteAccount';\nimport ClassModal from '../ClassModal';\nimport LocationModal from '../../Location/components/LocationModal';\nimport InstructorModal from '../../Instructor/components/InstructorModal';\nimport { nestedEditFieldValidation } from '../../utils/fieldValidation';\n\nclass AccountPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      if (!this.state.originalUser || nextProps.user.id !== this.state.originalUser.id) {\n        const {\n          user: {\n            id,\n            studentInformation,\n            contactInformation,\n            emailAddress,\n            location,\n            instructor,\n            course,\n            courseContext,\n            accountSettings\n          } = {}\n        } = nextProps;\n        const updatedUser = {\n          id,\n          studentInformation,\n          contactInformation,\n          emailAddress,\n          location,\n          instructor,\n          course,\n          courseContext,\n          accountSettings\n        };\n        const {\n          originalUser: originalUserState\n        } = this.state;\n        const originalUser = update(originalUserState, {\n          $merge: nextProps.user\n        });\n        this.setState({\n          originalUser,\n          updatedUser\n        });\n      }\n    });\n\n    _defineProperty(this, \"onOpenLocationModal\", () => this.setState({\n      locationModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseLocationModal\", () => this.setState({\n      locationModalOpen: false\n    }));\n\n    _defineProperty(this, \"onOpenInstructorModal\", () => this.setState({\n      instructorModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseInstructorModal\", () => this.setState({\n      instructorModalOpen: false\n    }));\n\n    _defineProperty(this, \"onOpenClassModal\", () => this.setState({\n      classModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseClassModal\", () => this.setState({\n      classModalOpen: false\n    }));\n\n    _defineProperty(this, \"onSetValidation\", (validation, cb) => this.setState({\n      validation\n    }, cb));\n\n    _defineProperty(this, \"onSaveChanges\", async event => {\n      event.preventDefault(); // const { onSavePassageChanges, onSaveChangesError, onSetPassageValidation } = this.props;\n\n      const {\n        updatedUser\n      } = this.state;\n      const valid = await nestedEditFieldValidation(this.state, this.state.updatedUser, this.onSetValidation, validation => console.warn('validation', validation));\n\n      if (!valid) {\n        // return onSaveChangesError();\n        console.warn('not valid');\n      }\n\n      this.setState({\n        originalUser: this.state.updatedUser\n      }); // return onSavePassageChanges(updatedUser);\n    });\n\n    _defineProperty(this, \"onDeleteAccount\", () => {\n      console.warn('Stubbed out delete user');\n    });\n\n    _defineProperty(this, \"onSendWelcomeEmail\", event => {\n      event.preventDefault();\n      console.warn('Stubbed out send email');\n    });\n\n    _defineProperty(this, \"onSendPasswordResetEmail\", event => {\n      event.preventDefault();\n      console.warn('Stubbed out password reset email');\n    });\n\n    _defineProperty(this, \"onResetPassword\", event => {\n      event.preventDefault();\n      const {\n        actions: {\n          password,\n          confirmPassword\n        }\n      } = this.state;\n\n      if (password !== confirmPassword) {\n        console.warn('Toast is broken, have a console log'); // return this.notify\n      }\n\n      if (!confirmPassword.length) {\n        console.warn('Toast is broken, have a console log'); // return this.notify()\n      }\n\n      return console.warn('stubbed out password reset');\n    });\n\n    _defineProperty(this, \"onRemoveOption\", (optionIndex, section, array) => {\n      const updatedUser = update(this.state.updatedUser, {\n        [section]: {\n          [array]: {\n            $splice: [[optionIndex, 1]]\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    _defineProperty(this, \"initialUserMount\", () => this.state.originalUser.id !== this.props.user.id);\n\n    _defineProperty(this, \"handleActionsChange\", (event, name, checkBox = false) => {\n      const {\n        actions: previousActions\n      } = this.state;\n      let value;\n\n      if (checkBox) {\n        value = !previousActions.ccAdmin;\n      } else {\n        value = event.target.value;\n      }\n\n      const updatedState = update(this.state, {\n        actions: {\n          $merge: {\n            [name]: value\n          }\n        }\n      });\n      this.setState(updatedState);\n    });\n\n    _defineProperty(this, \"handleOptionsChange\", (selectedOptions, section, array) => {\n      const updatedUser = update(this.state.updatedUser, {\n        [section]: {\n          [array]: {\n            $set: selectedOptions\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    _defineProperty(this, \"handleDetailsChange\", (event, name, section, checkBox = false) => {\n      const {\n        updatedUser: previousUserState\n      } = this.state;\n      let value;\n\n      if (checkBox) {\n        value = !previousUserState[section][name];\n      } else {\n        value = event.target ? event.target.value : event;\n      }\n\n      const updatedUser = update(previousUserState, {\n        [section]: {\n          $merge: {\n            [name]: value\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    this.state = {\n      locationModalOpen: false,\n      instructorModalOpen: false,\n      classModalOpen: false,\n      originalUser: {\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        },\n        instructor: {\n          instructors: []\n        },\n        course: {\n          classes: []\n        },\n        courseContext: {\n          courseStartDateOption: '',\n          courseStartDate: '',\n          courseEndDateOption: '',\n          courseEndDate: '',\n          targetTestDate: '',\n          targetScore: '',\n          highSchool: '',\n          graduationYear: ''\n        },\n        accountSettings: {\n          loginBeforeActivation: false,\n          unstructuredCourseMode: false,\n          defaultSessionDuration: '',\n          videoSolutionsRequired: false,\n          preventLogin: false,\n          inactive: false,\n          excludeFromStatistics: false\n        }\n      },\n      updatedUser: {\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        },\n        instructor: {\n          instructors: []\n        },\n        course: {\n          classes: []\n        },\n        courseContext: {\n          courseStartDateOption: '',\n          courseStartDate: '',\n          courseEndDateOption: '',\n          courseEndDate: '',\n          targetTestDate: '',\n          targetScore: '',\n          highSchool: '',\n          graduationYear: ''\n        },\n        accountSettings: {\n          loginBeforeActivation: false,\n          unstructuredCourseMode: false,\n          defaultSessionDuration: '',\n          videoSolutionsRequired: false,\n          preventLogin: false,\n          inactive: false,\n          excludeFromStatistics: false\n        }\n      },\n      actions: {\n        ccAdmin: false,\n        requireUserToChange: false,\n        password: '',\n        confirmPassword: ''\n      },\n      validation: {\n        studentInformation: {\n          firstName: true,\n          lastName: true,\n          gender: true\n        },\n        emailAddress: {\n          email: true\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      user: {\n        id,\n        studentInformation,\n        contactInformation,\n        emailAddress,\n        location,\n        instructor,\n        course,\n        courseContext,\n        accountSettings\n      } = {}\n    } = this.props;\n    const updatedUser = {\n      id,\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n      instructor,\n      course,\n      courseContext,\n      accountSettings\n    };\n    const {\n      originalUser: originalUserState\n    } = this.state;\n    const originalUser = update(originalUserState, {\n      $merge: updatedUser\n    });\n    this.setState({\n      originalUser,\n      updatedUser\n    }); // eslint-disable-line\n  } // TODO: This seems to be working well - confirm that only one isntance of this edit modal is opening on the user edit page\n  // This resets the component state to reflect the details of the next user the user clicks on\n\n\n  render() {\n    const {\n      locationModalOpen,\n      instructorModalOpen,\n      classModalOpen,\n      actions,\n      updatedUser: {\n        studentInformation: updatedStudentInformation,\n        contactInformation: updatedContactInformation,\n        emailAddress: updatedEmailAddress,\n        location: updatedLocation,\n        instructor: updatedInstructor,\n        course: updatedClasses,\n        courseContext: updatedCourseContext,\n        accountSettings: updatedAccountSettings\n      }\n    } = this.state;\n    const {\n      user: {\n        studentInformation,\n        contactInformation,\n        emailAddress,\n        location,\n        instructor,\n        course,\n        courseContext,\n        accountSettings,\n        accountStatus,\n        accountType\n      } = {}\n    } = this.props;\n    return React.createElement(React.Fragment, null, React.createElement(Toast, null), React.createElement(ClassModal, {\n      open: classModalOpen,\n      onClose: this.onCloseClassModal,\n      handleClassChange: this.handleOptionsChange\n    }), React.createElement(LocationModal, {\n      open: locationModalOpen,\n      onClose: this.onCloseLocationModal,\n      handleLocationsChange: selectedLocations => this.handleOptionsChange(selectedLocations, 'location', 'locations')\n    }), React.createElement(InstructorModal, {\n      open: instructorModalOpen,\n      onClose: this.onCloseInstructorModal,\n      handleInstructorsChange: selectedInstructors => this.handleOptionsChange(selectedInstructors, 'instructor', 'instructors')\n    }), React.createElement(\"div\", {\n      className: \"content-section\"\n    }, React.createElement(\"div\", {\n      className: \"content-section-holder\"\n    }, React.createElement(\"div\", {\n      className: \"row mb-0 d-flex-content large\"\n    }, React.createElement(\"div\", {\n      className: \"col s12 l5\"\n    }, React.createElement(StudentInformation, {\n      state: this.initialUserMount() ? studentInformation : updatedStudentInformation,\n      handleDetailsChange: this.handleDetailsChange\n    }), React.createElement(ContactInformation, {\n      state: this.initialUserMount() ? contactInformation : updatedContactInformation,\n      handleDetailsChange: this.handleDetailsChange\n    }), React.createElement(EmailAddress, {\n      state: this.initialUserMount() ? emailAddress : updatedEmailAddress,\n      handleDetailsChange: this.handleDetailsChange\n    })), React.createElement(\"div\", {\n      className: \"col s12 l5\"\n    }, React.createElement(Location, {\n      state: this.initialUserMount() ? location : updatedLocation,\n      onOpenLocationModal: this.onOpenLocationModal,\n      onRemoveLocation: this.onRemoveOption\n    }), React.createElement(Instructor, {\n      state: this.initialUserMount() ? instructor : updatedInstructor,\n      onOpenInstructorModal: this.onOpenInstructorModal,\n      onRemoveInstructor: this.onRemoveOption\n    }), React.createElement(Class, {\n      state: this.initialUserMount() ? course : updatedClasses,\n      onOpenClassModal: this.onOpenClassModal,\n      onRemoveInstructor: this.onRemoveOption\n    }))), React.createElement(\"div\", {\n      className: \"row mb-0 d-flex-content large sameheight\"\n    }, React.createElement(AccountStatus, {\n      state: accountStatus\n    }), React.createElement(AccountType, {\n      state: accountType\n    })), React.createElement(CourseContext, {\n      state: this.initialUserMount() ? courseContext : updatedCourseContext,\n      handleDetailsChange: this.handleDetailsChange\n    }), React.createElement(AccountSettings, {\n      state: this.initialUserMount() ? accountSettings : updatedAccountSettings,\n      handleDetailsChange: this.handleDetailsChange\n    }), React.createElement(Actions, {\n      state: actions,\n      handleActionsChange: this.handleActionsChange,\n      onResetPassword: this.onResetPassword,\n      onSendWelcomeEmail: this.onSendWelcomeEmail,\n      onSendPasswordResetEmail: this.onSendPasswordResetEmail\n    }), React.createElement(DeleteAccount, {\n      activeButton: accountStatus.status !== 'Activated',\n      onDeleteAccount: this.onDeleteAccount\n    }), React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.onSaveChanges,\n      className: \"btn\"\n    }, \"Save\"))));\n  }\n\n}\n\nAccountPage.propTypes = {\n  user: PropTypes.object\n};\nexport default AccountPage;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/AccountPage/index.js"],"names":["React","PropTypes","update","toast","Toast","StudentInformation","ContactInformation","EmailAddress","Location","Instructor","Class","AccountStatus","AccountType","CourseContext","AccountSettings","Actions","DeleteAccount","ClassModal","LocationModal","InstructorModal","nestedEditFieldValidation","AccountPage","Component","constructor","props","nextProps","state","originalUser","user","id","studentInformation","contactInformation","emailAddress","location","instructor","course","courseContext","accountSettings","updatedUser","originalUserState","$merge","setState","locationModalOpen","instructorModalOpen","classModalOpen","validation","cb","event","preventDefault","valid","onSetValidation","console","warn","actions","password","confirmPassword","length","optionIndex","section","array","$splice","name","checkBox","previousActions","value","ccAdmin","target","updatedState","selectedOptions","$set","previousUserState","firstName","lastName","gender","phone","addressLine1","addressLine2","city","zipCode","email","locations","instructors","classes","courseStartDateOption","courseStartDate","courseEndDateOption","courseEndDate","targetTestDate","targetScore","highSchool","graduationYear","loginBeforeActivation","unstructuredCourseMode","defaultSessionDuration","videoSolutionsRequired","preventLogin","inactive","excludeFromStatistics","requireUserToChange","componentDidMount","render","updatedStudentInformation","updatedContactInformation","updatedEmailAddress","updatedLocation","updatedInstructor","updatedClasses","updatedCourseContext","updatedAccountSettings","accountStatus","accountType","onCloseClassModal","handleOptionsChange","onCloseLocationModal","selectedLocations","onCloseInstructorModal","selectedInstructors","initialUserMount","handleDetailsChange","onOpenLocationModal","onRemoveOption","onOpenInstructorModal","onOpenClassModal","handleActionsChange","onResetPassword","onSendWelcomeEmail","onSendPasswordResetEmail","status","onDeleteAccount","onSaveChanges","propTypes","object"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport { toast } from 'react-toastify';\n\nimport Toast from '../../Toast';\nimport StudentInformation from './components/StudentInformation';\nimport ContactInformation from './components/ContactInformation';\nimport EmailAddress from './components/EmailAddress';\nimport Location from './components/Location';\nimport Instructor from './components/Instructor';\nimport Class from './components/Class';\nimport AccountStatus from './components/AccountStatus';\nimport AccountType from './components/AccountType';\nimport CourseContext from './components/CourseContext';\nimport AccountSettings from './components/AccountSettings';\nimport Actions from './components/Actions';\nimport DeleteAccount from './components/DeleteAccount';\n\nimport ClassModal from '../ClassModal';\nimport LocationModal from '../../Location/components/LocationModal';\nimport InstructorModal from '../../Instructor/components/InstructorModal';\n\nimport { nestedEditFieldValidation } from '../../utils/fieldValidation';\n\nclass AccountPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locationModalOpen: false,\n      instructorModalOpen: false,\n      classModalOpen: false,\n      originalUser: {\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n        instructor: {\n          instructors: [],\n        },\n        course: {\n          classes: [],\n        },\n        courseContext: {\n          courseStartDateOption: '',\n          courseStartDate: '',\n          courseEndDateOption: '',\n          courseEndDate: '',\n          targetTestDate: '',\n          targetScore: '',\n          highSchool: '',\n          graduationYear: '',\n        },\n        accountSettings: {\n          loginBeforeActivation: false,\n          unstructuredCourseMode: false,\n          defaultSessionDuration: '',\n          videoSolutionsRequired: false,\n          preventLogin: false,\n          inactive: false,\n          excludeFromStatistics: false,\n        },\n      },\n      updatedUser: {\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n        instructor: {\n          instructors: [],\n        },\n        course: {\n          classes: [],\n        },\n        courseContext: {\n          courseStartDateOption: '',\n          courseStartDate: '',\n          courseEndDateOption: '',\n          courseEndDate: '',\n          targetTestDate: '',\n          targetScore: '',\n          highSchool: '',\n          graduationYear: '',\n        },\n        accountSettings: {\n          loginBeforeActivation: false,\n          unstructuredCourseMode: false,\n          defaultSessionDuration: '',\n          videoSolutionsRequired: false,\n          preventLogin: false,\n          inactive: false,\n          excludeFromStatistics: false,\n        },\n      },\n      actions: {\n        ccAdmin: false,\n        requireUserToChange: false,\n        password: '',\n        confirmPassword: '',\n      },\n      validation: {\n        studentInformation: {\n          firstName: true,\n          lastName: true,\n          gender: true,\n        },\n        emailAddress: {\n          email: true,\n        },\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { user: { id, studentInformation, contactInformation, emailAddress, location, instructor, course, courseContext, accountSettings } = {} } = this.props;\n    const updatedUser = { id, studentInformation, contactInformation, emailAddress, location, instructor, course, courseContext, accountSettings };\n    const { originalUser: originalUserState } = this.state;\n    const originalUser = update(originalUserState, {\n      $merge: updatedUser,\n    });\n    this.setState({ originalUser, updatedUser }); // eslint-disable-line\n  }\n\n  // TODO: This seems to be working well - confirm that only one isntance of this edit modal is opening on the user edit page\n  // This resets the component state to reflect the details of the next user the user clicks on\n  componentWillReceiveProps = (nextProps) => {\n    if ((!this.state.originalUser || nextProps.user.id !== this.state.originalUser.id)) {\n      const { user: { id, studentInformation, contactInformation, emailAddress, location, instructor, course, courseContext, accountSettings } = {} } = nextProps;\n      const updatedUser = { id, studentInformation, contactInformation, emailAddress, location, instructor, course, courseContext, accountSettings };\n      const { originalUser: originalUserState } = this.state;\n      const originalUser = update(originalUserState, {\n        $merge: nextProps.user,\n      });\n      this.setState({ originalUser, updatedUser });\n    }\n  }\n\n  onOpenLocationModal = () => this.setState({ locationModalOpen: true });\n  onCloseLocationModal = () => this.setState({ locationModalOpen: false });\n\n  onOpenInstructorModal = () => this.setState({ instructorModalOpen: true });\n  onCloseInstructorModal = () => this.setState({ instructorModalOpen: false });\n\n  onOpenClassModal = () => this.setState({ classModalOpen: true });\n  onCloseClassModal = () => this.setState({ classModalOpen: false });\n\n  // This function is passed into nestedCreateFieldValidation, it takes the result of the validation check and a callback function\n  // The updated component validation state is set and then the callback is dispatched - in this case, the callback handles the toast warning at the container level\n  onSetValidation = (validation, cb) => this.setState({ validation }, cb);\n\n  // TODO: Clean this up once the react toast bugs are fixed. Just logging the validation response for now\n  onSaveChanges = async (event) => {\n    event.preventDefault();\n    // const { onSavePassageChanges, onSaveChangesError, onSetPassageValidation } = this.props;\n    const { updatedUser } = this.state;\n    const valid = await nestedEditFieldValidation(this.state, this.state.updatedUser, this.onSetValidation, (validation) => console.warn('validation', validation));\n    if (!valid) {\n      // return onSaveChangesError();\n      console.warn('not valid');\n    }\n    this.setState({ originalUser: this.state.updatedUser });\n    // return onSavePassageChanges(updatedUser);\n  }\n\n  onDeleteAccount = () => {\n    console.warn('Stubbed out delete user');\n  }\n\n  onSendWelcomeEmail = (event) => {\n    event.preventDefault();\n    console.warn('Stubbed out send email');\n  }\n\n  onSendPasswordResetEmail = (event) => {\n    event.preventDefault();\n    console.warn('Stubbed out password reset email');\n  }\n\n  onResetPassword = (event) => {\n    event.preventDefault();\n    const { actions: { password, confirmPassword } } = this.state;\n    if (password !== confirmPassword) {\n      console.warn('Toast is broken, have a console log');\n      // return this.notify\n    }\n    if (!confirmPassword.length) {\n      console.warn('Toast is broken, have a console log');\n      // return this.notify()\n    }\n    return console.warn('stubbed out password reset');\n  }\n\n  onRemoveOption = (optionIndex, section, array) => {\n    const updatedUser = update(this.state.updatedUser, {\n      [section]: {\n        [array]: {\n          $splice: [[optionIndex, 1]],\n        },\n      },\n    });\n    this.setState({ updatedUser });\n  }\n\n  initialUserMount = () => this.state.originalUser.id !== this.props.user.id;\n\n  handleActionsChange = (event, name, checkBox = false) => {\n    const { actions: previousActions } = this.state;\n    let value;\n    if (checkBox) {\n      value = !previousActions.ccAdmin;\n    } else {\n      value = event.target.value;\n    }\n    const updatedState = update(this.state, {\n      actions: { $merge: { [name]: value } },\n    });\n    this.setState(updatedState);\n  }\n\n  handleOptionsChange = (selectedOptions, section, array) => {\n    const updatedUser = update(this.state.updatedUser, {\n      [section]: {\n        [array]: {\n          $set: selectedOptions,\n        },\n      },\n    });\n    this.setState({ updatedUser });\n  }\n\n  // Checkbox is passed in as a boolean to avoid creating a mostly similar function just for the active checkbox\n  // We pull the value based on the field type then merge that updated key/value pair with the last version of component state\n  handleDetailsChange = (event, name, section, checkBox = false) => {\n    const { updatedUser: previousUserState } = this.state;\n    let value;\n    if (checkBox) {\n      value = !previousUserState[section][name];\n    } else {\n      value = event.target ? event.target.value : event;\n    }\n    const updatedUser = update(previousUserState, {\n      [section]: { $merge: { [name]: value } },\n    });\n    this.setState({ updatedUser });\n  }\n\n  render() {\n    const { locationModalOpen, instructorModalOpen, classModalOpen, actions,\n      updatedUser: { studentInformation: updatedStudentInformation, contactInformation: updatedContactInformation, emailAddress: updatedEmailAddress, location: updatedLocation,\n        instructor: updatedInstructor, course: updatedClasses, courseContext: updatedCourseContext, accountSettings: updatedAccountSettings } } = this.state;\n    const { user: { studentInformation, contactInformation, emailAddress, location, instructor, course, courseContext, accountSettings, accountStatus, accountType } = {} } = this.props;\n    return (\n      <React.Fragment>\n        <Toast />\n        <ClassModal\n          open={classModalOpen}\n          onClose={this.onCloseClassModal}\n          handleClassChange={this.handleOptionsChange}\n        />\n        <LocationModal\n          open={locationModalOpen}\n          onClose={this.onCloseLocationModal}\n          handleLocationsChange={(selectedLocations) => this.handleOptionsChange(selectedLocations, 'location', 'locations')}\n        />\n        <InstructorModal\n          open={instructorModalOpen}\n          onClose={this.onCloseInstructorModal}\n          handleInstructorsChange={(selectedInstructors) => this.handleOptionsChange(selectedInstructors, 'instructor', 'instructors')}\n        />\n        <div className=\"content-section\">\n          <div className=\"content-section-holder\">\n            <div className=\"row mb-0 d-flex-content large\">\n              <div className=\"col s12 l5\">\n                <StudentInformation\n                  state={this.initialUserMount() ? studentInformation : updatedStudentInformation}\n                  handleDetailsChange={this.handleDetailsChange}\n                />\n                <ContactInformation\n                  state={this.initialUserMount() ? contactInformation : updatedContactInformation}\n                  handleDetailsChange={this.handleDetailsChange}\n                />\n                <EmailAddress\n                  state={this.initialUserMount() ? emailAddress : updatedEmailAddress}\n                  handleDetailsChange={this.handleDetailsChange}\n                />\n              </div>\n              <div className=\"col s12 l5\">\n                <Location\n                  state={this.initialUserMount() ? location : updatedLocation}\n                  onOpenLocationModal={this.onOpenLocationModal}\n                  onRemoveLocation={this.onRemoveOption}\n                />\n                <Instructor\n                  state={this.initialUserMount() ? instructor : updatedInstructor}\n                  onOpenInstructorModal={this.onOpenInstructorModal}\n                  onRemoveInstructor={this.onRemoveOption}\n                />\n                <Class\n                  state={this.initialUserMount() ? course : updatedClasses}\n                  onOpenClassModal={this.onOpenClassModal}\n                  onRemoveInstructor={this.onRemoveOption}\n                />\n              </div>\n            </div>\n            <div className=\"row mb-0 d-flex-content large sameheight\">\n              <AccountStatus\n                state={accountStatus}\n              />\n              <AccountType\n                state={accountType}\n              />\n            </div>\n            <CourseContext\n              state={this.initialUserMount() ? courseContext : updatedCourseContext}\n              handleDetailsChange={this.handleDetailsChange}\n            />\n            <AccountSettings\n              state={this.initialUserMount() ? accountSettings : updatedAccountSettings}\n              handleDetailsChange={this.handleDetailsChange}\n            />\n            <Actions\n              state={actions}\n              handleActionsChange={this.handleActionsChange}\n              onResetPassword={this.onResetPassword}\n              onSendWelcomeEmail={this.onSendWelcomeEmail}\n              onSendPasswordResetEmail={this.onSendPasswordResetEmail}\n            />\n            <DeleteAccount\n              activeButton={accountStatus.status !== 'Activated'}\n              onDeleteAccount={this.onDeleteAccount}\n            />\n            <a\n              href=\"#\"\n              onClick={this.onSaveChanges}\n              className=\"btn\"\n            >\n            Save\n            </a>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nAccountPage.propTypes = {\n  user: PropTypes.object,\n};\n\nexport default AccountPage;\n"]},"metadata":{},"sourceType":"module"}