{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/LessonDetailAnswerSheet/components/EditProblemRow/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport styled from 'styled-components';\nimport { addStudentLessonProblemAnswerApi } from '../../../index/api';\nimport { answerStudentLessonProblem } from '../../../index/actions';\n\nvar ProblemRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProblemRow, _React$Component);\n\n  function ProblemRow(props) {\n    var _this;\n\n    _classCallCheck(this, ProblemRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProblemRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"setAnswerChoice\", function () {\n      var question = _this.props.question;\n      var currentAnswerId = question.answer_id;\n      var answerChoices = question.problem.answers;\n      var currentSelection = answerChoices.map(function (answer, index) {\n        if (answer.id === currentAnswerId) {\n          return index;\n        }\n\n        return null;\n      }).filter(function (index) {\n        return index !== null;\n      })[0];\n      if (typeof currentSelection !== \"number\") return;\n\n      _this.setState({\n        problemCells: update(_this.state.problemCells, _defineProperty({}, currentSelection, {\n          selected: {\n            $set: true\n          }\n        })),\n        selectedIndex: currentSelection\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setAnswerText\", function () {\n      var answer_text = _this.props.question.answer_text;\n      var setText = !answer_text ? \"\" : answer_text;\n\n      _this.setState({\n        answer_text: setText\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveStudentAnswer\", function _callee(updatedProblemCells, index) {\n      var _this$props, activeLesson, question, answerChoices, payload, res;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, activeLesson = _this$props.activeLesson, question = _this$props.question;\n              answerChoices = question.problem.answers;\n\n              _this.setState({\n                problemCells: updatedProblemCells,\n                selectedIndex: index\n              });\n\n              payload = {\n                student_lesson_id: activeLesson.id,\n                problem_id: question.problem.id,\n                answer_id: answerChoices[index].id\n              };\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(addStudentLessonProblemAnswerApi(payload));\n\n            case 6:\n              res = _context.sent;\n\n              if (!(res === 202)) {\n                _context.next = 10;\n                break;\n              }\n\n              _this.props.updateProblemList(_this.props.problemType, _objectSpread({}, question, {\n                answer_id: answerChoices[index].id,\n                answer_text: null,\n                answered: true\n              }));\n\n              return _context.abrupt(\"return\", _this.handleUserMessage('success'));\n\n            case 10:\n              return _context.abrupt(\"return\", _this.handleUserMessage('fail'));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function _callee2(e) {\n      var _this$props2, activeLesson, question, payload, res;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props2 = _this.props, activeLesson = _this$props2.activeLesson, question = _this$props2.question;\n              payload = {\n                student_lesson_id: activeLesson.id,\n                problem_id: question.problem.id,\n                answer_text: _this.state.answer_text\n              }; // convert API call to action dispatch answerStudentLessonProblem\n\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(addStudentLessonProblemAnswerApi(payload));\n\n            case 4:\n              res = _context2.sent;\n\n              if (!(res === 202)) {\n                _context2.next = 8;\n                break;\n              }\n\n              _this.props.updateProblemList(_this.props.problemType, _objectSpread({}, question, {\n                answer_id: null,\n                answer_text: _this.state.answer_text,\n                answered: true\n              }));\n\n              return _context2.abrupt(\"return\", _this.handleUserMessage('success'));\n\n            case 8:\n              return _context2.abrupt(\"return\", _this.handleUserMessage('fail'));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickBadge\", function (index) {\n      var currentBadge = _this.state.problemCells[index];\n      var selectedIndex = _this.state.selectedIndex;\n      var updatedProblemCells = _this.state.problemCells;\n\n      if (selectedIndex === -1) {\n        updatedProblemCells = update(_this.state.problemCells, _defineProperty({}, index, {\n          selected: {\n            $set: !currentBadge.selected\n          }\n        }));\n      } else {\n        var _update3;\n\n        updatedProblemCells = update(_this.state.problemCells, (_update3 = {}, _defineProperty(_update3, selectedIndex, {\n          selected: {\n            $set: false\n          }\n        }), _defineProperty(_update3, index, {\n          selected: {\n            $set: !currentBadge.selected\n          }\n        }), _update3));\n      }\n\n      _this.onSaveStudentAnswer(updatedProblemCells, index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      _this.setState({\n        answer_text: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUserMessage\", function (status) {\n      if (status === 'fail') {\n        return _this.setState({\n          userMessage: \"Something went wrong updating student answer.\",\n          messageType: status\n        });\n      }\n\n      return _this.setState({\n        userMessage: \"Successfully updated student answer.\",\n        messageType: status\n      });\n    });\n\n    _this.state = {\n      selectedIndex: -1,\n      problemCells: [{\n        id: 0,\n        label: \"A\",\n        selected: false\n      }, {\n        id: 1,\n        label: \"B\",\n        selected: false\n      }, {\n        id: 2,\n        label: \"C\",\n        selected: false\n      }, {\n        id: 3,\n        label: \"D\",\n        selected: false\n      }],\n      answerChoices: [],\n      answer_text: \"\",\n      userMessage: \"\",\n      messageType: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(ProblemRow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$question = this.props.question,\n          answer_id = _this$props$question.answer_id,\n          answer_text = _this$props$question.answer_text,\n          answered = _this$props$question.answered;\n\n      if (answer_id && !answer_text && answered) {\n        this.setAnswerChoice();\n      } else if (!answer_id && answer_text && answered) {\n        this.setAnswerText();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var problemCells = this.state.problemCells;\n\n      if (this.props.question.problem.answers.length === 0) {\n        return __jsx(React.Fragment, null, __jsx(\"input\", {\n          type: \"text\",\n          className: \"answer-input\",\n          value: this.state.answer_text,\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }), __jsx(\"button\", {\n          className: \"btn\",\n          onClick: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, \"Submit\"), __jsx(UserMessage, {\n          messageType: this.state.messageType,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, this.state.userMessage));\n      }\n\n      return __jsx(React.Fragment, null, __jsx(\"ul\", {\n        className: \"answer-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, problemCells.map(function (cell, index) {\n        return __jsx(\"li\", {\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: function onClick() {\n            return _this2.handleClickBadge(index);\n          },\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          className: \"badge-circle badge-circle-bordered\",\n          style: {\n            color: cell.selected ? \"#fff\" : \"\",\n            borderColor: cell.selected ? \"#19b4e9\" : \"\",\n            backgroundColor: cell.selected ? \"#19b4e9\" : \"\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, cell.label));\n      })), __jsx(UserMessage, {\n        messageType: this.state.messageType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, this.state.userMessage));\n    }\n  }]);\n\n  return ProblemRow;\n}(React.Component);\n\nvar UserMessage = styled.p.withConfig({\n  displayName: \"EditProblemRow__UserMessage\",\n  componentId: \"sc-1tglkza-0\"\n})([\"color:\", \";\"], function (props) {\n  return props.messageType === 'fail' ? \"red\" : \"green\";\n});\nProblemRow.propTypes = {\n  activeLesson: PropTypes.object.isRequired,\n  question: PropTypes.object.isRequired,\n  updateProblemList: PropTypes.func.isRequired,\n  problemType: PropTypes.string.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProblemRow);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/LessonDetailAnswerSheet/components/EditProblemRow/index.js"],"names":["React","update","PropTypes","connect","bindActionCreators","styled","addStudentLessonProblemAnswerApi","answerStudentLessonProblem","ProblemRow","props","question","currentAnswerId","answer_id","answerChoices","problem","answers","currentSelection","map","answer","index","id","filter","setState","problemCells","state","selected","$set","selectedIndex","answer_text","setText","updatedProblemCells","activeLesson","payload","student_lesson_id","problem_id","res","updateProblemList","problemType","answered","handleUserMessage","e","currentBadge","onSaveStudentAnswer","target","value","status","userMessage","messageType","label","setAnswerChoice","setAnswerText","length","handleChange","handleSubmit","cell","cursor","handleClickBadge","color","borderColor","backgroundColor","Component","UserMessage","p","propTypes","object","isRequired","func","string","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport styled from 'styled-components';\nimport { addStudentLessonProblemAnswerApi } from '../../../index/api';\nimport { answerStudentLessonProblem } from '../../../index/actions';\n\nclass ProblemRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [\n        {\n          id: 0,\n          label: \"A\",\n          selected: false,\n        },\n        {\n          id: 1,\n          label: \"B\",\n          selected: false,\n        },\n        {\n          id: 2,\n          label: \"C\",\n          selected: false,\n        },\n        {\n          id: 3,\n          label: \"D\",\n          selected: false,\n        },\n      ],\n      answerChoices: [],\n      answer_text: \"\",\n      userMessage: \"\",\n      messageType: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const { question: { answer_id, answer_text, answered } } = this.props;\n    if (answer_id && !answer_text && answered) {\n      this.setAnswerChoice();\n    } else if (!answer_id && answer_text && answered) {\n      this.setAnswerText();\n    }\n  }\n\n  setAnswerChoice = () => {\n    const { question } = this.props;\n    const currentAnswerId = question.answer_id;\n    const answerChoices = question.problem.answers;\n    const currentSelection = answerChoices\n      .map((answer, index) => {\n        if (answer.id === currentAnswerId) {\n          return index;\n        }\n        return null;\n      })\n      .filter((index) => index !== null)[0];\n\n    if (typeof currentSelection !== \"number\") return;\n\n    this.setState({\n      problemCells: update(this.state.problemCells, {\n        [currentSelection]: { selected: { $set: true } },\n      }),\n      selectedIndex: currentSelection,\n    });\n  }\n\n  setAnswerText = () => {\n    const { question: { answer_text } } = this.props;\n    const setText = !answer_text ? \"\" : answer_text;\n    this.setState({ answer_text: setText });\n  }\n\n  onSaveStudentAnswer = async (updatedProblemCells, index) => {\n    const { activeLesson, question } = this.props;\n    const answerChoices = question.problem.answers;\n    this.setState({ problemCells: updatedProblemCells, selectedIndex: index });\n    const payload = {\n      student_lesson_id: activeLesson.id,\n      problem_id: question.problem.id,\n      answer_id: answerChoices[index].id,\n    };\n    const res = await addStudentLessonProblemAnswerApi(payload);\n    if (res === 202) {\n      this.props.updateProblemList(this.props.problemType, { ...question, answer_id: answerChoices[index].id, answer_text: null, answered: true });\n      return this.handleUserMessage('success');\n    }\n    return this.handleUserMessage('fail');\n  };\n\n  handleSubmit = async (e) => {\n    const { activeLesson, question } = this.props;\n    const payload = {\n      student_lesson_id: activeLesson.id,\n      problem_id: question.problem.id,\n      answer_text: this.state.answer_text,\n    };\n    // convert API call to action dispatch answerStudentLessonProblem\n    const res = await addStudentLessonProblemAnswerApi(payload);\n    if (res === 202) {\n      this.props.updateProblemList(this.props.problemType, { ...question, answer_id: null, answer_text: this.state.answer_text, answered: true });\n      return this.handleUserMessage('success');\n    }\n    return this.handleUserMessage('fail');\n  }\n\n  handleClickBadge = (index) => {\n    const currentBadge = this.state.problemCells[index];\n    const selectedIndex = this.state.selectedIndex;\n    let updatedProblemCells = this.state.problemCells;\n    if (selectedIndex === -1) {\n      updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n    } else {\n      updatedProblemCells = update(this.state.problemCells, {\n        [selectedIndex]: { selected: { $set: false } },\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n    }\n    this.onSaveStudentAnswer(updatedProblemCells, index);\n  };\n\n  handleChange = (e) => {\n    this.setState({ answer_text: e.target.value });\n  }\n\n  handleUserMessage = (status) => {\n    if (status === 'fail') {\n      return this.setState({ userMessage: \"Something went wrong updating student answer.\", messageType: status });\n    }\n    return this.setState({ userMessage: \"Successfully updated student answer.\", messageType: status });\n  }\n\n  render() {\n    const { problemCells } = this.state;\n    if (this.props.question.problem.answers.length === 0) {\n      return (\n        <>\n          <input type=\"text\" className=\"answer-input\" value={this.state.answer_text} onChange={this.handleChange} />\n          <button className=\"btn\" onClick={this.handleSubmit}>Submit</button>\n          <UserMessage messageType={this.state.messageType}>{this.state.userMessage}</UserMessage>\n        </>\n      );\n    }\n    return (\n      <>\n      <ul className=\"answer-list\">\n        {problemCells.map((cell, index) => (\n          <li\n            style={{ cursor: \"pointer\" }}\n            onClick={() => this.handleClickBadge(index)}\n            key={index}\n          >\n            <span\n              className=\"badge-circle badge-circle-bordered\"\n              style={{\n                color: cell.selected ? \"#fff\" : \"\",\n                borderColor: cell.selected ? \"#19b4e9\" : \"\",\n                backgroundColor: cell.selected ? \"#19b4e9\" : \"\",\n              }}\n            >\n              {cell.label}\n            </span>\n          </li>\n        ))}\n      </ul>\n      <UserMessage messageType={this.state.messageType}>{this.state.userMessage}</UserMessage>\n      </>\n    );\n  }\n}\n\nconst UserMessage = styled.p`\n  color: ${props => props.messageType === 'fail' ? \"red\" : \"green\"};\n`;\n\nProblemRow.propTypes = {\n  activeLesson: PropTypes.object.isRequired,\n  question: PropTypes.object.isRequired,\n  updateProblemList: PropTypes.func.isRequired,\n  problemType: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProblemRow);\n"]},"metadata":{},"sourceType":"module"}