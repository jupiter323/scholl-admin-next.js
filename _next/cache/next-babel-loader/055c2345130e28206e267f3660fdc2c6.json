{"ast":null,"code":"var _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestStrengthsAndWeakesses/components/common/GroupRow.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getScoreStatus } from '../common/GetScoreStatus';\n\nvar GroupRow = function GroupRow(_ref) {\n  var _ref$data = _ref.data,\n      name = _ref$data.name,\n      _ref$data$score = _ref$data.score,\n      percent_correct = _ref$data$score.percent_correct,\n      correct = _ref$data$score.correct,\n      incorrect = _ref$data$score.incorrect,\n      total = _ref$data$score.total;\n  return __jsx(\"div\", {\n    className: \"graph-row graph-row-inner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"graph-col text-column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, __jsx(\"strong\", {\n    className: \"graph-subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: getScoreStatus(percent_correct.toFixed(0)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, percent_correct.toFixed(0), \"%\"), name)), __jsx(\"div\", {\n    className: \"graph-col graph-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"graph-linear-students\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"graph-holder\",\n    style: {\n      width: \"\".concat((correct / total * 100).toFixed(0), \"%\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"graph-admin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"part-red\",\n    style: {\n      width: \"\".concat((incorrect / total * 100).toFixed(0), \"%\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }))))), __jsx(\"div\", {\n    className: \"graph-col graph-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"text-large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, correct), __jsx(\"span\", {\n    className: \"text-small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"out of\"), __jsx(\"span\", {\n    className: \"text-large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, total)));\n};\n\nGroupRow.propTypes = {};\nexport default GroupRow;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestStrengthsAndWeakesses/components/common/GroupRow.js"],"names":["React","PropTypes","getScoreStatus","GroupRow","data","name","score","percent_correct","correct","incorrect","total","toFixed","width","propTypes"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,uBAAGC,IAAH;AAAA,MAAWC,IAAX,aAAWA,IAAX;AAAA,kCAAiBC,KAAjB;AAAA,MAA0BC,eAA1B,mBAA0BA,eAA1B;AAAA,MAA2CC,OAA3C,mBAA2CA,OAA3C;AAAA,MAAoDC,SAApD,mBAAoDA,SAApD;AAAA,MAA+DC,KAA/D,mBAA+DA,KAA/D;AAAA,SACd;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAER,cAAc,CAAEK,eAAD,CAAkBI,OAAlB,CAA0B,CAA1B,CAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIJ,eAAD,CAAkBI,OAAlB,CAA0B,CAA1B,CADH,MADF,EAIGN,IAJH,CADF,CADD,EASC;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,YAAK,CAACJ,OAAO,GAAGE,KAAV,GAAkB,GAAnB,EAAwBC,OAAxB,CAAgC,CAAhC,CAAL;AAAP,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,YAAK,CAACH,SAAS,GAAGC,KAAZ,GAAoB,GAArB,EAA0BC,OAA1B,CAAkC,CAAlC,CAAL;AAAP,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF,CATD,EAkBC;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,OADH,CADF,EAIE;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,EAKE;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,KADH,CALF,CAlBD,CADc;AAAA,CAAjB;;AA8BAP,QAAQ,CAACU,SAAT,GAAqB,EAArB;AAEA,eAAeV,QAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getScoreStatus } from '../common/GetScoreStatus';\n\nconst GroupRow = ({ data: { name, score: { percent_correct, correct, incorrect, total } } }) =>\n  (<div className=\"graph-row graph-row-inner\">\n    <div className=\"graph-col text-column\">\n      <strong className=\"graph-subtitle\">\n        <span className={getScoreStatus((percent_correct).toFixed(0))}>\n          {(percent_correct).toFixed(0)}%\n        </span>\n        {name}\n      </strong>\n    </div>\n    <div className=\"graph-col graph-container\">\n      <div className=\"graph-linear-students\">\n        <div className=\"graph-holder\" style={{ width: `${(correct / total * 100).toFixed(0)}%` }}>\n          <div className=\"graph-admin\">\n            <div className=\"part-red\" style={{ width: `${(incorrect / total * 100).toFixed(0)}%` }} />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div className=\"graph-col graph-info\">\n      <span className=\"text-large\">\n        {correct}\n      </span>\n      <span className=\"text-small\">out of</span>\n      <span className=\"text-large\">\n        {total}\n      </span>\n    </div>\n  </div>);\n\nGroupRow.propTypes = {};\n\nexport default GroupRow;\n"]},"metadata":{},"sourceType":"module"}