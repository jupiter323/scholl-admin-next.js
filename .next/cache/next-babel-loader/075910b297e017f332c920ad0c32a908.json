{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport Select from 'react-select';\nimport update from 'immutability-helper';\nimport categoryStyles from '../../../../FormComponents/Dropdown/styles/dropdownStyles';\nimport ControlComponent from '../../../../FormComponents/Dropdown/styles/ControlComponent';\nimport MultiValueLabel from '../../../../FormComponents/Dropdown/styles/MultiValueLabel';\nimport { subjectOptions, difficultyOptions, typeOptions } from '../../../utils';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\n\nclass WorksheetDetails extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      if (!this.state.originalWorksheet || nextProps.worksheet.id !== this.state.originalWorksheet.id) {\n        const {\n          worksheet: {\n            id,\n            worksheetName,\n            subject,\n            problemType: type,\n            difficulty,\n            timeEstimate,\n            classifications: categories,\n            description\n          } = {}\n        } = nextProps;\n        const updatedWorksheet = {\n          id,\n          worksheetName,\n          subject,\n          type,\n          difficulty,\n          timeEstimate,\n          categories,\n          description\n        };\n        const {\n          originalWorksheet: originalWorksheetState\n        } = this.state;\n        const originalWorksheet = update(originalWorksheetState, {\n          $merge: nextProps.worksheet\n        });\n        this.setState({\n          originalWorksheet,\n          updatedWorksheet\n        });\n      }\n    });\n\n    _defineProperty(this, \"getSectionDropdownOptions\", () => {\n      const {\n        categoryOptions\n      } = this.state;\n      const {\n        worksheet: {\n          subject\n        } = {}\n      } = this.props;\n\n      if (!subject) {\n        return categoryOptions;\n      }\n\n      const categoryLabels = categoryOptions.map(categoryOption => categoryOption.label);\n      const subjectIndex = categoryLabels.indexOf(subject.charAt(0).toUpperCase() + subject.slice(1));\n      return [categoryOptions[subjectIndex]];\n    });\n\n    _defineProperty(this, \"updateCategoryState\", categories => {\n      const updatedWorksheet = update(this.state.updatedWorksheet, {\n        $merge: {\n          categories\n        }\n      });\n      this.setState({\n        updatedWorksheet\n      });\n    });\n\n    _defineProperty(this, \"handleCategoryChange\", categories => {\n      const updatedCategories = categories.reduce((finalArr, category) => {\n        finalArr.push(category.value);\n        return finalArr;\n      }, []);\n      this.updateCategoryState(updatedCategories);\n    });\n\n    _defineProperty(this, \"handleDetailsChange\", (event, name) => {\n      const {\n        updatedWorksheet: previousWorksheetState\n      } = this.state;\n      const value = event.target ? event.target.value : event;\n      const updatedWorksheet = update(previousWorksheetState, {\n        $merge: {\n          [name]: value\n        }\n      });\n      this.setState({\n        updatedWorksheet\n      });\n    });\n\n    this.state = {\n      originalWorksheet: {\n        worksheetName: '',\n        subject: {},\n        type: '',\n        difficulty: '',\n        timeEstimate: '',\n        categories: [],\n        description: ''\n      },\n      updatedWorksheet: {\n        worksheetName: '',\n        subject: {},\n        type: '',\n        difficulty: '',\n        timeEstimate: '',\n        categories: [],\n        description: ''\n      },\n      validation: {\n        worksheetName: true,\n        subject: true,\n        type: true,\n        difficulty: true,\n        timeEstimate: true,\n        categories: true\n      },\n      categoryOptions: [{\n        label: 'Math',\n        options: [{\n          value: 'Special Right Triangles',\n          label: 'Special Right Triangles'\n        }, {\n          value: 'Volumes',\n          label: 'Volumes'\n        }, {\n          value: 'Trig Functions',\n          label: 'Trig Functions'\n        }]\n      }, {\n        label: 'Writing',\n        options: [{\n          value: 'Astrology',\n          label: 'Astrology'\n        }, {\n          value: 'Algebra',\n          label: 'Algebra'\n        }]\n      }, {\n        label: 'Reading',\n        options: [{\n          value: 'Geometry',\n          label: 'Geometry'\n        }, {\n          value: 'Pythagorean Theorem',\n          label: 'Pythagorean Theorem'\n        }]\n      }],\n      subjectCategoryOptions: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      worksheet: {\n        id,\n        worksheetName,\n        subject,\n        problemType: type,\n        difficulty,\n        timeEstimate,\n        classifications: categories,\n        description\n      } = {}\n    } = this.props;\n    const updatedWorksheet = {\n      id,\n      worksheetName,\n      subject,\n      type,\n      difficulty,\n      timeEstimate,\n      categories,\n      description\n    };\n    const {\n      originalWorksheet: originalWorksheetState\n    } = this.state;\n    const originalWorksheet = update(originalWorksheetState, {\n      $merge: updatedWorksheet\n    });\n    this.setState({\n      originalWorksheet,\n      updatedWorksheet\n    }); // eslint-disable-line\n  } // This resets the component state to reflect the details of the next worksheet the user clicks on\n\n\n  render() {\n    const {\n      validation: {\n        categories: categoriesValid\n      },\n      updatedWorksheet: {\n        worksheetName,\n        timeEstimate,\n        subject,\n        type,\n        difficulty,\n        description,\n        categories\n      }\n    } = this.state;\n    const {\n      defaultCategories\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"col s12 l6\"\n    }, React.createElement(\"div\", {\n      className: \"card-block\"\n    }, React.createElement(\"h2\", null, \"Details\"), React.createElement(\"div\", {\n      className: \"card\"\n    }, React.createElement(\"div\", {\n      className: \"card-content\"\n    }, React.createElement(\"div\", {\n      className: \"card-body\"\n    }, React.createElement(\"div\", {\n      className: \"row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col s12\"\n    }, React.createElement(\"div\", {\n      className: \"input-field\"\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"details_name\",\n      value: worksheetName,\n      onChange: event => this.handleDetailsChange(event, 'worksheetName')\n    }), React.createElement(\"label\", {\n      className: worksheetName.length ? 'label active' : 'label',\n      htmlFor: \"details_name\"\n    }, \"Name\")))), React.createElement(\"div\", {\n      className: \"row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col s6\"\n    }, React.createElement(\"div\", {\n      className: \"input-field\"\n    }, React.createElement(Dropdown, {\n      value: getValueFromState(subject, subjectOptions),\n      onChange: event => this.handleDetailsChange(event, 'subject'),\n      options: subjectOptions,\n      label: \"Subject\",\n      stateKey: \"subject\",\n      dropdownKey: \"subject\"\n    }))), React.createElement(\"div\", {\n      className: \"col s6\"\n    }, React.createElement(\"div\", {\n      className: \"input-field\"\n    }, React.createElement(Dropdown, {\n      value: getValueFromState(type, typeOptions),\n      onChange: event => this.handleDetailsChange(event, 'type'),\n      options: typeOptions,\n      label: \"Type\",\n      stateKey: \"type\",\n      dropdownKey: \"type\"\n    })))), React.createElement(\"div\", {\n      className: \"row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col s6\"\n    }, React.createElement(\"div\", {\n      className: \"input-field\"\n    }, React.createElement(Dropdown, {\n      value: getValueFromState(difficulty, difficultyOptions),\n      onChange: event => this.handleDetailsChange(event, 'difficulty'),\n      options: difficultyOptions,\n      label: \"Difficulty\",\n      stateKey: \"difficulty\",\n      dropdownKey: \"difficulty\"\n    }))), React.createElement(\"div\", {\n      className: \"col s6\"\n    }, React.createElement(\"div\", {\n      className: \"datepicker-field input-field\"\n    }, React.createElement(\"i\", {\n      className: \"icon-clock2\"\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"timepicker\",\n      id: \"detail_estimated_time\",\n      value: timeEstimate,\n      onChange: event => this.handleDetailsChange(event, 'timeEstimate')\n    }), React.createElement(\"label\", {\n      className: timeEstimate.length ? 'label active' : 'label',\n      htmlFor: \"detail_estimated_time\"\n    }, \"Estimated Time\")))), React.createElement(\"div\", {\n      className: \"row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col s12\"\n    }, React.createElement(Select, {\n      options: this.getSectionDropdownOptions(),\n      isMulti: true,\n      instanceId: \"categories-select\",\n      onChange: this.handleCategoryChange,\n      components: {\n        Control: ControlComponent,\n        MultiValueLabel\n      },\n      name: \"categoryOptions\",\n      className: categoriesValid || !categoriesValid && categories.length ? '' : 'invalid',\n      classNamePrefix: \"multi-select\",\n      placeholder: 'Select one or more categories',\n      styles: categoryStyles,\n      isClearable: false,\n      label: \"Categories\",\n      defaultValue: defaultCategories\n    }))), React.createElement(\"div\", {\n      className: \"row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col s12\"\n    }, React.createElement(\"div\", {\n      className: \"input-field\"\n    }, React.createElement(\"textarea\", {\n      id: \"detail_description\",\n      className: \"materialize-textarea\",\n      style: {\n        height: '70px'\n      },\n      value: description,\n      onChange: event => this.handleDetailsChange(event, 'description')\n    }), React.createElement(\"label\", {\n      className: description.length ? 'label active' : 'label',\n      htmlFor: \"detail_description\"\n    }, \"Description (optional)\")))))))));\n  }\n\n}\n\nexport default WorksheetDetails;","map":null,"metadata":{},"sourceType":"module"}