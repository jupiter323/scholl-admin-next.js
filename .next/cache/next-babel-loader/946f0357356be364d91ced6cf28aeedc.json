{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport CalendarDate from '../CalendarDate';\n\nvar CalendarRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CalendarRow, _React$Component);\n\n  function CalendarRow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CalendarRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CalendarRow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleAssignSessionModal\", function (event, date) {\n      event.preventDefault();\n      var _this$props = _this.props,\n          onToggleAssignSessionModal = _this$props.onToggleAssignSessionModal,\n          onToggleAddDropdown = _this$props.onToggleAddDropdown;\n      onToggleAssignSessionModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleAssignLessonsModal\", function (event, date) {\n      event.preventDefault();\n      var _this$props2 = _this.props,\n          onToggleAssignLessonsModal = _this$props2.onToggleAssignLessonsModal,\n          onToggleAddDropdown = _this$props2.onToggleAddDropdown;\n      onToggleAssignLessonsModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleAssignWorksheetsModal\", function (event, date) {\n      event.preventDefault();\n      var _this$props3 = _this.props,\n          onToggleAssignWorksheetsModal = _this$props3.onToggleAssignWorksheetsModal,\n          onToggleAddDropdown = _this$props3.onToggleAddDropdown;\n      onToggleAssignWorksheetsModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleAssignTestSectionModal\", function (event, date) {\n      event.preventDefault();\n      var _this$props4 = _this.props,\n          onToggleAssignTestSectionModal = _this$props4.onToggleAssignTestSectionModal,\n          onToggleAddDropdown = _this$props4.onToggleAddDropdown;\n      onToggleAssignTestSectionModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleAssignSimulatedSatModal\", function (event, date) {\n      event.preventDefault();\n      var _this$props5 = _this.props,\n          onToggleAssignSimulatedSatModal = _this$props5.onToggleAssignSimulatedSatModal,\n          onToggleAddDropdown = _this$props5.onToggleAddDropdown;\n      onToggleAssignSimulatedSatModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapDateSessions\", function (shouldMapSessions, sessions) {\n      if (shouldMapSessions) {\n        return sessions.map(function (session, index) {\n          return React.createElement(\"li\", {\n            className: \"event-frame\",\n            key: index\n          }, React.createElement(Draggable, {\n            key: index,\n            index: index,\n            draggableId: \"sessions-\".concat(session.date, \"-\").concat(index),\n            style: {\n              userSelect: 'none'\n            }\n          }, function (provided) {\n            return React.createElement(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps), React.createElement(\"span\", {\n              className: \"event-title-box\"\n            }, session.title));\n          }));\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapDateLessons\", function (shouldMapLessons, lessons) {\n      if (shouldMapLessons) {\n        return lessons.map(function (lesson, index) {\n          return React.createElement(\"li\", {\n            className: \"event-frame\",\n            key: index\n          }, React.createElement(Draggable, {\n            key: index,\n            index: index,\n            draggableId: \"lessons-\".concat(lesson.date, \"-\").concat(index),\n            style: {\n              userSelect: 'none'\n            }\n          }, function (provided) {\n            return React.createElement(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps), React.createElement(React.Fragment, null, lesson.completed && React.createElement(\"span\", {\n              className: \"event-check lesson-check\"\n            }, React.createElement(\"i\", {\n              className: \"icon-check02\"\n            })), React.createElement(\"span\", {\n              className: \"event event-lesson-box\"\n            }, lesson.title)));\n          }));\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapDateWorksheets\", function (shouldMapWorksheets, worksheets) {\n      if (shouldMapWorksheets) {\n        return worksheets.map(function (worksheet, index) {\n          return React.createElement(\"li\", {\n            className: \"event-frame\",\n            key: index\n          }, React.createElement(Draggable, {\n            key: index,\n            index: index,\n            draggableId: \"worksheets-\".concat(worksheet.date, \"-\").concat(index),\n            style: {\n              userSelect: 'none'\n            }\n          }, function (provided) {\n            return React.createElement(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps), React.createElement(React.Fragment, null, worksheet.completed && React.createElement(\"span\", {\n              className: \"event-check worksheet-check\"\n            }, React.createElement(\"i\", {\n              className: \"icon-check02\"\n            })), React.createElement(\"span\", {\n              className: \"event event-worksheet-box\"\n            }, worksheet.title)));\n          }));\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapTestSections\", function (shouldMapTestSections, testSections) {\n      if (shouldMapTestSections) {\n        return testSections.map(function (testSection, index) {\n          return React.createElement(\"li\", {\n            className: \"event-frame\",\n            key: index\n          }, React.createElement(Draggable, {\n            key: index,\n            index: index,\n            draggableId: \"testSections-\".concat(testSection.date, \"-\").concat(index),\n            style: {\n              userSelect: 'none'\n            }\n          }, function (provided) {\n            return React.createElement(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps), React.createElement(\"span\", {\n              className: \"event event-test-box\"\n            }, \"Test Section: \", testSection.version));\n          }));\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapSimulatedSats\", function (shouldMapSimulatedSats, simulatedSat) {\n      if (shouldMapSimulatedSats) {\n        return simulatedSat.map(function (sat, index) {\n          return React.createElement(\"li\", {\n            className: \"event-frame\",\n            key: index\n          }, React.createElement(Draggable, {\n            key: index,\n            index: index,\n            draggableId: \"simulatedSat-\".concat(sat.date, \"-\").concat(index)\n          }, function (provided) {\n            return React.createElement(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.dragHandleProps, provided.dragHandleProps), React.createElement(\"span\", {\n              className: \"event event-sat-box\"\n            }, sat.version));\n          }));\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapRowDates\", function () {\n      return _this.props.rows && _this.props.rows.map(function (rowDate) {\n        var _this$props6 = _this.props,\n            eventFilters = _this$props6.eventFilters,\n            activeDate = _this$props6.activeDate,\n            addDropdownOpen = _this$props6.addDropdownOpen,\n            deleteDropdownOpen = _this$props6.deleteDropdownOpen,\n            onSetActiveDate = _this$props6.onSetActiveDate,\n            onToggleAddDropdown = _this$props6.onToggleAddDropdown,\n            onToggleDeleteDropdown = _this$props6.onToggleDeleteDropdown,\n            activeColumn = _this$props6.activeColumn;\n        var date = rowDate.date,\n            dayDate = rowDate.dayDate,\n            calDate = rowDate.calDate,\n            activeDateKey = rowDate.activeDateKey,\n            inMonth = rowDate.inMonth,\n            _rowDate$sessions = rowDate.sessions,\n            sessions = _rowDate$sessions === void 0 ? [] : _rowDate$sessions,\n            _rowDate$lessons = rowDate.lessons,\n            lessons = _rowDate$lessons === void 0 ? [] : _rowDate$lessons,\n            _rowDate$worksheets = rowDate.worksheets,\n            worksheets = _rowDate$worksheets === void 0 ? [] : _rowDate$worksheets,\n            _rowDate$testSections = rowDate.testSections,\n            testSections = _rowDate$testSections === void 0 ? [] : _rowDate$testSections,\n            _rowDate$simulatedSat = rowDate.simulatedSat,\n            simulatedSat = _rowDate$simulatedSat === void 0 ? [] : _rowDate$simulatedSat;\n        var hasEvents = sessions.length > 0 || lessons.length > 0 || worksheets.length > 0 || testSections.length > 0 || simulatedSat.length > 0;\n        var inActiveColumn = activeDateKey && activeDateKey[13] === activeColumn;\n        var isActiveDate = activeDate === activeDateKey;\n        var hasEventFilters = eventFilters.length > 0;\n        var shouldMapSessions = !hasEventFilters && sessions.length || sessions.length > 0 && hasEventFilters && eventFilters.indexOf('sessions') !== -1;\n        var shouldMapLessons = !hasEventFilters && lessons.length || lessons.length > 0 && hasEventFilters && eventFilters.indexOf('lessons') !== -1;\n        var shouldMapWorksheets = !hasEventFilters && worksheets.length || worksheets.length > 0 && hasEventFilters && eventFilters.indexOf('worksheets') !== -1;\n        var shouldMapTestSections = !hasEventFilters && testSections.length || testSections.length > 0 && hasEventFilters && eventFilters.indexOf('testSections') !== -1;\n        var shouldMapSimulatedSats = !hasEventFilters && simulatedSat.length || simulatedSat.length > 0 && hasEventFilters && eventFilters.indexOf('simulatedSats') !== -1;\n        return React.createElement(CalendarDate, {\n          sessions: sessions,\n          lessons: lessons,\n          worksheets: worksheets,\n          testSections: testSections,\n          simulatedSat: simulatedSat,\n          key: date,\n          date: date,\n          dayDate: dayDate,\n          calDate: calDate,\n          inMonth: inMonth,\n          hasEvents: hasEvents,\n          isActiveDate: isActiveDate,\n          activeDateKey: activeDateKey,\n          inActiveColumn: inActiveColumn,\n          addDropdownOpen: addDropdownOpen,\n          onSetActiveDate: onSetActiveDate,\n          shouldMapLessons: shouldMapLessons,\n          shouldMapSessions: shouldMapSessions,\n          deleteDropdownOpen: deleteDropdownOpen,\n          onToggleAddDropdown: onToggleAddDropdown,\n          shouldMapWorksheets: shouldMapWorksheets,\n          shouldMapTestSections: shouldMapTestSections,\n          onToggleDeleteDropdown: onToggleDeleteDropdown,\n          shouldMapSimulatedSats: shouldMapSimulatedSats,\n          mapDateSessions: _this.mapDateSessions,\n          mapDateLessons: _this.mapDateLessons,\n          mapDateWorksheets: _this.mapDateWorksheets,\n          mapTestSections: _this.mapTestSections,\n          mapSimulatedSats: _this.mapSimulatedSats,\n          toggleAssignSessionModal: _this.toggleAssignSessionModal,\n          toggleAssignLessonsModal: _this.toggleAssignLessonsModal,\n          toggleAssignWorksheetsModal: _this.toggleAssignWorksheetsModal,\n          toggleAssignTestSectionModal: _this.toggleAssignTestSectionModal,\n          toggleAssignSimulatedSatModal: _this.toggleAssignSimulatedSatModal\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(CalendarRow, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"tr\", {\n        className: \"cal-row-fluid\"\n      }, this.mapRowDates());\n    }\n  }]);\n\n  return CalendarRow;\n}(React.Component);\n\nexport default CalendarRow; // if (!inMonth) {\n//   return (\n//     <td className=\"cal-cell1 cal-cell cal-day-outmonth\" key={dayDate}>\n//       <div className={getCalendarDayClassName(date, inMonth, activeDateKey)}>\n//         <span className=\"day-date\">{dayDate}</span>\n//         <span className=\"cal-date\">{calDate}</span>\n//       </div>\n//     </td>\n//   )\n// }\n// return (\n//   <td key={activeDateKey} className={getCalendarCellClassName(hasEvents, inActiveColumn)} onClick={() => onSetActiveDate(activeDateKey)}>\n//     <div className={getCalendarDayClassName(date, inMonth, activeDateKey)}>\n//       <span className=\"day-date\">{dayDate}</span>\n//       <span className=\"cal-date\">{calDate}</span>\n//       <ul className=\"day-collapsible collapsible\">\n//         <li className={isActiveDate ? 'collapsible-holder active' : 'collapsible-holder'} style={{ transform: 'none' }}>\n//           <div className=\"collapsible-header\" style={{ display: inActiveColumn && isActiveDate ? 'none' : 'block'}}>\n//             <span className=\"fake-close\"><span className=\"icon-close-thin\"></span></span>\n//             <If condition={hasEvents}>\n//               <ul className=\"events-list events-list-short\">\n//                 <If condition={shouldMapSessions}>\n//                   <li className=\"event-frame event-title\">\n//                     <span className=\"event-title-box\">Session {sessions.length}</span>\n//                   </li>\n//                 </If>\n//                 <If condition={shouldMapLessons}>\n//                   <li className=\"event-frame\">\n//                     <span className=\"event event-lesson-box\"> {lessons.length} <span className=\"event-text\">Lesson{lessons.length > 1 && 's'}</span></span>\n//                   </li>\n//                 </If>\n//                 <If condition={shouldMapWorksheets}>\n//                   <li className=\"event-frame\">\n//                     <span className=\"event event-worksheet-box\">{worksheets.length} <span className=\"event-text\">Worksheet{worksheets.length > 1 && 's'}</span></span>\n//                   </li>\n//                 </If>\n//                 <If condition={shouldMapTestSections}>\n//                   <li className=\"event-frame\">\n//                     <span className=\"event event-test-box\">{testSections.length} <span className=\"event-text\">Test Section{testSections.length > 1 && 's'}</span></span>\n//                   </li>\n//                 </If>\n//                 <If condition={shouldMapSimulatedSats}>\n//                   <li className=\"event-frame\">\n//                     <span className=\"event event-sat-box\">{simulatedSat.length} <span className=\"event-text\">Simulated SAT</span></span>\n//                   </li>\n//                 </If>\n//               </ul>\n//             </If>\n//           </div>\n//           <div className=\"collapsible-body\" style={{ opacity: inActiveColumn && isActiveDate ? '1' : '0', visibility: inActiveColumn ? 'visible' : 'hidden' }}>\n//             <If condition={hasEvents}>\n//               <ul className=\"events-list\">\n//                 {shouldMapSessions && sessions.map((session, index) => (\n//                   <li className=\"event-frame\" key={index}>\n//                     <span className=\"event-title-box\">{session.title}</span>\n//                   </li>\n//                 ))}\n//                 {this.mapDateLessons(shouldMapLessons, lessons)}\n//                 {this.mapDateWorksheets(shouldMapWorksheets, worksheets)}\n//                 {this.mapTestSections(shouldMapTestSections, testSections)}\n//                 {this.mapSimulatedSats(shouldMapSimulatedSats, simulatedSat)}\n//               </ul>\n//             </If>\n//             <div className=\"day-footer\">\n//               <ul className=\"links-list\">\n//                 <li>\n//                   <a\n//                     href=\"#\"\n//                     data-target='dropdown_day_240119_add'\n//                     onClick={onToggleAddDropdown}\n//                     className=\"link-add dropdown-trigger waves-effect waves-teal\"\n//                   >\n//                     Add\n//                   </a>\n//                   <ul\n//                     id='dropdown_day_240119_add'\n//                     className='dropdown-content'\n//                     style={{ display: addDropdownOpen ? 'block' : 'none', opacity: addDropdownOpen ? '100' : '0' }}\n//                   >\n//                     <li><a href=\"#\" onClick={(event) => this.toggleAssignSessionModal(event, date)} className=\"modal-trigger\">Session</a></li>\n//                     <li><a href=\"#\" onClick={(event) => this.toggleAssignLessonsModal(event, date)} className=\"modal-trigger\">Lesson</a></li>\n//                     <li><a href=\"#\" onClick={(event) => this.toggleAssignWorksheetsModal(event, date)} className=\"modal-trigger\">Worksheet</a></li>\n//                     <li><a href=\"#\" onClick={(event) => this.toggleAssignTestSectionModal(event, date)} className=\"modal-trigger\">Test Section</a></li>\n//                     <li><a href=\"#\" onClick={(event) => this.toggleAssignSimulatedSatModal(event, date)} className=\"modal-trigger\">Simulated SAT</a></li>\n//                   </ul>\n//                 </li>\n//                 <li>\n//                   <a\n//                     href=\"#\"\n//                     data-target='dropdown_day_240119_delete'\n//                     onClick={onToggleDeleteDropdown}\n//                     className=\"link-delete dropdown-trigger waves-effect waves-teal\"\n//                   >\n//                     Delete\n//                   </a>\n//                   <ul\n//                     id='dropdown_day_240119_delete'\n//                     className='dropdown-content'\n//                     style={{ display: deleteDropdownOpen ? 'block' : 'none', opacity: deleteDropdownOpen ? '100' : '0' }}\n//                   >\n//                     <li><a href=\"#modal_edit_delete_section\" className=\"modal-trigger\">Session</a></li>\n//                     <li><a href=\"#modal_edit_delete_lesson\" className=\"modal-trigger\">Lesson</a></li>\n//                     <li><a href=\"#modal_edit_delete_worksheet\" className=\"modal-trigger\">Worksheet</a></li>\n//                     <li><a href=\"#modal_edit_delete_test_section\" className=\"modal-trigger\">Test Section</a></li>\n//                     <li><a href=\"#!\" className=\"disabled\">Simulated SAT</a></li>\n//                     <li><a href=\"#!\" className=\"disabled\">Target Test</a></li>\n//                     <li><a href=\"#!\">All</a></li>\n//                   </ul>\n//                 </li>\n//               </ul>\n//             </div>\n//           </div>\n//         </li>\n//       </ul>\n//     </div>\n//   </td>\n// )","map":null,"metadata":{},"sourceType":"module"}