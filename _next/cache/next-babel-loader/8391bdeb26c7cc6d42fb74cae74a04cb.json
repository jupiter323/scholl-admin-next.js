{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport Moment from 'moment';\nimport { toast } from 'react-toastify';\nimport Toast from '../../Toast';\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport AssignedTestCard from \"./components/AssignedTestCard\";\nimport OverDueTestCard from \"./components/OverDueTestCard\";\nimport CompletedTestCard from \"./components/CompletedTestCard\";\nimport EditTestModal from \"./components/EditTestModal\";\nimport NewTestModal from \"./components/TestModal\";\nimport TestSettingModal from \"./components/TestSettingModal\";\nimport EnterAnswerWrapper from \"./components/EnterAnswerWrapper\";\nimport CardHeader from \"./components/CardHeader\";\nimport { setIsVisibleTopBar, fetchStudentTests, setActiveStudentTestId, deleteStudentTest, updateTestFlag, assignNewTest, fetchStudentTestSections, addNewTestToStudentTests, updateTestStatus, setStudentSections, setStudentTests, setStudentCompletedTests, setStudentOverDueTests, setStudentAssignedTests, getTestScores } from \"../index/actions\";\nimport { makeSelectOverDueStudentTests, makeSelectCompletedStudentTests, makeSelectAssignedStudentTests, makeSelectStudentTests, makeSelectTests, makeSelectActiveStudent, makeSelectFetchStudentTestsStatus } from '../index/selectors';\nimport { assignTestToStudentApi, addStudentAnswerToTestApi } from '../index/api';\n\nvar DetailTestList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DetailTestList, _React$Component);\n\n  function DetailTestList(props) {\n    var _this;\n\n    _classCallCheck(this, DetailTestList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DetailTestList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function _callee() {\n      var _this$props, onFetchStudentTests, studentTests, activeStudent, user;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, onFetchStudentTests = _this$props.onFetchStudentTests, studentTests = _this$props.studentTests, activeStudent = _this$props.activeStudent, user = _this$props.user;\n\n              if (studentTests.length === 0) {\n                onFetchStudentTests(user);\n              } else if (studentTests.length > 0 && studentTests[0].student_id !== activeStudent.id) {\n                onFetchStudentTests(user);\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillUnmount\", function () {\n      _this.props.onSetStudentTests([]);\n\n      _this.props.onSetStudentCompletedTests([]);\n\n      _this.props.onSetStudentOverDueTests([]);\n\n      _this.props.onSetStudentAssignedTests([]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetActiveTestComplete\", function () {\n      return _this.setState({\n        activeTest: _objectSpread({}, _this.state.activeTest, {\n          status: \"COMPLETED\"\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleEditTestModal\", function _callee2(activeTest) {\n      var onSetActiveStudentTestId, postBody;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              onSetActiveStudentTestId = _this.props.onSetActiveStudentTestId;\n              onSetActiveStudentTestId(activeTest.student_test_id);\n\n              _this.onSetIsVisibleTopBar(false);\n\n              postBody = {\n                id: _this.props.activeStudent.id,\n                student_test_id: activeTest.student_test_id\n              };\n\n              _this.props.onFetchStudentTestSections(postBody);\n\n              _this.setState(function (_ref) {\n                var openEditTestModal = _ref.openEditTestModal;\n                return {\n                  openEditTestModal: true,\n                  openEnterAnswerWrapper: false,\n                  activeTest: activeTest,\n                  activePage: 'scores'\n                };\n              }, _this.onCloseDropdown);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseEditTestModal\", function () {\n      _this.onSetIsVisibleTopBar(true);\n\n      _this.setState(function (_ref2) {\n        var openEditTestModal = _ref2.openEditTestModal;\n        return {\n          openEditTestModal: !openEditTestModal,\n          openEnterAnswerWrapper: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false,\n        dropdownIndex: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTestSettingModalOpen\", function (activeTest) {\n      _this.onCloseDropdown();\n\n      _this.setState(function (_ref3) {\n        var opentTestSettingModal = _ref3.opentTestSettingModal;\n        return {\n          activeTest: activeTest,\n          opentTestSettingModal: !opentTestSettingModal\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCreateTest\", function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        openCreateTestModal: true\n      });\n\n      console.warn('Pending implementation of create test UI and functionality');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEnterAnswers\", function _callee3(currentTestId) {\n      var _this$props2, onFetchStudentTestSections, user, studentTests, activeTest, postBody, onUpdateTestStatus, _this$props3, id, onGetTestScores, _postBody;\n\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this$props2 = _this.props, onFetchStudentTestSections = _this$props2.onFetchStudentTestSections, user = _this$props2.user, studentTests = _this$props2.studentTests; // Have to clear all sections to have no side effects for now\n\n              onFetchStudentTestSections({\n                id: user.id,\n                student_test_id: currentTestId\n              });\n\n              _this.onSetIsVisibleTopBar(false);\n\n              _this.onCloseDropdown();\n\n              activeTest = studentTests.find(function (test) {\n                return test.student_test_id === currentTestId;\n              });\n\n              if (!(activeTest.status === 'ASSIGNED')) {\n                _context3.next = 12;\n                break;\n              }\n\n              postBody = {\n                student_test_id: currentTestId,\n                status: 'STARTED'\n              };\n              onUpdateTestStatus = _this.props.onUpdateTestStatus;\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(onUpdateTestStatus(postBody, 'STARTED', user.id));\n\n            case 10:\n              _context3.next = 13;\n              break;\n\n            case 12:\n              if (activeTest.status === 'COMPLETED') {\n                _this$props3 = _this.props, id = _this$props3.activeStudent.id, onGetTestScores = _this$props3.onGetTestScores;\n                _postBody = {\n                  studentId: id,\n                  student_test_id: currentTestId\n                };\n                onGetTestScores(_postBody);\n              }\n\n            case 13:\n              _this.setState({\n                openEditTestModal: true,\n                activeTest: activeTest,\n                activePage: \"answerSheet\"\n              });\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDownloadReport\", function (activeTest) {\n      _this.onSetIsVisibleTopBar(false);\n\n      _this.onCloseDropdown();\n\n      _this.setState({\n        activeTest: activeTest,\n        openEditTestModal: true\n      }, function _callee4() {\n        return _regeneratorRuntime.async(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _regeneratorRuntime.awrap(_this.editTestModal.generateScoreReportPdf());\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteTest\", function (student_test_id, student_id, type) {\n      _this.onSetIsVisibleTopBar(true);\n\n      _this.setState({\n        openEditTestModal: false\n      }, function () {\n        return _this.props.onDeleteStudentTest(student_test_id, student_id, type);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTestFlagReviewed\", function (student_test_id, student_id) {\n      _this.props.onUpdateTestFlag(student_test_id, student_id);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetIsVisibleTopBar\", function (value) {\n      var onSetIsVisibleTopBar = _this.props.onSetIsVisibleTopBar;\n      onSetIsVisibleTopBar(value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveTestChanges\", function (testVersion, settings) {\n      _this.onToggleEditTestModal();\n\n      _this.onSetIsVisibleTopBar(true);\n\n      console.warn('Pending save test changes functionality', testVersion, settings);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapCompletedTests\", function () {\n      var _this$state = _this.state,\n          dropdownIndex = _this$state.dropdownIndex,\n          dropdownIsOpen = _this$state.dropdownIsOpen;\n      var completes = _this.props.completes;\n      return completes.map(function (test, index) {\n        return __jsx(CompletedTestCard, {\n          test: test,\n          index: \"completed\".concat(index),\n          key: \"completed-\".concat(index),\n          onEnterAnswers: _this.onEnterAnswers,\n          onEditTest: function onEditTest() {\n            return _this.onToggleEditTestModal(_objectSpread({}, test, {\n              status: 'COMPLETED'\n            }));\n          },\n          onSetDropdown: _this.onSetDropdown,\n          onCloseDropdown: _this.onCloseDropdown,\n          onDownloadReport: _this.onDownloadReport,\n          dropdownIndex: dropdownIndex,\n          dropdownIsOpen: dropdownIsOpen,\n          onTestFlagReviewed: _this.onTestFlagReviewed,\n          onDeleteTest: _this.onDeleteTest,\n          handleTestSettingModalOpen: function handleTestSettingModalOpen() {\n            return _this.handleTestSettingModalOpen(test);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapAssignedTests\", function () {\n      var _this$state2 = _this.state,\n          dropdownIndex = _this$state2.dropdownIndex,\n          dropdownIsOpen = _this$state2.dropdownIsOpen;\n      var assigneds = _this.props.assigneds;\n      return assigneds.map(function (test, index) {\n        return __jsx(AssignedTestCard, {\n          test: test,\n          key: \"assigned-\".concat(index),\n          handleTestSettingModalOpen: function handleTestSettingModalOpen() {\n            return _this.handleTestSettingModalOpen(test);\n          },\n          onDeleteTest: _this.onDeleteTest,\n          onSetDropdown: _this.onSetDropdown,\n          onEnterAnswers: _this.onEnterAnswers,\n          onCloseDropdown: _this.onCloseDropdown,\n          onDownloadReport: _this.onDownloadReport,\n          dropdownIndex: dropdownIndex,\n          dropdownIsOpen: dropdownIsOpen,\n          index: \"assigned\".concat(index),\n          onTestFlagReviewed: _this.onTestFlagReviewed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapOverDueTests\", function () {\n      var _this$state3 = _this.state,\n          dropdownIndex = _this$state3.dropdownIndex,\n          dropdownIsOpen = _this$state3.dropdownIsOpen;\n      var overdues = _this.props.overdues;\n      return overdues.map(function (test, index) {\n        return __jsx(OverDueTestCard, {\n          test: test,\n          key: \"overdue-\".concat(index),\n          handleTestSettingModalOpen: function handleTestSettingModalOpen() {\n            return _this.handleTestSettingModalOpen(test);\n          },\n          onDeleteTest: _this.onDeleteTest,\n          onSetDropdown: _this.onSetDropdown,\n          onEnterAnswers: _this.onEnterAnswers,\n          onCloseDropdown: _this.onCloseDropdown,\n          onDownloadReport: _this.onDownloadReport,\n          dropdownIndex: dropdownIndex,\n          dropdownIsOpen: dropdownIsOpen,\n          index: \"overdue\".concat(index),\n          onTestFlagReviewed: _this.onTestFlagReviewed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227\n          },\n          __self: this\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseTestModal\", function () {\n      return _this.setState({\n        openCreateTestModal: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloaseAnswerWrapper\", function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.onSetIsVisibleTopBar(true);\n\n              _this.setState({\n                openEnterAnswerWrapper: false\n              });\n\n              _this.onCloseDropdown();\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveNewTest\", function _callee6(test) {\n      var _this$props4, studentTests, tests, test_sections, testIds, currentTestIndex, currentTest, id, postBody, _ref4, student_test_id, formattedNewTest, _this$props5, onAssignNewTest, onAddNewTestToStudentTests;\n\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this$props4 = _this.props, studentTests = _this$props4.studentTests, tests = _this$props4.tests;\n\n              if (!(!_this.props.activeStudent.active && studentTests.length >= 1)) {\n                _context6.next = 3;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", toast.error(\"This student is not activated. A free student account can only be assigned one free test.\", {\n                className: 'update-error',\n                progressClassName: 'progress-bar-error'\n              }));\n\n            case 3:\n              _this.onCloseTestModal();\n\n              test_sections = [];\n              testIds = tests.map(function (test) {\n                return test.id;\n              });\n              currentTestIndex = testIds.findIndex(function (testId) {\n                return testId === test.version;\n              });\n              currentTest = tests[currentTestIndex];\n              id = _this.props.user.id;\n              currentTest.test_sections.map(function (testSection) {\n                if (testSection.name === 'Reading' && test.reading) {\n                  test_sections.push(testSection);\n                }\n\n                if (testSection.name === 'Writing' && test.writing) {\n                  test_sections.push(testSection);\n                }\n\n                if (testSection.name === 'Math (No Calculator)' && test.mathNoCalc) {\n                  test_sections.push(testSection);\n                }\n\n                if (testSection.name === 'Math (Calculator)' && test.mathWithCalc) {\n                  test_sections.push(testSection);\n                }\n              });\n\n              if (!(test_sections.length === 0)) {\n                _context6.next = 12;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", toast.error(\"Cannot assign a test without selecting one or more sections.\", {\n                className: 'update-error',\n                progressClassName: 'progress-bar-error'\n              }));\n\n            case 12:\n              postBody = {\n                student_id: id,\n                test_id: test.version,\n                assignment_date: Moment(test.assignDate).format('YYYY-MM-DD'),\n                due_date: Moment(test.dueDate).format('YYYY-MM-DD'),\n                test_section_ids: test_sections.map(function (testSection) {\n                  return testSection.id;\n                }),\n                is_timed: test.isTimed\n              };\n              _context6.next = 15;\n              return _regeneratorRuntime.awrap(assignTestToStudentApi(postBody));\n\n            case 15:\n              _ref4 = _context6.sent;\n              student_test_id = _ref4.student_test_id;\n\n              if (student_test_id) {\n                formattedNewTest = {\n                  assignment_date: test.assignDate,\n                  due_date: test.dueDate,\n                  due_status: '',\n                  status: 'ASSIGNED',\n                  student_id: id,\n                  student_test_id: student_test_id,\n                  test_description: currentTest.description,\n                  test_form: '3',\n                  test_id: test.version,\n                  test_name: currentTest.name\n                };\n                _this$props5 = _this.props, onAssignNewTest = _this$props5.onAssignNewTest, onAddNewTestToStudentTests = _this$props5.onAddNewTestToStudentTests;\n                onAssignNewTest(formattedNewTest);\n                onAddNewTestToStudentTests(formattedNewTest);\n              } else {\n                toast.error(\"This student is not activated. A free student account can only be assigned one free test.\", {\n                  className: 'update-error',\n                  progressClassName: 'progress-bar-error'\n                });\n              }\n\n            case 18:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddStudentAnswerToTest\", function _callee7(test_problem_id, answer) {\n      var student_test_id, postBody;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              student_test_id = _this.state.activeTest.student_test_id;\n              postBody = {\n                student_test_id: student_test_id,\n                test_problem_id: test_problem_id,\n                answer: answer\n              };\n              _context7.next = 4;\n              return _regeneratorRuntime.awrap(addStudentAnswerToTestApi(postBody));\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      });\n    });\n\n    _this.state = {\n      activeTest: {},\n      activePage: \"scores\",\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      openEditTestModal: false,\n      openCreateTestModal: false,\n      opentTestSettingModal: false,\n      openEnterAnswerWrapper: false\n    };\n    return _this;\n  }\n\n  _createClass(DetailTestList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state4 = this.state,\n          openEditTestModal = _this$state4.openEditTestModal,\n          openCreateTestModal = _this$state4.openCreateTestModal,\n          openEnterAnswerWrapper = _this$state4.openEnterAnswerWrapper,\n          activeTest = _this$state4.activeTest,\n          opentTestSettingModal = _this$state4.opentTestSettingModal;\n      var _this$props6 = this.props,\n          user = _this$props6.user,\n          completes = _this$props6.completes,\n          assigneds = _this$props6.assigneds,\n          overdues = _this$props6.overdues,\n          studentTestsFetchedStatus = _this$props6.studentTestsFetchedStatus;\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, __jsx(Toast, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }), openEditTestModal ? __jsx(EditTestModal, {\n        onRef: function onRef(ref) {\n          return _this2.editTestModal = ref;\n        },\n        user: user,\n        test: activeTest,\n        onDeleteTest: this.onDeleteTest,\n        onSaveTestChanges: this.onSaveTestChanges,\n        onCloseEditTestModal: this.onCloseEditTestModal,\n        activePage: this.state.activePage,\n        onOpentTestScore: this.onToggleEditTestModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }) : openEnterAnswerWrapper ? null : opentTestSettingModal ? __jsx(TestSettingModal, {\n        open: opentTestSettingModal,\n        test: activeTest,\n        onClose: this.handleTestSettingModalOpen,\n        onSave: this.onSaveNewTest,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }) : [__jsx(NewTestModal, {\n        open: openCreateTestModal,\n        onClose: this.onCloseTestModal,\n        onSave: this.onSaveNewTest,\n        key: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"content-section\",\n        key: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"section-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, overdues.length !== 0 && studentTestsFetchedStatus && __jsx(\"div\", {\n        className: \"content-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, __jsx(CardHeader, {\n        title: \"OverDue\",\n        amount: overdues.length,\n        themeColor: \"#e94319\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"row d-flex-content card-width-366\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, this.mapOverDueTests())), assigneds.length !== 0 && studentTestsFetchedStatus && __jsx(\"div\", {\n        className: \"content-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }, __jsx(CardHeader, {\n        title: \"Assigned\",\n        amount: assigneds.length,\n        themeColor: \"#39b44a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"row d-flex-content card-width-366\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, this.mapAssignedTests())), completes.length !== 0 && studentTestsFetchedStatus && __jsx(\"div\", {\n        className: \"content-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, __jsx(CardHeader, {\n        title: \"Completed\",\n        amount: completes.length,\n        themeColor: \"#39b44a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"row d-flex-content card-width-366\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        },\n        __self: this\n      }, this.mapCompletedTests()))), __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onCreateTest,\n        className: \"waves-effect waves-teal btn add-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, __jsx(\"i\", {\n        className: \"material-icons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, \"add\"), \"New Test\"))]);\n    }\n  }]);\n\n  return DetailTestList;\n}(React.Component);\n\nDetailTestList.propTypes = {\n  user: PropTypes.object.isRequired,\n  onSetIsVisibleTopBar: PropTypes.func.isRequired,\n  completes: PropTypes.array,\n  overdues: PropTypes.array,\n  assigneds: PropTypes.array,\n  onSetStudentAssignedTests: PropTypes.func\n};\nvar mapStateToProps = createStructuredSelector({\n  completes: makeSelectCompletedStudentTests(),\n  assigneds: makeSelectAssignedStudentTests(),\n  overdues: makeSelectOverDueStudentTests(),\n  studentTests: makeSelectStudentTests(),\n  tests: makeSelectTests(),\n  activeStudent: makeSelectActiveStudent(),\n  studentTestsFetchedStatus: makeSelectFetchStudentTestsStatus()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetIsVisibleTopBar: function onSetIsVisibleTopBar(value) {\n      return dispatch(setIsVisibleTopBar(value));\n    },\n    onFetchStudentTests: function onFetchStudentTests(user) {\n      return dispatch(fetchStudentTests(user));\n    },\n    onSetActiveStudentTestId: function onSetActiveStudentTestId(studentTestId) {\n      return dispatch(setActiveStudentTestId(studentTestId));\n    },\n    onDeleteStudentTest: function onDeleteStudentTest(studentTestId, studentId, type) {\n      return dispatch(deleteStudentTest(studentTestId, studentId, type));\n    },\n    onUpdateTestFlag: function onUpdateTestFlag(studentTestId, studentId) {\n      return dispatch(updateTestFlag(studentTestId, studentId));\n    },\n    onAssignNewTest: function onAssignNewTest(newTest) {\n      return dispatch(assignNewTest(newTest));\n    },\n    onFetchStudentTestSections: function onFetchStudentTestSections(studentInfo) {\n      return dispatch(fetchStudentTestSections(studentInfo));\n    },\n    onAddNewTestToStudentTests: function onAddNewTestToStudentTests(studentInfo) {\n      return dispatch(addNewTestToStudentTests(studentInfo));\n    },\n    onUpdateTestStatus: function onUpdateTestStatus(payload, currentStatus, studentId) {\n      return dispatch(updateTestStatus(payload, currentStatus, studentId));\n    },\n    onSetStudentTests: function onSetStudentTests(tests) {\n      return dispatch(setStudentTests(tests));\n    },\n    onSetStudentCompletedTests: function onSetStudentCompletedTests(tests) {\n      return dispatch(setStudentCompletedTests(tests));\n    },\n    onSetStudentOverDueTests: function onSetStudentOverDueTests(tests) {\n      return dispatch(setStudentOverDueTests(tests));\n    },\n    onSetStudentAssignedTests: function onSetStudentAssignedTests(tests) {\n      return dispatch(setStudentAssignedTests(tests));\n    },\n    onGetTestScores: function onGetTestScores(postBody) {\n      return dispatch(getTestScores(postBody));\n    }\n  };\n}\n\nvar withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(DetailTestList);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/index.js"],"names":["React","PropTypes","update","Moment","toast","Toast","connect","compose","createStructuredSelector","AssignedTestCard","OverDueTestCard","CompletedTestCard","EditTestModal","NewTestModal","TestSettingModal","EnterAnswerWrapper","CardHeader","setIsVisibleTopBar","fetchStudentTests","setActiveStudentTestId","deleteStudentTest","updateTestFlag","assignNewTest","fetchStudentTestSections","addNewTestToStudentTests","updateTestStatus","setStudentSections","setStudentTests","setStudentCompletedTests","setStudentOverDueTests","setStudentAssignedTests","getTestScores","makeSelectOverDueStudentTests","makeSelectCompletedStudentTests","makeSelectAssignedStudentTests","makeSelectStudentTests","makeSelectTests","makeSelectActiveStudent","makeSelectFetchStudentTestsStatus","assignTestToStudentApi","addStudentAnswerToTestApi","DetailTestList","props","onFetchStudentTests","studentTests","activeStudent","user","length","student_id","id","onSetStudentTests","onSetStudentCompletedTests","onSetStudentOverDueTests","onSetStudentAssignedTests","setState","activeTest","state","status","onSetActiveStudentTestId","student_test_id","onSetIsVisibleTopBar","postBody","onFetchStudentTestSections","openEditTestModal","openEnterAnswerWrapper","activePage","onCloseDropdown","dropdownIndex","dropdownIsOpen","opentTestSettingModal","event","preventDefault","openCreateTestModal","console","warn","currentTestId","find","test","onUpdateTestStatus","onGetTestScores","studentId","editTestModal","generateScoreReportPdf","type","onDeleteStudentTest","onUpdateTestFlag","value","testVersion","settings","onToggleEditTestModal","completes","map","index","onEnterAnswers","onSetDropdown","onDownloadReport","onTestFlagReviewed","onDeleteTest","handleTestSettingModalOpen","assigneds","overdues","tests","active","error","className","progressClassName","onCloseTestModal","test_sections","testIds","currentTestIndex","findIndex","testId","version","currentTest","testSection","name","reading","push","writing","mathNoCalc","mathWithCalc","test_id","assignment_date","assignDate","format","due_date","dueDate","test_section_ids","is_timed","isTimed","formattedNewTest","due_status","test_description","description","test_form","test_name","onAssignNewTest","onAddNewTestToStudentTests","test_problem_id","answer","studentTestsFetchedStatus","ref","onSaveTestChanges","onCloseEditTestModal","onSaveNewTest","mapOverDueTests","mapAssignedTests","mapCompletedTests","onCreateTest","Component","propTypes","object","isRequired","func","array","mapStateToProps","mapDispatchToProps","dispatch","studentTestId","newTest","studentInfo","payload","currentStatus","withConnect"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport Moment from 'moment';\nimport { toast } from 'react-toastify';\nimport Toast from '../../Toast';\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport AssignedTestCard from \"./components/AssignedTestCard\";\nimport OverDueTestCard from \"./components/OverDueTestCard\";\nimport CompletedTestCard from \"./components/CompletedTestCard\";\nimport EditTestModal from \"./components/EditTestModal\";\nimport NewTestModal from \"./components/TestModal\";\nimport TestSettingModal from \"./components/TestSettingModal\";\nimport EnterAnswerWrapper from \"./components/EnterAnswerWrapper\";\nimport CardHeader from \"./components/CardHeader\";\nimport {\n  setIsVisibleTopBar,\n  fetchStudentTests,\n  setActiveStudentTestId,\n  deleteStudentTest,\n  updateTestFlag,\n  assignNewTest,\n  fetchStudentTestSections,\n  addNewTestToStudentTests,\n  updateTestStatus,\n  setStudentSections,\n  setStudentTests,\n  setStudentCompletedTests,\n  setStudentOverDueTests,\n  setStudentAssignedTests,\n  getTestScores,\n} from \"../index/actions\";\nimport {\n  makeSelectOverDueStudentTests,\n  makeSelectCompletedStudentTests,\n  makeSelectAssignedStudentTests,\n  makeSelectStudentTests,\n  makeSelectTests,\n  makeSelectActiveStudent,\n  makeSelectFetchStudentTestsStatus,\n} from '../index/selectors';\nimport {\n  assignTestToStudentApi,\n  addStudentAnswerToTestApi,\n} from '../index/api';\n\nclass DetailTestList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTest: {},\n      activePage: \"scores\",\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      openEditTestModal: false,\n      openCreateTestModal: false,\n      opentTestSettingModal: false,\n      openEnterAnswerWrapper: false,\n    };\n  }\n\n  componentDidMount = async () => {\n    const { onFetchStudentTests, studentTests, activeStudent, user } = this.props;\n    if (studentTests.length === 0) {\n      onFetchStudentTests(user);\n    } else if (studentTests.length > 0 && studentTests[0].student_id !== activeStudent.id) {\n      onFetchStudentTests(user);\n    }\n  };\n\n  componentWillUnmount = () => {\n    this.props.onSetStudentTests([]);\n    this.props.onSetStudentCompletedTests([]);\n    this.props.onSetStudentOverDueTests([]);\n    this.props.onSetStudentAssignedTests([]);\n  }\n\n  onSetActiveTestComplete = () => this.setState({ activeTest: { ...this.state.activeTest, status: \"COMPLETED\" } })\n\n  onToggleEditTestModal = async (activeTest) => {\n    const { onSetActiveStudentTestId } = this.props;\n    onSetActiveStudentTestId(activeTest.student_test_id);\n    this.onSetIsVisibleTopBar(false);\n    const postBody = {\n      id: this.props.activeStudent.id,\n      student_test_id: activeTest.student_test_id,\n    };\n    this.props.onFetchStudentTestSections(postBody);\n    this.setState(\n      ({ openEditTestModal }) => ({\n        openEditTestModal: true,\n        openEnterAnswerWrapper: false,\n        activeTest,\n        activePage: 'scores',\n      }),\n      this.onCloseDropdown,\n    );\n  };\n  onCloseEditTestModal = () => {\n    this.onSetIsVisibleTopBar(true);\n    this.setState(({ openEditTestModal }) => ({\n      openEditTestModal: !openEditTestModal,\n      openEnterAnswerWrapper: false,\n    }));\n  };\n\n  onSetDropdown = dropdownIndex => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  handleTestSettingModalOpen = activeTest => {\n    this.onCloseDropdown();\n    this.setState(({ opentTestSettingModal }) => ({\n      activeTest,\n      opentTestSettingModal: !opentTestSettingModal,\n    }));\n  };\n\n  onCreateTest = event => {\n    event.preventDefault();\n    this.setState({ openCreateTestModal: true });\n    console.warn('Pending implementation of create test UI and functionality');\n  };\n\n  onEnterAnswers = async currentTestId => {\n    const { onFetchStudentTestSections, user, studentTests } = this.props;\n    // Have to clear all sections to have no side effects for now\n    onFetchStudentTestSections({ id: user.id, student_test_id: currentTestId });\n    this.onSetIsVisibleTopBar(false);\n    this.onCloseDropdown();\n    const activeTest = studentTests.find(test => test.student_test_id === currentTestId);\n    if (activeTest.status === 'ASSIGNED') {\n      const postBody = {\n        student_test_id: currentTestId,\n        status: 'STARTED',\n      };\n      const { onUpdateTestStatus } = this.props;\n      await onUpdateTestStatus(postBody, 'STARTED', user.id);\n    } else if (activeTest.status === 'COMPLETED') {\n      const { activeStudent: { id }, onGetTestScores } = this.props;\n      const postBody = { studentId: id, student_test_id: currentTestId };\n      onGetTestScores(postBody);\n    }\n    this.setState({ openEditTestModal: true, activeTest, activePage: \"answerSheet\" });\n  };\n\n  onDownloadReport = activeTest => {\n    this.onSetIsVisibleTopBar(false);\n    this.onCloseDropdown();\n    this.setState(\n      {\n        activeTest,\n        openEditTestModal: true,\n      },\n      async () => {\n        await this.editTestModal.generateScoreReportPdf();\n      },\n    );\n  };\n  onDeleteTest = (student_test_id, student_id, type) => {\n    this.onSetIsVisibleTopBar(true);\n    this.setState({ openEditTestModal: false }, () =>\n      this.props.onDeleteStudentTest(student_test_id, student_id, type),\n    );\n  };\n  onTestFlagReviewed = (student_test_id, student_id) => {\n    this.props.onUpdateTestFlag(student_test_id, student_id);\n  };\n  onSetIsVisibleTopBar = value => {\n    const { onSetIsVisibleTopBar } = this.props;\n    onSetIsVisibleTopBar(value);\n  };\n  onSaveTestChanges = (testVersion, settings) => {\n    this.onToggleEditTestModal();\n    this.onSetIsVisibleTopBar(true);\n    console.warn('Pending save test changes functionality', testVersion, settings);\n  };\n\n  mapCompletedTests = () => {\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    const { completes } = this.props;\n    return completes.map((test, index) =>\n      (<CompletedTestCard\n        test={test}\n        index={`completed${index}`}\n        key={`completed-${index}`}\n        onEnterAnswers={this.onEnterAnswers}\n        onEditTest={() => this.onToggleEditTestModal({ ...test, status: 'COMPLETED' })}\n        onSetDropdown={this.onSetDropdown}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={dropdownIndex}\n        dropdownIsOpen={dropdownIsOpen}\n        onTestFlagReviewed={this.onTestFlagReviewed}\n        onDeleteTest={this.onDeleteTest}\n        handleTestSettingModalOpen={() => this.handleTestSettingModalOpen(test)}\n      />),\n    );\n  };\n\n  mapAssignedTests = () => {\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    const { assigneds } = this.props;\n    return assigneds.map((test, index) =>\n      (<AssignedTestCard\n        test={test}\n        key={`assigned-${index}`}\n        handleTestSettingModalOpen={() => this.handleTestSettingModalOpen(test)}\n        onDeleteTest={this.onDeleteTest}\n        onSetDropdown={this.onSetDropdown}\n        onEnterAnswers={this.onEnterAnswers}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={dropdownIndex}\n        dropdownIsOpen={dropdownIsOpen}\n        index={`assigned${index}`}\n        onTestFlagReviewed={this.onTestFlagReviewed}\n      />),\n    );\n  };\n  mapOverDueTests = () => {\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    const { overdues } = this.props;\n    return overdues.map((test, index) =>\n      (<OverDueTestCard\n        test={test}\n        key={`overdue-${index}`}\n        handleTestSettingModalOpen={() => this.handleTestSettingModalOpen(test)}\n        onDeleteTest={this.onDeleteTest}\n        onSetDropdown={this.onSetDropdown}\n        onEnterAnswers={this.onEnterAnswers}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={dropdownIndex}\n        dropdownIsOpen={dropdownIsOpen}\n        index={`overdue${index}`}\n        onTestFlagReviewed={this.onTestFlagReviewed}\n      />),\n    );\n  };\n\n  onCloseTestModal = () => this.setState({ openCreateTestModal: false });\n  onCloaseAnswerWrapper = async () => {\n    this.onSetIsVisibleTopBar(true);\n    this.setState({\n      openEnterAnswerWrapper: false,\n    });\n    this.onCloseDropdown();\n  };\n\n  onSaveNewTest = async test => {\n    const { studentTests, tests } = this.props;\n    if (!this.props.activeStudent.active && studentTests.length >= 1) {\n      return toast.error(`This student is not activated. A free student account can only be assigned one free test.`, {\n        className: 'update-error',\n        progressClassName: 'progress-bar-error',\n      });\n    }\n    this.onCloseTestModal();\n    const test_sections = [];\n    const testIds = tests.map(test => test.id);\n    const currentTestIndex = testIds.findIndex(testId => testId === test.version);\n    const currentTest = tests[currentTestIndex];\n\n    const { user: { id } } = this.props;\n    currentTest.test_sections.map(testSection => {\n      if (testSection.name === 'Reading' && test.reading) {\n        test_sections.push(testSection);\n      }\n      if (testSection.name === 'Writing' && test.writing) {\n        test_sections.push(testSection);\n      }\n      if (testSection.name === 'Math (No Calculator)' && test.mathNoCalc) {\n        test_sections.push(testSection);\n      }\n      if (testSection.name === 'Math (Calculator)' && test.mathWithCalc) {\n        test_sections.push(testSection);\n      }\n    });\n    if (test_sections.length === 0) {\n      return toast.error(`Cannot assign a test without selecting one or more sections.`, {\n        className: 'update-error',\n        progressClassName: 'progress-bar-error',\n      });\n    }\n    const postBody = {\n      student_id: id,\n      test_id: test.version,\n      assignment_date: Moment(test.assignDate).format('YYYY-MM-DD'),\n      due_date: Moment(test.dueDate).format('YYYY-MM-DD'),\n      test_section_ids: test_sections.map(testSection => testSection.id),\n      is_timed: test.isTimed,\n    };\n    const { student_test_id } = await assignTestToStudentApi(postBody);\n    if (student_test_id) {\n      const formattedNewTest = {\n        assignment_date: test.assignDate,\n        due_date: test.dueDate,\n        due_status: '',\n        status: 'ASSIGNED',\n        student_id: id,\n        student_test_id,\n        test_description: currentTest.description,\n        test_form: '3',\n        test_id: test.version,\n        test_name: currentTest.name,\n      };\n      const { onAssignNewTest, onAddNewTestToStudentTests } = this.props;\n      onAssignNewTest(formattedNewTest);\n      onAddNewTestToStudentTests(formattedNewTest);\n    } else {\n      toast.error(`This student is not activated. A free student account can only be assigned one free test.`, {\n        className: 'update-error',\n        progressClassName: 'progress-bar-error',\n      });\n    }\n  };\n\n  onAddStudentAnswerToTest = async (test_problem_id, answer) => {\n    const { activeTest: { student_test_id } } = this.state;\n    const postBody = {\n      student_test_id,\n      test_problem_id,\n      answer,\n    };\n    await addStudentAnswerToTestApi(postBody);\n  };\n\n  render() {\n    const {\n      openEditTestModal,\n      openCreateTestModal,\n      openEnterAnswerWrapper,\n      activeTest,\n      opentTestSettingModal,\n    } = this.state;\n    const { user, completes, assigneds, overdues, studentTestsFetchedStatus } = this.props;\n    return (\n      <React.Fragment>\n        <Toast />\n        <Choose>\n          <When condition={openEditTestModal}>\n            <EditTestModal\n              onRef={ref => (this.editTestModal = ref)}\n              user={user}\n              test={activeTest}\n              onDeleteTest={this.onDeleteTest}\n              onSaveTestChanges={this.onSaveTestChanges}\n              onCloseEditTestModal={this.onCloseEditTestModal}\n              activePage={this.state.activePage}\n              onOpentTestScore={this.onToggleEditTestModal}\n            />\n          </When>\n          <When condition={openEnterAnswerWrapper}>\n            {/* <EnterAnswerWrapper\n              open={openEnterAnswerWrapper}\n              onCloaseAnswerWrapper={this.onCloaseAnswerWrapper}\n              onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n              test={activeTest}\n              onOpentTestScore={() => this.onToggleEditTestModal(activeTest)}\n            /> */}\n          </When>\n          <When condition={opentTestSettingModal}>\n            <TestSettingModal\n              open={opentTestSettingModal}\n              test={activeTest}\n              onClose={this.handleTestSettingModalOpen}\n              onSave={this.onSaveNewTest}\n            />\n          </When>\n          <Otherwise>\n            <NewTestModal\n              open={openCreateTestModal}\n              onClose={this.onCloseTestModal}\n              onSave={this.onSaveNewTest}\n            />\n            <div className=\"content-section\">\n              <div className=\"section-holder\">\n                {overdues.length !== 0 && studentTestsFetchedStatus &&\n                  <div className=\"content-container\">\n                    <CardHeader title=\"OverDue\" amount={overdues.length} themeColor=\"#e94319\" />\n                    <div className=\"row d-flex-content card-width-366\">\n                      {this.mapOverDueTests()}\n                    </div>\n                  </div>}\n                {assigneds.length !== 0 && studentTestsFetchedStatus &&\n                  <div className=\"content-container\">\n                    <CardHeader title=\"Assigned\" amount={assigneds.length} themeColor=\"#39b44a\" />\n                    <div className=\"row d-flex-content card-width-366\">\n                      {this.mapAssignedTests()}\n                    </div>\n                  </div>}\n                {completes.length !== 0 && studentTestsFetchedStatus &&\n                  <div className=\"content-container\">\n                    <CardHeader title=\"Completed\" amount={completes.length} themeColor=\"#39b44a\" />\n                    <div className=\"row d-flex-content card-width-366\">\n                      {this.mapCompletedTests()}\n                    </div>\n                  </div>}\n              </div>\n              <a\n                href=\"#\"\n                onClick={this.onCreateTest}\n                className=\"waves-effect waves-teal btn add-btn\"\n              >\n                <i className=\"material-icons\">add</i>New Test\n              </a>\n            </div>\n          </Otherwise>\n        </Choose>\n      </React.Fragment>\n    );\n  }\n}\n\nDetailTestList.propTypes = {\n  user: PropTypes.object.isRequired,\n  onSetIsVisibleTopBar: PropTypes.func.isRequired,\n  completes: PropTypes.array,\n  overdues: PropTypes.array,\n  assigneds: PropTypes.array,\n  onSetStudentAssignedTests: PropTypes.func,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  completes: makeSelectCompletedStudentTests(),\n  assigneds: makeSelectAssignedStudentTests(),\n  overdues: makeSelectOverDueStudentTests(),\n  studentTests: makeSelectStudentTests(),\n  tests: makeSelectTests(),\n  activeStudent: makeSelectActiveStudent(),\n  studentTestsFetchedStatus: makeSelectFetchStudentTestsStatus(),\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetIsVisibleTopBar: value => dispatch(setIsVisibleTopBar(value)),\n    onFetchStudentTests: user => dispatch(fetchStudentTests(user)),\n    onSetActiveStudentTestId: studentTestId => dispatch(setActiveStudentTestId(studentTestId)),\n    onDeleteStudentTest: (studentTestId, studentId, type) => dispatch(deleteStudentTest(studentTestId, studentId, type)),\n    onUpdateTestFlag: (studentTestId, studentId) => dispatch(updateTestFlag(studentTestId, studentId)),\n    onAssignNewTest: (newTest) => dispatch(assignNewTest(newTest)),\n    onFetchStudentTestSections: (studentInfo) => dispatch(fetchStudentTestSections(studentInfo)),\n    onAddNewTestToStudentTests: (studentInfo) => dispatch(addNewTestToStudentTests(studentInfo)),\n    onUpdateTestStatus: (payload, currentStatus, studentId) => dispatch(updateTestStatus(payload, currentStatus, studentId)),\n    onSetStudentTests: (tests) => dispatch(setStudentTests(tests)),\n    onSetStudentCompletedTests: (tests) => dispatch(setStudentCompletedTests(tests)),\n    onSetStudentOverDueTests: (tests) => dispatch(setStudentOverDueTests(tests)),\n    onSetStudentAssignedTests: (tests) => dispatch(setStudentAssignedTests(tests)),\n    onGetTestScores: (postBody) => dispatch(getTestScores(postBody)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(DetailTestList);\n"]},"metadata":{},"sourceType":"module"}