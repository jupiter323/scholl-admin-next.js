{"ast":null,"code":"import _objectSpread2 from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport update from 'immutability-helper';\nimport { Sticky, StickyContainer } from 'react-sticky';\nimport InstructorCard from './components/InstructorCard';\nimport FilterSection from './components/FilterSection';\nimport NewInstructorModal from './components/NewInstructorModal'; // import { saveNewSuccess as savePracticeTestSuccess, saveChangesSuccess, saveNewError as savePracticeTestError } from '../../utils/fieldValidation';\n\nimport { firstNameAscending, firstNameDescending, lastNameAscending, lastNameDescending } from '../../utils/sortFunctions';\nimport { fetchInstructorsApi, createNewInstructorApi } from '../index/api';\nimport { setInstructors } from '../index/actions';\nimport { makeSelectInstructors } from '../index/selectors';\n\nclass InstructorListPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      const {\n        onSetInstructors,\n        instructors\n      } = this.props;\n\n      if (instructors.length === 0) {\n        const {\n          formattedInstructors: instructors\n        } = await fetchInstructorsApi();\n        this.setState({\n          instructors\n        });\n        onSetInstructors(instructors);\n      }\n    });\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIsOpen: true,\n      dropdownIndex\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onOpenInstructorModal\", () => this.setState({\n      instructorModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseInstructorModal\", () => this.setState({\n      instructorModalOpen: false\n    }));\n\n    _defineProperty(this, \"onAddNewInstructor\", newInstructor => {\n      this.onCreateNewInstructorApi(newInstructor);\n      const {\n        instructors,\n        onSetInstructors\n      } = this.props;\n      const tempBasicInfo = {\n        activeStudents: 15,\n        pastStudents: 24,\n        unactivatedStudents: 29,\n        averageImprovement: 185,\n        averageInitialScore: 1037,\n        averageFinalScore: 1218,\n        studentsAchievingTargetScore: 12\n      };\n      const formattedNewInstructor = update(newInstructor, {\n        basicInfo: {\n          $set: tempBasicInfo\n        }\n      });\n      const updatedInstructors = update(instructors, {\n        $push: [formattedNewInstructor]\n      });\n      onSetInstructors(updatedInstructors);\n    });\n\n    _defineProperty(this, \"onDeleteInstructor\", deletedInstructor => {\n      const updatedProps = update(this.props, {\n        instructors: unfilteredInstructors => unfilteredInstructors.filter(instructor => instructor.id !== deletedInstructor.id)\n      });\n      const {\n        onSetInstructors\n      } = this.props;\n      onSetInstructors(updatedProps.instructors);\n    });\n\n    _defineProperty(this, \"onCloneInstructor\", instructor => {\n      const cloneIndex = this.props.instructors.indexOf(instructor);\n      const newId = this.props.instructors.length + 1;\n      const updatedInstructor = update(instructor, {\n        id: {\n          $set: newId\n        }\n      });\n      const instructors = update(this.props.instructors, {\n        $splice: [[cloneIndex, 0, updatedInstructor]]\n      });\n      this.onCloseDropdown();\n      const {\n        onSetInstructors\n      } = this.props;\n      onSetInstructors(instructors);\n      this.onCreateNewInstructorApi(instructor);\n    });\n\n    _defineProperty(this, \"onCreateNewInstructorApi\", async instructor => {\n      const newId = this.props.instructors.length + 1;\n      const {\n        accountInfo: {\n          firstName,\n          lastName,\n          email,\n          gender\n        },\n        contactInfo: {\n          state,\n          phone,\n          streetAddress,\n          city,\n          zip\n        }\n      } = instructor;\n      const formattedBody = {\n        id: newId,\n        first_name: firstName,\n        last_name: lastName,\n        email,\n        gender,\n        state,\n        locations: [],\n        phone,\n        address: streetAddress,\n        city,\n        zip\n      };\n      await createNewInstructorApi(formattedBody);\n    });\n\n    _defineProperty(this, \"onSaveInstructorChanges\", updatedInstructor => {\n      const {\n        instructors: originalInstructors,\n        onSetInstructors\n      } = this.props;\n      const instructorToUpdate = originalInstructors.filter(instructor => instructor.id === updatedInstructor.id)[0];\n      const updatedInstructorIndex = originalInstructors.indexOf(instructorToUpdate);\n      const instructors = update(originalInstructors, {\n        $splice: [[updatedInstructorIndex, 1, updatedInstructor]]\n      }); // saveChangesSuccess();\n      // this.setState({ instructors });\n\n      onSetInstructors(instructors);\n    });\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      instructorsAreFiltered: true,\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      instructorsAreFiltered: false,\n      filterName: ''\n    }));\n\n    _defineProperty(this, \"onSetFilteredLocationState\", filterLocation => this.setState({\n      instructorsAreFiltered: true,\n      filterLocation\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredLocationState\", () => this.setState({\n      filterLocation: ''\n    }, this.checkForFilteredState));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        instructors\n      } = this.props;\n      const {\n        filterName\n      } = this.state;\n      return instructors.reduce((finalArr, currentInstructor) => {\n        const {\n          accountInfo: {\n            lastName,\n            firstName\n          }\n        } = currentInstructor;\n        const instructorString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n\n        if (instructorString.indexOf(filterName) !== -1 && finalArr.indexOf(currentInstructor) === -1) {\n          finalArr.push(currentInstructor);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterByLocation\", (preFilteredInstructors = []) => {\n      const {\n        instructors: allInstructors\n      } = this.props;\n      const {\n        filterLocation\n      } = this.state;\n      let instructors;\n\n      if (preFilteredInstructors.length) {\n        instructors = preFilteredInstructors;\n      } else {\n        instructors = allInstructors;\n      }\n\n      return instructors.reduce((finalArr, currentInstructor) => {\n        const {\n          contactInfo: {\n            city\n          }\n        } = currentInstructor;\n\n        if (city === filterLocation && finalArr.indexOf(currentInstructor) === -1) {\n          finalArr.push(currentInstructor);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onSortInstructors\", instructors => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'firstNameAscending':\n          return instructors.sort(firstNameAscending);\n\n        case 'firstNameDescending':\n          return instructors.sort(firstNameDescending);\n\n        case 'lastNameAscending':\n          return instructors.sort(lastNameAscending);\n\n        case 'lastNameDescending':\n          return instructors.sort(lastNameDescending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"getMappableInstructors\", () => {\n      const {\n        filterName,\n        filterLocation,\n        sort\n      } = this.state;\n      const {\n        instructors: allInstructors\n      } = this.props;\n      let instructors;\n\n      if (filterName.length && !filterLocation.length) {\n        instructors = this.onFilterByName();\n      } else if (!filterName.length && filterLocation.length) {\n        instructors = this.onFilterByLocation();\n      } else if (filterName.length && filterLocation.length) {\n        const filteredByName = this.onFilterByName();\n        instructors = this.onFilterByLocation(filteredByName);\n      } else {\n        instructors = allInstructors;\n      }\n\n      if (sort) {\n        return this.onSortInstructors(instructors);\n      }\n\n      return instructors || [];\n    });\n\n    _defineProperty(this, \"checkForFilteredState\", () => {\n      const {\n        filterName,\n        filterLocation\n      } = this.state;\n\n      if (!filterName.length && !filterLocation.length) {\n        this.setState({\n          instructorsAreFiltered: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"mapInstructors\", () => {\n      const instructors = this.getMappableInstructors();\n      return instructors.map((instructor, index) => __jsx(InstructorCard, {\n        index: index,\n        key: instructor.id,\n        instructor: instructor,\n        dropdownIsOpen: this.state.dropdownIsOpen,\n        onSetDropdown: this.onSetDropdown,\n        onCloseDropdown: this.onCloseDropdown,\n        dropdownIndex: this.state.dropdownIndex,\n        onDeleteInstructor: this.onDeleteInstructor,\n        onCloneInstructor: this.onCloneInstructor,\n        onSaveInstructorChanges: this.onSaveInstructorChanges\n      }));\n    });\n\n    this.state = {\n      instructorModalOpen: false,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      instructorsAreFiltered: false,\n      filterName: '',\n      filterLocation: '',\n      sort: ''\n    };\n  }\n\n  render() {\n    const {\n      instructorModalOpen\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(NewInstructorModal, {\n      open: instructorModalOpen,\n      onClose: this.onCloseInstructorModal,\n      onAddNewInstructor: this.onAddNewInstructor\n    }), __jsx(\"div\", {\n      className: \"main-holder grey lighten-5\"\n    }, __jsx(StickyContainer, null, __jsx(Sticky, null, ({\n      style\n    }) => __jsx(\"div\", {\n      className: \"title-row card-panel\",\n      style: _objectSpread2({}, style, {\n        zIndex: 1999\n      })\n    }, __jsx(\"div\", {\n      className: \"mobile-header\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), __jsx(\"h2\", {\n      className: \"h1 white-text\"\n    }, __jsx(\"span\", {\n      className: \"heading-holder\"\n    }, __jsx(\"i\", {\n      className: \"icon-instructors\"\n    }), __jsx(\"span\", {\n      className: \"heading-block\"\n    }, \"Instructors\"))))), __jsx(FilterSection, {\n      onSetSort: this.onSetSort,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredLocationState: this.onSetFilteredLocationState,\n      onUnsetFilteredLocationState: this.onUnsetFilteredLocationState\n    }), __jsx(\"div\", {\n      className: \"content-section\"\n    }, __jsx(\"div\", {\n      className: \"row d-flex-content\"\n    }, this.mapInstructors())))), __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onOpenInstructorModal,\n      className: \"waves-effect waves-teal btn add-btn\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"New Instructor\"));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  instructors: makeSelectInstructors()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetInstructors: instructors => dispatch(setInstructors(instructors))\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(InstructorListPage);","map":null,"metadata":{},"sourceType":"module"}