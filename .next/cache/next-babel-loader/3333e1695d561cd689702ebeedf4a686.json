{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable no-console */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport { toast } from 'react-toastify';\nimport Toast from '../../Toast';\nimport StudentInformation from './components/StudentInformation';\nimport ContactInformation from './components/ContactInformation';\nimport EmailAddress from './components/EmailAddress';\nimport Location from './components/Location';\nimport Instructor from './components/Instructor';\nimport Class from './components/Class';\nimport AccountStatus from './components/AccountStatus';\nimport AccountType from './components/AccountType';\nimport CourseContext from './components/CourseContext';\nimport AccountSettings from './components/AccountSettings';\nimport Actions from './components/Actions';\nimport DeleteAccount from './components/DeleteAccount';\nimport ClassModal from '../ClassModal';\nimport LocationModal from '../../Location/components/LocationModal';\nimport InstructorModal from '../../Instructor/components/InstructorModal';\nimport { nestedEditFieldValidation } from '../../utils/fieldValidation';\n\nclass AccountPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      if (!this.state.originalUser || nextProps.user.id !== this.state.originalUser.id) {\n        const {\n          user: {\n            id,\n            studentInformation,\n            contactInformation,\n            emailAddress,\n            location,\n            instructor,\n            course,\n            courseContext,\n            accountSettings\n          } = {}\n        } = nextProps;\n        const updatedUser = {\n          id,\n          studentInformation,\n          contactInformation,\n          emailAddress,\n          location,\n          instructor,\n          course,\n          courseContext,\n          accountSettings\n        };\n        const {\n          originalUser: originalUserState\n        } = this.state;\n        const originalUser = update(originalUserState, {\n          $merge: nextProps.user\n        });\n        this.setState({\n          originalUser,\n          updatedUser\n        });\n      }\n    });\n\n    _defineProperty(this, \"onOpenLocationModal\", () => this.setState({\n      locationModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseLocationModal\", () => this.setState({\n      locationModalOpen: false\n    }));\n\n    _defineProperty(this, \"onOpenInstructorModal\", () => this.setState({\n      instructorModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseInstructorModal\", () => this.setState({\n      instructorModalOpen: false\n    }));\n\n    _defineProperty(this, \"onOpenClassModal\", () => this.setState({\n      classModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseClassModal\", () => this.setState({\n      classModalOpen: false\n    }));\n\n    _defineProperty(this, \"onSetValidation\", (validation, cb) => this.setState({\n      validation\n    }, cb));\n\n    _defineProperty(this, \"onSaveChanges\", async event => {\n      event.preventDefault(); // const { onSavePassageChanges, onSaveChangesError, onSetPassageValidation } = this.props;\n\n      const {\n        updatedUser\n      } = this.state;\n      const valid = await nestedEditFieldValidation(this.state, this.state.updatedUser, this.onSetValidation, validation => console.warn('validation', validation));\n\n      if (!valid) {\n        // return onSaveChangesError();\n        console.warn('not valid');\n      }\n\n      this.setState({\n        originalUser: this.state.updatedUser\n      }); // return onSavePassageChanges(updatedUser);\n    });\n\n    _defineProperty(this, \"onDeleteAccount\", () => {\n      console.warn('Stubbed out delete user');\n    });\n\n    _defineProperty(this, \"onSendWelcomeEmail\", event => {\n      event.preventDefault();\n      console.warn('Stubbed out send email');\n    });\n\n    _defineProperty(this, \"onSendPasswordResetEmail\", event => {\n      event.preventDefault();\n      console.warn('Stubbed out password reset email');\n    });\n\n    _defineProperty(this, \"onResetPassword\", event => {\n      event.preventDefault();\n      const {\n        actions: {\n          password,\n          confirmPassword\n        }\n      } = this.state;\n\n      if (password !== confirmPassword) {\n        console.warn('Toast is broken, have a console log'); // return this.notify\n      }\n\n      if (!confirmPassword.length) {\n        console.warn('Toast is broken, have a console log'); // return this.notify()\n      }\n\n      return console.warn('stubbed out password reset');\n    });\n\n    _defineProperty(this, \"onRemoveOption\", (optionIndex, section, array) => {\n      const updatedUser = update(this.state.updatedUser, {\n        [section]: {\n          [array]: {\n            $splice: [[optionIndex, 1]]\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    _defineProperty(this, \"initialUserMount\", () => this.state.originalUser.id !== this.props.user.id);\n\n    _defineProperty(this, \"handleActionsChange\", (event, name, checkBox = false) => {\n      const {\n        actions: previousActions\n      } = this.state;\n      let value;\n\n      if (checkBox) {\n        value = !previousActions.ccAdmin;\n      } else {\n        value = event.target.value;\n      }\n\n      const updatedState = update(this.state, {\n        actions: {\n          $merge: {\n            [name]: value\n          }\n        }\n      });\n      this.setState(updatedState);\n    });\n\n    _defineProperty(this, \"handleOptionsChange\", (selectedOptions, section, array) => {\n      const updatedUser = update(this.state.updatedUser, {\n        [section]: {\n          [array]: {\n            $set: selectedOptions\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    _defineProperty(this, \"handleDetailsChange\", (event, name, section, checkBox = false) => {\n      const {\n        updatedUser: previousUserState\n      } = this.state;\n      let value;\n\n      if (checkBox) {\n        value = !previousUserState[section][name];\n      } else {\n        value = event.target ? event.target.value : event;\n      }\n\n      const updatedUser = update(previousUserState, {\n        [section]: {\n          $merge: {\n            [name]: value\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    this.state = {\n      locationModalOpen: false,\n      instructorModalOpen: false,\n      classModalOpen: false,\n      originalUser: {\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        },\n        instructor: {\n          instructors: []\n        },\n        course: {\n          classes: []\n        },\n        courseContext: {\n          courseStartDateOption: '',\n          courseStartDate: '',\n          courseEndDateOption: '',\n          courseEndDate: '',\n          targetTestDate: '',\n          targetScore: '',\n          highSchool: '',\n          graduationYear: ''\n        },\n        accountSettings: {\n          loginBeforeActivation: false,\n          unstructuredCourseMode: false,\n          defaultSessionDuration: '',\n          videoSolutionsRequired: false,\n          preventLogin: false,\n          inactive: false,\n          excludeFromStatistics: false\n        }\n      },\n      updatedUser: {\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        },\n        instructor: {\n          instructors: []\n        },\n        course: {\n          classes: []\n        },\n        courseContext: {\n          courseStartDateOption: '',\n          courseStartDate: '',\n          courseEndDateOption: '',\n          courseEndDate: '',\n          targetTestDate: '',\n          targetScore: '',\n          highSchool: '',\n          graduationYear: ''\n        },\n        accountSettings: {\n          loginBeforeActivation: false,\n          unstructuredCourseMode: false,\n          defaultSessionDuration: '',\n          videoSolutionsRequired: false,\n          preventLogin: false,\n          inactive: false,\n          excludeFromStatistics: false\n        }\n      },\n      actions: {\n        ccAdmin: false,\n        requireUserToChange: false,\n        password: '',\n        confirmPassword: ''\n      },\n      validation: {\n        studentInformation: {\n          firstName: true,\n          lastName: true,\n          gender: true\n        },\n        emailAddress: {\n          email: true\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      user: {\n        id,\n        studentInformation,\n        contactInformation,\n        emailAddress,\n        location,\n        instructor,\n        course,\n        courseContext,\n        accountSettings\n      } = {}\n    } = this.props;\n    const updatedUser = {\n      id,\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n      instructor,\n      course,\n      courseContext,\n      accountSettings\n    };\n    const {\n      originalUser: originalUserState\n    } = this.state;\n    const originalUser = update(originalUserState, {\n      $merge: updatedUser\n    });\n    this.setState({\n      originalUser,\n      updatedUser\n    }); // eslint-disable-line\n  } // TODO: This seems to be working well - confirm that only one isntance of this edit modal is opening on the user edit page\n  // This resets the component state to reflect the details of the next user the user clicks on\n\n\n  render() {\n    const {\n      locationModalOpen,\n      instructorModalOpen,\n      classModalOpen,\n      actions,\n      updatedUser: {\n        studentInformation: updatedStudentInformation,\n        contactInformation: updatedContactInformation,\n        emailAddress: updatedEmailAddress,\n        location: updatedLocation,\n        instructor: updatedInstructor,\n        course: updatedClasses,\n        courseContext: updatedCourseContext,\n        accountSettings: updatedAccountSettings\n      }\n    } = this.state;\n    const {\n      user: {\n        studentInformation,\n        contactInformation,\n        emailAddress,\n        location,\n        instructor,\n        course,\n        courseContext,\n        accountSettings,\n        accountStatus,\n        accountType\n      } = {}\n    } = this.props;\n    return React.createElement(React.Fragment, null, React.createElement(Toast, null), React.createElement(ClassModal, {\n      open: classModalOpen,\n      onClose: this.onCloseClassModal,\n      handleClassChange: this.handleOptionsChange\n    }), React.createElement(LocationModal, {\n      open: locationModalOpen,\n      onClose: this.onCloseLocationModal,\n      handleLocationsChange: selectedLocations => this.handleOptionsChange(selectedLocations, 'location', 'locations')\n    }), React.createElement(InstructorModal, {\n      open: instructorModalOpen,\n      onClose: this.onCloseInstructorModal,\n      handleInstructorsChange: selectedInstructors => this.handleOptionsChange(selectedInstructors, 'instructor', 'instructors')\n    }), React.createElement(\"div\", {\n      className: \"content-section\"\n    }, React.createElement(\"div\", {\n      className: \"content-section-holder\"\n    }, React.createElement(\"div\", {\n      className: \"row mb-0 d-flex-content large\"\n    }, React.createElement(\"div\", {\n      className: \"col s12 l5\"\n    }, React.createElement(StudentInformation, {\n      state: this.initialUserMount() ? studentInformation : updatedStudentInformation,\n      handleDetailsChange: this.handleDetailsChange\n    }), React.createElement(ContactInformation, {\n      state: this.initialUserMount() ? contactInformation : updatedContactInformation,\n      handleDetailsChange: this.handleDetailsChange\n    }), React.createElement(EmailAddress, {\n      state: this.initialUserMount() ? emailAddress : updatedEmailAddress,\n      handleDetailsChange: this.handleDetailsChange\n    })), React.createElement(\"div\", {\n      className: \"col s12 l5\"\n    }, React.createElement(Location, {\n      state: this.initialUserMount() ? location : updatedLocation,\n      onOpenLocationModal: this.onOpenLocationModal,\n      onRemoveLocation: this.onRemoveOption\n    }), React.createElement(Instructor, {\n      state: this.initialUserMount() ? instructor : updatedInstructor,\n      onOpenInstructorModal: this.onOpenInstructorModal,\n      onRemoveInstructor: this.onRemoveOption\n    }), React.createElement(Class, {\n      state: this.initialUserMount() ? course : updatedClasses,\n      onOpenClassModal: this.onOpenClassModal,\n      onRemoveClass: this.onRemoveOption\n    }))), React.createElement(\"div\", {\n      className: \"row mb-0 d-flex-content large sameheight\"\n    }, React.createElement(AccountStatus, {\n      state: accountStatus\n    }), React.createElement(AccountType, {\n      state: accountType\n    })), React.createElement(CourseContext, {\n      state: this.initialUserMount() ? courseContext : updatedCourseContext,\n      handleDetailsChange: this.handleDetailsChange\n    }), React.createElement(AccountSettings, {\n      state: this.initialUserMount() ? accountSettings : updatedAccountSettings,\n      handleDetailsChange: this.handleDetailsChange\n    }), React.createElement(Actions, {\n      state: actions,\n      handleActionsChange: this.handleActionsChange,\n      onResetPassword: this.onResetPassword,\n      onSendWelcomeEmail: this.onSendWelcomeEmail,\n      onSendPasswordResetEmail: this.onSendPasswordResetEmail\n    }), React.createElement(DeleteAccount, {\n      activeButton: accountStatus.status !== 'Activated',\n      onDeleteAccount: this.onDeleteAccount\n    }), React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.onSaveChanges,\n      className: \"btn\"\n    }, \"Save\"))));\n  }\n\n}\n\nexport default AccountPage;","map":null,"metadata":{},"sourceType":"module"}