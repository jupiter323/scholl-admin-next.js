{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport bubbleStyles from '../../../../utils/bubbleStyles'; // need to import modal\n\nvar AnswerRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnswerRow, _React$Component);\n\n  function AnswerRow(props) {\n    var _this;\n\n    _classCallCheck(this, AnswerRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnswerRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"mapLetterBubbles\", function (studentChoice, answer) {\n      var letters = [\"A\", \"B\", \"C\", \"D\"];\n      var _this$state$bubbleSty = _this.state.bubbleStyles,\n          greenFilled = _this$state$bubbleSty.greenFilled,\n          greenBorderOnly = _this$state$bubbleSty.greenBorderOnly,\n          redFilled = _this$state$bubbleSty.redFilled;\n      letters.map(function (letter) {\n        if (letter === answer && letter === studentChoice) {\n          return React.createElement(\"li\", null, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              greenFilled: greenFilled\n            }\n          }, letter));\n        }\n\n        if (letter === answer && letter !== studentChoice) {\n          return React.createElement(\"li\", null, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              greenBorderOnly: greenBorderOnly\n            }\n          }, letter));\n        }\n\n        if (letter !== answer && letter === studentChoice) {\n          return React.createElement(\"li\", null, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              redFilled: redFilled\n            }\n          }, letter));\n        }\n\n        return React.createElement(\"li\", null, React.createElement(\"span\", {\n          className: \"badge-circle badge-circle-bordered\"\n        }, letter));\n      });\n    });\n\n    _this.state = {\n      modalOpen: false,\n      bubbleStyles: bubbleStyles,\n      reviewed: false\n    };\n    return _this;\n  }\n\n  _createClass(AnswerRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props$sampleAns = this.props.sampleAnswers,\n          status = _this$props$sampleAns.status,\n          answer = _this$props$sampleAns.answer,\n          studentChoice = _this$props$sampleAns.studentChoice;\n      return React.createElement(\"li\", {\n        className: \"answers-list-holder\"\n      }, React.createElement(\"div\", {\n        className: \"answer-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col col-120\"\n      }, React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, this.mapLetterBubbles(studentChoice, answer))), React.createElement(\"div\", {\n        className: \"col col-30\"\n      }, React.createElement(\"span\", {\n        className: \"status-info\"\n      }, status)), React.createElement(\"div\", {\n        className: \"col col-43\"\n      }, React.createElement(\"span\", {\n        className: \"play-progress\",\n        \"data-video-id\": \"video001\"\n      }, React.createElement(\"span\", {\n        className: \"play\"\n      }), React.createElement(\"svg\", {\n        viewBox: \"0 0 50 50\",\n        width: \"50\",\n        height: \"50\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, React.createElement(\"circle\", {\n        className: \"circle-static\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      }), React.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      })))), React.createElement(\"div\", {\n        className: \"col col-auto\"\n      }, React.createElement(\"span\", {\n        className: \"status-answer\",\n        style: {\n          color: '#c0272d'\n        }\n      }, React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }), React.createElement(\"b\", {\n        className: \"status-text\"\n      }, \"Review\"))), React.createElement(\"div\", {\n        className: \"dropdown-block col col-35\"\n      }, React.createElement(\"a\", {\n        className: \"modal-trigger\",\n        href: \"#modal_video001\"\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")))));\n    }\n  }]);\n\n  return AnswerRow;\n}(React.Component);\n\nAnswerRow.propTypes = {\n  sampleAnswers: PropTypes.object.isRequired\n};\nexport default AnswerRow;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailTestAnswerSheetComplete\\components\\WritingPage\\components\\AnswerRow\\index.js"],"names":["React","PropTypes","bubbleStyles","AnswerRow","props","studentChoice","answer","letters","state","greenFilled","greenBorderOnly","redFilled","map","letter","modalOpen","reviewed","sampleAnswers","status","mapLetterBubbles","color","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport bubbleStyles from '../../../../utils/bubbleStyles';\r\n// need to import modal\r\n\r\nclass AnswerRow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalOpen: false,\r\n      bubbleStyles,\r\n      reviewed: false,\r\n     }\r\n  };\r\n  mapLetterBubbles = (studentChoice, answer) => {\r\n    const letters = [\"A\", \"B\", \"C\", \"D\"]\r\n    const { bubbleStyles: {greenFilled, greenBorderOnly, redFilled}} = this.state;\r\n    letters.map(letter => {\r\n      if (letter === answer && letter === studentChoice){\r\n        return (\r\n          <li>\r\n          <span className=\"badge-circle badge-circle-bordered\" style={{greenFilled}}>{letter}</span>\r\n        </li>\r\n        )\r\n      }\r\n      if (letter === answer && letter !== studentChoice){\r\n        return (\r\n          <li>\r\n            <span className=\"badge-circle badge-circle-bordered\" style={{greenBorderOnly}}>{letter}</span>\r\n          </li>\r\n        )\r\n      }\r\n      if (letter !== answer && letter === studentChoice){\r\n        return (\r\n          <li>\r\n            <span className=\"badge-circle badge-circle-bordered\" style={{redFilled}}>{letter}</span>\r\n          </li>\r\n        )\r\n      }\r\n      return (\r\n          <li>\r\n            <span className=\"badge-circle badge-circle-bordered\">{letter}</span>\r\n          </li>\r\n        )\r\n      }\r\n    )\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    const { sampleAnswers: {status, answer, studentChoice} } = this.props;\r\n    return (\r\n      <li className=\"answers-list-holder\">\r\n          <div className=\"answer-row row mb-0\">\r\n            <div className=\"col col-120\">\r\n              <ul className=\"answer-list\">\r\n                {this.mapLetterBubbles(studentChoice, answer)}\r\n              </ul>\r\n            </div>\r\n            <div className=\"col col-30\">\r\n              <span className=\"status-info\">{status}</span>\r\n            </div>\r\n            <div className=\"col col-43\">\r\n              <span className=\"play-progress\" data-video-id=\"video001\">\r\n                <span className=\"play\"></span>\r\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <circle className=\"circle-static\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\r\n                  <circle className=\"circle-progress\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\r\n                </svg>\r\n              </span>\r\n            </div>\r\n            <div className=\"col col-auto\">\r\n              <span className=\"status-answer\" style={{color: '#c0272d'}}>\r\n                <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\r\n              </span>\r\n            </div>\r\n            <div className=\"dropdown-block col col-35\">\r\n              {/* modal trigger */}\r\n              <a className='modal-trigger' href=\"#modal_video001\"><i className=\"material-icons dots-icon\">more_vert</i></a>\r\n            </div>\r\n          </div>\r\n        </li>\r\n    )\r\n  }\r\n}\r\n\r\nAnswerRow.propTypes = {\r\n  sampleAnswers: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default AnswerRow;\r\n\r\n"]},"metadata":{},"sourceType":"module"}