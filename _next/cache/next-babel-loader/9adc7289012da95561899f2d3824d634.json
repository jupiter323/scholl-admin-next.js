{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestScorePage/components/TotalScoreCard/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst data = (totalScore, totalPossible) => ({\n  datasets: [{\n    data: [totalScore, totalPossible - totalScore],\n    backgroundColor: ['#32b9ec', 'rgb(234, 234, 234)']\n  }]\n});\n\nclass TotalScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const {\n        subjectScores\n      } = this.props;\n      let currentTotalScore = 0;\n      let deltaScore = 0;\n\n      if (subjectScores && subjectScores instanceof Array) {\n        subjectScores.map(subjectScore => {\n          currentTotalScore += subjectScore.current_score;\n          deltaScore += subjectScore.delta;\n        });\n        this.setState({\n          currentTotalScore,\n          deltaScore\n        });\n      }\n    });\n\n    this.state = {\n      currentTotalScore: 0,\n      deltaScore: 0\n    };\n  }\n\n  render() {\n    const {\n      currentTotalScore,\n      deltaScore\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"col s12 l6 card-width-546\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Your Score \", __jsx(\"span\", {\n      className: \"separator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"|\"), __jsx(\"span\", {\n      className: \"quantity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"400 to 1600\")), __jsx(\"div\", {\n      className: \"card-main-full card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-content center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"chart-block chart-block-total\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(Doughnut, {\n      data: () => data(currentTotalScore, 1600),\n      width: 320,\n      height: 320,\n      options: {\n        cutoutPercentage: 80\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"chart-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"TotalScore\"), __jsx(\"span\", {\n      className: \"value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, currentTotalScore), __jsx(\"span\", {\n      className: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"(\", deltaScore, \")\")))))));\n  }\n\n}\n\nTotalScoreCard.propTypes = {};\nexport default TotalScoreCard;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestScorePage/components/TotalScoreCard/index.js"],"names":["React","PropTypes","Doughnut","data","totalScore","totalPossible","datasets","backgroundColor","TotalScoreCard","Component","constructor","props","subjectScores","currentTotalScore","deltaScore","Array","map","subjectScore","current_score","delta","setState","state","render","cutoutPercentage","propTypes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst data = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#32b9ec', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\nclass TotalScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTotalScore: 0,\n      deltaScore: 0,\n    };\n  }\n\n  componentDidMount = () => {\n    const { subjectScores } = this.props;\n    let currentTotalScore = 0;\n    let deltaScore = 0;\n    if (subjectScores && subjectScores instanceof Array) {\n      subjectScores.map(subjectScore => {\n        currentTotalScore += subjectScore.current_score;\n        deltaScore += subjectScore.delta;\n      });\n      this.setState({\n        currentTotalScore,\n        deltaScore,\n      });\n    }\n  };\n\n  render() {\n    const { currentTotalScore, deltaScore } = this.state;\n    return (\n      <div className=\"col s12 l6 card-width-546\">\n        <div className=\"card-block\">\n          <h2>\n            Your Score <span className=\"separator\">|</span>\n            <span className=\"quantity\">\n              400 to 1600\n            </span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content center-align\">\n              <div className=\"chart-block chart-block-total\">\n                <Doughnut\n                  data={() => data(currentTotalScore, 1600)}\n                  width={320}\n                  height={320}\n                  options={{\n                    cutoutPercentage: 80,\n                  }}\n                />\n                <div className=\"chart-text\">\n                  <span className=\"title\">TotalScore</span>\n                  <span className=\"value\">\n                    {currentTotalScore}\n                  </span>\n                  <span className=\"description\">\n                    ({deltaScore})\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nTotalScoreCard.propTypes = {};\n\nexport default TotalScoreCard;\n"]},"metadata":{},"sourceType":"module"}