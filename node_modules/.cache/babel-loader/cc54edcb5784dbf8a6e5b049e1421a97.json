{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\nimport ClickOffComponentWrapper from '../../../../../../ClickOffComponentWrapper';\n\nvar _data = function data(current, target) {\n  return {\n    datasets: [{\n      data: [current, target - current],\n      backgroundColor: [getProblemCompletionStatusColor(current, target), '#eaeaea']\n    }]\n  };\n};\n\nvar getProblemCompletionStatusColor = function getProblemCompletionStatusColor(solvedProblems, totalProblems) {\n  if (solvedProblems / totalProblems <= .25) {\n    return '#ed1c25';\n  } else if (solvedProblems / totalProblems <= .5) {\n    return '#a005a5';\n  }\n\n  return '#0200fd';\n}; // assigned ? 'card-main card-lesson-detail card-assigned card' : 'card-main card-lesson-detail card'}\n\n\nvar getLessonActivityStatus = function getLessonActivityStatus(assigned, dueDate) {\n  if (assigned && dueDate) {\n    return 'card-main card-lesson-detail card-assigned card';\n  }\n\n  if (!assigned && !dueDate) {\n    return 'card-main card-lesson-detail card-not-assigned card';\n  }\n\n  return 'card-main card-lesson-detail card';\n};\n\nvar LessonCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LessonCard, _React$Component);\n\n  function LessonCard(props) {\n    var _this;\n\n    _classCallCheck(this, LessonCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LessonCard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIsOpen) {\n      return _this.setState({\n        dropdownIsOpen: !dropdownIsOpen\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderLessonIcon\", function (subject) {\n      switch (subject) {\n        case 'Reading':\n          return 'icon-books';\n\n        case 'Writing':\n          return 'icon-hands';\n\n        case 'Math':\n          return 'icon-calculator';\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProblemCount\", function (assigned, totalProblems, solvedProblems) {\n      if (assigned) {\n        return React.createElement(\"span\", {\n          className: \"chart-value chart-value-column\",\n          style: {\n            bottom: '8px',\n            backgroundColor: getProblemCompletionStatusColor(solvedProblems, totalProblems)\n          }\n        }, React.createElement(\"span\", {\n          className: \"chart-count\",\n          \"data-count-up\": true,\n          \"data-start-val\": \"0\",\n          \"data-end-val\": \"4\",\n          \"data-duration\": \"1\"\n        }, React.createElement(\"span\", {\n          className: \"text-large\"\n        }, solvedProblems)), React.createElement(\"span\", {\n          className: \"text-small\"\n        }, \"out of\"), \" \", React.createElement(\"span\", {\n          className: \"text-large\"\n        }, totalProblems));\n      }\n\n      return React.createElement(\"span\", {\n        className: \"chart-value chart-value-column\",\n        style: {\n          bottom: '8px',\n          backgroundColor: '#666'\n        }\n      }, React.createElement(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"0\",\n        \"data-end-val\": \"0\",\n        \"data-duration\": \"1\"\n      }, React.createElement(\"span\", {\n        className: \"text-large\"\n      }, totalProblems), React.createElement(\"span\", {\n        className: \"text-small\"\n      }, \"problems\")));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProblemCompletionStatus\", function (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) {\n      if (completed) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Completed \", React.createElement(\"time\", {\n          dateTime: \"2018-11-18T20:43\"\n        }, completionDate, \" at \", completionTime), completedLate && React.createElement(\"span\", {\n          className: \"status status-late\"\n        }, \" (late)\")));\n      }\n\n      if (availableDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Available \", React.createElement(\"time\", {\n          dateTime: \"2018-12-13\"\n        }, availableDate)), React.createElement(\"p\", null, React.createElement(\"time\", {\n          dateTime: \"2018-12-17\"\n        }, \"(due \", dueDate, \")\")));\n      }\n\n      if (overdue) {\n        return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n          className: \"text-large\",\n          style: {\n            color: '#c1272d'\n          }\n        }, \"Overdue\"));\n      }\n\n      if (!availableDate && dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Due \", React.createElement(\"time\", {\n          dateTime: \"2018-12-15\"\n        }, dueDate)));\n      }\n\n      if (!assigned && !dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Not Assigned\"));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n        className: \"text-large\",\n        style: {\n          color: '#006837'\n        }\n      }, \"Due Today at \", dueTime));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderAlerts\", function (alerts) {\n      if (alerts.length) {\n        return React.createElement(\"div\", {\n          className: \"right-col col s3\"\n        }, React.createElement(\"span\", {\n          className: \"badge-rounded badge red darken-2 white-text\"\n        }, React.createElement(\"b\", {\n          className: \"badge-text\"\n        }, alerts.length), \" \", React.createElement(\"i\", {\n          className: \"icon-flag\"\n        })));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"right-col col s3\"\n      }, \"\\xA0\");\n    });\n\n    _this.state = {\n      test: true,\n      dropdownIsOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(LessonCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var dropdownIsOpen = this.state.dropdownIsOpen;\n      var _this$props = this.props,\n          onDeleteLesson = _this$props.onDeleteLesson,\n          onCloneLesson = _this$props.onCloneLesson,\n          _this$props$lesson = _this$props.lesson,\n          subject = _this$props$lesson.subject,\n          unitNumber = _this$props$lesson.unitNumber,\n          lessonName = _this$props$lesson.lessonName,\n          assigned = _this$props$lesson.assigned,\n          alerts = _this$props$lesson.alerts,\n          lessonType = _this$props$lesson.lessonType,\n          totalProblems = _this$props$lesson.totalProblems,\n          _this$props$lesson$so = _this$props$lesson.solvedProblems,\n          solvedProblems = _this$props$lesson$so === void 0 ? '' : _this$props$lesson$so,\n          passage = _this$props$lesson.passage,\n          dueDate = _this$props$lesson.dueDate,\n          dueTime = _this$props$lesson.dueTime,\n          completed = _this$props$lesson.completed,\n          availableDate = _this$props$lesson.availableDate,\n          completionDate = _this$props$lesson.completionDate,\n          completionTime = _this$props$lesson.completionTime,\n          completedLate = _this$props$lesson.completedLate,\n          overdue = _this$props$lesson.overdue;\n      return React.createElement(\"div\", {\n        className: \"card-main-col col s12 m8 l7 xl5\"\n      }, React.createElement(\"div\", {\n        className: getLessonActivityStatus(assigned, dueDate)\n      }, React.createElement(\"div\", {\n        className: \"card-panel\",\n        style: {\n          backgroundColor: '#666',\n          color: '#fff'\n        }\n      }, React.createElement(\"div\", {\n        className: \"card-panel-row row\"\n      }, React.createElement(\"div\", {\n        className: \"icon-col col s1\"\n      }, React.createElement(\"i\", {\n        className: this.renderLessonIcon(subject)\n      })), React.createElement(\"div\", {\n        className: \"col s9\"\n      }, React.createElement(\"div\", {\n        className: \"card-panel-text center-align\"\n      }, React.createElement(\"div\", {\n        className: \"text-small\"\n      }, subject, \" Unit \", unitNumber), React.createElement(\"div\", {\n        className: \"text-large\"\n      }, lessonName))), React.createElement(\"div\", {\n        className: \"col s1 right-align\"\n      }, React.createElement(\"div\", {\n        className: \"row icons-row\"\n      }, this.renderAlerts(alerts), React.createElement(\"div\", {\n        className: \"dropdown-block col\"\n      }, React.createElement(\"a\", {\n        className: \"dropdown-trigger btn\",\n        href: \"#\",\n        \"data-target\": \"dropdown01\",\n        onClick: function onClick() {\n          return _this2.onSetDropdown(dropdownIsOpen);\n        }\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), dropdownIsOpen ? React.createElement(ClickOffComponentWrapper, {\n        onOuterClick: function onOuterClick() {\n          return _this2.onSetDropdown(dropdownIsOpen);\n        }\n      }, React.createElement(\"ul\", {\n        id: \"dropdown01\",\n        className: \"dropdown-content dropdown-wide\",\n        style: {\n          display: \"block\",\n          opacity: '1',\n          transform: 'scaleX(1) scaleY(1)'\n        }\n      }, React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\",\n        className: \"modal-trigger link-block\"\n      }, \"Edit\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\",\n        onClick: onCloneLesson\n      }, \"Clone\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\"\n      }, \"Show Owner\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\",\n        onClick: onDeleteLesson\n      }, \"Delete\")))) : null))))), React.createElement(\"div\", {\n        className: \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"d-flex sameheight-all row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"chart-container\"\n      }, React.createElement(\"div\", {\n        className: \"chart-holder\"\n      }, React.createElement(Doughnut, {\n        data: function data() {\n          return _data(solvedProblems, totalProblems);\n        },\n        height: 210,\n        options: {\n          circumference: 1.45 * Math.PI,\n          rotation: -3.85,\n          cutoutPercentage: 60,\n          tooltips: false\n        }\n      })), React.createElement(\"div\", {\n        className: \"chart-row\"\n      }, React.createElement(\"div\", {\n        className: \"chart-col chart-start\"\n      }, \"\\xA0\"), React.createElement(\"div\", {\n        className: \"chart-col chart-end\"\n      }, React.createElement(\"span\", {\n        className: \"amount\"\n      }, totalProblems))), React.createElement(\"div\", {\n        className: \"chart-description\"\n      }, React.createElement(\"dl\", {\n        className: \"dl-horizontal\"\n      }, React.createElement(\"dt\", null, \"Time Est:\"), React.createElement(\"dd\", null, \"timeEstimate\")), React.createElement(\"dl\", {\n        className: \"dl-horizontal\"\n      }, React.createElement(\"dt\", null, \"Problems:\"), React.createElement(\"dd\", null, totalProblems))))), React.createElement(\"div\", {\n        className: \"col s6 right-align justify-end\"\n      }, React.createElement(\"dl\", {\n        className: \"dl-horizontal\"\n      }, React.createElement(\"dt\", null, \"Available:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n        dateTime: availableDate\n      }, availableDate))), React.createElement(\"dl\", {\n        className: overdue ? 'dl-horizontal red-text text-darken-3' : 'dl-horizontal'\n      }, !assigned ? React.createElement(\"dt\", null, \"No Due Date\") : [React.createElement(\"dt\", {\n        key: \"0\"\n      }, \"Due:\"), React.createElement(\"dd\", {\n        key: \"1\"\n      }, React.createElement(\"time\", {\n        dateTime: dueDate\n      }, dueDate))]), React.createElement(\"div\", {\n        className: \"align-self-end\"\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded-md blue white-text\"\n      }, \"text\"))))), React.createElement(\"div\", {\n        className: \"card-text\"\n      }, React.createElement(\"dl\", {\n        className: \"dl-horizontal\"\n      }, React.createElement(\"dt\", null, \"p.\", passage), React.createElement(\"dd\", null, \"(\", lessonType, \")\")))));\n    }\n  }]);\n\n  return LessonCard;\n}(React.Component);\n\nLessonCard.propTypes = {\n  lesson: PropTypes.object.isRequired,\n  onDeleteLesson: PropTypes.func.isRequired,\n  onCloneLesson: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n};\nexport default LessonCard;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailLessonList\\components\\FullView\\components\\LessonCard\\index.js"],"names":["React","PropTypes","Doughnut","ClickOffComponentWrapper","data","current","target","datasets","backgroundColor","getProblemCompletionStatusColor","solvedProblems","totalProblems","getLessonActivityStatus","assigned","dueDate","LessonCard","props","dropdownIsOpen","setState","subject","bottom","dueTime","completed","completionDate","completionTime","completedLate","availableDate","overdue","color","alerts","length","state","test","onDeleteLesson","onCloneLesson","lesson","unitNumber","lessonName","lessonType","passage","renderLessonIcon","renderAlerts","onSetDropdown","display","opacity","transform","circumference","Math","PI","rotation","cutoutPercentage","tooltips","Component","propTypes","object","isRequired","func","index","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\nimport ClickOffComponentWrapper from '../../../../../../ClickOffComponentWrapper';\n\nconst data = (current, target) => ({\n  datasets: [{\n    data: [current, target - current],\n    backgroundColor: [\n      getProblemCompletionStatusColor(current, target),\n      '#eaeaea',\n    ],\n  }],\n})\n\nconst getProblemCompletionStatusColor = (solvedProblems, totalProblems) => {\n  if (solvedProblems / totalProblems <= .25) {\n    return '#ed1c25';\n  } else if (solvedProblems / totalProblems <= .5) {\n    return '#a005a5';\n  }\n  return '#0200fd';\n}\n\n// assigned ? 'card-main card-lesson-detail card-assigned card' : 'card-main card-lesson-detail card'}\n\nconst getLessonActivityStatus = (assigned, dueDate) => {\n  if (assigned && dueDate) {\n    return 'card-main card-lesson-detail card-assigned card';\n  }\n  if (!assigned && !dueDate) {\n    return 'card-main card-lesson-detail card-not-assigned card';\n  }\n  return 'card-main card-lesson-detail card';\n}\n\nclass LessonCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: true,\n      dropdownIsOpen: false,\n    };\n  }\n\n  onSetDropdown = (dropdownIsOpen) => this.setState({ dropdownIsOpen: !dropdownIsOpen });\n\n  // eslint-disable-next-line consistent-return\n  renderLessonIcon = (subject) => {\n    switch (subject) {\n      case 'Reading':\n        return 'icon-books';\n      case 'Writing':\n        return 'icon-hands';\n      case 'Math':\n        return 'icon-calculator';\n      default:\n        break;\n    }\n  }\n\n  renderProblemCount = (assigned, totalProblems, solvedProblems) => {\n    if (assigned) {\n      return (\n        <span className=\"chart-value chart-value-column\" style={{ bottom: '8px', backgroundColor: getProblemCompletionStatusColor(solvedProblems, totalProblems) }}>\n          <span className=\"chart-count\" data-count-up data-start-val=\"0\" data-end-val=\"4\" data-duration=\"1\"><span className=\"text-large\">{solvedProblems}</span></span>\n          <span className=\"text-small\">out of</span> <span className=\"text-large\">{totalProblems}</span>\n        </span>\n      )\n    }\n    return (\n      <span className=\"chart-value chart-value-column\" style={{ bottom: '8px', backgroundColor: '#666' }}>\n        <span data-count-up data-start-val=\"0\" data-end-val=\"0\" data-duration=\"1\">\n          <span className=\"text-large\">{totalProblems}</span>\n          <span className=\"text-small\">problems</span>\n        </span>\n      </span>\n    )\n  }\n\n  renderProblemCompletionStatus = (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) => {\n    if (completed) {\n      return (\n        <React.Fragment>\n          <p>Completed <time dateTime=\"2018-11-18T20:43\">{completionDate} at {completionTime}</time>\n            {completedLate && (<span className=\"status status-late\"> (late)</span>)}\n          </p>\n        </React.Fragment>\n      )\n    }\n    if (availableDate) {\n      return (\n        <React.Fragment>\n          <p>Available <time dateTime=\"2018-12-13\">{availableDate}</time></p>\n          <p><time dateTime=\"2018-12-17\">(due {dueDate})</time></p>\n        </React.Fragment>\n      )\n    }\n    if (overdue) {\n      return (\n        <React.Fragment>\n          <strong className=\"text-large\" style={{ color: '#c1272d' }}>Overdue</strong>\n        </React.Fragment>\n      )\n    }\n    if (!availableDate && dueDate) {\n      return (\n        <React.Fragment>\n          <p>Due <time dateTime=\"2018-12-15\">{dueDate}</time></p>\n        </React.Fragment>\n      )\n    }\n    if (!assigned && !dueDate) {\n      return (\n        <React.Fragment>\n          <p>Not Assigned</p>\n        </React.Fragment>\n      )\n    }\n    return (\n      <React.Fragment>\n        <strong className=\"text-large\" style={{ color: '#006837' }}>Due Today at {dueTime}</strong>\n      </React.Fragment>\n    )\n  }\n\n  renderAlerts = (alerts) => {\n    if (alerts.length) {\n      return (\n        <div className=\"right-col col s3\">\n          <span className=\"badge-rounded badge red darken-2 white-text\"><b className=\"badge-text\">{alerts.length}</b> <i className=\"icon-flag\"></i></span>\n        </div>\n      )\n    }\n    return (\n      <div className=\"right-col col s3\">&nbsp;</div>\n    )\n  }\n\n  render() {\n    const { dropdownIsOpen } = this.state;\n    const { onDeleteLesson, onCloneLesson, lesson: { subject, unitNumber, lessonName, assigned, alerts,\n      lessonType, totalProblems, solvedProblems = '', passage, dueDate, dueTime,\n      completed, availableDate, completionDate, completionTime, completedLate, overdue } } = this.props;\n    return (\n      <div className=\"card-main-col col s12 m8 l7 xl5\">\n        <div className={getLessonActivityStatus(assigned, dueDate)}>\n          <div className=\"card-panel\" style={{ backgroundColor: '#666', color: '#fff' }}>\n            <div className=\"card-panel-row row\">\n              <div className=\"icon-col col s1\">\n                <i className={this.renderLessonIcon(subject)}></i>\n              </div>\n              <div className=\"col s9\">\n                <div className=\"card-panel-text center-align\">\n                  <div className=\"text-small\">{subject} Unit {unitNumber}</div>\n                  <div className=\"text-large\">{lessonName}</div>\n                </div>\n              </div>\n              <div className=\"col s1 right-align\">\n                <div className=\"row icons-row\">\n                  {this.renderAlerts(alerts)}\n                  <div className=\"dropdown-block col\">\n                    <a\n                      className='dropdown-trigger btn'\n                      href='#'\n                      data-target='dropdown01'\n                      onClick={() => this.onSetDropdown(dropdownIsOpen)}\n                    ><i className=\"material-icons dots-icon\">more_vert</i></a>\n                    <If condition={dropdownIsOpen}>\n                      <ClickOffComponentWrapper onOuterClick={() => this.onSetDropdown(dropdownIsOpen)}>\n                        <ul id='dropdown01' className='dropdown-content dropdown-wide' style={{ display: \"block\", opacity: '1', transform: 'scaleX(1) scaleY(1)' }}>\n                          <li>\n                            <a href=\"#\" className=\"modal-trigger link-block\">Edit</a>\n                          </li>\n                          <li><a href=\"#!\" onClick={onCloneLesson}>Clone</a></li>\n                          <li><a href=\"#!\">Show Owner</a></li>\n                          <li><a href=\"#!\" onClick={onDeleteLesson}>Delete</a></li>\n                        </ul>\n                      </ClickOffComponentWrapper>\n                    </If>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"card-content\">\n            <div className=\"d-flex sameheight-all row mb-0\">\n              <div className=\"col s6\">\n                <div className=\"chart-container\">\n                  <div className=\"chart-holder\">\n                    <Doughnut\n                      data={() => data(solvedProblems, totalProblems)}\n                      height={210}\n                      options={{\n                        circumference: 1.45 * Math.PI,\n                        rotation: -3.85,\n                        cutoutPercentage: 60,\n                        tooltips: false,\n                      }}\n                    />\n                  </div>\n                  <div className=\"chart-row\">\n                    <div className=\"chart-col chart-start\">&nbsp;</div>\n                    <div className=\"chart-col chart-end\">\n                      <span className=\"amount\">{totalProblems}</span>\n                    </div>\n                  </div>\n                  {/* {this.renderProblemCount(assigned, totalProblems, solvedProblems)} */}\n                  <div className=\"chart-description\">\n                    <dl className=\"dl-horizontal\">\n                      <dt>Time Est:</dt>\n                      <dd>timeEstimate</dd>\n                    </dl>\n                    <dl className=\"dl-horizontal\">\n                      <dt>Problems:</dt>\n                      <dd>{totalProblems}</dd>\n                    </dl>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col s6 right-align justify-end\">\n                <dl className=\"dl-horizontal\">\n                  <dt>Available:</dt>\n                  <dd><time dateTime={availableDate}>{availableDate}</time></dd>\n                </dl>\n                <dl className={overdue ? 'dl-horizontal red-text text-darken-3' : 'dl-horizontal'}>\n                  <Choose>\n                    <When condition={!assigned}>\n                      <dt>No Due Date</dt>\n                    </When>\n                    <Otherwise>\n                      <dt>Due:</dt>\n                      <dd><time dateTime={dueDate}>{dueDate}</time></dd>\n                    </Otherwise>\n                  </Choose>\n                </dl>\n              <div className=\"align-self-end\">\n                <span className={`badge badge-rounded-md blue white-text`}>text</span>\n              </div>\n              </div>\n            </div>\n          </div>\n          \n            <div className=\"card-text\">\n              {/* {this.renderProblemCompletionStatus(dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned)} */}\n              <dl className=\"dl-horizontal\">\n                  <dt>p.{passage}</dt>\n                  <dd>({lessonType})</dd>\n                </dl>\n                {/* <div className=\"center-col col s6 center-align\">\n               \n                  <span className=\"meta-num\">p.{passage} </span>\n               \n                  <span className=\"meta-name\">({lessonType})</span>\n                </div>\n              */}\n        \n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nLessonCard.propTypes = {\n  lesson: PropTypes.object.isRequired,\n  onDeleteLesson: PropTypes.func.isRequired,\n  onCloneLesson: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default LessonCard;\n"]},"metadata":{},"sourceType":"module"}