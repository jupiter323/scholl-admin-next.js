{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport ScoredTestCard from './components/ScoredTestCard';\nimport FilterSection from './components/FilterSection';\nimport { availableDateSort, dueDateSort, completionDateSort, flagsSort } from '../utils';\n\nclass ScoredTestListPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      sort: '',\n      testVersionFilter: '',\n      flagFilter: false,\n      availableDateFilters: [],\n      dueDateFilters: []\n    }));\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIndex,\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", value => this.setState({\n      testVersionFilter: value\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      testVersionFilter: ''\n    }));\n\n    _defineProperty(this, \"onEditTest\", () => console.warn('Pending implementation edit test UI and functionality'));\n\n    _defineProperty(this, \"onResetTest\", () => console.warn('Pending implementation of reset UI and functionality'));\n\n    _defineProperty(this, \"onDeleteTest\", () => console.warn('Pending implementation of delete test UI and functionality'));\n\n    _defineProperty(this, \"onDownloadReport\", () => console.warn('Pending implementation of download report ui and functionality'));\n\n    _defineProperty(this, \"onSortTests\", testSections => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'flags':\n          return testSections.sort(flagsSort);\n\n        case 'dueDate':\n          return testSections.sort(dueDateSort);\n\n        case 'availableDate':\n          return testSections.sort(availableDateSort);\n\n        case 'completionDate':\n          return testSections.sort(completionDateSort);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onFilterByTestVersion\", () => {\n      const {\n        tests,\n        testVersionFilter\n      } = this.state;\n      return tests.reduce((finalArr, currentTest) => {\n        const {\n          version\n        } = currentTest;\n        const testString = version.replace(/\\s/g, \"\").toLowerCase();\n\n        if (testString.indexOf(testVersionFilter) !== -1 && finalArr.indexOf(currentTest) === -1) {\n          finalArr.push(currentTest);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterByDate\", (incomingTests, dateType) => {\n      const {\n        dueDateFilters,\n        availableDateFilters\n      } = this.state;\n      let dateFilters;\n      let tests = incomingTests;\n      const currentDate = moment().format('MM/DD/YY');\n      const currentDateIndex = new Date().getDay();\n      const endOfWeekIndex = 6 - currentDateIndex;\n      const endOfWeekDate = moment().add(endOfWeekIndex, 'days').format('MM/DD/YY');\n\n      if (dateType === 'dueDate') {\n        dateFilters = dueDateFilters;\n\n        if (dateFilters.indexOf('dueToday') !== -1) {\n          tests = tests.filter(test => test.dueDate === currentDate);\n        }\n\n        if (dateFilters.indexOf('dueNextSession') !== -1) {\n          console.warn('Pending decision on how next session date is calculated');\n        }\n\n        if (dateFilters.indexOf('overdue') !== -1) {\n          tests = tests.filter(test => test.dueDate < currentDate);\n        }\n\n        if (dateFilters.indexOf('dueThisWeek') !== -1) {\n          tests = tests.filter(test => test.dueDate >= currentDate && test.dueDate <= endOfWeekDate);\n        }\n      } else {\n        dateFilters = availableDateFilters;\n\n        if (dateFilters.indexOf('future') !== -1) {\n          tests = tests.filter(test => test.availableDate > currentDate);\n        }\n\n        if (dateFilters.indexOf('available') !== -1) {\n          tests = tests.filter(test => test.availableDate <= currentDate);\n        }\n\n        if (dateFilters.indexOf('complete') !== -1) {\n          tests = tests.filter(test => test.completionDate.length);\n        }\n      }\n\n      return tests;\n    });\n\n    _defineProperty(this, \"onFilterTests\", () => {\n      const {\n        dueDateFilters,\n        availableDateFilters,\n        flagFilter,\n        tests: allTests\n      } = this.state;\n      let tests = allTests;\n\n      if (dueDateFilters.length) {\n        tests = this.onFilterByDate(tests, 'dueDate');\n      }\n\n      if (availableDateFilters.length) {\n        tests = this.onFilterByDate(tests, 'availableDate');\n      }\n\n      if (flagFilter) {\n        tests = tests.filter(testSection => testSection.flags.length);\n      }\n\n      return tests;\n    });\n\n    _defineProperty(this, \"getMappableTests\", () => {\n      const {\n        dueDateFilters,\n        availableDateFilters,\n        flagFilter,\n        sort,\n        testVersionFilter,\n        tests\n      } = this.state;\n      let mappableTests = tests;\n\n      if (testVersionFilter.length) {\n        mappableTests = this.onFilterByTestVersion();\n      }\n\n      if (dueDateFilters.length || availableDateFilters.length || flagFilter) {\n        mappableTests = this.onFilterTests();\n      }\n\n      if (sort) {\n        return this.onSortTests(mappableTests);\n      }\n\n      return mappableTests;\n    });\n\n    _defineProperty(this, \"handleFilterClick\", (filterType, filter) => {\n      const {\n        availableDateFilters: currentAvailableDateFilters,\n        dueDateFilters: currentDueDateFilters,\n        flagFilter\n      } = this.state;\n      let modifiedFilterCurrentState;\n      let modifiedFilterName;\n      let modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n\n        case 'availableDate':\n          modifiedFilterCurrentState = currentAvailableDateFilters;\n          modifiedFilterName = 'availableDateFilters';\n          break;\n\n        case 'hasFlags':\n          return this.setState({\n            flagFilter: !flagFilter\n          });\n\n        default:\n          break;\n      }\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        [modifiedFilterName]: modifiedFilterUpdatedState\n      });\n    });\n\n    _defineProperty(this, \"mapScoredTests\", () => this.getMappableTests().map((test, index) => __jsx(ScoredTestCard, {\n      test: test,\n      index: index,\n      key: test.id,\n      onEditTest: this.onEditTest,\n      onResetTest: this.onResetTest,\n      onDeleteTest: this.onDeleteTest,\n      onSetDropdown: this.onSetDropdown,\n      onCloseDropdown: this.onCloseDropdown,\n      onDownloadReport: this.onDownloadReport,\n      dropdownIndex: this.state.dropdownIndex,\n      dropdownIsOpen: this.state.dropdownIsOpen\n    })));\n\n    this.state = {\n      sort: '',\n      testVersionFilter: '',\n      availableDateFilters: [],\n      dueDateFilters: [],\n      flagFilter: false,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      tests: this.props.user.scoredTests\n    };\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(FilterSection, {\n      sort: this.state.sort,\n      onSetSort: this.onSetSort,\n      flagFilter: this.state.flagFilter,\n      onClearFilters: this.onClearFilters,\n      handleFilterClick: this.handleFilterClick,\n      dueDateFilters: this.state.dueDateFilters,\n      availableDateFilters: this.state.availableDateFilters,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState\n    }), __jsx(\"div\", {\n      className: \"content-section\"\n    }, __jsx(\"div\", {\n      className: \"row d-flex-content card-width-366\"\n    }, this.mapScoredTests())));\n  }\n\n}\n\nexport default ScoredTestListPage;","map":null,"metadata":{},"sourceType":"module"}