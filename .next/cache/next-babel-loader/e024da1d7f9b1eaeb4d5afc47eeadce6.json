{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react'; // import PropTypes from 'prop-types';\n\nimport update from 'immutability-helper';\nimport InstructorCard from './components/InstructorCard';\nimport FilterSection from './components/FilterSection';\nimport NewInstructorModal from './components/NewInstructorModal';\nimport sampleInstructorList from '../utils/sampleInstructorList'; // import { saveNewSuccess as savePracticeTestSuccess, saveChangesSuccess, saveNewError as savePracticeTestError } from '../../utils/fieldValidation';\n\nimport { firstNameAscending, firstNameDescending, lastNameAscending, lastNameDescending } from '../../utils/sortFunctions';\n\nclass InstructorListPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIsOpen: true,\n      dropdownIndex\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onOpenInstructorModal\", () => this.setState({\n      instructorModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseInstructorModal\", () => this.setState({\n      instructorModalOpen: false\n    }));\n\n    _defineProperty(this, \"onAddNewInstructor\", newInstructor => this.setState(({\n      instructors\n    }) => ({\n      instructors: [...instructors, newInstructor]\n    })));\n\n    _defineProperty(this, \"onDeleteInstructor\", deletedInstructor => {\n      const updatedState = update(this.state, {\n        instructors: unfilteredInstructors => unfilteredInstructors.filter(instructor => instructor.id !== deletedInstructor.id)\n      });\n      this.setState({\n        instructors: updatedState.instructors\n      });\n    });\n\n    _defineProperty(this, \"onCloneInstructor\", instructor => {\n      const cloneIndex = this.state.instructors.indexOf(instructor);\n      const instructors = update(this.state.instructors, {\n        $splice: [[cloneIndex, 0, instructor]]\n      });\n      this.setState({\n        instructors\n      }, this.onCloseDropdown);\n    });\n\n    _defineProperty(this, \"onSaveInstructorChanges\", updatedInstructor => {\n      const {\n        instructors: originalInstructors\n      } = this.state;\n      const instructorToUpdate = originalInstructors.filter(instructor => instructor.id === updatedInstructor.id)[0];\n      const updatedInstructorIndex = originalInstructors.indexOf(instructorToUpdate);\n      const instructors = update(originalInstructors, {\n        $splice: [[updatedInstructorIndex, 1, updatedInstructor]]\n      }); // saveChangesSuccess();\n\n      this.setState({\n        instructors\n      });\n    });\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      instructorsAreFiltered: true,\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      instructorsAreFiltered: false,\n      filterName: ''\n    }));\n\n    _defineProperty(this, \"onSetFilteredLocationState\", filterLocation => this.setState({\n      instructorsAreFiltered: true,\n      filterLocation\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredLocationState\", () => this.setState({\n      filterLocation: ''\n    }, this.checkForFilteredState));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        instructors,\n        filterName\n      } = this.state;\n      return instructors.reduce((finalArr, currentInstructor) => {\n        const {\n          accountInfo: {\n            lastName,\n            firstName\n          }\n        } = currentInstructor;\n        const instructorString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n\n        if (instructorString.indexOf(filterName) !== -1 && finalArr.indexOf(currentInstructor) === -1) {\n          finalArr.push(currentInstructor);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterByLocation\", (preFilteredInstructors = []) => {\n      const {\n        instructors: allInstructors,\n        filterLocation\n      } = this.state;\n      let instructors;\n\n      if (preFilteredInstructors.length) {\n        instructors = preFilteredInstructors;\n      } else {\n        instructors = allInstructors;\n      }\n\n      return instructors.reduce((finalArr, currentInstructor) => {\n        const {\n          contactInfo: {\n            city\n          }\n        } = currentInstructor;\n\n        if (city === filterLocation && finalArr.indexOf(currentInstructor) === -1) {\n          finalArr.push(currentInstructor);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onSortInstructors\", instructors => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'firstNameAscending':\n          return instructors.sort(firstNameAscending);\n\n        case 'firstNameDescending':\n          return instructors.sort(firstNameDescending);\n\n        case 'lastNameAscending':\n          return instructors.sort(lastNameAscending);\n\n        case 'lastNameDescending':\n          return instructors.sort(lastNameDescending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"getMappableInstructors\", () => {\n      const {\n        filterName,\n        filterLocation,\n        instructors: allInstructors,\n        sort\n      } = this.state;\n      let instructors;\n\n      if (filterName.length && !filterLocation.length) {\n        instructors = this.onFilterByName();\n      } else if (!filterName.length && filterLocation.length) {\n        instructors = this.onFilterByLocation();\n      } else if (filterName.length && filterLocation.length) {\n        const filteredByName = this.onFilterByName();\n        instructors = this.onFilterByLocation(filteredByName);\n      } else {\n        instructors = allInstructors;\n      }\n\n      if (sort) {\n        return this.onSortInstructors(instructors);\n      }\n\n      return instructors;\n    });\n\n    _defineProperty(this, \"checkForFilteredState\", () => {\n      const {\n        filterName,\n        filterLocation\n      } = this.state;\n\n      if (!filterName.length && !filterLocation.length) {\n        this.setState({\n          instructorsAreFiltered: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"mapInstructors\", () => {\n      const instructors = this.getMappableInstructors();\n      return instructors.map((instructor, index) => React.createElement(InstructorCard, {\n        index: index,\n        key: instructor.id,\n        instructor: instructor,\n        dropdownIsOpen: this.state.dropdownIsOpen,\n        onSetDropdown: this.onSetDropdown,\n        onCloseDropdown: this.onCloseDropdown,\n        dropdownIndex: this.state.dropdownIndex,\n        onDeleteInstructor: this.onDeleteInstructor,\n        onCloneInstructor: this.onCloneInstructor,\n        onSaveInstructorChanges: this.onSaveInstructorChanges\n      }));\n    });\n\n    this.state = {\n      instructorModalOpen: false,\n      instructors: sampleInstructorList,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      instructorsAreFiltered: false,\n      filterName: '',\n      filterLocation: '',\n      sort: ''\n    };\n  }\n\n  render() {\n    const {\n      instructorModalOpen\n    } = this.state;\n    return React.createElement(React.Fragment, null, React.createElement(NewInstructorModal, {\n      open: instructorModalOpen,\n      onClose: this.onCloseInstructorModal,\n      onAddNewInstructor: this.onAddNewInstructor\n    }), React.createElement(\"div\", {\n      className: \"main-holder grey lighten-5\"\n    }, React.createElement(\"div\", {\n      className: \"title-row card-panel\"\n    }, React.createElement(\"div\", {\n      className: \"mobile-header\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, React.createElement(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), React.createElement(\"h2\", {\n      className: \"h1 white-text\"\n    }, React.createElement(\"span\", {\n      className: \"heading-holder\"\n    }, React.createElement(\"i\", {\n      className: \"icon-instructors\"\n    }), React.createElement(\"span\", {\n      className: \"heading-block\"\n    }, \"Instructors\")))), React.createElement(FilterSection, {\n      onSetSort: this.onSetSort,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredLocationState: this.onSetFilteredLocationState,\n      onUnsetFilteredLocationState: this.onUnsetFilteredLocationState\n    }), React.createElement(\"div\", {\n      className: \"content-section\"\n    }, React.createElement(\"div\", {\n      className: \"row d-flex-content\"\n    }, this.mapInstructors()))), React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.onOpenInstructorModal,\n      className: \"waves-effect waves-teal btn add-btn\"\n    }, React.createElement(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"New Location\"));\n  }\n\n}\n\nexport default InstructorListPage;","map":null,"metadata":{},"sourceType":"module"}