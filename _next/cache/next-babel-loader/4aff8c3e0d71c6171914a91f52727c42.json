{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { take, call, put, all, takeEvery, debounce, delay } from \"redux-saga/effects\";\nimport { FETCH_STUDENTS, DELETE_STUDENT, UPDATE_STUDENT_ADDRESS, UPDATE_STUDENT_CITY, UPDATE_STUDENT_EMAIL, UPDATE_STUDENT_FIRSTNAME, UPDATE_STUDENT_LASTNAME, UPDATE_STUDENT_PHONE, UPDATE_STUDENT_STATE, UPDATE_STUDENT_ZIP, SEARCH_STUDENTS, GET_TESTS, FETCH_STUDENT_TEST_SECTIONS, FETCH_LESSON_LIST, FETCH_LESSON_LIST_SUCCESS, FETCH_LESSON_LIST_FAIL, FETCH_UNITS, FETCH_STUDENT_LESSON_LIST, FETCH_STUDENT_LESSON_LIST_FAIL, FETCH_STUDENT_LESSSON_LIST_SUCCESS, ASSIGN_STUDENT_LESSON, ASSIGN_STUDENT_LESSON_FAIL, RESET_STUDENT_LESSONS, RESET_STUDENT_LESSONS_SUCCESS, RESET_STUDENT_LESSONS_FAIL, UNASSIGN_STUDENT_LESSON, UNASSIGN_STUDENT_LESSON_SUCCESS, UNASSIGN_STUDENT_LESSON_FAIL, RESCHEDULE_STUDENT_LESSONS, RESCHEDULE_STUDENT_LESSONS_SUCCESS, RESCHEDULE_STUDENT_LESSONS_FAIL, MERGE_STUDENT_LESSON_LISTS, UPDATE_STUDENT_ACTIVATION, UPDATE_STUDENT_ACTIVATION_SUCCESS, UPDATE_STUDENT_ACTIVATION_FAIL, FETCH_SUBJECTS, FETCH_SUBJECTS_SUCCESS, FETCH_STUDENT_LESSON_LIST_DEBOUNCE, EXCUSE_STUDENT_LATENESS, FILTER_LESSONS, FLAG_STUDENT_LESSON_PROBLEM, SET_EXCUSE_STUDENT_LATENESS, ADD_LESSON_ANSWER, ADD_LESSON_ANSWER_SUCCESS, DELETE_STUDENT_TEST, UPDATE_TEST_FLAG, REMOVE_TEST, ADD_STUDENT_ANSWER_TO_TEST, UPDATE_STUDENT_TEST_ANSWER, UPDATE_TEST_STATUS, UPDATE_TEST_STATUS_SUCCESS, ADD_TEST_TO_COMPLETED, REMOVE_TEST_FROM_PREV_LIST, REMOVE_TEST_FROM_LIST, SET_ACTIVE_TEST_SCORES, UPDATE_FLAG_STATUS, UPDATE_FLAG_STATUS_SUCCESS, SET_STUDENT_SECTIONS, ADD_FREE_RESPONSE_ANSWER_TO_TEST, GET_TEST_SCORES } from \"./components/Student/index/constants\";\nimport { CREATE_CLASS, FETCH_CLASSES, UPDATE_CLASS_NAME, UPDATE_CLASS_START_DATE, UPDATE_CLASS_END_DATE, UPDATE_CLASS_DURATION, UPDATE_EXCLUDE_FROM_STATISTICS } from \"./components/Classes/index/constants\";\nimport { FETCH_INSTRUCTORS, SEARCH_INSTRUCTORS, UPDATE_INSTRUCTOR_FIRSTNAME, CREATE_INSTRUCTOR, UPDATE_INSTRUCTOR_LASTNAME, UPDATE_INSTRUCTOR_EMAIL, UPDATE_INSTRUCTOR_STATE, UPDATE_INSTRUCTOR_CITY, UPDATE_INSTRUCTOR_ZIP, UPDATE_INSTRUCTOR_ADDRESS, UPDATE_INSTRUCTOR_PHONE } from \"./components/Instructor/index/constants\";\nimport { SET_CURRENT_USER, FETCH_CURRENT_USER } from './components/User/index/constants';\nimport { FETCH_ALL_LOCATIONS, SET_ALL_LOCATIONS } from './components/Location/index/constants';\nimport { setStudents, setStudentTests, setStudentCompletedTests, setStudentOverDueTests, setStudentAssignedTests, setStudentSections, setUnitFilterOptions, setFetchStudentTestsStatus, sendErrorMessage, resetErrorMessage } from \"./components/Student/index/actions\";\nimport { setInstructors } from \"./components/Instructor/index/actions\";\nimport { setClasses } from \"./components/Classes/index/actions\";\nimport { studentApi, classApi, instructorApi, lessonApi, userApi, locationsApi } from \"./api\";\nconst {\n  fetchStudentsApi,\n  searchStudentsApi,\n  deleteStudentApi,\n  updateStudentAddressApi,\n  updateStudentCityApi,\n  updateStudentEmailApi,\n  updateStudentFirstNameApi,\n  updateStudentLastNameApi,\n  updateStudentPhoneApi,\n  updateStudentStateApi,\n  updateStudentZipApi,\n  fetchTestsByStudentIdApi,\n  fetchStudentTestSectionsApi,\n  fetchLessonListApi,\n  fetchUnitsApi,\n  fetchStudentLessonListApi,\n  assignLessonToStudentApi,\n  resetStudentLessonsApi,\n  updateStudentActivationApi,\n  unAssignLessonFromStudentApi,\n  rescheduleStudentLessonsApi,\n  fetchSubjectsApi,\n  excuseStudentLessonLatenessApi,\n  filterLessonListApi,\n  addStudentLessonProblemFlagApi,\n  addStudentLessonProblemAnswerApi,\n  rescoreStudentLessonApi,\n  deleteStudentTestApi,\n  fetchStudentTestSectionProblemsApi,\n  updateStudentTestQuestionFlagStatusApi,\n  addStudentAnswerToTestApi,\n  updateStudentTestStatusApi,\n  fetchStudentTestScoreApi,\n  addStudentTestQuestionFlagApi\n} = studentApi;\nconst {\n  fetchClassesApi,\n  createClassApi,\n  updateClassNameApi,\n  updateClassStartDateApi,\n  updateClassEndDateApi,\n  updateClassDurationApi,\n  updateClassExcludeFromStatisticsApi\n} = classApi;\nconst {\n  fetchInstructorsApi,\n  searchInstructorsApi,\n  updateInstructorFirstNameApi,\n  updateInstructorLastNameApi,\n  updateInstructorEmailApi,\n  updateInstructorStateApi,\n  updateInstructorCityApi,\n  updateInstructorZipApi,\n  updateInstructorAddressApi,\n  updateInstructorPhoneApi,\n  createNewInstructorApi\n} = instructorApi;\nconst {\n  fetchCurrentUserApi\n} = userApi;\nconst {\n  fetchAllLocationsApi\n} = locationsApi; // Error Message Constants\n\nconst fetchSectionsMessage = 'fetchSectionsMessage';\nconst fetchProblemsMessage = 'fetchProblemsMessage';\nconst testFlagMessage = 'testFlagMessage';\nconst answerTestProblemMessage = 'answerTestProblemMessage';\nconst fetchingStudentTestsMessage = 'fetchingStudentTestsMessage';\n/** ******************************************    STUDENTS    ******************************************* */\n\nexport function* watchForFetchStudents() {\n  while (true) {\n    yield take(FETCH_STUDENTS);\n    yield call(fetchStudents);\n  }\n}\nexport function* fetchStudents() {\n  try {\n    const students = yield call(fetchStudentsApi);\n\n    if (_Array$isArray(students) || students instanceof Array) {\n      yield put(setStudents(students));\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in the fetchStudents saga\", err);\n  }\n}\nexport function* watchForFetchUnitFilterOptions() {\n  while (true) {\n    yield take(FETCH_UNITS);\n    yield call(fetchUnits);\n  }\n}\nexport function* fetchUnits() {\n  try {\n    const {\n      formattedUnits\n    } = yield call(fetchUnitsApi);\n\n    if (_Array$isArray(formattedUnits) || formattedUnits instanceof Array) {\n      yield put(setUnitFilterOptions(formattedUnits));\n    }\n  } catch (err) {\n    console.warn(\"Error occured in the fetchUnits saga\", err);\n  }\n}\nexport function* watchForFetchStudentTestSections() {\n  while (true) {\n    const payload = yield take(FETCH_STUDENT_TEST_SECTIONS);\n    const {\n      postBody: {\n        id,\n        student_test_id\n      }\n    } = payload;\n    yield call(fetchStudentTestSections, id, student_test_id);\n  }\n}\nexport function* fetchStudentTestSections(id, studentTestId) {\n  try {\n    yield put({\n      type: SET_STUDENT_SECTIONS,\n      sections: []\n    });\n    const testSections = yield call(fetchStudentTestSectionsApi, id, studentTestId);\n\n    if (testSections && testSections.message) {\n      return yield put(sendErrorMessage(fetchSectionsMessage, `Error: Something went wrong retrieving sections and problems for this test. You may still view and score essays or try again later.`));\n    }\n\n    let count = 0;\n\n    while (count < testSections.length) {\n      const problems = yield call(fetchStudentTestSectionProblemsApi, id, studentTestId, testSections[count].id);\n\n      if (problems && problems.message) {\n        yield put(sendErrorMessage(fetchProblemsMessage, `Error: Couldn't retrieve one or more sections with problems for this test. Those sections will not be shown. Please try again later.`));\n      }\n\n      testSections[count].problems = problems.data;\n      count++;\n    }\n\n    yield put(resetErrorMessage(fetchSectionsMessage));\n    yield put(setStudentSections(testSections));\n  } catch (err) {\n    sendErrorMessage(fetchSectionsMessage, `Something went wrong retrieving sections for this test.`);\n    console.warn(\"Error occurred in the fetchStudentTestSections saga\", err);\n  }\n}\nexport function* watchForFetchStudentTests() {\n  while (true) {\n    const {\n      user\n    } = yield take(GET_TESTS);\n    yield call(fetchStudentTests, user);\n  }\n}\nexport function* fetchStudentTests(user) {\n  try {\n    const {\n      data: formattedStudentTests\n    } = yield call(fetchTestsByStudentIdApi, user.id);\n\n    if (!formattedStudentTests) {\n      return yield put(sendErrorMessage(fetchingStudentTestsMessage, `Something went wrong when fetching for student tests: ${formattedStudentTests.message}`));\n    }\n\n    yield put(resetErrorMessage(fetchingStudentTestsMessage));\n    yield put(setStudentTests(formattedStudentTests));\n    const sortedTests = {\n      overdues: [],\n      assigneds: [],\n      completes: []\n    }; // sort test into assisend, incompletes\n    //* * using for development purposes pushing :STARTED to assigneds */\n\n    yield formattedStudentTests.forEach(test => {\n      if (test.status === \"ASSIGNED\" || test.status === 'STARTED') {\n        if (test.due_status === 'OVERDUE') {\n          sortedTests.overdues.push(test);\n        } else {\n          sortedTests.assigneds.push(test);\n        }\n      } else if (test.status === 'COMPLETED') {\n        sortedTests.completes.push(test);\n      }\n    }); // Dispatch Action\n\n    yield put(setStudentCompletedTests(sortedTests.completes));\n    yield put(setStudentOverDueTests(sortedTests.overdues));\n    yield put(setStudentAssignedTests(sortedTests.assigneds));\n    yield put(setFetchStudentTestsStatus(true));\n  } catch (err) {\n    yield put(sendErrorMessage(fetchingStudentTestsMessage, `Something went wrong when fetching for student tests: ${err}`));\n    console.warn(\"Error occurred in the fetchStudentTests saga\", err);\n  }\n}\nexport function* watchForSearchStudents() {\n  while (true) {\n    const {\n      filters\n    } = yield take(SEARCH_STUDENTS);\n    yield call(searchStudents, filters);\n  }\n}\nexport function* searchStudents(filters) {\n  try {\n    const students = yield call(searchStudentsApi, filters);\n\n    if (students instanceof Array) {\n      yield put(setStudents(students));\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in searchStudents saga\", err);\n  }\n}\nexport function* watchForDeleteStudent() {\n  while (true) {\n    try {\n      const {\n        id\n      } = yield take(DELETE_STUDENT);\n      const response = yield call(deleteStudentApi, id);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong with deleting a student.\");\n      }\n\n      yield call(fetchStudents);\n    } catch (err) {\n      console.warn(\"Error occured in watchForDeleteStudent\", err);\n    }\n  }\n}\nexport function* watchForUpdateStudentFirstName() {\n  while (true) {\n    try {\n      const {\n        firstName\n      } = yield take(UPDATE_STUDENT_FIRSTNAME);\n      const response = yield call(updateStudentFirstNameApi, firstName);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentFirstNameApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentFirstName saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateStudentLastName() {\n  while (true) {\n    try {\n      const {\n        lastName\n      } = yield take(UPDATE_STUDENT_LASTNAME);\n      const response = yield call(updateStudentLastNameApi, lastName);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentLastNameApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentLastName saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateStudentAddress() {\n  while (true) {\n    try {\n      const {\n        address\n      } = yield take(UPDATE_STUDENT_ADDRESS);\n      const response = yield call(updateStudentAddressApi, address);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentAddressApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentAddress saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateStudentCity() {\n  while (true) {\n    try {\n      const {\n        city\n      } = yield take(UPDATE_STUDENT_CITY);\n      const response = yield call(updateStudentCityApi, city);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentCityApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentCity saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateStudentEmail() {\n  while (true) {\n    try {\n      const {\n        email\n      } = yield take(UPDATE_STUDENT_EMAIL);\n      const response = yield call(updateStudentEmailApi, email);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentEmailApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentEmail saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateStudentPhone() {\n  while (true) {\n    try {\n      const {\n        phone\n      } = yield take(UPDATE_STUDENT_PHONE);\n      const response = yield call(updateStudentPhoneApi, phone);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentPhoneApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentPhone saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateStudentState() {\n  while (true) {\n    try {\n      const {\n        state\n      } = yield take(UPDATE_STUDENT_STATE);\n      const response = yield call(updateStudentStateApi, state);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentStateApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentState saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateStudentZip() {\n  while (true) {\n    try {\n      const {\n        zip\n      } = yield take(UPDATE_STUDENT_ZIP);\n      const response = yield call(updateStudentZipApi, zip);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentZipApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentZip saga\", err);\n    }\n  }\n}\n/** ******************************************    INSTRUCTORS    ******************************************* */\n\nexport function* watchForUpdateInstructorFirstName() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_INSTRUCTOR_FIRSTNAME);\n      const response = yield call(updateInstructorFirstNameApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorFirstNameApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorFirstName saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateInstructorLastName() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_INSTRUCTOR_LASTNAME);\n      const response = yield call(updateInstructorLastNameApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorLastNameApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorLastName saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateInstructorEmail() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_INSTRUCTOR_EMAIL);\n      const response = yield call(updateInstructorEmailApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorEmailApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorEmail saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateInstructorState() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_INSTRUCTOR_STATE);\n      const response = yield call(updateInstructorStateApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorStateApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorState saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateInstructorCity() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_INSTRUCTOR_CITY);\n      const response = yield call(updateInstructorCityApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorCityApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorCity saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateInstructorZip() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_INSTRUCTOR_ZIP);\n      const response = yield call(updateInstructorZipApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorZipApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorZip saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateInstructorAddress() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_INSTRUCTOR_ADDRESS);\n      const response = yield call(updateInstructorAddressApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorAddressApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorAddress saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateInstructorPhone() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_INSTRUCTOR_PHONE);\n      const response = yield call(updateInstructorPhoneApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorPhoneApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorPhone saga\", err);\n    }\n  }\n}\nexport function* watchForCreateInstructor() {\n  while (true) {\n    try {\n      const {\n        instructor\n      } = yield take(CREATE_INSTRUCTOR);\n      const response = yield call(createNewInstructorApi, instructor);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in createNewInstructorApi.\");\n      }\n\n      yield call(fetchInstructors);\n    } catch (err) {\n      console.warn(\"Error occured in watchForCreateInstructor saga\", err);\n    }\n  }\n}\nexport function* watchForFetchInstructors() {\n  while (true) {\n    yield take(FETCH_INSTRUCTORS);\n    yield call(fetchInstructors);\n  }\n}\nexport function* fetchInstructors() {\n  try {\n    const {\n      formattedInstructors\n    } = yield call(fetchInstructorsApi);\n\n    if (formattedInstructors instanceof Array) {\n      yield put(setInstructors(formattedInstructors));\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in fetchInstructors saga\", err);\n  }\n}\nexport function* watchForSearchInstructors() {\n  while (true) {\n    const {\n      filters\n    } = yield take(SEARCH_INSTRUCTORS);\n    yield call(searchInstructors, filters);\n  }\n}\nexport function* searchInstructors(filters) {\n  try {\n    const instructors = yield call(searchInstructorsApi, filters);\n\n    if (instructors instanceof Array) {\n      yield put(setInstructors(instructors));\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in searchInstructors saga\", err);\n  }\n}\n/** ******************************************    CLASSES    ******************************************* */\n\nexport function* watchForCreateClass() {\n  while (true) {\n    const {\n      newClass\n    } = yield take(CREATE_CLASS);\n    console.warn(\"saga yaaay!\", newClass);\n    yield call(createClass, newClass);\n  }\n}\nexport function* createClass(newClass) {\n  try {\n    const response = yield call(createClassApi, newClass);\n\n    if (response.exception && response.exception.length) {\n      console.warn(\"Error occurred in createClass saga\", response);\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in createClass saga\", err);\n  }\n}\nexport function* watchForFetchClasses() {\n  while (true) {\n    yield take(FETCH_CLASSES);\n    yield call(fetchClasses);\n  }\n}\nexport function* fetchClasses() {\n  try {\n    const classes = yield call(fetchClassesApi);\n\n    if (_Array$isArray(classes) || classes instanceof Array) {\n      yield put(setClasses(classes));\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in the fetchClasses saga\", err);\n  }\n}\nexport function* watchForUpdateClassName() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_CLASS_NAME);\n      const response = yield call(updateClassNameApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateClassNameApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateClassName saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateClassStartDate() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_CLASS_START_DATE);\n      const response = yield call(updateClassStartDateApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateClassStartDateApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateClassStartDate saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateClassEndDate() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_CLASS_END_DATE);\n      const response = yield call(updateClassEndDateApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateClassEndDateApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateClassEndDate saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateClassDuration() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_CLASS_DURATION);\n      const response = yield call(updateClassDurationApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateClassDurationApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateClassDuration saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateClassExcludeFromStatistics() {\n  while (true) {\n    try {\n      const {\n        value\n      } = yield take(UPDATE_EXCLUDE_FROM_STATISTICS);\n      const response = yield call(updateClassExcludeFromStatisticsApi, value);\n\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateClassExcludeFromStatisticsApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateClassExcludeFromStatistics saga\", err);\n    }\n  }\n}\n/** ******************************************    LESSONS    ******************************************* */\n\nfunction* watchForFetchLesson() {\n  yield takeEvery(FETCH_LESSON_LIST, handleFetchLesson);\n}\n\nfunction* handleFetchLesson() {\n  try {\n    const lessons = yield call(fetchLessonListApi);\n\n    if (_Array$isArray(lessons) || lessons instanceof Array) {\n      yield put({\n        type: FETCH_LESSON_LIST_SUCCESS,\n        payload: lessons.map(lesson => _objectSpread({}, lesson, {\n          selected: false,\n          status: 'NOTASSIGNED'\n        }))\n      });\n      yield put({\n        type: MERGE_STUDENT_LESSON_LISTS\n      });\n    }\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchLesson saga\", error);\n    yield put({\n      type: FETCH_LESSON_LIST_FAIL,\n      payload: error\n    });\n  }\n}\n\nfunction* watchForFetchStudentLesson() {\n  yield takeEvery(FETCH_STUDENT_LESSON_LIST, handleFetchStudentLessonList);\n}\n\nfunction* watchForFetchStudentLessonDebounce() {\n  yield debounce(1000, FETCH_STUDENT_LESSON_LIST_DEBOUNCE, handleFetchStudentLessonList);\n}\n\nfunction* handleFetchStudentLessonList(action) {\n  try {\n    const studentLessonList = yield call(fetchStudentLessonListApi, action.postBody.id, action.postBody.studentToken);\n    yield put({\n      type: FETCH_STUDENT_LESSSON_LIST_SUCCESS,\n      payload: studentLessonList.map(lesson => _objectSpread({}, lesson, {\n        selected: false\n      }))\n    });\n    yield put({\n      type: MERGE_STUDENT_LESSON_LISTS\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchStudentLesson saga\", error);\n    yield put({\n      type: FETCH_STUDENT_LESSON_LIST_FAIL\n    });\n  }\n}\n\nfunction* watchForAssignLesson() {\n  yield takeEvery(ASSIGN_STUDENT_LESSON, handleAssignLesson);\n}\n\nfunction* handleAssignLesson(action) {\n  try {\n    yield call(assignLessonToStudentApi, action.lesson);\n    yield put({\n      type: FETCH_STUDENT_LESSON_LIST_DEBOUNCE,\n      postBody: {\n        id: action.lesson.student_id\n      }\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchLesson saga\", error);\n    yield put({\n      type: ASSIGN_STUDENT_LESSON_FAIL,\n      payload: error\n    });\n  }\n}\n\nfunction* watchForResetLesson() {\n  yield takeEvery(RESET_STUDENT_LESSONS, handleResetLessons);\n}\n\nfunction* handleResetLessons(action) {\n  try {\n    yield call(resetStudentLessonsApi, {\n      student_lesson_ids: action.lessons\n    });\n    yield put({\n      type: RESET_STUDENT_LESSONS_SUCCESS,\n      payload: action.lessons\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleResetLessons saga\", error);\n    yield put({\n      type: RESET_STUDENT_LESSONS_FAIL,\n      payload: error\n    });\n  }\n}\n\nfunction* watchForUpdateStudentActivation() {\n  yield takeEvery(UPDATE_STUDENT_ACTIVATION, handleUpdateStudentActivation);\n}\n\nfunction* handleUpdateStudentActivation(action) {\n  try {\n    yield call(updateStudentActivationApi, action.studentInfo);\n    yield put({\n      type: UPDATE_STUDENT_ACTIVATION_SUCCESS\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleUpdateStudentActivation saga\", error);\n    yield put({\n      type: UPDATE_STUDENT_ACTIVATION_FAIL,\n      payload: error\n    });\n  }\n}\n\nfunction* watchForUnAssignLesson() {\n  yield takeEvery(UNASSIGN_STUDENT_LESSON, handleUnAssignLesson);\n}\n\nfunction* handleUnAssignLesson(action) {\n  try {\n    yield call(unAssignLessonFromStudentApi, {\n      student_lesson_ids: action.lesson\n    });\n    yield put({\n      type: UNASSIGN_STUDENT_LESSON_SUCCESS,\n      payload: action.lesson\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleUnAssignLesson saga\", error);\n    yield put({\n      type: UNASSIGN_STUDENT_LESSON_FAIL,\n      payload: error\n    });\n  }\n}\n\nfunction* watchForRescheduleStudentLessons() {\n  yield takeEvery(RESCHEDULE_STUDENT_LESSONS, handleRescheduleStudentLessons);\n}\n\nfunction* handleRescheduleStudentLessons(action) {\n  try {\n    yield call(rescheduleStudentLessonsApi, action.studentLessonData);\n    yield put({\n      type: RESCHEDULE_STUDENT_LESSONS_SUCCESS,\n      payload: action.studentLessonData\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleRescheduleStudentLessons saga\", error);\n    yield put({\n      type: RESCHEDULE_STUDENT_LESSONS_FAIL,\n      payload: error\n    });\n  }\n}\n\nfunction* watchForFetchSubjects() {\n  yield takeEvery(FETCH_SUBJECTS, handleFetchSubjects);\n}\n\nfunction* handleFetchSubjects() {\n  try {\n    const response = yield call(fetchSubjectsApi);\n    const newSubjectObject = {};\n    response.forEach(subject => {\n      newSubjectObject[subject.id] = subject.name;\n    });\n    yield put({\n      type: FETCH_SUBJECTS_SUCCESS,\n      payload: newSubjectObject\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchSubjects saga\", error);\n  }\n}\n\nexport function* watchForFetchCurrentUser() {\n  while (true) {\n    yield take(FETCH_CURRENT_USER);\n    yield call(handleFetchCurrentUser);\n  }\n}\n\nfunction* handleFetchCurrentUser() {\n  try {\n    const response = yield call(fetchCurrentUserApi);\n\n    if (response) {\n      yield put({\n        type: SET_CURRENT_USER,\n        value: response\n      });\n    }\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchCurrentUser saga\", error);\n  }\n}\n\nfunction* watchForExcuseStudentLateness() {\n  yield takeEvery(EXCUSE_STUDENT_LATENESS, handleExcuseStudentLateness);\n}\n\nfunction* handleExcuseStudentLateness(action) {\n  try {\n    yield call(excuseStudentLessonLatenessApi, action.lessons);\n    yield put({\n      type: SET_EXCUSE_STUDENT_LATENESS,\n      payload: action.lessons\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleExcuseStudentLateness saga\", error);\n  }\n}\n\nfunction* watchForFilterLessons() {\n  yield debounce(200, FILTER_LESSONS, handleFilterLessons);\n}\n\nfunction* handleFilterLessons(action) {\n  try {\n    const lessons = yield call(filterLessonListApi, action.filters);\n\n    if (lessons && lessons instanceof Array) {\n      yield put({\n        type: FETCH_LESSON_LIST_SUCCESS,\n        payload: lessons.map(lesson => _objectSpread({}, lesson, {\n          selected: false,\n          status: 'NOTASSIGNED'\n        }))\n      });\n      yield put({\n        type: MERGE_STUDENT_LESSON_LISTS\n      });\n    }\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFilterLessons saga\", error);\n  }\n}\n\nfunction* watchForFlagStudentLessonProblem() {\n  yield takeEvery(FLAG_STUDENT_LESSON_PROBLEM, handleFlagStudentLessonProblem);\n}\n\nfunction* handleFlagStudentLessonProblem(action) {\n  try {\n    yield call(addStudentLessonProblemFlagApi, action.lesson);\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFlagStudentLessonProblem saga\", error);\n  }\n}\n\nfunction* watchForFetchAllLocations() {\n  const value = yield take(FETCH_ALL_LOCATIONS);\n  yield call(handleFetchAllLocations, value.user_id);\n}\n\nfunction* handleFetchAllLocations(id) {\n  try {\n    const locations = yield call(fetchAllLocationsApi, id);\n    yield put({\n      type: SET_ALL_LOCATIONS,\n      payload: locations\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchAllLocations saga\", error);\n  }\n}\n\nfunction* watchForAnswerStudentLessonProblem() {\n  yield takeEvery(ADD_LESSON_ANSWER, handleAnswerStudentLessonProblem);\n}\n\nfunction* handleAnswerStudentLessonProblem(action) {\n  try {// @TODO will come back to this after fix/edit-answer-bubbles-rescoring gets merged\n    // const addAnswerResponse = yield call(addStudentLessonProblemAnswerApi);\n    // const rescoreLessonResponse = yield call(rescoreStudentLessonApi)\n    // yield put({\n    //   type: ADD_LESSON_ANSWER,\n    //   payload: locations,\n    // });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleAnswerStudentLessonProblem saga\", error);\n  }\n}\n\nfunction* watchForDeleteStudentTest() {\n  yield takeEvery(DELETE_STUDENT_TEST, handleDeleteStudentTest);\n}\n\nfunction* handleDeleteStudentTest(action) {\n  try {\n    const payload = {\n      student_test_id: action.studentTestId\n    };\n    const response = yield call(deleteStudentTestApi, payload);\n\n    if (response && response.message) {\n      return console.warn(\"Error occurred in the handleDeleteStudentTest saga\", error);\n    }\n\n    yield put({\n      type: REMOVE_TEST,\n      testType: action.testType,\n      studentTestId: action.studentTestId\n    });\n    yield put({\n      type: REMOVE_TEST_FROM_LIST,\n      studentTestId: action.studentTestId\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleDeleteStudentTest saga\", error);\n  }\n}\n\nfunction* watchForMarkAllTestFlagsReviewed() {\n  yield takeEvery(UPDATE_TEST_FLAG, handleMarkAllFlagsReviewed);\n}\n\nfunction* handleMarkAllFlagsReviewed(action) {\n  try {\n    const sections = yield call(fetchStudentTestSectionsApi, action.studentId, action.studentTestId);\n    const reviewedTestIds = [];\n    let count = 0;\n\n    while (count < sections.length) {\n      const {\n        data: problems\n      } = yield call(fetchStudentTestSectionProblemsApi, action.studentId, action.studentTestId, sections[count].id);\n      const problemAmount = problems.problems.length;\n      let problemCount = 0;\n\n      while (problemCount < problemAmount) {\n        const flagData = problems.problems[problemCount].flag;\n\n        if (flagData.id && flagData.status === 'FLAGGED') {\n          const payload = {\n            status: 'REVIEWED',\n            flag_id: flagData.id,\n            student_test_id: action.studentTestId\n          };\n          yield call(updateStudentTestQuestionFlagStatusApi, payload);\n          reviewedTestIds.push(action.studentTestId);\n        }\n\n        problemCount++;\n      }\n\n      count++;\n    } // Dispatch to update redux store\n\n  } catch (error) {\n    console.warn(\"Error occurred in the handleUpdateFlagStatus saga\", error);\n  }\n}\n\nfunction* watchForAddStudentAnswerToTest() {\n  yield takeEvery(ADD_STUDENT_ANSWER_TO_TEST, handleAddStudentAnswerToTest);\n}\n\nfunction* watchForAddStudentAnswerToTestDebounce() {\n  yield debounce(500, ADD_FREE_RESPONSE_ANSWER_TO_TEST, handleAddStudentAnswerToTest);\n}\n\nfunction* handleAddStudentAnswerToTest(action) {\n  try {\n    const response = yield call(addStudentAnswerToTestApi, action.payload);\n\n    if (response && response.message) {\n      yield put(sendErrorMessage(answerTestProblemMessage, `Something went wrong adding an answer to this problem. Your answer will not be recorded. Please try again later.`));\n      yield put(resetErrorMessage(answerTestProblemMessage));\n      return console.warn(\"Error occurred in the handleAddStudentAnswerToTest saga\", response.message);\n    }\n\n    yield put({\n      type: UPDATE_STUDENT_TEST_ANSWER,\n      sectionId: action.sectionId,\n      payload: action.payload\n    });\n    yield put(resetErrorMessage(answerTestProblemMessage));\n  } catch (error) {\n    yield put(sendErrorMessage(answerTestProblemMessage, `Something went wrong adding an answer to this problem. Please try again.`));\n    console.warn(\"Error occurred in the handleAddStudentAnswerToTest saga\", error);\n  }\n}\n\nfunction* watchForUpdateTestStatus() {\n  yield takeEvery(UPDATE_TEST_STATUS, handleUpdateTestStatus);\n}\n\nfunction* handleUpdateTestStatus(action) {\n  try {\n    const response = yield call(updateStudentTestStatusApi, action.payload);\n\n    if (response && response.message && action.payload.status === \"COMPLETED\") {\n      console.warn(\"Error occurred in the handleUpdateTestStatus saga\", response.message);\n      return yield put(sendErrorMessage(\"updateTestStatusMsg\", `Something went wrong updating this test to ${action.payload.status}. Please try opening and resubmitting this test later.`));\n    }\n\n    yield put({\n      type: UPDATE_TEST_STATUS_SUCCESS,\n      payload: action.payload\n    });\n\n    if (action.payload.status === \"COMPLETED\") {\n      yield put({\n        type: ADD_TEST_TO_COMPLETED,\n        payload: action.payload,\n        testList: action.currentStatus\n      });\n      yield put({\n        type: REMOVE_TEST_FROM_PREV_LIST,\n        payload: action.payload,\n        testList: action.currentStatus\n      });\n      yield delay(1500);\n      const response = yield call(fetchStudentTestScoreApi, action.studentId, action.payload.student_test_id);\n\n      if (response && response.message) {\n        console.warn(`Error occurred in the handleFetchActiveTestScores saga: ${response.message}`);\n        return yield put(sendErrorMessage(\"fetchScoresMsg\", \"Something went wrong fetching scores for this test. Please try opening this test from the completed test section to view scores.\"));\n      }\n\n      if (!response.data.essay) {\n        response.data.essay = {\n          analysis: \"\",\n          reading: \"\",\n          writing: \"\"\n        };\n      }\n\n      yield put({\n        type: SET_ACTIVE_TEST_SCORES,\n        scores: _objectSpread({}, response.data, {\n          student_test_id: action.payload.student_test_id\n        })\n      });\n      yield put(resetErrorMessage(\"fetchScoresMsg\"));\n      yield put(resetErrorMessage(\"updateTestStatusMsg\"));\n    }\n  } catch (error) {\n    console.warn(\"Error occurred in the handleUpdateTestStatus saga\", error);\n  }\n}\n\nfunction* watchForUpdateTestFlagStatus() {\n  yield takeEvery(UPDATE_FLAG_STATUS, handleUpdateTestFlagStatus);\n}\n\nfunction* handleUpdateTestFlagStatus(action) {\n  try {\n    if (action.status === \"FLAGGED\" && !action.payload.flag_id) {\n      const response = yield call(addStudentTestQuestionFlagApi, action.payload);\n\n      if (response && response.message) {\n        return yield put(sendErrorMessage(testFlagMessage, `Something went wrong adding a flag to this problem: ${response.message}`));\n      }\n\n      action.question.flag.id = response.data.id;\n    } else {\n      const response = yield call(updateStudentTestQuestionFlagStatusApi, action.payload);\n\n      if (response && response.message) {\n        return yield put(sendErrorMessage(testFlagMessage, `Something went wrong updating the flag status of this problem: ${response.message}`));\n      }\n    }\n\n    yield put(resetErrorMessage(testFlagMessage));\n    yield put({\n      type: UPDATE_FLAG_STATUS_SUCCESS,\n      sectionId: action.question.test_section_id,\n      question: action.question,\n      status: action.status\n    });\n  } catch (error) {\n    yield put(sendErrorMessage(testFlagMessage, `Something went wrong updating the flag status of this problem: ${error}`));\n    console.warn(\"Error occurred in the handleUpdateTestFlagStatus saga\", error);\n  }\n}\n\nfunction* watchForFetchActiveTestScores() {\n  yield takeEvery(GET_TEST_SCORES, handleFetchActiveTestScores);\n}\n\nfunction* handleFetchActiveTestScores(action) {\n  try {\n    const response = yield call(fetchStudentTestScoreApi, action.payload.studentId, action.payload.student_test_id);\n\n    if (response && response.message) {\n      console.warn(`Error occurred in the handleFetchActiveTestScores saga: ${response.message}`);\n      return yield put(sendErrorMessage(\"fetchScoresMsg\", \"Something went wrong fetching scores.\"));\n    }\n\n    yield put(resetErrorMessage(\"fetchScoresMsg\"));\n\n    if (!response.data.essay) {\n      response.data.essay = {\n        analysis: \"\",\n        reading: \"\",\n        writing: \"\"\n      };\n    }\n\n    yield put({\n      type: SET_ACTIVE_TEST_SCORES,\n      scores: _objectSpread({}, response.data, {\n        student_test_id: action.payload.student_test_id\n      })\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchActiveTestScores saga\", error);\n    return yield put(sendErrorMessage(\"fetchScoresMsg\", \"Something went wrong fetching scores.\"));\n  }\n}\n\nexport default function* defaultSaga() {\n  yield all([watchForFetchStudents(), watchForFetchStudentTests(), watchForFetchStudentTestSections(), watchForSearchStudents(), watchForDeleteStudent(), watchForUpdateStudentFirstName(), watchForUpdateStudentLastName(), watchForUpdateStudentAddress(), watchForUpdateStudentCity(), watchForUpdateStudentEmail(), watchForUpdateStudentPhone(), watchForUpdateStudentState(), watchForUpdateStudentZip(), watchForCreateClass(), watchForFetchInstructors(), watchForSearchInstructors(), watchForUpdateInstructorFirstName(), watchForUpdateInstructorLastName(), watchForUpdateInstructorEmail(), watchForUpdateInstructorState(), watchForUpdateInstructorCity(), watchForUpdateInstructorZip(), watchForUpdateInstructorAddress(), watchForUpdateInstructorPhone(), watchForCreateInstructor(), watchForFetchClasses(), watchForUpdateClassStartDate(), watchForUpdateClassEndDate(), watchForUpdateClassExcludeFromStatistics(), watchForUpdateClassName(), watchForUpdateClassDuration(), watchForFetchLesson(), watchForFetchUnitFilterOptions(), watchForFetchStudentLesson(), watchForAssignLesson(), watchForResetLesson(), watchForUpdateStudentActivation(), watchForUnAssignLesson(), watchForRescheduleStudentLessons(), watchForFetchSubjects(), watchForFetchCurrentUser(), watchForFetchStudentLessonDebounce(), watchForExcuseStudentLateness(), watchForFilterLessons(), watchForFlagStudentLessonProblem(), watchForFetchAllLocations(), watchForAnswerStudentLessonProblem(), watchForDeleteStudentTest(), watchForMarkAllTestFlagsReviewed(), watchForAddStudentAnswerToTest(), watchForUpdateTestStatus(), watchForAddStudentAnswerToTestDebounce(), watchForUpdateTestFlagStatus(), watchForFetchActiveTestScores()]);\n}","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/sagas.js"],"names":["take","call","put","all","takeEvery","debounce","delay","FETCH_STUDENTS","DELETE_STUDENT","UPDATE_STUDENT_ADDRESS","UPDATE_STUDENT_CITY","UPDATE_STUDENT_EMAIL","UPDATE_STUDENT_FIRSTNAME","UPDATE_STUDENT_LASTNAME","UPDATE_STUDENT_PHONE","UPDATE_STUDENT_STATE","UPDATE_STUDENT_ZIP","SEARCH_STUDENTS","GET_TESTS","FETCH_STUDENT_TEST_SECTIONS","FETCH_LESSON_LIST","FETCH_LESSON_LIST_SUCCESS","FETCH_LESSON_LIST_FAIL","FETCH_UNITS","FETCH_STUDENT_LESSON_LIST","FETCH_STUDENT_LESSON_LIST_FAIL","FETCH_STUDENT_LESSSON_LIST_SUCCESS","ASSIGN_STUDENT_LESSON","ASSIGN_STUDENT_LESSON_FAIL","RESET_STUDENT_LESSONS","RESET_STUDENT_LESSONS_SUCCESS","RESET_STUDENT_LESSONS_FAIL","UNASSIGN_STUDENT_LESSON","UNASSIGN_STUDENT_LESSON_SUCCESS","UNASSIGN_STUDENT_LESSON_FAIL","RESCHEDULE_STUDENT_LESSONS","RESCHEDULE_STUDENT_LESSONS_SUCCESS","RESCHEDULE_STUDENT_LESSONS_FAIL","MERGE_STUDENT_LESSON_LISTS","UPDATE_STUDENT_ACTIVATION","UPDATE_STUDENT_ACTIVATION_SUCCESS","UPDATE_STUDENT_ACTIVATION_FAIL","FETCH_SUBJECTS","FETCH_SUBJECTS_SUCCESS","FETCH_STUDENT_LESSON_LIST_DEBOUNCE","EXCUSE_STUDENT_LATENESS","FILTER_LESSONS","FLAG_STUDENT_LESSON_PROBLEM","SET_EXCUSE_STUDENT_LATENESS","ADD_LESSON_ANSWER","ADD_LESSON_ANSWER_SUCCESS","DELETE_STUDENT_TEST","UPDATE_TEST_FLAG","REMOVE_TEST","ADD_STUDENT_ANSWER_TO_TEST","UPDATE_STUDENT_TEST_ANSWER","UPDATE_TEST_STATUS","UPDATE_TEST_STATUS_SUCCESS","ADD_TEST_TO_COMPLETED","REMOVE_TEST_FROM_PREV_LIST","REMOVE_TEST_FROM_LIST","SET_ACTIVE_TEST_SCORES","UPDATE_FLAG_STATUS","UPDATE_FLAG_STATUS_SUCCESS","SET_STUDENT_SECTIONS","ADD_FREE_RESPONSE_ANSWER_TO_TEST","GET_TEST_SCORES","CREATE_CLASS","FETCH_CLASSES","UPDATE_CLASS_NAME","UPDATE_CLASS_START_DATE","UPDATE_CLASS_END_DATE","UPDATE_CLASS_DURATION","UPDATE_EXCLUDE_FROM_STATISTICS","FETCH_INSTRUCTORS","SEARCH_INSTRUCTORS","UPDATE_INSTRUCTOR_FIRSTNAME","CREATE_INSTRUCTOR","UPDATE_INSTRUCTOR_LASTNAME","UPDATE_INSTRUCTOR_EMAIL","UPDATE_INSTRUCTOR_STATE","UPDATE_INSTRUCTOR_CITY","UPDATE_INSTRUCTOR_ZIP","UPDATE_INSTRUCTOR_ADDRESS","UPDATE_INSTRUCTOR_PHONE","SET_CURRENT_USER","FETCH_CURRENT_USER","FETCH_ALL_LOCATIONS","SET_ALL_LOCATIONS","setStudents","setStudentTests","setStudentCompletedTests","setStudentOverDueTests","setStudentAssignedTests","setStudentSections","setUnitFilterOptions","setFetchStudentTestsStatus","sendErrorMessage","resetErrorMessage","setInstructors","setClasses","studentApi","classApi","instructorApi","lessonApi","userApi","locationsApi","fetchStudentsApi","searchStudentsApi","deleteStudentApi","updateStudentAddressApi","updateStudentCityApi","updateStudentEmailApi","updateStudentFirstNameApi","updateStudentLastNameApi","updateStudentPhoneApi","updateStudentStateApi","updateStudentZipApi","fetchTestsByStudentIdApi","fetchStudentTestSectionsApi","fetchLessonListApi","fetchUnitsApi","fetchStudentLessonListApi","assignLessonToStudentApi","resetStudentLessonsApi","updateStudentActivationApi","unAssignLessonFromStudentApi","rescheduleStudentLessonsApi","fetchSubjectsApi","excuseStudentLessonLatenessApi","filterLessonListApi","addStudentLessonProblemFlagApi","addStudentLessonProblemAnswerApi","rescoreStudentLessonApi","deleteStudentTestApi","fetchStudentTestSectionProblemsApi","updateStudentTestQuestionFlagStatusApi","addStudentAnswerToTestApi","updateStudentTestStatusApi","fetchStudentTestScoreApi","addStudentTestQuestionFlagApi","fetchClassesApi","createClassApi","updateClassNameApi","updateClassStartDateApi","updateClassEndDateApi","updateClassDurationApi","updateClassExcludeFromStatisticsApi","fetchInstructorsApi","searchInstructorsApi","updateInstructorFirstNameApi","updateInstructorLastNameApi","updateInstructorEmailApi","updateInstructorStateApi","updateInstructorCityApi","updateInstructorZipApi","updateInstructorAddressApi","updateInstructorPhoneApi","createNewInstructorApi","fetchCurrentUserApi","fetchAllLocationsApi","fetchSectionsMessage","fetchProblemsMessage","testFlagMessage","answerTestProblemMessage","fetchingStudentTestsMessage","watchForFetchStudents","fetchStudents","students","Array","err","console","warn","watchForFetchUnitFilterOptions","fetchUnits","formattedUnits","watchForFetchStudentTestSections","payload","postBody","id","student_test_id","fetchStudentTestSections","studentTestId","type","sections","testSections","message","count","length","problems","data","watchForFetchStudentTests","user","fetchStudentTests","formattedStudentTests","sortedTests","overdues","assigneds","completes","forEach","test","status","due_status","push","watchForSearchStudents","filters","searchStudents","watchForDeleteStudent","response","watchForUpdateStudentFirstName","firstName","watchForUpdateStudentLastName","lastName","watchForUpdateStudentAddress","address","watchForUpdateStudentCity","city","watchForUpdateStudentEmail","email","watchForUpdateStudentPhone","phone","watchForUpdateStudentState","state","watchForUpdateStudentZip","zip","watchForUpdateInstructorFirstName","value","watchForUpdateInstructorLastName","watchForUpdateInstructorEmail","watchForUpdateInstructorState","watchForUpdateInstructorCity","watchForUpdateInstructorZip","watchForUpdateInstructorAddress","watchForUpdateInstructorPhone","watchForCreateInstructor","instructor","fetchInstructors","watchForFetchInstructors","formattedInstructors","watchForSearchInstructors","searchInstructors","instructors","watchForCreateClass","newClass","createClass","exception","watchForFetchClasses","fetchClasses","classes","watchForUpdateClassName","watchForUpdateClassStartDate","watchForUpdateClassEndDate","watchForUpdateClassDuration","watchForUpdateClassExcludeFromStatistics","watchForFetchLesson","handleFetchLesson","lessons","map","lesson","selected","error","watchForFetchStudentLesson","handleFetchStudentLessonList","watchForFetchStudentLessonDebounce","action","studentLessonList","studentToken","watchForAssignLesson","handleAssignLesson","student_id","watchForResetLesson","handleResetLessons","student_lesson_ids","watchForUpdateStudentActivation","handleUpdateStudentActivation","studentInfo","watchForUnAssignLesson","handleUnAssignLesson","watchForRescheduleStudentLessons","handleRescheduleStudentLessons","studentLessonData","watchForFetchSubjects","handleFetchSubjects","newSubjectObject","subject","name","watchForFetchCurrentUser","handleFetchCurrentUser","watchForExcuseStudentLateness","handleExcuseStudentLateness","watchForFilterLessons","handleFilterLessons","watchForFlagStudentLessonProblem","handleFlagStudentLessonProblem","watchForFetchAllLocations","handleFetchAllLocations","user_id","locations","watchForAnswerStudentLessonProblem","handleAnswerStudentLessonProblem","watchForDeleteStudentTest","handleDeleteStudentTest","testType","watchForMarkAllTestFlagsReviewed","handleMarkAllFlagsReviewed","studentId","reviewedTestIds","problemAmount","problemCount","flagData","flag","flag_id","watchForAddStudentAnswerToTest","handleAddStudentAnswerToTest","watchForAddStudentAnswerToTestDebounce","sectionId","watchForUpdateTestStatus","handleUpdateTestStatus","testList","currentStatus","essay","analysis","reading","writing","scores","watchForUpdateTestFlagStatus","handleUpdateTestFlagStatus","question","test_section_id","watchForFetchActiveTestScores","handleFetchActiveTestScores","defaultSaga"],"mappings":"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","sourcesContent":["import { take, call, put, all, takeEvery, debounce, delay } from \"redux-saga/effects\";\nimport {\n  FETCH_STUDENTS,\n  DELETE_STUDENT,\n  UPDATE_STUDENT_ADDRESS,\n  UPDATE_STUDENT_CITY,\n  UPDATE_STUDENT_EMAIL,\n  UPDATE_STUDENT_FIRSTNAME,\n  UPDATE_STUDENT_LASTNAME,\n  UPDATE_STUDENT_PHONE,\n  UPDATE_STUDENT_STATE,\n  UPDATE_STUDENT_ZIP,\n  SEARCH_STUDENTS,\n  GET_TESTS,\n  FETCH_STUDENT_TEST_SECTIONS,\n  FETCH_LESSON_LIST,\n  FETCH_LESSON_LIST_SUCCESS,\n  FETCH_LESSON_LIST_FAIL,\n  FETCH_UNITS,\n  FETCH_STUDENT_LESSON_LIST,\n  FETCH_STUDENT_LESSON_LIST_FAIL,\n  FETCH_STUDENT_LESSSON_LIST_SUCCESS,\n  ASSIGN_STUDENT_LESSON,\n  ASSIGN_STUDENT_LESSON_FAIL,\n  RESET_STUDENT_LESSONS,\n  RESET_STUDENT_LESSONS_SUCCESS,\n  RESET_STUDENT_LESSONS_FAIL,\n  UNASSIGN_STUDENT_LESSON,\n  UNASSIGN_STUDENT_LESSON_SUCCESS,\n  UNASSIGN_STUDENT_LESSON_FAIL,\n  RESCHEDULE_STUDENT_LESSONS,\n  RESCHEDULE_STUDENT_LESSONS_SUCCESS,\n  RESCHEDULE_STUDENT_LESSONS_FAIL,\n  MERGE_STUDENT_LESSON_LISTS,\n  UPDATE_STUDENT_ACTIVATION,\n  UPDATE_STUDENT_ACTIVATION_SUCCESS,\n  UPDATE_STUDENT_ACTIVATION_FAIL,\n  FETCH_SUBJECTS,\n  FETCH_SUBJECTS_SUCCESS,\n  FETCH_STUDENT_LESSON_LIST_DEBOUNCE,\n  EXCUSE_STUDENT_LATENESS,\n  FILTER_LESSONS,\n  FLAG_STUDENT_LESSON_PROBLEM,\n  SET_EXCUSE_STUDENT_LATENESS,\n  ADD_LESSON_ANSWER,\n  ADD_LESSON_ANSWER_SUCCESS,\n  DELETE_STUDENT_TEST,\n  UPDATE_TEST_FLAG,\n  REMOVE_TEST,\n  ADD_STUDENT_ANSWER_TO_TEST,\n  UPDATE_STUDENT_TEST_ANSWER,\n  UPDATE_TEST_STATUS,\n  UPDATE_TEST_STATUS_SUCCESS,\n  ADD_TEST_TO_COMPLETED,\n  REMOVE_TEST_FROM_PREV_LIST,\n  REMOVE_TEST_FROM_LIST,\n  SET_ACTIVE_TEST_SCORES,\n  UPDATE_FLAG_STATUS,\n  UPDATE_FLAG_STATUS_SUCCESS,\n  SET_STUDENT_SECTIONS,\n  ADD_FREE_RESPONSE_ANSWER_TO_TEST,\n  GET_TEST_SCORES,\n} from \"./components/Student/index/constants\";\nimport {\n  CREATE_CLASS,\n  FETCH_CLASSES,\n  UPDATE_CLASS_NAME,\n  UPDATE_CLASS_START_DATE,\n  UPDATE_CLASS_END_DATE,\n  UPDATE_CLASS_DURATION,\n  UPDATE_EXCLUDE_FROM_STATISTICS,\n\n} from \"./components/Classes/index/constants\";\nimport {\n  FETCH_INSTRUCTORS,\n  SEARCH_INSTRUCTORS,\n  UPDATE_INSTRUCTOR_FIRSTNAME,\n  CREATE_INSTRUCTOR,\n  UPDATE_INSTRUCTOR_LASTNAME,\n  UPDATE_INSTRUCTOR_EMAIL,\n  UPDATE_INSTRUCTOR_STATE,\n  UPDATE_INSTRUCTOR_CITY,\n  UPDATE_INSTRUCTOR_ZIP,\n  UPDATE_INSTRUCTOR_ADDRESS,\n  UPDATE_INSTRUCTOR_PHONE,\n} from \"./components/Instructor/index/constants\";\nimport {\n  SET_CURRENT_USER,\n  FETCH_CURRENT_USER,\n} from './components/User/index/constants';\n\nimport {\n  FETCH_ALL_LOCATIONS,\n  SET_ALL_LOCATIONS,\n} from './components/Location/index/constants';\n\nimport {\n  setStudents,\n  setStudentTests,\n  setStudentCompletedTests,\n  setStudentOverDueTests,\n  setStudentAssignedTests,\n  setStudentSections,\n  setUnitFilterOptions,\n  setFetchStudentTestsStatus,\n  sendErrorMessage,\n  resetErrorMessage,\n} from \"./components/Student/index/actions\";\nimport { setInstructors } from \"./components/Instructor/index/actions\";\nimport { setClasses } from \"./components/Classes/index/actions\";\n\n\nimport { studentApi, classApi, instructorApi, lessonApi, userApi, locationsApi } from \"./api\";\n\nconst {\n  fetchStudentsApi,\n  searchStudentsApi,\n  deleteStudentApi,\n  updateStudentAddressApi,\n  updateStudentCityApi,\n  updateStudentEmailApi,\n  updateStudentFirstNameApi,\n  updateStudentLastNameApi,\n  updateStudentPhoneApi,\n  updateStudentStateApi,\n  updateStudentZipApi,\n  fetchTestsByStudentIdApi,\n  fetchStudentTestSectionsApi,\n  fetchLessonListApi,\n  fetchUnitsApi,\n  fetchStudentLessonListApi,\n  assignLessonToStudentApi,\n  resetStudentLessonsApi,\n  updateStudentActivationApi,\n  unAssignLessonFromStudentApi,\n  rescheduleStudentLessonsApi,\n  fetchSubjectsApi,\n  excuseStudentLessonLatenessApi,\n  filterLessonListApi,\n  addStudentLessonProblemFlagApi,\n  addStudentLessonProblemAnswerApi,\n  rescoreStudentLessonApi,\n  deleteStudentTestApi,\n  fetchStudentTestSectionProblemsApi,\n  updateStudentTestQuestionFlagStatusApi,\n  addStudentAnswerToTestApi,\n  updateStudentTestStatusApi,\n  fetchStudentTestScoreApi,\n  addStudentTestQuestionFlagApi,\n} = studentApi;\nconst {\n  fetchClassesApi,\n  createClassApi,\n  updateClassNameApi,\n  updateClassStartDateApi,\n  updateClassEndDateApi,\n  updateClassDurationApi,\n  updateClassExcludeFromStatisticsApi,\n} = classApi;\nconst {\n  fetchInstructorsApi,\n  searchInstructorsApi,\n  updateInstructorFirstNameApi,\n  updateInstructorLastNameApi,\n  updateInstructorEmailApi,\n  updateInstructorStateApi,\n  updateInstructorCityApi,\n  updateInstructorZipApi,\n  updateInstructorAddressApi,\n  updateInstructorPhoneApi,\n  createNewInstructorApi,\n} = instructorApi;\nconst { fetchCurrentUserApi } = userApi;\n\nconst { fetchAllLocationsApi } = locationsApi;\n// Error Message Constants\nconst fetchSectionsMessage = 'fetchSectionsMessage';\nconst fetchProblemsMessage = 'fetchProblemsMessage';\nconst testFlagMessage = 'testFlagMessage';\nconst answerTestProblemMessage = 'answerTestProblemMessage';\nconst fetchingStudentTestsMessage = 'fetchingStudentTestsMessage';\n/** ******************************************    STUDENTS    ******************************************* */\nexport function* watchForFetchStudents() {\n  while (true) {\n    yield take(FETCH_STUDENTS);\n    yield call(fetchStudents);\n  }\n}\n\nexport function* fetchStudents() {\n  try {\n    const students = yield call(fetchStudentsApi);\n    if (Array.isArray(students) || students instanceof Array) {\n      yield put(setStudents(students));\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in the fetchStudents saga\", err);\n  }\n}\n\nexport function* watchForFetchUnitFilterOptions() {\n  while (true) {\n    yield take(FETCH_UNITS);\n    yield call(fetchUnits);\n  }\n}\n\nexport function* fetchUnits() {\n  try {\n    const { formattedUnits } = yield call(fetchUnitsApi);\n    if (Array.isArray(formattedUnits) || formattedUnits instanceof Array) {\n      yield put(setUnitFilterOptions(formattedUnits));\n    }\n  } catch (err) {\n    console.warn(\"Error occured in the fetchUnits saga\", err);\n  }\n}\n\nexport function* watchForFetchStudentTestSections() {\n  while (true) {\n    const payload = yield take(FETCH_STUDENT_TEST_SECTIONS);\n    const { postBody: { id, student_test_id } } = payload;\n    yield call(fetchStudentTestSections, id, student_test_id);\n  }\n}\n\nexport function* fetchStudentTestSections(id, studentTestId) {\n  try {\n    yield put({\n      type: SET_STUDENT_SECTIONS,\n      sections: [],\n    });\n    const testSections = yield call(fetchStudentTestSectionsApi, id, studentTestId);\n    if (testSections && testSections.message) {\n      return yield put(sendErrorMessage(fetchSectionsMessage, `Error: Something went wrong retrieving sections and problems for this test. You may still view and score essays or try again later.`));\n    }\n    let count = 0;\n    while (count < testSections.length) {\n      const problems = yield call(fetchStudentTestSectionProblemsApi, id, studentTestId, testSections[count].id);\n      if (problems && problems.message) {\n        yield put(sendErrorMessage(fetchProblemsMessage, `Error: Couldn't retrieve one or more sections with problems for this test. Those sections will not be shown. Please try again later.`));\n      }\n      testSections[count].problems = problems.data;\n      count++;\n    }\n    yield put(resetErrorMessage(fetchSectionsMessage));\n    yield put(setStudentSections(testSections));\n  } catch (err) {\n    sendErrorMessage(fetchSectionsMessage, `Something went wrong retrieving sections for this test.`);\n    console.warn(\"Error occurred in the fetchStudentTestSections saga\", err);\n  }\n}\n\nexport function* watchForFetchStudentTests() {\n  while (true) {\n    const { user } = yield take(GET_TESTS);\n    yield call(fetchStudentTests, user);\n  }\n}\n\nexport function* fetchStudentTests(user) {\n  try {\n    const { data: formattedStudentTests } = yield call(fetchTestsByStudentIdApi, user.id);\n    if (!formattedStudentTests) {\n      return yield put(sendErrorMessage(fetchingStudentTestsMessage, `Something went wrong when fetching for student tests: ${formattedStudentTests.message}`));\n    }\n    yield put(resetErrorMessage(fetchingStudentTestsMessage));\n    yield put(setStudentTests(formattedStudentTests));\n    const sortedTests = {\n      overdues: [],\n      assigneds: [],\n      completes: [],\n    };\n    // sort test into assisend, incompletes\n    //* * using for development purposes pushing :STARTED to assigneds */\n    yield formattedStudentTests.forEach(test => {\n      if (test.status === \"ASSIGNED\" || test.status === 'STARTED') {\n        if (test.due_status === 'OVERDUE') {\n          sortedTests.overdues.push(test);\n        } else {\n          sortedTests.assigneds.push(test);\n        }\n      } else if (test.status === 'COMPLETED') {\n        sortedTests.completes.push(test);\n      }\n    });\n    // Dispatch Action\n    yield put(setStudentCompletedTests(sortedTests.completes));\n    yield put(setStudentOverDueTests(sortedTests.overdues));\n    yield put(setStudentAssignedTests(sortedTests.assigneds));\n    yield put(setFetchStudentTestsStatus(true));\n  } catch (err) {\n    yield put(sendErrorMessage(fetchingStudentTestsMessage, `Something went wrong when fetching for student tests: ${err}`));\n    console.warn(\"Error occurred in the fetchStudentTests saga\", err);\n  }\n}\n\nexport function* watchForSearchStudents() {\n  while (true) {\n    const { filters } = yield take(SEARCH_STUDENTS);\n    yield call(searchStudents, filters);\n  }\n}\n\nexport function* searchStudents(filters) {\n  try {\n    const students = yield call(searchStudentsApi, filters);\n    if (students instanceof Array) {\n      yield put(setStudents(students));\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in searchStudents saga\", err);\n  }\n}\n\nexport function* watchForDeleteStudent() {\n  while (true) {\n    try {\n      const { id } = yield take(DELETE_STUDENT);\n      const response = yield call(deleteStudentApi, id);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong with deleting a student.\");\n      }\n      yield call(fetchStudents);\n    } catch (err) {\n      console.warn(\"Error occured in watchForDeleteStudent\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateStudentFirstName() {\n  while (true) {\n    try {\n      const { firstName } = yield take(UPDATE_STUDENT_FIRSTNAME);\n      const response = yield call(updateStudentFirstNameApi, firstName);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentFirstNameApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentFirstName saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateStudentLastName() {\n  while (true) {\n    try {\n      const { lastName } = yield take(UPDATE_STUDENT_LASTNAME);\n      const response = yield call(updateStudentLastNameApi, lastName);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentLastNameApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentLastName saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateStudentAddress() {\n  while (true) {\n    try {\n      const { address } = yield take(UPDATE_STUDENT_ADDRESS);\n      const response = yield call(updateStudentAddressApi, address);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentAddressApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentAddress saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateStudentCity() {\n  while (true) {\n    try {\n      const { city } = yield take(UPDATE_STUDENT_CITY);\n      const response = yield call(updateStudentCityApi, city);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentCityApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentCity saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateStudentEmail() {\n  while (true) {\n    try {\n      const { email } = yield take(UPDATE_STUDENT_EMAIL);\n      const response = yield call(updateStudentEmailApi, email);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentEmailApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentEmail saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateStudentPhone() {\n  while (true) {\n    try {\n      const { phone } = yield take(UPDATE_STUDENT_PHONE);\n      const response = yield call(updateStudentPhoneApi, phone);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentPhoneApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentPhone saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateStudentState() {\n  while (true) {\n    try {\n      const { state } = yield take(UPDATE_STUDENT_STATE);\n      const response = yield call(updateStudentStateApi, state);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentStateApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentState saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateStudentZip() {\n  while (true) {\n    try {\n      const { zip } = yield take(UPDATE_STUDENT_ZIP);\n      const response = yield call(updateStudentZipApi, zip);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateStudentZipApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateStudentZip saga\", err);\n    }\n  }\n}\n\n/** ******************************************    INSTRUCTORS    ******************************************* */\nexport function* watchForUpdateInstructorFirstName() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_INSTRUCTOR_FIRSTNAME);\n      const response = yield call(updateInstructorFirstNameApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorFirstNameApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorFirstName saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateInstructorLastName() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_INSTRUCTOR_LASTNAME);\n      const response = yield call(updateInstructorLastNameApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorLastNameApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorLastName saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateInstructorEmail() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_INSTRUCTOR_EMAIL);\n      const response = yield call(updateInstructorEmailApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorEmailApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorEmail saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateInstructorState() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_INSTRUCTOR_STATE);\n      const response = yield call(updateInstructorStateApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorStateApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorState saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateInstructorCity() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_INSTRUCTOR_CITY);\n      const response = yield call(updateInstructorCityApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorCityApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorCity saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateInstructorZip() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_INSTRUCTOR_ZIP);\n      const response = yield call(updateInstructorZipApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorZipApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorZip saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateInstructorAddress() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_INSTRUCTOR_ADDRESS);\n      const response = yield call(updateInstructorAddressApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorAddressApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorAddress saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateInstructorPhone() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_INSTRUCTOR_PHONE);\n      const response = yield call(updateInstructorPhoneApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateInstructorPhoneApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateInstructorPhone saga\", err);\n    }\n  }\n}\n\nexport function* watchForCreateInstructor() {\n  while (true) {\n    try {\n      const { instructor } = yield take(CREATE_INSTRUCTOR);\n      const response = yield call(createNewInstructorApi, instructor);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in createNewInstructorApi.\");\n      }\n      yield call(fetchInstructors);\n    } catch (err) {\n      console.warn(\"Error occured in watchForCreateInstructor saga\", err);\n    }\n  }\n}\n\nexport function* watchForFetchInstructors() {\n  while (true) {\n    yield take(FETCH_INSTRUCTORS);\n    yield call(fetchInstructors);\n  }\n}\n\nexport function* fetchInstructors() {\n  try {\n    const { formattedInstructors } = yield call(fetchInstructorsApi);\n    if (formattedInstructors instanceof Array) {\n      yield put(setInstructors(formattedInstructors));\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in fetchInstructors saga\", err);\n  }\n}\n\nexport function* watchForSearchInstructors() {\n  while (true) {\n    const { filters } = yield take(SEARCH_INSTRUCTORS);\n    yield call(searchInstructors, filters);\n  }\n}\n\nexport function* searchInstructors(filters) {\n  try {\n    const instructors = yield call(searchInstructorsApi, filters);\n    if (instructors instanceof Array) {\n      yield put(setInstructors(instructors));\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in searchInstructors saga\", err);\n  }\n}\n\n/** ******************************************    CLASSES    ******************************************* */\nexport function* watchForCreateClass() {\n  while (true) {\n    const { newClass } = yield take(CREATE_CLASS);\n    console.warn(\"saga yaaay!\", newClass);\n    yield call(createClass, newClass);\n  }\n}\n\nexport function* createClass(newClass) {\n  try {\n    const response = yield call(createClassApi, newClass);\n    if (response.exception && response.exception.length) {\n      console.warn(\"Error occurred in createClass saga\", response);\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in createClass saga\", err);\n  }\n}\n\nexport function* watchForFetchClasses() {\n  while (true) {\n    yield take(FETCH_CLASSES);\n    yield call(fetchClasses);\n  }\n}\n\nexport function* fetchClasses() {\n  try {\n    const classes = yield call(fetchClassesApi);\n    if (Array.isArray(classes) || classes instanceof Array) {\n      yield put(setClasses(classes));\n    }\n  } catch (err) {\n    console.warn(\"Error occurred in the fetchClasses saga\", err);\n  }\n}\n\nexport function* watchForUpdateClassName() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_CLASS_NAME);\n      const response = yield call(updateClassNameApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateClassNameApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateClassName saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateClassStartDate() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_CLASS_START_DATE);\n      const response = yield call(updateClassStartDateApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateClassStartDateApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateClassStartDate saga\", err);\n    }\n  }\n}\nexport function* watchForUpdateClassEndDate() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_CLASS_END_DATE);\n      const response = yield call(updateClassEndDateApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateClassEndDateApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateClassEndDate saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateClassDuration() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_CLASS_DURATION);\n      const response = yield call(updateClassDurationApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateClassDurationApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateClassDuration saga\", err);\n    }\n  }\n}\n\nexport function* watchForUpdateClassExcludeFromStatistics() {\n  while (true) {\n    try {\n      const { value } = yield take(UPDATE_EXCLUDE_FROM_STATISTICS);\n      const response = yield call(updateClassExcludeFromStatisticsApi, value);\n      if (response && response.message) {\n        return console.warn(\"Something went wrong in updateClassExcludeFromStatisticsApi.\");\n      }\n    } catch (err) {\n      console.warn(\"Error occured in watchForUpdateClassExcludeFromStatistics saga\", err);\n    }\n  }\n}\n\n/** ******************************************    LESSONS    ******************************************* */\nfunction* watchForFetchLesson() {\n  yield takeEvery(FETCH_LESSON_LIST, handleFetchLesson);\n}\n\nfunction* handleFetchLesson() {\n  try {\n    const lessons = yield call(fetchLessonListApi);\n    if (Array.isArray(lessons) || lessons instanceof Array) {\n      yield put({\n        type: FETCH_LESSON_LIST_SUCCESS,\n        payload: lessons.map(lesson => ({\n          ...lesson,\n          selected: false,\n          status: 'NOTASSIGNED',\n        })),\n      });\n      yield put({\n        type: MERGE_STUDENT_LESSON_LISTS,\n      });\n    }\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchLesson saga\", error);\n    yield put({\n      type: FETCH_LESSON_LIST_FAIL,\n      payload: error,\n    });\n  }\n}\n\n\nfunction* watchForFetchStudentLesson() {\n  yield takeEvery(FETCH_STUDENT_LESSON_LIST, handleFetchStudentLessonList);\n}\n\nfunction* watchForFetchStudentLessonDebounce() {\n  yield debounce(1000, FETCH_STUDENT_LESSON_LIST_DEBOUNCE, handleFetchStudentLessonList);\n}\n\nfunction* handleFetchStudentLessonList(action) {\n  try {\n    const studentLessonList = yield call(fetchStudentLessonListApi, action.postBody.id, action.postBody.studentToken);\n    yield put({\n      type: FETCH_STUDENT_LESSSON_LIST_SUCCESS,\n      payload: studentLessonList.map(lesson => ({ ...lesson, selected: false })),\n    });\n    yield put({\n      type: MERGE_STUDENT_LESSON_LISTS,\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchStudentLesson saga\", error);\n    yield put({\n      type: FETCH_STUDENT_LESSON_LIST_FAIL,\n    });\n  }\n}\n\nfunction* watchForAssignLesson() {\n  yield takeEvery(ASSIGN_STUDENT_LESSON, handleAssignLesson);\n}\n\nfunction* handleAssignLesson(action) {\n  try {\n    yield call(assignLessonToStudentApi, action.lesson);\n    yield put({ type: FETCH_STUDENT_LESSON_LIST_DEBOUNCE, postBody: { id: action.lesson.student_id } });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchLesson saga\", error);\n    yield put({\n      type: ASSIGN_STUDENT_LESSON_FAIL,\n      payload: error,\n    });\n  }\n}\n\nfunction* watchForResetLesson() {\n  yield takeEvery(RESET_STUDENT_LESSONS, handleResetLessons);\n}\n\nfunction* handleResetLessons(action) {\n  try {\n    yield call(resetStudentLessonsApi, { student_lesson_ids: action.lessons });\n    yield put({ type: RESET_STUDENT_LESSONS_SUCCESS, payload: action.lessons });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleResetLessons saga\", error);\n    yield put({\n      type: RESET_STUDENT_LESSONS_FAIL,\n      payload: error,\n    });\n  }\n}\n\nfunction* watchForUpdateStudentActivation() {\n  yield takeEvery(UPDATE_STUDENT_ACTIVATION, handleUpdateStudentActivation);\n}\n\nfunction* handleUpdateStudentActivation(action) {\n  try {\n    yield call(updateStudentActivationApi, action.studentInfo);\n    yield put({ type: UPDATE_STUDENT_ACTIVATION_SUCCESS });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleUpdateStudentActivation saga\", error);\n    yield put({\n      type: UPDATE_STUDENT_ACTIVATION_FAIL,\n      payload: error,\n    });\n  }\n}\n\nfunction* watchForUnAssignLesson() {\n  yield takeEvery(UNASSIGN_STUDENT_LESSON, handleUnAssignLesson);\n}\n\nfunction* handleUnAssignLesson(action) {\n  try {\n    yield call(unAssignLessonFromStudentApi, { student_lesson_ids: action.lesson });\n    yield put({ type: UNASSIGN_STUDENT_LESSON_SUCCESS, payload: action.lesson });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleUnAssignLesson saga\", error);\n    yield put({\n      type: UNASSIGN_STUDENT_LESSON_FAIL,\n      payload: error,\n    });\n  }\n}\n\nfunction* watchForRescheduleStudentLessons() {\n  yield takeEvery(RESCHEDULE_STUDENT_LESSONS, handleRescheduleStudentLessons);\n}\n\nfunction* handleRescheduleStudentLessons(action) {\n  try {\n    yield call(rescheduleStudentLessonsApi, action.studentLessonData);\n    yield put({\n      type: RESCHEDULE_STUDENT_LESSONS_SUCCESS,\n      payload: action.studentLessonData,\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleRescheduleStudentLessons saga\", error);\n    yield put({\n      type: RESCHEDULE_STUDENT_LESSONS_FAIL,\n      payload: error,\n    });\n  }\n}\n\nfunction* watchForFetchSubjects() {\n  yield takeEvery(FETCH_SUBJECTS, handleFetchSubjects);\n}\n\nfunction* handleFetchSubjects() {\n  try {\n    const response = yield call(fetchSubjectsApi);\n    const newSubjectObject = {};\n    response.forEach(subject => {\n      newSubjectObject[subject.id] = subject.name;\n    });\n    yield put({\n      type: FETCH_SUBJECTS_SUCCESS,\n      payload: newSubjectObject,\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchSubjects saga\", error);\n  }\n}\n\nexport function* watchForFetchCurrentUser() {\n  while (true) {\n    yield take(FETCH_CURRENT_USER);\n    yield call(handleFetchCurrentUser);\n  }\n}\nfunction* handleFetchCurrentUser() {\n  try {\n    const response = yield call(fetchCurrentUserApi);\n    if (response) {\n      yield put({\n        type: SET_CURRENT_USER,\n        value: response,\n      });\n    }\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchCurrentUser saga\", error);\n  }\n}\n\nfunction* watchForExcuseStudentLateness() {\n  yield takeEvery(EXCUSE_STUDENT_LATENESS, handleExcuseStudentLateness);\n}\n\nfunction* handleExcuseStudentLateness(action) {\n  try {\n    yield call(excuseStudentLessonLatenessApi, action.lessons);\n    yield put({\n      type: SET_EXCUSE_STUDENT_LATENESS,\n      payload: action.lessons,\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleExcuseStudentLateness saga\", error);\n  }\n}\n\nfunction* watchForFilterLessons() {\n  yield debounce(200, FILTER_LESSONS, handleFilterLessons);\n}\n\nfunction* handleFilterLessons(action) {\n  try {\n    const lessons = yield call(filterLessonListApi, action.filters);\n    if (lessons && lessons instanceof Array) {\n      yield put({\n        type: FETCH_LESSON_LIST_SUCCESS,\n        payload: lessons.map(lesson => ({\n          ...lesson,\n          selected: false,\n          status: 'NOTASSIGNED',\n        })),\n      });\n      yield put({\n        type: MERGE_STUDENT_LESSON_LISTS,\n      });\n    }\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFilterLessons saga\", error);\n  }\n}\n\nfunction* watchForFlagStudentLessonProblem() {\n  yield takeEvery(FLAG_STUDENT_LESSON_PROBLEM, handleFlagStudentLessonProblem);\n}\n\nfunction* handleFlagStudentLessonProblem(action) {\n  try {\n    yield call(addStudentLessonProblemFlagApi, action.lesson);\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFlagStudentLessonProblem saga\", error);\n  }\n}\n\n\nfunction* watchForFetchAllLocations() {\n  const value = yield take(FETCH_ALL_LOCATIONS);\n  yield call(handleFetchAllLocations, value.user_id);\n}\n\n\nfunction* handleFetchAllLocations(id) {\n  try {\n    const locations = yield call(fetchAllLocationsApi, id);\n    yield put({\n      type: SET_ALL_LOCATIONS,\n      payload: locations,\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchAllLocations saga\", error);\n  }\n}\n\nfunction* watchForAnswerStudentLessonProblem() {\n  yield takeEvery(ADD_LESSON_ANSWER, handleAnswerStudentLessonProblem);\n}\n\n\nfunction* handleAnswerStudentLessonProblem(action) {\n  try {\n    // @TODO will come back to this after fix/edit-answer-bubbles-rescoring gets merged\n    // const addAnswerResponse = yield call(addStudentLessonProblemAnswerApi);\n    // const rescoreLessonResponse = yield call(rescoreStudentLessonApi)\n    // yield put({\n    //   type: ADD_LESSON_ANSWER,\n    //   payload: locations,\n    // });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleAnswerStudentLessonProblem saga\", error);\n  }\n}\n\nfunction* watchForDeleteStudentTest() {\n  yield takeEvery(DELETE_STUDENT_TEST, handleDeleteStudentTest);\n}\n\nfunction* handleDeleteStudentTest(action) {\n  try {\n    const payload = { student_test_id: action.studentTestId };\n    const response = yield call(deleteStudentTestApi, payload);\n    if (response && response.message) {\n      return console.warn(\"Error occurred in the handleDeleteStudentTest saga\", error);\n    }\n    yield put({\n      type: REMOVE_TEST,\n      testType: action.testType,\n      studentTestId: action.studentTestId,\n    });\n    yield put({\n      type: REMOVE_TEST_FROM_LIST,\n      studentTestId: action.studentTestId,\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleDeleteStudentTest saga\", error);\n  }\n}\n\nfunction* watchForMarkAllTestFlagsReviewed() {\n  yield takeEvery(UPDATE_TEST_FLAG, handleMarkAllFlagsReviewed);\n}\n\nfunction* handleMarkAllFlagsReviewed(action) {\n  try {\n    const sections = yield call(fetchStudentTestSectionsApi, action.studentId, action.studentTestId);\n\n    const reviewedTestIds = [];\n    let count = 0;\n    while (count < sections.length) {\n      const { data: problems } = yield call(fetchStudentTestSectionProblemsApi, action.studentId, action.studentTestId, sections[count].id);\n\n      const problemAmount = problems.problems.length;\n      let problemCount = 0;\n      while (problemCount < problemAmount) {\n        const flagData = problems.problems[problemCount].flag;\n        if (flagData.id && flagData.status === 'FLAGGED') {\n          const payload = { status: 'REVIEWED', flag_id: flagData.id, student_test_id: action.studentTestId };\n\n          yield call(updateStudentTestQuestionFlagStatusApi, payload);\n          reviewedTestIds.push(action.studentTestId);\n        }\n        problemCount++;\n      }\n      count++;\n    }\n    // Dispatch to update redux store\n  } catch (error) {\n    console.warn(\"Error occurred in the handleUpdateFlagStatus saga\", error);\n  }\n}\n\nfunction* watchForAddStudentAnswerToTest() {\n  yield takeEvery(ADD_STUDENT_ANSWER_TO_TEST, handleAddStudentAnswerToTest);\n}\n\nfunction* watchForAddStudentAnswerToTestDebounce() {\n  yield debounce(500, ADD_FREE_RESPONSE_ANSWER_TO_TEST, handleAddStudentAnswerToTest);\n}\n\nfunction* handleAddStudentAnswerToTest(action) {\n  try {\n    const response = yield call(addStudentAnswerToTestApi, action.payload);\n    if (response && response.message) {\n      yield put(sendErrorMessage(answerTestProblemMessage, `Something went wrong adding an answer to this problem. Your answer will not be recorded. Please try again later.`));\n      yield put(resetErrorMessage(answerTestProblemMessage));\n      return console.warn(\"Error occurred in the handleAddStudentAnswerToTest saga\", response.message);\n    }\n    yield put({\n      type: UPDATE_STUDENT_TEST_ANSWER,\n      sectionId: action.sectionId,\n      payload: action.payload,\n    });\n    yield put(resetErrorMessage(answerTestProblemMessage));\n  } catch (error) {\n    yield put(sendErrorMessage(answerTestProblemMessage, `Something went wrong adding an answer to this problem. Please try again.`));\n    console.warn(\"Error occurred in the handleAddStudentAnswerToTest saga\", error);\n  }\n}\n\nfunction* watchForUpdateTestStatus() {\n  yield takeEvery(UPDATE_TEST_STATUS, handleUpdateTestStatus);\n}\n\nfunction* handleUpdateTestStatus(action) {\n  try {\n    const response = yield call(updateStudentTestStatusApi, action.payload);\n    if (response && response.message && action.payload.status === \"COMPLETED\") {\n      console.warn(\"Error occurred in the handleUpdateTestStatus saga\", response.message);\n      return yield put(sendErrorMessage(\"updateTestStatusMsg\", `Something went wrong updating this test to ${action.payload.status}. Please try opening and resubmitting this test later.`));\n    }\n    yield put({\n      type: UPDATE_TEST_STATUS_SUCCESS,\n      payload: action.payload,\n    });\n\n    if (action.payload.status === \"COMPLETED\") {\n      yield put({\n        type: ADD_TEST_TO_COMPLETED,\n        payload: action.payload,\n        testList: action.currentStatus,\n      });\n      yield put({\n        type: REMOVE_TEST_FROM_PREV_LIST,\n        payload: action.payload,\n        testList: action.currentStatus,\n      });\n\n      yield delay(1500);\n\n      const response = yield call(fetchStudentTestScoreApi, action.studentId, action.payload.student_test_id);\n      if (response && response.message) {\n        console.warn(`Error occurred in the handleFetchActiveTestScores saga: ${response.message}`);\n        return yield put(sendErrorMessage(\"fetchScoresMsg\", \"Something went wrong fetching scores for this test. Please try opening this test from the completed test section to view scores.\"));\n      }\n      if (!response.data.essay) {\n        response.data.essay = { analysis: \"\", reading: \"\", writing: \"\" };\n      }\n      yield put({\n        type: SET_ACTIVE_TEST_SCORES,\n        scores: { ...response.data, student_test_id: action.payload.student_test_id },\n      });\n      yield put(resetErrorMessage(\"fetchScoresMsg\"));\n      yield put(resetErrorMessage(\"updateTestStatusMsg\"));\n    }\n  } catch (error) {\n    console.warn(\"Error occurred in the handleUpdateTestStatus saga\", error);\n  }\n}\n\nfunction* watchForUpdateTestFlagStatus() {\n  yield takeEvery(UPDATE_FLAG_STATUS, handleUpdateTestFlagStatus);\n}\n\nfunction* handleUpdateTestFlagStatus(action) {\n  try {\n    if (action.status === \"FLAGGED\" && !action.payload.flag_id) {\n      const response = yield call(addStudentTestQuestionFlagApi, action.payload);\n      if (response && response.message) {\n        return yield put(sendErrorMessage(testFlagMessage, `Something went wrong adding a flag to this problem: ${response.message}`));\n      }\n      action.question.flag.id = response.data.id;\n    } else {\n      const response = yield call(updateStudentTestQuestionFlagStatusApi, action.payload);\n      if (response && response.message) {\n        return yield put(sendErrorMessage(testFlagMessage, `Something went wrong updating the flag status of this problem: ${response.message}`));\n      }\n    }\n    yield put(resetErrorMessage(testFlagMessage));\n    yield put({\n      type: UPDATE_FLAG_STATUS_SUCCESS,\n      sectionId: action.question.test_section_id,\n      question: action.question,\n      status: action.status,\n    });\n  } catch (error) {\n    yield put(sendErrorMessage(testFlagMessage, `Something went wrong updating the flag status of this problem: ${error}`));\n    console.warn(\"Error occurred in the handleUpdateTestFlagStatus saga\", error);\n  }\n}\n\nfunction* watchForFetchActiveTestScores() {\n  yield takeEvery(GET_TEST_SCORES, handleFetchActiveTestScores);\n}\n\nfunction* handleFetchActiveTestScores(action) {\n  try {\n    const response = yield call(fetchStudentTestScoreApi, action.payload.studentId, action.payload.student_test_id);\n    if (response && response.message) {\n      console.warn(`Error occurred in the handleFetchActiveTestScores saga: ${response.message}`);\n      return yield put(sendErrorMessage(\"fetchScoresMsg\", \"Something went wrong fetching scores.\"));\n    }\n    yield put(resetErrorMessage(\"fetchScoresMsg\"));\n    if (!response.data.essay) {\n      response.data.essay = { analysis: \"\", reading: \"\", writing: \"\" };\n    }\n    yield put({\n      type: SET_ACTIVE_TEST_SCORES,\n      scores: { ...response.data, student_test_id: action.payload.student_test_id },\n    });\n  } catch (error) {\n    console.warn(\"Error occurred in the handleFetchActiveTestScores saga\", error);\n    return yield put(sendErrorMessage(\"fetchScoresMsg\", \"Something went wrong fetching scores.\"));\n  }\n}\n\nexport default function* defaultSaga() {\n  yield all([\n    watchForFetchStudents(),\n    watchForFetchStudentTests(),\n    watchForFetchStudentTestSections(),\n    watchForSearchStudents(),\n    watchForDeleteStudent(),\n    watchForUpdateStudentFirstName(),\n    watchForUpdateStudentLastName(),\n    watchForUpdateStudentAddress(),\n    watchForUpdateStudentCity(),\n    watchForUpdateStudentEmail(),\n    watchForUpdateStudentPhone(),\n    watchForUpdateStudentState(),\n    watchForUpdateStudentZip(),\n    watchForCreateClass(),\n    watchForFetchInstructors(),\n    watchForSearchInstructors(),\n    watchForUpdateInstructorFirstName(),\n    watchForUpdateInstructorLastName(),\n    watchForUpdateInstructorEmail(),\n    watchForUpdateInstructorState(),\n    watchForUpdateInstructorCity(),\n    watchForUpdateInstructorZip(),\n    watchForUpdateInstructorAddress(),\n    watchForUpdateInstructorPhone(),\n    watchForCreateInstructor(),\n    watchForFetchClasses(),\n    watchForUpdateClassStartDate(),\n    watchForUpdateClassEndDate(),\n    watchForUpdateClassExcludeFromStatistics(),\n    watchForUpdateClassName(),\n    watchForUpdateClassDuration(),\n    watchForFetchLesson(),\n    watchForFetchUnitFilterOptions(),\n    watchForFetchStudentLesson(),\n    watchForAssignLesson(),\n    watchForResetLesson(),\n    watchForUpdateStudentActivation(),\n    watchForUnAssignLesson(),\n    watchForRescheduleStudentLessons(),\n    watchForFetchSubjects(),\n    watchForFetchCurrentUser(),\n    watchForFetchStudentLessonDebounce(),\n    watchForExcuseStudentLateness(),\n    watchForFilterLessons(),\n    watchForFlagStudentLessonProblem(),\n    watchForFetchAllLocations(),\n    watchForAnswerStudentLessonProblem(),\n    watchForDeleteStudentTest(),\n    watchForMarkAllTestFlagsReviewed(),\n    watchForAddStudentAnswerToTest(),\n    watchForUpdateTestStatus(),\n    watchForAddStudentAnswerToTestDebounce(),\n    watchForUpdateTestFlagStatus(),\n    watchForFetchActiveTestScores(),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}