{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestScorePage/components/TestScoreCard/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nvar readingData = function readingData(totalScore, totalPossible) {\n  return {\n    datasets: [{\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#32A6AF', 'rgb(234, 234, 234)']\n    }]\n  };\n};\n\nvar writingData = function writingData(totalScore, totalPossible) {\n  return {\n    datasets: [{\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#3b9f85', 'rgb(234, 234, 234)']\n    }]\n  };\n};\n\nvar mathData = function mathData(totalScore, totalPossible) {\n  return {\n    datasets: [{\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#567EBF', 'rgb(234, 234, 234)']\n    }]\n  };\n};\n\nvar TestScoreCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TestScoreCard, _React$Component);\n\n  function TestScoreCard(props) {\n    var _this;\n\n    _classCallCheck(this, TestScoreCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestScoreCard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var subjectScores = _this.props.subjectScores;\n\n      if (subjectScores) {\n        subjectScores.map(function (subject) {\n          switch (subject.name) {\n            case 'Writing and Language':\n              _this.setState({\n                writingScores: subject\n              });\n\n              break;\n\n            case 'Math':\n              _this.setState({\n                mathScores: subject\n              });\n\n              break;\n\n            case 'Reading':\n              _this.setState({\n                readingScores: subject\n              });\n\n              break;\n\n            default:\n          }\n        });\n      }\n    });\n\n    _this.state = {\n      mathScores: null,\n      readingScores: null,\n      writingScores: null\n    };\n    return _this;\n  }\n\n  _createClass(TestScoreCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          readingScores = _this$state.readingScores,\n          mathScores = _this$state.mathScores,\n          writingScores = _this$state.writingScores;\n      return __jsx(\"div\", {\n        className: \"col s12 l8 card-width-772\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Test Scores \", __jsx(\"span\", {\n        className: \"separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"|\"), ' ', __jsx(\"span\", {\n        className: \"quantity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"10 to 40\")), __jsx(\"div\", {\n        className: \"card-main-full card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"several-charts-row row mb-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"col s4 center-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, readingScores && __jsx(\"div\", {\n        className: \"chart-block chart-block-182\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, __jsx(Doughnut, {\n        data: function data() {\n          return readingData(readingScores.current_score, 40);\n        },\n        width: 182,\n        height: 182,\n        options: {\n          cutoutPercentage: 80\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"chart-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Reading\"), __jsx(\"span\", {\n        className: \"value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, readingScores.current_score), __jsx(\"span\", {\n        className: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"(\", readingScores.delta, \")\")))), __jsx(\"div\", {\n        className: \"col s4 center-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, writingScores && __jsx(\"div\", {\n        className: \"chart-block chart-block-182\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, __jsx(Doughnut, {\n        data: function data() {\n          return writingData(writingScores.current_score, 40);\n        },\n        width: 182,\n        height: 182,\n        options: {\n          cutoutPercentage: 80\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"chart-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Writing\"), __jsx(\"span\", {\n        className: \"value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, writingScores.current_score), __jsx(\"span\", {\n        className: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"(\", writingScores.delta, \")\")))), __jsx(\"div\", {\n        className: \"col s4 center-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, mathScores && __jsx(\"div\", {\n        className: \"chart-block chart-block-182\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, __jsx(Doughnut, {\n        data: function data() {\n          return mathData(mathScores.current_score, 40);\n        },\n        width: 182,\n        height: 182,\n        options: {\n          cutoutPercentage: 80\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"chart-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Math\"), __jsx(\"span\", {\n        className: \"value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, mathScores.current_score), __jsx(\"span\", {\n        className: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"(\", mathScores.delta, \")\")))))))));\n    }\n  }]);\n\n  return TestScoreCard;\n}(React.Component);\n\nTestScoreCard.propTypes = {\n  subjectScores: PropTypes.object.isRequired\n};\nexport default TestScoreCard;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestScorePage/components/TestScoreCard/index.js"],"names":["React","PropTypes","Doughnut","readingData","totalScore","totalPossible","datasets","data","backgroundColor","writingData","mathData","TestScoreCard","props","subjectScores","map","subject","name","setState","writingScores","mathScores","readingScores","state","current_score","cutoutPercentage","delta","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst readingData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#32A6AF', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\nconst writingData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#3b9f85', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\nconst mathData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#567EBF', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\n\nclass TestScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mathScores: null,\n      readingScores: null,\n      writingScores: null,\n    };\n  }\n\n  componentDidMount = () => {\n    const { subjectScores } = this.props;\n    if (subjectScores) {\n      subjectScores.map(subject => {\n        switch (subject.name) {\n          case 'Writing and Language':\n            this.setState({\n              writingScores: subject,\n            });\n            break;\n          case 'Math':\n            this.setState({\n              mathScores: subject,\n            });\n            break;\n          case 'Reading':\n            this.setState({\n              readingScores: subject,\n            });\n            break;\n          default:\n        }\n      });\n    }\n  };\n\n  render() {\n    const { readingScores, mathScores, writingScores } = this.state;\n    return (\n      <div className=\"col s12 l8 card-width-772\">\n        <div className=\"card-block\">\n          <h2>\n            Test Scores <span className=\"separator\">|</span>{' '}\n            <span className=\"quantity\">10 to 40</span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content\">\n              <div className=\"several-charts-row row mb-0\">\n                <div className=\"col s4 center-align\">\n                  {readingScores &&\n                    <div className=\"chart-block chart-block-182\">\n                      <Doughnut\n                        data={() => readingData(readingScores.current_score, 40)}\n                        width={182}\n                        height={182}\n                        options={{\n                          cutoutPercentage: 80,\n                        }}\n                      />\n                      <div className=\"chart-text\">\n                        <span className=\"title\">Reading</span>\n                        <span className=\"value\">\n                          {readingScores.current_score}\n                        </span>\n                        <span className=\"description\">\n                          ({readingScores.delta})\n                        </span>\n                      </div>\n                    </div>}\n                </div>\n                <div className=\"col s4 center-align\">\n                  {writingScores &&\n                    <div className=\"chart-block chart-block-182\">\n                      <Doughnut\n                        data={() => writingData(writingScores.current_score, 40)}\n                        width={182}\n                        height={182}\n                        options={{\n                          cutoutPercentage: 80,\n                        }}\n                      />\n                      <div className=\"chart-text\">\n                        <span className=\"title\">Writing</span>\n                        <span className=\"value\">\n                          {writingScores.current_score}\n                        </span>\n                        <span className=\"description\">\n                          ({writingScores.delta})\n                        </span>\n                      </div>\n                    </div>}\n                </div>\n                <div className=\"col s4 center-align\">\n                  {mathScores &&\n                    <div className=\"chart-block chart-block-182\">\n                      <Doughnut\n                        data={() => mathData(mathScores.current_score, 40)}\n                        width={182}\n                        height={182}\n                        options={{\n                          cutoutPercentage: 80,\n                        }}\n                      />\n                      <div className=\"chart-text\">\n                        <span className=\"title\">Math</span>\n                        <span className=\"value\">\n                          {mathScores.current_score}\n                        </span>\n                        <span className=\"description\">\n                          ({mathScores.delta})\n                        </span>\n                      </div>\n                    </div>}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nTestScoreCard.propTypes = {\n  subjectScores: PropTypes.object.isRequired,\n};\n\nexport default TestScoreCard;\n"]},"metadata":{},"sourceType":"module"}