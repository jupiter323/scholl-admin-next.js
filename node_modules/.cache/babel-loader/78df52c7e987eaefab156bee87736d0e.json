{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal'; // import BubbleGroup from '../Bubble';\n\nvar styles = {\n  red: {\n    position: 'relative',\n    color: '#fff',\n    borderColor: '#fff',\n    border: '1px solid',\n    backgroundColor: '#db1d41',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  greenFilled: {\n    position: 'relative',\n    color: '#fff',\n    borderColor: '#32955c',\n    border: '1px solid',\n    backgroundColor: '#32955c',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  greenBorderOnly: {\n    position: 'relative',\n    color: '#32955c',\n    borderColor: '#32955c',\n    border: '1px solid',\n    backgroundColor: '#fff',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  plain: {\n    position: 'relative',\n    color: '#a6a8ab',\n    border: '1px solid',\n    borderColor: '#a6a8ab',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  }\n};\n\nvar AnswerRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnswerRow, _React$Component);\n\n  function AnswerRow(props) {\n    var _this;\n\n    _classCallCheck(this, AnswerRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnswerRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var _this$props$question = _this.props.question,\n          studentChoice = _this$props$question.studentChoice,\n          answer = _this$props$question.answer;\n      _this.setState = ({\n        selected: studentChoice\n      }, console.log(_this.state.selected)); // , () => {\n      // if (this.state.selected === answer) {\n      //       this.setState({correct: true})\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenQuestionModal\", function () {\n      return _this.setState({\n        open: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseQuestionModal\", function () {\n      return _this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleBubbleChange\", function (event, letter) {\n      _this.setState({\n        selected: event.target.value\n      }, function () {\n        return _this.checkIfCorrect(letter);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectedBubbleClick\", function (event) {\n      var selected = _this.state.selected;\n      var studentChoice = _this.props.question.studentChoice;\n\n      if (selected === event.target.value && studentChoice !== event.target.value) {\n        _this.setState({\n          selected: \"\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkIfCorrect\", function (letter) {\n      var question = _this.props.question;\n\n      if (letter === question.answer) {\n        _this.setState({\n          correct: true\n        });\n      } else {\n        _this.setState({\n          correct: false\n        });\n      } // update counter on writing page\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapNumberBubbles\", function (_ref) {\n      var index = _ref.index;\n      var sampleAnswers = _this.props.sampleAnswers;\n      var _sampleAnswers$index = sampleAnswers[index],\n          answer = _sampleAnswers$index.answer,\n          studentChoice = _sampleAnswers$index.studentChoice;\n\n      if (answer === studentChoice) {\n        return React.createElement(\"li\", {\n          key: answer\n        }, React.createElement(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: {\n            color: '#fff',\n            borderColor: '#32955c',\n            backgroundColor: '#3eb777'\n          }\n        }, answer));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", {\n        key: studentChoice\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#fff',\n          borderColor: '#ad1e3e',\n          backgroundColor: '#db1d41'\n        }\n      }, studentChoice)), React.createElement(\"li\", {\n        key: answer\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#32955c',\n          borderColor: '#32955c',\n          backgroundColor: '#fff'\n        }\n      }, answer)));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapEmptyBubbles\", function (id) {\n      var letters = [\"A\", \"B\", \"C\", \"D\"];\n      return letters.map(function (letter) {\n        return React.createElement(\"li\", {\n          key: letter\n        }, React.createElement(\"form\", null, React.createElement(\"input\", {\n          type: \"radio\",\n          id: \"\".concat(id).concat(letter),\n          name: \"letter\",\n          value: letter,\n          checked: _this.state.selected === letter,\n          onChange: function onChange(event) {\n            return _this.onHandleBubbleChange(event, letter);\n          },\n          onClick: function onClick(event) {\n            return _this.onSelectedBubbleClick(event);\n          }\n        }), React.createElement(\"label\", {\n          htmlFor: \"\".concat(id).concat(letter),\n          style: _this.state.selected ? _this.renderBubbleStyle(letter) : styles.plain\n        }, React.createElement(\"span\", {\n          style: {\n            display: 'block',\n            marginTop: '2px',\n            paddingLeft: \"4.5px\"\n          }\n        }, letter))));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderBubbleStyle\", function (letter) {\n      var _this$state = _this.state,\n          correct = _this$state.correct,\n          selected = _this$state.selected;\n      var answer = _this.props.question.answer;\n\n      if (selected === letter && correct) {\n        return styles.greenFilled;\n      }\n\n      if (selected === letter && !correct) {\n        return styles.red;\n      }\n\n      if (letter !== selected && letter === !answer) {\n        return styles.plain;\n      }\n\n      if (letter !== selected && letter === answer) {\n        return styles.greenBorderOnly;\n      }\n\n      return styles.plain;\n    });\n\n    _this.state = {\n      open: false,\n      selected: \"\",\n      correct: false\n    };\n    return _this;\n  }\n\n  _createClass(AnswerRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          question = _this$props.question,\n          index = _this$props.index;\n      var open = this.state.open;\n      return React.createElement(React.Fragment, null, React.createElement(QuestionModal, {\n        open: open,\n        onOpenQuestionModal: this.onOpenQuestionModal,\n        onCloseQuestionModal: this.onCloseQuestionModal,\n        question: question\n      }), React.createElement(\"li\", {\n        className: \"answers-list-holder\",\n        key: question.problem\n      }, React.createElement(\"div\", {\n        className: \"answer-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col col-120\"\n      }, React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, !question.numeric ? this.mapEmptyBubbles(question.id) : this.mapNumberBubbles({\n        index: index\n      }))), React.createElement(\"div\", {\n        className: \"col col-30\"\n      }, React.createElement(\"span\", {\n        className: \"status-info\"\n      }, question.status)), React.createElement(\"div\", {\n        className: \"col col-43\"\n      }, React.createElement(\"span\", {\n        className: \"play-progress\",\n        \"data-video-id\": \"video001\"\n      }, React.createElement(\"span\", {\n        className: \"play\"\n      }), React.createElement(\"svg\", {\n        viewBox: \"0 0 50 50\",\n        width: \"50\",\n        height: \"50\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, React.createElement(\"circle\", {\n        className: \"circle-static\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      }), React.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      })))), React.createElement(\"div\", {\n        className: \"col col-auto\"\n      }, question.flagged ? React.createElement(\"span\", {\n        className: \"status-answer\",\n        style: {\n          color: '#c0272d'\n        }\n      }, React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }), React.createElement(\"b\", {\n        className: \"status-text\"\n      }, \"Review\")) : null), React.createElement(\"div\", {\n        className: \"dropdown-block col col-35\"\n      }, React.createElement(\"a\", {\n        className: \"modal-trigger\",\n        href: \"#\",\n        onClick: this.onOpenQuestionModal\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")))), question.studentNotes ? React.createElement(\"div\", {\n        className: \"comment-block\"\n      }, React.createElement(\"p\", null, question.studentNotes)) : null));\n    }\n  }]);\n\n  return AnswerRow;\n}(React.Component);\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  sampleAnswers: PropTypes.array.isRequired\n};\nexport default AnswerRow;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailTestAnswerSheetComplete\\components\\WritingPage\\components\\AnswerRow\\index.js"],"names":["React","PropTypes","QuestionModal","styles","red","position","color","borderColor","border","backgroundColor","height","width","borderRadius","greenFilled","greenBorderOnly","plain","AnswerRow","props","question","studentChoice","answer","setState","selected","console","log","state","open","event","letter","target","value","checkIfCorrect","correct","index","sampleAnswers","id","letters","map","onHandleBubbleChange","onSelectedBubbleClick","renderBubbleStyle","display","marginTop","paddingLeft","onOpenQuestionModal","onCloseQuestionModal","problem","numeric","mapEmptyBubbles","mapNumberBubbles","status","flagged","studentNotes","Component","propTypes","object","isRequired","number","array"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,kBAA1B,C,CACA;;AAEA,IAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,QAAQ,EAAE,UAAZ;AAAwBC,IAAAA,KAAK,EAAE,MAA/B;AAAuCC,IAAAA,WAAW,EAAE,MAApD;AAA4DC,IAAAA,MAAM,EAAE,WAApE;AAAiFC,IAAAA,eAAe,EAAE,SAAlG;AAA6GC,IAAAA,MAAM,EAAE,MAArH;AAA6HC,IAAAA,KAAK,EAAE,MAApI;AAA4IC,IAAAA,YAAY,EAAE;AAA1J,GADQ;AAEbC,EAAAA,WAAW,EAAE;AAAER,IAAAA,QAAQ,EAAE,UAAZ;AAAwBC,IAAAA,KAAK,EAAE,MAA/B;AAAuCC,IAAAA,WAAW,EAAE,SAApD;AAA+DC,IAAAA,MAAM,EAAE,WAAvE;AAAoFC,IAAAA,eAAe,EAAE,SAArG;AAAgHC,IAAAA,MAAM,EAAE,MAAxH;AAAgIC,IAAAA,KAAK,EAAE,MAAvI;AAA+IC,IAAAA,YAAY,EAAE;AAA7J,GAFA;AAGbE,EAAAA,eAAe,EAAE;AAAET,IAAAA,QAAQ,EAAE,UAAZ;AAAwBC,IAAAA,KAAK,EAAE,SAA/B;AAA0CC,IAAAA,WAAW,EAAE,SAAvD;AAAkEC,IAAAA,MAAM,EAAE,WAA1E;AAAuFC,IAAAA,eAAe,EAAE,MAAxG;AAAgHC,IAAAA,MAAM,EAAE,MAAxH;AAAgIC,IAAAA,KAAK,EAAE,MAAvI;AAA+IC,IAAAA,YAAY,EAAE;AAA7J,GAHJ;AAIbG,EAAAA,KAAK,EAAE;AAAEV,IAAAA,QAAQ,EAAE,UAAZ;AAAwBC,IAAAA,KAAK,EAAE,SAA/B;AAA0CE,IAAAA,MAAM,EAAE,WAAlD;AAA+DD,IAAAA,WAAW,EAAE,SAA5E;AAAuFG,IAAAA,MAAM,EAAE,MAA/F;AAAuGC,IAAAA,KAAK,EAAE,MAA9G;AAAsHC,IAAAA,YAAY,EAAE;AAApI;AAJM,CAAf;;IAOMI,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AADiB,wEASG,YAAM;AAAA,iCACqB,MAAKA,KAD1B,CAClBC,QADkB;AAAA,UACNC,aADM,wBACNA,aADM;AAAA,UACSC,MADT,wBACSA,MADT;AAExB,YAAKC,QAAL,IAAiB;AAACC,QAAAA,QAAQ,EAAEH;AAAX,SAA2BI,OAAO,CAACC,GAAR,CAAY,MAAKC,KAAL,CAAWH,QAAvB,CAA5C,EAFwB,CAGtB;AACA;AACA;AAEL,KAhBkB;;AAAA,0EAkBG;AAAA,aAAM,MAAKD,QAAL,CAAc;AAACK,QAAAA,IAAI,EAAE;AAAP,OAAd,CAAN;AAAA,KAlBH;;AAAA,2EAmBI;AAAA,aAAM,MAAKL,QAAL,CAAc;AAACK,QAAAA,IAAI,EAAE;AAAP,OAAd,CAAN;AAAA,KAnBJ;;AAAA,2EAqBI,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACxC,YAAKP,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAEK,KAAK,CAACE,MAAN,CAAaC;AAAxB,OAAd,EACC;AAAA,eAAM,MAAKC,cAAL,CAAoBH,MAApB,CAAN;AAAA,OADD;AAEA,KAxBiB;;AAAA,4EA0BM,UAACD,KAAD,EAAW;AAAA,UAC1BL,QAD0B,GACb,MAAKG,KADQ,CAC1BH,QAD0B;AAAA,UAEfH,aAFe,GAEK,MAAKF,KAFV,CAE1BC,QAF0B,CAEfC,aAFe;;AAGlC,UAAIG,QAAQ,KAAKK,KAAK,CAACE,MAAN,CAAaC,KAA1B,IAAoCX,aAAa,KAAKQ,KAAK,CAACE,MAAN,CAAaC,KAAvE,EAA6E;AAC3E,cAAKT,QAAL,CAAc;AAACC,UAAAA,QAAQ,EAAE;AAAX,SAAd;AACD;AACF,KAhCkB;;AAAA,qEAkCF,UAACM,MAAD,EAAY;AAAA,UACnBV,QADmB,GACN,MAAKD,KADC,CACnBC,QADmB;;AAE3B,UAAGU,MAAM,KAAKV,QAAQ,CAACE,MAAvB,EAA+B;AAC7B,cAAKC,QAAL,CAAc;AAACW,UAAAA,OAAO,EAAE;AAAV,SAAd;AACD,OAFD,MAEK;AACH,cAAKX,QAAL,CAAc;AAACW,UAAAA,OAAO,EAAE;AAAV,SAAd;AACD,OAN0B,CAO3B;;AACD,KA1CkB;;AAAA,uEA6CA,gBAAe;AAAA,UAAZC,KAAY,QAAZA,KAAY;AAAA,UACxBC,aADwB,GACN,MAAKjB,KADC,CACxBiB,aADwB;AAAA,iCAECA,aAAa,CAACD,KAAD,CAFd;AAAA,UAExBb,MAFwB,wBAExBA,MAFwB;AAAA,UAEhBD,aAFgB,wBAEhBA,aAFgB;;AAG1B,UAAKC,MAAM,KAAKD,aAAhB,EAA+B;AACjC,eACE;AAAI,UAAA,GAAG,EAAEC;AAAT,WACE;AAAM,UAAA,SAAS,EAAC,4CAAhB;AAA6D,UAAA,KAAK,EAAE;AAACd,YAAAA,KAAK,EAAE,MAAR;AAAgBC,YAAAA,WAAW,EAAE,SAA7B;AAAwCE,YAAAA,eAAe,EAAE;AAAzD;AAApE,WAA0IW,MAA1I,CADF,CADF;AAKD;;AACD,aACI,oBAAC,KAAD,CAAO,QAAP,QACE;AAAI,QAAA,GAAG,EAAED;AAAT,SACE;AAAM,QAAA,SAAS,EAAC,4CAAhB;AAA8D,QAAA,KAAK,EAAE;AAACb,UAAAA,KAAK,EAAE,MAAR;AAAgBC,UAAAA,WAAW,EAAE,SAA7B;AAAwCE,UAAAA,eAAe,EAAE;AAAzD;AAArE,SAA2IU,aAA3I,CADF,CADF,EAIE;AAAI,QAAA,GAAG,EAAEC;AAAT,SACE;AAAM,QAAA,SAAS,EAAC,4CAAhB;AAA6D,QAAA,KAAK,EAAE;AAACd,UAAAA,KAAK,EAAE,SAAR;AAAmBC,UAAAA,WAAW,EAAE,SAAhC;AAA2CE,UAAAA,eAAe,EAAE;AAA5D;AAApE,SAA0IW,MAA1I,CADF,CAJF,CADJ;AAUC,KAjEc;;AAAA,sEAmED,UAACe,EAAD,EAAQ;AACxB,UAAMC,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAhB;AACA,aAAOA,OAAO,CAACC,GAAR,CAAY,UAAAT,MAAM;AAAA,eACvB;AAAI,UAAA,GAAG,EAAEA;AAAT,WACE,kCACE;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,EAAE,YAAKO,EAAL,SAAUP,MAAV,CAFJ;AAGE,UAAA,IAAI,EAAC,QAHP;AAIE,UAAA,KAAK,EAAEA,MAJT;AAKE,UAAA,OAAO,EAAE,MAAKH,KAAL,CAAWH,QAAX,KAAwBM,MALnC;AAME,UAAA,QAAQ,EAAE,kBAACD,KAAD;AAAA,mBAAW,MAAKW,oBAAL,CAA0BX,KAA1B,EAAiCC,MAAjC,CAAX;AAAA,WANZ;AAOE,UAAA,OAAO,EAAE,iBAACD,KAAD;AAAA,mBAAU,MAAKY,qBAAL,CAA2BZ,KAA3B,CAAV;AAAA;AAPX,UADF,EAUE;AACE,UAAA,OAAO,YAAKQ,EAAL,SAAUP,MAAV,CADT;AAEE,UAAA,KAAK,EAAE,MAAKH,KAAL,CAAWH,QAAX,GAAsB,MAAKkB,iBAAL,CAAuBZ,MAAvB,CAAtB,GAAuDzB,MAAM,CAACY;AAFvE,WAIA;AAAM,UAAA,KAAK,EAAE;AAAE0B,YAAAA,OAAO,EAAE,OAAX;AAAoBC,YAAAA,SAAS,EAAE,KAA/B;AAAsCC,YAAAA,WAAW,EAAE;AAAnD;AAAb,WAA4Ef,MAA5E,CAJA,CAVF,CADF,CADuB;AAAA,OAAlB,CAAP;AAqBD,KA1FkB;;AAAA,wEA4FC,UAAEA,MAAF,EAAc;AAAA,wBACF,MAAKH,KADH;AAAA,UACxBO,OADwB,eACxBA,OADwB;AAAA,UACfV,QADe,eACfA,QADe;AAAA,UAEZF,MAFY,GAEC,MAAKH,KAFN,CAExBC,QAFwB,CAEZE,MAFY;;AAGhC,UAAIE,QAAQ,KAAKM,MAAb,IAAuBI,OAA3B,EAAoC;AAClC,eAAO7B,MAAM,CAACU,WAAd;AACD;;AACD,UAAIS,QAAQ,KAAKM,MAAb,IAAuB,CAACI,OAA5B,EAAqC;AACnC,eAAO7B,MAAM,CAACC,GAAd;AACD;;AACD,UAAIwB,MAAM,KAAKN,QAAX,IAAuBM,MAAM,KAAK,CAACR,MAAvC,EAA+C;AAC7C,eAAOjB,MAAM,CAACY,KAAd;AACD;;AAAA,UAAGa,MAAM,KAAKN,QAAX,IAAuBM,MAAM,KAAKR,MAArC,EAA4C;AAC3C,eAAOjB,MAAM,CAACW,eAAd;AACD;;AACD,aAAOX,MAAM,CAACY,KAAd;AACD,KA3GkB;;AAEjB,UAAKU,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,KADK;AAEXJ,MAAAA,QAAQ,EAAE,EAFC;AAGXU,MAAAA,OAAO,EAAE;AAHE,KAAb;AAFiB;AAOlB;;;;6BAsGY;AAAA,wBACqB,KAAKf,KAD1B;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWe,KADX,eACWA,KADX;AAAA,UAECP,IAFD,GAEU,KAAKD,KAFf,CAECC,IAFD;AAGP,aACE,oBAAC,KAAD,CAAO,QAAP,QACA,oBAAC,aAAD;AAAe,QAAA,IAAI,EAAEA,IAArB;AAA2B,QAAA,mBAAmB,EAAE,KAAKkB,mBAArD;AAA0E,QAAA,oBAAoB,EAAE,KAAKC,oBAArG;AAA2H,QAAA,QAAQ,EAAE3B;AAArI,QADA,EAEF;AAAI,QAAA,SAAS,EAAC,qBAAd;AAAoC,QAAA,GAAG,EAAEA,QAAQ,CAAC4B;AAAlD,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAI,QAAA,SAAS,EAAC;AAAd,SASqB,CAAC5B,QAAQ,CAAC6B,OAT/B,GAUK,KAAKC,eAAL,CAAqB9B,QAAQ,CAACiB,EAA9B,CAVL,GAaK,KAAKc,gBAAL,CAAsB;AAAChB,QAAAA,KAAK,EAALA;AAAD,OAAtB,CAbL,CADF,CADF,EAoBE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAM,QAAA,SAAS,EAAC;AAAhB,SAA+Bf,QAAQ,CAACgC,MAAxC,CADF,CApBF,EAuBE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAgC,yBAAc;AAA9C,SACE;AAAM,QAAA,SAAS,EAAC;AAAhB,QADF,EAEE;AAAK,QAAA,OAAO,EAAC,WAAb;AAAyB,QAAA,KAAK,EAAC,IAA/B;AAAoC,QAAA,MAAM,EAAC,IAA3C;AAAgD,QAAA,OAAO,EAAC,KAAxD;AAA8D,QAAA,KAAK,EAAC;AAApE,SACE;AAAQ,QAAA,SAAS,EAAC,eAAlB;AAAkC,QAAA,EAAE,EAAE,IAAtC;AAA4C,QAAA,EAAE,EAAE,IAAhD;AAAsD,QAAA,CAAC,EAAE,IAAzD;AAA+D,QAAA,IAAI,EAAC,aAApE;AAAkF,QAAA,WAAW,EAAE;AAA/F,QADF,EAEE;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,EAAE,EAAE,IAAxC;AAA8C,QAAA,EAAE,EAAE,IAAlD;AAAwD,QAAA,CAAC,EAAE,IAA3D;AAAiE,QAAA,IAAI,EAAC,aAAtE;AAAoF,QAAA,WAAW,EAAE;AAAjG,QAFF,CAFF,CADF,CAvBF,EAgCE;AAAK,QAAA,SAAS,EAAC;AAAf,SACiBhC,QAAQ,CAACiC,OAD1B,GAEM;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAgC,QAAA,KAAK,EAAE;AAAC7C,UAAAA,KAAK,EAAE;AAAR;AAAvC,SACE;AAAG,QAAA,SAAS,EAAC;AAAb,QADF,EAC+B;AAAG,QAAA,SAAS,EAAC;AAAb,kBAD/B,CAFN,QAhCF,EAuCE;AAAK,QAAA,SAAS,EAAC;AAAf,SAEE;AAAG,QAAA,SAAS,EAAC,eAAb;AAA6B,QAAA,IAAI,EAAC,GAAlC;AAAsC,QAAA,OAAO,EAAE,KAAKsC;AAApD,SAAyE;AAAG,QAAA,SAAS,EAAC;AAAb,qBAAzE,CAFF,CAvCF,CADF,EA6CiB1B,QAAQ,CAACkC,YA7C1B,GA8CI;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,+BAAIlC,QAAQ,CAACkC,YAAb,CADF,CA9CJ,QAFE,CADF;AAyDL;;;;EA1KqBpD,KAAK,CAACqD,S;;AA6K9BrC,SAAS,CAACsC,SAAV,GAAsB;AACpBpC,EAAAA,QAAQ,EAAEjB,SAAS,CAACsD,MAAV,CAAiBC,UADP;AAEpBvB,EAAAA,KAAK,EAAEhC,SAAS,CAACwD,MAAV,CAAiBD,UAFJ;AAGpBtB,EAAAA,aAAa,EAAEjC,SAAS,CAACyD,KAAV,CAAgBF;AAHX,CAAtB;AAMA,eAAexC,SAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\n// import BubbleGroup from '../Bubble';\n\nconst styles = {\n  red: { position: 'relative', color: '#fff', borderColor: '#fff', border: '1px solid', backgroundColor: '#db1d41', height: '19px', width: '19px', borderRadius: '50%' },\n  greenFilled: { position: 'relative', color: '#fff', borderColor: '#32955c', border: '1px solid', backgroundColor: '#32955c', height: '19px', width: '19px', borderRadius: '50%' },\n  greenBorderOnly: { position: 'relative', color: '#32955c', borderColor: '#32955c', border: '1px solid', backgroundColor: '#fff', height: '19px', width: '19px', borderRadius: '50%' },\n  plain: { position: 'relative', color: '#a6a8ab', border: '1px solid', borderColor: '#a6a8ab', height: '19px', width: '19px', borderRadius: '50%' }\n}\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      selected: \"\",\n      correct: false,\n     }\n  };\n\n    componentDidMount = () => {\n    const { question: { studentChoice, answer} } = this.props;\n      this.setState = ({selected: studentChoice}, console.log(this.state.selected))\n        // , () => {\n        // if (this.state.selected === answer) {\n        //       this.setState({correct: true})\n      \n  }\n\n  onOpenQuestionModal = () => this.setState({open: true})\n  onCloseQuestionModal = () => this.setState({open: false});\n\n  onHandleBubbleChange = (event, letter) => {\n    this.setState({selected: event.target.value},\n     () => this.checkIfCorrect(letter))\n   }\n\n   onSelectedBubbleClick = (event) => {\n    const { selected } = this.state;\n    const { question: {studentChoice} }  = this.props;\n    if (selected === event.target.value  && studentChoice !== event.target.value){\n      this.setState({selected: \"\"})\n    }\n  }\n \n  checkIfCorrect = (letter) => {\n    const { question } = this.props;\n    if(letter === question.answer) {\n      this.setState({correct: true});\n    }else{\n      this.setState({correct: false})\n    }\n    // update counter on writing page\n  }\n\n\n  mapNumberBubbles = ({ index} ) => {\n    const { sampleAnswers } = this.props;\n    const { answer, studentChoice }= sampleAnswers[index];\n          if ( answer === studentChoice) {\n        return (\n          <li key={answer}>\n            <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777'}}>{answer}</span>\n          </li>\n        )\n      }\n      return (\n          <React.Fragment>\n            <li key={studentChoice}>\n              <span className=\"badge badge-rounded badge-rounded-bordered\"  style={{color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41'}}>{studentChoice}</span>\n            </li>\n            <li key={answer} >\n              <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#32955c', borderColor: '#32955c', backgroundColor: '#fff'}}>{answer}</span>\n            </li>\n          </React.Fragment>\n        )\n      };\n\n  mapEmptyBubbles = (id) => {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    return letters.map(letter => (\n      <li key={letter}>\n        <form>\n          <input\n            type=\"radio\"\n            id={`${id}${letter}`}\n            name=\"letter\"\n            value={letter}\n            checked={this.state.selected === letter}\n            onChange={(event) => this.onHandleBubbleChange(event, letter)}\n            onClick={(event)=> this.onSelectedBubbleClick(event)}\n            />\n          <label\n            htmlFor={`${id}${letter}`}\n            style={this.state.selected ? this.renderBubbleStyle(letter) : styles.plain}\n            >\n          <span style={{ display: 'block', marginTop: '2px', paddingLeft: \"4.5px\" }}>{letter}</span>\n          </label>\n        </form>\n      </li>\n    ))\n  }\n\n  renderBubbleStyle = ( letter ) => {\n    const { correct, selected } = this.state;\n    const { question: { answer } } = this.props;\n    if (selected === letter && correct) {\n      return styles.greenFilled\n    }\n    if (selected === letter && !correct) {\n      return styles.red\n    }\n    if (letter !== selected && letter === !answer) {\n      return styles.plain\n    }if(letter !== selected && letter === answer){\n      return styles.greenBorderOnly\n    }\n    return styles.plain\n  }\n \n      render() {\n        const { question, index } = this.props;\n        const { open } = this.state;\n        return (\n          <React.Fragment>\n          <QuestionModal open={open} onOpenQuestionModal={this.onOpenQuestionModal} onCloseQuestionModal={this.onCloseQuestionModal} question={question}/>\n        <li className=\"answers-list-holder\" key={question.problem}>\n          <div className=\"answer-row row mb-0\" >\n            <div className=\"col col-120\">\n              <ul className=\"answer-list\">\n                {/* <BubbleGroup\n                id={question.id}\n                 question={question}\n                 correct={correct}\n                 selected={selected}\n                 onHandleBubbleChange={this.onHandleBubbleChange}\n                 onSelectedBubbleClick={this.onSelectedBubbleClick}/> */}\n                <Choose>\n                  <When condition={!question.numeric}>\n                  {this.mapEmptyBubbles(question.id)}               \n                  </When>\n                  <Otherwise>\n                  {this.mapNumberBubbles({index})}\n                  </Otherwise>\n                </Choose>\n                </ul>\n            </div>\n            <div className=\"col col-30\">\n              <span className=\"status-info\">{question.status}</span>\n            </div>\n            <div className=\"col col-43\">\n              <span className=\"play-progress\" data-video-id=\"video001\">\n                <span className=\"play\"></span>\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle className=\"circle-static\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n                  <circle className=\"circle-progress\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n                </svg>\n              </span>\n            </div>\n            <div className=\"col col-auto\">\n              <If condition={question.flagged}>\n                  <span className=\"status-answer\" style={{color: '#c0272d'}}>\n                    <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n                  </span>\n              </If>\n            </div>\n            <div className=\"dropdown-block col col-35\">\n\n              <a className='modal-trigger' href=\"#\" onClick={this.onOpenQuestionModal}><i className=\"material-icons dots-icon\">more_vert</i></a>\n            </div>\n          </div>\n          <If condition={question.studentNotes}>\n            <div className=\"comment-block\">\n              <p>{question.studentNotes}</p>\n            </div>\n          </If>\n        </li>\n      </React.Fragment>\n\n    )\n  }\n}\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  sampleAnswers: PropTypes.array.isRequired,\n}\n\nexport default AnswerRow;\n\n"]},"metadata":{},"sourceType":"module"}