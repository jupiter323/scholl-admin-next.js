{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TableHeader from './components/TableHeader';\nimport formatTimeEstimate from '../../utils/formatTimeEstimate';\nimport statusColorMap from '../../utils/statusColorMap';\n\nvar ListView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListView, _React$Component);\n\n  function ListView(props) {\n    var _this;\n\n    _classCallCheck(this, ListView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListView).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDropdownClick\", function (event, index) {\n      var dropdownIsOpen = _this.state.dropdownIsOpen;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return _this.onCloseDropdown();\n      }\n\n      return _this.onSetDropdown(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapWorksheetRows\", function () {\n      var _this$props = _this.props,\n          worksheets = _this$props.worksheets,\n          onToggleDetailModalOpen = _this$props.onToggleDetailModalOpen;\n      var _this$state = _this.state,\n          dropdownIndex = _this$state.dropdownIndex,\n          dropdownIsOpen = _this$state.dropdownIsOpen;\n      return worksheets.map(function (worksheet, index) {\n        var disabled = worksheet.disabled,\n            worksheetName = worksheet.worksheetName,\n            score = worksheet.score,\n            status = worksheet.status,\n            problems = worksheet.problems,\n            timeEstimate = worksheet.timeEstimate,\n            assignDate = worksheet.assignDate,\n            dueDate = worksheet.dueDate,\n            completed = worksheet.completed,\n            flags = worksheet.flags;\n        return React.createElement(\"div\", {\n          className: disabled ? 'card card-disabled list-table-row' : 'card list-table-row',\n          key: worksheet.id\n        }, React.createElement(\"div\", {\n          className: \"list-table-cell icon-cell\"\n        }, React.createElement(\"span\", {\n          className: \"block-icon\"\n        }, React.createElement(\"i\", {\n          className: \"icon-sheets-w\"\n        }))), React.createElement(\"div\", {\n          className: \"list-table-cell name-cell\"\n        }, React.createElement(\"div\", {\n          className: \"card-panel-text truncate\"\n        }, React.createElement(\"div\", {\n          className: \"text-large truncate\"\n        }, worksheetName))), React.createElement(\"div\", {\n          className: \"list-table-cell graph-cell\"\n        }, score && React.createElement(\"span\", {\n          className: \"chart-bar \".concat(statusColorMap[status], \" white-text\")\n        }, score, \"%\")), React.createElement(\"div\", {\n          className: \"list-table-cell description-cell\"\n        }, problems), React.createElement(\"div\", {\n          className: \"list-table-cell time-cell\"\n        }, formatTimeEstimate(timeEstimate)), React.createElement(\"div\", {\n          className: \"list-table-cell date-cell\"\n        }, React.createElement(\"time\", {\n          dateTime: \"2019-01-27\"\n        }, assignDate)), React.createElement(\"div\", {\n          className: \"list-table-cell date-cell\"\n        }, React.createElement(\"time\", {\n          dateTime: \"2019-01-27\"\n        }, dueDate)), React.createElement(\"div\", {\n          className: \"list-table-cell completed-cell\"\n        }, completed && React.createElement(React.Fragment, null, completed, \" of \", problems)), React.createElement(\"div\", {\n          className: \"list-table-cell flags-cell\"\n        }, flags.length > 0 && React.createElement(\"span\", {\n          className: \"badge-rounded-xs badge red darken-2 white-text\"\n        }, React.createElement(\"b\", {\n          className: \"badge-text\"\n        }, flags.length), \" \", React.createElement(\"i\", {\n          className: \"icon-flag\"\n        }))), React.createElement(\"div\", {\n          className: \"list-table-cell status-cell\"\n        }, React.createElement(\"span\", {\n          className: \"badge badge-rounded-md \".concat(statusColorMap[status], \" white-text\")\n        }, status)), React.createElement(\"div\", {\n          className: \"list-table-cell drop-cell\"\n        }, React.createElement(\"div\", {\n          className: \"dropdown-block\"\n        }, React.createElement(\"a\", {\n          href: \"#\",\n          \"data-target\": \"dropdown01\",\n          className: \"dropdown-trigger btn\",\n          onClick: function onClick(event) {\n            return _this.handleDropdownClick(event, index);\n          }\n        }, React.createElement(\"i\", {\n          className: \"material-icons dots-icon\"\n        }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? React.createElement(\"ul\", {\n          id: \"dropdown01\",\n          className: \"dropdown-content dropdown-wide\",\n          style: {\n            display: 'block',\n            opacity: '1',\n            transform: 'scaleX(1) scaleY(1)'\n          }\n        }, React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#\",\n          className: \"modal-trigger link-block\",\n          onClick: function onClick() {\n            return onToggleDetailModalOpen(index);\n          }\n        }, \"View Details\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#!\"\n        }, \"Dismiss Flags\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#!\"\n        }, \"Reset\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#!\",\n          className: \"link-delete\"\n        }, \"Delete\"))) : null)));\n      });\n    });\n\n    _this.state = {\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    };\n    return _this;\n  }\n\n  _createClass(ListView, [{\n    key: \"render\",\n    value: function render() {\n      var worksheets = this.props.worksheets;\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"content-section\"\n      }, React.createElement(\"div\", {\n        className: \"container-md\"\n      }, React.createElement(\"div\", {\n        className: \"result-row center-align\"\n      }, React.createElement(\"b\", {\n        className: \"result\"\n      }, \" - \", worksheets.length, \" results -\")), React.createElement(\"div\", {\n        className: \"list-view-section\"\n      }, React.createElement(\"div\", {\n        className: \"list-table\"\n      }, React.createElement(TableHeader, null), React.createElement(\"div\", {\n        className: \"list-table-body\"\n      }, this.mapWorksheetRows()))))));\n    }\n  }]);\n\n  return ListView;\n}(React.Component);\n\nexport default ListView;","map":null,"metadata":{},"sourceType":"module"}