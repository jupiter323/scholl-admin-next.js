{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport FilterSection from './components/FilterSection';\nimport TestSectionCard from './components/TestSectionCard';\nimport { availableDateSort, dueDateSort, statusSort, flagsSort, problemSort, timeEstimateSort, subjectSort, percentageCompleteSort } from '../utils/sortOptions';\nimport { testSectionSubjectMap } from '../utils/testSectionCardUtils';\nimport sampleTestSections from '../utils/sampleTestSections';\n\nvar TestSectionsPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TestSectionsPage, _React$Component);\n\n  function TestSectionsPage(props) {\n    var _this;\n\n    _classCallCheck(this, TestSectionsPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestSectionsPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClearFilters\", function () {\n      return _this.setState({\n        sort: '',\n        testVersionFilter: '',\n        subjectFilters: [],\n        flagFilter: false,\n        availableDateFilters: [],\n        dueDateFilters: []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (value) {\n      return _this.setState({\n        testVersionFilter: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function () {\n      return _this.setState({\n        testVersionFilter: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortTestSections\", function (testSections) {\n      var sort = _this.state.sort;\n\n      switch (sort) {\n        case 'flags':\n          return testSections.sort(flagsSort);\n\n        case 'dueDate':\n          return testSections.sort(dueDateSort);\n\n        case 'availableDate':\n          return testSections.sort(availableDateSort);\n\n        case 'status':\n          return testSections.sort(statusSort);\n\n        case 'problems':\n          return testSections.sort(problemSort);\n\n        case 'timeEstimate':\n          return testSections.sort(timeEstimateSort);\n\n        case 'subject':\n          return testSections.sort(subjectSort);\n\n        case 'percentageComplete':\n          return testSections.sort(percentageCompleteSort);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByTestVersion\", function () {\n      var _this$state = _this.state,\n          testSections = _this$state.testSections,\n          testVersionFilter = _this$state.testVersionFilter;\n      return testSections.reduce(function (finalArr, currentTestSection) {\n        var version = currentTestSection.version;\n        var testSectionString = version.replace(/\\s/g, \"\").toLowerCase();\n\n        if (testSectionString.indexOf(testVersionFilter) !== -1 && finalArr.indexOf(currentTestSection) === -1) {\n          finalArr.push(currentTestSection);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByDate\", function (incomingSections, dateType) {\n      var _this$state2 = _this.state,\n          dueDateFilters = _this$state2.dueDateFilters,\n          availableDateFilters = _this$state2.availableDateFilters;\n      var dateFilters;\n      var testSections = incomingSections;\n      var currentDate = moment().format('MM/DD/YY');\n      var currentDateIndex = new Date().getDay();\n      var endOfWeekIndex = 6 - currentDateIndex;\n      var endOfWeekDate = moment().add(endOfWeekIndex, 'days').format('MM/DD/YY');\n\n      if (dateType === 'dueDate') {\n        dateFilters = dueDateFilters;\n\n        if (dateFilters.indexOf('dueToday') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.dueDate === currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('dueNextSession') !== -1) {\n          console.warn('Pending decision on how next session date is calculated');\n        }\n\n        if (dateFilters.indexOf('overdue') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.dueDate < currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('dueThisWeek') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.dueDate >= currentDate && testSection.dueDate <= endOfWeekDate;\n          });\n        }\n      } else {\n        dateFilters = availableDateFilters;\n\n        if (dateFilters.indexOf('future') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.availableDate > currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('available') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.availableDate <= currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('complete') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.percentageComplete === '100';\n          });\n        }\n      }\n\n      return testSections;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterTestSections\", function () {\n      var _this$state3 = _this.state,\n          subjectFilters = _this$state3.subjectFilters,\n          dueDateFilters = _this$state3.dueDateFilters,\n          availableDateFilters = _this$state3.availableDateFilters,\n          flagFilter = _this$state3.flagFilter,\n          allTestSections = _this$state3.testSections;\n      var testSections = allTestSections;\n\n      if (subjectFilters.length) {\n        testSections = testSections.filter(function (testSection) {\n          return subjectFilters.indexOf(testSectionSubjectMap[testSection.subject]) !== -1;\n        });\n      }\n\n      if (dueDateFilters.length) {\n        testSections = _this.onFilterByDate(testSections, 'dueDate');\n      }\n\n      if (availableDateFilters.length) {\n        testSections = _this.onFilterByDate(testSections, 'availableDate');\n      }\n\n      if (flagFilter) {\n        testSections = testSections.filter(function (testSection) {\n          return testSection.flags.length;\n        });\n      }\n\n      return testSections;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMappableTestSections\", function () {\n      var _this$state4 = _this.state,\n          subjectFilters = _this$state4.subjectFilters,\n          dueDateFilters = _this$state4.dueDateFilters,\n          availableDateFilters = _this$state4.availableDateFilters,\n          flagFilter = _this$state4.flagFilter,\n          sort = _this$state4.sort,\n          testVersionFilter = _this$state4.testVersionFilter,\n          testSections = _this$state4.testSections;\n      var mappableTestSections = testSections;\n\n      if (testVersionFilter.length) {\n        mappableTestSections = _this.onFilterByTestVersion();\n      }\n\n      if (subjectFilters.length || dueDateFilters.length || availableDateFilters.length || flagFilter) {\n        mappableTestSections = _this.onFilterTestSections();\n      }\n\n      if (sort) {\n        return _this.onSortTestSections(mappableTestSections);\n      }\n\n      return mappableTestSections;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFilterClick\", function (filterType, filter) {\n      var _this$state5 = _this.state,\n          currentAvailableDateFilters = _this$state5.availableDateFilters,\n          currentDueDateFilters = _this$state5.dueDateFilters,\n          currentSubjectFilters = _this$state5.subjectFilters,\n          flagFilter = _this$state5.flagFilter;\n      var modifiedFilterCurrentState;\n      var modifiedFilterName;\n      var modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n\n        case 'availableDate':\n          modifiedFilterCurrentState = currentAvailableDateFilters;\n          modifiedFilterName = 'availableDateFilters';\n          break;\n\n        case 'hasFlags':\n          return _this.setState({\n            flagFilter: !flagFilter\n          });\n\n        default:\n          break;\n      }\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        var filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      _this.setState(_defineProperty({}, modifiedFilterName, modifiedFilterUpdatedState));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapTestSections\", function () {\n      return _this.getMappableTestSections().map(function (testSection, index) {\n        return React.createElement(TestSectionCard, {\n          index: index,\n          key: testSection.id,\n          testSection: testSection,\n          onSetDropdown: _this.onSetDropdown,\n          onCloseDropdown: _this.onCloseDropdown,\n          dropdownIndex: _this.state.dropdownIndex,\n          dropdownIsOpen: _this.state.dropdownIsOpen\n        });\n      });\n    });\n\n    _this.state = {\n      sort: '',\n      testVersionFilter: '',\n      subjectFilters: [],\n      flagFilter: false,\n      availableDateFilters: [],\n      dueDateFilters: [],\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      testSections: sampleTestSections\n    };\n    return _this;\n  }\n\n  _createClass(TestSectionsPage, [{\n    key: \"render\",\n    value: function render() {\n      var testSections = this.state.testSections;\n      return React.createElement(React.Fragment, null, React.createElement(FilterSection, {\n        sort: this.state.sort,\n        onSetSort: this.onSetSort,\n        flagFilter: this.state.flagFilter,\n        onClearFilters: this.onClearFilters,\n        handleFilterClick: this.handleFilterClick,\n        subjectFilters: this.state.subjectFilters,\n        dueDateFilters: this.state.dueDateFilters,\n        availableDateFilters: this.state.availableDateFilters,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState\n      }), React.createElement(\"div\", {\n        className: \"content-section\"\n      }, React.createElement(\"div\", {\n        className: \"result-row center-align\"\n      }, React.createElement(\"b\", {\n        className: \"result\"\n      }, \" - \", testSections.length, \" results -\")), React.createElement(\"div\", {\n        className: \"row d-flex-content card-width-272\"\n      }, this.mapTestSections())));\n    }\n  }]);\n\n  return TestSectionsPage;\n}(React.Component);\n\nexport default TestSectionsPage;","map":null,"metadata":{},"sourceType":"module"}