{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport StatusPage from \"../components/Classes/StatusPage\";\nimport ListPage from \"../components/Classes/ListPage\";\nimport Moment from 'moment';\nimport sampleClass from \"../components/Classes/utils/sampleClass\";\nimport createNewClassRoomApi from '../components/Classes/index/api';\n\nvar Classes =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Classes, _React$Component);\n\n  function Classes(props) {\n    var _this;\n\n    _classCallCheck(this, Classes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Classes).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleClassCard\", function (index) {\n      var classes = _this.state.classes;\n\n      _this.setState({\n        selectedClass: classes[index]\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddNewClass\", function (newClass) {\n      var prevClassState = _this.state.classes;\n      var formattedNewClass = {\n        summary: {\n          amount_students: 10,\n          start_date: \"6/1/19\",\n          end_date: \"8/5/19\",\n          improvement: 123,\n          coursework_assigned: 60,\n          coursework_completed: 90,\n          problems_flagged_review: 40,\n          average_score: 1256,\n          achieved_target_score: 85,\n          average_practice_tests_completed: 1.8,\n          instruction: 14\n        },\n        accountInfo: {\n          lastName: 'Admin',\n          firstName: 'Company',\n          email: 'test2@example.com',\n          gender: 'M'\n        },\n        contactInfo: {\n          phone: '1234567890',\n          streetAddress: '1234 Test Road',\n          city: 'Austin',\n          state: 'TX',\n          zip: '78751'\n        },\n        classInfo: newClass.classInfo,\n        location: newClass.location,\n        instructor: newClass.instructor\n      };\n      var updatedClasses = update(prevClassState, {\n        $push: [formattedNewClass]\n      });\n\n      _this.setState({\n        classes: updatedClasses\n      });\n\n      _this.onCreateNewClassApi(newClass);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloneClass\", function (index) {\n      var classes = _this.state.classes;\n\n      _this.setState(function (prevState) {\n        prevState.classes.push(classes[index]);\n        return {\n          classes: prevState.classes\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"arrayItemRemover\", function (array, value) {\n      return array.filter(function (classroom) {\n        return classroom !== value;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteClass\", function (index) {\n      var classes = _this.state.classes;\n\n      var newClassesArray = _this.arrayItemRemover(classes, classes[index]);\n\n      _this.setState({\n        classes: newClassesArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCreateNewClassApi\", function _callee(classroom) {\n      var newId, className, _classroom$accountInf, start_date, end_date, isExclude, locations, instructors, formattedClassRoom;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              newId = _this.state.classes.length + 1;\n              className = classroom.classInfo.className, _classroom$accountInf = classroom.accountInfo, start_date = _classroom$accountInf.start_date, end_date = _classroom$accountInf.end_date, isExclude = _classroom$accountInf.isExclude, locations = classroom.location.locations, instructors = classroom.instructor.instructors;\n              formattedClassRoom = {\n                id: newId,\n                name: className,\n                start_date: Moment(start_date).format('YYYY-MM-DD'),\n                end_date: Moment(end_date).format('YYYY-MM-DD'),\n                duration: \"string\",\n                exclude_from_statistics: isExclude,\n                locations: locations,\n                instructors: instructors,\n                students: \"\"\n              };\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(createNewClassRoomApi(formattedClassRoom));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveClassChanges\", function (updatedClasRoom) {\n      var originalClasses = _this.state.classes;\n      var classToUpdate = originalClasses.filter(function (classroom) {\n        return classroom.id === updatedClasRoom.id;\n      })[0];\n      var updatedClassIndex = originalClasses.indexOf(classToUpdate);\n      var classes = update(originalClasses, {\n        $splice: [[updatedClassIndex, 1, updatedClasRoom]]\n      }); // saveChangesSuccess();\n\n      _this.setState({\n        classes: classes\n      });\n    });\n\n    _this.state = {\n      selectedClass: null,\n      classes: sampleClass\n    };\n    return _this;\n  }\n\n  _createClass(Classes, [{\n    key: \"render\",\n    value: function render() {\n      var selectedClass = this.state.selectedClass;\n      return __jsx(React.Fragment, null, __jsx(\"main\", {\n        id: \"main\",\n        role: \"main\"\n      }, __jsx(\"div\", {\n        className: \"main-holder grey lighten-5 switcher-section\"\n      }, !selectedClass && __jsx(ListPage, {\n        classes: this.state.classes,\n        onHandleClassCard: this.onHandleClassCard,\n        onCloneClass: this.onCloneClass,\n        onDeleteClass: this.onDeleteClass,\n        onSaveNewClass: this.onAddNewClass,\n        onSaveClassChanges: this.onSaveClassChanges\n      }), selectedClass && __jsx(StatusPage, null))));\n    }\n  }]);\n\n  return Classes;\n}(React.Component);\n\nexport default Classes;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/pages/classes.js"],"names":["React","update","StatusPage","ListPage","Moment","sampleClass","createNewClassRoomApi","Classes","props","index","classes","state","setState","selectedClass","newClass","prevClassState","formattedNewClass","summary","amount_students","start_date","end_date","improvement","coursework_assigned","coursework_completed","problems_flagged_review","average_score","achieved_target_score","average_practice_tests_completed","instruction","accountInfo","lastName","firstName","email","gender","contactInfo","phone","streetAddress","city","zip","classInfo","location","instructor","updatedClasses","$push","onCreateNewClassApi","prevState","push","array","value","filter","classroom","newClassesArray","arrayItemRemover","newId","length","className","isExclude","locations","instructors","formattedClassRoom","id","name","format","duration","exclude_from_statistics","students","updatedClasRoom","originalClasses","classToUpdate","updatedClassIndex","indexOf","$splice","onHandleClassCard","onCloneClass","onDeleteClass","onAddNewClass","onSaveClassChanges","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport update from 'immutability-helper';\nimport StatusPage from \"../components/Classes/StatusPage\";\nimport ListPage from \"../components/Classes/ListPage\";\nimport Moment from 'moment';\nimport sampleClass from \"../components/Classes/utils/sampleClass\";\nimport createNewClassRoomApi from '../components/Classes/index/api';\n\n\nclass Classes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedClass: null,\n      classes: sampleClass,\n    };\n  }\n\n  onHandleClassCard = (index) => {\n    const { classes } = this.state;\n    this.setState({ selectedClass: classes[index] });\n  };\n\n  onAddNewClass = (newClass) => {\n    const {classes:prevClassState} = this.state;\n    const formattedNewClass = {\n      summary:{\n        amount_students:10,\n        start_date:\"6/1/19\",\n        end_date:\"8/5/19\",\n        improvement:123,\n        coursework_assigned:60,\n        coursework_completed:90,\n        problems_flagged_review:40,\n        average_score:1256,\n        achieved_target_score:85,\n        average_practice_tests_completed:1.8,\n        instruction:14,\n      },\n      accountInfo:{\n        lastName: 'Admin',\n        firstName: 'Company',\n        email: 'test2@example.com',\n        gender: 'M',\n      },\n      contactInfo: {\n        phone: '1234567890',\n        streetAddress: '1234 Test Road',\n        city: 'Austin',\n        state: 'TX',\n        zip: '78751',\n      },\n      classInfo:newClass.classInfo,\n      location: newClass.location,\n      instructor: newClass.instructor,\n    };\n    const updatedClasses = update(prevClassState,{$push:[formattedNewClass]});\n    this.setState({ classes:updatedClasses})\n    this.onCreateNewClassApi(newClass);\n  }\n\n  onCloneClass = (index) => {\n    const { classes } = this.state;\n    this.setState(prevState => {\n      prevState.classes.push(classes[index]);\n      return { classes: prevState.classes}\n    })\n  }\n\n  arrayItemRemover = (array, value) => array.filter((classroom) => classroom !== value)\n\n  onDeleteClass = (index) => {\n    const { classes } = this.state;\n    const newClassesArray = this.arrayItemRemover(classes, classes[index])\n    this.setState({classes: newClassesArray})\n  }\n\n  onCreateNewClassApi = async(classroom) => {\n    const newId = this.state.classes.length + 1;\n    const {classInfo:{className},accountInfo:{start_date,end_date,isExclude},location:{locations},instructor:{instructors}} = classroom;\n    const formattedClassRoom = {\n      id:newId,\n      name: className,\n      start_date: Moment(start_date).format('YYYY-MM-DD'),\n      end_date: Moment(end_date).format('YYYY-MM-DD'),\n      duration: \"string\",\n      exclude_from_statistics: isExclude,\n      locations,\n      instructors,\n      students: \"\",\n    };\n    await createNewClassRoomApi(formattedClassRoom);\n  }\n\n  onSaveClassChanges = (updatedClasRoom) => {\n    const { classes: originalClasses } = this.state;\n    const classToUpdate = originalClasses.filter(classroom => classroom.id === updatedClasRoom.id)[0];\n    const updatedClassIndex = originalClasses.indexOf(classToUpdate);\n    const classes = update(originalClasses, {\n      $splice: [[updatedClassIndex, 1, updatedClasRoom]],\n    });\n    // saveChangesSuccess();\n    this.setState({ classes });\n  }\n\n  render() {\n    const { selectedClass } = this.state;\n    return (\n      <React.Fragment>\n        <main id=\"main\" role=\"main\">\n          <div className=\"main-holder grey lighten-5 switcher-section\">\n            {!selectedClass &&\n              <ListPage\n                classes={this.state.classes}\n                onHandleClassCard={this.onHandleClassCard}\n                onCloneClass = {this.onCloneClass}\n                onDeleteClass = {this.onDeleteClass}\n                onSaveNewClass = {this.onAddNewClass}\n                onSaveClassChanges = {this.onSaveClassChanges}\n              />\n            }\n            {selectedClass && <StatusPage />}\n          </div>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Classes;\n"]},"metadata":{},"sourceType":"module"}