{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\n\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { getCalendarCellClassName, getCalendarDayClassName } from '../../utils/dateAndCalendarUtils';\n\nvar getListStyle = function getListStyle(isDraggingOver) {\n  return {\n    background: isDraggingOver ? 'lightblue' : 'inherit'\n  };\n}; // eslint-disable-next-line react/prefer-stateless-function\n\n\nvar CalendarDate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CalendarDate, _React$Component);\n\n  function CalendarDate() {\n    _classCallCheck(this, CalendarDate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CalendarDate).apply(this, arguments));\n  }\n\n  _createClass(CalendarDate, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          date = _this$props.date,\n          dayDate = _this$props.dayDate,\n          calDate = _this$props.calDate,\n          inMonth = _this$props.inMonth,\n          hasEvents = _this$props.hasEvents,\n          isActiveDate = _this$props.isActiveDate,\n          inActiveColumn = _this$props.inActiveColumn,\n          addDropdownOpen = _this$props.addDropdownOpen,\n          onSetActiveDate = _this$props.onSetActiveDate,\n          shouldMapLessons = _this$props.shouldMapLessons,\n          shouldMapSessions = _this$props.shouldMapSessions,\n          deleteDropdownOpen = _this$props.deleteDropdownOpen,\n          onToggleAddDropdown = _this$props.onToggleAddDropdown,\n          shouldMapWorksheets = _this$props.shouldMapWorksheets,\n          shouldMapTestSections = _this$props.shouldMapTestSections,\n          onToggleDeleteDropdown = _this$props.onToggleDeleteDropdown,\n          shouldMapSimulatedSats = _this$props.shouldMapSimulatedSats,\n          activeDateKey = _this$props.activeDateKey,\n          mapDateSessions = _this$props.mapDateSessions,\n          mapDateLessons = _this$props.mapDateLessons,\n          mapDateWorksheets = _this$props.mapDateWorksheets,\n          mapTestSections = _this$props.mapTestSections,\n          mapSimulatedSats = _this$props.mapSimulatedSats,\n          toggleAssignSessionModal = _this$props.toggleAssignSessionModal,\n          toggleAssignLessonsModal = _this$props.toggleAssignLessonsModal,\n          toggleAssignWorksheetsModal = _this$props.toggleAssignWorksheetsModal,\n          toggleAssignTestSectionModal = _this$props.toggleAssignTestSectionModal,\n          toggleAssignSimulatedSatModal = _this$props.toggleAssignSimulatedSatModal,\n          sessions = _this$props.sessions,\n          lessons = _this$props.lessons,\n          worksheets = _this$props.worksheets,\n          testSections = _this$props.testSections,\n          simulatedSat = _this$props.simulatedSat;\n      return React.createElement(React.Fragment, null, !inMonth ? React.createElement(\"td\", {\n        className: \"cal-cell1 cal-cell cal-day-outmonth\",\n        key: dayDate\n      }, React.createElement(\"div\", {\n        className: getCalendarDayClassName(date, inMonth, activeDateKey)\n      }, React.createElement(\"span\", {\n        className: \"day-date\"\n      }, dayDate), React.createElement(\"span\", {\n        className: \"cal-date\"\n      }, calDate))) : React.createElement(\"td\", {\n        key: activeDateKey,\n        className: getCalendarCellClassName(hasEvents, inActiveColumn),\n        onClick: function onClick() {\n          return onSetActiveDate(activeDateKey);\n        }\n      }, React.createElement(Droppable, {\n        droppableId: \"droppable-\".concat(date)\n      }, function (provided, snapshot) {\n        return React.createElement(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver)\n        }, React.createElement(\"div\", {\n          className: getCalendarDayClassName(date, inMonth, activeDateKey)\n        }, React.createElement(\"span\", {\n          className: \"day-date\"\n        }, dayDate), React.createElement(\"span\", {\n          className: \"cal-date\"\n        }, calDate), React.createElement(\"ul\", {\n          className: \"day-collapsible collapsible\"\n        }, React.createElement(\"li\", {\n          className: isActiveDate ? 'collapsible-holder active' : 'collapsible-holder',\n          style: {\n            transform: 'none'\n          }\n        }, React.createElement(\"div\", {\n          className: \"collapsible-header\",\n          style: {\n            display: inActiveColumn && isActiveDate ? 'none' : 'block'\n          }\n        }, React.createElement(\"span\", {\n          className: \"fake-close\"\n        }, React.createElement(\"span\", {\n          className: \"icon-close-thin\"\n        })), hasEvents ? React.createElement(\"ul\", {\n          className: \"events-list events-list-short\"\n        }, shouldMapSessions ? React.createElement(\"li\", {\n          className: \"event-frame event-title\"\n        }, React.createElement(\"span\", {\n          className: \"event-title-box\"\n        }, \"Session \", sessions.length)) : null, shouldMapLessons ? React.createElement(\"li\", {\n          className: \"event-frame\"\n        }, React.createElement(\"span\", {\n          className: \"event event-lesson-box\"\n        }, \" \", lessons.length, \" \", React.createElement(\"span\", {\n          className: \"event-text\"\n        }, \"Lesson\", lessons.length > 1 && 's'))) : null, shouldMapWorksheets ? React.createElement(\"li\", {\n          className: \"event-frame\"\n        }, React.createElement(\"span\", {\n          className: \"event event-worksheet-box\"\n        }, worksheets.length, \" \", React.createElement(\"span\", {\n          className: \"event-text\"\n        }, \"Worksheet\", worksheets.length > 1 && 's'))) : null, shouldMapTestSections ? React.createElement(\"li\", {\n          className: \"event-frame\"\n        }, React.createElement(\"span\", {\n          className: \"event event-test-box\"\n        }, testSections.length, \" \", React.createElement(\"span\", {\n          className: \"event-text\"\n        }, \"Test Section\", testSections.length > 1 && 's'))) : null, shouldMapSimulatedSats ? React.createElement(\"li\", {\n          className: \"event-frame\"\n        }, React.createElement(\"span\", {\n          className: \"event event-sat-box\"\n        }, simulatedSat.length, \" \", React.createElement(\"span\", {\n          className: \"event-text\"\n        }, \"Simulated SAT\"))) : null) : null), React.createElement(\"div\", {\n          className: \"collapsible-body\",\n          style: {\n            opacity: inActiveColumn && isActiveDate ? '1' : '0',\n            visibility: inActiveColumn ? 'visible' : 'hidden'\n          }\n        }, hasEvents ? React.createElement(\"ul\", {\n          className: \"events-list\"\n        }, mapDateSessions(shouldMapSessions, sessions), mapDateLessons(shouldMapLessons, lessons), mapDateWorksheets(shouldMapWorksheets, worksheets), mapTestSections(shouldMapTestSections, testSections), mapSimulatedSats(shouldMapSimulatedSats, simulatedSat)) : null, React.createElement(\"div\", {\n          className: \"day-footer\"\n        }, React.createElement(\"ul\", {\n          className: \"links-list\"\n        }, React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#\",\n          \"data-target\": \"dropdown_day_240119_add\",\n          onClick: onToggleAddDropdown,\n          className: \"link-add dropdown-trigger waves-effect waves-teal\"\n        }, \"Add\"), React.createElement(\"ul\", {\n          id: \"dropdown_day_240119_add\",\n          className: \"dropdown-content\",\n          style: {\n            display: addDropdownOpen ? 'block' : 'none',\n            opacity: addDropdownOpen ? '100' : '0'\n          }\n        }, React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#\",\n          onClick: function onClick(event) {\n            return toggleAssignSessionModal(event, date);\n          },\n          className: \"modal-trigger\"\n        }, \"Session\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#\",\n          onClick: function onClick(event) {\n            return toggleAssignLessonsModal(event, date);\n          },\n          className: \"modal-trigger\"\n        }, \"Lesson\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#\",\n          onClick: function onClick(event) {\n            return toggleAssignWorksheetsModal(event, date);\n          },\n          className: \"modal-trigger\"\n        }, \"Worksheet\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#\",\n          onClick: function onClick(event) {\n            return toggleAssignTestSectionModal(event, date);\n          },\n          className: \"modal-trigger\"\n        }, \"Test Section\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#\",\n          onClick: function onClick(event) {\n            return toggleAssignSimulatedSatModal(event, date);\n          },\n          className: \"modal-trigger\"\n        }, \"Simulated SAT\")))), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#\",\n          \"data-target\": \"dropdown_day_240119_delete\",\n          onClick: onToggleDeleteDropdown,\n          className: \"link-delete dropdown-trigger waves-effect waves-teal\"\n        }, \"Delete\"), React.createElement(\"ul\", {\n          id: \"dropdown_day_240119_delete\",\n          className: \"dropdown-content\",\n          style: {\n            display: deleteDropdownOpen ? 'block' : 'none',\n            opacity: deleteDropdownOpen ? '100' : '0'\n          }\n        }, React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#modal_edit_delete_section\",\n          className: \"modal-trigger\"\n        }, \"Session\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#modal_edit_delete_lesson\",\n          className: \"modal-trigger\"\n        }, \"Lesson\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#modal_edit_delete_worksheet\",\n          className: \"modal-trigger\"\n        }, \"Worksheet\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#modal_edit_delete_test_section\",\n          className: \"modal-trigger\"\n        }, \"Test Section\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#!\",\n          className: \"disabled\"\n        }, \"Simulated SAT\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#!\",\n          className: \"disabled\"\n        }, \"Target Test\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n          href: \"#!\"\n        }, \"All\")))))))))), provided.placeholder);\n      })));\n    }\n  }]);\n\n  return CalendarDate;\n}(React.Component);\n\n;\nexport default CalendarDate;","map":null,"metadata":{},"sourceType":"module"}