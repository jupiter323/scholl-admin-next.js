{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nconst API_URL = process.env.API_URL;\nimport { getToken } from '../../../utils/AuthService';\nexport const _checkStatus = response => {\n  // raises an error in case response status is not a success\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n};\nexport const oAuthTokenApi = data => fetch(`${API_URL}/api/login`, {\n  method: 'POST',\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: _JSON$stringify(data)\n}).then(response => response.json()).then(data => data).catch(err => err);\nexport const fetchCurrentUserApi = () => fetch(`${API_URL}/api/users`, {\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${getToken()}`\n  }\n}).then(res => res.json()).then(({\n  data\n}) => data).catch(err => err);\nexport const LogoutApi = () => fetch(`${API_URL}/api/logout`, {\n  method: 'POST',\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${getToken()}`\n  }\n}).then(_checkStatus).then(response => response.json()).then(data => data).catch(err => err);\nexport default [oAuthTokenApi, fetchCurrentUserApi, LogoutApi];","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/User/index/api.js"],"names":["API_URL","process","env","getToken","_checkStatus","response","status","error","Error","statusText","oAuthTokenApi","data","fetch","method","headers","Accept","body","then","json","catch","err","fetchCurrentUserApi","Authorization","res","LogoutApi"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYF,OAA5B;AACA,SAASG,QAAT,QAAyB,4BAAzB;AAEA,OAAO,MAAMC,YAAY,GAAIC,QAAD,IAAc;AACxC;AACA,MAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACnD,WAAOD,QAAP;AACD;;AACD,QAAME,KAAK,GAAG,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAd;AACAF,EAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,QAAME,KAAN;AACD,CARM;AAUP,OAAO,MAAMG,aAAa,GAAIC,IAAD,IAC3BC,KAAK,CAAE,GAAEZ,OAAQ,YAAZ,EAAyB;AAC5Ba,EAAAA,MAAM,EAAE,MADoB;AAE5BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE,kBADD;AAEP,oBAAgB;AAFT,GAFmB;AAM5BC,EAAAA,IAAI,EAAE,gBAAeL,IAAf;AANsB,CAAzB,CAAL,CAQGM,IARH,CAQQZ,QAAQ,IAAIA,QAAQ,CAACa,IAAT,EARpB,EASGD,IATH,CASQN,IAAI,IAAIA,IAThB,EAUGQ,KAVH,CAUSC,GAAG,IAAIA,GAVhB,CADK;AAaP,OAAO,MAAMC,mBAAmB,GAAG,MACjCT,KAAK,CAAE,GAAEZ,OAAQ,YAAZ,EAAyB;AAC5Bc,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE,kBADD;AAEP,oBAAgB,kBAFT;AAGPO,IAAAA,aAAa,EAAG,UAASnB,QAAQ,EAAG;AAH7B;AADmB,CAAzB,CAAL,CAOGc,IAPH,CAOQM,GAAG,IAAIA,GAAG,CAACL,IAAJ,EAPf,EAQGD,IARH,CAQQ,CAAC;AAAEN,EAAAA;AAAF,CAAD,KAAcA,IARtB,EASGQ,KATH,CASSC,GAAG,IAAIA,GAThB,CADK;AAWP,OAAO,MAAMI,SAAS,GAAG,MACvBZ,KAAK,CAAE,GAAEZ,OAAQ,aAAZ,EAA0B;AAC7Ba,EAAAA,MAAM,EAAE,MADqB;AAE7BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE,kBADD;AAEP,oBAAgB,kBAFT;AAGPO,IAAAA,aAAa,EAAG,UAASnB,QAAQ,EAAG;AAH7B;AAFoB,CAA1B,CAAL,CAQGc,IARH,CAQQb,YARR,EASGa,IATH,CASQZ,QAAQ,IAAIA,QAAQ,CAACa,IAAT,EATpB,EAUGD,IAVH,CAUQN,IAAI,IAAIA,IAVhB,EAWGQ,KAXH,CAWSC,GAAG,IAAIA,GAXhB,CADK;AAaP,eAAe,CACbV,aADa,EAEbW,mBAFa,EAGbG,SAHa,CAAf","sourcesContent":["const API_URL = process.env.API_URL;\nimport { getToken } from '../../../utils/AuthService';\n\nexport const _checkStatus = (response) => {\n  // raises an error in case response status is not a success\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n};\n\nexport const oAuthTokenApi = (data) =>\n  fetch(`${API_URL}/api/login`, {\n    method: 'POST',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  })\n    .then(response => response.json())\n    .then(data => data)\n    .catch(err => err);\n\nexport const fetchCurrentUserApi = () =>\n  fetch(`${API_URL}/api/users`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .then(({ data }) => data)\n    .catch(err => err);\nexport const LogoutApi = () =>\n  fetch(`${API_URL}/api/logout`, {\n    method: 'POST',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(_checkStatus)\n    .then(response => response.json())\n    .then(data => data)\n    .catch(err => err);\nexport default [\n  oAuthTokenApi,\n  fetchCurrentUserApi,\n  LogoutApi,\n];\n"]},"metadata":{},"sourceType":"module"}