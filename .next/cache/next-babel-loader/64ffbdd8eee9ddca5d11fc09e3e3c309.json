{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport locationOptions from '../../../../utils/locationOptions';\nimport sortOptions from '../../../../utils/sortOptions';\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleFilterChange\", (event, name) => {\n      const {\n        onSetFilteredLocationState,\n        onUnsetFilteredLocationState,\n        onSetSort\n      } = this.props;\n      const value = event.target ? event.target.value : event;\n      const updatedState = update(this.state, {\n        $merge: {\n          [name]: value\n        }\n      });\n      this.setState(updatedState);\n\n      if (name === 'location') {\n        if (event === '') {\n          return onUnsetFilteredLocationState();\n        }\n\n        return onSetFilteredLocationState(event);\n      } else if (name === 'sort') {\n        return onSetSort(event);\n      }\n    });\n\n    _defineProperty(this, \"submitNameFilter\", () => {\n      const {\n        onSetFilteredState,\n        onUnsetFilteredState\n      } = this.props;\n      const {\n        name\n      } = this.state;\n\n      if (name === '') {\n        onUnsetFilteredState();\n      }\n\n      const transformedName = name.replace(/\\s/g, \"\").toLowerCase();\n      onSetFilteredState(transformedName);\n    });\n\n    this.state = {\n      name: '',\n      location: {},\n      sort: {}\n    };\n  } // This function does two things - first, it changes the filter state regardless of the field it's coming from\n  // If either location or sort filters are changed, we dispatch the appropriate action in ListPage to ensure the rendered instructors are filtered/sorted appropriately\n  // eslint-disable-next-line consistent-return\n\n\n  render() {\n    // eslint-disable-next-line no-unused-vars\n    const {\n      name,\n      location,\n      sort\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"filter-inputs-holder\"\n    }, React.createElement(\"div\", {\n      className: \"row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col s12 m4 l3\"\n    }, React.createElement(\"div\", {\n      className: \"search-field input-field\"\n    }, React.createElement(\"input\", {\n      type: \"search\",\n      id: \"name_search\",\n      className: \"input-control validate\",\n      name: \"name\",\n      value: name,\n      onChange: event => this.handleFilterChange(event, 'name')\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"search-button\",\n      onClick: this.submitNameFilter\n    }, React.createElement(\"i\", {\n      className: \"icon-search\"\n    })), React.createElement(\"label\", {\n      className: name.length ? 'label active' : 'label',\n      htmlFor: \"name_search\"\n    }, \"Search\"))), React.createElement(\"div\", {\n      className: \"col s12 m4 l3\"\n    }, React.createElement(\"div\", {\n      className: \"input-field\"\n    }, React.createElement(Dropdown, {\n      value: getValueFromState(location, locationOptions),\n      onChange: event => this.handleFilterChange(event, 'location'),\n      options: locationOptions,\n      label: \"Location\",\n      stateKey: \"location\",\n      dropdownKey: \"location\"\n    }))), React.createElement(\"div\", {\n      className: \"col s12 m4 l3\"\n    }, React.createElement(\"div\", {\n      className: \"input-field\"\n    }, React.createElement(Dropdown, {\n      value: getValueFromState(sort, sortOptions),\n      onChange: event => this.handleFilterChange(event, 'sort'),\n      options: sortOptions,\n      label: \"Sort\",\n      stateKey: \"sort\",\n      dropdownKey: \"sort\"\n    })))));\n  }\n\n}\n\nFilterSection.propTypes = {\n  onSetSort: PropTypes.func.isRequired,\n  onSetFilteredState: PropTypes.func.isRequired,\n  onUnsetFilteredState: PropTypes.func.isRequired,\n  onSetFilteredLocationState: PropTypes.func.isRequired,\n  onUnsetFilteredLocationState: PropTypes.func.isRequired\n};\nexport default FilterSection;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Instructor/ListPage/components/FilterSection/index.js"],"names":["React","PropTypes","update","Dropdown","getValueFromState","locationOptions","sortOptions","FilterSection","Component","constructor","props","event","name","onSetFilteredLocationState","onUnsetFilteredLocationState","onSetSort","value","target","updatedState","state","$merge","setState","onSetFilteredState","onUnsetFilteredState","transformedName","replace","toLowerCase","location","sort","render","handleFilterChange","submitNameFilter","length","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\n\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport locationOptions from '../../../../utils/locationOptions';\nimport sortOptions from '../../../../utils/sortOptions';\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      location: {},\n      sort: {},\n    };\n  }\n\n  // This function does two things - first, it changes the filter state regardless of the field it's coming from\n  // If either location or sort filters are changed, we dispatch the appropriate action in ListPage to ensure the rendered instructors are filtered/sorted appropriately\n  // eslint-disable-next-line consistent-return\n  handleFilterChange = (event, name) => {\n    const { onSetFilteredLocationState, onUnsetFilteredLocationState, onSetSort } = this.props;\n    const value = event.target ? event.target.value : event;\n    const updatedState = update(this.state, {\n      $merge: { [name]: value },\n    });\n    this.setState(updatedState);\n    if (name === 'location') {\n      if (event === '') {\n        return onUnsetFilteredLocationState();\n      }\n      return onSetFilteredLocationState(event);\n    } else if (name === 'sort') {\n      return onSetSort(event);\n    }\n  }\n\n  // Strips the entered name of any spaces and capitalizing and fires off the ListPage event that filters the instructors\n  submitNameFilter = () => {\n    const { onSetFilteredState, onUnsetFilteredState } = this.props;\n    const { name } = this.state;\n    if (name === '') {\n      onUnsetFilteredState();\n    }\n    const transformedName = name.replace(/\\s/g, \"\").toLowerCase();\n    onSetFilteredState(transformedName);\n  }\n\n  render() {\n    // eslint-disable-next-line no-unused-vars\n    const { name, location, sort } = this.state;\n    return (\n      <div className=\"filter-inputs-holder\">\n        <div className=\"row mb-0\">\n          <div className=\"col s12 m4 l3\">\n            <div className=\"search-field input-field\">\n              <input\n                type=\"search\"\n                id=\"name_search\"\n                className=\"input-control validate\"\n                name=\"name\"\n                value={name}\n                onChange={(event) => this.handleFilterChange(event, 'name')}\n              />\n              <button\n                type=\"submit\"\n                className=\"search-button\"\n                onClick={this.submitNameFilter}\n              >\n                <i className=\"icon-search\"></i>\n              </button>\n              <label className={name.length ? 'label active' : 'label'} htmlFor=\"name_search\">Search</label>\n            </div>\n          </div>\n          <div className=\"col s12 m4 l3\">\n            <div className=\"input-field\">\n              <Dropdown\n                value={getValueFromState(location, locationOptions)}\n                onChange={(event) => this.handleFilterChange(event, 'location')}\n                options={locationOptions}\n                label=\"Location\"\n                stateKey=\"location\"\n                dropdownKey=\"location\"\n              />\n            </div>\n          </div>\n          <div className=\"col s12 m4 l3\">\n            <div className=\"input-field\">\n              <Dropdown\n                value={getValueFromState(sort, sortOptions)}\n                onChange={(event) => this.handleFilterChange(event, 'sort')}\n                options={sortOptions}\n                label=\"Sort\"\n                stateKey=\"sort\"\n                dropdownKey=\"sort\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nFilterSection.propTypes = {\n  onSetSort: PropTypes.func.isRequired,\n  onSetFilteredState: PropTypes.func.isRequired,\n  onUnsetFilteredState: PropTypes.func.isRequired,\n  onSetFilteredLocationState: PropTypes.func.isRequired,\n  onUnsetFilteredLocationState: PropTypes.func.isRequired,\n};\n\nexport default FilterSection;\n"]},"metadata":{},"sourceType":"module"}