{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport StudentCard from '../components/Student/components/StudentCard';\nimport FilterSection from '../components/Student/ListPage/Components/FilterSection';\nimport StudentModal from '../components/Student/components/StudentModal';\nimport IndividualStudentPage from '../components/Student/IndividualStudentPage';\nimport LocationModal from '../components/Location/components/LocationModal';\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onOpenStudentModal\", () => this.setState({\n      studentModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseStudentModal\", () => this.setState({\n      studentModalOpen: false\n    }));\n\n    _defineProperty(this, \"onOpenLocationModal\", () => this.setState({\n      locationModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseLocationModal\", () => this.setState({\n      locationModalOpen: false\n    }));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      filterName: ''\n    }));\n\n    _defineProperty(this, \"onSetFilteredLocationState\", location => this.setState({\n      location\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredLocationState\", () => this.setState({\n      location: ''\n    }));\n\n    _defineProperty(this, \"onSaveNewStudent\", () => {\n      // eslint-disable-next-line no-console\n      console.warn('do something with the new student info');\n      this.onCloseStudentModal();\n    });\n\n    _defineProperty(this, \"onDeleteNewStudent\", () => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: '',\n            lastName: '',\n            gender: ''\n          },\n          contactInformation: {\n            phone: '',\n            addressLine1: '',\n            addressLine2: '',\n            city: '',\n            state: '',\n            zipCode: ''\n          },\n          emailAddress: {\n            email: ''\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n    });\n\n    _defineProperty(this, \"onRemoveLocation\", index => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const {\n        location: {\n          locations\n        }\n      } = this.state.newStudent;\n      const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n      const newStudent = update(previousStudentState, {\n        location: {\n          $set: {\n            locations: newLocationsArray\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n    });\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        students,\n        filterName\n      } = this.state;\n      return students.reduce((finalArr, currentStudent) => {\n        const {\n          lastName,\n          firstName\n        } = currentStudent;\n        const studentString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n\n        if (studentString.indexOf(filterName) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n          finalArr.push(currentStudent);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onHandleStudentCard\", index => {\n      const {\n        students\n      } = this.state;\n      this.setState({\n        selectedStudent: students[index]\n      });\n    });\n\n    _defineProperty(this, \"onRedirectToStudentPage\", event => {\n      event.preventDefault();\n      this.setState({\n        selectedStudent: null\n      });\n    });\n\n    _defineProperty(this, \"onDeleteStudent\", index => {\n      const {\n        students\n      } = this.state;\n      const newStudentArray = this.arrayItemRemover(students, students[index]);\n      this.setState({\n        students: newStudentArray\n      });\n    });\n\n    _defineProperty(this, \"onCloneStudent\", index => {\n      const {\n        students\n      } = this.state;\n      this.setState(prevState => {\n        prevState.students.push(students[index]);\n        return {\n          students: prevState.students\n        };\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", (event, name, section) => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const value = event.target ? event.target.value : event;\n      const updatedStudent = update(previousStudentState, {\n        [section]: {\n          $merge: {\n            [name]: value\n          }\n        }\n      });\n      this.setState({\n        newStudent: updatedStudent\n      });\n    });\n\n    _defineProperty(this, \"arrayItemRemover\", (array, value) => array.filter(student => student !== value));\n\n    this.state = {\n      selectedStudent: null,\n      students: sampleStudentList,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      sort: \"\",\n      filterName: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      studentModalOpen,\n      students,\n      selectedStudent\n    } = this.state;\n    return React.createElement(\"main\", {\n      id: \"main\",\n      role: \"main\"\n    }, React.createElement(\"div\", {\n      className: \"main-holder grey lighten-5\"\n    }, !selectedStudent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"title-row card-panel\"\n    }, React.createElement(\"div\", {\n      className: \"mobile-header\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, React.createElement(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), React.createElement(\"h2\", {\n      className: \"h1 white-text\"\n    }, React.createElement(\"span\", {\n      className: \"heading-holder\"\n    }, React.createElement(\"i\", {\n      className: \"icon-student\"\n    }), React.createElement(\"span\", {\n      className: \"heading-block\"\n    }, \"Students\")))), React.createElement(FilterSection, {\n      onSetSort: this.onSetSort,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredLocationState: this.onSetFilteredLocationState,\n      onUnsetFilteredLocationState: this.onUnsetFilteredLocationState,\n      handleFilterClick: this.handleFilterClick,\n      onFilterByName: this.onFilterByName\n    }), React.createElement(\"div\", {\n      className: \"content-section\"\n    }, React.createElement(\"div\", {\n      className: \"row d-flex-content\"\n    }, students.map((student, index) => React.createElement(StudentCard, {\n      student: student,\n      index: index,\n      id: student.id,\n      key: student.id,\n      onHandleStudentCard: () => this.onHandleStudentCard(index),\n      onDeleteStudent: () => this.onDeleteStudent(index),\n      onCloneStudent: () => this.onCloneStudent(index, student.id)\n    })))), React.createElement(\"a\", {\n      href: \"#\",\n      className: \"waves-effect waves-teal btn add-btn modal-trigger\",\n      onClick: this.onOpenStudentModal\n    }, React.createElement(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"New Student\"), React.createElement(StudentModal, {\n      open: studentModalOpen,\n      onClose: this.onCloseStudentModal,\n      handleChange: this.handleChange,\n      state: this.state.newStudent,\n      onSave: this.onSaveNewStudent,\n      onOpenLocationModal: this.onOpenLocationModal,\n      onRemoveLocation: this.onRemoveLocation,\n      onDeleteNewStudent: this.onDeleteNewStudent\n    }), React.createElement(LocationModal, {\n      open: this.state.locationModalOpen,\n      onClose: this.onCloseLocationModal,\n      handleLocationsChange: selectedLocations => this.handleChange(selectedLocations, 'locations', 'location')\n    })), selectedStudent && React.createElement(IndividualStudentPage, {\n      student: selectedStudent,\n      onRedirectToStudentPage: this.onRedirectToStudentPage\n    })));\n  }\n\n}\n\nexport default Students;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/pages/students.js"],"names":["React","Component","update","StudentCard","FilterSection","StudentModal","IndividualStudentPage","LocationModal","Students","constructor","props","setState","studentModalOpen","locationModalOpen","sort","filterName","location","console","warn","onCloseStudentModal","newStudent","previousStudentState","state","$set","active","studentInformation","firstName","lastName","gender","contactInformation","phone","addressLine1","addressLine2","city","zipCode","emailAddress","email","locations","index","newLocationsArray","arrayItemRemover","students","reduce","finalArr","currentStudent","studentString","toLowerCase","indexOf","push","selectedStudent","event","preventDefault","newStudentArray","prevState","name","section","value","target","updatedStudent","$merge","array","filter","student","sampleStudentList","render","onSetSort","onSetFilteredState","onUnsetFilteredState","onSetFilteredLocationState","onUnsetFilteredLocationState","handleFilterClick","onFilterByName","map","id","onHandleStudentCard","onDeleteStudent","onCloneStudent","onOpenStudentModal","handleChange","onSaveNewStudent","onOpenLocationModal","onRemoveLocation","onDeleteNewStudent","onCloseLocationModal","selectedLocations","onRedirectToStudentPage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport StudentCard from '../components/Student/components/StudentCard';\nimport FilterSection from '../components/Student/ListPage/Components/FilterSection';\nimport StudentModal from '../components/Student/components/StudentModal';\nimport IndividualStudentPage from '../components/Student/IndividualStudentPage';\nimport LocationModal from '../components/Location/components/LocationModal';\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedStudent: null,\n      students: sampleStudentList,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      sort: \"\",\n      filterName: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n     },\n    }\n  }\n  onOpenStudentModal = () => this.setState({ studentModalOpen: true });\n  onCloseStudentModal = () => this.setState({ studentModalOpen: false });\n  onOpenLocationModal = () => this.setState({locationModalOpen: true});\n  onCloseLocationModal = () => this.setState({locationModalOpen: false});\n\n\n  onSetSort = (sort) => this.setState({ sort });\n  onSetFilteredState = (filterName) => this.setState({ filterName });\n  onUnsetFilteredState = () => this.setState({ filterName: '' });\n\n  onSetFilteredLocationState = (location) => this.setState({ location });\n  onUnsetFilteredLocationState = () => this.setState({ location: '' });\n\n // TODO add a toas or some notification that a student has been saved\n  onSaveNewStudent = () => {\n    // eslint-disable-next-line no-console\n    console.warn('do something with the new student info');\n    this.onCloseStudentModal();\n  };\n\n  onDeleteNewStudent = () => {\n    const {newStudent: previousStudentState} = this.state;\n    const newStudent = update(previousStudentState, {\n      $set:\n       { active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n    }}\n    );\n    this.setState({newStudent})\n  };\n\n  onRemoveLocation = (index) => {\n    const {newStudent: previousStudentState} = this.state;\n    const {location: { locations } } = this.state.newStudent;\n    const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n    const newStudent = update(previousStudentState, {\n      location: { $set: {locations: newLocationsArray}},\n    });\n    this.setState({newStudent})\n  };\n\n  onFilterByName = () => {\n    const { students, filterName } = this.state;\n    return students.reduce((finalArr, currentStudent) => {\n      const { lastName, firstName } = currentStudent;\n      const studentString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n      if (studentString.indexOf(filterName) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n        finalArr.push(currentStudent);\n      }\n      return finalArr;\n    }, []);\n  };\n\n  onHandleStudentCard = (index) => {\n    const { students } = this.state;\n    this.setState({ selectedStudent: students[index] });\n  };\n\n  onRedirectToStudentPage = (event) => {\n    event.preventDefault();\n    this.setState({selectedStudent: null})\n  };\n\n  onDeleteStudent = (index) => {\n    const { students } = this.state;\n    const newStudentArray = this.arrayItemRemover(students, students[index]);\n    this.setState({students: newStudentArray})\n  };\n\n  onCloneStudent = (index) => {\n    const { students } = this.state;\n    this.setState(prevState => {\n      prevState.students.push(students[index]);\n      return { students: prevState.students}\n    })\n  };\n\n  handleChange = (event, name, section) => {\n    const { newStudent: previousStudentState } = this.state;\n    const value = event.target ? event.target.value : event;\n    const updatedStudent = update(previousStudentState, {\n      [section]: { $merge: { [name]: value }},\n    });\n    this.setState({newStudent: updatedStudent})\n};\n\n  arrayItemRemover = (array, value) => array.filter((student) => student !== value);\n\n  render() {\n    const { studentModalOpen, students, selectedStudent } = this.state;\n    return (\n      <main id=\"main\" role=\"main\">\n        <div className=\"main-holder grey lighten-5\">\n          {!selectedStudent && (\n            <React.Fragment>\n              <div className=\"title-row card-panel\">\n                <div className=\"mobile-header\">\n                  <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n                </div>\n                <h2 className=\"h1 white-text\">\n                  <span className=\"heading-holder\">\n                    <i className=\"icon-student\"/>\n                    <span className=\"heading-block\">Students</span>\n                  </span>\n                </h2>\n              </div>\n              <FilterSection\n                onSetSort={this.onSetSort}\n                onSetFilteredState={this.onSetFilteredState}\n                onUnsetFilteredState={this.onUnsetFilteredState}\n                onSetFilteredLocationState={this.onSetFilteredLocationState}\n                onUnsetFilteredLocationState={this.onUnsetFilteredLocationState}\n                handleFilterClick={this.handleFilterClick}\n                onFilterByName={this.onFilterByName} />\n              <div className=\"content-section\">\n                <div className=\"row d-flex-content\">\n                  {students.map((student, index) => (\n                    <StudentCard\n                    student={student}\n                    index={index}\n                    id={student.id}\n                    key={student.id}\n                    onHandleStudentCard={() => this.onHandleStudentCard(index)}\n                    onDeleteStudent={() => this.onDeleteStudent(index)}\n                    onCloneStudent={() => this.onCloneStudent(index, student.id)}\n                    />\n                  ))}\n                </div>\n              </div>\n              <a href=\"#\" className=\"waves-effect waves-teal btn add-btn modal-trigger\" onClick={this.onOpenStudentModal}><i className=\"material-icons\">add</i>New Student</a>\n              <StudentModal\n                open={studentModalOpen}\n                onClose={this.onCloseStudentModal}\n                handleChange={this.handleChange}\n                state={this.state.newStudent}\n                onSave={this.onSaveNewStudent}\n                onOpenLocationModal={this.onOpenLocationModal}\n                onRemoveLocation={this.onRemoveLocation}\n                onDeleteNewStudent={this.onDeleteNewStudent}\n                />\n                <LocationModal\n                open={this.state.locationModalOpen}\n                onClose={this.onCloseLocationModal}\n                handleLocationsChange={(selectedLocations) => this.handleChange(selectedLocations, 'locations', 'location')}\n                />\n                </React.Fragment>\n          )}\n          {selectedStudent && (\n            <IndividualStudentPage student={selectedStudent} onRedirectToStudentPage={this.onRedirectToStudentPage} />\n          )}\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Students;\n"]},"metadata":{},"sourceType":"module"}