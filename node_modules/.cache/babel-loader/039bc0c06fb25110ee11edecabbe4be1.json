{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\nimport BubbleGroup from '../Bubble';\n\nvar AnswerRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnswerRow, _React$Component);\n\n  function AnswerRow(props) {\n    var _this;\n\n    _classCallCheck(this, AnswerRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnswerRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenQuestionModal\", function () {\n      return _this.setState({\n        open: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseQuestionModal\", function () {\n      return _this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapNumberBubbles\", function (_ref) {\n      var index = _ref.index;\n      var sampleAnswers = _this.props.sampleAnswers;\n      var _sampleAnswers$index = sampleAnswers[index],\n          answer = _sampleAnswers$index.answer,\n          studentChoice = _sampleAnswers$index.studentChoice;\n\n      if (answer === studentChoice) {\n        return React.createElement(\"li\", {\n          key: answer\n        }, React.createElement(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: {\n            color: '#fff',\n            borderColor: '#32955c',\n            backgroundColor: '#3eb777'\n          }\n        }, answer));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", {\n        key: studentChoice\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#fff',\n          borderColor: '#ad1e3e',\n          backgroundColor: '#db1d41'\n        }\n      }, studentChoice)), React.createElement(\"li\", {\n        key: answer\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#32955c',\n          borderColor: '#32955c',\n          backgroundColor: '#fff'\n        }\n      }, answer)));\n    });\n\n    _this.state = {\n      open: false\n    };\n    return _this;\n  }\n\n  _createClass(AnswerRow, [{\n    key: \"render\",\n    value: function render() {\n      var question = this.props.question;\n      var open = this.state.open;\n      return React.createElement(React.Fragment, null, React.createElement(QuestionModal, {\n        open: open,\n        onOpenQuestionModal: this.onOpenQuestionModal,\n        onCloseQuestionModal: this.onCloseQuestionModal,\n        question: question\n      }), React.createElement(\"li\", {\n        className: \"answers-list-holder\",\n        key: question.problem\n      }, React.createElement(\"div\", {\n        className: \"answer-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col col-120\"\n      }, React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, React.createElement(BubbleGroup, {\n        id: question.id,\n        question: question\n      }))), React.createElement(\"div\", {\n        className: \"col col-30\"\n      }, React.createElement(\"span\", {\n        className: \"status-info\"\n      }, question.status)), React.createElement(\"div\", {\n        className: \"col col-43\"\n      }, React.createElement(\"span\", {\n        className: \"play-progress\",\n        \"data-video-id\": \"video001\"\n      }, React.createElement(\"span\", {\n        className: \"play\"\n      }), React.createElement(\"svg\", {\n        viewBox: \"0 0 50 50\",\n        width: \"50\",\n        height: \"50\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, React.createElement(\"circle\", {\n        className: \"circle-static\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      }), React.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      })))), React.createElement(\"div\", {\n        className: \"col col-auto\"\n      }, question.flagged ? React.createElement(\"span\", {\n        className: \"status-answer\",\n        style: {\n          color: '#c0272d'\n        }\n      }, React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }), React.createElement(\"b\", {\n        className: \"status-text\"\n      }, \"Review\")) : null), React.createElement(\"div\", {\n        className: \"dropdown-block col col-35\"\n      }, React.createElement(\"a\", {\n        className: \"modal-trigger\",\n        href: \"#\",\n        onClick: this.onOpenQuestionModal\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")))), question.studentNotes ? React.createElement(\"div\", {\n        className: \"comment-block\"\n      }, React.createElement(\"p\", null, question.studentNotes)) : null));\n    }\n  }]);\n\n  return AnswerRow;\n}(React.Component);\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  sampleAnswers: PropTypes.array.isRequired\n};\nexport default AnswerRow;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailTestAnswerSheetComplete\\components\\WritingPage\\components\\AnswerRow\\index.js"],"names":["React","PropTypes","QuestionModal","BubbleGroup","AnswerRow","props","setState","open","index","sampleAnswers","answer","studentChoice","color","borderColor","backgroundColor","state","question","onOpenQuestionModal","onCloseQuestionModal","problem","id","status","flagged","studentNotes","Component","propTypes","object","isRequired","number","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\nimport BubbleGroup from '../Bubble';\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    }\n  };\n\n  onOpenQuestionModal = () => this.setState({ open: true })\n  onCloseQuestionModal = () => this.setState({ open: false });\n\n  mapNumberBubbles = ({ index }) => {\n    const { sampleAnswers } = this.props;\n    const { answer, studentChoice } = sampleAnswers[index];\n    if (answer === studentChoice) {\n      return (\n        <li key={answer}>\n          <span className=\"badge badge-rounded badge-rounded-bordered\" style={{ color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777' }}>{answer}</span>\n        </li>\n      )\n    }\n    return (\n      <React.Fragment>\n        <li key={studentChoice}>\n          <span className=\"badge badge-rounded badge-rounded-bordered\" style={{ color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41' }}>{studentChoice}</span>\n        </li>\n        <li key={answer} >\n          <span className=\"badge badge-rounded badge-rounded-bordered\" style={{ color: '#32955c', borderColor: '#32955c', backgroundColor: '#fff' }}>{answer}</span>\n        </li>\n      </React.Fragment>\n    )\n  };\n\n render() {\n    const { question } = this.props;\n    const { open } = this.state;\n    return (\n      <React.Fragment>\n        <QuestionModal open={open} onOpenQuestionModal={this.onOpenQuestionModal} onCloseQuestionModal={this.onCloseQuestionModal} question={question} />\n        <li className=\"answers-list-holder\" key={question.problem}>\n          <div className=\"answer-row row mb-0\" >\n            <div className=\"col col-120\">\n              <ul className=\"answer-list\">\n                    <BubbleGroup\n                      id={question.id}\n                      question={question}\n                    />\n              </ul>\n            </div>\n            <div className=\"col col-30\">\n              <span className=\"status-info\">{question.status}</span>\n            </div>\n            <div className=\"col col-43\">\n              <span className=\"play-progress\" data-video-id=\"video001\">\n                <span className=\"play\"></span>\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle className=\"circle-static\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3} />\n                  <circle className=\"circle-progress\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3} />\n                </svg>\n              </span>\n            </div>\n            <div className=\"col col-auto\">\n              <If condition={question.flagged}>\n                <span className=\"status-answer\" style={{ color: '#c0272d' }}>\n                  <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n                </span>\n              </If>\n            </div>\n            <div className=\"dropdown-block col col-35\">\n\n              <a className='modal-trigger' href=\"#\" onClick={this.onOpenQuestionModal}><i className=\"material-icons dots-icon\">more_vert</i></a>\n            </div>\n          </div>\n          <If condition={question.studentNotes}>\n            <div className=\"comment-block\">\n              <p>{question.studentNotes}</p>\n            </div>\n          </If>\n        </li>\n      </React.Fragment>\n\n    )\n  }\n}\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  sampleAnswers: PropTypes.array.isRequired,\n}\n\nexport default AnswerRow;\n\n\n"]},"metadata":{},"sourceType":"module"}