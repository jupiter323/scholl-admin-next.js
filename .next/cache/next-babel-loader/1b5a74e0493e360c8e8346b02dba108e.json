{"ast":null,"code":"import _objectSpread2 from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createStructuredSelector } from 'reselect';\nimport { deleteStudent } from '../components/Student/index/actions';\nimport { fetchStudents, addNewStudent } from '../components/Student/index/actions';\nimport { makeSelectStudents } from '../components/Student/index/selectors';\nimport StudentCard from '../components/Student/components/StudentCard';\nimport sampleStudentList from '../components/Student/utils/sampleStudentList';\nimport FilterSection from '../components/Student/ListPage/Components/FilterSection';\nimport StudentModal from '../components/Student/components/StudentModal';\nimport IndividualStudentPage from '../components/Student/IndividualStudentPage';\nimport LocationModal from '../components/Location/components/LocationModal';\nimport { fetchStudentsApi, deleteStudentApi } from '../components/Student/index/api';\n\nconst idGenerator = () => {\n  return subIdGenerator() + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + subIdGenerator() + subIdGenerator();\n};\n\nconst subIdGenerator = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const {\n        onFetchStudents\n      } = this.props;\n      onFetchStudents();\n    });\n\n    _defineProperty(this, \"onOpenStudentModal\", () => this.setState({\n      studentModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseStudentModal\", () => this.setState({\n      studentModalOpen: false\n    }));\n\n    _defineProperty(this, \"onOpenLocationModal\", () => this.setState({\n      locationModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseLocationModal\", () => this.setState({\n      locationModalOpen: false\n    }));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      filterName: ''\n    }));\n\n    _defineProperty(this, \"onSetFilteredLocationState\", location => this.setState({\n      location\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredLocationState\", () => this.setState({\n      location: ''\n    }));\n\n    _defineProperty(this, \"onSaveNewStudent\", async () => {\n      const {\n        newStudent: previousStudentState\n      } = this.state; // dispatch add student action\n\n      const {\n        onAddNewStudent\n      } = this.props;\n      onAddNewStudent(previousStudentState);\n      const newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: '',\n            lastName: '',\n            gender: ''\n          },\n          contactInformation: {\n            phone: '',\n            addressLine1: '',\n            addressLine2: '',\n            city: '',\n            state: '',\n            zipCode: ''\n          },\n          emailAddress: {\n            email: ''\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      }); // eslint-disable-next-line no-console\n\n      console.warn('do something with the new student info');\n      this.onCloseStudentModal();\n    });\n\n    _defineProperty(this, \"onDeleteNewStudent\", () => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: '',\n            lastName: '',\n            gender: ''\n          },\n          contactInformation: {\n            phone: '',\n            addressLine1: '',\n            addressLine2: '',\n            city: '',\n            state: '',\n            zipCode: ''\n          },\n          emailAddress: {\n            email: ''\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n    });\n\n    _defineProperty(this, \"onRemoveLocation\", index => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const {\n        location: {\n          locations\n        }\n      } = this.state.newStudent;\n      const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n      const newStudent = update(previousStudentState, {\n        location: {\n          $set: {\n            locations: newLocationsArray\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n    });\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        students,\n        filterName\n      } = this.state;\n      return students.reduce((finalArr, currentStudent) => {\n        const {\n          lastName,\n          firstName\n        } = currentStudent;\n        const studentString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n\n        if (studentString.indexOf(filterName) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n          finalArr.push(currentStudent);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onHandleStudentCard\", index => {\n      const {\n        students\n      } = this.state;\n      this.setState({\n        selectedStudent: students[index]\n      });\n    });\n\n    _defineProperty(this, \"onRedirectToStudentPage\", event => {\n      event.preventDefault();\n      this.setState({\n        selectedStudent: null\n      });\n    });\n\n    _defineProperty(this, \"onDeleteStudent\", index => {\n      const {\n        onDeleteStudent\n      } = this.props;\n      const {\n        students\n      } = this.state; // Dispatch deleteStudent\n\n      onDeleteStudent(students[index].id);\n      const newStudentArray = this.arrayItemRemover(students, students[index]);\n      this.setState({\n        students: newStudentArray\n      });\n      const student_id = students[index].id;\n      deleteStudentApi({\n        student_id\n      });\n      this.onCloseDropdown();\n    });\n\n    _defineProperty(this, \"onCloneStudent\", index => {\n      const {\n        students\n      } = this.state;\n      const newStudent = update(students[index], {\n        id: {\n          $set: idGenerator()\n        }\n      });\n      this.setState(prevState => {\n        prevState.students.push(newStudent);\n        return {\n          students: prevState.students\n        };\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", (event, name, section) => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const value = event.target ? event.target.value : event;\n      const updatedStudent = update(previousStudentState, {\n        [section]: {\n          $merge: {\n            [name]: value\n          }\n        }\n      });\n      this.setState({\n        newStudent: updatedStudent\n      });\n    });\n\n    _defineProperty(this, \"onSaveStudentChanges\", updatedStudent => {\n      const {\n        students: originalStudents\n      } = this.state;\n      const {\n        active,\n        studentInformation,\n        contactInformation,\n        emailAddress,\n        location\n      } = updatedStudent;\n      const studentToUpdate = originalStudents.filter(student => student.id === updatedStudent.id)[0];\n      const updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n      const students = update(originalStudents, {\n        [updatedStudentIndex]: {\n          $merge: {\n            active: active,\n            studentInformation: studentInformation,\n            contactInformation: contactInformation,\n            emailAddress: emailAddress,\n            location: location\n          }\n        }\n      });\n      this.setState({\n        students\n      });\n    });\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIsOpen: true,\n      dropdownIndex\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"arrayItemRemover\", (array, value) => array.filter(student => student !== value));\n\n    this.state = {\n      selectedStudent: null,\n      students: sampleStudentList,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      studentModalOpen,\n      students,\n      selectedStudent\n    } = this.state;\n    return __jsx(\"main\", {\n      id: \"main\",\n      role: \"main\"\n    }, __jsx(\"div\", {\n      className: \"main-holder grey lighten-5\"\n    }, __jsx(StickyContainer, null, !selectedStudent && __jsx(React.Fragment, null, __jsx(Sticky, null, ({\n      style\n    }) => __jsx(\"div\", {\n      className: \"title-row card-panel\",\n      style: _objectSpread2({}, style, {\n        zIndex: 1999\n      })\n    }, __jsx(\"div\", {\n      className: \"mobile-header\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), __jsx(\"h2\", {\n      className: \"h1 white-text\"\n    }, __jsx(\"span\", {\n      className: \"heading-holder\"\n    }, __jsx(\"i\", {\n      className: \"icon-student\"\n    }), __jsx(\"span\", {\n      className: \"heading-block\"\n    }, \"Students\"))))), __jsx(FilterSection, {\n      onSetSort: this.onSetSort,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredLocationState: this.onSetFilteredLocationState,\n      onUnsetFilteredLocationState: this.onUnsetFilteredLocationState,\n      handleFilterClick: this.handleFilterClick,\n      onFilterByName: this.onFilterByName\n    }), __jsx(\"div\", {\n      className: \"content-section\"\n    }, __jsx(\"div\", {\n      className: \"row d-flex-content\"\n    }, students.map((student, index) => __jsx(StudentCard, {\n      student: student,\n      index: index,\n      id: student.id,\n      key: student.id,\n      dropdownIsOpen: this.state.dropdownIsOpen,\n      dropdownIndex: this.state.dropdownIndex,\n      onSetDropdown: this.onSetDropdown,\n      onCloseDropdown: this.onCloseDropdown,\n      onHandleStudentCard: () => this.onHandleStudentCard(index),\n      onDeleteStudent: () => this.onDeleteStudent(index),\n      onCloneStudent: () => this.onCloneStudent(index, student.id),\n      onSaveStudentChanges: this.onSaveStudentChanges\n    })))), __jsx(\"a\", {\n      href: \"#\",\n      className: \"waves-effect waves-teal btn add-btn modal-trigger\",\n      onClick: this.onOpenStudentModal\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"New Student\"), __jsx(StudentModal, {\n      open: studentModalOpen,\n      onClose: this.onCloseStudentModal,\n      handleChange: this.handleChange,\n      state: this.state.newStudent,\n      onSave: this.onSaveNewStudent,\n      onOpenLocationModal: this.onOpenLocationModal,\n      onRemoveLocation: this.onRemoveLocation,\n      onDeleteNewStudent: this.onDeleteNewStudent\n    }), __jsx(LocationModal, {\n      open: this.state.locationModalOpen,\n      onClose: this.onCloseLocationModal,\n      handleLocationsChange: selectedLocations => this.handleChange(selectedLocations, 'locations', 'location')\n    })), selectedStudent && __jsx(IndividualStudentPage, {\n      student: selectedStudent,\n      onRedirectToStudentPage: this.onRedirectToStudentPage\n    }))));\n  }\n\n}\n\nStudents.propTypes = {\n  students: PropTypes.array.isRequired,\n  onFetchStudents: PropTypes.func.isRequired,\n  onAddNewStudent: PropTypes.func.isRequired,\n  onDeleteStudent: PropTypes.func.isRequired\n};\nconst mapStateToProps = createStructuredSelector({\n  students: makeSelectStudents()\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteStudent: id => dispatch(deleteStudent(id)),\n  onFetchStudents: () => dispatch(fetchStudents()),\n  onAddNewStudent: student => dispatch(addNewStudent(student))\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(Students);","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/pages/students.js"],"names":["React","Component","update","StickyContainer","Sticky","compose","connect","PropTypes","createStructuredSelector","deleteStudent","fetchStudents","addNewStudent","makeSelectStudents","StudentCard","sampleStudentList","FilterSection","StudentModal","IndividualStudentPage","LocationModal","fetchStudentsApi","deleteStudentApi","idGenerator","subIdGenerator","Math","floor","random","toString","substring","Students","constructor","props","onFetchStudents","setState","studentModalOpen","locationModalOpen","sort","filterName","location","newStudent","previousStudentState","state","onAddNewStudent","$set","active","studentInformation","firstName","lastName","gender","contactInformation","phone","addressLine1","addressLine2","city","zipCode","emailAddress","email","locations","console","warn","onCloseStudentModal","index","newLocationsArray","arrayItemRemover","students","reduce","finalArr","currentStudent","studentString","toLowerCase","indexOf","push","selectedStudent","event","preventDefault","onDeleteStudent","id","newStudentArray","student_id","onCloseDropdown","prevState","name","section","value","target","updatedStudent","$merge","originalStudents","studentToUpdate","filter","student","updatedStudentIndex","dropdownIndex","dropdownIsOpen","array","render","style","zIndex","onSetSort","onSetFilteredState","onUnsetFilteredState","onSetFilteredLocationState","onUnsetFilteredLocationState","handleFilterClick","onFilterByName","map","onSetDropdown","onHandleStudentCard","onCloneStudent","onSaveStudentChanges","onOpenStudentModal","handleChange","onSaveNewStudent","onOpenLocationModal","onRemoveLocation","onDeleteNewStudent","onCloseLocationModal","selectedLocations","onRedirectToStudentPage","propTypes","isRequired","func","mapStateToProps","mapDispatchToProps","dispatch","withConnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,eAAT,EAA0BC,MAA1B,QAAwC,cAAxC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAAQC,aAAR,QAA4B,qCAA5B;AACA,SAAQC,aAAR,EAAuBC,aAAvB,QAA2C,qCAA3C;AACA,SAAQC,kBAAR,QAAiC,uCAAjC;AACA,OAAOC,WAAP,MAAwB,8CAAxB;AACE,OAAOC,iBAAP,MAA8B,+CAA9B;AACF,OAAOC,aAAP,MAA0B,yDAA1B;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,OAAOC,qBAAP,MAAkC,6CAAlC;AACA,OAAOC,aAAP,MAA0B,iDAA1B;AAEA,SACEC,gBADF,EAEEC,gBAFF,QAGO,iCAHP;;AAMA,MAAMC,WAAW,GAAG,MAAM;AACxB,SAAOC,cAAc,KAAKA,cAAc,EAAjC,GAAsC,GAAtC,GAA4CA,cAAc,EAA1D,GAA+D,GAA/D,GAAqEA,cAAc,EAAnF,GAAwF,GAAxF,GACPA,cAAc,EADP,GACY,GADZ,GACkBA,cAAc,EADhC,GACqCA,cAAc,EADnD,GACwDA,cAAc,EAD7E;AAED,CAHD;;AAIA,MAAMA,cAAc,GAAG,MAAK;AAC1B,SAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAID,IAAI,CAACE,MAAL,EAAL,IAAsB,OAAjC,EAA0CC,QAA1C,CAAmD,EAAnD,EAAuDC,SAAvD,CAAiE,CAAjE,CAAP;AACD,CAFD;;AAIA,MAAMC,QAAN,SAAuB3B,SAAvB,CAAiC;AAC/B4B,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,+CAmCC,MAAM;AACxB,YAAM;AAACC,QAAAA;AAAD,UAAoB,KAAKD,KAA/B;AACAC,MAAAA,eAAe;AAChB,KAtCkB;;AAAA,gDAwCE,MAAM,KAAKC,QAAL,CAAc;AAAEC,MAAAA,gBAAgB,EAAE;AAApB,KAAd,CAxCR;;AAAA,iDAyCG,MAAM,KAAKD,QAAL,CAAc;AAAEC,MAAAA,gBAAgB,EAAE;AAApB,KAAd,CAzCT;;AAAA,iDA0CG,MAAM,KAAKD,QAAL,CAAc;AAACE,MAAAA,iBAAiB,EAAE;AAApB,KAAd,CA1CT;;AAAA,kDA2CI,MAAM,KAAKF,QAAL,CAAc;AAACE,MAAAA,iBAAiB,EAAE;AAApB,KAAd,CA3CV;;AAAA,uCA8CNC,IAAD,IAAU,KAAKH,QAAL,CAAc;AAAEG,MAAAA;AAAF,KAAd,CA9CH;;AAAA,gDA+CGC,UAAD,IAAgB,KAAKJ,QAAL,CAAc;AAAEI,MAAAA;AAAF,KAAd,CA/ClB;;AAAA,kDAgDI,MAAM,KAAKJ,QAAL,CAAc;AAAEI,MAAAA,UAAU,EAAE;AAAd,KAAd,CAhDV;;AAAA,wDAkDWC,QAAD,IAAc,KAAKL,QAAL,CAAc;AAAEK,MAAAA;AAAF,KAAd,CAlDxB;;AAAA,0DAmDY,MAAM,KAAKL,QAAL,CAAc;AAAEK,MAAAA,QAAQ,EAAE;AAAZ,KAAd,CAnDlB;;AAAA,8CAsDA,YAAY;AAC7B,YAAM;AAACC,QAAAA,UAAU,EAAEC;AAAb,UAAqC,KAAKC,KAAhD,CAD6B,CAG7B;;AACA,YAAM;AAACC,QAAAA;AAAD,UAAoB,KAAKX,KAA/B;AACAW,MAAAA,eAAe,CAACF,oBAAD,CAAf;AAEA,YAAMD,UAAU,GAAGpC,MAAM,CAACqC,oBAAD,EAAuB;AAC9CG,QAAAA,IAAI,EACH;AAAEC,UAAAA,MAAM,EAAE,KAAV;AACCC,UAAAA,kBAAkB,EAAE;AAClBC,YAAAA,SAAS,EAAE,EADO;AAElBC,YAAAA,QAAQ,EAAE,EAFQ;AAGlBC,YAAAA,MAAM,EAAE;AAHU,WADrB;AAMCC,UAAAA,kBAAkB,EAAE;AAClBC,YAAAA,KAAK,EAAE,EADW;AAElBC,YAAAA,YAAY,EAAE,EAFI;AAGlBC,YAAAA,YAAY,EAAE,EAHI;AAIlBC,YAAAA,IAAI,EAAE,EAJY;AAKlBZ,YAAAA,KAAK,EAAE,EALW;AAMlBa,YAAAA,OAAO,EAAE;AANS,WANrB;AAcCC,UAAAA,YAAY,EAAE;AACZC,YAAAA,KAAK,EAAE;AADK,WAdf;AAiBClB,UAAAA,QAAQ,EAAE;AACRmB,YAAAA,SAAS,EAAE;AADH;AAjBX;AAF6C,OAAvB,CAAzB;AAwBA,WAAKxB,QAAL,CAAc;AAACM,QAAAA;AAAD,OAAd,EA/B6B,CAgC7B;;AACAmB,MAAAA,OAAO,CAACC,IAAR,CAAa,wCAAb;AACA,WAAKC,mBAAL;AACD,KAzFkB;;AAAA,gDA2FE,MAAM;AACzB,YAAM;AAACrB,QAAAA,UAAU,EAAEC;AAAb,UAAqC,KAAKC,KAAhD;AACA,YAAMF,UAAU,GAAGpC,MAAM,CAACqC,oBAAD,EAAuB;AAC9CG,QAAAA,IAAI,EACH;AAAEC,UAAAA,MAAM,EAAE,KAAV;AACCC,UAAAA,kBAAkB,EAAE;AAClBC,YAAAA,SAAS,EAAE,EADO;AAElBC,YAAAA,QAAQ,EAAE,EAFQ;AAGlBC,YAAAA,MAAM,EAAE;AAHU,WADrB;AAMCC,UAAAA,kBAAkB,EAAE;AAClBC,YAAAA,KAAK,EAAE,EADW;AAElBC,YAAAA,YAAY,EAAE,EAFI;AAGlBC,YAAAA,YAAY,EAAE,EAHI;AAIlBC,YAAAA,IAAI,EAAE,EAJY;AAKlBZ,YAAAA,KAAK,EAAE,EALW;AAMlBa,YAAAA,OAAO,EAAE;AANS,WANrB;AAcCC,UAAAA,YAAY,EAAE;AACZC,YAAAA,KAAK,EAAE;AADK,WAdf;AAiBClB,UAAAA,QAAQ,EAAE;AACRmB,YAAAA,SAAS,EAAE;AADH;AAjBX;AAF6C,OAAvB,CAAzB;AAwBA,WAAKxB,QAAL,CAAc;AAACM,QAAAA;AAAD,OAAd;AACD,KAtHkB;;AAAA,8CAwHCsB,KAAD,IAAW;AAC5B,YAAM;AAACtB,QAAAA,UAAU,EAAEC;AAAb,UAAqC,KAAKC,KAAhD;AACA,YAAM;AAACH,QAAAA,QAAQ,EAAE;AAAEmB,UAAAA;AAAF;AAAX,UAA6B,KAAKhB,KAAL,CAAWF,UAA9C;AACA,YAAMuB,iBAAiB,GAAG,KAAKC,gBAAL,CAAsBN,SAAtB,EAAiCA,SAAS,CAACI,KAAD,CAA1C,CAA1B;AACA,YAAMtB,UAAU,GAAGpC,MAAM,CAACqC,oBAAD,EAAuB;AAC9CF,QAAAA,QAAQ,EAAE;AAAEK,UAAAA,IAAI,EAAE;AAACc,YAAAA,SAAS,EAAEK;AAAZ;AAAR;AADoC,OAAvB,CAAzB;AAGA,WAAK7B,QAAL,CAAc;AAACM,QAAAA;AAAD,OAAd;AACD,KAhIkB;;AAAA,4CAkIF,MAAM;AACrB,YAAM;AAAEyB,QAAAA,QAAF;AAAY3B,QAAAA;AAAZ,UAA2B,KAAKI,KAAtC;AACA,aAAOuB,QAAQ,CAACC,MAAT,CAAgB,CAACC,QAAD,EAAWC,cAAX,KAA8B;AACnD,cAAM;AAAEpB,UAAAA,QAAF;AAAYD,UAAAA;AAAZ,YAA0BqB,cAAhC;AACA,cAAMC,aAAa,GAAI,GAAEtB,SAAS,CAACuB,WAAV,EAAwB,GAAEtB,QAAQ,CAACsB,WAAT,EAAuB,EAA1E;;AACA,YAAID,aAAa,CAACE,OAAd,CAAsBjC,UAAtB,MAAsC,CAAC,CAAvC,IAA4C6B,QAAQ,CAACI,OAAT,CAAiBH,cAAjB,MAAqC,CAAC,CAAtF,EAAyF;AACvFD,UAAAA,QAAQ,CAACK,IAAT,CAAcJ,cAAd;AACD;;AACD,eAAOD,QAAP;AACD,OAPM,EAOJ,EAPI,CAAP;AAQD,KA5IkB;;AAAA,iDA8IIL,KAAD,IAAW;AAC/B,YAAM;AAAEG,QAAAA;AAAF,UAAe,KAAKvB,KAA1B;AACA,WAAKR,QAAL,CAAc;AAAEuC,QAAAA,eAAe,EAAER,QAAQ,CAACH,KAAD;AAA3B,OAAd;AACD,KAjJkB;;AAAA,qDAmJQY,KAAD,IAAW;AACnCA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKzC,QAAL,CAAc;AAACuC,QAAAA,eAAe,EAAE;AAAlB,OAAd;AACD,KAtJkB;;AAAA,6CAwJAX,KAAD,IAAW;AAC3B,YAAM;AAACc,QAAAA;AAAD,UAAoB,KAAK5C,KAA/B;AACA,YAAM;AAAEiC,QAAAA;AAAF,UAAe,KAAKvB,KAA1B,CAF2B,CAG3B;;AACAkC,MAAAA,eAAe,CAACX,QAAQ,CAACH,KAAD,CAAR,CAAgBe,EAAjB,CAAf;AACA,YAAMC,eAAe,GAAG,KAAKd,gBAAL,CAAsBC,QAAtB,EAAgCA,QAAQ,CAACH,KAAD,CAAxC,CAAxB;AACA,WAAK5B,QAAL,CAAc;AAAC+B,QAAAA,QAAQ,EAAEa;AAAX,OAAd;AACA,YAAMC,UAAU,GAAGd,QAAQ,CAACH,KAAD,CAAR,CAAgBe,EAAnC;AACAvD,MAAAA,gBAAgB,CAAC;AAACyD,QAAAA;AAAD,OAAD,CAAhB;AACA,WAAKC,eAAL;AACD,KAlKkB;;AAAA,4CAoKDlB,KAAD,IAAW;AAC1B,YAAM;AAAEG,QAAAA;AAAF,UAAe,KAAKvB,KAA1B;AACA,YAAMF,UAAU,GAAGpC,MAAM,CAAC6D,QAAQ,CAACH,KAAD,CAAT,EAAiB;AACxCe,QAAAA,EAAE,EAAC;AAACjC,UAAAA,IAAI,EAACrB,WAAW;AAAjB;AADqC,OAAjB,CAAzB;AAGA,WAAKW,QAAL,CAAc+C,SAAS,IAAI;AACzBA,QAAAA,SAAS,CAAChB,QAAV,CAAmBO,IAAnB,CAAwBhC,UAAxB;AACA,eAAO;AAAEyB,UAAAA,QAAQ,EAAEgB,SAAS,CAAChB;AAAtB,SAAP;AACD,OAHD;AAID,KA7KkB;;AAAA,0CA+KJ,CAACS,KAAD,EAAQQ,IAAR,EAAcC,OAAd,KAA0B;AACvC,YAAM;AAAE3C,QAAAA,UAAU,EAAEC;AAAd,UAAuC,KAAKC,KAAlD;AACA,YAAM0C,KAAK,GAAGV,KAAK,CAACW,MAAN,GAAeX,KAAK,CAACW,MAAN,CAAaD,KAA5B,GAAoCV,KAAlD;AACA,YAAMY,cAAc,GAAGlF,MAAM,CAACqC,oBAAD,EAAuB;AAClD,SAAC0C,OAAD,GAAW;AAAEI,UAAAA,MAAM,EAAE;AAAE,aAACL,IAAD,GAAQE;AAAV;AAAV;AADuC,OAAvB,CAA7B;AAGA,WAAKlD,QAAL,CAAc;AAACM,QAAAA,UAAU,EAAE8C;AAAb,OAAd;AACH,KAtLoB;;AAAA,kDAwLKA,cAAD,IAAoB;AACzC,YAAM;AAAErB,QAAAA,QAAQ,EAAEuB;AAAZ,UAAiC,KAAK9C,KAA5C;AACA,YAAM;AAACG,QAAAA,MAAD;AAAQC,QAAAA,kBAAR;AAA4BI,QAAAA,kBAA5B;AAAgDM,QAAAA,YAAhD;AAA8DjB,QAAAA;AAA9D,UAA2E+C,cAAjF;AACA,YAAMG,eAAe,GAAGD,gBAAgB,CAACE,MAAjB,CAAwBC,OAAO,IAAIA,OAAO,CAACd,EAAR,KAAeS,cAAc,CAACT,EAAjE,EAAqE,CAArE,CAAxB;AACA,YAAMe,mBAAmB,GAAGJ,gBAAgB,CAACjB,OAAjB,CAAyBkB,eAAzB,CAA5B;AACA,YAAMxB,QAAQ,GAAG7D,MAAM,CAACoF,gBAAD,EAAmB;AACxC,SAACI,mBAAD,GAAsB;AAACL,UAAAA,MAAM,EAAC;AAAC1C,YAAAA,MAAM,EAACA,MAAR;AAAeC,YAAAA,kBAAkB,EAACA,kBAAlC;AAAqDI,YAAAA,kBAAkB,EAACA,kBAAxE;AAA2FM,YAAAA,YAAY,EAACA,YAAxG;AAAqHjB,YAAAA,QAAQ,EAACA;AAA9H;AAAR;AADkB,OAAnB,CAAvB;AAGA,WAAKL,QAAL,CAAc;AAAE+B,QAAAA;AAAF,OAAd;AACD,KAjMkB;;AAAA,2CAmMF4B,aAAD,IAAmB,KAAK3D,QAAL,CAAc;AAAE4D,MAAAA,cAAc,EAAE,IAAlB;AAAwBD,MAAAA;AAAxB,KAAd,CAnMhB;;AAAA,6CAoMD,MAAM,KAAK3D,QAAL,CAAc;AAAE4D,MAAAA,cAAc,EAAE,KAAlB;AAAyBD,MAAAA,aAAa,EAAE;AAAxC,KAAd,CApML;;AAAA,8CAsMA,CAACE,KAAD,EAAQX,KAAR,KAAkBW,KAAK,CAACL,MAAN,CAAcC,OAAD,IAAaA,OAAO,KAAKP,KAAtC,CAtMlB;;AAEjB,SAAK1C,KAAL,GAAa;AACX+B,MAAAA,eAAe,EAAE,IADN;AAEXR,MAAAA,QAAQ,EAAEjD,iBAFC;AAGXmB,MAAAA,gBAAgB,EAAE,KAHP;AAIXC,MAAAA,iBAAiB,EAAE,KAJR;AAKX0D,MAAAA,cAAc,EAAE,KALL;AAMXD,MAAAA,aAAa,EAAE,IANJ;AAOXxD,MAAAA,IAAI,EAAE,EAPK;AAQXC,MAAAA,UAAU,EAAE,EARD;AASXE,MAAAA,UAAU,EAAE;AACVK,QAAAA,MAAM,EAAE,KADE;AAEVC,QAAAA,kBAAkB,EAAE;AAClBC,UAAAA,SAAS,EAAE,EADO;AAElBC,UAAAA,QAAQ,EAAE;AAFQ,SAFV;AAMVE,QAAAA,kBAAkB,EAAE;AAClBC,UAAAA,KAAK,EAAE,EADW;AAElBC,UAAAA,YAAY,EAAE,EAFI;AAGlBC,UAAAA,YAAY,EAAE,EAHI;AAIlBC,UAAAA,IAAI,EAAE,EAJY;AAKlBZ,UAAAA,KAAK,EAAE,EALW;AAMlBa,UAAAA,OAAO,EAAE;AANS,SANV;AAcVC,QAAAA,YAAY,EAAE;AACZC,UAAAA,KAAK,EAAE;AADK,SAdJ;AAiBVlB,QAAAA,QAAQ,EAAE;AACRmB,UAAAA,SAAS,EAAE;AADH;AAjBA;AATD,KAAb;AA+BD;;AAuKDsC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE7D,MAAAA,gBAAF;AAAoB8B,MAAAA,QAApB;AAA8BQ,MAAAA;AAA9B,QAAkD,KAAK/B,KAA7D;AACA,WACE;AAAM,MAAA,EAAE,EAAC,MAAT;AAAgB,MAAA,IAAI,EAAC;AAArB,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACA,MAAC,eAAD,QACG,CAAC+B,eAAD,IACC,MAAC,KAAD,CAAO,QAAP,QACE,MAAC,MAAD,QACG,CAAC;AAACwB,MAAAA;AAAD,KAAD,KAEC;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAsC,MAAA,KAAK,qBAAMA,KAAN;AAAaC,QAAAA,MAAM,EAAE;AAArB;AAA3C,OACF;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAG,MAAA,IAAI,EAAC,GAAR;AAAY,qBAAY,WAAxB;AAAoC,MAAA,SAAS,EAAC;AAA9C,OAAgE;AAAG,MAAA,SAAS,EAAC;AAAb,cAAhE,CADF,CADE,EAIF;AAAI,MAAA,SAAS,EAAC;AAAd,OACE;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE;AAAG,MAAA,SAAS,EAAC;AAAb,MADF,EAEE;AAAM,MAAA,SAAS,EAAC;AAAhB,kBAFF,CADF,CAJE,CAHJ,CADF,EAiBE,MAAC,aAAD;AACE,MAAA,SAAS,EAAE,KAAKC,SADlB;AAEE,MAAA,kBAAkB,EAAE,KAAKC,kBAF3B;AAGE,MAAA,oBAAoB,EAAE,KAAKC,oBAH7B;AAIE,MAAA,0BAA0B,EAAE,KAAKC,0BAJnC;AAKE,MAAA,4BAA4B,EAAE,KAAKC,4BALrC;AAME,MAAA,iBAAiB,EAAE,KAAKC,iBAN1B;AAOE,MAAA,cAAc,EAAE,KAAKC;AAPvB,MAjBF,EAyBE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACGxC,QAAQ,CAACyC,GAAT,CAAa,CAACf,OAAD,EAAU7B,KAAV,KACZ,MAAC,WAAD;AACA,MAAA,OAAO,EAAE6B,OADT;AAEA,MAAA,KAAK,EAAE7B,KAFP;AAGA,MAAA,EAAE,EAAE6B,OAAO,CAACd,EAHZ;AAIA,MAAA,GAAG,EAAEc,OAAO,CAACd,EAJb;AAKA,MAAA,cAAc,EAAE,KAAKnC,KAAL,CAAWoD,cAL3B;AAMA,MAAA,aAAa,EAAE,KAAKpD,KAAL,CAAWmD,aAN1B;AAOA,MAAA,aAAa,EAAE,KAAKc,aAPpB;AAQA,MAAA,eAAe,EAAE,KAAK3B,eARtB;AASA,MAAA,mBAAmB,EAAE,MAAM,KAAK4B,mBAAL,CAAyB9C,KAAzB,CAT3B;AAUA,MAAA,eAAe,EAAE,MAAM,KAAKc,eAAL,CAAqBd,KAArB,CAVvB;AAWA,MAAA,cAAc,EAAE,MAAM,KAAK+C,cAAL,CAAoB/C,KAApB,EAA2B6B,OAAO,CAACd,EAAnC,CAXtB;AAYA,MAAA,oBAAoB,EAAI,KAAKiC;AAZ7B,MADD,CADH,CADF,CAzBF,EA6CE;AAAG,MAAA,IAAI,EAAC,GAAR;AAAY,MAAA,SAAS,EAAC,mDAAtB;AAA0E,MAAA,OAAO,EAAE,KAAKC;AAAxF,OAA4G;AAAG,MAAA,SAAS,EAAC;AAAb,aAA5G,gBA7CF,EA8CE,MAAC,YAAD;AACE,MAAA,IAAI,EAAE5E,gBADR;AAEE,MAAA,OAAO,EAAE,KAAK0B,mBAFhB;AAGE,MAAA,YAAY,EAAE,KAAKmD,YAHrB;AAIE,MAAA,KAAK,EAAE,KAAKtE,KAAL,CAAWF,UAJpB;AAKE,MAAA,MAAM,EAAE,KAAKyE,gBALf;AAME,MAAA,mBAAmB,EAAE,KAAKC,mBAN5B;AAOE,MAAA,gBAAgB,EAAE,KAAKC,gBAPzB;AAQE,MAAA,kBAAkB,EAAE,KAAKC;AAR3B,MA9CF,EAwDI,MAAC,aAAD;AACA,MAAA,IAAI,EAAE,KAAK1E,KAAL,CAAWN,iBADjB;AAEA,MAAA,OAAO,EAAE,KAAKiF,oBAFd;AAGA,MAAA,qBAAqB,EAAGC,iBAAD,IAAuB,KAAKN,YAAL,CAAkBM,iBAAlB,EAAqC,WAArC,EAAkD,UAAlD;AAH9C,MAxDJ,CAFJ,EAiEG7C,eAAe,IACd,MAAC,qBAAD;AAAuB,MAAA,OAAO,EAAEA,eAAhC;AAAiD,MAAA,uBAAuB,EAAE,KAAK8C;AAA/E,MAlEJ,CADA,CADF,CADF;AA2ED;;AAtR8B;;AAyRjCzF,QAAQ,CAAC0F,SAAT,GAAqB;AACnBvD,EAAAA,QAAQ,EAAExD,SAAS,CAACsF,KAAV,CAAgB0B,UADP;AAEnBxF,EAAAA,eAAe,EAAExB,SAAS,CAACiH,IAAV,CAAeD,UAFb;AAGnB9E,EAAAA,eAAe,EAAElC,SAAS,CAACiH,IAAV,CAAeD,UAHb;AAInB7C,EAAAA,eAAe,EAAEnE,SAAS,CAACiH,IAAV,CAAeD;AAJb,CAArB;AAOA,MAAME,eAAe,GAAGjH,wBAAwB,CAAC;AAC7CuD,EAAAA,QAAQ,EAAEnD,kBAAkB;AADiB,CAAD,CAAhD;;AAIA,MAAM8G,kBAAkB,GAAIC,QAAD,KAAe;AACxCjD,EAAAA,eAAe,EAAGC,EAAD,IAAQgD,QAAQ,CAAClH,aAAa,CAACkE,EAAD,CAAd,CADO;AAExC5C,EAAAA,eAAe,EAAE,MAAM4F,QAAQ,CAACjH,aAAa,EAAd,CAFS;AAGxC+B,EAAAA,eAAe,EAAGgD,OAAD,IAAakC,QAAQ,CAAChH,aAAa,CAAC8E,OAAD,CAAd;AAHE,CAAf,CAA3B;;AAMA,MAAMmC,WAAW,GAAGtH,OAAO,CAACmH,eAAD,EAAkBC,kBAAlB,CAA3B;AAEA,eAAerH,OAAO,CAACuH,WAAD,CAAP,CAAqBhG,QAArB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createStructuredSelector } from 'reselect';\nimport {deleteStudent} from '../components/Student/index/actions';\nimport {fetchStudents, addNewStudent} from '../components/Student/index/actions';\nimport {makeSelectStudents} from '../components/Student/index/selectors';\nimport StudentCard from '../components/Student/components/StudentCard';\n  import sampleStudentList from '../components/Student/utils/sampleStudentList';\nimport FilterSection from '../components/Student/ListPage/Components/FilterSection';\nimport StudentModal from '../components/Student/components/StudentModal';\nimport IndividualStudentPage from '../components/Student/IndividualStudentPage';\nimport LocationModal from '../components/Location/components/LocationModal';\n\nimport {\n  fetchStudentsApi,\n  deleteStudentApi,\n} from '../components/Student/index/api';\n\n\nconst idGenerator = () => {\n  return subIdGenerator() + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + '-' +\n  subIdGenerator() + '-' + subIdGenerator() + subIdGenerator() + subIdGenerator();\n}\nconst subIdGenerator = () =>{\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedStudent: null,\n      students: sampleStudentList,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n     },\n    }\n  }\n\n  componentDidMount = () => {\n    const {onFetchStudents} = this.props;\n    onFetchStudents();\n  }\n\n  onOpenStudentModal = () => this.setState({ studentModalOpen: true });\n  onCloseStudentModal = () => this.setState({ studentModalOpen: false });\n  onOpenLocationModal = () => this.setState({locationModalOpen: true});\n  onCloseLocationModal = () => this.setState({locationModalOpen: false});\n\n\n  onSetSort = (sort) => this.setState({ sort });\n  onSetFilteredState = (filterName) => this.setState({ filterName });\n  onUnsetFilteredState = () => this.setState({ filterName: '' });\n\n  onSetFilteredLocationState = (location) => this.setState({ location });\n  onUnsetFilteredLocationState = () => this.setState({ location: '' });\n\n // TODO add a toas or some notification that a student has been saved\n  onSaveNewStudent = async () => {\n    const {newStudent: previousStudentState} = this.state;\n\n    // dispatch add student action\n    const {onAddNewStudent} = this.props;\n    onAddNewStudent(previousStudentState);\n\n    const newStudent = update(previousStudentState, {\n      $set:\n       { active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n    }}\n    );\n    this.setState({newStudent})\n    // eslint-disable-next-line no-console\n    console.warn('do something with the new student info');\n    this.onCloseStudentModal();\n  };\n\n  onDeleteNewStudent = () => {\n    const {newStudent: previousStudentState} = this.state;\n    const newStudent = update(previousStudentState, {\n      $set:\n       { active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n    }}\n    );\n    this.setState({newStudent})\n  };\n\n  onRemoveLocation = (index) => {\n    const {newStudent: previousStudentState} = this.state;\n    const {location: { locations } } = this.state.newStudent;\n    const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n    const newStudent = update(previousStudentState, {\n      location: { $set: {locations: newLocationsArray}},\n    });\n    this.setState({newStudent})\n  };\n\n  onFilterByName = () => {\n    const { students, filterName } = this.state;\n    return students.reduce((finalArr, currentStudent) => {\n      const { lastName, firstName } = currentStudent;\n      const studentString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n      if (studentString.indexOf(filterName) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n        finalArr.push(currentStudent);\n      }\n      return finalArr;\n    }, []);\n  };\n\n  onHandleStudentCard = (index) => {\n    const { students } = this.state;\n    this.setState({ selectedStudent: students[index] });\n  };\n\n  onRedirectToStudentPage = (event) => {\n    event.preventDefault();\n    this.setState({selectedStudent: null})\n  };\n\n  onDeleteStudent = (index) => {\n    const {onDeleteStudent} = this.props;\n    const { students } = this.state;\n    // Dispatch deleteStudent\n    onDeleteStudent(students[index].id);\n    const newStudentArray = this.arrayItemRemover(students, students[index])\n    this.setState({students: newStudentArray});\n    const student_id = students[index].id;\n    deleteStudentApi({student_id});\n    this.onCloseDropdown();\n  }\n\n  onCloneStudent = (index) => {\n    const { students } = this.state;\n    const newStudent = update(students[index],{\n      id:{$set:idGenerator()}\n    })\n    this.setState(prevState => {\n      prevState.students.push(newStudent);\n      return { students: prevState.students}\n    })\n  };\n\n  handleChange = (event, name, section) => {\n    const { newStudent: previousStudentState } = this.state;\n    const value = event.target ? event.target.value : event;\n    const updatedStudent = update(previousStudentState, {\n      [section]: { $merge: { [name]: value }},\n    });\n    this.setState({newStudent: updatedStudent})\n};\n\n  onSaveStudentChanges = (updatedStudent) => {\n    const { students: originalStudents } = this.state;\n    const {active,studentInformation, contactInformation, emailAddress, location } = updatedStudent;\n    const studentToUpdate = originalStudents.filter(student => student.id === updatedStudent.id)[0];\n    const updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n    const students = update(originalStudents, {\n      [updatedStudentIndex]:{$merge:{active:active,studentInformation:studentInformation,contactInformation:contactInformation,emailAddress:emailAddress,location:location}},\n    });\n    this.setState({ students });\n  }\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIsOpen: true, dropdownIndex });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  arrayItemRemover = (array, value) => array.filter((student) => student !== value)\n\n  render() {\n    const { studentModalOpen, students, selectedStudent } = this.state;\n    return (\n      <main id=\"main\" role=\"main\">\n        <div className=\"main-holder grey lighten-5\">\n        <StickyContainer>\n          {!selectedStudent && (\n            <React.Fragment>\n              <Sticky>\n                {({style}) => (\n\n                  <div className=\"title-row card-panel\" style={{...style, zIndex: 1999}}>\n                <div className=\"mobile-header\">\n                  <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n                </div>\n                <h2 className=\"h1 white-text\">\n                  <span className=\"heading-holder\">\n                    <i className=\"icon-student\"/>\n                    <span className=\"heading-block\">Students</span>\n                  </span>\n                </h2>\n              </div>\n               )}\n             </Sticky>\n              <FilterSection\n                onSetSort={this.onSetSort}\n                onSetFilteredState={this.onSetFilteredState}\n                onUnsetFilteredState={this.onUnsetFilteredState}\n                onSetFilteredLocationState={this.onSetFilteredLocationState}\n                onUnsetFilteredLocationState={this.onUnsetFilteredLocationState}\n                handleFilterClick={this.handleFilterClick}\n                onFilterByName={this.onFilterByName} />\n              <div className=\"content-section\">\n                <div className=\"row d-flex-content\">\n                  {students.map((student, index) => (\n                    <StudentCard\n                    student={student}\n                    index={index}\n                    id={student.id}\n                    key={student.id}\n                    dropdownIsOpen={this.state.dropdownIsOpen}\n                    dropdownIndex={this.state.dropdownIndex}\n                    onSetDropdown={this.onSetDropdown}\n                    onCloseDropdown={this.onCloseDropdown}\n                    onHandleStudentCard={() => this.onHandleStudentCard(index)}\n                    onDeleteStudent={() => this.onDeleteStudent(index)}\n                    onCloneStudent={() => this.onCloneStudent(index, student.id)}\n                    onSaveStudentChanges = {this.onSaveStudentChanges}\n                    />\n                  ))}\n                </div>\n              </div>\n              <a href=\"#\" className=\"waves-effect waves-teal btn add-btn modal-trigger\" onClick={this.onOpenStudentModal}><i className=\"material-icons\">add</i>New Student</a>\n              <StudentModal\n                open={studentModalOpen}\n                onClose={this.onCloseStudentModal}\n                handleChange={this.handleChange}\n                state={this.state.newStudent}\n                onSave={this.onSaveNewStudent}\n                onOpenLocationModal={this.onOpenLocationModal}\n                onRemoveLocation={this.onRemoveLocation}\n                onDeleteNewStudent={this.onDeleteNewStudent}\n                />\n                <LocationModal\n                open={this.state.locationModalOpen}\n                onClose={this.onCloseLocationModal}\n                handleLocationsChange={(selectedLocations) => this.handleChange(selectedLocations, 'locations', 'location')}\n                />\n                </React.Fragment>\n          )}\n          {selectedStudent && (\n            <IndividualStudentPage student={selectedStudent} onRedirectToStudentPage={this.onRedirectToStudentPage} />\n          )}\n          </StickyContainer>\n        </div>\n      </main>\n    );\n  }\n}\n\nStudents.propTypes = {\n  students: PropTypes.array.isRequired,\n  onFetchStudents: PropTypes.func.isRequired,\n  onAddNewStudent: PropTypes.func.isRequired,\n  onDeleteStudent: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n    students: makeSelectStudents(),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteStudent: (id) => dispatch(deleteStudent(id)),\n  onFetchStudents: () => dispatch(fetchStudents()),\n  onAddNewStudent: (student) => dispatch(addNewStudent(student)),\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(Students);\n"]},"metadata":{},"sourceType":"module"}