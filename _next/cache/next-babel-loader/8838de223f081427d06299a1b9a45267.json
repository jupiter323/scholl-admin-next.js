{"ast":null,"code":"var _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Dashboard/components/SessionList/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport DashboardCard from '../DashboardCard';\nimport sampleSessions from '../../utils/sampleUpComingSessions';\nimport * as moment from 'moment';\n\nclass SessionList extends Component {\n  render() {\n    return __jsx(\"div\", {\n      className: \"dashboard-card card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, sampleSessions.sessions.map((element, key) => {\n      return __jsx(\"div\", {\n        className: \"card-content\",\n        key: element.key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        className: \"dashboard-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, __jsx(\"time\", {\n        dateTime: \"2019-02-02\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, element.datetime), __jsx(\"span\", {\n        className: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, \" \", SessionList.getDateName(moment(element.datetime, 'M/D/YYYY')))), __jsx(\"div\", {\n        className: \"row d-flex-content card-width-366 mb-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, element.sessions.map(session => __jsx(DashboardCard, {\n        sessionStats: session.sessionStats,\n        testStats: session.testStats,\n        user: session.user,\n        key: session.uuid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }))));\n    }));\n  }\n\n  static getDateName(datetime) {\n    if (moment().isSame(moment(datetime, 'M/D/YYYY'), 'day')) {\n      return 'Today';\n    } else if (moment().add(1, 'days').isSame(moment(datetime, 'M/D/YYYY'), 'day')) {\n      return 'Tomorrow';\n    }\n\n    return 'Other';\n  }\n\n}\n\nexport default SessionList;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Dashboard/components/SessionList/index.js"],"names":["React","Component","DashboardCard","sampleSessions","moment","SessionList","render","sessions","map","element","key","datetime","getDateName","session","sessionStats","testStats","user","uuid","isSame","add"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAClCK,EAAAA,MAAM,GAAG;AACP,WAAQ;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACJH,cAAc,CAACI,QAAf,CAAwBC,GAAxB,CAA4B,CAACC,OAAD,EAAUC,GAAV,KAAkB;AAC9C,aACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,GAAG,EAAED,OAAO,CAACC,GAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,QAAQ,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BD,OAAO,CAACE,QAAtC,CADF,EAEE;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA2BN,WAAW,CAACO,WAAZ,CAAwBR,MAAM,CAACK,OAAO,CAACE,QAAT,EAAmB,UAAnB,CAA9B,CAA3B,CAFF,CADF,EAKE;AAAK,QAAA,SAAS,EAAC,wCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIF,OAAO,CAACF,QAAR,CAAiBC,GAAjB,CAAsBK,OAAD,IAAc,MAAC,aAAD;AAAe,QAAA,YAAY,EAAEA,OAAO,CAACC,YAArC;AAAmD,QAAA,SAAS,EAAED,OAAO,CAACE,SAAtE;AAAiF,QAAA,IAAI,EAAEF,OAAO,CAACG,IAA/F;AAAqG,QAAA,GAAG,EAAEH,OAAO,CAACI,IAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAnC,CADJ,CALF,CADF;AAWD,KAZC,CADI,CAAR;AAeD;;AAED,SAAOL,WAAP,CAAmBD,QAAnB,EAA6B;AAC3B,QAAIP,MAAM,GAAGc,MAAT,CAAgBd,MAAM,CAACO,QAAD,EAAW,UAAX,CAAtB,EAA8C,KAA9C,CAAJ,EAA0D;AACxD,aAAO,OAAP;AACD,KAFD,MAEO,IAAIP,MAAM,GAAGe,GAAT,CAAa,CAAb,EAAgB,MAAhB,EAAwBD,MAAxB,CAA+Bd,MAAM,CAACO,QAAD,EAAW,UAAX,CAArC,EAA6D,KAA7D,CAAJ,EAAyE;AAC9E,aAAO,UAAP;AACD;;AACD,WAAO,OAAP;AACD;;AA1BiC;;AA6BpC,eAAeN,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport DashboardCard from '../DashboardCard';\nimport sampleSessions from '../../utils/sampleUpComingSessions';\nimport * as moment from 'moment';\n\nclass SessionList extends Component {\n  render() {\n    return (<div className=\"dashboard-card card\">\n      { sampleSessions.sessions.map((element, key) => {\n        return (\n          <div className=\"card-content\" key={element.key}>\n            <h2 className=\"dashboard-title\">\n              <time dateTime=\"2019-02-02\">{ element.datetime }</time>\n              <span className=\"small\"> { SessionList.getDateName(moment(element.datetime, 'M/D/YYYY')) }</span>\n            </h2>\n            <div className=\"row d-flex-content card-width-366 mb-0\">\n              { element.sessions.map((session) => (<DashboardCard sessionStats={session.sessionStats} testStats={session.testStats} user={session.user} key={session.uuid} />)) }\n            </div>\n          </div>\n        );\n      })}\n    </div>);\n  }\n\n  static getDateName(datetime) {\n    if (moment().isSame(moment(datetime, 'M/D/YYYY'), 'day')) {\n      return 'Today';\n    } else if (moment().add(1, 'days').isSame(moment(datetime, 'M/D/YYYY'), 'day')) {\n      return 'Tomorrow';\n    }\n    return 'Other';\n  }\n}\n\nexport default SessionList;\n"]},"metadata":{},"sourceType":"module"}