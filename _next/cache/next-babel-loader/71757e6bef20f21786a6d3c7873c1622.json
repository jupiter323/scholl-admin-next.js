{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/Calendar/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport update from \"immutability-helper\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { StickyContainer } from \"react-sticky\";\nimport FilterSection from \"../../Dashboard/components/FilterSection\";\nimport CalendarHeader from \"../../Dashboard/components/CalendarHeader\";\nimport CalendarRow from \"../../Dashboard/components/CalendarRow\";\nimport AssignSessionModal from \"../../Dashboard/components/Modals/AssignSessionModal\";\nimport AssignTestSectionModal from \"../../Dashboard/components/Modals/AssignTestSectionModal\";\nimport AssignSimulatedSatModal from \"../../Dashboard/components/Modals/AssignSimulatedSATModal\";\nimport AssignTargetTestModal from \"../../Dashboard/components/Modals/AssignTargetTestModal\";\nimport AssignLessonModal from \"../../Dashboard/components/Modals/AssignLessonModal\";\nimport AssignWorksheetModal from '../../Dashboard/components/Modals/AssignWorksheetModal';\nimport { currentYear, getFirstDay, getDaysInActiveMonth, getDaysInPreviousMonth, getDayDate, getNextMonthAsCurrentMonth } from \"../../Dashboard/utils/dateAndCalendarUtils\";\nimport { makeSelectAssignLessonsModalOpen, makeSelectAssignWorkSheetsModalOpen, makeSelectCalendarRows } from '../index/selectors';\nimport { setAssignLessonsModalOpen, setAssignWorksheetModalOpen, setCalendarRows } from '../index/actions';\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetActiveMonth\", activeMonthIndex => {\n      // daysInPreviousMonth is used to handle cases where the calendar for the month starts with dates from the preceding month\n      // firstDay indicates the day the first day of the month falls on in a zero-based index manner, meaning Sunday is 0, Monday is 1, etc\n      const daysInPreviousMonth = getDaysInPreviousMonth(activeMonthIndex);\n      const daysInActiveMonth = getDaysInActiveMonth(activeMonthIndex);\n      const firstDay = getFirstDay(activeMonthIndex);\n      const rows = []; // We increment calDate and change inMonth in the case where dates from the next month appear in row 1 or row 6\n      // Since activeMonthIndex is zero-based, currentMonth adds 1 so the cells are accurate as actual calendar dates\n      // getNextMonthAsCurrentMonth is used to derive the current month to ensure it matches the format of incoming dates - 01/15/19 vs 1/15/19, otherwise new events wouldn't find the date to be assigned to\n\n      let inMonth = true;\n      let calDate = 1;\n      let currentMonth = getNextMonthAsCurrentMonth(activeMonthIndex);\n\n      if (firstDay !== 0) {\n        currentMonth = currentMonth > 9 ? currentMonth -= 1 : `0${currentMonth - 1}`;\n        calDate = daysInPreviousMonth - firstDay + 1;\n        inMonth = false;\n      } // First for loop handles the 6 calendar rows, second for loop handles the 7 days of the week\n\n\n      for (let i = 0; i < 6; i++) {\n        const rowArr = [];\n\n        for (let j = 0; j < 7; j++) {\n          const date = `${currentMonth}/${calDate > 9 ? calDate : `0${calDate}`}/${currentYear}`;\n          const dayDate = getDayDate(date);\n          const activeDateKey = `row-${i + 1}-column-${j + 1}`; // This if statement handles the easiest calendar month scenario, where the 1st of the month falls on a Sunday\n\n          if (firstDay === 0) {\n            const dateCell = {\n              date,\n              dayDate,\n              calDate,\n              activeDateKey,\n              inMonth,\n              sessions: [],\n              lessons: [],\n              worksheets: [],\n              testSections: [],\n              simulatedSat: []\n            }; // This if statement handles the case where the date spills over into the next month\n\n            if (calDate === daysInActiveMonth) {\n              calDate = 1;\n              currentMonth = activeMonthIndex > 9 ? activeMonthIndex + 2 : `0${activeMonthIndex + 2}`;\n              inMonth = false;\n            } else {\n              calDate += 1;\n            }\n\n            rowArr.push(dateCell);\n          } // This else statement handles the more likely scenario, where the first row contains several days from the preceding month\n          else {\n              const dateCell = {\n                date,\n                dayDate,\n                calDate,\n                activeDateKey,\n                inMonth,\n                sessions: [],\n                lessons: [],\n                worksheets: [],\n                testSections: [],\n                simulatedSat: []\n              }; // This if statement handles the case where the date spills over into the next month\n\n              if (inMonth === false && calDate === daysInPreviousMonth) {\n                calDate = 1;\n                currentMonth = getNextMonthAsCurrentMonth(activeMonthIndex);\n                inMonth = true;\n              } else if (inMonth === true && calDate === daysInActiveMonth) {\n                currentMonth = activeMonthIndex > 9 ? activeMonthIndex + 2 : `0${activeMonthIndex + 2}`;\n                calDate = 1;\n                inMonth = false;\n              } else {\n                calDate += 1;\n              }\n\n              rowArr.push(dateCell);\n            }\n        }\n\n        rows.push(...rowArr);\n      }\n\n      this.setState({\n        activeMonth: activeMonthIndex\n      });\n\n      if (this.props.rows.length === 0) {\n        const {\n          onSetCalendarRows\n        } = this.props;\n        onSetCalendarRows(rows);\n      }\n    });\n\n    _defineProperty(this, \"onSetActiveDate\", incomingDate => {\n      this.setState({\n        activeDate: incomingDate,\n        activeColumn: incomingDate[13]\n      });\n    });\n\n    _defineProperty(this, \"onAssignSession\", session => {\n      const {\n        rows\n      } = this.props;\n      const updatedDate = rows.filter(row => row.date === session.date)[0];\n      const updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.sessions.push(session);\n      const updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n      const {\n        onSetCalendarRows\n      } = this.props;\n      onSetCalendarRows(updatedRows);\n      this.onToggleAssignSessionModal();\n    });\n\n    _defineProperty(this, \"onAssignLessons\", (lessons, date) => {\n      const {\n        rows\n      } = this.props;\n      const updatedDate = rows.filter(row => row.date === date)[0];\n      const updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.lessons.push(...lessons);\n      const updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n      const {\n        onSetCalendarRows\n      } = this.props;\n      onSetCalendarRows(updatedRows);\n      this.onToggleAssignLessonsModal();\n    });\n\n    _defineProperty(this, \"onToggleAssignLessonsModal\", (event = null, modalDate = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      const {\n        onSetAssignLessonsModalOpen,\n        assignLessonsModalOpen\n      } = this.props;\n      onSetAssignLessonsModalOpen(!assignLessonsModalOpen);\n      this.setState({\n        modalDate,\n        assignDropdownIsOpen: false\n      });\n    });\n\n    _defineProperty(this, \"onAssignTestSection\", testSection => {\n      const {\n        rows\n      } = this.props;\n      const updatedDate = rows.filter(row => row.date === testSection.assignDate)[0];\n      const updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.testSections.push(testSection);\n      const updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n      const {\n        onSetCalendarRows\n      } = this.props;\n      onSetCalendarRows(updatedRows);\n      this.onToggleAssignTestSectionModal();\n    });\n\n    _defineProperty(this, \"onAssignSimulatedSat\", simulatedSat => {\n      const {\n        rows\n      } = this.props;\n      const updatedDate = rows.filter(row => row.date === simulatedSat.assignDate)[0];\n      const updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.simulatedSat.push(simulatedSat);\n      const updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n      const {\n        onSetCalendarRows\n      } = this.props;\n      onSetCalendarRows(updatedRows);\n      this.onToggleAssignSimulatedSatModal();\n    });\n\n    _defineProperty(this, \"onAssignTargetTest\", targetTestDate => {\n      throw `pending decision of what test date assign ui looks like${targetTestDate.toString()}`; // console.warn(, targetTestDate);\n    });\n\n    _defineProperty(this, \"onToggleAssignSessionModal\", (event = null, modalDate = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState(({\n        assignSessionModalOpen\n      }) => ({\n        assignSessionModalOpen: !assignSessionModalOpen,\n        modalDate,\n        assignDropdownIsOpen: false\n      }));\n    });\n\n    _defineProperty(this, \"onToggleAssignTestSectionModal\", (event = null, modalDate = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState(({\n        assignTestSectionModalOpen\n      }) => ({\n        assignTestSectionModalOpen: !assignTestSectionModalOpen,\n        modalDate,\n        assignDropdownIsOpen: false\n      }));\n    });\n\n    _defineProperty(this, \"onToggleAssignSimulatedSatModal\", (event = null, modalDate = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState(({\n        assignSimulatedSatModalOpen\n      }) => ({\n        assignSimulatedSatModalOpen: !assignSimulatedSatModalOpen,\n        modalDate,\n        assignDropdownIsOpen: false\n      }));\n    });\n\n    _defineProperty(this, \"onToggleAssignTargetTestModal\", (event = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState(({\n        assignTargetTestDateModalOpen\n      }) => ({\n        assignTargetTestDateModalOpen: !assignTargetTestDateModalOpen,\n        assignDropdownIsOpen: false\n      }));\n    });\n\n    _defineProperty(this, \"onToggleAddDropdown\", () => this.setState(({\n      addDropdownOpen\n    }) => ({\n      addDropdownOpen: !addDropdownOpen,\n      deleteDropdownOpen: false\n    })));\n\n    _defineProperty(this, \"onToggleDeleteDropdown\", () => this.setState(({\n      deleteDropdownOpen\n    }) => ({\n      deleteDropdownOpen: !deleteDropdownOpen,\n      addDropdownOpen: false\n    })));\n\n    _defineProperty(this, \"onToggleAssignDropdown\", () => this.setState(({\n      assignDropdownIsOpen\n    }) => ({\n      assignDropdownIsOpen: !assignDropdownIsOpen\n    })));\n\n    _defineProperty(this, \"onToggleHandleFilteredItemsDropdown\", () => this.setState(({\n      onToggleHandleFilteredItemsDropdown\n    }) => ({\n      onToggleHandleFilteredItemsDropdown: !onToggleHandleFilteredItemsDropdown\n    })));\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      filters: [],\n      eventFilters: []\n    }));\n\n    _defineProperty(this, \"onHandleDetailsChange\", (name, event) => this.setState({\n      [name]: event.target.value\n    }));\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      const {\n        rows\n      } = this.props;\n      const {\n        source,\n        destination,\n        draggableId\n      } = result; // The following draggable vars are pulled from the dragged item to identify the event type (lesson, worksheet, etc), date, and index in that date's array of that type of event\n\n      const draggableKeys = draggableId.split(\"-\");\n      const draggableType = draggableKeys[0];\n      const draggableIndex = draggableKeys[2]; // If the event isn't switching dates, we return out of the function early and do nothing\n\n      if (!destination || source.droppableId === destination.droppableId) {\n        return;\n      } // The follwing sourceDate and destinationDate vars are used to find the dates being modified and their index in the month of calendar dates\n\n\n      const sourceDateKey = source.droppableId.split(\"-\")[1];\n      const destinationDateKey = destination.droppableId.split(\"-\")[1];\n      const sourceDate = rows.filter(row => row.date === sourceDateKey)[0];\n      const destinationDate = rows.filter(row => row.date === destinationDateKey)[0];\n      const sourceDateIndex = rows.indexOf(sourceDate);\n      const destinationDateIndex = rows.indexOf(destinationDate); // Here we target the event being moved, alter its date to that of the destintion, splice it from the source and push it to the destination\n      // Finally, we perform two splice operations to replace the old source and destination dates with their updated equivalents\n\n      const movedEvent = sourceDate[draggableType][draggableIndex];\n      movedEvent.date = destinationDate.date;\n      sourceDate[draggableType].splice(draggableIndex, 1);\n      destinationDate[draggableType].push(movedEvent);\n      const updatedRows = update(rows, {\n        $splice: [+[sourceDateIndex, 1, sourceDate], [destinationDateIndex, 1, destinationDate]]\n      });\n      const {\n        onSetCalendarRows\n      } = this.props;\n      onSetCalendarRows(updatedRows);\n    });\n\n    _defineProperty(this, \"handleFilterClick\", (filter, eventFilter = false) => {\n      // TODO: Only the following filters are active: sessions, lessons, worksheets, test sections, simulated sats, target tests\n      // The other filters dont seem to have corresponding data in this page\n      const {\n        filters: allFilters,\n        eventFilters\n      } = this.state;\n      let filters;\n      let filterName;\n\n      if (eventFilter) {\n        filters = eventFilters;\n        filterName = \"eventFilters\";\n      } else {\n        filters = allFilters;\n        filterName = \"filters\";\n      }\n\n      let updatedFilters;\n\n      if (filters.indexOf(filter) === -1) {\n        updatedFilters = update(filters, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = filters.indexOf(filter);\n        updatedFilters = update(filters, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        [filterName]: updatedFilters\n      });\n    });\n\n    _defineProperty(this, \"onToggleAssignWorksheetsModal\", (event = null, modalDate = null) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState({\n        modalDate,\n        assignDropdownIsOpen: false\n      });\n      const {\n        onSetAssignWorksheetModalOpen,\n        assignWorkSheetsModalOpen\n      } = this.props;\n      onSetAssignWorksheetModalOpen(!assignWorkSheetsModalOpen);\n    });\n\n    _defineProperty(this, \"onAssignWorksheets\", (worksheets, date) => {\n      const {\n        rows\n      } = this.props;\n      const updatedDate = rows.filter(row => row.date === date)[0];\n      const updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.worksheets.push(...worksheets);\n      const updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n      const {\n        onSetCalendarRows\n      } = this.props;\n      onSetCalendarRows(updatedRows);\n      this.onToggleAssignWorksheetsModal();\n    });\n\n    _defineProperty(this, \"mapRows\", () => {\n      const {\n        filters,\n        eventFilters,\n        activeDate,\n        activeColumn,\n        addDropdownOpen,\n        deleteDropdownOpen\n      } = this.state;\n      const {\n        rows\n      } = this.props;\n      let startIndex = -7;\n      let endIndex = 0;\n      const rowArray = [];\n\n      for (let i = 0; i < 6; i++) {\n        startIndex += 7;\n        endIndex += 7;\n        rowArray.push(__jsx(CalendarRow, {\n          key: i,\n          rows: rows.slice(startIndex, endIndex),\n          filters: filters,\n          eventFilters: eventFilters,\n          activeDate: activeDate,\n          activeColumn: activeColumn,\n          addDropdownOpen: addDropdownOpen,\n          deleteDropdownOpen: deleteDropdownOpen,\n          onSetActiveDate: this.onSetActiveDate,\n          onToggleAddDropdown: this.onToggleAddDropdown,\n          onToggleDeleteDropdown: this.onToggleDeleteDropdown,\n          onToggleAssignLessonsModal: this.onToggleAssignLessonsModal,\n          onToggleAssignSessionModal: this.onToggleAssignSessionModal,\n          onToggleAssignWorksheetsModal: this.onToggleAssignWorksheetsModal,\n          onToggleAssignTestSectionModal: this.onToggleAssignTestSectionModal,\n          onToggleAssignSimulatedSatModal: this.onToggleAssignSimulatedSatModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 419\n          },\n          __self: this\n        }));\n      }\n\n      return rowArray;\n    });\n\n    this.state = {\n      activeMonth: '',\n      filters: [],\n      eventFilters: [],\n      activeDate: null,\n      activeColumn: null,\n      addDropdownOpen: false,\n      deleteDropdownOpen: false,\n      assignDropdownIsOpen: false,\n      onToggleHandleFilteredItemsDropdown: false,\n      assignSessionModalOpen: false,\n      assignTestSectionModalOpen: false,\n      assignSimulatedSatModalOpen: false,\n      assignTargetTestDateModalOpen: false,\n      assignLessonsModalOpen: false,\n      assignWorksheetsModalOpen: false,\n      modalDate: null,\n      accountActivated: false,\n      activationDropdownOpen: false,\n      licenseCode: ''\n    };\n  } // This is called onMount in CalendarHeader component to set the current month calendar rows, and every time the month changes afterward\n  // IMPORTANT: activeMonthIndex is zero-based, meaning January is 0, February is 1, etc.\n\n\n  render() {\n    const {\n      assignSessionModalOpen,\n      activeMonth,\n      assignTestSectionModalOpen,\n      assignSimulatedSatModalOpen,\n      assignTargetTestDateModalOpen,\n      modalDate,\n      assignDropdownIsOpen,\n      onToggleHandleFilteredItemsDropdown,\n      filters,\n      eventFilters\n    } = this.state;\n    const {\n      assignLessonsModalOpen,\n      assignWorkSheetsModalOpen\n    } = this.props;\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, assignLessonsModalOpen ? __jsx(AssignLessonModal, {\n      modalDate: modalDate,\n      open: assignLessonsModalOpen,\n      onClose: this.onToggleAssignLessonsModal,\n      onAssignLessons: this.onAssignLessons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }) : assignWorkSheetsModalOpen ? __jsx(AssignWorksheetModal, {\n      modalDate: modalDate,\n      open: assignWorkSheetsModalOpen,\n      onClose: this.onToggleAssignWorksheetsModal,\n      onAssignWorksheets: this.onAssignWorksheets,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }) : [__jsx(AssignSessionModal, {\n      modalDate: modalDate,\n      open: assignSessionModalOpen,\n      onClose: this.onToggleAssignSessionModal,\n      onAssignSession: this.onAssignSession,\n      key: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }), __jsx(AssignTestSectionModal, {\n      modalDate: modalDate,\n      open: assignTestSectionModalOpen,\n      onClose: this.onToggleAssignTestSectionModal,\n      onAssignTestSection: this.onAssignTestSection,\n      user: this.props.user,\n      key: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }), __jsx(AssignSimulatedSatModal, {\n      modalDate: modalDate,\n      open: assignSimulatedSatModalOpen,\n      onClose: this.onToggleAssignSimulatedSatModal,\n      onAssignSimulatedSat: this.onAssignSimulatedSat,\n      key: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), __jsx(AssignTargetTestModal, {\n      open: assignTargetTestDateModalOpen,\n      onClose: this.onToggleAssignTargetTestModal,\n      onAssignTargetTest: this.onAssignTargetTest,\n      key: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }), __jsx(StickyContainer, {\n      key: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, __jsx(FilterSection, {\n      filters: filters,\n      eventFilters: eventFilters,\n      onClearFilters: this.onClearFilters,\n      handleFilterClick: this.handleFilterClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"calendar-section view-month\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"calendar-slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, __jsx(CalendarHeader, {\n      activeMonth: Number(activeMonth),\n      onSetActiveMonth: this.onSetActiveMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      id: \"calendar\",\n      className: \"main-slick-calendar cal-context\",\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"slide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, __jsx(\"table\", {\n      className: \"calendar-table cal-month-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, __jsx(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, __jsx(\"tr\", {\n      className: \"calendar-head-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, __jsx(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, \"Su\"), __jsx(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, \"M\"), __jsx(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, \"Tu\"), __jsx(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"W\"), __jsx(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, \"Th\"), __jsx(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, \"F\"), __jsx(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"Sa\"))), __jsx(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, this.mapRows()))))), __jsx(\"div\", {\n      className: \"add-btn-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"dropdown_assign\",\n      onClick: this.onToggleAssignDropdown,\n      className: \"dropdown-trigger waves-effect waves-teal btn add-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, \"Assign...\"), __jsx(\"ul\", {\n      id: \"dropdown_assign\",\n      className: \"dropdown-content\",\n      style: {\n        display: assignDropdownIsOpen ? \"block\" : \"none\",\n        opacity: assignDropdownIsOpen ? \"100\" : \"0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignSessionModal,\n      className: \"modal-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \"Session\")), __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignLessonsModal,\n      className: \"modal-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, \"Lesson\")), __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignWorksheetsModal,\n      className: \"modal-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, \"Worksheet\")), __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignTestSectionModal,\n      className: \"modal-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, \"Test Section\")), __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignSimulatedSatModal,\n      className: \"modal-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, \"Simulated SAT\")), __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onToggleAssignTargetTestModal,\n      className: \"modal-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, \"Target Test\")), __jsx(\"li\", {\n      className: \"divider\",\n      tabIndex: \"-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }), __jsx(\"li\", {\n      className: \"dropdown-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"modal-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, \"Apply Course Template\")))), __jsx(\"div\", {\n      className: \"add-btn-block btn-block-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"dropdown_other\",\n      onClick: this.onToggleHandleFilteredItemsDropdown,\n      className: \"dropdown-trigger waves-effect waves-teal btn add-btn-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"icon-dots\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    })), __jsx(\"ul\", {\n      id: \"dropdown_other\",\n      className: \"dropdown-content\",\n      style: {\n        display: onToggleHandleFilteredItemsDropdown ? \"block\" : \"none\",\n        opacity: onToggleHandleFilteredItemsDropdown ? \"100\" : \"0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, __jsx(\"li\", {\n      className: \"dropdown-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, __jsx(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, \"With Filtered Items... \"), __jsx(\"b\", {\n      className: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }, \"(items currently visible on calendar)\")), __jsx(\"li\", {\n      className: \"divider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }), __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"modal-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"Save Course as Template\")), __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, \"Reset All\")), __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, \"Delete All\")))))))]);\n  }\n\n}\n\nCalendar.propTypes = {\n  assignLessonsModalOpen: PropTypes.bool.isRequired,\n  assignWorkSheetsModalOpen: PropTypes.bool.isRequired,\n  onSetAssignLessonsModalOpen: PropTypes.func.isRequired,\n  onSetAssignWorksheetModalOpen: PropTypes.func.isRequired,\n  onSetCalendarRows: PropTypes.func.isRequired,\n  rows: PropTypes.array.isRequired,\n  user: PropTypes.object.isRequired\n};\nconst mapStateToProps = createStructuredSelector({\n  assignLessonsModalOpen: makeSelectAssignLessonsModalOpen(),\n  assignWorkSheetsModalOpen: makeSelectAssignWorkSheetsModalOpen(),\n  rows: makeSelectCalendarRows()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetAssignLessonsModalOpen: value => dispatch(setAssignLessonsModalOpen(value)),\n    onSetAssignWorksheetModalOpen: value => dispatch(setAssignWorksheetModalOpen(value)),\n    onSetCalendarRows: rows => dispatch(setCalendarRows(rows))\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(Calendar);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/Calendar/index.js"],"names":["React","Component","PropTypes","createStructuredSelector","compose","connect","update","DragDropContext","StickyContainer","FilterSection","CalendarHeader","CalendarRow","AssignSessionModal","AssignTestSectionModal","AssignSimulatedSatModal","AssignTargetTestModal","AssignLessonModal","AssignWorksheetModal","currentYear","getFirstDay","getDaysInActiveMonth","getDaysInPreviousMonth","getDayDate","getNextMonthAsCurrentMonth","makeSelectAssignLessonsModalOpen","makeSelectAssignWorkSheetsModalOpen","makeSelectCalendarRows","setAssignLessonsModalOpen","setAssignWorksheetModalOpen","setCalendarRows","Calendar","constructor","props","activeMonthIndex","daysInPreviousMonth","daysInActiveMonth","firstDay","rows","inMonth","calDate","currentMonth","i","rowArr","j","date","dayDate","activeDateKey","dateCell","sessions","lessons","worksheets","testSections","simulatedSat","push","setState","activeMonth","length","onSetCalendarRows","incomingDate","activeDate","activeColumn","session","updatedDate","filter","row","updatedDateIndex","indexOf","updatedRows","$splice","onToggleAssignSessionModal","onToggleAssignLessonsModal","event","modalDate","preventDefault","onSetAssignLessonsModalOpen","assignLessonsModalOpen","assignDropdownIsOpen","testSection","assignDate","onToggleAssignTestSectionModal","onToggleAssignSimulatedSatModal","targetTestDate","toString","assignSessionModalOpen","assignTestSectionModalOpen","assignSimulatedSatModalOpen","assignTargetTestDateModalOpen","addDropdownOpen","deleteDropdownOpen","onToggleHandleFilteredItemsDropdown","filters","eventFilters","name","target","value","result","source","destination","draggableId","draggableKeys","split","draggableType","draggableIndex","droppableId","sourceDateKey","destinationDateKey","sourceDate","destinationDate","sourceDateIndex","destinationDateIndex","movedEvent","splice","eventFilter","allFilters","state","filterName","updatedFilters","$push","filterIndex","onSetAssignWorksheetModalOpen","assignWorkSheetsModalOpen","onToggleAssignWorksheetsModal","startIndex","endIndex","rowArray","slice","onSetActiveDate","onToggleAddDropdown","onToggleDeleteDropdown","assignWorksheetsModalOpen","accountActivated","activationDropdownOpen","licenseCode","render","onAssignLessons","onAssignWorksheets","onAssignSession","onAssignTestSection","user","onAssignSimulatedSat","onToggleAssignTargetTestModal","onAssignTargetTest","onClearFilters","handleFilterClick","Number","onSetActiveMonth","width","onDragEnd","mapRows","onToggleAssignDropdown","display","opacity","propTypes","bool","isRequired","func","array","object","mapStateToProps","mapDispatchToProps","dispatch","withConnect"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport update from \"immutability-helper\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { StickyContainer } from \"react-sticky\";\nimport FilterSection from \"../../Dashboard/components/FilterSection\";\nimport CalendarHeader from \"../../Dashboard/components/CalendarHeader\";\nimport CalendarRow from \"../../Dashboard/components/CalendarRow\";\n\nimport AssignSessionModal from \"../../Dashboard/components/Modals/AssignSessionModal\";\nimport AssignTestSectionModal from \"../../Dashboard/components/Modals/AssignTestSectionModal\";\nimport AssignSimulatedSatModal from \"../../Dashboard/components/Modals/AssignSimulatedSATModal\";\nimport AssignTargetTestModal from \"../../Dashboard/components/Modals/AssignTargetTestModal\";\nimport AssignLessonModal from \"../../Dashboard/components/Modals/AssignLessonModal\";\nimport AssignWorksheetModal from '../../Dashboard/components/Modals/AssignWorksheetModal';\n\nimport {\n  currentYear,\n  getFirstDay,\n  getDaysInActiveMonth,\n  getDaysInPreviousMonth,\n  getDayDate,\n  getNextMonthAsCurrentMonth,\n} from \"../../Dashboard/utils/dateAndCalendarUtils\";\n\n\nimport {\n  makeSelectAssignLessonsModalOpen,\n  makeSelectAssignWorkSheetsModalOpen,\n  makeSelectCalendarRows,\n} from '../index/selectors';\n\nimport {\n  setAssignLessonsModalOpen,\n  setAssignWorksheetModalOpen,\n  setCalendarRows,\n} from '../index/actions';\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeMonth: '',\n      filters: [],\n      eventFilters: [],\n      activeDate: null,\n      activeColumn: null,\n      addDropdownOpen: false,\n      deleteDropdownOpen: false,\n      assignDropdownIsOpen: false,\n      onToggleHandleFilteredItemsDropdown: false,\n      assignSessionModalOpen: false,\n      assignTestSectionModalOpen: false,\n      assignSimulatedSatModalOpen: false,\n      assignTargetTestDateModalOpen: false,\n      assignLessonsModalOpen: false,\n      assignWorksheetsModalOpen: false,\n      modalDate: null,\n      accountActivated: false,\n      activationDropdownOpen: false,\n      licenseCode: '',\n    };\n  }\n\n\n  // This is called onMount in CalendarHeader component to set the current month calendar rows, and every time the month changes afterward\n  // IMPORTANT: activeMonthIndex is zero-based, meaning January is 0, February is 1, etc.\n  onSetActiveMonth = activeMonthIndex => {\n    // daysInPreviousMonth is used to handle cases where the calendar for the month starts with dates from the preceding month\n    // firstDay indicates the day the first day of the month falls on in a zero-based index manner, meaning Sunday is 0, Monday is 1, etc\n    const daysInPreviousMonth = getDaysInPreviousMonth(activeMonthIndex);\n    const daysInActiveMonth = getDaysInActiveMonth(activeMonthIndex);\n    const firstDay = getFirstDay(activeMonthIndex);\n    const rows = [];\n\n    // We increment calDate and change inMonth in the case where dates from the next month appear in row 1 or row 6\n    // Since activeMonthIndex is zero-based, currentMonth adds 1 so the cells are accurate as actual calendar dates\n    // getNextMonthAsCurrentMonth is used to derive the current month to ensure it matches the format of incoming dates - 01/15/19 vs 1/15/19, otherwise new events wouldn't find the date to be assigned to\n    let inMonth = true;\n    let calDate = 1;\n    let currentMonth = getNextMonthAsCurrentMonth(activeMonthIndex);\n    if (firstDay !== 0) {\n      currentMonth =\n        currentMonth > 9 ? (currentMonth -= 1) : `0${currentMonth - 1}`;\n      calDate = daysInPreviousMonth - firstDay + 1;\n      inMonth = false;\n    }\n    // First for loop handles the 6 calendar rows, second for loop handles the 7 days of the week\n    for (let i = 0; i < 6; i++) {\n      const rowArr = [];\n      for (let j = 0; j < 7; j++) {\n        const date = `${currentMonth}/${\n          calDate > 9 ? calDate : `0${calDate}`\n        }/${currentYear}`;\n        const dayDate = getDayDate(date);\n        const activeDateKey = `row-${i + 1}-column-${j + 1}`;\n        // This if statement handles the easiest calendar month scenario, where the 1st of the month falls on a Sunday\n        if (firstDay === 0) {\n          const dateCell = {\n            date,\n            dayDate,\n            calDate,\n            activeDateKey,\n            inMonth,\n            sessions: [],\n            lessons: [],\n            worksheets: [],\n            testSections: [],\n            simulatedSat: [],\n          };\n          // This if statement handles the case where the date spills over into the next month\n          if (calDate === daysInActiveMonth) {\n            calDate = 1;\n            currentMonth =\n              activeMonthIndex > 9\n                ? activeMonthIndex + 2\n                : `0${activeMonthIndex + 2}`;\n            inMonth = false;\n          } else {\n            calDate += 1;\n          }\n          rowArr.push(dateCell);\n        }\n        // This else statement handles the more likely scenario, where the first row contains several days from the preceding month\n        else {\n          const dateCell = {\n            date,\n            dayDate,\n            calDate,\n            activeDateKey,\n            inMonth,\n            sessions: [],\n            lessons: [],\n            worksheets: [],\n            testSections: [],\n            simulatedSat: [],\n          };\n          // This if statement handles the case where the date spills over into the next month\n          if (inMonth === false && calDate === daysInPreviousMonth) {\n            calDate = 1;\n            currentMonth = getNextMonthAsCurrentMonth(activeMonthIndex);\n            inMonth = true;\n          } else if (inMonth === true && calDate === daysInActiveMonth) {\n            currentMonth =\n              activeMonthIndex > 9\n                ? activeMonthIndex + 2\n                : `0${activeMonthIndex + 2}`;\n            calDate = 1;\n            inMonth = false;\n          } else {\n            calDate += 1;\n          }\n          rowArr.push(dateCell);\n        }\n      }\n      rows.push(...rowArr);\n    }\n    this.setState({ activeMonth: activeMonthIndex });\n    if (this.props.rows.length === 0) {\n      const { onSetCalendarRows } = this.props;\n      onSetCalendarRows(rows);\n    }\n  };\n\n  onSetActiveDate = incomingDate => {\n    this.setState({ activeDate: incomingDate, activeColumn: incomingDate[13] });\n  };\n\n  onAssignSession = session => {\n    const { rows } = this.props;\n    const updatedDate = rows.filter(row => row.date === session.date)[0];\n    const updatedDateIndex = rows.indexOf(updatedDate);\n    updatedDate.sessions.push(session);\n    const updatedRows = update(rows, {\n      $splice: [[updatedDateIndex, 1, updatedDate]],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n    this.onToggleAssignSessionModal();\n  };\n\n\n  onAssignLessons = (lessons, date) => {\n    const { rows } = this.props;\n    const updatedDate = rows.filter(row => row.date === date)[0];\n    const updatedDateIndex = rows.indexOf(updatedDate);\n    updatedDate.lessons.push(...lessons);\n    const updatedRows = update(rows, {\n      $splice: [[updatedDateIndex, 1, updatedDate]],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n    this.onToggleAssignLessonsModal();\n  };\n\n  onToggleAssignLessonsModal = (event = null, modalDate = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    const { onSetAssignLessonsModalOpen, assignLessonsModalOpen } = this.props;\n    onSetAssignLessonsModalOpen(!assignLessonsModalOpen);\n    this.setState({ modalDate, assignDropdownIsOpen: false });\n  };\n\n  onAssignTestSection = testSection => {\n    const { rows } = this.props;\n    const updatedDate = rows.filter(row => row.date === testSection.assignDate)[0];\n    const updatedDateIndex = rows.indexOf(updatedDate);\n    updatedDate.testSections.push(testSection);\n    const updatedRows = update(rows, {\n      $splice: [[updatedDateIndex, 1, updatedDate]],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n    this.onToggleAssignTestSectionModal();\n  };\n\n  onAssignSimulatedSat = simulatedSat => {\n    const { rows } = this.props;\n    const updatedDate = rows.filter(\n      row => row.date === simulatedSat.assignDate\n    )[0];\n    const updatedDateIndex = rows.indexOf(updatedDate);\n    updatedDate.simulatedSat.push(simulatedSat);\n    const updatedRows = update(rows, {\n      $splice: [[updatedDateIndex, 1, updatedDate]],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n    this.onToggleAssignSimulatedSatModal();\n  };\n\n  onAssignTargetTest = targetTestDate => {\n    throw `pending decision of what test date assign ui looks like${targetTestDate.toString()}`;\n    // console.warn(, targetTestDate);\n  };\n\n  onToggleAssignSessionModal = (event = null, modalDate = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState(({ assignSessionModalOpen }) => ({\n      assignSessionModalOpen: !assignSessionModalOpen,\n      modalDate,\n      assignDropdownIsOpen: false,\n    }));\n  };\n\n  onToggleAssignTestSectionModal = (event = null, modalDate = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState(({ assignTestSectionModalOpen }) => ({\n      assignTestSectionModalOpen: !assignTestSectionModalOpen,\n      modalDate,\n      assignDropdownIsOpen: false,\n    }));\n  };\n\n  onToggleAssignSimulatedSatModal = (event = null, modalDate = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState(({ assignSimulatedSatModalOpen }) => ({\n      assignSimulatedSatModalOpen: !assignSimulatedSatModalOpen,\n      modalDate,\n      assignDropdownIsOpen: false,\n    }));\n  };\n\n  onToggleAssignTargetTestModal = (event = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState(({ assignTargetTestDateModalOpen }) => ({\n      assignTargetTestDateModalOpen: !assignTargetTestDateModalOpen,\n      assignDropdownIsOpen: false,\n    }));\n  };\n\n  onToggleAddDropdown = () =>\n    this.setState(({ addDropdownOpen }) => ({\n      addDropdownOpen: !addDropdownOpen,\n      deleteDropdownOpen: false,\n    }));\n  onToggleDeleteDropdown = () =>\n    this.setState(({ deleteDropdownOpen }) => ({\n      deleteDropdownOpen: !deleteDropdownOpen,\n      addDropdownOpen: false,\n    }));\n\n  onToggleAssignDropdown = () =>\n    this.setState(({ assignDropdownIsOpen }) => ({\n      assignDropdownIsOpen: !assignDropdownIsOpen,\n    }));\n  onToggleHandleFilteredItemsDropdown = () =>\n    this.setState(({ onToggleHandleFilteredItemsDropdown }) => ({\n      onToggleHandleFilteredItemsDropdown: !onToggleHandleFilteredItemsDropdown,\n    }));\n\n  onClearFilters = () => this.setState({ filters: [], eventFilters: [] });\n\n  onHandleDetailsChange = (name, event) =>\n    this.setState({ [name]: event.target.value });\n\n  onDragEnd = result => {\n    const { rows } = this.props;\n    const { source, destination, draggableId } = result;\n    // The following draggable vars are pulled from the dragged item to identify the event type (lesson, worksheet, etc), date, and index in that date's array of that type of event\n    const draggableKeys = draggableId.split(\"-\");\n    const draggableType = draggableKeys[0];\n    const draggableIndex = draggableKeys[2];\n\n    // If the event isn't switching dates, we return out of the function early and do nothing\n    if (!destination || source.droppableId === destination.droppableId) {\n      return;\n    }\n\n    // The follwing sourceDate and destinationDate vars are used to find the dates being modified and their index in the month of calendar dates\n    const sourceDateKey = source.droppableId.split(\"-\")[1];\n    const destinationDateKey = destination.droppableId.split(\"-\")[1];\n\n    const sourceDate = rows.filter(row => row.date === sourceDateKey)[0];\n    const destinationDate = rows.filter(\n      row => row.date === destinationDateKey\n    )[0];\n\n    const sourceDateIndex = rows.indexOf(sourceDate);\n    const destinationDateIndex = rows.indexOf(destinationDate);\n\n    // Here we target the event being moved, alter its date to that of the destintion, splice it from the source and push it to the destination\n    // Finally, we perform two splice operations to replace the old source and destination dates with their updated equivalents\n    const movedEvent = sourceDate[draggableType][draggableIndex];\n    movedEvent.date = destinationDate.date;\n    sourceDate[draggableType].splice(draggableIndex, 1);\n    destinationDate[draggableType].push(movedEvent);\n    const updatedRows = update(rows, {\n      $splice: [+[sourceDateIndex, 1, sourceDate],\n        [destinationDateIndex, 1, destinationDate],\n      ],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n  };\n\n  handleFilterClick = (filter, eventFilter = false) => {\n    // TODO: Only the following filters are active: sessions, lessons, worksheets, test sections, simulated sats, target tests\n    // The other filters dont seem to have corresponding data in this page\n    const { filters: allFilters, eventFilters } = this.state;\n    let filters;\n    let filterName;\n    if (eventFilter) {\n      filters = eventFilters;\n      filterName = \"eventFilters\";\n    } else {\n      filters = allFilters;\n      filterName = \"filters\";\n    }\n    let updatedFilters;\n    if (filters.indexOf(filter) === -1) {\n      updatedFilters = update(filters, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = filters.indexOf(filter);\n      updatedFilters = update(filters, {\n        $splice: [[filterIndex, 1]],\n      });\n    }\n    this.setState({ [filterName]: updatedFilters });\n  };\n\n\n  onToggleAssignWorksheetsModal = (event = null, modalDate = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState({ modalDate, assignDropdownIsOpen: false });\n    const { onSetAssignWorksheetModalOpen, assignWorkSheetsModalOpen } = this.props;\n    onSetAssignWorksheetModalOpen(!assignWorkSheetsModalOpen);\n  };\n\n  onAssignWorksheets = (worksheets, date) => {\n    const { rows } = this.props;\n    const updatedDate = rows.filter(row => row.date === date)[0];\n    const updatedDateIndex = rows.indexOf(updatedDate);\n    updatedDate.worksheets.push(...worksheets);\n    const updatedRows = update(rows, {\n      $splice: [[updatedDateIndex, 1, updatedDate]],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n    this.onToggleAssignWorksheetsModal();\n  };\n\n\n  mapRows = () => {\n    const {\n      filters,\n      eventFilters,\n      activeDate,\n      activeColumn,\n      addDropdownOpen,\n      deleteDropdownOpen,\n    } = this.state;\n    const {\n      rows,\n    } = this.props;\n    let startIndex = -7;\n    let endIndex = 0;\n    const rowArray = [];\n    for (let i = 0; i < 6; i++) {\n      startIndex += 7;\n      endIndex += 7;\n      rowArray.push(\n        <CalendarRow\n          key={i}\n          rows={rows.slice(startIndex, endIndex)}\n          filters={filters}\n          eventFilters={eventFilters}\n          activeDate={activeDate}\n          activeColumn={activeColumn}\n          addDropdownOpen={addDropdownOpen}\n          deleteDropdownOpen={deleteDropdownOpen}\n          onSetActiveDate={this.onSetActiveDate}\n          onToggleAddDropdown={this.onToggleAddDropdown}\n          onToggleDeleteDropdown={this.onToggleDeleteDropdown}\n          onToggleAssignLessonsModal={this.onToggleAssignLessonsModal}\n          onToggleAssignSessionModal={this.onToggleAssignSessionModal}\n          onToggleAssignWorksheetsModal={this.onToggleAssignWorksheetsModal}\n          onToggleAssignTestSectionModal={this.onToggleAssignTestSectionModal}\n          onToggleAssignSimulatedSatModal={this.onToggleAssignSimulatedSatModal}\n        />\n      );\n    }\n    return rowArray;\n  };\n\n  render() {\n    const {\n      assignSessionModalOpen,\n      activeMonth,\n      assignTestSectionModalOpen,\n      assignSimulatedSatModalOpen,\n      assignTargetTestDateModalOpen,\n      modalDate,\n      assignDropdownIsOpen,\n      onToggleHandleFilteredItemsDropdown,\n      filters,\n      eventFilters,\n    } = this.state;\n    const {\n      assignLessonsModalOpen,\n      assignWorkSheetsModalOpen,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <Choose>\n          <When condition={assignLessonsModalOpen}>\n            <AssignLessonModal\n              modalDate={modalDate}\n              open={assignLessonsModalOpen}\n              onClose={this.onToggleAssignLessonsModal}\n              onAssignLessons={this.onAssignLessons}\n            />\n          </When>\n          <When condition={assignWorkSheetsModalOpen}>\n            <AssignWorksheetModal\n              modalDate={modalDate}\n              open={assignWorkSheetsModalOpen}\n              onClose={this.onToggleAssignWorksheetsModal}\n              onAssignWorksheets={this.onAssignWorksheets}\n            />\n          </When>\n          <Otherwise>\n            <AssignSessionModal\n              modalDate={modalDate}\n              open={assignSessionModalOpen}\n              onClose={this.onToggleAssignSessionModal}\n              onAssignSession={this.onAssignSession}\n            />\n            <AssignTestSectionModal\n              modalDate={modalDate}\n              open={assignTestSectionModalOpen}\n              onClose={this.onToggleAssignTestSectionModal}\n              onAssignTestSection={this.onAssignTestSection}\n              user = {this.props.user}\n            />\n            <AssignSimulatedSatModal\n              modalDate={modalDate}\n              open={assignSimulatedSatModalOpen}\n              onClose={this.onToggleAssignSimulatedSatModal}\n              onAssignSimulatedSat={this.onAssignSimulatedSat}\n            />\n            <AssignTargetTestModal\n              open={assignTargetTestDateModalOpen}\n              onClose={this.onToggleAssignTargetTestModal}\n              onAssignTargetTest={this.onAssignTargetTest}\n            />\n            <StickyContainer>\n              <FilterSection\n                filters={filters}\n                eventFilters={eventFilters}\n                onClearFilters={this.onClearFilters}\n                handleFilterClick={this.handleFilterClick}\n              />\n              <div className=\"calendar-section view-month\">\n                <div className=\"calendar-slider\">\n                  <CalendarHeader\n                    activeMonth={Number(activeMonth)}\n                    onSetActiveMonth={this.onSetActiveMonth}\n                  />\n                  <div\n                    id=\"calendar\"\n                    className=\"main-slick-calendar cal-context\"\n                    style={{ width: \"100%\" }}\n                  >\n                    <div className=\"slide\">\n                      <table className=\"calendar-table cal-month-box\">\n                        <thead>\n                          <tr className=\"calendar-head-row\">\n                            <th>Su</th>\n                            <th>M</th>\n                            <th>Tu</th>\n                            <th>W</th>\n                            <th>Th</th>\n                            <th>F</th>\n                            <th>Sa</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <DragDropContext onDragEnd={this.onDragEnd}>\n                            {this.mapRows()}\n                          </DragDropContext>\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                  <div className=\"add-btn-block\">\n                    <a\n                      href=\"#\"\n                      data-target=\"dropdown_assign\"\n                      onClick={this.onToggleAssignDropdown}\n                      className=\"dropdown-trigger waves-effect waves-teal btn add-btn\"\n                    >\n                  Assign...\n                    </a>\n                    <ul\n                      id=\"dropdown_assign\"\n                      className=\"dropdown-content\"\n                      style={{\n                        display: assignDropdownIsOpen ? \"block\" : \"none\",\n                        opacity: assignDropdownIsOpen ? \"100\" : \"0\",\n                      }}\n                    >\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignSessionModal}\n                          className=\"modal-trigger\"\n                        >\n                      Session\n                        </a>\n                      </li>\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignLessonsModal}\n                          className=\"modal-trigger\"\n                        >\n                      Lesson\n                        </a>\n                      </li>\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignWorksheetsModal}\n                          className=\"modal-trigger\"\n                        >\n                      Worksheet\n                        </a>\n                      </li>\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignTestSectionModal}\n                          className=\"modal-trigger\"\n                        >\n                      Test Section\n                        </a>\n                      </li>\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignSimulatedSatModal}\n                          className=\"modal-trigger\"\n                        >\n                      Simulated SAT\n                        </a>\n                      </li>\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignTargetTestModal}\n                          className=\"modal-trigger\"\n                        >\n                      Target Test\n                        </a>\n                      </li>\n                      <li className=\"divider\" tabIndex=\"-1\"></li>\n                      <li className=\"dropdown-footer\">\n                        <a href=\"#\" className=\"modal-trigger\">\n                      Apply Course Template\n                        </a>\n                      </li>\n                    </ul>\n                  </div>\n                  <div className=\"add-btn-block btn-block-right\">\n                    <a\n                      href=\"#\"\n                      data-target=\"dropdown_other\"\n                      onClick={this.onToggleHandleFilteredItemsDropdown}\n                      className=\"dropdown-trigger waves-effect waves-teal btn add-btn-circle\"\n                    >\n                      <i className=\"icon-dots\"></i>\n                    </a>\n                    <ul\n                      id=\"dropdown_other\"\n                      className=\"dropdown-content\"\n                      style={{\n                        display: onToggleHandleFilteredItemsDropdown\n                          ? \"block\"\n                          : \"none\",\n                        opacity: onToggleHandleFilteredItemsDropdown ? \"100\" : \"0\",\n                      }}\n                    >\n                      <li className=\"dropdown-header\">\n                        <b>With Filtered Items... </b>\n                        <b className=\"small\">\n                      (items currently visible on calendar)\n                        </b>\n                      </li>\n                      <li className=\"divider\"></li>\n                      <li>\n                        <a href=\"#\" className=\"modal-trigger\">\n                      Save Course as Template\n                        </a>\n                      </li>\n                      <li>\n                        <a href=\"#\">Reset All</a>\n                      </li>\n                      <li>\n                        <a href=\"#\">Delete All</a>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </StickyContainer>\n          </Otherwise>\n        </Choose>\n      </React.Fragment>\n    );\n  }\n}\n\n\nCalendar.propTypes = {\n  assignLessonsModalOpen: PropTypes.bool.isRequired,\n  assignWorkSheetsModalOpen: PropTypes.bool.isRequired,\n  onSetAssignLessonsModalOpen: PropTypes.func.isRequired,\n  onSetAssignWorksheetModalOpen: PropTypes.func.isRequired,\n  onSetCalendarRows: PropTypes.func.isRequired,\n  rows: PropTypes.array.isRequired,\n  user: PropTypes.object.isRequired,\n};\n\n\nconst mapStateToProps = createStructuredSelector({\n  assignLessonsModalOpen: makeSelectAssignLessonsModalOpen(),\n  assignWorkSheetsModalOpen: makeSelectAssignWorkSheetsModalOpen(),\n  rows: makeSelectCalendarRows(),\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetAssignLessonsModalOpen: (value) => dispatch(setAssignLessonsModalOpen(value)),\n    onSetAssignWorksheetModalOpen: (value) => dispatch(setAssignWorksheetModalOpen(value)),\n    onSetCalendarRows: (rows) => dispatch(setCalendarRows(rows)),\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport default compose(withConnect)(Calendar);\n"]},"metadata":{},"sourceType":"module"}