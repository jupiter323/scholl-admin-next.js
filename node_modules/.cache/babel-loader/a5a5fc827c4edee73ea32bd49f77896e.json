{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\nimport CalendarDate from '../CalendarDate';\n\nvar CalendarRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CalendarRow, _React$Component);\n\n  function CalendarRow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CalendarRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CalendarRow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleAssignSessionModal\", function (event, date) {\n      event.preventDefault();\n      var _this$props = _this.props,\n          onToggleAssignSessionModal = _this$props.onToggleAssignSessionModal,\n          onToggleAddDropdown = _this$props.onToggleAddDropdown;\n      onToggleAssignSessionModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleAssignLessonsModal\", function (event, date) {\n      event.preventDefault();\n      var _this$props2 = _this.props,\n          onToggleAssignLessonsModal = _this$props2.onToggleAssignLessonsModal,\n          onToggleAddDropdown = _this$props2.onToggleAddDropdown;\n      onToggleAssignLessonsModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleAssignWorksheetsModal\", function (event, date) {\n      event.preventDefault();\n      var _this$props3 = _this.props,\n          onToggleAssignWorksheetsModal = _this$props3.onToggleAssignWorksheetsModal,\n          onToggleAddDropdown = _this$props3.onToggleAddDropdown;\n      onToggleAssignWorksheetsModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleAssignTestSectionModal\", function (event, date) {\n      event.preventDefault();\n      var _this$props4 = _this.props,\n          onToggleAssignTestSectionModal = _this$props4.onToggleAssignTestSectionModal,\n          onToggleAddDropdown = _this$props4.onToggleAddDropdown;\n      onToggleAssignTestSectionModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleAssignSimulatedSatModal\", function (event, date) {\n      event.preventDefault();\n      var _this$props5 = _this.props,\n          onToggleAssignSimulatedSatModal = _this$props5.onToggleAssignSimulatedSatModal,\n          onToggleAddDropdown = _this$props5.onToggleAddDropdown;\n      onToggleAssignSimulatedSatModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapDateSessions\", function (shouldMapSessions, sessions) {\n      if (shouldMapSessions) {\n        return sessions.map(function (session, index) {\n          return React.createElement(\"li\", {\n            className: \"event-frame\",\n            key: index\n          }, React.createElement(Draggable, {\n            key: index,\n            index: index,\n            draggableId: \"sessions-\".concat(session.date, \"-\").concat(index),\n            style: {\n              userSelect: 'none'\n            }\n          }, function (provided) {\n            return React.createElement(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps), React.createElement(\"span\", {\n              className: \"event-title-box\"\n            }, session.title));\n          }));\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapDateLessons\", function (shouldMapLessons, lessons) {\n      if (shouldMapLessons) {\n        return lessons.map(function (lesson, index) {\n          return React.createElement(\"li\", {\n            className: \"event-frame\",\n            key: index\n          }, React.createElement(Draggable, {\n            key: index,\n            index: index,\n            draggableId: \"lessons-\".concat(lesson.date, \"-\").concat(index),\n            style: {\n              userSelect: 'none'\n            }\n          }, function (provided) {\n            return React.createElement(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps), React.createElement(React.Fragment, null, lesson.completed && React.createElement(\"span\", {\n              className: \"event-check lesson-check\"\n            }, React.createElement(\"i\", {\n              className: \"icon-check02\"\n            })), React.createElement(\"span\", {\n              className: \"event event-lesson-box\"\n            }, lesson.title)));\n          }));\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapDateWorksheets\", function (shouldMapWorksheets, worksheets) {\n      if (shouldMapWorksheets) {\n        return worksheets.map(function (worksheet, index) {\n          return React.createElement(\"li\", {\n            className: \"event-frame\",\n            key: index\n          }, React.createElement(Draggable, {\n            key: index,\n            index: index,\n            draggableId: \"worksheets-\".concat(worksheet.date, \"-\").concat(index),\n            style: {\n              userSelect: 'none'\n            }\n          }, function (provided) {\n            return React.createElement(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps), React.createElement(React.Fragment, null, worksheet.completed && React.createElement(\"span\", {\n              className: \"event-check worksheet-check\"\n            }, React.createElement(\"i\", {\n              className: \"icon-check02\"\n            })), React.createElement(\"span\", {\n              className: \"event event-worksheet-box\"\n            }, worksheet.title)));\n          }));\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapTestSections\", function (shouldMapTestSections, testSections) {\n      if (shouldMapTestSections) {\n        return testSections.map(function (testSection, index) {\n          return React.createElement(\"li\", {\n            className: \"event-frame\",\n            key: index\n          }, React.createElement(Draggable, {\n            key: index,\n            index: index,\n            draggableId: \"testSections-\".concat(testSection.date, \"-\").concat(index),\n            style: {\n              userSelect: 'none'\n            }\n          }, function (provided) {\n            return React.createElement(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps), React.createElement(\"span\", {\n              className: \"event event-test-box\"\n            }, \"Test Section: \", testSection.version));\n          }));\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapSimulatedSats\", function (shouldMapSimulatedSats, simulatedSat) {\n      if (shouldMapSimulatedSats) {\n        return simulatedSat.map(function (sat, index) {\n          return React.createElement(\"li\", {\n            className: \"event-frame\",\n            key: index\n          }, React.createElement(Draggable, {\n            key: index,\n            index: index,\n            draggableId: \"simulatedSat-\".concat(sat.date, \"-\").concat(index)\n          }, function (provided) {\n            return React.createElement(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.dragHandleProps, provided.dragHandleProps), React.createElement(\"span\", {\n              className: \"event event-sat-box\"\n            }, sat.version));\n          }));\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapRowDates\", function () {\n      return _this.props.rows && _this.props.rows.map(function (rowDate) {\n        var _this$props6 = _this.props,\n            eventFilters = _this$props6.eventFilters,\n            activeDate = _this$props6.activeDate,\n            addDropdownOpen = _this$props6.addDropdownOpen,\n            deleteDropdownOpen = _this$props6.deleteDropdownOpen,\n            onSetActiveDate = _this$props6.onSetActiveDate,\n            onToggleAddDropdown = _this$props6.onToggleAddDropdown,\n            onToggleDeleteDropdown = _this$props6.onToggleDeleteDropdown,\n            activeColumn = _this$props6.activeColumn;\n        var date = rowDate.date,\n            dayDate = rowDate.dayDate,\n            calDate = rowDate.calDate,\n            activeDateKey = rowDate.activeDateKey,\n            inMonth = rowDate.inMonth,\n            _rowDate$sessions = rowDate.sessions,\n            sessions = _rowDate$sessions === void 0 ? [] : _rowDate$sessions,\n            _rowDate$lessons = rowDate.lessons,\n            lessons = _rowDate$lessons === void 0 ? [] : _rowDate$lessons,\n            _rowDate$worksheets = rowDate.worksheets,\n            worksheets = _rowDate$worksheets === void 0 ? [] : _rowDate$worksheets,\n            _rowDate$testSections = rowDate.testSections,\n            testSections = _rowDate$testSections === void 0 ? [] : _rowDate$testSections,\n            _rowDate$simulatedSat = rowDate.simulatedSat,\n            simulatedSat = _rowDate$simulatedSat === void 0 ? [] : _rowDate$simulatedSat;\n        var hasEvents = sessions.length > 0 || lessons.length > 0 || worksheets.length > 0 || testSections.length > 0 || simulatedSat.length > 0;\n        var inActiveColumn = activeDateKey && activeDateKey[13] === activeColumn;\n        var isActiveDate = activeDate === activeDateKey;\n        var hasEventFilters = eventFilters.length > 0;\n        var shouldMapSessions = !hasEventFilters && sessions.length || sessions.length > 0 && hasEventFilters && eventFilters.indexOf('sessions') !== -1;\n        var shouldMapLessons = !hasEventFilters && lessons.length || lessons.length > 0 && hasEventFilters && eventFilters.indexOf('lessons') !== -1;\n        var shouldMapWorksheets = !hasEventFilters && worksheets.length || worksheets.length > 0 && hasEventFilters && eventFilters.indexOf('worksheets') !== -1;\n        var shouldMapTestSections = !hasEventFilters && testSections.length || testSections.length > 0 && hasEventFilters && eventFilters.indexOf('testSections') !== -1;\n        var shouldMapSimulatedSats = !hasEventFilters && simulatedSat.length || simulatedSat.length > 0 && hasEventFilters && eventFilters.indexOf('simulatedSats') !== -1;\n        return React.createElement(CalendarDate, {\n          sessions: sessions,\n          lessons: lessons,\n          worksheets: worksheets,\n          testSections: testSections,\n          simulatedSat: simulatedSat,\n          key: date,\n          date: date,\n          dayDate: dayDate,\n          calDate: calDate,\n          inMonth: inMonth,\n          hasEvents: hasEvents,\n          isActiveDate: isActiveDate,\n          activeDateKey: activeDateKey,\n          inActiveColumn: inActiveColumn,\n          addDropdownOpen: addDropdownOpen,\n          onSetActiveDate: onSetActiveDate,\n          shouldMapLessons: shouldMapLessons,\n          shouldMapSessions: shouldMapSessions,\n          deleteDropdownOpen: deleteDropdownOpen,\n          onToggleAddDropdown: onToggleAddDropdown,\n          shouldMapWorksheets: shouldMapWorksheets,\n          shouldMapTestSections: shouldMapTestSections,\n          onToggleDeleteDropdown: onToggleDeleteDropdown,\n          shouldMapSimulatedSats: shouldMapSimulatedSats,\n          mapDateSessions: _this.mapDateSessions,\n          mapDateLessons: _this.mapDateLessons,\n          mapDateWorksheets: _this.mapDateWorksheets,\n          mapTestSections: _this.mapTestSections,\n          mapSimulatedSats: _this.mapSimulatedSats,\n          toggleAssignSessionModal: _this.toggleAssignSessionModal,\n          toggleAssignLessonsModal: _this.toggleAssignLessonsModal,\n          toggleAssignWorksheetsModal: _this.toggleAssignWorksheetsModal,\n          toggleAssignTestSectionModal: _this.toggleAssignTestSectionModal,\n          toggleAssignSimulatedSatModal: _this.toggleAssignSimulatedSatModal\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(CalendarRow, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"tr\", {\n        className: \"cal-row-fluid\"\n      }, this.mapRowDates());\n    }\n  }]);\n\n  return CalendarRow;\n}(React.Component);\n\nCalendarRow.propTypes = {\n  activeDate: PropTypes.string,\n  activeColumn: PropTypes.string,\n  rows: PropTypes.array.isRequired,\n  eventFilters: PropTypes.array.isRequired,\n  onSetActiveDate: PropTypes.func.isRequired,\n  addDropdownOpen: PropTypes.bool.isRequired,\n  deleteDropdownOpen: PropTypes.bool.isRequired,\n  onToggleAddDropdown: PropTypes.func.isRequired,\n  onToggleDeleteDropdown: PropTypes.func.isRequired,\n  onToggleAssignSessionModal: PropTypes.func.isRequired,\n  onToggleAssignLessonsModal: PropTypes.func.isRequired,\n  onToggleAssignWorksheetsModal: PropTypes.func.isRequired,\n  onToggleAssignTestSectionModal: PropTypes.func.isRequired,\n  onToggleAssignSimulatedSatModal: PropTypes.func.isRequired\n};\nexport default CalendarRow; // if (!inMonth) {\n//   return (\n//     <td className=\"cal-cell1 cal-cell cal-day-outmonth\" key={dayDate}>\n//       <div className={getCalendarDayClassName(date, inMonth, activeDateKey)}>\n//         <span className=\"day-date\">{dayDate}</span>\n//         <span className=\"cal-date\">{calDate}</span>\n//       </div>\n//     </td>\n//   )\n// }\n// return (\n//   <td key={activeDateKey} className={getCalendarCellClassName(hasEvents, inActiveColumn)} onClick={() => onSetActiveDate(activeDateKey)}>\n//     <div className={getCalendarDayClassName(date, inMonth, activeDateKey)}>\n//       <span className=\"day-date\">{dayDate}</span>\n//       <span className=\"cal-date\">{calDate}</span>\n//       <ul className=\"day-collapsible collapsible\">\n//         <li className={isActiveDate ? 'collapsible-holder active' : 'collapsible-holder'} style={{ transform: 'none' }}>\n//           <div className=\"collapsible-header\" style={{ display: inActiveColumn && isActiveDate ? 'none' : 'block'}}>\n//             <span className=\"fake-close\"><span className=\"icon-close-thin\"></span></span>\n//             <If condition={hasEvents}>\n//               <ul className=\"events-list events-list-short\">\n//                 <If condition={shouldMapSessions}>\n//                   <li className=\"event-frame event-title\">\n//                     <span className=\"event-title-box\">Session {sessions.length}</span>\n//                   </li>\n//                 </If>\n//                 <If condition={shouldMapLessons}>\n//                   <li className=\"event-frame\">\n//                     <span className=\"event event-lesson-box\"> {lessons.length} <span className=\"event-text\">Lesson{lessons.length > 1 && 's'}</span></span>\n//                   </li>\n//                 </If>\n//                 <If condition={shouldMapWorksheets}>\n//                   <li className=\"event-frame\">\n//                     <span className=\"event event-worksheet-box\">{worksheets.length} <span className=\"event-text\">Worksheet{worksheets.length > 1 && 's'}</span></span>\n//                   </li>\n//                 </If>\n//                 <If condition={shouldMapTestSections}>\n//                   <li className=\"event-frame\">\n//                     <span className=\"event event-test-box\">{testSections.length} <span className=\"event-text\">Test Section{testSections.length > 1 && 's'}</span></span>\n//                   </li>\n//                 </If>\n//                 <If condition={shouldMapSimulatedSats}>\n//                   <li className=\"event-frame\">\n//                     <span className=\"event event-sat-box\">{simulatedSat.length} <span className=\"event-text\">Simulated SAT</span></span>\n//                   </li>\n//                 </If>\n//               </ul>\n//             </If>\n//           </div>\n//           <div className=\"collapsible-body\" style={{ opacity: inActiveColumn && isActiveDate ? '1' : '0', visibility: inActiveColumn ? 'visible' : 'hidden' }}>\n//             <If condition={hasEvents}>\n//               <ul className=\"events-list\">\n//                 {shouldMapSessions && sessions.map((session, index) => (\n//                   <li className=\"event-frame\" key={index}>\n//                     <span className=\"event-title-box\">{session.title}</span>\n//                   </li>\n//                 ))}\n//                 {this.mapDateLessons(shouldMapLessons, lessons)}\n//                 {this.mapDateWorksheets(shouldMapWorksheets, worksheets)}\n//                 {this.mapTestSections(shouldMapTestSections, testSections)}\n//                 {this.mapSimulatedSats(shouldMapSimulatedSats, simulatedSat)}\n//               </ul>\n//             </If>\n//             <div className=\"day-footer\">\n//               <ul className=\"links-list\">\n//                 <li>\n//                   <a\n//                     href=\"#\"\n//                     data-target='dropdown_day_240119_add'\n//                     onClick={onToggleAddDropdown}\n//                     className=\"link-add dropdown-trigger waves-effect waves-teal\"\n//                   >\n//                     Add\n//                   </a>\n//                   <ul\n//                     id='dropdown_day_240119_add'\n//                     className='dropdown-content'\n//                     style={{ display: addDropdownOpen ? 'block' : 'none', opacity: addDropdownOpen ? '100' : '0' }}\n//                   >\n//                     <li><a href=\"#\" onClick={(event) => this.toggleAssignSessionModal(event, date)} className=\"modal-trigger\">Session</a></li>\n//                     <li><a href=\"#\" onClick={(event) => this.toggleAssignLessonsModal(event, date)} className=\"modal-trigger\">Lesson</a></li>\n//                     <li><a href=\"#\" onClick={(event) => this.toggleAssignWorksheetsModal(event, date)} className=\"modal-trigger\">Worksheet</a></li>\n//                     <li><a href=\"#\" onClick={(event) => this.toggleAssignTestSectionModal(event, date)} className=\"modal-trigger\">Test Section</a></li>\n//                     <li><a href=\"#\" onClick={(event) => this.toggleAssignSimulatedSatModal(event, date)} className=\"modal-trigger\">Simulated SAT</a></li>\n//                   </ul>\n//                 </li>\n//                 <li>\n//                   <a\n//                     href=\"#\"\n//                     data-target='dropdown_day_240119_delete'\n//                     onClick={onToggleDeleteDropdown}\n//                     className=\"link-delete dropdown-trigger waves-effect waves-teal\"\n//                   >\n//                     Delete\n//                   </a>\n//                   <ul\n//                     id='dropdown_day_240119_delete'\n//                     className='dropdown-content'\n//                     style={{ display: deleteDropdownOpen ? 'block' : 'none', opacity: deleteDropdownOpen ? '100' : '0' }}\n//                   >\n//                     <li><a href=\"#modal_edit_delete_section\" className=\"modal-trigger\">Session</a></li>\n//                     <li><a href=\"#modal_edit_delete_lesson\" className=\"modal-trigger\">Lesson</a></li>\n//                     <li><a href=\"#modal_edit_delete_worksheet\" className=\"modal-trigger\">Worksheet</a></li>\n//                     <li><a href=\"#modal_edit_delete_test_section\" className=\"modal-trigger\">Test Section</a></li>\n//                     <li><a href=\"#!\" className=\"disabled\">Simulated SAT</a></li>\n//                     <li><a href=\"#!\" className=\"disabled\">Target Test</a></li>\n//                     <li><a href=\"#!\">All</a></li>\n//                   </ul>\n//                 </li>\n//               </ul>\n//             </div>\n//           </div>\n//         </li>\n//       </ul>\n//     </div>\n//   </td>\n// )","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Dashboard/components/CalendarRow/index.js"],"names":["React","PropTypes","Draggable","CalendarDate","CalendarRow","event","date","preventDefault","props","onToggleAssignSessionModal","onToggleAddDropdown","onToggleAssignLessonsModal","onToggleAssignWorksheetsModal","onToggleAssignTestSectionModal","onToggleAssignSimulatedSatModal","shouldMapSessions","sessions","map","session","index","userSelect","provided","innerRef","draggableProps","dragHandleProps","title","shouldMapLessons","lessons","lesson","completed","shouldMapWorksheets","worksheets","worksheet","shouldMapTestSections","testSections","testSection","version","shouldMapSimulatedSats","simulatedSat","sat","rows","rowDate","eventFilters","activeDate","addDropdownOpen","deleteDropdownOpen","onSetActiveDate","onToggleDeleteDropdown","activeColumn","dayDate","calDate","activeDateKey","inMonth","hasEvents","length","inActiveColumn","isActiveDate","hasEventFilters","indexOf","mapDateSessions","mapDateLessons","mapDateWorksheets","mapTestSections","mapSimulatedSats","toggleAssignSessionModal","toggleAssignLessonsModal","toggleAssignWorksheetsModal","toggleAssignTestSectionModal","toggleAssignSimulatedSatModal","mapRowDates","Component","propTypes","string","array","isRequired","func","bool"],"mappings":"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":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport CalendarDate from '../CalendarDate';\n\nclass CalendarRow extends React.Component {\n  toggleAssignSessionModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignSessionModal, onToggleAddDropdown } = this.props;\n    onToggleAssignSessionModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignLessonsModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignLessonsModal, onToggleAddDropdown } = this.props;\n    onToggleAssignLessonsModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignWorksheetsModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignWorksheetsModal, onToggleAddDropdown } = this.props;\n    onToggleAssignWorksheetsModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignTestSectionModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignTestSectionModal, onToggleAddDropdown } = this.props;\n    onToggleAssignTestSectionModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignSimulatedSatModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignSimulatedSatModal, onToggleAddDropdown } = this.props;\n    onToggleAssignSimulatedSatModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  mapDateSessions = (shouldMapSessions, sessions) => {\n    if (shouldMapSessions) {\n      return sessions.map((session, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`sessions-${session.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <span className=\"event-title-box\">{session.title}</span>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapDateLessons = (shouldMapLessons, lessons) => {\n    if (shouldMapLessons) {\n      return lessons.map((lesson, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`lessons-${lesson.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <React.Fragment>\n                  {lesson.completed && <span className=\"event-check lesson-check\"><i className=\"icon-check02\"></i></span>}\n                  <span className=\"event event-lesson-box\">{lesson.title}</span>\n                </React.Fragment>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapDateWorksheets = (shouldMapWorksheets, worksheets) => {\n    if (shouldMapWorksheets) {\n      return worksheets.map((worksheet, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`worksheets-${worksheet.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <React.Fragment>\n                  {worksheet.completed && <span className=\"event-check worksheet-check\"><i className=\"icon-check02\"></i></span>}\n                  <span className=\"event event-worksheet-box\">{worksheet.title}</span>\n                </React.Fragment>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapTestSections = (shouldMapTestSections, testSections) => {\n    if (shouldMapTestSections) {\n      return testSections.map((testSection, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`testSections-${testSection.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <span className=\"event event-test-box\">Test Section: {testSection.version}</span>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapSimulatedSats = (shouldMapSimulatedSats, simulatedSat) => {\n    if (shouldMapSimulatedSats) {\n      return simulatedSat.map((sat, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`simulatedSat-${sat.date}-${index}`}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.dragHandleProps}\n                {...provided.dragHandleProps}\n              >\n                <span className=\"event event-sat-box\">{sat.version}</span>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapRowDates = () => this.props.rows && this.props.rows.map(rowDate => {\n    const { eventFilters, activeDate, addDropdownOpen, deleteDropdownOpen, onSetActiveDate, onToggleAddDropdown, onToggleDeleteDropdown, activeColumn } = this.props;\n    const { date, dayDate, calDate, activeDateKey, inMonth, sessions = [], lessons = [], worksheets = [], testSections = [], simulatedSat = [] } = rowDate;\n    const hasEvents = sessions.length > 0 || lessons.length > 0 || worksheets.length > 0 || testSections.length > 0 || simulatedSat.length > 0;\n    const inActiveColumn = activeDateKey && activeDateKey[13] === activeColumn;\n    const isActiveDate = activeDate === activeDateKey;\n    const hasEventFilters = eventFilters.length > 0;\n\n    const shouldMapSessions = (!hasEventFilters && sessions.length) || (sessions.length > 0 && hasEventFilters && eventFilters.indexOf('sessions') !== -1);\n    const shouldMapLessons = (!hasEventFilters && lessons.length) || (lessons.length > 0 && hasEventFilters && eventFilters.indexOf('lessons') !== -1);\n    const shouldMapWorksheets = (!hasEventFilters && worksheets.length) || (worksheets.length > 0 && hasEventFilters && eventFilters.indexOf('worksheets') !== -1);\n    const shouldMapTestSections = (!hasEventFilters && testSections.length) || (testSections.length > 0 && hasEventFilters && eventFilters.indexOf('testSections') !== -1);\n    const shouldMapSimulatedSats = (!hasEventFilters && simulatedSat.length) || (simulatedSat.length > 0 && hasEventFilters && eventFilters.indexOf('simulatedSats') !== -1);\n    return (\n      <CalendarDate\n        sessions={sessions}\n        lessons={lessons}\n        worksheets={worksheets}\n        testSections={testSections}\n        simulatedSat={simulatedSat}\n        key={date}\n        date={date}\n        dayDate={dayDate}\n        calDate={calDate}\n        inMonth={inMonth}\n        hasEvents={hasEvents}\n        isActiveDate={isActiveDate}\n        activeDateKey={activeDateKey}\n        inActiveColumn={inActiveColumn}\n        addDropdownOpen={addDropdownOpen}\n        onSetActiveDate={onSetActiveDate}\n        shouldMapLessons={shouldMapLessons}\n        shouldMapSessions={shouldMapSessions}\n        deleteDropdownOpen={deleteDropdownOpen}\n        onToggleAddDropdown={onToggleAddDropdown}\n        shouldMapWorksheets={shouldMapWorksheets}\n        shouldMapTestSections={shouldMapTestSections}\n        onToggleDeleteDropdown={onToggleDeleteDropdown}\n        shouldMapSimulatedSats={shouldMapSimulatedSats}\n        mapDateSessions={this.mapDateSessions}\n        mapDateLessons={this.mapDateLessons}\n        mapDateWorksheets={this.mapDateWorksheets}\n        mapTestSections={this.mapTestSections}\n        mapSimulatedSats={this.mapSimulatedSats}\n        toggleAssignSessionModal={this.toggleAssignSessionModal}\n        toggleAssignLessonsModal={this.toggleAssignLessonsModal}\n        toggleAssignWorksheetsModal={this.toggleAssignWorksheetsModal}\n        toggleAssignTestSectionModal={this.toggleAssignTestSectionModal}\n        toggleAssignSimulatedSatModal={this.toggleAssignSimulatedSatModal}\n      />\n    );\n  }\n)\n\n  render() {\n    return (\n      <tr className=\"cal-row-fluid\">\n        {this.mapRowDates()}\n      </tr>\n    )\n  }\n}\n\nCalendarRow.propTypes = {\n  activeDate: PropTypes.string,\n  activeColumn: PropTypes.string,\n  rows: PropTypes.array.isRequired,\n  eventFilters: PropTypes.array.isRequired,\n  onSetActiveDate: PropTypes.func.isRequired,\n  addDropdownOpen: PropTypes.bool.isRequired,\n  deleteDropdownOpen: PropTypes.bool.isRequired,\n  onToggleAddDropdown: PropTypes.func.isRequired,\n  onToggleDeleteDropdown: PropTypes.func.isRequired,\n  onToggleAssignSessionModal: PropTypes.func.isRequired,\n  onToggleAssignLessonsModal: PropTypes.func.isRequired,\n  onToggleAssignWorksheetsModal: PropTypes.func.isRequired,\n  onToggleAssignTestSectionModal: PropTypes.func.isRequired,\n  onToggleAssignSimulatedSatModal: PropTypes.func.isRequired,\n}\n\nexport default CalendarRow;\n\n\n    // if (!inMonth) {\n    //   return (\n    //     <td className=\"cal-cell1 cal-cell cal-day-outmonth\" key={dayDate}>\n    //       <div className={getCalendarDayClassName(date, inMonth, activeDateKey)}>\n    //         <span className=\"day-date\">{dayDate}</span>\n    //         <span className=\"cal-date\">{calDate}</span>\n    //       </div>\n    //     </td>\n    //   )\n    // }\n    // return (\n    //   <td key={activeDateKey} className={getCalendarCellClassName(hasEvents, inActiveColumn)} onClick={() => onSetActiveDate(activeDateKey)}>\n    //     <div className={getCalendarDayClassName(date, inMonth, activeDateKey)}>\n    //       <span className=\"day-date\">{dayDate}</span>\n    //       <span className=\"cal-date\">{calDate}</span>\n    //       <ul className=\"day-collapsible collapsible\">\n    //         <li className={isActiveDate ? 'collapsible-holder active' : 'collapsible-holder'} style={{ transform: 'none' }}>\n    //           <div className=\"collapsible-header\" style={{ display: inActiveColumn && isActiveDate ? 'none' : 'block'}}>\n    //             <span className=\"fake-close\"><span className=\"icon-close-thin\"></span></span>\n    //             <If condition={hasEvents}>\n    //               <ul className=\"events-list events-list-short\">\n    //                 <If condition={shouldMapSessions}>\n    //                   <li className=\"event-frame event-title\">\n    //                     <span className=\"event-title-box\">Session {sessions.length}</span>\n    //                   </li>\n    //                 </If>\n    //                 <If condition={shouldMapLessons}>\n    //                   <li className=\"event-frame\">\n    //                     <span className=\"event event-lesson-box\"> {lessons.length} <span className=\"event-text\">Lesson{lessons.length > 1 && 's'}</span></span>\n    //                   </li>\n    //                 </If>\n    //                 <If condition={shouldMapWorksheets}>\n    //                   <li className=\"event-frame\">\n    //                     <span className=\"event event-worksheet-box\">{worksheets.length} <span className=\"event-text\">Worksheet{worksheets.length > 1 && 's'}</span></span>\n    //                   </li>\n    //                 </If>\n    //                 <If condition={shouldMapTestSections}>\n    //                   <li className=\"event-frame\">\n    //                     <span className=\"event event-test-box\">{testSections.length} <span className=\"event-text\">Test Section{testSections.length > 1 && 's'}</span></span>\n    //                   </li>\n    //                 </If>\n    //                 <If condition={shouldMapSimulatedSats}>\n    //                   <li className=\"event-frame\">\n    //                     <span className=\"event event-sat-box\">{simulatedSat.length} <span className=\"event-text\">Simulated SAT</span></span>\n    //                   </li>\n    //                 </If>\n    //               </ul>\n    //             </If>\n    //           </div>\n    //           <div className=\"collapsible-body\" style={{ opacity: inActiveColumn && isActiveDate ? '1' : '0', visibility: inActiveColumn ? 'visible' : 'hidden' }}>\n    //             <If condition={hasEvents}>\n    //               <ul className=\"events-list\">\n    //                 {shouldMapSessions && sessions.map((session, index) => (\n    //                   <li className=\"event-frame\" key={index}>\n    //                     <span className=\"event-title-box\">{session.title}</span>\n    //                   </li>\n    //                 ))}\n    //                 {this.mapDateLessons(shouldMapLessons, lessons)}\n    //                 {this.mapDateWorksheets(shouldMapWorksheets, worksheets)}\n    //                 {this.mapTestSections(shouldMapTestSections, testSections)}\n    //                 {this.mapSimulatedSats(shouldMapSimulatedSats, simulatedSat)}\n    //               </ul>\n    //             </If>\n    //             <div className=\"day-footer\">\n    //               <ul className=\"links-list\">\n    //                 <li>\n    //                   <a\n    //                     href=\"#\"\n    //                     data-target='dropdown_day_240119_add'\n    //                     onClick={onToggleAddDropdown}\n    //                     className=\"link-add dropdown-trigger waves-effect waves-teal\"\n    //                   >\n    //                     Add\n    //                   </a>\n    //                   <ul\n    //                     id='dropdown_day_240119_add'\n    //                     className='dropdown-content'\n    //                     style={{ display: addDropdownOpen ? 'block' : 'none', opacity: addDropdownOpen ? '100' : '0' }}\n    //                   >\n    //                     <li><a href=\"#\" onClick={(event) => this.toggleAssignSessionModal(event, date)} className=\"modal-trigger\">Session</a></li>\n    //                     <li><a href=\"#\" onClick={(event) => this.toggleAssignLessonsModal(event, date)} className=\"modal-trigger\">Lesson</a></li>\n    //                     <li><a href=\"#\" onClick={(event) => this.toggleAssignWorksheetsModal(event, date)} className=\"modal-trigger\">Worksheet</a></li>\n    //                     <li><a href=\"#\" onClick={(event) => this.toggleAssignTestSectionModal(event, date)} className=\"modal-trigger\">Test Section</a></li>\n    //                     <li><a href=\"#\" onClick={(event) => this.toggleAssignSimulatedSatModal(event, date)} className=\"modal-trigger\">Simulated SAT</a></li>\n    //                   </ul>\n    //                 </li>\n    //                 <li>\n    //                   <a\n    //                     href=\"#\"\n    //                     data-target='dropdown_day_240119_delete'\n    //                     onClick={onToggleDeleteDropdown}\n    //                     className=\"link-delete dropdown-trigger waves-effect waves-teal\"\n    //                   >\n    //                     Delete\n    //                   </a>\n    //                   <ul\n    //                     id='dropdown_day_240119_delete'\n    //                     className='dropdown-content'\n    //                     style={{ display: deleteDropdownOpen ? 'block' : 'none', opacity: deleteDropdownOpen ? '100' : '0' }}\n    //                   >\n    //                     <li><a href=\"#modal_edit_delete_section\" className=\"modal-trigger\">Session</a></li>\n    //                     <li><a href=\"#modal_edit_delete_lesson\" className=\"modal-trigger\">Lesson</a></li>\n    //                     <li><a href=\"#modal_edit_delete_worksheet\" className=\"modal-trigger\">Worksheet</a></li>\n    //                     <li><a href=\"#modal_edit_delete_test_section\" className=\"modal-trigger\">Test Section</a></li>\n    //                     <li><a href=\"#!\" className=\"disabled\">Simulated SAT</a></li>\n    //                     <li><a href=\"#!\" className=\"disabled\">Target Test</a></li>\n    //                     <li><a href=\"#!\">All</a></li>\n    //                   </ul>\n    //                 </li>\n    //               </ul>\n    //             </div>\n    //           </div>\n    //         </li>\n    //       </ul>\n    //     </div>\n    //   </td>\n    // )"]},"metadata":{},"sourceType":"module"}