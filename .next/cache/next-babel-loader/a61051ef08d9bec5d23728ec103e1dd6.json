{"ast":null,"code":"import _objectSpread2 from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport FilterSection from '../components/Dashboard/components/FilterSection';\nimport CalendarHeader from '../components/Dashboard/components/CalendarHeader';\nimport CalendarRow from '../components/Dashboard/components/CalendarRow';\nimport AssignSessionModal from '../components/Dashboard/components/Modals/AssignSessionModal';\nimport AssignLessonModal from '../components/Dashboard/components/Modals/AssignLessonModal';\nimport AssignWorksheetModal from '../components/Dashboard/components/Modals/AssignWorksheetModal';\nimport AssignTestSectionModal from '../components/Dashboard/components/Modals/AssignTestSectionModal';\nimport AssignSimulatedSatModal from '../components/Dashboard/components/Modals/AssignSimulatedSATModal';\nimport AssignTargetTestModal from '../components/Dashboard/components/Modals/AssignTargetTestModal';\nimport { currentYear, getFirstDay, getDaysInActiveMonth, getDaysInPreviousMonth, getDayDate, getNextMonthAsCurrentMonth } from '../components/Dashboard/utils/dateAndCalendarUtils';\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Calendar, _Component);\n\n  function Calendar(props) {\n    var _this;\n\n    _classCallCheck(this, Calendar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calendar).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetActiveMonth\", function (activeMonthIndex) {\n      // daysInPreviousMonth is used to handle cases where the calendar for the month starts with dates from the preceding month\n      // firstDay indicates the day the first day of the month falls on in a zero-based index manner, meaning Sunday is 0, Monday is 1, etc\n      var daysInPreviousMonth = getDaysInPreviousMonth(activeMonthIndex);\n      var daysInActiveMonth = getDaysInActiveMonth(activeMonthIndex);\n      var firstDay = getFirstDay(activeMonthIndex);\n      var rows = []; // We increment calDate and change inMonth in the case where dates from the next month appear in row 1 or row 6\n      // Since activeMonthIndex is zero-based, currentMonth adds 1 so the cells are accurate as actual calendar dates\n      // getNextMonthAsCurrentMonth is used to derive the current month to ensure it matches the format of incoming dates - 01/15/19 vs 1/15/19, otherwise new events wouldn't find the date to be assigned to\n\n      var inMonth = true;\n      var calDate = 1;\n      var currentMonth = getNextMonthAsCurrentMonth(activeMonthIndex);\n\n      if (firstDay !== 0) {\n        currentMonth = currentMonth > 9 ? currentMonth -= 1 : \"0\".concat(currentMonth - 1);\n        calDate = daysInPreviousMonth - firstDay + 1;\n        inMonth = false;\n      } // First for loop handles the 6 calendar rows, second for loop handles the 7 days of the week\n\n\n      for (var i = 0; i < 6; i++) {\n        var rowArr = [];\n\n        for (var j = 0; j < 7; j++) {\n          var date = \"\".concat(currentMonth, \"/\").concat(calDate > 9 ? calDate : \"0\".concat(calDate), \"/\").concat(currentYear);\n          var dayDate = getDayDate(date);\n          var activeDateKey = \"row-\".concat(i + 1, \"-column-\").concat(j + 1); // This if statement handles the easiest calendar month scenario, where the 1st of the month falls on a Sunday\n\n          if (firstDay === 0) {\n            var dateCell = {\n              date: date,\n              dayDate: dayDate,\n              calDate: calDate,\n              activeDateKey: activeDateKey,\n              inMonth: inMonth,\n              sessions: [],\n              lessons: [],\n              worksheets: [],\n              testSections: [],\n              simulatedSat: []\n            }; // This if statement handles the case where the date spills over into the next month\n\n            if (calDate === daysInActiveMonth) {\n              calDate = 1;\n              currentMonth = activeMonthIndex > 9 ? activeMonthIndex + 2 : \"0\".concat(activeMonthIndex + 2);\n              inMonth = false;\n            } else {\n              calDate += 1;\n            }\n\n            rowArr.push(dateCell);\n          } // This else statement handles the more likely scenario, where the first row contains several days from the preceding month\n          else {\n              var _dateCell = {\n                date: date,\n                dayDate: dayDate,\n                calDate: calDate,\n                activeDateKey: activeDateKey,\n                inMonth: inMonth,\n                sessions: [],\n                lessons: [],\n                worksheets: [],\n                testSections: [],\n                simulatedSat: []\n              }; // This if statement handles the case where the date spills over into the next month\n\n              if (inMonth === false && calDate === daysInPreviousMonth) {\n                calDate = 1;\n                currentMonth = getNextMonthAsCurrentMonth(activeMonthIndex);\n                inMonth = true;\n              } else if (inMonth === true && calDate === daysInActiveMonth) {\n                currentMonth = activeMonthIndex > 9 ? activeMonthIndex + 2 : \"0\".concat(activeMonthIndex + 2);\n                calDate = 1;\n                inMonth = false;\n              } else {\n                calDate += 1;\n              }\n\n              rowArr.push(_dateCell);\n            }\n        }\n\n        ;\n        rows.push.apply(rows, rowArr);\n      }\n\n      ;\n\n      _this.setState({\n        activeMonth: activeMonthIndex,\n        rows: rows\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetActiveDate\", function (incomingDate) {\n      _this.setState({\n        activeDate: incomingDate,\n        activeColumn: incomingDate[13]\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAssignSession\", function (session) {\n      var rows = _this.state.rows;\n      var updatedDate = rows.filter(function (row) {\n        return row.date === session.date;\n      })[0];\n      var updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.sessions.push(session);\n      var updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n\n      _this.setState({\n        rows: updatedRows\n      });\n\n      _this.onToggleAssignSessionModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAssignLessons\", function (lessons, date) {\n      var _updatedDate$lessons;\n\n      var rows = _this.state.rows;\n      var updatedDate = rows.filter(function (row) {\n        return row.date === date;\n      })[0];\n      var updatedDateIndex = rows.indexOf(updatedDate);\n\n      (_updatedDate$lessons = updatedDate.lessons).push.apply(_updatedDate$lessons, _toConsumableArray(lessons));\n\n      var updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n\n      _this.setState({\n        rows: updatedRows\n      });\n\n      _this.onToggleAssignLessonsModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAssignWorksheets\", function (worksheets, date) {\n      var _updatedDate$workshee;\n\n      var rows = _this.state.rows;\n      var updatedDate = rows.filter(function (row) {\n        return row.date === date;\n      })[0];\n      var updatedDateIndex = rows.indexOf(updatedDate);\n\n      (_updatedDate$workshee = updatedDate.worksheets).push.apply(_updatedDate$workshee, _toConsumableArray(worksheets));\n\n      var updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n\n      _this.setState({\n        rows: updatedRows\n      });\n\n      _this.onToggleAssignWorksheetsModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAssignTestSection\", function (testSection) {\n      var rows = _this.state.rows;\n      var updatedDate = rows.filter(function (row) {\n        return row.date === testSection.assignDate;\n      })[0];\n      var updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.testSections.push(testSection);\n      var updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n\n      _this.setState({\n        rows: updatedRows\n      });\n\n      _this.onToggleAssignTestSectionModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAssignSimulatedSat\", function (simulatedSat) {\n      var rows = _this.state.rows;\n      var updatedDate = rows.filter(function (row) {\n        return row.date === simulatedSat.assignDate;\n      })[0];\n      var updatedDateIndex = rows.indexOf(updatedDate);\n      updatedDate.simulatedSat.push(simulatedSat);\n      var updatedRows = update(rows, {\n        $splice: [[updatedDateIndex, 1, updatedDate]]\n      });\n\n      _this.setState({\n        rows: updatedRows\n      });\n\n      _this.onToggleAssignSimulatedSatModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAssignTargetTest\", function (targetTestDate) {\n      // eslint-disable-next-line no-throw-literal\n      throw \"pending decision of what test date assign ui looks like\".concat(targetTestDate.toString()); // console.warn(, targetTestDate);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleAssignSessionModal\", function () {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var modalDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      _this.setState(function (_ref) {\n        var assignSessionModalOpen = _ref.assignSessionModalOpen;\n        return {\n          assignSessionModalOpen: !assignSessionModalOpen,\n          modalDate: modalDate,\n          assignDropdownIsOpen: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleAssignLessonsModal\", function () {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var modalDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      _this.setState(function (_ref2) {\n        var assignLessonsModalOpen = _ref2.assignLessonsModalOpen;\n        return {\n          assignLessonsModalOpen: !assignLessonsModalOpen,\n          modalDate: modalDate,\n          assignDropdownIsOpen: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleAssignWorksheetsModal\", function () {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var modalDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      _this.setState(function (_ref3) {\n        var assignWorksheetsModalOpen = _ref3.assignWorksheetsModalOpen;\n        return {\n          assignWorksheetsModalOpen: !assignWorksheetsModalOpen,\n          modalDate: modalDate,\n          assignDropdownIsOpen: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleAssignTestSectionModal\", function () {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var modalDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      _this.setState(function (_ref4) {\n        var assignTestSectionModalOpen = _ref4.assignTestSectionModalOpen;\n        return {\n          assignTestSectionModalOpen: !assignTestSectionModalOpen,\n          modalDate: modalDate,\n          assignDropdownIsOpen: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleAssignSimulatedSatModal\", function () {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var modalDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      _this.setState(function (_ref5) {\n        var assignSimulatedSatModalOpen = _ref5.assignSimulatedSatModalOpen;\n        return {\n          assignSimulatedSatModalOpen: !assignSimulatedSatModalOpen,\n          modalDate: modalDate,\n          assignDropdownIsOpen: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleAssignTargetTestModal\", function () {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      _this.setState(function (_ref6) {\n        var assignTargetTestDateModalOpen = _ref6.assignTargetTestDateModalOpen;\n        return {\n          assignTargetTestDateModalOpen: !assignTargetTestDateModalOpen,\n          assignDropdownIsOpen: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleAddDropdown\", function () {\n      return _this.setState(function (_ref7) {\n        var addDropdownOpen = _ref7.addDropdownOpen;\n        return {\n          addDropdownOpen: !addDropdownOpen,\n          deleteDropdownOpen: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleDeleteDropdown\", function () {\n      return _this.setState(function (_ref8) {\n        var deleteDropdownOpen = _ref8.deleteDropdownOpen;\n        return {\n          deleteDropdownOpen: !deleteDropdownOpen,\n          addDropdownOpen: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleAssignDropdown\", function () {\n      return _this.setState(function (_ref9) {\n        var assignDropdownIsOpen = _ref9.assignDropdownIsOpen;\n        return {\n          assignDropdownIsOpen: !assignDropdownIsOpen\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleHandleFilteredItemsDropdown\", function () {\n      return _this.setState(function (_ref10) {\n        var onToggleHandleFilteredItemsDropdown = _ref10.onToggleHandleFilteredItemsDropdown;\n        return {\n          onToggleHandleFilteredItemsDropdown: !onToggleHandleFilteredItemsDropdown\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClearFilters\", function () {\n      return _this.setState({\n        filters: [],\n        eventFilters: []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleDetailsChange\", function (name, event) {\n      return _this.setState(_defineProperty({}, name, event.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragEnd\", function (result) {\n      var rows = _this.state.rows;\n      var source = result.source,\n          destination = result.destination,\n          draggableId = result.draggableId; // The following draggable vars are pulled from the dragged item to identify the event type (lesson, worksheet, etc), date, and index in that date's array of that type of event\n\n      var draggableKeys = draggableId.split('-');\n      var draggableType = draggableKeys[0];\n      var draggableIndex = draggableKeys[2]; // If the event isn't switching dates, we return out of the function early and do nothing\n\n      if (!destination || source.droppableId === destination.droppableId) {\n        return;\n      } // The follwing sourceDate and destinationDate vars are used to find the dates being modified and their index in the month of calendar dates\n\n\n      var sourceDateKey = source.droppableId.split('-')[1];\n      var destinationDateKey = destination.droppableId.split('-')[1];\n      var sourceDate = rows.filter(function (row) {\n        return row.date === sourceDateKey;\n      })[0];\n      var destinationDate = rows.filter(function (row) {\n        return row.date === destinationDateKey;\n      })[0];\n      var sourceDateIndex = rows.indexOf(sourceDate);\n      var destinationDateIndex = rows.indexOf(destinationDate); // Here we target the event being moved, alter its date to that of the destintion, splice it from the source and push it to the destination\n      // Finally, we perform two splice operations to replace the old source and destination dates with their updated equivalents\n\n      var movedEvent = sourceDate[draggableType][draggableIndex];\n      movedEvent.date = destinationDate.date;\n      sourceDate[draggableType].splice(draggableIndex, 1);\n      destinationDate[draggableType].push(movedEvent);\n      var updatedRows = update(rows, {\n        $splice: [[sourceDateIndex, 1, sourceDate], [destinationDateIndex, 1, destinationDate]]\n      });\n\n      _this.setState({\n        rows: updatedRows\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFilterClick\", function (filter) {\n      var eventFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // TODO: Only the following filters are active: sessions, lessons, worksheets, test sections, simulated sats, target tests\n      // The other filters dont seem to have corresponding data in this page\n      var _this$state = _this.state,\n          allFilters = _this$state.filters,\n          eventFilters = _this$state.eventFilters;\n      var filters;\n      var filterName;\n\n      if (eventFilter) {\n        filters = eventFilters;\n        filterName = 'eventFilters';\n      } else {\n        filters = allFilters;\n        filterName = 'filters';\n      }\n\n      var updatedFilters;\n\n      if (filters.indexOf(filter) === -1) {\n        updatedFilters = update(filters, {\n          $push: [filter]\n        });\n      } else {\n        var filterIndex = filters.indexOf(filter);\n        updatedFilters = update(filters, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      _this.setState(_defineProperty({}, filterName, updatedFilters));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapRows\", function () {\n      var _this$state2 = _this.state,\n          rows = _this$state2.rows,\n          filters = _this$state2.filters,\n          eventFilters = _this$state2.eventFilters,\n          activeDate = _this$state2.activeDate,\n          activeColumn = _this$state2.activeColumn,\n          addDropdownOpen = _this$state2.addDropdownOpen,\n          deleteDropdownOpen = _this$state2.deleteDropdownOpen;\n      var startIndex = -7;\n      var endIndex = 0;\n      var rowArray = [];\n\n      for (var i = 0; i < 6; i++) {\n        startIndex += 7;\n        endIndex += 7;\n        rowArray.push(__jsx(CalendarRow, {\n          key: i,\n          rows: rows.slice(startIndex, endIndex),\n          filters: filters,\n          eventFilters: eventFilters,\n          activeDate: activeDate,\n          activeColumn: activeColumn,\n          addDropdownOpen: addDropdownOpen,\n          deleteDropdownOpen: deleteDropdownOpen,\n          onSetActiveDate: _this.onSetActiveDate,\n          onToggleAddDropdown: _this.onToggleAddDropdown,\n          onToggleDeleteDropdown: _this.onToggleDeleteDropdown,\n          onToggleAssignLessonsModal: _this.onToggleAssignLessonsModal,\n          onToggleAssignSessionModal: _this.onToggleAssignSessionModal,\n          onToggleAssignWorksheetsModal: _this.onToggleAssignWorksheetsModal,\n          onToggleAssignTestSectionModal: _this.onToggleAssignTestSectionModal,\n          onToggleAssignSimulatedSatModal: _this.onToggleAssignSimulatedSatModal\n        }));\n      }\n\n      return rowArray;\n    });\n\n    _this.state = {\n      activeMonth: '',\n      filters: [],\n      eventFilters: [],\n      rows: [],\n      activeDate: null,\n      activeColumn: null,\n      addDropdownOpen: false,\n      deleteDropdownOpen: false,\n      assignDropdownIsOpen: false,\n      onToggleHandleFilteredItemsDropdown: false,\n      assignSessionModalOpen: false,\n      assignLessonsModalOpen: false,\n      assignWorksheetsModalOpen: false,\n      assignTestSectionModalOpen: false,\n      assignSimulatedSatModalOpen: false,\n      assignTargetTestDateModalOpen: false,\n      modalDate: null,\n      accountActivated: false,\n      activationDropdownOpen: false,\n      licenseCode: ''\n    };\n    return _this;\n  } // This is called onMount in CalendarHeader component to set the current month calendar rows, and every time the month changes afterward\n  // IMPORTANT: activeMonthIndex is zero-based, meaning January is 0, February is 1, etc.\n\n\n  _createClass(Calendar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          assignSessionModalOpen = _this$state3.assignSessionModalOpen,\n          assignLessonsModalOpen = _this$state3.assignLessonsModalOpen,\n          assignWorksheetsModalOpen = _this$state3.assignWorksheetsModalOpen,\n          activeMonth = _this$state3.activeMonth,\n          assignTestSectionModalOpen = _this$state3.assignTestSectionModalOpen,\n          assignSimulatedSatModalOpen = _this$state3.assignSimulatedSatModalOpen,\n          assignTargetTestDateModalOpen = _this$state3.assignTargetTestDateModalOpen,\n          modalDate = _this$state3.modalDate,\n          assignDropdownIsOpen = _this$state3.assignDropdownIsOpen,\n          onToggleHandleFilteredItemsDropdown = _this$state3.onToggleHandleFilteredItemsDropdown,\n          filters = _this$state3.filters,\n          eventFilters = _this$state3.eventFilters,\n          accountActivated = _this$state3.accountActivated,\n          activationDropdownOpen = _this$state3.activationDropdownOpen,\n          licenseCode = _this$state3.licenseCode;\n      return __jsx(React.Fragment, null, __jsx(AssignSessionModal, {\n        modalDate: modalDate,\n        open: assignSessionModalOpen,\n        onClose: this.onToggleAssignSessionModal,\n        onAssignSession: this.onAssignSession\n      }), __jsx(AssignLessonModal, {\n        modalDate: modalDate,\n        open: assignLessonsModalOpen,\n        onClose: this.onToggleAssignLessonsModal,\n        onAssignLessons: this.onAssignLessons\n      }), __jsx(AssignWorksheetModal, {\n        modalDate: modalDate,\n        open: assignWorksheetsModalOpen,\n        onClose: this.onToggleAssignWorksheetsModal,\n        onAssignWorksheets: this.onAssignWorksheets\n      }), __jsx(AssignTestSectionModal, {\n        modalDate: modalDate,\n        open: assignTestSectionModalOpen,\n        onClose: this.onToggleAssignTestSectionModal,\n        onAssignTestSection: this.onAssignTestSection\n      }), __jsx(AssignSimulatedSatModal, {\n        modalDate: modalDate,\n        open: assignSimulatedSatModalOpen,\n        onClose: this.onToggleAssignSimulatedSatModal,\n        onAssignSimulatedSat: this.onAssignSimulatedSat\n      }), __jsx(AssignTargetTestModal, {\n        open: assignTargetTestDateModalOpen,\n        onClose: this.onToggleAssignTargetTestModal,\n        onAssignTargetTest: this.onAssignTargetTest\n      }), __jsx(\"main\", {\n        id: \"main\",\n        role: \"main\"\n      }, __jsx(\"div\", {\n        className: \"main-holder grey lighten-3\"\n      }, __jsx(StickyContainer, null, __jsx(Sticky, null, function (_ref11) {\n        var style = _ref11.style;\n        return __jsx(\"div\", {\n          className: \"title-row card-panel\",\n          style: _objectSpread2({}, style, {\n            zIndex: 1999\n          })\n        }, __jsx(\"div\", {\n          className: \"mobile-header\"\n        }, __jsx(\"a\", {\n          href: \"#\",\n          \"data-target\": \"slide-out\",\n          className: \"sidenav-trigger\"\n        }, __jsx(\"i\", {\n          className: \"material-icons\"\n        }, \"menu\"))), __jsx(\"nav\", {\n          className: \"breadcrumb-holder\"\n        }, __jsx(\"div\", {\n          className: \"nav-wrapper \"\n        }, __jsx(\"a\", {\n          href: \"#\",\n          className: \"breadcrumb\"\n        }, \"< Classes\"))), __jsx(\"h2\", {\n          className: \"h1 white-text\"\n        }, __jsx(\"span\", {\n          className: \"heading-holder\"\n        }, __jsx(\"i\", {\n          className: \"icon-members\"\n        }), __jsx(\"span\", {\n          className: \"heading-block\"\n        }, \"Some Class in June\"))), __jsx(\"nav\", {\n          className: \"nav-additional\"\n        }, __jsx(\"ul\", {\n          className: \"menu-additional\"\n        }, __jsx(\"li\", null, __jsx(\"a\", {\n          href: \"#\"\n        }, \"Summary\")), __jsx(\"li\", null, __jsx(\"a\", {\n          className: \"active\",\n          href: \"#\"\n        }, \"Calendar\")), __jsx(\"li\", null, __jsx(\"a\", {\n          href: \"#\"\n        }, \"Lessons\")), __jsx(\"li\", null, __jsx(\"a\", {\n          href: \"#\"\n        }, \"Tests\")), __jsx(\"li\", null, __jsx(\"a\", {\n          href: \"#\"\n        }, \"Account\")))), __jsx(\"div\", {\n          className: \"activate-block\"\n        }, accountActivated ? __jsx(\"a\", {\n          href: \"#\",\n          className: \"waves-effect waves-teal btn btn-white btn-bordered btn-account_activated\"\n        }, __jsx(\"b\", {\n          className: \"btn-text visible-lg\"\n        }, \"Account Activated\"), \" \", __jsx(\"i\", {\n          className: \"icon-unlock\"\n        })) : __jsx(\"a\", {\n          href: \"#\",\n          onClick: _this2.onToggleActivationDropdown,\n          className: \"waves-effect btn btn-orange btn-account_inactive dropdown-trigger\",\n          \"data-target\": \"dropdown_activate\"\n        }, __jsx(\"b\", {\n          className: \"btn-text visible-lg\"\n        }, \"Activate Account\"), \" \", __jsx(\"i\", {\n          className: \"icon-key\"\n        })), __jsx(\"div\", {\n          id: \"dropdown_activate\",\n          className: \"dropdown-content\",\n          style: activationDropdownOpen ? {\n            display: 'block',\n            opacity: '1'\n          } : {}\n        }, __jsx(\"div\", {\n          className: \"card-panel\"\n        }, __jsx(\"div\", {\n          className: \"title-block\"\n        }, __jsx(\"div\", {\n          className: \"h3\"\n        }, \"Ready to begin your course?\"), __jsx(\"div\", {\n          className: \"subtitle\"\n        }, \"Please enter a valid license code below.\")), __jsx(\"div\", {\n          className: \"input-field\"\n        }, __jsx(\"input\", {\n          type: \"text\",\n          value: licenseCode,\n          id: \"license-code\",\n          onChange: function onChange(event) {\n            return _this2.onHandleDetailsChange('licenseCode', event);\n          }\n        }), __jsx(\"label\", {\n          className: \"label\",\n          htmlFor: \"license_code\"\n        }, \"License Code\")), __jsx(\"div\", {\n          className: \"btn-holder center-align\"\n        }, __jsx(\"button\", {\n          className: \"btn btn-blue\",\n          type: \"submit\"\n        }, \"Activate\")), __jsx(\"div\", {\n          className: \"text-block center-align\"\n        }, __jsx(\"p\", null, \"If you need license codes, you can get them here: \", __jsx(\"a\", {\n          href: \"#\",\n          className: \"waves-effect waves-light btn-small btn-blue\"\n        }, \"Purchase Licenses\"))), __jsx(\"div\", {\n          className: \"text-block\"\n        }, __jsx(\"p\", null, \"*Note: \"), __jsx(\"p\", null, \"We o\\uFB00er discounted account licenses for students enrolled in courses with 5 or more students in a class or group format (as opposed to individual instruction). These licenses provide the features necessary to conduct a customized course for the class as a whole, rather than for individual students.\"))))));\n      }), __jsx(FilterSection, {\n        filters: filters,\n        eventFilters: eventFilters,\n        onClearFilters: this.onClearFilters,\n        handleFilterClick: this.handleFilterClick\n      }), __jsx(\"div\", {\n        className: \"calendar-section view-month\"\n      }, __jsx(\"div\", {\n        className: \"calendar-slider\"\n      }, __jsx(CalendarHeader, {\n        activeMonth: Number(activeMonth),\n        onSetActiveMonth: this.onSetActiveMonth\n      }), __jsx(\"div\", {\n        id: \"calendar\",\n        className: \"main-slick-calendar cal-context\",\n        style: {\n          width: '100%'\n        }\n      }, __jsx(\"div\", {\n        className: \"slide\"\n      }, __jsx(\"table\", {\n        className: \"calendar-table cal-month-box\"\n      }, __jsx(\"thead\", null, __jsx(\"tr\", {\n        className: \"calendar-head-row\"\n      }, __jsx(\"th\", null, \"Su\"), __jsx(\"th\", null, \"M\"), __jsx(\"th\", null, \"Tu\"), __jsx(\"th\", null, \"W\"), __jsx(\"th\", null, \"Th\"), __jsx(\"th\", null, \"F\"), __jsx(\"th\", null, \"Sa\"))), __jsx(\"tbody\", null, __jsx(DragDropContext, {\n        onDragEnd: this.onDragEnd\n      }, this.mapRows()))))), __jsx(\"div\", {\n        className: \"add-btn-block\"\n      }, __jsx(\"a\", {\n        href: \"#\",\n        \"data-target\": \"dropdown_assign\",\n        onClick: this.onToggleAssignDropdown,\n        className: \"dropdown-trigger waves-effect waves-teal btn add-btn\"\n      }, \"Assign...\"), __jsx(\"ul\", {\n        id: \"dropdown_assign\",\n        className: \"dropdown-content\",\n        style: {\n          display: assignDropdownIsOpen ? 'block' : 'none',\n          opacity: assignDropdownIsOpen ? '100' : '0'\n        }\n      }, __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onToggleAssignSessionModal,\n        className: \"modal-trigger\"\n      }, \"Session\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onToggleAssignLessonsModal,\n        className: \"modal-trigger\"\n      }, \"Lesson\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onToggleAssignWorksheetsModal,\n        className: \"modal-trigger\"\n      }, \"Worksheet\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onToggleAssignTestSectionModal,\n        className: \"modal-trigger\"\n      }, \"Test Section\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onToggleAssignSimulatedSatModal,\n        className: \"modal-trigger\"\n      }, \"Simulated SAT\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onToggleAssignTargetTestModal,\n        className: \"modal-trigger\"\n      }, \"Target Test\")), __jsx(\"li\", {\n        className: \"divider\",\n        tabIndex: \"-1\"\n      }), __jsx(\"li\", {\n        className: \"dropdown-footer\"\n      }, __jsx(\"a\", {\n        href: \"#\",\n        className: \"modal-trigger\"\n      }, \"Apply Course Template\")))), __jsx(\"div\", {\n        className: \"add-btn-block btn-block-right\"\n      }, __jsx(\"a\", {\n        href: \"#\",\n        \"data-target\": \"dropdown_other\",\n        onClick: this.onToggleHandleFilteredItemsDropdown,\n        className: \"dropdown-trigger waves-effect waves-teal btn add-btn-circle\"\n      }, __jsx(\"i\", {\n        className: \"icon-dots\"\n      })), __jsx(\"ul\", {\n        id: \"dropdown_other\",\n        className: \"dropdown-content\",\n        style: {\n          display: onToggleHandleFilteredItemsDropdown ? 'block' : 'none',\n          opacity: onToggleHandleFilteredItemsDropdown ? '100' : '0'\n        }\n      }, __jsx(\"li\", {\n        className: \"dropdown-header\"\n      }, __jsx(\"b\", null, \"With Filtered Items... \"), __jsx(\"b\", {\n        className: \"small\"\n      }, \"(items currently visible on calendar)\")), __jsx(\"li\", {\n        className: \"divider\"\n      }), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        className: \"modal-trigger\"\n      }, \"Save Course as Template\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\"\n      }, \"Reset All\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\"\n      }, \"Delete All\"))))))))));\n    }\n  }]);\n\n  return Calendar;\n}(Component);\n\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}