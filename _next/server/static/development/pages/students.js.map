{"version":3,"file":"static/development/pages/students.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/ClickOffComponentWrapper/index.js","webpack:///./components/Dashboard/components/CalendarDate/index.js","webpack:///./components/Dashboard/components/CalendarHeader/components/CalendarArrow/index.js","webpack:///./components/Dashboard/components/CalendarHeader/index.js","webpack:///./components/Dashboard/components/CalendarRow/index.js","webpack:///./components/Dashboard/components/FilterSection/index.js","webpack:///./components/Dashboard/components/Modals/AssignLessonModal/components/FilterSection/index.js","webpack:///./components/Dashboard/components/Modals/AssignLessonModal/components/LessonCard/index.js","webpack:///./components/Dashboard/components/Modals/AssignLessonModal/index.js","webpack:///./components/Dashboard/components/Modals/AssignSessionModal/index.js","webpack:///./components/Dashboard/components/Modals/AssignSimulatedSATModal/index.js","webpack:///./components/Dashboard/components/Modals/AssignTargetTestModal/index.js","webpack:///./components/Dashboard/components/Modals/AssignTestSectionModal/index.js","webpack:///./components/Dashboard/components/Modals/AssignWorksheetModal/components/FilterSection/index.js","webpack:///./components/Dashboard/components/Modals/AssignWorksheetModal/components/WorksheetCard/index.js","webpack:///./components/Dashboard/components/Modals/AssignWorksheetModal/index.js","webpack:///./components/Dashboard/utils/dateAndCalendarUtils.js","webpack:///./components/Dashboard/utils/sampleLessons.js","webpack:///./components/Dashboard/utils/sampleWorksheets.js","webpack:///./components/Dashboard/utils/sortOptions.js","webpack:///./components/Dashboard/utils/worksheetModalMaps.js","webpack:///./components/FormComponents/Dropdown/index.js","webpack:///./components/FormComponents/Dropdown/styles/ControlComponent.js","webpack:///./components/FormComponents/Dropdown/styles/dropdownStyles.js","webpack:///./components/FormComponents/Dropdown/styles/index.js","webpack:///./components/Instructor/components/InstructorCard/index.js","webpack:///./components/Instructor/components/InstructorModal/components/InstructorToggleCard/index.js","webpack:///./components/Instructor/components/InstructorModal/index.js","webpack:///./components/Location/components/LocationCard/index.js","webpack:///./components/Location/components/LocationModal/components/LocationToggleCard/index.js","webpack:///./components/Location/components/LocationModal/index.js","webpack:///./components/Location/index/actions.js","webpack:///./components/Location/index/constants.js","webpack:///./components/Location/index/selectors.js","webpack:///./components/Modal/index.js","webpack:///./components/Portal/index.js","webpack:///./components/Student/AccountPage/components/AccountSettings/index.js","webpack:///./components/Student/AccountPage/components/AccountStatus/index.js","webpack:///./components/Student/AccountPage/components/AccountType/index.js","webpack:///./components/Student/AccountPage/components/Actions/index.js","webpack:///./components/Student/AccountPage/components/Class/components/ClassCard/index.js","webpack:///./components/Student/AccountPage/components/Class/index.js","webpack:///./components/Student/AccountPage/components/ContactInformation/index.js","webpack:///./components/Student/AccountPage/components/CourseContext/index.js","webpack:///./components/Student/AccountPage/components/DeleteAccount/index.js","webpack:///./components/Student/AccountPage/components/EmailAddress/index.js","webpack:///./components/Student/AccountPage/components/Instructor/index.js","webpack:///./components/Student/AccountPage/components/Location/index.js","webpack:///./components/Student/AccountPage/components/StudentInformation/index.js","webpack:///./components/Student/AccountPage/index.js","webpack:///./components/Student/Calendar/index.js","webpack:///./components/Student/ClassModal/components/ClassToggleCard/index.js","webpack:///./components/Student/ClassModal/index.js","webpack:///./components/Student/DetailLessonList/components/AssignDatesModal/index.js","webpack:///./components/Student/DetailLessonList/components/AssignLessonModal/components/LessonListItem.js","webpack:///./components/Student/DetailLessonList/components/AssignLessonModal/index.js","webpack:///./components/Student/DetailLessonList/components/FilterSection/index.js","webpack:///./components/Student/DetailLessonList/components/FullView/components/LessonCard/components/Checkbox.js","webpack:///./components/Student/DetailLessonList/components/FullView/components/LessonCard/index.js","webpack:///./components/Student/DetailLessonList/components/FullView/components/LessonCard/utils/index.js","webpack:///./components/Student/DetailLessonList/components/FullView/index.js","webpack:///./components/Student/DetailLessonList/components/ListView/components/ListItem.js","webpack:///./components/Student/DetailLessonList/components/ListView/index.js","webpack:///./components/Student/DetailLessonList/components/ModalFilterSection/index.js","webpack:///./components/Student/DetailLessonList/components/RescheduleModal/index.js","webpack:///./components/Student/DetailLessonList/index.js","webpack:///./components/Student/DetailLessonList/utils/lessonSortOptions.js","webpack:///./components/Student/DetailLessonList/utils/mergeArrays.js","webpack:///./components/Student/DetailLessonList/utils/modalSortOptions.js","webpack:///./components/Student/DetailLessonList/utils/timeOptions.js","webpack:///./components/Student/DetailLessonList/utils/unitOptions.js","webpack:///./components/Student/DetailSummaryPage/components/CourseProgress/index.js","webpack:///./components/Student/DetailSummaryPage/components/OverdueWork/index.js","webpack:///./components/Student/DetailSummaryPage/components/StrengthsAndWeaknesses/index.js","webpack:///./components/Student/DetailSummaryPage/components/StrengthsAndWeaknesses/utils/index.js","webpack:///./components/Student/DetailSummaryPage/components/SummaryCards/index.js","webpack:///./components/Student/DetailSummaryPage/components/SummaryCards/utils/index.js","webpack:///./components/Student/DetailSummaryPage/components/TestScores/index.js","webpack:///./components/Student/DetailSummaryPage/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/components/AnswerSheetNavBar/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/components/EssayPage/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/components/MathCalculatorPage/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/components/MathNoCalcPage/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/components/ReadingPage/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/components/WritingPage/components/AnswerRow/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/components/WritingPage/components/Bubble/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/components/WritingPage/components/DropDownOptions/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/components/WritingPage/components/FreeResponse/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/components/WritingPage/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/index.js","webpack:///./components/Student/DetailTestAnswerSheetComplete/utils/sampleEssayScores.js","webpack:///./components/Student/DetailTestList/components/AssignedTestCard/index.js","webpack:///./components/Student/DetailTestList/components/CardHeader/index.js","webpack:///./components/Student/DetailTestList/components/CompletedTestCard/index.js","webpack:///./components/Student/DetailTestList/components/EditTestModal/components/Settings/index.js","webpack:///./components/Student/DetailTestList/components/EditTestModal/components/TestVersionSettings/index.js","webpack:///./components/Student/DetailTestList/components/EditTestModal/components/TestVersionSettings/utils/index.js","webpack:///./components/Student/DetailTestList/components/EditTestModal/index.js","webpack:///./components/Student/DetailTestList/components/EditTestModal/pdfMakeReport.js","webpack:///./components/Student/DetailTestList/components/EnterAnswerWrapper/common/NavBar.js","webpack:///./components/Student/DetailTestList/components/EnterAnswerWrapper/components/InCompleteSection.js","webpack:///./components/Student/DetailTestList/components/EnterAnswerWrapper/components/ProblemRow/index.js","webpack:///./components/Student/DetailTestList/components/EnterAnswerWrapper/components/StartSection.js","webpack:///./components/Student/DetailTestList/components/EnterAnswerWrapper/index.js","webpack:///./components/Student/DetailTestList/components/OverDueTestCard/index.js","webpack:///./components/Student/DetailTestList/components/TestModal/index.js","webpack:///./components/Student/DetailTestList/components/TestSettingModal/index.js","webpack:///./components/Student/DetailTestList/components/TestVersionPage/index.js","webpack:///./components/Student/DetailTestList/index.js","webpack:///./components/Student/DetailTestScorePage/components/CrossTestScoresCard/index.js","webpack:///./components/Student/DetailTestScorePage/components/EssayScoresCard/index.js","webpack:///./components/Student/DetailTestScorePage/components/SectionScoreCard/index.js","webpack:///./components/Student/DetailTestScorePage/components/SubscoresCard/index.js","webpack:///./components/Student/DetailTestScorePage/components/TestScoreCard/index.js","webpack:///./components/Student/DetailTestScorePage/components/TotalScoreCard/index.js","webpack:///./components/Student/DetailTestScorePage/index.js","webpack:///./components/Student/DetailTestStrengthsAndWeakesses/components/MathPage/index.js","webpack:///./components/Student/DetailTestStrengthsAndWeakesses/components/ReadingPage/index.js","webpack:///./components/Student/DetailTestStrengthsAndWeakesses/components/StrengthsWeaknessesNavBar/index.js","webpack:///./components/Student/DetailTestStrengthsAndWeakesses/components/SubjectsCard/index.js","webpack:///./components/Student/DetailTestStrengthsAndWeakesses/components/WritingPage/index.js","webpack:///./components/Student/DetailTestStrengthsAndWeakesses/components/common/GetScoreStatus.js","webpack:///./components/Student/DetailTestStrengthsAndWeakesses/components/common/GroupBlock.js","webpack:///./components/Student/DetailTestStrengthsAndWeakesses/components/common/GroupRow.js","webpack:///./components/Student/DetailTestStrengthsAndWeakesses/components/common/SubBlock.js","webpack:///./components/Student/DetailTestStrengthsAndWeakesses/index.js","webpack:///./components/Student/DetailWorksheetPage/components/FilterSection/index.js","webpack:///./components/Student/DetailWorksheetPage/components/FullView/index.js","webpack:///./components/Student/DetailWorksheetPage/components/ListView/components/TableHeader/index.js","webpack:///./components/Student/DetailWorksheetPage/components/ListView/index.js","webpack:///./components/Student/DetailWorksheetPage/index.js","webpack:///./components/Student/DetailWorksheetPage/utils/sampleWorksheets.js","webpack:///./components/Student/DetailWorksheetPage/utils/statusColorMap.js","webpack:///./components/Student/DropDownMenu/index.js","webpack:///./components/Student/IndividualStudentPage/index.js","webpack:///./components/Student/LessonDetailAnswerSheet/components/Bubble/index.js","webpack:///./components/Student/LessonDetailAnswerSheet/components/ChallengeQuestions/index.js","webpack:///./components/Student/LessonDetailAnswerSheet/components/DrillQuestions/index.js","webpack:///./components/Student/LessonDetailAnswerSheet/components/EditProblemRow/index.js","webpack:///./components/Student/LessonDetailAnswerSheet/components/FreeResponse/index.js","webpack:///./components/Student/LessonDetailAnswerSheet/components/PracticeQuestions/index.js","webpack:///./components/Student/LessonDetailAnswerSheet/components/Question/index.js","webpack:///./components/Student/LessonDetailAnswerSheet/components/QuestionModal/index.js","webpack:///./components/Student/LessonDetailAnswerSheet/components/VideoPlayer/index.js","webpack:///./components/Student/LessonDetailAnswerSheet/index.js","webpack:///./components/Student/LessonWorksheetTestSection/components/CardSection/index.js","webpack:///./components/Student/LessonWorksheetTestSection/components/ChallengeQuestions/index.js","webpack:///./components/Student/LessonWorksheetTestSection/components/PracticeQuestions/index.js","webpack:///./components/Student/LessonWorksheetTestSection/components/Question/index.js","webpack:///./components/Student/LessonWorksheetTestSection/components/QuestionModal/index.js","webpack:///./components/Student/LessonWorksheetTestSection/components/ReassignModal/index.js","webpack:///./components/Student/LessonWorksheetTestSection/index.js","webpack:///./components/Student/LessonWorksheetTestSection/utils/index.js","webpack:///./components/Student/LessonWorksheetTestSection/utils/sampleQuestions.js","webpack:///./components/Student/ListPage/Components/FilterSection/index.js","webpack:///./components/Student/ReadWorkBook/index.js","webpack:///./components/Student/components/StudentCard/components/EditModal.js","webpack:///./components/Student/components/StudentCard/index.js","webpack:///./components/Student/components/StudentModal/components/Location/index.js","webpack:///./components/Student/components/StudentModal/index.js","webpack:///./components/Student/components/StudentNavBar/index.js","webpack:///./components/Student/index/actions.js","webpack:///./components/Student/index/api.js","webpack:///./components/Student/index/constants.js","webpack:///./components/Student/index/selectors.js","webpack:///./components/Toast/index.js","webpack:///./components/Toast/styles/index.js","webpack:///./components/User/index/api.js","webpack:///./components/User/index/selectors.js","webpack:///./components/common/ClickOffComponentWrapper/index.js","webpack:///./components/common/Portal/index.js","webpack:///./components/common/RadialBar/index.js","webpack:///./components/utils/ConvertSecondsToMinutesSeconds.js","webpack:///./components/utils/RadialBar.js","webpack:///./components/utils/fieldValidation.js","webpack:///./components/utils/getValueFromState.js","webpack:///./components/utils/licenseTypeOptions.js","webpack:///./components/utils/locationOptions.js","webpack:///./components/utils/sampleClasses.js","webpack:///./components/utils/sampleInstructors.js","webpack:///./components/utils/sampleTopics.js","webpack:///./components/utils/sortFunctions.js","webpack:///./components/utils/sortOptions.js","webpack:///./components/utils/stateOptions.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/date/now.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/json/stringify.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/assign.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-properties.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/entries.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-descriptor.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-descriptors.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-symbols.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/keys.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/values.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/parse-float.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/promise.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js","webpack:///./pages/students.js","webpack:///./utils/AuthService.js","webpack:///./utils/formatTimeEstimate.js","webpack:///./utils/worksheetSortOptions.js","webpack:///external \"@emotion/core\"","webpack:///external \"core-js/library/fn/date/now\"","webpack:///external \"core-js/library/fn/json/stringify\"","webpack:///external \"core-js/library/fn/object/assign\"","webpack:///external \"core-js/library/fn/object/define-properties\"","webpack:///external \"core-js/library/fn/object/define-property\"","webpack:///external \"core-js/library/fn/object/entries\"","webpack:///external \"core-js/library/fn/object/get-own-property-descriptor\"","webpack:///external \"core-js/library/fn/object/get-own-property-descriptors\"","webpack:///external \"core-js/library/fn/object/get-own-property-symbols\"","webpack:///external \"core-js/library/fn/object/keys\"","webpack:///external \"core-js/library/fn/object/values\"","webpack:///external \"core-js/library/fn/parse-float\"","webpack:///external \"core-js/library/fn/promise\"","webpack:///external \"html2canvas\"","webpack:///external \"immutability-helper\"","webpack:///external \"jwt-decode\"","webpack:///external \"moment\"","webpack:///external \"next/dynamic\"","webpack:///external \"next/router\"","webpack:///external \"pdfmake/build/pdfmake\"","webpack:///external \"pdfmake/build/vfs_fonts\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-beautiful-dnd\"","webpack:///external \"react-chartjs-2\"","webpack:///external \"react-datepicker\"","webpack:///external \"react-dom\"","webpack:///external \"react-input-slider\"","webpack:///external \"react-redux\"","webpack:///external \"react-select\"","webpack:///external \"react-slick\"","webpack:///external \"react-spinners/BarLoader\"","webpack:///external \"react-sticky\"","webpack:///external \"react-toastify\"","webpack:///external \"redux\"","webpack:///external \"reselect\"","webpack:///external \"styled-components\"","webpack:///external \"styled-jsx/style\"","webpack:///external \"uuid/v4\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// object to store loaded chunks\n \t// \"0\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t\"static/development/pages/students.js\": 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// require() chunk loading for javascript\n\n \t\t// \"0\" is the signal for \"already loaded\"\n \t\tif(installedChunks[chunkId] !== 0) {\n \t\t\tvar chunk = require(\"../../../\" + ({}[chunkId]||chunkId) + \".js\");\n \t\t\tvar moreModules = chunk.modules, chunkIds = chunk.ids;\n \t\t\tfor(var moduleId in moreModules) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t\tfor(var i = 0; i < chunkIds.length; i++)\n \t\t\t\tinstalledChunks[chunkIds[i]] = 0;\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// uncaught error handler for webpack runtime\n \t__webpack_require__.oe = function(err) {\n \t\tprocess.nextTick(function() {\n \t\t\tthrow err; // catch this error by using import().catch()\n \t\t});\n \t};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ClickOffComponentWrapper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      if (this.props.nestedModals) {\n        return;\n      }\n      this.props.onOuterClick();\n    }\n  }\n\n  render() {\n    return <div className={this.props.className} ref={this.setWrapperRef}>{this.props.children}</div>;\n  }\n}\n\nClickOffComponentWrapper.propTypes = {\n  children: PropTypes.any,\n  onOuterClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  nestedModals: PropTypes.bool,\n};\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Droppable } from 'react-beautiful-dnd';\n\nimport { getCalendarCellClassName, getCalendarDayClassName } from '../../utils/dateAndCalendarUtils';\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'inherit',\n});\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass CalendarDate extends React.Component {\n  render() {\n    const { date, dayDate, calDate, inMonth, hasEvents, isActiveDate, inActiveColumn, addDropdownOpen,\n      onSetActiveDate, shouldMapLessons, shouldMapSessions, deleteDropdownOpen, onToggleAddDropdown,\n      shouldMapWorksheets, shouldMapTestSections, onToggleDeleteDropdown, shouldMapSimulatedSats,\n      activeDateKey, mapDateSessions, mapDateLessons, mapDateWorksheets, mapTestSections, mapSimulatedSats,\n      toggleAssignSessionModal, toggleAssignLessonsModal, toggleAssignWorksheetsModal,\n      toggleAssignTestSectionModal, toggleAssignSimulatedSatModal,\n      sessions, lessons, worksheets, testSections, simulatedSat,\n     } = this.props;\n    return (\n      <React.Fragment>\n        <Choose>\n          <When condition={!inMonth}>\n            <td className=\"cal-cell1 cal-cell cal-day-outmonth\" key={dayDate}>\n              <div className={getCalendarDayClassName(date, inMonth, activeDateKey)}>\n                <span className=\"day-date\">{dayDate}</span>\n                <span className=\"cal-date\">{calDate}</span>\n              </div>\n            </td>\n          </When>\n          <Otherwise>\n            <td key={activeDateKey} className={getCalendarCellClassName(hasEvents, inActiveColumn)} onClick={() => onSetActiveDate(activeDateKey)}>\n              <Droppable droppableId={`droppable-${date}`}>\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    style={getListStyle(snapshot.isDraggingOver)}\n                  >\n                    <div className={getCalendarDayClassName(date, inMonth, activeDateKey)}>\n                      <span className=\"day-date\">{dayDate}</span>\n                      <span className=\"cal-date\">{calDate}</span>\n                      <ul className=\"day-collapsible collapsible\">\n                        <li className={isActiveDate ? 'collapsible-holder active' : 'collapsible-holder'} style={{ transform: 'none' }}>\n                          <div className=\"collapsible-header\" style={{ display: inActiveColumn && isActiveDate ? 'none' : 'block'}}>\n                            <span className=\"fake-close\"><span className=\"icon-close-thin\"></span></span>\n                            <If condition={hasEvents}>\n                              <ul className=\"events-list events-list-short\">\n                                <If condition={shouldMapSessions}>\n                                  <li className=\"event-frame event-title\">\n                                    <span className=\"event-title-box\">Session {sessions.length}</span>\n                                  </li>\n                                </If>\n                                <If condition={shouldMapLessons}>\n                                  <li className=\"event-frame\">\n                                    <span className=\"event event-lesson-box\"> {lessons.length} <span className=\"event-text\">Lesson{lessons.length > 1 && 's'}</span></span>\n                                  </li>\n                                </If>\n                                <If condition={shouldMapWorksheets}>\n                                  <li className=\"event-frame\">\n                                    <span className=\"event event-worksheet-box\">{worksheets.length} <span className=\"event-text\">Worksheet{worksheets.length > 1 && 's'}</span></span>\n                                  </li>\n                                </If>\n                                <If condition={shouldMapTestSections}>\n                                  <li className=\"event-frame\">\n                                    <span className=\"event event-test-box\">{testSections.length} <span className=\"event-text\">Test Section{testSections.length > 1 && 's'}</span></span>\n                                  </li>\n                                </If>\n                                <If condition={shouldMapSimulatedSats}>\n                                  <li className=\"event-frame\">\n                                    <span className=\"event event-sat-box\">{simulatedSat.length} <span className=\"event-text\">Simulated SAT</span></span>\n                                  </li>\n                                </If>\n                              </ul>\n                            </If>\n                          </div>\n                          <div className=\"collapsible-body\" style={{ opacity: inActiveColumn && isActiveDate ? '1' : '0', visibility: inActiveColumn ? 'visible' : 'hidden' }}>\n                            <If condition={hasEvents}>\n                              <ul className=\"events-list\">\n                                {mapDateSessions(shouldMapSessions, sessions)}\n                                {mapDateLessons(shouldMapLessons, lessons)}\n                                {mapDateWorksheets(shouldMapWorksheets, worksheets)}\n                                {mapTestSections(shouldMapTestSections, testSections)}\n                                {mapSimulatedSats(shouldMapSimulatedSats, simulatedSat)}\n                              </ul>\n                            </If>\n                            <div className=\"day-footer\">\n                              <ul className=\"links-list\">\n                                <li>\n                                  <a\n                                    href=\"#\"\n                                    data-target='dropdown_day_240119_add'\n                                    onClick={onToggleAddDropdown}\n                                    className=\"link-add dropdown-trigger waves-effect waves-teal\"\n                                  >\n                                    Add\n                                  </a>\n                                  <ul\n                                    id='dropdown_day_240119_add'\n                                    className='dropdown-content'\n                                    style={{ display: addDropdownOpen ? 'block' : 'none', opacity: addDropdownOpen ? '100' : '0' }}\n                                  >\n                                    <li><a href=\"#\" onClick={(event) => toggleAssignSessionModal(event, date)} className=\"modal-trigger\">Session</a></li>\n                                    <li><a href=\"#\" onClick={(event) => toggleAssignLessonsModal(event, date)} className=\"modal-trigger\">Lesson</a></li>\n                                    <li><a href=\"#\" onClick={(event) => toggleAssignWorksheetsModal(event, date)} className=\"modal-trigger\">Worksheet</a></li>\n                                    <li><a href=\"#\" onClick={(event) => toggleAssignTestSectionModal(event, date)} className=\"modal-trigger\">Test Section</a></li>\n                                    <li><a href=\"#\" onClick={(event) => toggleAssignSimulatedSatModal(event, date)} className=\"modal-trigger\">Simulated SAT</a></li>\n                                  </ul>\n                                </li>\n                                <li>\n                                  <a\n                                    href=\"#\"\n                                    data-target='dropdown_day_240119_delete'\n                                    onClick={onToggleDeleteDropdown}\n                                    className=\"link-delete dropdown-trigger waves-effect waves-teal\"\n                                  >\n                                    Delete\n                                  </a>\n                                  <ul\n                                    id='dropdown_day_240119_delete'\n                                    className='dropdown-content'\n                                    style={{ display: deleteDropdownOpen ? 'block' : 'none', opacity: deleteDropdownOpen ? '100' : '0' }}\n                                  >\n                                    <li><a href=\"#modal_edit_delete_section\" className=\"modal-trigger\">Session</a></li>\n                                    <li><a href=\"#modal_edit_delete_lesson\" className=\"modal-trigger\">Lesson</a></li>\n                                    <li><a href=\"#modal_edit_delete_worksheet\" className=\"modal-trigger\">Worksheet</a></li>\n                                    <li><a href=\"#modal_edit_delete_test_section\" className=\"modal-trigger\">Test Section</a></li>\n                                    <li><a href=\"#!\" className=\"disabled\">Simulated SAT</a></li>\n                                    <li><a href=\"#!\" className=\"disabled\">Target Test</a></li>\n                                    <li><a href=\"#!\">All</a></li>\n                                  </ul>\n                                </li>\n                              </ul>\n                            </div>\n                          </div>\n                          </li>\n                        </ul>\n                    </div>\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </td>\n          </Otherwise>\n        </Choose>\n      </React.Fragment>\n    )\n  }\n};\n\nCalendarDate.propTypes = {\n  date: PropTypes.string.isRequired,\n  inMonth: PropTypes.bool.isRequired,\n  dayDate: PropTypes.string.isRequired,\n  calDate: PropTypes.number.isRequired,\n  hasEvents: PropTypes.bool.isRequired,\n  lessons: PropTypes.array.isRequired,\n  sessions: PropTypes.array.isRequired,\n  worksheets: PropTypes.array.isRequired,\n  testSections: PropTypes.array.isRequired,\n  simulatedSat: PropTypes.array.isRequired,\n  isActiveDate: PropTypes.bool.isRequired,\n  inActiveColumn: PropTypes.bool.isRequired,\n  activeDateKey: PropTypes.string.isRequired,\n  addDropdownOpen: PropTypes.bool.isRequired,\n  onSetActiveDate: PropTypes.func.isRequired,\n  mapDateLessons: PropTypes.func.isRequired,\n  mapDateSessions: PropTypes.func.isRequired,\n  mapTestSections: PropTypes.func.isRequired,\n  mapSimulatedSats: PropTypes.func.isRequired,\n  mapDateWorksheets: PropTypes.func.isRequired,\n  deleteDropdownOpen: PropTypes.bool.isRequired,\n  onToggleAddDropdown: PropTypes.func.isRequired,\n  onToggleDeleteDropdown: PropTypes.func.isRequired,\n  toggleAssignSessionModal: PropTypes.func.isRequired,\n  toggleAssignLessonsModal: PropTypes.func.isRequired,\n  toggleAssignWorksheetsModal: PropTypes.func.isRequired,\n  toggleAssignTestSectionModal: PropTypes.func.isRequired,\n  toggleAssignSimulatedSatModal: PropTypes.func.isRequired,\n  shouldMapLessons: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.number,\n  ]).isRequired,\n  shouldMapSessions: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.number,\n  ]).isRequired,\n  shouldMapWorksheets: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.number,\n  ]).isRequired,\n  shouldMapTestSections: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.number,\n  ]).isRequired,\n  shouldMapSimulatedSats: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.number,\n  ]).isRequired,\n}\n\nexport default CalendarDate;\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CalendarArrow = ({ calendarMap, activeMonth, onClick, direction }) => (\n  <div onClick={onClick} className={direction === \"next\" ? \"slick-arrow slick-next\" : \"slick-arrow slick-prev\"}>\n    {direction === \"next\" ? calendarMap[activeMonth + 2] : calendarMap[activeMonth]}\n  </div>\n)\n\nCalendarArrow.propTypes = {\n  onClick: PropTypes.func,\n  direction: PropTypes.string.isRequired,\n  activeMonth: PropTypes.number.isRequired,\n  calendarMap: PropTypes.object.isRequired,\n};\n\nexport default CalendarArrow;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Slider from 'react-slick';\n\nimport CalendarArrow from './components/CalendarArrow';\n\nimport { calendarMap, currentMonthIndex } from '../../utils/dateAndCalendarUtils';\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass CalendarHeader extends React.Component {\n  render() {\n    const { activeMonth, onSetActiveMonth } = this.props;\n    return (\n      <div className=\"calendar-header\" style={{ zIndex: '9' }}>\n        <div className=\"calendar-view-switcher\">\n          <ul className=\"switcher\">\n            <li className=\"active col\" data-view=\"view-month\"><a href=\"#\">Month View</a></li>\n            <li className=\"col\" data-view=\"view-day\"><a href=\"#\">Day View</a></li>\n          </ul>\n        </div>\n        <div className=\"nav-slick-calendar\" style={{ opacity: '1' }}>\n          <Slider\n          {\n            ...{\n              dots: false,\n              infinite: true,\n              speed: 500,\n              slidesToShow: 1,\n              slidesToScroll: 1,\n              initialSlide: currentMonthIndex,\n              onInit: () => onSetActiveMonth(currentMonthIndex),\n              afterChange: onSetActiveMonth,\n              nextArrow: <CalendarArrow direction=\"next\" calendarMap={calendarMap} activeMonth={activeMonth} />,\n              prevArrow: <CalendarArrow direction=\"previous\" calendarMap={calendarMap} activeMonth={activeMonth} />,\n            }\n          }>\n            <div className=\"slide\">January</div>\n            <div className=\"slide\">February</div>\n            <div className=\"slide\">March</div>\n            <div className=\"slide\">April</div>\n            <div className=\"slide\">May</div>\n            <div className=\"slide\">June</div>\n            <div className=\"slide\">July</div>\n            <div className=\"slide\">August</div>\n            <div className=\"slide\">September</div>\n            <div className=\"slide\">October</div>\n            <div className=\"slide\">November</div>\n            <div className=\"slide\">December</div>\n          </Slider>\n        </div>\n      </div>\n    );\n  }\n}\n\nCalendarHeader.propTypes = {\n  activeMonth: PropTypes.number.isRequired,\n  onSetActiveMonth: PropTypes.func.isRequired,\n}\n\nexport default CalendarHeader;\n","/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport CalendarDate from '../CalendarDate';\n\nclass CalendarRow extends React.Component {\n  toggleAssignSessionModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignSessionModal, onToggleAddDropdown } = this.props;\n    onToggleAssignSessionModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignLessonsModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignLessonsModal, onToggleAddDropdown } = this.props;\n    onToggleAssignLessonsModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignWorksheetsModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignWorksheetsModal, onToggleAddDropdown } = this.props;\n    onToggleAssignWorksheetsModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignTestSectionModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignTestSectionModal, onToggleAddDropdown } = this.props;\n    onToggleAssignTestSectionModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  toggleAssignSimulatedSatModal = (event, date) => {\n    event.preventDefault();\n    const { onToggleAssignSimulatedSatModal, onToggleAddDropdown } = this.props;\n    onToggleAssignSimulatedSatModal(event, date);\n    onToggleAddDropdown();\n  }\n\n  mapDateSessions = (shouldMapSessions, sessions) => {\n    if (shouldMapSessions) {\n      return sessions.map((session, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`sessions-${session.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <span className=\"event-title-box\">{session.title}</span>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapDateLessons = (shouldMapLessons, lessons) => {\n    if (shouldMapLessons) {\n      return lessons.map((lesson, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`lessons-${lesson.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <React.Fragment>\n                  {lesson.completed && <span className=\"event-check lesson-check\"><i className=\"icon-check02\"></i></span>}\n                  <span className=\"event event-lesson-box\">{lesson.title}</span>\n                </React.Fragment>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapDateWorksheets = (shouldMapWorksheets, worksheets) => {\n    if (shouldMapWorksheets) {\n      return worksheets.map((worksheet, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`worksheets-${worksheet.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <React.Fragment>\n                  {worksheet.completed && <span className=\"event-check worksheet-check\"><i className=\"icon-check02\"></i></span>}\n                  <span className=\"event event-worksheet-box\">{worksheet.title}</span>\n                </React.Fragment>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapTestSections = (shouldMapTestSections, testSections) => {\n    if (shouldMapTestSections) {\n      return testSections.map((testSection, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`testSections-${testSection.date}-${index}`}\n            style={{ userSelect: 'none' }}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n              >\n                <span className=\"event event-test-box\">Test Section: {testSection.version}</span>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapSimulatedSats = (shouldMapSimulatedSats, simulatedSat) => {\n    if (shouldMapSimulatedSats) {\n      return simulatedSat.map((sat, index) => (\n        <li className=\"event-frame\" key={index}>\n          <Draggable\n            key={index}\n            index={index}\n            draggableId={`simulatedSat-${sat.date}-${index}`}\n          >\n            {(provided) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.dragHandleProps}\n                {...provided.dragHandleProps}\n              >\n                <span className=\"event event-sat-box\">{sat.version}</span>\n              </div>\n            )}\n          </Draggable>\n        </li>\n      ));\n    }\n    return null;\n  }\n\n  mapRowDates = () => this.props.rows && this.props.rows.map(rowDate => {\n    const { eventFilters, activeDate, addDropdownOpen, deleteDropdownOpen, onSetActiveDate, onToggleAddDropdown, onToggleDeleteDropdown, activeColumn } = this.props;\n    const { date, dayDate, calDate, activeDateKey, inMonth, sessions = [], lessons = [], worksheets = [], testSections = [], simulatedSat = [] } = rowDate;\n    const hasEvents = sessions.length > 0 || lessons.length > 0 || worksheets.length > 0 || testSections.length > 0 || simulatedSat.length > 0;\n    const inActiveColumn = activeDateKey && activeDateKey[13] === activeColumn;\n    const isActiveDate = activeDate === activeDateKey;\n    const hasEventFilters = eventFilters.length > 0;\n\n    const shouldMapSessions = (!hasEventFilters && sessions.length) || (sessions.length > 0 && hasEventFilters && eventFilters.indexOf('sessions') !== -1);\n    const shouldMapLessons = (!hasEventFilters && lessons.length) || (lessons.length > 0 && hasEventFilters && eventFilters.indexOf('lessons') !== -1);\n    const shouldMapWorksheets = (!hasEventFilters && worksheets.length) || (worksheets.length > 0 && hasEventFilters && eventFilters.indexOf('worksheets') !== -1);\n    const shouldMapTestSections = (!hasEventFilters && testSections.length) || (testSections.length > 0 && hasEventFilters && eventFilters.indexOf('testSections') !== -1);\n    const shouldMapSimulatedSats = (!hasEventFilters && simulatedSat.length) || (simulatedSat.length > 0 && hasEventFilters && eventFilters.indexOf('simulatedSats') !== -1);\n    return (\n      <CalendarDate\n        sessions={sessions}\n        lessons={lessons}\n        worksheets={worksheets}\n        testSections={testSections}\n        simulatedSat={simulatedSat}\n        key={date}\n        date={date}\n        dayDate={dayDate}\n        calDate={calDate}\n        inMonth={inMonth}\n        hasEvents={hasEvents}\n        isActiveDate={isActiveDate}\n        activeDateKey={activeDateKey}\n        inActiveColumn={inActiveColumn}\n        addDropdownOpen={addDropdownOpen}\n        onSetActiveDate={onSetActiveDate}\n        shouldMapLessons={shouldMapLessons}\n        shouldMapSessions={shouldMapSessions}\n        deleteDropdownOpen={deleteDropdownOpen}\n        onToggleAddDropdown={onToggleAddDropdown}\n        shouldMapWorksheets={shouldMapWorksheets}\n        shouldMapTestSections={shouldMapTestSections}\n        onToggleDeleteDropdown={onToggleDeleteDropdown}\n        shouldMapSimulatedSats={shouldMapSimulatedSats}\n        mapDateSessions={this.mapDateSessions}\n        mapDateLessons={this.mapDateLessons}\n        mapDateWorksheets={this.mapDateWorksheets}\n        mapTestSections={this.mapTestSections}\n        mapSimulatedSats={this.mapSimulatedSats}\n        toggleAssignSessionModal={this.toggleAssignSessionModal}\n        toggleAssignLessonsModal={this.toggleAssignLessonsModal}\n        toggleAssignWorksheetsModal={this.toggleAssignWorksheetsModal}\n        toggleAssignTestSectionModal={this.toggleAssignTestSectionModal}\n        toggleAssignSimulatedSatModal={this.toggleAssignSimulatedSatModal}\n      />\n    );\n  }\n)\n\n  render() {\n    return (\n      <tr className=\"cal-row-fluid\">\n        {this.mapRowDates()}\n      </tr>\n    )\n  }\n}\n\nCalendarRow.propTypes = {\n  activeDate: PropTypes.string,\n  activeColumn: PropTypes.string,\n  rows: PropTypes.array.isRequired,\n  eventFilters: PropTypes.array.isRequired,\n  onSetActiveDate: PropTypes.func.isRequired,\n  addDropdownOpen: PropTypes.bool.isRequired,\n  deleteDropdownOpen: PropTypes.bool.isRequired,\n  onToggleAddDropdown: PropTypes.func.isRequired,\n  onToggleDeleteDropdown: PropTypes.func.isRequired,\n  onToggleAssignSessionModal: PropTypes.func.isRequired,\n  onToggleAssignLessonsModal: PropTypes.func.isRequired,\n  onToggleAssignWorksheetsModal: PropTypes.func.isRequired,\n  onToggleAssignTestSectionModal: PropTypes.func.isRequired,\n  onToggleAssignSimulatedSatModal: PropTypes.func.isRequired,\n}\n\nexport default CalendarRow;","/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  onToggleShowFilters = () => this.setState(({ open }) => ({ open: !open }))\n\n  render() {\n    const { open } = this.state;\n    const { filters, eventFilters, onClearFilters, handleFilterClick } = this.props;\n    return (\n      <div className=\"calendar-filter filter-form-holder\">\n        <ul className=\"collapsible expandable\" style={{ minHeight: '0' }}>\n          <li>\n            <div className=\"collapsible-body\" style={open ? { display: 'block' } : { display: 'none' }}>\n              <div className=\"filter-form_checkbox-list-holder justify-center\">\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"className\"\n                      name=\"className\"\n                      checked={filters.indexOf('className') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"className\">Some Class Name</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"tutoring\"\n                      name=\"tutoring\"\n                      checked={filters.indexOf('tutoring') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"tutoring\">Tutoring</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"sessions\"\n                      name=\"sessions\"\n                      checked={eventFilters.indexOf('sessions') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name, true)}\n                    />\n                    <label htmlFor=\"sessions\">Sessions</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"lessons\"\n                      name=\"lessons\"\n                      checked={eventFilters.indexOf('lessons') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name, true)}\n                    />\n                    <label htmlFor=\"lessons\">Lessons</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"worksheets\"\n                      name=\"worksheets\"\n                      checked={eventFilters.indexOf('worksheets') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name, true)}\n                    />\n                    <label htmlFor=\"worksheets\">Worksheets</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"testSections\"\n                      name=\"testSections\"\n                      checked={eventFilters.indexOf('testSections') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name, true)}\n                    />\n                    <label htmlFor=\"testSections\">Test Sections</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"simulatedSats\"\n                      name=\"simulatedSats\"\n                      checked={eventFilters.indexOf('simulatedSats') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name, true)}\n                    />\n                    <label htmlFor=\"simulatedSats\">Simulated SATs</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"targetTests\"\n                      name=\"targetTests\"\n                      checked={eventFilters.indexOf('targetTests') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name, true)}\n                    />\n                    <label htmlFor=\"targetTests\">Target Tests</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"dueToday\"\n                      name=\"dueToday\"\n                      checked={filters.indexOf('dueToday') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"dueToday\">Due Today</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"dueNextSession\"\n                      name=\"dueNextSession\"\n                      checked={filters.indexOf('dueNextSession') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"dueNextSession\">Due By Next Session</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"dueThisWeek\"\n                      name=\"dueThisWeek\"\n                      checked={filters.indexOf('dueThisWeek') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"dueThisWeek\">Due this Week</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"overdue\"\n                      name=\"overdue\"\n                      checked={filters.indexOf('overdue') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"overdue\">Overdue</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"complete\"\n                      name=\"complete\"\n                      checked={filters.indexOf('complete') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"complete\">Complete</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"incomplete\"\n                      name=\"incomplete\"\n                      checked={filters.indexOf('incomplete') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"incomplete\">Incomplete</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"future\"\n                      name=\"future\"\n                      checked={filters.indexOf('future') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"future\">Future</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"reading\"\n                      name=\"reading\"\n                      checked={filters.indexOf('reading') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"reading\">Reading</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"writing\"\n                      name=\"writing\"\n                      checked={filters.indexOf('writing') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"writing\">Writing</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"math\"\n                      name=\"math\"\n                      checked={filters.indexOf('math') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"math\">Math</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"beginning\"\n                      name=\"beginning\"\n                      checked={filters.indexOf('beginning') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"beginning\">Beginning</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"developing\"\n                      name=\"developing\"\n                      checked={filters.indexOf('developing') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"developing\">Developing</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"accomplished\"\n                      name=\"accomplished\"\n                      checked={filters.indexOf('accomplished') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"accomplished\">Accomplished</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"exemplary\"\n                      name=\"exemplary\"\n                      checked={filters.indexOf('exemplary') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"exemplary\">Exemplary</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"hasReviewFlags\"\n                      name=\"hasReviewFlags\"\n                      checked={filters.indexOf('hasReviewFlags') !== -1}\n                      onChange={({ target }) => handleFilterClick(target.name)}\n                    />\n                    <label htmlFor=\"hasReviewFlags\">Has Review Flags</label>\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"row mb-0 d-flex align-items-flex-end\">\n              <div className=\"col s12 l8\"></div>\n              <div className=\"col s12 l4\">\n                <div className=\"option-filters\">\n                  <div className=\"option-item clear\"><a href=\"#\" onClick={onClearFilters}>Clear Filters</a></div>\n                  <div className=\"option-item\">\n                    <span className=\"collapsible-header\" onClick={this.onToggleShowFilters}>\n                      <span className=\"open-text\">{open ? 'Hide Filters' : 'Open Filters'}</span>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nFilterSection.propTypes = {\n  filters: PropTypes.array.isRequired,\n  eventFilters: PropTypes.array.isRequired,\n  onClearFilters: PropTypes.func.isRequired,\n  handleFilterClick: PropTypes.func.isRequired,\n};\n\nexport default FilterSection;","/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from '../../../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../../../utils/getValueFromState';\n\nconst sortByOptions = [\n  {\n    label: 'Page Number',\n    value: 'pageNumber',\n  },\n  {\n    label: 'Problems',\n    value: 'problems',\n  },\n  {\n    label: 'Time Estimate',\n    value: 'timeEstimate',\n  },\n  {\n    label: 'Subject',\n    value: 'subject',\n  },\n];\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: true,\n      titleFilter: '',\n      unitFilter: '',\n    }\n  };\n\n  onToggleShowFilters = () => this.setState(({ open }) => ({ open: !open }))\n\n  onClearFilters = () => this.setState({ titleFilter: '', unitFilter: '' }, this.props.onClearFilters)\n\n  handleSearchChange = ({ target }) => this.setState({ [target.name]: target.value })\n\n  submitSearchFilter = (searchType) => {\n    const { onSetFilteredState, onUnsetFilteredState } = this.props;\n    if (this.state[searchType] === '') {\n      onUnsetFilteredState(searchType);\n    }\n    const transformedTitle = this.state[searchType].replace(/\\s/g, \"\").toLowerCase();\n    onSetFilteredState(searchType, transformedTitle);\n  }\n\n  render() {\n    const { handleFilterClick, subjectFilters, typeFilters, sort, onSetSort } = this.props;\n    const { open, titleFilter, unitFilter } = this.state;\n    return (\n      <div className=\"filter-form-holder\">\n        <ul className=\"collapsible expandable\" style={{ minHeight: '0' }}>\n          <li>\n            <div className=\"collapsible-body\" style={open ? { display: 'block' } : { display: 'none' }}>\n              <div className=\"filter-form_checkbox-list-holder justify-center\">\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"Reading\"\n                      name=\"Reading\"\n                      checked={subjectFilters.indexOf('Reading') !== -1}\n                      onChange={({ target }) => handleFilterClick('subject', target.name)}\n                    />\n                    <label htmlFor=\"Reading\">Reading</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"Writing\"\n                      name=\"Writing\"\n                      checked={subjectFilters.indexOf('Writing') !== -1}\n                      onChange={({ target }) => handleFilterClick('subject', target.name)}\n                    />\n                    <label htmlFor=\"Writing\">Writing</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"Math\"\n                      name=\"Math\"\n                      checked={subjectFilters.indexOf('Math') !== -1}\n                      onChange={({ target }) => handleFilterClick('subject', target.name)}\n                    />\n                    <label htmlFor=\"Math\">Math</label>\n                  </li>\n                </ul>\n\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"challenge\"\n                      name=\"challenge\"\n                      checked={typeFilters.indexOf('challenge') !== -1}\n                      onChange={({ target }) => handleFilterClick('type', target.name)}\n                    />\n                    <label htmlFor=\"challenge\">Challenge + Practice</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"homework\"\n                      name=\"homework\"\n                      checked={typeFilters.indexOf('homework') !== -1}\n                      onChange={({ target }) => handleFilterClick('type', target.name)}\n                    />\n                    <label htmlFor=\"homework\">Homework Drill</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"readingFromWorkbook\"\n                      name=\"readingFromWorkbook\"\n                      checked={typeFilters.indexOf('readingFromWorkbook') !== -1}\n                      onChange={({ target }) => handleFilterClick('type', target.name)}\n                    />\n                    <label htmlFor=\"readingFromWorkbook\">Reading from Workbook</label>\n                  </li>\n                </ul>\n              </div>\n              <div className=\"d-flex row mb-0 justify-center\">\n                <div className=\"col s12 m3\">\n                  <div className=\"search-field input-field\">\n                    <input\n                      type=\"search\"\n                      id=\"titleFilter\"\n                      name=\"titleFilter\"\n                      className=\"input-control validate\"\n                      value={titleFilter}\n                      onChange={this.handleSearchChange}\n                    />\n                    <button type=\"submit\" onClick={() => this.submitSearchFilter('titleFilter')} className=\"search-button\"><i className=\"icon-search\"></i></button>\n                    <label className={titleFilter.length ? 'label active' : 'label'} htmlFor=\"titleFilter\">Search By Title</label>\n                  </div>\n                </div>\n                <div className=\"col s12 m3\">\n                  <div className=\"search-field input-field\">\n                    <input\n                      type=\"search\"\n                      id=\"unitFilter\"\n                      name=\"unitFilter\"\n                      className=\"input-control validate\"\n                      value={unitFilter}\n                      onChange={this.handleSearchChange}\n                    />\n                    <button type=\"submit\" onClick={() => this.submitSearchFilter('unitFilter')} className=\"search-button\"><i className=\"icon-search\"></i></button>\n                    <label className={unitFilter.length ? 'label active' : 'label'} htmlFor=\"unitFilter\">Search By Unit</label>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row mb-0 d-flex align-items-center\">\n              <div className=\"col s12 l4\">\n                <div className=\"row mb-0\">\n                  <div className=\"col s12 m6\">\n                    <div className=\"input-field\" style={{ marginBottom: '0', marginTop: '0' }}>\n                      <Dropdown\n                        value={getValueFromState(sort, sortByOptions)}\n                        onChange={onSetSort}\n                        options={sortByOptions}\n                        label=\"Sort By\"\n                        stateKey=\"sort\"\n                        dropdownKey=\"sort\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"switcher-block col s12 l4\">\n                <div className=\"view-switcher\">\n                  <ul className=\"switcher center-align\">\n                    <li className=\"active\" data-view=\"view-full\"><a href=\"#\">Month View</a></li>\n                    <li data-view=\"view-list\"><a href=\"#\">Day View</a></li>\n                  </ul>\n                </div>\n              </div>\n              <div className=\"col s12 l4\">\n                <div className=\"option-filters\">\n                  <div className=\"option-item clear\"><a href=\"#\" onClick={this.onClearFilters}>Clear Filters</a></div>\n                  <div className=\"option-item\">\n                    <span\n                      className=\"collapsible-header\"\n                      onClick={this.onToggleShowFilters}\n                    >\n                      <span className=\"open-text\">{open ? 'Hide Filters' : 'Open Filters'}</span>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nFilterSection.propTypes = {\n  sort: PropTypes.string.isRequired,\n  onSetSort: PropTypes.func.isRequired,\n  typeFilters: PropTypes.array.isRequired,\n  onClearFilters: PropTypes.func.isRequired,\n  subjectFilters: PropTypes.array.isRequired,\n  handleFilterClick: PropTypes.func.isRequired,\n  onSetFilteredState: PropTypes.func.isRequired,\n  onUnsetFilteredState: PropTypes.func.isRequired,\n}\n\nexport default FilterSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass LessonCard extends React.Component {\n  handleDropdownClick = (event) => {\n    const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  }\n\n  editLesson = () => console.warn('Pending implementation of edit modal/functionality')\n  cloneLesson = () => console.warn('Pending implementation of clone lesson functionality')\n  showOwner = () => console.warn('Pending implementation of show owner functionality')\n  deleteLesson = () => console.warn('Pending implementation of delete lesson functionality')\n\n  render() {\n    const { lesson, selectedLessons, handleLessonClick, index, dropdownIndex, dropdownIsOpen } = this.props;\n    const { unit, title, subject, timeEstimate, problems, pageNumber, type } = lesson;\n    return (\n      <div className=\"card-main-col col s12 m8 l7 xl5\">\n        <div className=\"card-checkbox\">\n          <input\n            type=\"checkbox\"\n            checked={selectedLessons.indexOf(lesson) !== -1}\n            onChange={() => handleLessonClick(lesson)}\n          />\n          <div className=\"checkbox-card card-main card-lesson-detail card-assigned card\">\n            <div className=\"card-panel\" style={{ backgroundColor: '#666', color: '#fff' }}>\n              <div className=\"card-panel-row row\">\n                <div className=\"icon-col col s2\">\n                  <span className=\"block-icon\">\n                    <i className=\"icon-books-l\"></i>\n                    <span className=\"text-icon\">Lesson</span>\n                  </span>\n                </div>\n                <div className=\"col s9\">\n                  <div className=\"card-panel-text\">\n                    <div className=\"text-small\">{unit}</div>\n                    <div className=\"text-large\">{title}</div>\n                    <div className=\"text-small\">Subject: {subject}</div>\n                  </div>\n                </div>\n                <div className=\"align-top col s1 right-align\">\n                  <div className=\"row icons-row\">\n                    <div className=\"dropdown-block col\">\n                      <a\n                        href='#'\n                        className='dropdown-trigger btn'\n                        data-target='dropdown_lesson_01'\n                        onClick={this.handleDropdownClick}\n                      >\n                        <i className=\"material-icons dots-icon\">more_vert</i>\n                      </a>\n                      <If condition={dropdownIsOpen && dropdownIndex === index}>\n                        <ul\n                          id='dropdown_lesson_01'\n                          className='dropdown-content dropdown-wide'\n                          style={{ display: 'block', transformOrigin: '0px 0px 0px', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}\n                        >\n                          <li><a href=\"#\" onClick={this.editLesson} className=\"modal-trigger link-block\">Edit</a></li>\n                          <li><a href=\"#\" onClick={this.cloneLesson}>Clone</a></li>\n                          <li><a href=\"#\" onClick={this.showOwner}>Show Owner</a></li>\n                          <li><a href=\"#\" onClick={this.deleteLesson}>Delete</a></li>\n                        </ul>\n                      </If>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"card-content\">\n              <div className=\"chart-container\">\n                <div className=\"chart-holder\">\n                  <span className=\"svg-curved-bar\" data-values='{\"from\": 0, \"to\": 100, \"current\": 0}' data-duration=\"1\">\n                    {/* <!-- do not change path attribute \"d\" !!! --> */}\n                    <svg  width=\"110px\" height=\"110px\" viewBox=\" 0 0 110 110\">\n                      <path fill=\"none\" style={{ strokeWidth: '22', stroke: '#d6d6d6' }} d=\"M 14.151810947292809 71.35314804905443 A 44 44 0 1 1 95.8481890527072 71.35314804905443\"></path>\n                      <path data-dinamic fill=\"none\" style={{ strokeWidth: '22', stroke: '#62b771' }} d=\"M 14.151810947292809 71.35314804905443 A 44 44 0 0 1 14.151810947292809 71.35314804905443\"></path>\n                    </svg>\n                  </span>\n                  <span className=\"chart-value\" style={{ backgroundColor: '#4d4d4d' }}></span>\n                </div>\n                <div className=\"chart-description\">\n                  <dl className=\"dl-horizontal\">\n                    <dt>Time Est:</dt>\n                    <dd>{timeEstimate} min</dd>\n                  </dl>\n                  <dl className=\"dl-horizontal\">\n                    <dt>Problems:</dt>\n                    <dd>{problems}</dd>\n                  </dl>\n                </div>\n              </div>\n              <div className=\"card-footer-row center-align\">\n                <div className=\"card-footer-holder\">\n                  <p>p.{pageNumber}  ({type})</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n};\n\nLessonCard.propTypes = {\n  index: PropTypes.number,\n  dropdownIndex: PropTypes.number,\n  lesson: PropTypes.object.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  selectedLessons: PropTypes.array.isRequired,\n  handleLessonClick: PropTypes.func.isRequired,\n}\n\nexport default LessonCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\n\nimport FilterSection from './components/FilterSection';\nimport LessonCard from './components/LessonCard';\nimport sampleLessons from '../../../utils/sampleLessons';\nimport { pageNumberSort, problemSort, timeEstimateSort, subjectSort } from '../../../utils/sortOptions';\n\nconst lessonTypeMap = {\n  'Challenge + Practice': 'challenge',\n  'Homework Drill': 'homework',\n  'Reading from Workbook': 'readingFromWorkbook',\n};\n\nclass AssignLessonModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sort: '',\n      unitFilter: '',\n      titleFilter: '',\n      typeFilters: [],\n      subjectFilters: [],\n      selectedLessons: [],\n      lessons: sampleLessons,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      assignSelectedDropdownOpen: false,\n    };\n  }\n\n  onToggleAssignSelectedDropdown = () => this.setState(({ assignSelectedDropdownOpen }) => ({ assignSelectedDropdownOpen: !assignSelectedDropdownOpen }))\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  onResetModal = () => this.setState({ subjectFilters: [], typeFilters: [], sort: '' })\n  onSetSort = (sort) => this.setState({ sort })\n\n  onSetFilteredState = (titleFilter, value) => this.setState({ [titleFilter]: value })\n  onUnsetFilteredState = (titleFilter) => this.setState({ [titleFilter]: '' })\n\n  onCloseModal = () => {\n    const { onClose } = this.props;\n    onClose();\n    this.onResetModal();\n  }\n\n  // eslint-disable-next-line consistent-return\n  onSortLessons = (lessons) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case 'pageNumber':\n        return lessons.sort(pageNumberSort);\n      case 'problems':\n        return lessons.sort(problemSort);\n      case 'timeEstimate':\n        return lessons.sort(timeEstimateSort);\n      case 'subject':\n        return lessons.sort(subjectSort);\n      default:\n        break;\n    }\n  }\n\n  onFilterByTitle = () => {\n    const { lessons, titleFilter } = this.state;\n    return lessons.reduce((finalArr, currentLesson) => {\n      const { title } = currentLesson;\n      const lessonString = title.replace(/\\s/g, \"\").toLowerCase();\n      if (lessonString.indexOf(titleFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n        finalArr.push(currentLesson);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterByUnit = () => {\n    const { lessons, unitFilter } = this.state;\n    return lessons.reduce((finalArr, currentLesson) => {\n      const { unit } = currentLesson;\n      const lessonString = unit.replace(/\\s/g, \"\").toLowerCase();\n      if (lessonString.indexOf(unitFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n        finalArr.push(currentLesson);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterLessons = () => {\n    const { subjectFilters, typeFilters, lessons: allLessons } = this.state;\n    let lessons = allLessons;\n    if (subjectFilters.length) {\n      lessons = lessons.filter(lesson => subjectFilters.indexOf(lesson.subject) !== -1);\n    }\n    if (typeFilters.length) {\n      lessons = lessons.filter(lesson => typeFilters.indexOf(lessonTypeMap[lesson.type]) !== -1);\n    }\n    return lessons;\n  }\n\n  getMappableLessons = () => {\n    const { subjectFilters, typeFilters, sort, unitFilter, titleFilter, lessons } = this.state;\n    let mappableLessons = lessons;\n    if (titleFilter.length) {\n      mappableLessons = this.onFilterByTitle();\n    }\n    if (unitFilter.length) {\n      mappableLessons = this.onFilterByUnit();\n    }\n    if (subjectFilters.length || typeFilters.length) {\n      mappableLessons = this.onFilterLessons();\n    }\n    if (sort) {\n      return this.onSortLessons(mappableLessons);\n    }\n    return mappableLessons;\n  }\n\n  handleFilterClick = (filterType, filter) => {\n    const { subjectFilters: currentSubjectFilters, typeFilters: currentTypeFilters } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case 'subject':\n        modifiedFilterCurrentState = currentSubjectFilters;\n        modifiedFilterName = 'subjectFilters';\n        break;\n      case 'type':\n        modifiedFilterCurrentState = currentTypeFilters;\n        modifiedFilterName = 'typeFilters';\n        break;\n      default:\n        break;\n    }\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[ filterIndex, 1 ]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  }\n\n  handleLessonClick = (lesson) => {\n    const { selectedLessons } = this.state;\n    let modifiedLessons;\n    if (selectedLessons.indexOf(lesson) === -1) {\n      modifiedLessons = update(selectedLessons, {\n        $push: [lesson],\n      });\n    } else {\n      const lessonIndex = selectedLessons.indexOf(lesson);\n      modifiedLessons = update(selectedLessons, {\n        $splice: [[ lessonIndex, 1 ]],\n      });\n    }\n    this.setState({ selectedLessons: modifiedLessons });\n  }\n\n  assignLessons = (date) => {\n    const { onAssignLessons } = this.props;\n    const { selectedLessons } = this.state;\n    let assignDate;\n    switch (date) {\n      case 'today':\n        assignDate = moment().format('MM/DD/YY');\n        break;\n      case 'tomorrow':\n        assignDate = moment().add(1, 'days').format('MM/DD/YY');\n        break;\n      case 'nextSession':\n        break;\n      case 'customDate':\n        assignDate = '01/05/19';\n        break;\n      default:\n        break;\n    }\n    this.onToggleAssignSelectedDropdown();\n    this.onResetModal();\n    onAssignLessons(selectedLessons, assignDate);\n  }\n\n  mapLessons = () => this.getMappableLessons().map((lesson, index) => (\n    <LessonCard\n      lesson={lesson}\n      index={index}\n      key={lesson.id}\n      onSetDropdown={this.onSetDropdown}\n      onCloseDropdown={this.onCloseDropdown}\n      dropdownIndex={this.state.dropdownIndex}\n      dropdownIsOpen={this.state.dropdownIsOpen}\n      handleLessonClick={this.handleLessonClick}\n      selectedLessons={this.state.selectedLessons}\n    />\n  ))\n\n  render() {\n    const { open } = this.props;\n    const { assignSelectedDropdownOpen, subjectFilters, typeFilters, sort } = this.state;\n    return (\n      <div>\n        {open && (\n          <div className=\"wrapper\">\n              <div className=\"card-modal card-main card switcher-section grey lighten-3\" style = {{minWidth:\"100%\"}}>\n                <div className=\"header-row card-panel light-blue lighten-1 white-text\">\n                  <div className=\"card-panel-row row\">\n                    <div className=\"col s11\">\n                      <div className=\"d-flex\">\n                        <div className=\"icon-col\">\n                          <i className=\"icon-books-l\"></i>\n                        </div>\n                        <div className=\"card-panel-text\">\n                          <div className=\"text-large\">Assign Lessons</div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"col s1 right-align\">\n                      <div className=\"row icons-row\"><a href=\"#\" onClick={this.onCloseModal} className=\"modal-close close\"><i className=\"icon-close-thin\"></i></a></div>\n                    </div>\n                  </div>\n                </div>\n                <FilterSection\n                  sort={sort}\n                  typeFilters={typeFilters}\n                  subjectFilters={subjectFilters}\n                  onSetSort={this.onSetSort}\n                  onClearFilters={this.onResetModal}\n                  handleFilterClick={this.handleFilterClick}\n                  onSetFilteredState={this.onSetFilteredState}\n                  onUnsetFilteredState={this.onUnsetFilteredState}\n                />\n                <div className=\"card-content\">\n                  <div className=\"card-body\">\n                    <div className=\"result-row center-align\">\n                      <b className=\"result\"> - {this.getMappableLessons().length} results -</b>\n                    </div>\n                    <div className=\"checkboxes-section row d-flex-content card-width-322\">\n                      {this.mapLessons()}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"add-btn-block\">\n                <a\n                  href=\"#\"\n                  onClick={this.onToggleAssignSelectedDropdown}\n                  data-target='dropdown_assign_selected_lessons'\n                  className=\"dropdown-trigger waves-effect waves-teal btn add-btn\"\n                >\n                  <i className=\"material-icons\">add</i> Assign Selected\n                </a>\n                <ul\n                  className='dropdown-content'\n                  id='dropdown_assign_selected_lessons'\n                  style={{ display: assignSelectedDropdownOpen ? 'block' : '0', opacity: assignSelectedDropdownOpen ? '1' : '0' }}\n                >\n                  <li><a href=\"#\" onClick={() => this.assignLessons('today')}>For Today</a></li>\n                  <li><a href=\"#\" onClick={() => this.assignLessons('tomorrow')}>For Tomorrow</a></li>\n                  <li><a href=\"#\" onClick={() => this.assignLessons('nextSession')}>For Next Session</a></li>\n                  <li><a href=\"#\" onClick={() => this.assignLessons('customDate')}>For Date...</a></li>\n                </ul>\n              </div>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n}\n\nAssignLessonModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onAssignLessons: PropTypes.func.isRequired,\n};\n\nexport default AssignLessonModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\n\nimport Portal from '../../../../Portal';\nimport ClickOffComponentWrapper from '../../../../ClickOffComponentWrapper';\n\nclass AssignSessionModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: '',\n      startTime: '',\n      endTime: '',\n      notes: '',\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { modalDate } = this.props;\n    if (prevState.date === '' && modalDate) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ date: new Date(modalDate) });\n    }\n  }\n\n  onResetModal = () => this.setState({ date: '', startTime: '', endTime: '', notes: '' })\n\n  onCloseModal = () => {\n    const { onClose } = this.props;\n    onClose();\n    this.onResetModal();\n  }\n\n  assignSession = () => {\n    const { onAssignSession } = this.props;\n    const { date: unformattedDate, startTime: unformattedStartTime, endTime: unformattedEndTime, notes } = this.state;\n    const date = moment(unformattedDate).format('MM/DD/YY');\n    const startTime = moment(unformattedStartTime).format('hh:mm');\n    const endTime = moment(unformattedEndTime).format('hh:mm');\n    onAssignSession({ date, startTime, endTime, notes, title: 'Session' });\n    this.onResetModal();\n  }\n\n  handleDetailsChange = ({ target }) => this.setState({ [target.name]: target.value })\n\n  handleDatePickerChange = (field, value) => this.setState({ [field]: value })\n\n  render() {\n    const { open } = this.props;\n    const { date, startTime, endTime, notes } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={this.onCloseModal}>\n              <div id=\"modal_assign_session\" className=\"modal modal-custom modal-calendar\">\n                <div className=\"card-modal card\">\n                  <div className=\"card-panel card-panel-title\" style={{ backgroundColor: '#14b04b', color: '#fff' }}>\n                    <div className=\"card-panel-row row\">\n                      <div className=\"col\">\n                        <h2>\n                          <span className=\"heading-holder\">\n                            <i className=\"icon-clock2\"></i>\n                            <span className=\"heading-block\"> New Session</span>\n                          </span>\n                        </h2>\n                      </div>\n                      <div className=\"col right-align\">\n                        <a href=\"#!\" className=\"panel-link close modal-close\"><i className=\"icon-close-thin\"></i></a>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"card-content\">\n                    <div className=\"card-body\">\n                      <div className=\"modal-row row\">\n                        <div className=\"col s12\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-calendar\"></i>\n                            <DatePicker\n                              selected={date}\n                              className=\"full-width\"\n                              dateFormat=\"MM/dd/yy\"\n                              id=\"date\"\n                              name=\"date\"\n                              onChange={(event) => this.handleDatePickerChange('date', event)}\n                            />\n                            <label className={date ? 'label active' : 'label'} htmlFor=\"date\">Date</label>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-row row\">\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-clock2\"></i>\n                            <DatePicker\n                              selected={startTime}\n                              showTimeSelect\n                              showTimeSelectOnly\n                              timeIntervals={15}\n                              dateFormat=\"h:mm aa\"\n                              timeCaption=\"Time\"\n                              id=\"startTime\"\n                              name=\"startTime\"\n                              onChange={(event) => this.handleDatePickerChange('startTime', event)}\n                            />\n                            <label className={startTime ? 'label active' : 'label'} htmlFor=\"startTime\">Start Time</label>\n                          </div>\n                        </div>\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-clock2\"></i>\n                            <DatePicker\n                              selected={endTime}\n                              showTimeSelect\n                              showTimeSelectOnly\n                              timeIntervals={15}\n                              dateFormat=\"h:mm aa\"\n                              timeCaption=\"Time\"\n                              id=\"endTime\"\n                              name=\"endTime\"\n                              onChange={(event) => this.handleDatePickerChange('endTime', event)}\n                            />\n                            <label className={endTime ? 'label active' : 'label'} htmlFor=\"endTime\">End Time</label>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-row row\">\n                        <div className=\"col s12\">\n                          <div className=\"input-field input-field-textarea\">\n                            <textarea\n                              id=\"notes\"\n                              name=\"notes\"\n                              className=\"textarea-scroll\"\n                              cols=\"40\" rows=\"7\"\n                              value={notes}\n                              onChange={this.handleDetailsChange}\n                            />\n                            <label className={notes ? 'label active' : 'label'} htmlFor=\"notes\">Session Notes:</label>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"modal-footer modal-footer-width\">\n                      <a href=\"#\" onClick={this.onCloseModal} className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\">Cancel</a>\n                      <a href=\"#\" onClick={this.assignSession} className=\"link-btn waves-effect waves-teal btn-flat\">Add Session</a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 1999;\n            }\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            .modal {\n              display: block;\n              background-color: white;\n              position: absolute;\n              top: 10%;\n              right: 10%;\n              left: 10%;\n              box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12), 0 11px 15px -7px rgba(0, 0, 0, 0.2);\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nAssignSessionModal.propTypes = {\n  modalDate: PropTypes.string,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onAssignSession: PropTypes.func.isRequired,\n};\n\nexport default AssignSessionModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\n\nimport Portal from '../../../../Portal';\nimport ClickOffComponentWrapper from '../../../../ClickOffComponentWrapper';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\n\nconst sampleVersions = [\n  {\n    label: 'SAT Practice Test #1',\n    value: 'SAT Practice Test #1',\n  },\n  {\n    label: 'SAT Practice Test #2',\n    value: 'SAT Practice Test #2',\n  },\n  {\n    label: 'SAT Practice Test #3',\n    value: 'SAT Practice Test #3',\n  },\n];\n\nclass AssignSimulatedSatModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      version: '',\n      assignDate: '',\n      assignTime: '',\n      dueDate: '',\n      dueTime: '',\n      sections: [],\n      allowStudentToEnterAnswers: false,\n      includeScoreInImprovementMetrics: false,\n      timed: false,\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { modalDate } = this.props;\n    if (prevState.assignDate === '' && modalDate) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ assignDate: new Date(modalDate) });\n    }\n  }\n\n  onResetModal = () => this.setState({ version: '', assignDate: '', assignTime: '', dueDate: '', dueTime: '', sections: [], allowStudentToEnterAnswers: false, includeScoreInImprovementMetrics: false, timed: false })\n\n  onCloseModal = () => {\n    const { onClose } = this.props;\n    onClose();\n    this.onResetModal();\n  }\n\n  assignSimulatedSat = () => {\n    const { onAssignSimulatedSat } = this.props;\n    const { version, assignDate: unformattedAssignDate, assignTime: unformattedAssignTime, dueDate: unformattedDueDate, dueTime: unformattedDueTime, sections, allowStudentToEnterAnswers, includeScoreInImprovementMetrics, timed } = this.state;\n    const assignDate = moment(unformattedAssignDate).format('MM/DD/YY');\n    const assignTime = moment(unformattedAssignTime).format('hh:mm');\n    const dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n    const dueTime = moment(unformattedDueTime).format('hh:mm');\n    onAssignSimulatedSat({ version, assignDate, assignTime, dueDate, dueTime, sections, allowStudentToEnterAnswers, includeScoreInImprovementMetrics, timed });\n    this.onResetModal();\n  }\n\n  handleDetailsChange = (event, name = null) => {\n    if (event.target) {\n      const checkboxName = event.target.name;\n      const prevState = this.state[checkboxName]\n      this.setState({ [checkboxName]: !prevState });\n    } else {\n      this.setState({ [name]: event });\n    }\n  }\n\n  handleSectionsChange = (event) => {\n    const { sections } = this.state;\n    if (sections.indexOf(event.target.name) === -1) {\n      const updatedSections = update(sections, {\n        $push: [ event.target.name ],\n      });\n      this.setState({ sections: updatedSections });\n    } else {\n      const sectionIndex = sections.indexOf(event.target.name);\n      const updatedSections = update(sections, {\n        $splice: [[ sectionIndex, 1 ]],\n      });\n      this.setState({ sections: updatedSections });\n    }\n  }\n\n  handleDatePickerChange = (field, value) => this.setState({ [field]: value })\n\n  render() {\n    const { open } = this.props;\n    const { version, assignDate, assignTime, dueDate, dueTime, sections, allowStudentToEnterAnswers, includeScoreInImprovementMetrics, timed } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={this.onCloseModal}>\n              <div id=\"modal_assign_simulated_sat\" className=\"modal modal-custom modal-calendar\">\n                <div className=\"card-modal card\">\n                  <div className=\"card-panel card-panel-title\" style={{ backgroundColor: '#ec3330', color: '#fff' }}>\n                    <div className=\"card-panel-row row\">\n                      <div className=\"col\">\n                        <h2>\n                          <span className=\"heading-holder\">\n                            <i className=\"icon-circles\"></i>\n                            <span className=\"heading-block\"> New Scored SAT Test</span>\n                          </span>\n                        </h2>\n                      </div>\n                      <div className=\"col right-align\">\n                        <a href=\"#\" onClick={this.onCloseModal} className=\"panel-link close modal-close\"><i className=\"icon-close-thin\"></i></a>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"card-content\">\n                    <div className=\"card-body\">\n                      <div className=\"modal-row row\">\n                        <div className=\"col s12\">\n                          <div className=\"input-field\" style={{ marginBottom: '0', marginTop: '0' }}>\n                            <Dropdown\n                              value={getValueFromState(version, sampleVersions)}\n                              onChange={(event) => this.handleDetailsChange(event, 'version')}\n                              options={sampleVersions}\n                              name=\"version\"\n                              label=\"Version\"\n                              stateKey=\"version\"\n                              dropdownKey=\"version\"\n                            />\n\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-row row\">\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-calendar\"></i>\n                            <DatePicker\n                              selected={assignDate}\n                              dateFormat=\"MM/dd/yy\"\n                              id=\"assignDate\"\n                              name=\"assignDate\"\n                              onChange={(event) => this.handleDatePickerChange('assignDate', event)}\n                            />\n                            <label className={assignDate ? 'label active' : 'label'} htmlFor=\"new_test_section_assign_date\">Assign For</label>\n                          </div>\n                        </div>\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-clock2\"></i>\n                            <DatePicker\n                              selected={assignTime}\n                              showTimeSelect\n                              showTimeSelectOnly\n                              timeIntervals={15}\n                              dateFormat=\"h:mm aa\"\n                              timeCaption=\"Time\"\n                              id=\"assignTime\"\n                              name=\"assignTime\"\n                              onChange={(event) => this.handleDatePickerChange('assignTime', event)}\n                            />\n                            <label className={assignTime ? 'label active' : 'label'} htmlFor=\"assignTime\">Time</label>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-row row\">\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-calendar\"></i>\n                            <DatePicker\n                              selected={dueDate}\n                              dateFormat=\"MM/dd/yy\"\n                              id=\"dueDate\"\n                              name=\"dueDate\"\n                              onChange={(event) => this.handleDatePickerChange('dueDate', event)}\n                            />\n                            <label className={dueDate ? 'label active' : 'label'} htmlFor=\"dueDate\">Due (optional)</label>\n                          </div>\n                        </div>\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-clock2\"></i>\n                            <DatePicker\n                              selected={dueTime}\n                              showTimeSelect\n                              showTimeSelectOnly\n                              timeIntervals={15}\n                              dateFormat=\"h:mm aa\"\n                              timeCaption=\"Time\"\n                              id=\"dueTime\"\n                              name=\"dueTime\"\n                              onChange={(event) => this.handleDatePickerChange('dueTime', event)}\n                            />\n                            <label className={dueTime ? 'label active' : 'label'} htmlFor=\"dueTime\">Time</label>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-row row\">\n                        <div className=\"col s12\">\n                          <span className=\"card-subtitle\">Sections:</span>\n                          <div className=\"check-holder\">\n                            <div className=\"row mb-0\">\n                              <div className=\"col s6\">\n                                <p>\n                                  <label>\n                                    <input\n                                      type=\"checkbox\"\n                                      className=\"filled-in\"\n                                      name=\"Reading\"\n                                      id=\"reading\"\n                                      checked={sections.indexOf('Reading') !== -1}\n                                      onChange={this.handleSectionsChange}\n                                    />\n                                    <span>Reading</span>\n                                  </label>\n                                </p>\n                                <p>\n                                  <label>\n                                    <input\n                                      type=\"checkbox\"\n                                      className=\"filled-in\"\n                                      name=\"Math (no calc)\"\n                                      id=\"mathNoCalc\"\n                                      checked={sections.indexOf('Math (no calc)') !== -1}\n                                      onChange={this.handleSectionsChange}\n                                    />\n                                    <span>Math (no calc)</span>\n                                  </label>\n                                </p>\n                              </div>\n                              <div className=\"col s6\">\n                                <p>\n                                  <label>\n                                    <input\n                                      type=\"checkbox\"\n                                      className=\"filled-in\"\n                                      name=\"Writing\"\n                                      id=\"writing\"\n                                      checked={sections.indexOf('Writing') !== -1}\n                                      onChange={this.handleSectionsChange}\n                                    />\n                                    <span>Writing</span>\n                                  </label>\n                                </p>\n                                <p>\n                                  <label>\n                                    <input\n                                      type=\"checkbox\"\n                                      className=\"filled-in\"\n                                      name=\"Math (calculator)\"\n                                      id=\"Math (calculator)\"\n                                      checked={sections.indexOf('Math (calculator)') !== -1}\n                                      onChange={this.handleSectionsChange}\n                                    />\n                                    <span>Math (calculator)</span>\n                                  </label>\n                                </p>\n                              </div>\n                            </div>\n                            <span className=\"card-note\">Note: scaled test scores may require combinations of sections</span>\n                          </div>\n                          <p>\n                            <label>\n                              <input\n                                type=\"checkbox\"\n                                className=\"filled-in\"\n                                name=\"allowStudentToEnterAnswers\"\n                                id=\"allowStudentToEnterAnswers\"\n                                checked={allowStudentToEnterAnswers}\n                                onChange={this.handleDetailsChange}\n                              />\n                              <span>Allow Student to Enter Answers</span>\n                            </label>\n                          </p>\n                          <p>\n                            <label>\n                              <input\n                                type=\"checkbox\"\n                                className=\"filled-in\"\n                                name=\"includeScoreInImprovementMetrics\"\n                                id=\"includeScoreInImprovementMetrics\"\n                                checked={includeScoreInImprovementMetrics}\n                                onChange={this.handleDetailsChange}\n                              />\n                              <span>Include Score in Improvement Metrics</span>\n                            </label>\n                          </p>\n                          <p>\n                            <label>\n                              <input\n                                type=\"checkbox\"\n                                className=\"filled-in\"\n                                name=\"timed\"\n                                id=\"timed\"\n                                checked={timed}\n                                onChange={this.handleDetailsChange}\n                              />\n                              <span>Timed</span>\n                            </label>\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"modal-footer modal-footer-width\">\n                      <a href=\"#\" onClick={this.onCloseModal} className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\">Cancel</a>\n                      <a href=\"#\" onClick={this.assignSimulatedSat} className=\"link-btn waves-effect waves-teal btn-flat\">Save</a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n        {`\n          .overlay {\n            position: fixed;\n            background-color: rgba(0, 0, 0, 0.7);\n            top: 0;\n            right: 0;\n            bottom: 0;\n            left: 0;\n            z-index: 1999;\n          }\n          .card-modal {\n            margin: 0;\n            border-radius: 6px;\n          }\n          .modal {\n            display: block;\n            background-color: white;\n            position: absolute;\n            top: 10%;\n            right: 10%;\n            left: 10%;\n            box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12), 0 11px 15px -7px rgba(0, 0, 0, 0.2);\n          }\n          .modal-custom {\n            opacity: 1;\n            visibility: visible;\n          }\n        `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nAssignSimulatedSatModal.propTypes = {\n  modalDate: PropTypes.string,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onAssignSimulatedSat: PropTypes.func.isRequired,\n};\n\nexport default AssignSimulatedSatModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Portal from '../../../../Portal';\nimport ClickOffComponentWrapper from '../../../../ClickOffComponentWrapper';\n\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\n\nconst testDateOptions = [\n  {\n    label: 'January SAT (01/15/2019)',\n    value: '01/15/19',\n  },\n  {\n    label: 'January SAT (01/02/2019)',\n    value: '01/02/19',\n  },\n  {\n    label: 'January SAT (01/21/2019)',\n    value: '01/21/19',\n  },\n]\n\nclass AssignTargetTestModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      testDate: '',\n    };\n  }\n\n  onSetTestDate = (testDate) => this.setState({ testDate })\n\n  onCloseModal = () => this.setState({ testDate: '' }, this.props.onClose)\n\n  assignTargetTest = () => {\n    const { onAssignTargetTest } = this.props;\n    const { testDate } = this.state;\n    onAssignTargetTest(testDate);\n    this.onCloseModal();\n  }\n\n  render() {\n    const { open } = this.props;\n    const { testDate } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={this.onCloseModal}>\n              <div id=\"modal_assign_target_test\" className=\"modal modal-custom modal-calendar\" style={{ zIndex: '1003', top: '10%' }}>\n                <div className=\"card-modal card\">\n                  <div className=\"card-panel card-panel-title\" style={{ backgroundColor: '#ec3330', color: '#fff' }}>\n                    <div className=\"card-panel-row row\">\n                      <div className=\"col\">\n                        <h2>\n                          <span className=\"heading-holder\">\n                            <i className=\"icon-cup\"></i>\n                            <span className=\"heading-block\"> Set Target Test Date</span>\n                          </span>\n                        </h2>\n                      </div>\n                      <div className=\"col right-align\">\n                        <a href=\"#\" className=\"panel-link close modal-close\"><i className=\"icon-close-thin\"></i></a>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"card-content\">\n                    <div className=\"card-body\">\n                      <div className=\"modal-row row\">\n                        <div className=\"col s12\">\n                          <div className=\"input-field\" style={{ marginBottom: '0', marginTop: '0' }}>\n                            <Dropdown\n                              value={getValueFromState(testDate, testDateOptions)}\n                              onChange={this.onSetTestDate}\n                              options={testDateOptions}\n                              label=\"Test Date\"\n                              stateKey=\"testDate\"\n                              dropdownKey=\"testDate\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-row row\">\n                        <div className=\"col s12\">\n                          <span className=\"note\">Note:</span>\n                          <p>If the student plans to take the SAT multiple times, you may schedule multiple “Target Test Dates.” Test score and improvement metrics will be based on the student’s score on the ﬁnal target test date.</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"modal-footer modal-footer-width\">\n                      <a href=\"#\" onClick={this.onCloseModal} className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\">Cancel</a>\n                      <a href=\"#\" onClick={this.assignTargetTest} className=\"link-btn waves-effect waves-teal btn-flat\">Set Target Test Date</a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 1999;\n            }\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nAssignTargetTestModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onAssignTargetTest: PropTypes.func.isRequired,\n};\n\nexport default AssignTargetTestModal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-datepicker/dist/react-datepicker-cssmodules.css\";\n\nimport Portal from \"../../../../Portal\";\nimport ClickOffComponentWrapper from \"../../../../ClickOffComponentWrapper\";\nimport Dropdown from \"../../../../FormComponents/Dropdown\";\nimport getValueFromState from \"../../../../utils/getValueFromState\";\n\nimport { assignTestToStudentApi } from \"../../../../Student/index/api\";\n\nconst sampleVersions = [\n  {\n    label: \"SAT Practice Test #1\",\n    value: \"SAT Practice Test #1\",\n  },\n  {\n    label: \"SAT Practice Test #2\",\n    value: \"SAT Practice Test #2\",\n  },\n  {\n    label: \"SAT Practice Test #3\",\n    value: \"SAT Practice Test #3\",\n  },\n];\n\nconst sampleSections = [\n  {\n    label: \"Math (no calc)\",\n    value: \"Math (no calc)\",\n  },\n  {\n    label: \"Reading\",\n    value: \"Reading\",\n  },\n  {\n    label: \"Writing\",\n    value: \"Writing\",\n  },\n  {\n    label: \"Math (calculator)\",\n    value: \"Math (calculator)\",\n  },\n];\n\nconst uuidGenerator = require(\"uuid/v4\");\n\nclass AssignTestSectionModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      version: \"\",\n      section: \"\",\n      assignDate: \"\",\n      assignTime: \"\",\n      dueDate: \"\",\n      dueTime: \"\",\n      timed: false,\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { modalDate } = this.props;\n    if (prevState.assignDate === \"\" && modalDate) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ assignDate: new Date(modalDate) });\n    }\n  }\n\n  onResetModal = () =>\n    this.setState({\n      version: \"\",\n      section: \"\",\n      assignDate: \"\",\n      assignTime: \"\",\n      dueDate: \"\",\n      dueTime: \"\",\n      timed: false,\n    });\n\n  onCloseModal = () => {\n    const { onClose } = this.props;\n    onClose();\n    this.onResetModal();\n  };\n\n  assignTestSection = () => {\n    const { onAssignTestSection } = this.props;\n    const {\n      version,\n      section,\n      assignDate: unformattedAssignDate,\n      assignTime: unformattedAssignTime,\n      dueDate: unformattedDueDate,\n      dueTime: unformattedDueTime,\n      timed,\n    } = this.state;\n    const assignDate = moment(unformattedAssignDate).format(\"MM/DD/YY\");\n    const assignTime = moment(unformattedAssignTime).format(\"hh:mm\");\n    const dueDate = moment(unformattedDueDate).format(\"MM/DD/YY\");\n    const dueTime = moment(unformattedDueTime).format(\"hh:mm\");\n    onAssignTestSection({\n      version,\n      section,\n      assignDate,\n      assignTime,\n      dueDate,\n      dueTime,\n      timed,\n    });\n    this.onResetModal();\n    const {\n      user: { id },\n    } = this.props;\n    const postBody = {\n      student_id: id,\n      test_id: uuidGenerator(),\n      assignment_date: moment(unformattedAssignDate).format(\"YYYY-MM-DD\"),\n      due_date: moment(unformattedDueDate).format(\"YYYY-MM-DD\"),\n    };\n    assignTestToStudentApi(postBody);\n  };\n\n  handleDetailsChange = (event, name = null) => {\n    if (event.target) {\n      this.setState(({ timed }) => ({ timed: !timed }));\n    } else {\n      this.setState({ [name]: event });\n    }\n  };\n\n  handleDatePickerChange = (field, value) => this.setState({ [field]: value });\n\n  render() {\n    const { open } = this.props;\n    const {\n      version,\n      section,\n      assignDate,\n      assignTime,\n      dueDate,\n      dueTime,\n      timed,\n    } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={this.onCloseModal}>\n              <div\n                id=\"modal_assign_test_section\"\n                className=\"modal modal-custom modal-460\"\n              >\n                <div className=\"card-modal card\">\n                  <div\n                    className=\"card-panel card-panel-title\"\n                    style={{ backgroundColor: \"#00638e\", color: \"#fff\" }}\n                  >\n                    <div className=\"card-panel-row row\">\n                      <div className=\"col\">\n                        <h2 className=\"h3\">\n                          <span className=\"heading-holder\">\n                            <i className=\"icon-assign-section\"></i>\n                            <span className=\"heading-block\">\n                              {\" \"}\n                              Assign Test Section (as coursework)\n                            </span>\n                          </span>\n                        </h2>\n                      </div>\n                      <div className=\"col right-align\">\n                        <a\n                          href=\"#!\"\n                          onClick={this.onCloseModal}\n                          className=\"panel-link close modal-close\"\n                        >\n                          <i className=\"icon-close-thin\"></i>\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"card-content\">\n                    <div className=\"card-body\">\n                      <div className=\"modal-filter-row row\">\n                        <div className=\"col s12\">\n                          <div\n                            className=\"input-field\"\n                            style={{ marginBottom: \"0\", marginTop: \"0\" }}\n                          >\n                            <div className=\"select-wrapper\" style={{ overflow: 'visible' }}>\n                              <Dropdown\n                                value={getValueFromState(\n                                  version,\n                                  sampleVersions,\n                                )}\n                                onChange={event =>\n                                  this.handleDetailsChange(event, \"version\")\n                                }\n                                options={sampleVersions}\n                                name=\"version\"\n                                label=\"Version\"\n                                stateKey=\"version\"\n                                dropdownKey=\"version\"\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-filter-row row\">\n                        <div className=\"col s12\">\n                          <div\n                            className=\"input-field\"\n                            style={{ marginBottom: \"0\", marginTop: \"0\" }}\n                          >\n                            <div className=\"select-wrapper\">\n                              <Dropdown\n                                value={getValueFromState(\n                                  section,\n                                  sampleSections,\n                                )}\n                                onChange={event =>\n                                  this.handleDetailsChange(event, \"section\")\n                                }\n                                options={sampleSections}\n                                name=\"section\"\n                                label=\"Section\"\n                                stateKey=\"section\"\n                                dropdownKey=\"section\"\n                              />\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-calendar\"></i>\n                            <DatePicker\n                              selected={assignDate}\n                              dateFormat=\"MM/dd/yy\"\n                              id=\"assignDate\"\n                              name=\"assignDate\"\n                              onChange={event =>\n                                this.handleDatePickerChange(\"assignDate\", event)\n                              }\n                            />\n                            <label\n                              className={assignDate ? \"label active\" : \"label\"}\n                              htmlFor=\"new_test_section_assign_date\"\n                            >\n                              Assign For\n                            </label>\n                          </div>\n                        </div>\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-clock2\"></i>\n                            <DatePicker\n                              selected={assignTime}\n                              showTimeSelect\n                              showTimeSelectOnly\n                              timeIntervals={15}\n                              dateFormat=\"h:mm aa\"\n                              timeCaption=\"Time\"\n                              id=\"assignTime\"\n                              name=\"assignTime\"\n                              onChange={event =>\n                                this.handleDatePickerChange(\"assignTime\", event)\n                              }\n                            />\n                            <label\n                              className={assignTime ? \"label active\" : \"label\"}\n                              htmlFor=\"assignTime\"\n                            >\n                              Time\n                            </label>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-row row\">\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-calendar\"></i>\n                            <DatePicker\n                              selected={dueDate}\n                              dateFormat=\"MM/dd/yy\"\n                              id=\"dueDate\"\n                              name=\"dueDate\"\n                              onChange={event =>\n                                this.handleDatePickerChange(\"dueDate\", event)\n                              }\n                            />\n                            <label\n                              className={dueDate ? \"label active\" : \"label\"}\n                              htmlFor=\"dueDate\"\n                            >\n                              Due (optional)\n                            </label>\n                          </div>\n                        </div>\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-clock2\"></i>\n                            <DatePicker\n                              selected={dueTime}\n                              showTimeSelect\n                              showTimeSelectOnly\n                              timeIntervals={15}\n                              dateFormat=\"h:mm aa\"\n                              timeCaption=\"Time\"\n                              id=\"dueTime\"\n                              name=\"dueTime\"\n                              onChange={event =>\n                                this.handleDatePickerChange(\"dueTime\", event)\n                              }\n                            />\n                            <label\n                              className={dueTime ? \"label active\" : \"label\"}\n                              htmlFor=\"dueTime\"\n                            >\n                              Time\n                            </label>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-row row\">\n                        <div className=\"col s12\">\n                          <p>\n                            <label>\n                              <input\n                                type=\"checkbox\"\n                                className=\"filled-in\"\n                                name=\"timed\"\n                                id=\"timed\"\n                                checked={timed}\n                                onChange={this.handleDetailsChange}\n                              />\n                              <span>Timed</span>\n                            </label>\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"modal-footer modal-footer-width\">\n                      <a\n                        href=\"#\"\n                        onClick={this.onCloseModal}\n                        className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\"\n                      >\n                        Cancel\n                      </a>\n                      <a\n                        href=\"#\"\n                        onClick={this.assignTestSection}\n                        className=\"link-btn waves-effect waves-teal btn-flat\"\n                      >\n                        Save\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 1999;\n            }\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            .modal {\n              display: block;\n              background-color: white;\n              position: absolute;\n              top: 10%;\n              right: 10%;\n              left: 10%;\n              box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14),\n                0 9px 46px 8px rgba(0, 0, 0, 0.12),\n                0 11px 15px -7px rgba(0, 0, 0, 0.2);\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nAssignTestSectionModal.propTypes = {\n  modalDate: PropTypes.string,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onAssignTestSection: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired,\n};\n\nexport default AssignTestSectionModal;\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from '../../../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../../../utils/getValueFromState';\n\nconst sortByOptions = [\n  {\n    label: 'Difficulty',\n    value: 'difficulty',\n  },\n  {\n    label: 'Problems',\n    value: 'problems',\n  },\n  {\n    label: 'Time Estimate',\n    value: 'timeEstimate',\n  },\n  {\n    label: 'Subject',\n    value: 'subject',\n  },\n];\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      titleFilter: '',\n      unitFilter: '',\n    }\n  };\n\n  onToggleShowFilters = () => this.setState(({ open }) => ({ open: !open }))\n\n  onClearFilters = () => this.setState({ titleFilter: '', unitFilter: '' }, this.props.onClearFilters)\n\n  handleSearchChange = ({ target }) => this.setState({ [target.name]: target.value })\n\n  submitSearchFilter = (searchType) => {\n    const { onSetFilteredState, onUnsetFilteredState } = this.props;\n    if (this.state[searchType] === '') {\n      onUnsetFilteredState(searchType);\n    }\n    const transformedTitle = this.state[searchType].replace(/\\s/g, \"\").toLowerCase();\n    onSetFilteredState(searchType, transformedTitle);\n  }\n\n  render() {\n    const { handleFilterClick, subjectFilters, typeFilters, sourceFilters, difficultyFilters, sort, onSetSort } = this.props;\n    const { open, titleFilter, unitFilter } = this.state;\n    return (\n      <div className=\"filter-form-holder\">\n        <ul className=\"collapsible expandable\" style={{ minHeight: '0' }}>\n          <li>\n            <div className=\"collapsible-body\" style={open ? { display: 'block' } : { display: 'none' }}>\n              <div className=\"filter-form_checkbox-list-holder justify-center\">\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"readingSubject\"\n                      name=\"readingSubject\"\n                      checked={subjectFilters.indexOf('readingSubject') !== -1}\n                      onChange={({ target }) => handleFilterClick('subject', target.name)}\n                    />\n                    <label htmlFor=\"readingSubject\">Reading</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"writingSubject\"\n                      name=\"writingSubject\"\n                      checked={subjectFilters.indexOf('writingSubject') !== -1}\n                      onChange={({ target }) => handleFilterClick('subject', target.name)}\n                    />\n                    <label htmlFor=\"writingSubject\">Writing</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"mathSubject\"\n                      name=\"mathSubject\"\n                      checked={subjectFilters.indexOf('mathSubject') !== -1}\n                      onChange={({ target }) => handleFilterClick('subject', target.name)}\n                    />\n                    <label htmlFor=\"mathSubject\">Math</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"mixedDifficulty\"\n                      name=\"mixedDifficulty\"\n                      checked={subjectFilters.indexOf('mixedDifficulty') !== -1}\n                      onChange={({ target }) => handleFilterClick('subject', target.name)}\n                    />\n                    <label htmlFor=\"mixedDifficulty\">Mixed</label>\n                  </li>\n                </ul>\n\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"satPractice\"\n                      name=\"satPractice\"\n                      checked={typeFilters.indexOf('satPractice') !== -1}\n                      onChange={({ target }) => handleFilterClick('type', target.name)}\n                    />\n                    <label htmlFor=\"satPractice\">SAT Practice</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"skillBuilders\"\n                      name=\"skillBuilders\"\n                      checked={typeFilters.indexOf('skillBuilders') !== -1}\n                      onChange={({ target }) => handleFilterClick('type', target.name)}\n                    />\n                    <label htmlFor=\"skillBuilders\">Skill Builders</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"mixedType\"\n                      name=\"mixedType\"\n                      checked={typeFilters.indexOf('mixedType') !== -1}\n                      onChange={({ target }) => handleFilterClick('type', target.name)}\n                    />\n                    <label htmlFor=\"mixedType\">Mixed</label>\n                  </li>\n                </ul>\n\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"builtIn\"\n                      name=\"builtIn\"\n                      checked={sourceFilters.indexOf('builtIn') !== -1}\n                      onChange={({ target }) => handleFilterClick('source', target.name)}\n                    />\n                    <label htmlFor=\"builtIn\">Built-In</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"userCreated\"\n                      name=\"userCreated\"\n                      checked={sourceFilters.indexOf('userCreated') !== -1}\n                      onChange={({ target }) => handleFilterClick('source', target.name)}\n                    />\n                    <label htmlFor=\"userCreated\">User Created</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"easy\"\n                      name=\"easy\"\n                      checked={difficultyFilters.indexOf('easy') !== -1}\n                      onChange={({ target }) => handleFilterClick('difficulty', target.name)}\n                    />\n                    <label htmlFor=\"easy\">Easy</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"medium\"\n                      name=\"medium\"\n                      checked={difficultyFilters.indexOf('medium') !== -1}\n                      onChange={({ target }) => handleFilterClick('difficulty', target.name)}\n                    />\n                    <label htmlFor=\"medium\">Medium</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"difficult\"\n                      name=\"difficult\"\n                      checked={difficultyFilters.indexOf('difficult') !== -1}\n                      onChange={({ target }) => handleFilterClick('difficulty', target.name)}\n                    />\n                    <label htmlFor=\"difficult\">Diﬃcult</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"mixedDifficulty\"\n                      name=\"mixedDifficulty\"\n                      checked={difficultyFilters.indexOf('mixedDifficulty') !== -1}\n                      onChange={({ target }) => handleFilterClick('difficulty', target.name)}\n                    />\n                    <label htmlFor=\"mixedDifficulty\">Mixed</label>\n                  </li>\n                </ul>\n              </div>\n              <div className=\"d-flex row mb-0 justify-center\">\n                <div className=\"col s12 m3\">\n                  <div className=\"search-field input-field\">\n                    <input\n                      type=\"search\"\n                      id=\"titleFilter\"\n                      name=\"titleFilter\"\n                      className=\"input-control validate\"\n                      value={titleFilter}\n                      onChange={this.handleSearchChange}\n                    />\n                    <button type=\"submit\" onClick={() => this.submitSearchFilter('titleFilter')} className=\"search-button\"><i className=\"icon-search\"></i></button>\n                    <label className={titleFilter.length ? 'label active' : 'label'} htmlFor=\"titleFilter\">Search By Title</label>\n                  </div>\n                </div>\n                <div className=\"col s12 m3\">\n                  <div className=\"search-field input-field\">\n                    <input\n                      type=\"search\"\n                      id=\"unitFilter\"\n                      name=\"unitFilter\"\n                      className=\"input-control validate\"\n                      value={unitFilter}\n                      onChange={this.handleSearchChange}\n                    />\n                    <button type=\"submit\" onClick={() => this.submitSearchFilter('unitFilter')} className=\"search-button\"><i className=\"icon-search\"></i></button>\n                    <label className={unitFilter.length ? 'label active' : 'label'} htmlFor=\"unitFilter\">Search By Unit</label>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row mb-0 d-flex align-items-center\">\n              <div className=\"col s12 l4\">\n                <div className=\"row mb-0\">\n                  <div className=\"col s12 m6\">\n                    <div className=\"input-field\" style={{ marginBottom: '0', marginTop: '0' }}>\n                      <Dropdown\n                        value={getValueFromState(sort, sortByOptions)}\n                        onChange={onSetSort}\n                        options={sortByOptions}\n                        label=\"Sort By\"\n                        stateKey=\"sort\"\n                        dropdownKey=\"sort\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"switcher-block col s12 l4\">\n                <div className=\"view-switcher\">\n                  <ul className=\"switcher center-align\">\n                    <li className=\"active\" data-view=\"view-full\"><a href=\"#\">Month View</a></li>\n                    <li data-view=\"view-list\"><a href=\"#\">Day View</a></li>\n                  </ul>\n                </div>\n              </div>\n              <div className=\"col s12 l4\">\n                <div className=\"option-filters\">\n                  <div className=\"option-item clear\"><a href=\"#\" onClick={this.onClearFilters}>Clear Filters</a></div>\n                  <div className=\"option-item\">\n                    <span\n                      className=\"collapsible-header\"\n                      onClick={this.onToggleShowFilters}\n                    >\n                      <span className=\"open-text\">{open ? 'Hide Filters' : 'Open Filters'}</span>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nFilterSection.propTypes = {\n  sort: PropTypes.string.isRequired,\n  onSetSort: PropTypes.func.isRequired,\n  typeFilters: PropTypes.array.isRequired,\n  onClearFilters: PropTypes.func.isRequired,\n  sourceFilters: PropTypes.array.isRequired,\n  subjectFilters: PropTypes.array.isRequired,\n  difficultyFilters: PropTypes.array.isRequired,\n  handleFilterClick: PropTypes.func.isRequired,\n  onSetFilteredState: PropTypes.func.isRequired,\n  onUnsetFilteredState: PropTypes.func.isRequired,\n}\n\nexport default FilterSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass WorksheetCard extends React.Component {\n  handleDropdownClick = (event) => {\n    const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  }\n\n  editWorksheet = () => console.warn('Pending implementation of edit modal/functionality')\n  cloneWorksheet = () => console.warn('Pending implementation of clone worksheet functionality')\n  showOwner = () => console.warn('Pending implementation of show owner functionality')\n  deleteWorksheet = () => console.warn('Pending implementation of delete worksheet functionality')\n\n  render() {\n    const { worksheet, selectedWorksheets, handleWorksheetClick, index, dropdownIndex, dropdownIsOpen } = this.props;\n    const { title, subject, problems, type, difficulty, timeEstimate, source, classifications } = worksheet;\n    return (\n      <div className=\"card-main-col col s12 m8 l7 xl5\">\n        <div className=\"card-checkbox\">\n          <input\n            type=\"checkbox\"\n            checked={selectedWorksheets.indexOf(worksheet) !== -1}\n            onChange={() => handleWorksheetClick(worksheet)}\n          />\n          <div className=\"checkbox-card card-main card-lesson-detail card-assigned card\">\n            <div className=\"card-panel\" style={{ backgroundColor: '#666', color: '#fff' }}>\n              <div className=\"card-panel-row row\">\n                <div className=\"icon-col col s2\">\n                  <span className=\"block-icon\">\n                    <i className=\"icon-sheets-w\"></i>\n                  </span>\n                </div>\n                <div className=\"col s9\">\n                  <div className=\"card-panel-text\">\n                    <div className=\"text-small\">Worksheet ({subject})</div>\n                    <div className=\"text-large\">{title}</div>\n                  </div>\n                </div>\n                <div className=\"align-top col s1 right-align\">\n                  <div className=\"row icons-row\">\n                    <div className=\"dropdown-block col\">\n                      <a\n                        href='#'\n                        className='dropdown-trigger btn'\n                        data-target='dropdown_worksheet_01'\n                        onClick={this.handleDropdownClick}\n                      >\n                        <i className=\"material-icons dots-icon\">more_vert</i>\n                      </a>\n                      <If condition={dropdownIsOpen && dropdownIndex === index}>\n                        <ul\n                          id='dropdown_worksheet_01'\n                          className='dropdown-content dropdown-wide'\n                          style={{ display: 'block', transformOrigin: '0px 0px 0px', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}\n                        >\n                          <li><a href=\"#\" onClick={this.editWorksheet} className=\"modal-trigger link-block\">Edit</a></li>\n                          <li><a href=\"#\" onClick={this.cloneWorksheet}>Clone</a></li>\n                          <li><a href=\"#\" onClick={this.showOwner}>Show Owner</a></li>\n                          <li><a href=\"#\" onClick={this.deleteWorksheet}>Delete</a></li>\n                        </ul>\n                      </If>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card-top-block\">\n                <div className=\"d-flex row mb-0\">\n                  <div className=\"left-col col s6\">\n                    <dl className=\"dl-horizontal\">\n                      <dt>Problem Type:</dt>\n                      <dd>{type}</dd>\n                    </dl>\n                  </div>\n                  <div className=\"right-col col s6 right-align\">\n                    <dl className=\"dl-horizontal\">\n                      <dt>Diﬃculty:</dt>\n                      <dd>{difficulty}</dd>\n                    </dl>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"card-content\">\n              <div className=\"chart-container\">\n                <div className=\"chart-holder\">\n                  <span className=\"svg-curved-bar\" data-values='{\"from\": 0, \"to\": 100, \"current\": 0}' data-duration=\"1\">\n                    {/* <!-- do not change path attribute \"d\" !!! --> */}\n                    <svg  width=\"110px\" height=\"110px\" viewBox=\" 0 0 110 110\">\n                      <path fill=\"none\" style={{ strokeWidth: '22', stroke: '#eaeaea' }} d=\"M 14.151810947292809 71.35314804905443 A 44 44 0 1 1 95.8481890527072 71.35314804905443\"></path>\n                      <path data-dinamic fill=\"none\" style={{ strokeWidth: '22', stroke: '#31837a' }} d=\"M 14.151810947292809 71.35314804905443 A 44 44 0 0 1 14.151810947292809 71.35314804905443\"></path>\n                    </svg>\n                  </span>\n                  <span className=\"chart-value\" style={{ backgroundColor: '#4d4d4d' }}></span>\n                </div>\n                <div className=\"chart-description\">\n                  <dl className=\"dl-horizontal\">\n                    <dt>Time Est:</dt>\n                    <dd>{timeEstimate} min</dd>\n                  </dl>\n                  <dl className=\"dl-horizontal\">\n                    <dt>Problems:</dt>\n                    <dd>{problems}</dd>\n                  </dl>\n                </div>\n              </div>\n              <div className=\"card-text\">\n                <dl className=\"dl-horizontal\">\n                  <dt>Worksheet Source:</dt>\n                  <dd>{source}</dd>\n                </dl>\n              </div>\n              <div className=\"card-inner-row\">\n                <div className=\"row-holder\">\n                  <ul className=\"classification-list\">\n                    <Choose>\n                      <When condition={classifications.length}>\n                        {classifications.map(classification => (\n                          <li key={classification} className=\"class-box\">{classification}</li>\n                        ))}\n                      </When>\n                      <Otherwise>\n                        <li className=\"empty-box\">no classiﬁcation</li>\n                      </Otherwise>\n                    </Choose>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nWorksheetCard.propTypes = {\n  index: PropTypes.number,\n  dropdownIndex: PropTypes.number,\n  worksheet: PropTypes.object.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  selectedWorksheets: PropTypes.array.isRequired,\n  handleWorksheetClick: PropTypes.func.isRequired,\n}\n\nexport default WorksheetCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\n\nimport Portal from '../../../../Portal';\n\nimport FilterSection from './components/FilterSection';\nimport WorksheetCard from './components/WorksheetCard';\nimport { difficultySort, problemSort, timeEstimateSort, subjectSort } from '../../../utils/sortOptions';\nimport sampleWorksheets from '../../../utils/sampleWorksheets';\nimport { worksheetTypeMap, worksheetSourceMap, worksheetDifficultyMap, worksheetSubjectMap } from '../../../utils/worksheetModalMaps';\n\nclass AssignWorksheetModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sort: '',\n      unitFilter: '',\n      titleFilter: '',\n      typeFilters: [],\n      sourceFilters: [],\n      subjectFilters: [],\n      selectedWorksheets: [],\n      difficultyFilters: [],\n      worksheets: sampleWorksheets,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      assignSelectedDropdownOpen: false,\n    };\n  }\n\n  onToggleAssignSelectedDropdown = () => this.setState(({ assignSelectedDropdownOpen }) => ({ assignSelectedDropdownOpen: !assignSelectedDropdownOpen }))\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  onResetModal = () => this.setState({ sourceFilters: [], difficultyFilters: [], subjectFilters: [], typeFilters: [], sort: '' })\n  onSetSort = (sort) => this.setState({ sort })\n\n  onSetFilteredState = (titleFilter, value) => this.setState({ [titleFilter]: value })\n  onUnsetFilteredState = (titleFilter) => this.setState({ [titleFilter]: '' })\n\n  onCloseModal = () => {\n    const { onClose } = this.props;\n    onClose();\n    this.onResetModal();\n  }\n\n  // eslint-disable-next-line consistent-return\n  onSortWorksheets = (worksheets) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case 'difficulty':\n        return worksheets.sort(difficultySort);\n      case 'problems':\n        return worksheets.sort(problemSort);\n      case 'timeEstimate':\n        return worksheets.sort(timeEstimateSort);\n      case 'subject':\n        return worksheets.sort(subjectSort);\n      default:\n        break;\n    }\n  }\n\n  onFilterByTitle = () => {\n    const { worksheets, titleFilter } = this.state;\n    return worksheets.reduce((finalArr, currentWorksheet) => {\n      const { title } = currentWorksheet;\n      const worksheetString = title.replace(/\\s/g, \"\").toLowerCase();\n      if (worksheetString.indexOf(titleFilter) !== -1 && finalArr.indexOf(currentWorksheet) === -1) {\n        finalArr.push(currentWorksheet);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterByUnit = () => {\n    const { worksheets, unitFilter } = this.state;\n    return worksheets.reduce((finalArr, currentWorksheet) => {\n      const { unit } = currentWorksheet;\n      const worksheetString = unit.replace(/\\s/g, \"\").toLowerCase();\n      if (worksheetString.indexOf(unitFilter) !== -1 && finalArr.indexOf(currentWorksheet) === -1) {\n        finalArr.push(currentWorksheet);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterWorksheets = () => {\n    const { subjectFilters, typeFilters, sourceFilters, difficultyFilters, worksheets: allWorksheets } = this.state;\n    let worksheets = allWorksheets;\n    if (subjectFilters.length) {\n      worksheets = worksheets.filter(worksheet => subjectFilters.indexOf(worksheetSubjectMap[worksheet.subject]) !== -1);\n    }\n    if (typeFilters.length) {\n      worksheets = worksheets.filter(worksheet => typeFilters.indexOf(worksheetTypeMap[worksheet.type]) !== -1);\n    }\n    if (sourceFilters.length) {\n      worksheets = worksheets.filter(worksheet => sourceFilters.indexOf(worksheetSourceMap[worksheet.source]) !== -1);\n    }\n    if (difficultyFilters.length) {\n      worksheets = worksheets.filter(worksheet => difficultyFilters.indexOf(worksheetDifficultyMap[worksheet.difficulty]) !== -1);\n    }\n    return worksheets;\n  }\n\n  getMappableWorksheets = () => {\n    const { subjectFilters, typeFilters, difficultyFilters, sourceFilters, sort, unitFilter, titleFilter, worksheets } = this.state;\n    let mappableWorksheets = worksheets;\n    if (titleFilter.length) {\n      mappableWorksheets = this.onFilterByTitle();\n    }\n    if (unitFilter.length) {\n      mappableWorksheets = this.onFilterByUnit();\n    }\n    if (subjectFilters.length || typeFilters.length || difficultyFilters.length || sourceFilters.length) {\n      mappableWorksheets = this.onFilterWorksheets();\n    }\n    if (sort) {\n      return this.onSortWorksheets(mappableWorksheets);\n    }\n    return mappableWorksheets;\n  }\n\n  handleFilterClick = (filterType, filter) => {\n    const { sourceFilters: currentSourceFilters, difficultyFilters: currentDifficultyFilters,\n      subjectFilters: currentSubjectFilters, typeFilters: currentTypeFilters } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case 'subject':\n        modifiedFilterCurrentState = currentSubjectFilters;\n        modifiedFilterName = 'subjectFilters';\n        break;\n      case 'type':\n        modifiedFilterCurrentState = currentTypeFilters;\n        modifiedFilterName = 'typeFilters';\n        break;\n      case 'source':\n        modifiedFilterCurrentState = currentSourceFilters;\n        modifiedFilterName = 'sourceFilters';\n        break;\n      case 'difficulty':\n        modifiedFilterCurrentState = currentDifficultyFilters;\n        modifiedFilterName = 'difficultyFilters';\n        break;\n      default:\n        break;\n    }\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[ filterIndex, 1 ]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  }\n\n  handleWorksheetClick = (worksheet) => {\n    const { selectedWorksheets } = this.state;\n    let modifiedWorksheets;\n    if (selectedWorksheets.indexOf(worksheet) === -1) {\n      modifiedWorksheets = update(selectedWorksheets, {\n        $push: [worksheet],\n      });\n    } else {\n      const worksheetIndex = selectedWorksheets.indexOf(worksheet);\n      modifiedWorksheets = update(selectedWorksheets, {\n        $splice: [[ worksheetIndex, 1 ]],\n      });\n    }\n    this.setState({ selectedWorksheets: modifiedWorksheets });\n  }\n\n  assignWorksheets = (date) => {\n    const { onAssignWorksheets } = this.props;\n    const { selectedWorksheets } = this.state;\n    let assignDate;\n    switch (date) {\n      case 'today':\n        assignDate = moment().format('MM/DD/YY');\n        break;\n      case 'tomorrow':\n        assignDate = moment().add(1, 'days').format('MM/DD/YY');\n        break;\n      case 'nextSession':\n        break;\n      case 'customDate':\n        assignDate = '01/05/19';\n        break;\n      default:\n        break;\n    }\n    this.onToggleAssignSelectedDropdown();\n    onAssignWorksheets(selectedWorksheets, assignDate);\n  }\n\n  mapWorksheets = () => this.getMappableWorksheets().map((worksheet, index) => (\n    <WorksheetCard\n      worksheet={worksheet}\n      index={index}\n      key={worksheet.id}\n      onSetDropdown={this.onSetDropdown}\n      onCloseDropdown={this.onCloseDropdown}\n      dropdownIndex={this.state.dropdownIndex}\n      dropdownIsOpen={this.state.dropdownIsOpen}\n      handleWorksheetClick={this.handleWorksheetClick}\n      selectedWorksheets={this.state.selectedWorksheets}\n    />\n  ))\n\n  render() {\n    const { open } = this.props;\n    const { assignSelectedDropdownOpen, typeFilters, sourceFilters, subjectFilters, difficultyFilters, sort } = this.state;\n    return (\n      <div>\n        {open && (\n          <div className=\"wrapper\">\n              <div className=\"card-modal card-main card switcher-section grey lighten-3\" style = {{minWidth:\"100%\"}}>\n                <div className=\"header-row card-panel light-blue lighten-1 white-text\">\n                  <div className=\"card-panel-row row\">\n                    <div className=\"col s11\">\n                      <div className=\"d-flex\">\n                        <div className=\"icon-col\">\n                          <i className=\"icon-sheets-w\"></i>\n                        </div>\n                        <div className=\"card-panel-text\">\n                          <div className=\"text-large\">Assign Worksheets</div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"col s1 right-align\">\n                      <div className=\"row icons-row\"><a href=\"#\" onClick={this.onCloseModal} className=\"modal-close close\"><i className=\"icon-close-thin\"></i></a></div>\n                    </div>\n                  </div>\n                </div>\n                <FilterSection\n                  sort={sort}\n                  typeFilters={typeFilters}\n                  sourceFilters={sourceFilters}\n                  subjectFilters={subjectFilters}\n                  difficultyFilters={difficultyFilters}\n                  onSetSort={this.onSetSort}\n                  onClearFilters={this.onResetModal}\n                  handleFilterClick={this.handleFilterClick}\n                  onSetFilteredState={this.onSetFilteredState}\n                  onUnsetFilteredState={this.onUnsetFilteredState}\n                />\n                <div className=\"card-content\">\n                  <div className=\"card-body\">\n                    <div className=\"result-row center-align\">\n                      <b className=\"result\"> - {this.getMappableWorksheets().length} results -</b>\n                    </div>\n                    <div className=\"checkboxes-section row d-flex-content card-width-322\">\n                      {this.mapWorksheets()}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"add-btn-block\">\n                <a\n                  href=\"#\"\n                  data-target='dropdown_assign_selected'\n                  onClick={this.onToggleAssignSelectedDropdown}\n                  className=\"dropdown-trigger waves-effect waves-teal btn add-btn\"\n                >\n                  <i className=\"material-icons\">add</i> Assign Selected\n                </a>\n                <ul\n                  className='dropdown-content'\n                  id='dropdown_assign_selected'\n                  style={{ display: assignSelectedDropdownOpen ? 'block' : '0', opacity: assignSelectedDropdownOpen ? '1' : '0' }}\n                >\n                  <li><a href=\"#\" onClick={() => this.assignWorksheets('today')}>For Today</a></li>\n                  <li><a href=\"#\" onClick={() => this.assignWorksheets('tomorrow')}>For Tomorrow</a></li>\n                  <li><a href=\"#\" onClick={() => this.assignWorksheets('nextSession')}>For Next Session</a></li>\n                  <li><a href=\"#\" onClick={() => this.assignWorksheets('customDate')}>For Date...</a></li>\n                </ul>\n              </div>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            .wrapper {\n              min-height: 0px;\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n}\n\nAssignWorksheetModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onAssignWorksheets: PropTypes.func.isRequired,\n};\n\nexport default AssignWorksheetModal;\n","import moment from 'moment';\n\nexport const getCalendarCellClassName = (hasEvents, inActiveColumn) => {\n  let classNames = 'cal-cell1 cal-cell ';\n  if (!hasEvents) {\n    classNames += 'day-no-events ';\n  } else {\n    classNames += 'day-has-events ';\n  }\n  if (inActiveColumn) {\n    classNames += 'active-cell';\n  }\n  return classNames;\n}\n\nexport const getCalendarDayClassName = (date, inMonth, activeDateKey) => {\n  let className = 'cal-month-day ';\n  if (activeDateKey.includes('column-7') || activeDateKey.includes('column-1')) {\n    className += 'cal-day-weekend ';\n  }\n  if (date === moment().format('MM/DD/YY')) {\n    className += 'cal-day-today ';\n  }\n  if (inMonth === true) {\n    className += 'cal-day-inmonth ';\n  } else if (inMonth === false) {\n    className += 'cal-day-outmonth ';\n  }\n  return className;\n}\n\nexport const calendarMap = {\n  '0': 'December',\n  '1': 'January',\n  '2': 'February',\n  '3': 'March',\n  '4': 'April',\n  '5': 'May',\n  '6': 'June',\n  '7': 'July',\n  '8': 'August',\n  '9': 'September',\n  '10': 'October',\n  '11': 'November',\n  '12': 'December',\n  '13': 'January',\n};\n\nexport const currentMonthIndex = Number(moment().format('M')) - 1;\nexport const currentYear = new Date().getFullYear().toString().substr(-2);\n\nexport const getDayDate = (date) => moment(new Date(date)).format('ddd, MMM Do');\nexport const getFirstDay = (activeMonthIndex) => new Date(2019, activeMonthIndex).getDay();\nexport const getDaysInActiveMonth = (activeMonthIndex) => 32 - new Date(2019, activeMonthIndex, 32).getDate();\nexport const getDaysInPreviousMonth = (activeMonthIndex) => 32 - new Date(2019, activeMonthIndex - 1, 32).getDate();\nexport const getNextMonthAsCurrentMonth = (activeMonthIndex) => activeMonthIndex > 9 ? activeMonthIndex + 1 : `0${activeMonthIndex + 1}`;","export default [\n  {\n    id: 1,\n    subject: 'Reading',\n    timeEstimate: '14',\n    unit: 'Reading Unit #2',\n    title: 'Reading Something 1',\n    type: 'Challenge + Practice',\n    problems: '20',\n    pageNumber: '128',\n  },\n  {\n    id: 2,\n    subject: 'Math',\n    timeEstimate: '30',\n    unit: 'Math Unit #4',\n    title: 'Pythagorean Theorem',\n    type: 'Challenge + Practice',\n    problems: '16',\n    pageNumber: '132',\n  },\n  {\n    id: 3,\n    subject: 'Reading',\n    timeEstimate: '23',\n    unit: 'Reading Unit #3',\n    title: 'More Reading Stuff',\n    type: 'Reading from Workbook',\n    problems: '20',\n    pageNumber: '141',\n  },\n  {\n    id: 4,\n    subject: 'Reading',\n    timeEstimate: '31',\n    unit: 'Reading Unit #6',\n    title: 'Reading Someing 7',\n    type: 'Challenge + Practice',\n    problems: '17',\n    pageNumber: '127',\n  },\n  {\n    id: 5,\n    subject: 'Reading',\n    timeEstimate: '65',\n    unit: 'Reading Unit #4',\n    title: 'Reading Someing 4',\n    type: 'Homework Drill',\n    problems: '19',\n    pageNumber: '120',\n  },\n  {\n    id: 6,\n    subject: 'Reading',\n    timeEstimate: '50',\n    unit: 'Reading Unit #9',\n    title: 'Reading Someing 9',\n    type: 'Challenge + Practice',\n    problems: '22',\n    pageNumber: '141',\n  },\n  {\n    id: 7,\n    subject: 'Reading',\n    timeEstimate: '31',\n    unit: 'Reading Unit #1',\n    title: 'Reading Someing 1',\n    type: 'Homework Drill',\n    problems: '29',\n    pageNumber: '136',\n  },\n  {\n    id: 8,\n    subject: 'Writing',\n    timeEstimate: '48',\n    unit: 'Writing Unit #5',\n    title: 'Writing Lesson 5',\n    type: 'Homework Drill',\n    problems: '14',\n    pageNumber: '117',\n  },\n  {\n    id: 9,\n    subject: 'Writing',\n    timeEstimate: '48',\n    unit: 'Writing Unit #5',\n    title: 'Writing Lesson 5',\n    type: 'Reading from Workbook',\n    problems: '14',\n    pageNumber: '117',\n  },\n];","export default [\n  {\n    id: 1,\n    title: 'Some SAT Problems about Triangles',\n    subject: 'Math',\n    problems: 15,\n    type: 'Skill Builders',\n    unit: 'Math Unit #2',\n    difficulty: 'Easy',\n    timeEstimate: '14',\n    source: 'Built-In',\n    classifications: ['Right Triangles', 'More Math', \"Lots Of Math\"],\n  },\n  {\n    id: 2,\n    title: 'Worksheet 2',\n    subject: 'Reading',\n    problems: 18,\n    type: 'Skill Builders',\n    unit: 'Reading Unit #3',\n    difficulty: 'Easy',\n    timeEstimate: '30',\n    source: 'User Created',\n    classifications: [],\n  },\n  {\n    id: 3,\n    title: 'Worksheet 3',\n    subject: 'Writing',\n    problems: 16,\n    type: 'SAT Practice',\n    unit: 'Writing Unit #1',\n    difficulty: 'Difficult',\n    timeEstimate: '62',\n    source: 'Built-In',\n    classifications: ['Right Triangles', 'Math', \"Lots Of Math\"],\n  },\n  {\n    id: 4,\n    title: 'Worksheet 4',\n    subject: 'Writing',\n    problems: 14,\n    type: 'SAT Practice',\n    unit: 'Mixed Unit #6',\n    difficulty: 'Mixed',\n    timeEstimate: '31',\n    source: 'User Created',\n    classifications: ['Trigonometry', 'More Math', \"Lots Of Math\"],\n  },\n  {\n    id: 5,\n    title: 'Worksheet 5',\n    subject: 'Reading',\n    problems: 21,\n    type: 'Mixed',\n    unit: 'Reading Unit #2',\n    difficulty: 'Medium',\n    timeEstimate: '23',\n    source: 'Built-In',\n    classifications: ['Trigonometry', 'Math', \"Lots Of Math\"],\n  },\n  {\n    id: 6,\n    title: 'Worksheet 6',\n    subject: 'Math',\n    problems: 30,\n    type: 'Mixed',\n    unit: 'Math Unit #4',\n    difficulty: 'Difficult',\n    timeEstimate: '58',\n    source: 'User Created',\n    classifications: ['Right Triangles', 'Trigonometry', 'More Math'],\n  },\n];\n","export const difficultySort = ({ difficulty: difficultyA }, { difficulty: difficultyB }) => {\n  if (difficultyA > difficultyB) { return -1; }\n  return 0;\n}\n\nexport const pageNumberSort = ({ pageNumber: pageNumberA }, { pageNumber: pageNumberB }) => {\n  if (pageNumberA > pageNumberB) { return -1; }\n  return 0;\n}\n\nexport const problemSort = ({ problems: problemCountA }, { problems: problemCountB }) => {\n  if (problemCountA > problemCountB) { return -1; }\n  return 0;\n}\n\nexport const timeEstimateSort = ({ timeEstimate: timeEstimateA }, { timeEstimate: timeEstimateB }) => {\n  if (timeEstimateA > timeEstimateB) { return -1; }\n  return 0;\n}\n\nexport const subjectSort = ({ subject: subjectA }, { subject: subjectB }) => {\n  if (subjectA > subjectB) { return -1; }\n  return 0;\n}\n","export const worksheetTypeMap = {\n  'SAT Practice': 'satPractice',\n  'Skill Builders': 'skillBuilders',\n  'Mixed': 'mixedType',\n};\n\nexport const worksheetSourceMap = {\n  'Built-In': 'builtIn',\n  'User Created': 'userCreated',\n};\n\nexport const worksheetDifficultyMap = {\n  'Easy': 'easy',\n  'Medium': 'medium',\n  'Difficult': 'difficult',\n  'Mixed': 'mixedDifficulty',\n};\n\nexport const worksheetSubjectMap = {\n  'Reading': 'readingSubject',\n  'Writing': 'writingSubject',\n  'Math': 'mathSubject',\n  'Mixed': 'mixedSubject',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\n\nimport ControlComponent from './styles/ControlComponent';\nimport { DropdownStyles } from './styles/dropdownStyles';\nimport DropdownWrapper from './styles';\n\nconst Dropdown = ({ value, label, dropdownKey, stateKey = null, onChange, options, valid = true, padRight, className }) => (\n  <DropdownWrapper className={className} valid={(valid) || (!valid && value === {})} padRight={padRight}>\n    <Select\n      options={options}\n      onChange={(event) => onChange(event.value, dropdownKey, stateKey)}\n      components={{ Control: ControlComponent }}\n      name=\"categoryOptions\"\n      classNamePrefix={dropdownKey === 'difficulty' ? 'expanded-select' : 'select'}\n      placeholder={label}\n      styles={DropdownStyles}\n      isClearable={false}\n      isSearchable={false}\n      value={value}\n      instanceId=\"dropdown-select\"\n    />\n  </DropdownWrapper>\n);\n\nDropdown.propTypes = {\n  value: PropTypes.any,\n  valid: PropTypes.bool,\n  padRight: PropTypes.bool,\n  stateKey: PropTypes.string,\n  className: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  dropdownKey: PropTypes.string.isRequired,\n};\n\nexport default Dropdown;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { components } from 'react-select';\n\nimport { ControlWrapper } from './';\nimport { DropdownStyles } from '../styles/dropdownStyles';\n\nconst ControlComponent = (props) => {\n  const { selectProps: { placeholder, label, className } } = props;\n  const categoryCheck = label === 'Categories';\n  return (\n    <ControlWrapper invalid={className} categoryCheck={categoryCheck}>\n      <div style={DropdownStyles}>\n        {<p>{categoryCheck ? 'Categories' : placeholder}</p>}\n        <components.Control {...props} />\n      </div>\n    </ControlWrapper>\n  );\n};\n\nControlComponent.propTypes = {\n  selectProps: PropTypes.object.isRequired,\n};\n\nexport default ControlComponent;\n","// Keeping unused styling for now so I know what element they target\nexport default {\n  multiValueLabel: (styles) => ({\n    ...styles,\n    color: 'white',\n    borderRadius: 'inherit',\n    fontSize: 'inherit',\n    overflow: 'inherit',\n    padding: 'inherit',\n    paddingLeft: 'inherit',\n    textOverflow: 'inherit',\n    whiteSpace: 'inherit',\n    boxSizing: 'inherit',\n    // backgroundColor: 'red!important',\n  }),\n  menuList: (styles) => ({\n    ...styles,\n    // backgroundColor: 'red',\n  }),\n  dropdownIndicator: (styles) => ({\n    ...styles,\n    display: 'none',\n  }),\n  multiValue: (styles) => ({\n    ...styles,\n    background: 'none',\n  }),\n  valueContainer: (styles) => ({\n    ...styles,\n    // padding: '20px',\n    // background: 'red',\n    // height: '200px',\n  }),\n  input: (styles) => ({\n    ...styles,\n    paddingTop: '9px',\n  }),\n  groupHeading: (styles) => ({\n    ...styles,\n    // backgroundColor: '#19493F',\n    // color: 'white',\n    // padding: '10px',\n  }),\n  control: (styles, { isFocused }) => ({\n    ...styles,\n    boxShadow: 'none',\n    borderColor: isFocused ? '#26a69a!important' : '#b6b6b6!important',\n  }),\n};\n\nexport const DropdownStyles = {\n  container: (base, state) => ({\n    ...base,\n    opacity: state.isDisabled ? \".5\" : \"1\",\n    backgroundColor: \"transparent\",\n    zIndex: \"999\",\n  }),\n  option: (styles, { isFocused }) => ({\n    ...styles,\n    backgroundColor: isFocused ? '#dad8d8' : 'white',\n    color: isFocused ? '#a80303' : '#333',\n    clear: 'both',\n    lineHeight: '22px',\n    width: '100%',\n    textAlign: 'left',\n    fontWeight: '500',\n    padding: '3px 10px 3px 19px',\n    fontSize: '15px',\n  }),\n  control: (styles, { isFocused }) => ({\n    ...styles,\n    border: 'none',\n    borderBottom: '1px solid',\n    borderColor: isFocused ? '#26a69a!important' : '#b6b6b6!important',\n    backgroundColor: 'transparent',\n    borderRadius: '0',\n    outline: 'none',\n    boxShadow: 'none',\n  }),\n};\n","import styled from 'styled-components';\n\nconst DropdownWrapper = styled.div`\n  padding: 5px 0;\n  padding-right: ${({ padRight }) => padRight ? '20px' : ''};\n  ${({ valid }) => !valid ?\n    `div.select__control, div.expanded-select__control, div.multi-select__control { \n        border-color: #F44336!important; \n        &:focus {\n          border-color: inherit;\n      }\n    }`\n    : ''};\n  &.flex-50 {\n    flex-basis: 50%!important;\n  }\n`;\n\nexport const ControlWrapper = styled.div`\n  p {\n    padding-left: ${({ categoryCheck }) => categoryCheck ? '10px' : ''};\n    margin-bottom: 5px;\n    color: #959595;\n    margin-top: ${({ categoryCheck }) => categoryCheck ? '20px' : ''};\n  }\n  ${({ invalid }) => invalid ?\n    `div.multi-select__control {\n      border-color: #F44336!important;\n    }` : ''};\n`;\n\nexport default DropdownWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst InstructorCard = ({ instructor: { firstName, lastName, email }, onRemoveInstructor }) => (\n  <div className=\"owner-box card-panel card-panel-panel card-panel-large\" style={{ backgroundColor: '#31837a', color: '#fff' }}>\n    <a\n      href=\"#\"\n      className=\"close-link icon-close-thin\"\n      onClick={onRemoveInstructor}\n    >\n    </a>\n    <div className=\"card-panel-row row\">\n      <div className=\"col s10\">\n        <div className=\"user-block\">\n          <div className=\"user-circle\" style={{ backgroundColor: '#0085ce', color: '#fff', height: '45px' }}>\n            <img src=\"#\" alt=\"\" />\n          </div>\n          <div className=\"user-text\" style={{ color: '#fff' }}>\n            <h4 className=\"h3\">{lastName}, {firstName}</h4>\n            <a href={`mailto:${email}`}>{email}</a>\n          </div>\n        </div>\n      </div>\n      <div className=\"col s2 right-align\">\n        <span className=\"block-icon\">\n          <i className=\"icon-user\"></i>\n          <span className=\"text-icon\">Instructor</span>\n        </span>\n      </div>\n    </div>\n  </div>\n);\n\nInstructorCard.propTypes = {\n  instructor: PropTypes.object.isRequired,\n  onRemoveInstructor: PropTypes.func.isRequired,\n};\n\nexport default InstructorCard;\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst InstructorToggleCard = ({ instructor, onToggleInstructorSelect }) => (\n  <li onClick={() => onToggleInstructorSelect(instructor)}>\n    <input\n      type=\"checkbox\"\n    />\n    <div className=\"card-location card\">\n      <div className=\"owner-box card-panel card-panel-location\" style={{ backgroundColor: '#31837a', color: '#fff' }}>\n        <span className=\"check-link icon-check\"></span>\n        <div className=\"card-panel-row row\">\n          <div className=\"col s10\">\n            <div className=\"user-block\">\n              <div className=\"user-circle\" style={{ backgroundColor: '#0085ce', color: '#fff' }}>\n                <img src=\"#\" alt=\"\" />\n              </div>\n              <div className=\"user-text\" style={{ color: '#fff' }}>\n                <h4 className=\"h3\">{instructor.lastName}, {instructor.firstName}</h4>\n                <a href={`mailto:${instructor.email}`}>{instructor.email}</a>\n              </div>\n            </div>\n          </div>\n          <div className=\"col s2 right-align\">\n            <span className=\"block-icon\">\n              <i className=\"icon-user\"></i>\n              <span className=\"text-icon\">Instructor</span>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </li>\n);\n\nInstructorToggleCard.propTypes = {\n  instructor: PropTypes.object.isRequired,\n  onToggleInstructorSelect: PropTypes.func.isRequired,\n};\n\nexport default InstructorToggleCard;\n","/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\n\nimport Portal from '../../../Portal';\nimport ClickOffComponentWrapper from '../../../ClickOffComponentWrapper';\nimport Dropdown from '../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../utils/getValueFromState';\n\nimport InstructorToggleCard from './components/InstructorToggleCard';\nimport sampleInstructors from '../../../utils/sampleInstructors';\n\nconst locationOptions = [\n  {\n    label: 'Any',\n    value: 'all',\n  },\n  {\n    label: 'Location 2',\n    value: 'location2',\n  },\n  {\n    label: 'Location 3',\n    value: 'location3',\n  },\n];\n\nclass InstructorModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      instructors: sampleInstructors,\n      location: 'all',\n      searchTerm: '',\n      selectedInstructors: [],\n    };\n  }\n\n  onCloseModal = () => this.setState({ selectedInstructors: [] }, this.props.onClose)\n\n  onToggleInstructorSelect = (instructor) => {\n    const { selectedInstructors } = this.state;\n    if (selectedInstructors.indexOf(instructor) === -1) {\n      this.setState({ selectedInstructors: [...selectedInstructors, instructor] });\n    } else {\n      const updatedInstructors = update(selectedInstructors, {\n        $splice: [[selectedInstructors.indexOf(instructor), 1]],\n      });\n      this.setState({ selectedInstructors: updatedInstructors });\n    }\n  }\n\n  onSetLocation = (location) => this.setState({ location })\n\n  onSaveInstructorChanges = () => {\n    const { selectedInstructors } = this.state;\n    const { handleInstructorsChange } = this.props;\n    handleInstructorsChange(selectedInstructors);\n    this.onCloseModal();\n  }\n\n  handleSearchChange = ({ target: { value: searchTerm } }) => this.setState({ searchTerm })\n\n  renderInstructors = () => {\n    const { location, instructors: allInstructors, searchTerm } = this.state;\n    let instructors;\n    if (searchTerm) {\n      instructors = allInstructors.reduce((finalArr, currentInstructor) => {\n        const instructorName = `${currentInstructor.firstName}${currentInstructor.lastName}`.toLowerCase();\n        if (instructorName.indexOf(searchTerm) !== -1) {\n          finalArr.push(currentInstructor);\n        }\n        return finalArr;\n      }, []);\n    } else if (location === 'all') {\n      instructors = allInstructors;\n    } else {\n      instructors = allInstructors.filter(instructor => instructor.location === location);\n    }\n    return instructors.map(instructor => (\n      <InstructorToggleCard\n        key={instructor.email}\n        instructor={instructor}\n        onToggleInstructorSelect={this.onToggleInstructorSelect}\n      />\n    ));\n  }\n\n  render() {\n    const { open } = this.props;\n    const { location, searchTerm } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={this.onCloseModal}>\n              <div id=\"modal_Instructor1\" className=\"modal modal-custom modal-location\">\n                <div className=\"card-modal card\">\n                  <div className=\"owner-box card-panel card-panel-title\" style={{ backgroundColor: '#00456b', color: '#fff' }}>\n                    <div className=\"card-panel-row row\">\n                      <div className=\"col\">\n                        <h3>Select Instructor(s)</h3>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"card-content\">\n                    <div className=\"card-body\">\n                      <span className=\"hint\">Click to select or deselect.</span>\n                      <div className=\"row-holder\">\n                        <div className=\"search-field input-field\">\n                          <input\n                            type=\"search\"\n                            id=\"name_search\"\n                            className=\"input-control validate\"\n                            name=\"nameSearch\"\n                            value={searchTerm}\n                            onChange={this.handleSearchChange}\n                          />\n                          <button type=\"submit\" className=\"search-button\"><i className=\"icon-search\"></i></button>\n                          <label className={searchTerm.length ? 'label active' : 'label'} htmlFor=\"name_search\">Search</label>\n                        </div>\n                        <div className=\"input-field\">\n                          <Dropdown\n                            value={getValueFromState(location, locationOptions)}\n                            onChange={this.onSetLocation}\n                            options={locationOptions}\n                            label=\"State\"\n                            stateKey=\"state\"\n                            dropdownKey=\"state\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"box-scrollable\">\n                        <div className=\"height-40 jcf-scrollable\">\n                          <div className=\"card-location-holder\" style={{ height: '100%', overflowY: 'scroll' }}>\n                            <ul className=\"checkbox-list\">\n                              {this.renderInstructors()}\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                      <a\n                        href=\"#\"\n                        onClick={this.onCloseModal}\n                        className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\"\n                      >\n                        Cancel\n                      </a>\n                      <a\n                        href=\"#\"\n                        className=\"btn\"\n                        onClick={this.onSaveInstructorChanges}\n                      >\n                        Add\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 1999;\n            }\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            #modal_Location1 {\n              border-radius: 6px;\n            }\n            .modal {\n              display: block;\n              background-color: white;\n              position: absolute;\n              top: 10%;\n              right: 10%;\n              left: 10%;\n              box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12), 0 11px 15px -7px rgba(0, 0, 0, 0.2);\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nInstructorModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  handleInstructorsChange: PropTypes.func.isRequired,\n};\n\nexport default InstructorModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationCard = ({ location: { nickname: locationNickname, name: locationName }, onRemoveLocation }) => (\n  <div className=\"card-panel card-panel-panel card-panel-large\" style={{ backgroundColor: '#62b771', color: '#fff' }}>\n    <a\n      href=\"#\"\n      className=\"close-link icon-close-thin\"\n      onClick={onRemoveLocation}\n    ></a>\n    <div className=\"card-panel-row row\">\n      <div className=\"col s10\">\n        <h3 className=\"h4 truncate\">{locationNickname}</h3>\n        <h4 className=\"sub-title\">{locationName}</h4>\n      </div>\n      <div className=\"col s2 right-align\">\n        <span className=\"block-icon\">\n          <i className=\"icon-location\"></i>\n          <span className=\"text-icon\">Location</span>\n        </span>\n      </div>\n    </div>\n  </div>\n);\n\nLocationCard.propTypes = {\n  location: PropTypes.object,\n  onRemoveLocation: PropTypes.func.isRequired,\n};\n\nexport default LocationCard;\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationToggleCard = ({ location, onToggleLocationSelect }) => (\n  <li onClick={() => onToggleLocationSelect(location)}>\n    <input\n      type=\"checkbox\"\n    />\n    <div className=\"card-location card card-large\">\n      <div className=\"card-panel card-panel-location\" style={{ backgroundColor: '#62b771', color: '#fff' }}>\n        <span className=\"check-link icon-check\"></span>\n        <div className=\"card-panel-row row\">\n          <div className=\"col s10\">\n            <h3 className=\"h4 truncate\">{location.nickname}</h3>\n            <h4 className=\"sub-title\">{location.name}</h4>\n          </div>\n          <div className=\"col s2 right-align\">\n            <span className=\"block-icon\">\n              <i className=\"icon-location\"></i>\n              <span className=\"text-icon\">Location</span>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </li>\n);\n\nLocationToggleCard.propTypes = {\n  location: PropTypes.object.isRequired,\n  onToggleLocationSelect: PropTypes.func.isRequired,\n};\n\nexport default LocationToggleCard;\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport { makeSelectLocations } from \"../../../Location/index/selectors\";\nimport Portal from '../../../Portal';\nimport ClickOffComponentWrapper from '../../../ClickOffComponentWrapper';\nimport LocationToggleCard from './components/LocationToggleCard';\n\n\nclass LocationModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      locations: [],\n      selectedLocations: [],\n    };\n  }\n\n  onCloseModal = () => this.setState({ selectedLocations: [] }, this.props.onClose)\n\n  onToggleLocationSelect = (location) => {\n    const { selectedLocations } = this.state;\n    if (selectedLocations.indexOf(location) === -1) {\n      this.setState({ selectedLocations: [...selectedLocations, location] });\n    } else {\n      const updatedLocations = update(selectedLocations, {\n        $splice: [[selectedLocations.indexOf(location), 1]],\n      });\n      this.setState({ selectedLocations: updatedLocations });\n    }\n  }\n\n  onSaveLocationChanges = () => {\n    const { selectedLocations } = this.state;\n    const { handleLocationsChange } = this.props;\n    handleLocationsChange(selectedLocations);\n    this.onCloseModal();\n  }\n\n  render() {\n    const { open } = this.props;\n    const { locations } = this.props;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={this.onCloseModal}>\n              <div id=\"modal_Location1\" className=\"modal modal-custom modal-location\">\n                <div className=\"card-modal card\">\n                  <div className=\"owner-box card-panel card-panel-title\" style={{ backgroundColor: '#00456b', color: '#fff' }}>\n                    <div className=\"card-panel-row row\">\n                      <div className=\"col\">\n                        <h3>Select Locations(s)</h3>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"card-content\">\n                    <div className=\"card-body\">\n                      <span className=\"hint\">Click to select or deselect.</span>\n                      <div className=\"box-scrollable\">\n                        <div className=\"height-40 jcf-scrollable\">\n                          <div className=\"card-location-holder\" style={{ height: '100%', overflowY: 'scroll' }}>\n                            <ul className=\"checkbox-list\">\n                              {locations.map(location => (\n                                <LocationToggleCard\n                                  key={location.id}\n                                  location={location}\n                                  onToggleLocationSelect={this.onToggleLocationSelect}\n                                />\n                              ))}\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                      <a\n                        href=\"#\"\n                        onClick={this.onCloseModal}\n                        className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\"\n                      >\n                        Cancel\n                      </a>\n                      <a\n                        href=\"#\"\n                        className=\"btn\"\n                        onClick={this.onSaveLocationChanges}\n                      >\n                        Add\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n          {`\n              h4 {\n                font-size: 2.28rem;\n                line-height: 110%;\n                margin: 1.52rem 0 .912rem 0;\n                margin-top: 0;\n              }\n              .overlay {\n                position: fixed;\n                background-color: rgba(0, 0, 0, 0.7);\n                top: 0;\n                right: 0;\n                bottom: 0;\n                left: 0;\n                z-index: 1999;\n              }\n              .card-modal {\n                margin: 0;\n                border-radius: 6px;\n              }\n              #modal_Location1 {\n                border-radius: 6px;\n              }\n              .modal {\n                display: block;\n                background-color: white;\n                position: absolute;\n                top: 10%;\n                right: 10%;\n                left: 10%;\n                box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12), 0 11px 15px -7px rgba(0, 0, 0, 0.2);\n              }\n              .modal-custom {\n                opacity: 1;\n                visibility: visible;\n              }\n              .modal-footer {\n                background-color: white;\n              }\n            `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nLocationModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  handleLocationsChange: PropTypes.func.isRequired,\n  locations: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  locations: makeSelectLocations(),\n});\n\n\nconst withConnect = connect(mapStateToProps, null);\n\n\nexport default compose(withConnect)(LocationModal);\n","import {\n  FETCH_ALL_LOCATIONS,\n  SET_ALL_LOCATIONS,\n} from \"./constants\";\n\nexport function fetchAllLocationns(user_id) {\n  return {\n    type: FETCH_ALL_LOCATIONS,\n    user_id,\n  };\n}\n\nexport function setLocations(locations) {\n  return {\n    type: SET_ALL_LOCATIONS,\n    locations,\n  };\n}\n","export const FETCH_ALL_LOCATIONS = 'FETCH_ALL_LOCATIONS';\nexport const SET_ALL_LOCATIONS = 'SET_ALL_LOCATIONS';\n","import { createSelector } from \"reselect\";\n\nconst selectLocationsDomain = state => state.locationsReducer;\n\nconst makeSelectLocationsPageState = () =>\n  createSelector(selectLocationsDomain, substate => (substate ? substate.toJS() : {}));\n\nconst makeSelectLocations = () =>\n  createSelector(makeSelectLocationsPageState(), substate => substate.locations);\n\nexport default selectLocationsDomain;\nexport {\n  makeSelectLocationsPageState,\n  makeSelectLocations,\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Portal from '../Portal';\nimport ClickOffComponentWrapper from '../ClickOffComponentWrapper';\n\nexport class Modal extends React.Component { // eslint-disable-line\n  render() {\n    const { open, onClose, onConfirm, header, body, fullScreen, problem, passage } = this.props;\n    return (\n      <div>\n        <Portal selector=\"#modal\">\n          <Choose>\n            <When condition={fullScreen}>\n              {open && (\n                <div className=\"modal-full-size modal modal-custom open\">\n                  <div className=\"card-modal card-main card\">\n                    <div className=\"card-content\">\n                      <p className=\"passage\">{problem ? problem.problemText : passage.passageText}</p>\n                      <p className=\"passage\">{body}</p>\n                    </div>\n                    <a\n                      href=\"#!\"\n                      onClick={onClose}\n                      className=\"modal-close close\"\n                    >\n                      <i className=\"icon-close\" />\n                    </a>\n                    <div className=\"file-field-block\">\n                      <div className=\"info-block\">\n                        <dl>\n                          <dt>Problem:</dt>\n                          <dd>{problem ? problem.id : passage.id}</dd>\n                        </dl>\n                        <dl>\n                          <dt>Passage:</dt>\n                          <dd>{problem ? problem.pass : passage.id}</dd>\n                        </dl>\n                      </div>\n                      <div className=\"file-field input-field\">\n                        <div className=\"file-path-wrapper\">\n                          <input className=\"file-path\" type=\"text\" value=\"Video:  some_video.mpg\" readOnly=\"\" />\n                        </div>\n                        <div className=\"buttons-row\">\n                          <a className=\"waves-effect waves-teal btn-flat blue-text text-darken-3\">Watch</a>\n                          <span className=\"waves-effect waves-teal btn-flat blue-text text-darken-3\">\n                            <span>Upload</span>\n                            <input type=\"file\" />\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </When>\n            <Otherwise>\n              {open && (\n                <div className=\"overlay\">\n                  <ClickOffComponentWrapper onOuterClick={onClose}>\n                    <div className=\"modal\">\n                      <div className=\"modal-content\">\n                        <h4>{header}</h4>\n                        <p>{body}</p>\n                      </div>\n                      <div className=\"modal-footer\">\n                        <a\n                          href=\"#!\"\n                          onClick={onClose}\n                          className=\"modal-close waves-effect waves-green btn-flat\"\n                        >\n                          Cancel\n                        </a>\n                        <a\n                          href=\"#!\"\n                          onClick={onConfirm}\n                          className=\"modal-close waves-effect waves-green btn-flat\"\n                        >\n                          Confirm\n                        </a>\n                      </div>\n                    </div>\n                  </ClickOffComponentWrapper>\n                </div>\n              )}\n            </Otherwise>\n          </Choose>\n          { /* Inline styling is required for the Modal component due to the Portal */ }\n          <style jsx>\n            {`\n              h4 {\n                font-size: 2.28rem;\n                line-height: 110%;\n                margin: 1.52rem 0 .912rem 0;\n                margin-top: 0;\n              }\n              p {\n                font-size: 16px;\n                color: #343434;\n              }\n              p.passage {\n                font-size: 14px;\n              }\n              a {\n                color: #343434;\n              }\n              .overlay {\n                position: fixed!important;\n                background-color: rgba(0, 0, 0, 0.7)!important;\n                top: 0!important;\n                right: 0!important;\n                bottom: 0!important;\n                left: 0!important;\n                z-index: 9999!important;\n              }\n              .modal {\n                display: block;\n                background-color: white;\n                position: absolute;\n                top: 10%;\n                right: 10%;\n                left: 10%;\n                box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12), 0 11px 15px -7px rgba(0, 0, 0, 0.2);\n              }\n              .modal-footer {\n                background-color: white;\n              }\n              .modal-full-size {\n                z-index: 1999;\n                width: 100%;\n                left: 0;\n                top: 0;\n                right: 0;\n                bottom: 0;\n              }\n            `}\n          </style>\n        </Portal>\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  open: PropTypes.bool,\n  fullScreen: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n  onConfirm: PropTypes.func,\n  body: PropTypes.string,\n  header: PropTypes.string,\n  problem: PropTypes.object,\n  passage: PropTypes.object,\n};\n\nexport default Modal;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nexport class Portal extends React.Component {\n  componentDidMount() {\n    this.element = document.querySelector(this.props.selector);\n    this.forceUpdate();\n  }\n\n  render() {\n    if (this.element === undefined) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(this.props.children, this.element);\n  }\n}\n\nPortal.propTypes = {\n  selector: PropTypes.any,\n  children: PropTypes.any,\n};\n\nexport default Portal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\n\nconst sessionDurationOptions = [\n  {\n    label: 'Use organization default',\n    value: 'organizationDefault',\n  },\n  {\n    label: 'Option 2',\n    value: 'Option 2',\n  },\n  {\n    label: 'Option 3',\n    value: 'Option 3',\n  },\n];\n\nconst AccountSettings = ({ state: { loginBeforeActivation, unstructuredCourseMode, defaultSessionDuration, videoSolutionsRequired, preventLogin, inactive, excludeFromStatistics }, handleDetailsChange }) => (\n  <div className=\"row mb-0 one-large-col d-flex-content\">\n    <div className=\"col s12\">\n      <div className=\"card-block\">\n        <h2>Account Settings</h2>\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"course-context_two-col\">\n              <div className=\"column\">\n                <div className=\"checkbox-block\">\n                  <div className=\"checkbox-holder\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        className=\"filled-in\"\n                        name=\"loginBeforeActivation\"\n                        id=\"\"\n                        value={loginBeforeActivation}\n                        onChange={() => handleDetailsChange({}, 'loginBeforeActivation', 'accountSettings', true)}\n                      />\n                      <span className=\"large-label\">Allow Student Login Prior to Activation</span>\n                    </label>\n                    <span className=\"note\">To enter initial practice test answers</span>\n                  </div>\n                  <p>{\"By default, a student may not log in until you activate the student's account. If, prior to signing up for the course, this student needs to enter his or her own answers for an initial practice test, choose this option to allow the student access. When the student completes the test, we will not reveal the score or score report, which will retain your opportunity to setup a consultation with student/parent to review the results.\"}</p>\n                </div>\n                <div className=\"checkbox-block\">\n                  <div className=\"checkbox-holder\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        className=\"filled-in\"\n                        name=\"unstructuredCourseMode\"\n                        id=\"unstructuredCourseMode\"\n                        value={unstructuredCourseMode}\n                        onChange={() => handleDetailsChange({}, 'unstructuredCourseMode', 'accountSettings', true)}\n                      />\n                      <span className=\"large-label\">Unstructured Course Mode</span>\n                    </label>\n                    <span className=\"note\">Oﬀ by default</span>\n                  </div>\n                  <p>{\"With this option selected, the student can access any lesson at any time, whether or not you've explicitly assigned it. If a student begins a lesson that you have not yet assigned, the lesson will appear on the student's planner for the day that the student begins the lesson, and no due date will be assigned.\"}</p>\n                </div>\n                <div className=\"checkbox-block\">\n                  <div className=\"row mb-0\">\n                    <div className=\"col s12 l8\">\n                      <div className=\"input-field focus-blue\">\n                        <Dropdown\n                          value={getValueFromState(defaultSessionDuration, sessionDurationOptions)}\n                          onChange={(event) => handleDetailsChange(event, 'defaultSessionDuration', 'accountSettings')}\n                          options={sessionDurationOptions}\n                          label=\"Default Session Duration\"\n                          stateKey=\"defaultSessionDuration\"\n                          dropdownKey=\"defaultSessionDuration\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"column\">\n                <div className=\"checkbox-block\">\n                  <div className=\"checkbox-holder\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        className=\"filled-in\"\n                        name=\"videoSolutionsRequired\"\n                        id=\"videoSolutionsRequired\"\n                        value={videoSolutionsRequired}\n                        onChange={() => handleDetailsChange({}, 'videoSolutionsRequired', 'accountSettings', true)}\n                      />\n                      <span className=\"large-label\">Require Students to Watch Video Solutions</span>\n                    </label>\n                    <span className=\"note\">Not recommended</span>\n                  </div>\n                  <p>With this option is selected, the student must watch video solutions for each of the problems that he or she misses or skips before the lesson or quiz is marked complete.</p>\n                </div>\n                <div className=\"checkbox-block\">\n                  <div className=\"checkbox-holder\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        className=\"filled-in\"\n                        name=\"preventLogin\"\n                        id=\"preventLogin\"\n                        value={preventLogin}\n                        onChange={preventLogin}\n                      />\n                      <span className=\"large-label\">Prevent Login</span>\n                    </label>\n                  </div>\n                  <p>Check this box to temporarily prevent this student from logging in. If this account has not yet been activated, selecting this option is unnecessary because an unactivated student cannot login anyway.</p>\n                </div>\n                <div className=\"checkbox-block\">\n                  <div className=\"checkbox-holder\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        className=\"filled-in\"\n                        name=\"inactive\"\n                        id=\"inactive\"\n                        value={inactive}\n                        onChange={() => handleDetailsChange({}, 'inactive', 'accountSettings', true)}\n                      />\n                      <span className=\"large-label\">Inactive</span>\n                    </label>\n                  </div>\n                  <p>Select this option when you no longer want this student to appear on your list of current students. All student data is retained and, by default, included in instructor and global statistics. </p>\n                </div>\n                <div className=\"checkbox-block\">\n                  <div className=\"checkbox-holder\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        className=\"filled-in\"\n                        name=\"excludeFromStatistics\"\n                        id=\"excludeFromStatistics\"\n                        value={excludeFromStatistics}\n                        onChange={() => handleDetailsChange({}, 'excludeFromStatistics', 'accountSettings', true)}\n                      />\n                      <span className=\"large-label\">Exclude from Statistics</span>\n                    </label>\n                  </div>\n                  <p>Use this option to exclude this student’s data from all instructor and global statistics.</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nAccountSettings.propTypes = {\n  state: PropTypes.object.isRequired,\n  handleDetailsChange: PropTypes.func.isRequired,\n};\n\nexport default AccountSettings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AccountStatus = ({ state: { licenseCode, status, activationDate, expirationDate } }) => (\n  <div className=\"col s12 l5\">\n    <div className=\"card-block\">\n      <h2>Account Status</h2>\n      <div className=\"card\">\n        <div className=\"card-content\">\n          <div className=\"row mb-0\">\n            <div className=\"input-field account-status_input col s12 focus-blue\">\n              <input\n                type=\"text\"\n                id=\"license-code\"\n                name=\"licenseCode\"\n                defaultValue={licenseCode}\n                readOnly=\"\"\n              />\n              <label className=\"label active\" htmlFor=\"code\">License Code</label>\n            </div>\n          </div>\n          <div className=\"row mb-0\">\n            <div className=\"input-field account-status_input col s12 focus-blue\">\n              <input\n                type=\"text\"\n                id=\"status\"\n                name=\"status\"\n                defaultValue={status}\n                readOnly=\"\"\n              />\n              <label className=\"label active\" htmlFor=\"status\">Status</label>\n            </div>\n          </div>\n          <div className=\"row mb-0\">\n            <div className=\"input-field account-status_input col s12 focus-blue\">\n              <input\n                type=\"text\"\n                id=\"activation-date\"\n                name=\"activationDate\"\n                defaultValue={activationDate}\n                readOnly=\"\"\n              />\n              <label className=\"label active\" htmlFor=\"activation-date\">Activation Date</label>\n            </div>\n          </div>\n          <div className=\"row mb-0\">\n            <div className=\"input-field account-status_input col s12 focus-blue\">\n              <input\n                type=\"text\"\n                id=\"expiration-date\"\n                name=\"expirationDate\"\n                defaultValue={expirationDate}\n                readOnly=\"\"\n              />\n              <label className=\"label active\" htmlFor=\"expiration-date\">Expiration Date</label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nAccountStatus.propTypes = {\n  state: PropTypes.object.isRequired,\n};\n\nexport default AccountStatus;\n","/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport licenseTypeOptions from '../../../../utils/licenseTypeOptions';\n\nconst AccountType = ({ state: { licenseType } }) => (\n  <div className=\"col s12 l5\">\n    <div className=\"card-block\">\n      <h2>Account Type</h2>\n      <div className=\"card\">\n        <div className=\"card-content\">\n          <div className=\"account-type-block\">\n            <div className=\"account-type-block_holder\">\n              <div className=\"head-box\">\n                <h3><span>License Type</span> {licenseTypeOptions[licenseType].name}</h3>\n              </div>\n              <div className=\"picture-holder\">\n                <img src=\"images/img-01.png\" alt=\"image description\" />\n              </div>\n              <p>{licenseTypeOptions[licenseType].description}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nAccountType.propTypes = {\n  state: PropTypes.object.isRequired,\n};\n\nexport default AccountType;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Actions = ({ state: { ccAdmin, requireUserToChange, password, confirmPassword }, handleActionsChange, onResetPassword, onSendWelcomeEmail, onSendPasswordResetEmail }) => (\n  <div className=\"card-block\">\n    <h2>Actions</h2>\n    <div className=\"row mb-0 d-flex-content large sameheight\">\n      <div className=\"col s12 l5\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"account-block\">\n              <h3>Welcome Email</h3>\n              <p>Use this feature to send (or resend) a welcome email to the student. The welcome email contains login instruction and a temporary password that the student can use to login for the ﬁrst time. Keep in mind that sending this email will automatically set a new, randomly generated password which may be confusing to the student if he or she has already received a welcome email or has already set a permanent password.</p>\n              <p>\n                <button\n                  className=\"btn waves-effect waves-light bg-blue\"\n                  name=\"action\"\n                  onClick={onSendWelcomeEmail}\n                >\n                  (Re)send Welcome Email\n                </button>\n              </p>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  className=\"filled-in\"\n                  name=\"ccAdmin\"\n                  id=\"cc-admin\"\n                  value={ccAdmin}\n                  onChange={() => handleActionsChange({}, 'ccAdmin', true)}\n                />\n                <span className=\"large-label\">cc me at:  this_is_me@gmail.com</span>\n              </label>\n            </div>\n            <div className=\"account-block\">\n              <h3>Password Reset Email</h3>\n              <p>{\"The student will receive an email with a new temporary password. Keep in mind, the student's current password will no longer be valid..\"}</p>\n              <p>\n                <button\n                  className=\"btn waves-effect waves-light bg-blue\"\n                  name=\"action\"\n                  onClick={onSendPasswordResetEmail}\n                >\n                  Send Password Reset Email\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"col s12 l5\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"account-block\">\n              <h3>Reset Password</h3>\n              <p>{\"The student will receive an email with a new temporary password. Keep in mind, the student's current password will no longer be valid.\"}</p>\n              <div className=\"row mb-0\">\n                <div className=\"input-field col s12 focus-blue\">\n                  <input\n                    type=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={(event) => handleActionsChange(event, 'password')}\n                  />\n                  <label className={password.length ? 'label active' : 'label'} htmlFor=\"password\">Password</label>\n                  <span className=\"note\">6 to 20 characters</span>\n                </div>\n              </div>\n              <div className=\"row mb-0\">\n                <div className=\"input-field col s12 focus-blue\">\n                  <input\n                    type=\"password\"\n                    id=\"confirm-password\"\n                    name=\"confirmPassword\"\n                    value={confirmPassword}\n                    onChange={(event) => handleActionsChange(event, 'confirmPassword')}\n                  />\n                  <label className={confirmPassword.length ? 'label active' : 'label'} htmlFor=\"confirm-password\">Confirm Password</label>\n                </div>\n              </div>\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    className=\"filled-in\"\n                    id=\"require-user-to-change\"\n                    name=\"requireUserToChange\"\n                    value={requireUserToChange}\n                    onChange={() => handleActionsChange({}, 'ccAdmin', true)}\n                  />\n                  <span className=\"large-label\">Require user to change</span>\n                </label>\n              </p>\n              <p>\n                <button\n                  className=\"btn waves-effect waves-light bg-blue\"\n                  name=\"action\"\n                  onClick={onResetPassword}\n                >\n                  Set Password\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nActions.propTypes = {\n  state: PropTypes.object.isRequired,\n  onResetPassword: PropTypes.func.isRequired,\n  handleActionsChange: PropTypes.func.isRequired,\n  onSendWelcomeEmail: PropTypes.func.isRequired,\n  onSendPasswordResetEmail: PropTypes.func.isRequired,\n};\n\nexport default Actions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ClassCard = ({ course: { className, classLocation }, index, onRemoveClass }) => (\n  <div className=\"card-panel card-panel-panel card-panel-large\" style={{ backgroundColor: '#62b771', color: '#fff' }}>\n    <a\n      href=\"#\"\n      className=\"close-link icon-close-thin\"\n      onClick={() => onRemoveClass(index, 'location', 'locations')}\n    ></a>\n    <div className=\"card-panel-row row\">\n      <div className=\"col s10\">\n        <h3 className=\"h4 truncate\">{className}</h3>\n        <h4 className=\"sub-title\">{classLocation}</h4>\n      </div>\n      <div className=\"col s2 right-align\">\n        <span className=\"block-icon\">\n          <i className=\"icon-location\"></i>\n          <span className=\"text-icon\">Class</span>\n        </span>\n      </div>\n    </div>\n  </div>\n);\n\nClassCard.propTypes = {\n  course: PropTypes.object,\n  index: PropTypes.number.isRequired,\n  onRemoveClass: PropTypes.func.isRequired,\n};\n\nexport default ClassCard;\n","/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassCard from './components/ClassCard';\n\nconst Class = ({ state: { classes }, onOpenClassModal, onRemoveClass }) => (\n  <div className=\"card-block\">\n    <h3>Class</h3>\n    <div className=\"card card-instructor\">\n      <div className=\"card-content\">\n        <div className=\"text-block\">\n          <p>If this student is in a class, add it here. When a student is a member of a class, he or she will automatically be assigned all the classwork. </p>\n        </div>\n        <div className=\"box-scrollable\">\n          <div className=\"height-20 jcf-scrollable\">\n            <div className=\"card-location-holder\">\n              {!classes.length && (\n                <div className=\"add-class-box\"></div>\n              )}\n              {classes.map((course, index) => (\n                <ClassCard course={course} key={course.className} index={index} onRemoveClass={onRemoveClass} />\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className=\"card-footer right-align\">\n          <a\n            href=\"#\"\n            onClick={onOpenClassModal}\n            className=\"modal-trigger link-block\"\n          >\n            Add Class\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nClass.propTypes = {\n  state: PropTypes.object.isRequired,\n  onRemoveClass: PropTypes.func.isRequired,\n  onOpenClassModal: PropTypes.func.isRequired,\n};\n\nexport default Class;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport stateOptions from '../../../../utils/stateOptions';\n\nconst ContactInformation = ({ state: { phone, addressLine1, addressLine2, city, state, zipCode }, handleDetailsChange }) => (\n  <div className=\"card-block\">\n    <h2>Contact Information (optional)</h2>\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"row mb-0\">\n          <div className=\"input-field col s12 focus-blue\">\n            <input\n              type=\"tel\"\n              id=\"phone\"\n              name=\"phone\"\n              value={phone}\n              onChange={(event) => handleDetailsChange(event, 'phone', 'contactInformation')}\n            />\n            <label className={phone.length ? 'label active' : 'label'} htmlFor=\"phone\">Phone</label>\n            <span className=\"note\">*Optional</span>\n          </div>\n        </div>\n        <div className=\"row mb-0\">\n          <div className=\"input-field col s12 focus-blue\">\n            <input\n              type=\"text\"\n              id=\"address_line_1\"\n              name=\"addressLine1\"\n              value={addressLine1}\n              onChange={(event) => handleDetailsChange(event, 'addressLine1', 'contactInformation')}\n            />\n            <label className={addressLine1.length ? 'label active' : 'label'} htmlFor=\"address_line_1\">Address Line 1*</label>\n            <span className=\"note\">*Optional</span>\n          </div>\n        </div>\n        <div className=\"row mb-0\">\n          <div className=\"input-field col s12 focus-blue\">\n            <input\n              type=\"text\"\n              id=\"address_line_2\"\n              name=\"addressLine2\"\n              value={addressLine2}\n              onChange={(event) => handleDetailsChange(event, 'addressLine2', 'contactInformation')}\n            />\n            <label className={addressLine2.length ? 'label active' : 'label'} htmlFor=\"address_line_2\">Address Line 2*</label>\n            <span className=\"note\">*Optional</span>\n          </div>\n        </div>\n        <div className=\"row mb-0\">\n          <div className=\"input-field col s12 focus-blue\">\n            <input\n              type=\"text\"\n              id=\"city\"\n              name=\"city\"\n              value={city}\n              onChange={(event) => handleDetailsChange(event, 'city', 'contactInformation')}\n            />\n            <label className={city.length ? 'label active' : 'label'} htmlFor=\"city\">City</label>\n            <span className=\"note\">*Optional</span>\n          </div>\n        </div>\n        <div className=\"row mb-0\">\n          <div className=\"col s6 l5\">\n            <div className=\"input-field focus-blue\">\n              <Dropdown\n                value={getValueFromState(state, stateOptions)}\n                onChange={(event) => handleDetailsChange(event, 'state', 'contactInformation')}\n                options={stateOptions}\n                label=\"State\"\n                stateKey=\"state\"\n                dropdownKey=\"state\"\n              />\n              <span className=\"note\">*Optional</span>\n            </div>\n          </div>\n          <div className=\"col s6 l7\">\n            <div className=\"input-field focus-blue\">\n              <input\n                type=\"text\"\n                id=\"zip_code\"\n                name=\"zipCode\"\n                value={zipCode}\n                onChange={(event) => handleDetailsChange(event, 'zipCode', 'contactInformation')}\n              />\n              <label className={zipCode.length ? 'label active' : 'label'} htmlFor=\"zip_code\">Zip</label>\n              <span className=\"note\">*Optional</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nContactInformation.propTypes = {\n  state: PropTypes.object.isRequired,\n  handleDetailsChange: PropTypes.func.isRequired,\n};\n\nexport default ContactInformation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dynamic from 'next/dynamic';\n\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\n\nconst DatePicker = dynamic(() => import('../../../../FormComponents/DatePicker'), {\n  ssr: false,\n});\n\nconst startDateOptions = [\n  {\n    label: 'First Assignment Date (Default)',\n    value: 'firstAssignmentDate',\n  },\n  {\n    label: 'Second Option',\n    value: 'secondOption',\n  },\n  {\n    label: 'Third Option',\n    value: 'thirdOption',\n  },\n];\n\nconst endDateOptions = [\n  {\n    label: 'First Assignment Date (Default)',\n    value: 'firstAssignmentDate',\n  },\n  {\n    label: 'Second Option',\n    value: 'secondOption',\n  },\n  {\n    label: 'Third Option',\n    value: 'thirdOption',\n  },\n];\n\nconst targetTestDateOptions = [\n  {\n    label: 'October 6, 2018',\n    value: 'firstAssignmentDate',\n  },\n  {\n    label: 'Second Option',\n    value: 'secondOption',\n  },\n  {\n    label: 'Third Option',\n    value: 'thirdOption',\n  },\n];\n\nconst CourseContext = ({ state: { courseStartDateOption, courseStartDate, courseEndDateOption, courseEndDate, targetTestDate, targetScore, highSchool, graduationYear }, handleDetailsChange }) => (\n  <div className=\"row mb-0 one-large-col d-flex-content\">\n    <div className=\"col s12\">\n      <div className=\"card-block\">\n        <h2>Course Context</h2>\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"course-context_two-col\">\n              <div className=\"column\">\n                <div className=\"row mb-0\">\n                  <div className=\"col s12\">\n                    <div className=\"input-field focus-blue\">\n                      <Dropdown\n                        value={getValueFromState(courseStartDateOption, startDateOptions)}\n                        onChange={(event) => handleDetailsChange(event, 'courseStartDateOption', 'courseContext')}\n                        options={startDateOptions}\n                        label=\"Course Start Date\"\n                        stateKey=\"courseStartDateOption\"\n                        dropdownKey=\"courseStartDateOption\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col s4\">\n                    <div className=\"datepicker-field input-field\">\n                      <i className=\"icon-calendar-dark\"></i>\n                      <DatePicker\n                        selected={courseStartDate}\n                        id=\"course_start_date\"\n                        onChange={(event) => handleDetailsChange(event, 'courseStartDate', 'courseContext')}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row mb-0\">\n                  <div className=\"col s12\">\n                    <div className=\"input-field focus-blue\">\n                      <Dropdown\n                        value={getValueFromState(courseEndDateOption, endDateOptions)}\n                        onChange={(event) => handleDetailsChange(event, 'courseEndDateOption', 'courseContext')}\n                        options={endDateOptions}\n                        label=\"Course End Date\"\n                        stateKey=\"courseEndDateOption\"\n                        dropdownKey=\"courseEndDateOption\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col s4\">\n                    <div className=\"datepicker-field input-field\">\n                      <i className=\"icon-calendar-dark\"></i>\n                      <DatePicker\n                        selected={courseEndDate}\n                        id=\"course_end_date\"\n                        onChange={(event) => handleDetailsChange(event, 'courseEndDate', 'courseContext')}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"column\">\n                <div className=\"row\">\n                  <div className=\"col s12 m6 l8\">\n                    <div className=\"input-field focus-blue\">\n                      <Dropdown\n                        value={getValueFromState(targetTestDate, targetTestDateOptions)}\n                        onChange={(event) => handleDetailsChange(event, 'targetTestDate', 'courseContext')}\n                        options={targetTestDateOptions}\n                        label=\"Target Test Date*\"\n                        stateKey=\"targetTestDate\"\n                        dropdownKey=\"targetTestDate\"\n                      />\n                      <span className=\"note\">*Optional</span>\n                    </div>\n                  </div>\n                  <div className=\"col s12 m6 l4\">\n                    <div className=\"input-field focus-blue\">\n                      <input\n                        type=\"text\"\n                        id=\"target_score\"\n                        name=\"targetScore\"\n                        value={targetScore}\n                        onChange={(event) => handleDetailsChange(event, 'targetScore', 'courseContext')}\n                      />\n                      <label className={targetScore.length ? 'label active' : 'label'} htmlFor=\"target_score\">Target Score*</label>\n                      <span className=\"note\">*Optional</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col s12\">\n                    <div className=\"input-field focus-blue\">\n                      <input\n                        type=\"text\"\n                        id=\"high_school\"\n                        name=\"highSchool\"\n                        value={highSchool}\n                        onChange={(event) => handleDetailsChange(event, 'highSchool', 'courseContext')}\n                      />\n                      <label className={highSchool.length ? 'label active' : 'label'} htmlFor=\"high_school\">High School*</label>\n                      <span className=\"note\">*Optional</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row mb-0\">\n                  <div className=\"col s12\">\n                    <div className=\"input-field focus-blue\">\n                      <input\n                        type=\"text\"\n                        id=\"graduation_year\"\n                        name=\"graduationYear\"\n                        value={graduationYear}\n                        onChange={(event) => handleDetailsChange(event, 'graduationYear', 'courseContext')}\n                      />\n                      <label className={graduationYear.length ? 'label active' : 'label'} htmlFor=\"graduation_year\">Graduation Year*</label>\n                      <span className=\"note\">*Optional</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nCourseContext.propTypes = {\n  state: PropTypes.object.isRequired,\n  handleDetailsChange: PropTypes.func.isRequired,\n};\n\nexport default CourseContext;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DeleteAccount = ({ activeButton, onDeleteAccount }) => (\n  <div className=\"row mb-0 d-flex-content large sameheight\">\n    <div className=\"col s12 l5\">\n      <div className=\"card-block\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"account-block\">\n              <h3>Delete Account</h3>\n              <p>{\"This option will only be available until the student account is activated.  Once activated, if you need to delete a student's account, please contact your system administrator.\"}</p>\n              <p>\n                <button\n                  className={`btn waves-effect waves-light bg-blue ${activeButton ? '' : 'disabled'}`}\n                  type=\"submit\"\n                  name=\"action\"\n                  onClick={onDeleteAccount}\n                >\n                  Delete Account\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nDeleteAccount.propTypes = {\n  activeButton: PropTypes.bool.isRequired,\n  onDeleteAccount: PropTypes.func.isRequired,\n};\n\nexport default DeleteAccount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst EmailAddress = ({ state: { email }, handleDetailsChange }) => (\n  <div className=\"card-block\">\n    <h2>Email Address</h2>\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"row mb-0\">\n          <div className=\"input-field col s12 focus-blue\">\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={(event) => handleDetailsChange(event, 'email', 'emailAddress')}\n            />\n            <label className={email.length ? 'label active' : 'label'} htmlFor=\"email\">Email*</label>\n            <span className=\"note\">*Optional</span>\n          </div>\n        </div>\n        <p className=\"text\">A valid student email address is required for most student functions. You may create an account without an email address, but until a valid email address is entered, the student will not receive the requisite welcome email and cannot login to the system.</p>\n      </div>\n    </div>\n  </div>\n);\n\nEmailAddress.propTypes = {\n  state: PropTypes.object.isRequired,\n  handleDetailsChange: PropTypes.func.isRequired,\n};\n\nexport default EmailAddress;\n","/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport InstructorCard from '../../../../Instructor/components/InstructorCard';\n\nconst Instructor = ({ state: { instructors }, onOpenInstructorModal, onRemoveInstructor }) => (\n  <div className=\"card-block\">\n    <h3>Instructor</h3>\n    <div className=\"card card-instructor\">\n      <div className=\"card-content\">\n        <div className=\"text-block\">\n          <p>Add one or more instructors to the list below. Each instructor can manage the student’s course.</p>\n        </div>\n        <div className=\"box-scrollable\">\n          <div className=\"height-15 jcf-scrollable\">\n            <div className=\"card-location-holder\" style={{ height: '100%', overflowY: 'scroll' }}>\n              {!instructors.length && (\n                <div className=\"add-class-box\"></div>\n              )}\n              {instructors.map((instructor, index) => (\n                <InstructorCard instructor={instructor} key={instructor.id} onRemoveInstructor={() => onRemoveInstructor(index, 'instructor', 'instructors')} />\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className=\"card-footer right-align\">\n          <a\n            href=\"#\"\n            onClick={onOpenInstructorModal}\n            className=\"modal-trigger link-block\"\n          >\n            Add Instructor\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nInstructor.propTypes = {\n  state: PropTypes.object.isRequired,\n  onOpenInstructorModal: PropTypes.func.isRequired,\n  onRemoveInstructor: PropTypes.func.isRequired,\n};\n\nexport default Instructor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport LocationCard from '../../../../Location/components/LocationCard';\n\nconst Location = ({ state: { locations }, onOpenLocationModal, onRemoveLocation }) => (\n  <div className=\"card-block\">\n    <h3>Location</h3>\n    <div className=\"card card-instructor\">\n      <div className=\"card-content\">\n        <div className=\"text-block\">\n          <p>Depending on your settings, you may have more than one location/branch. The student’s location aﬀects which managers have access to this student. </p>\n        </div>\n        <div className=\"box-scrollable\">\n          <div className=\"height-15 jcf-scrollable\">\n            <div className=\"card-location-holder\" style={{ height: '100%', overflowY: 'scroll' }}>\n              {!locations.length && (\n                <div className=\"add-class-box\"></div>\n              )}\n              {locations.map((location, index) => (\n                <LocationCard location={location} key={location.id} onRemoveLocation={() => onRemoveLocation(index, 'location', 'locations')} />\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className=\"card-footer right-align\">\n          <a\n            href=\"#\"\n            onClick={onOpenLocationModal}\n            className=\"modal-trigger link-block\"\n          >\n            Add Location\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nLocation.propTypes = {\n  state: PropTypes.object.isRequired,\n  onRemoveLocation: PropTypes.func.isRequired,\n  onOpenLocationModal: PropTypes.func.isRequired,\n};\n\nexport default Location;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst StudentInformation = ({ state: { firstName, lastName }, handleDetailsChange }) => (\n  <div className=\"card-block\">\n    <h2>Student Information</h2>\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"row mb-0\">\n          <div className=\"input-field col s12 focus-blue\">\n            <input\n              type=\"text\"\n              id=\"first_name\"\n              name=\"firstName\"\n              value={firstName}\n              onChange={(event) => handleDetailsChange(event, 'firstName', 'studentInformation')}\n            />\n            <label className={firstName.length ? 'label active' : 'label'} htmlFor=\"first_name\">First Name</label>\n          </div>\n        </div>\n        <div className=\"row mb-0\">\n          <div className=\"input-field col s12 focus-blue\">\n            <input\n              type=\"text\"\n              id=\"last_name\"\n              name=\"lastName\"\n              value={lastName}\n              onChange={(event) => handleDetailsChange(event, 'lastName', 'studentInformation')}\n            />\n            <label className={lastName.length ? 'label active' : 'label'} htmlFor=\"last_name\">Last Name</label>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nStudentInformation.propTypes = {\n  state: PropTypes.object.isRequired,\n  handleDetailsChange: PropTypes.func.isRequired,\n};\n\nexport default StudentInformation;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport { toast } from 'react-toastify';\n\nimport Toast from '../../Toast';\nimport StudentInformation from './components/StudentInformation';\nimport ContactInformation from './components/ContactInformation';\nimport EmailAddress from './components/EmailAddress';\nimport Location from './components/Location';\nimport Instructor from './components/Instructor';\nimport Class from './components/Class';\nimport AccountStatus from './components/AccountStatus';\nimport AccountType from './components/AccountType';\nimport CourseContext from './components/CourseContext';\nimport AccountSettings from './components/AccountSettings';\nimport Actions from './components/Actions';\nimport DeleteAccount from './components/DeleteAccount';\n\nimport ClassModal from '../ClassModal';\nimport LocationModal from '../../Location/components/LocationModal';\nimport InstructorModal from '../../Instructor/components/InstructorModal';\n\nimport { nestedEditFieldValidation } from '../../utils/fieldValidation';\n\nclass AccountPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locationModalOpen: false,\n      instructorModalOpen: false,\n      classModalOpen: false,\n      originalUser: {\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n        instructor: {\n          instructors: [],\n        },\n        course: {\n          classes: [],\n        },\n        courseContext: {\n          courseStartDateOption: '',\n          courseStartDate: '',\n          courseEndDateOption: '',\n          courseEndDate: '',\n          targetTestDate: '',\n          targetScore: '',\n          highSchool: '',\n          graduationYear: '',\n        },\n        accountSettings: {\n          loginBeforeActivation: false,\n          unstructuredCourseMode: false,\n          defaultSessionDuration: '',\n          videoSolutionsRequired: false,\n          preventLogin: false,\n          inactive: false,\n          excludeFromStatistics: false,\n        },\n      },\n      updatedUser: {\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [],\n        },\n        instructor: {\n          instructors: [],\n        },\n        course: {\n          classes: [],\n        },\n        courseContext: {\n          courseStartDateOption: '',\n          courseStartDate: '',\n          courseEndDateOption: '',\n          courseEndDate: '',\n          targetTestDate: '',\n          targetScore: '',\n          highSchool: '',\n          graduationYear: '',\n        },\n        accountSettings: {\n          loginBeforeActivation: false,\n          unstructuredCourseMode: false,\n          defaultSessionDuration: '',\n          videoSolutionsRequired: false,\n          preventLogin: false,\n          inactive: false,\n          excludeFromStatistics: false,\n        },\n      },\n      actions: {\n        ccAdmin: false,\n        requireUserToChange: false,\n        password: '',\n        confirmPassword: '',\n      },\n      validation: {\n        studentInformation: {\n          firstName: true,\n          lastName: true,\n        },\n        emailAddress: {\n          email: true,\n        },\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { user: { id, studentInformation, contactInformation, emailAddress, location, instructor, course, courseContext, accountSettings } = {} } = this.props;\n    const updatedUser = { id, studentInformation, contactInformation, emailAddress, location, instructor, course, courseContext, accountSettings };\n    const { originalUser: originalUserState } = this.state;\n    const originalUser = update(originalUserState, {\n      $merge: updatedUser,\n    });\n    this.setState({ originalUser, updatedUser }); // eslint-disable-line\n  }\n\n  // TODO: This seems to be working well - confirm that only one isntance of this edit modal is opening on the user edit page\n  // This resets the component state to reflect the details of the next user the user clicks on\n  componentWillReceiveProps = (nextProps) => {\n    if ((!this.state.originalUser || nextProps.user.id !== this.state.originalUser.id)) {\n      const { user: { id, studentInformation, contactInformation, emailAddress, location, instructor, course, courseContext, accountSettings } = {} } = nextProps;\n      const updatedUser = { id, studentInformation, contactInformation, emailAddress, location, instructor, course, courseContext, accountSettings };\n      const { originalUser: originalUserState } = this.state;\n      const originalUser = update(originalUserState, {\n        $merge: nextProps.user,\n      });\n      this.setState({ originalUser, updatedUser });\n    }\n  }\n\n  onOpenLocationModal = () => this.setState({ locationModalOpen: true });\n  onCloseLocationModal = () => this.setState({ locationModalOpen: false });\n\n  onOpenInstructorModal = () => this.setState({ instructorModalOpen: true });\n  onCloseInstructorModal = () => this.setState({ instructorModalOpen: false });\n\n  onOpenClassModal = () => this.setState({ classModalOpen: true });\n  onCloseClassModal = () => this.setState({ classModalOpen: false });\n\n  // This function is passed into nestedCreateFieldValidation, it takes the result of the validation check and a callback function\n  // The updated component validation state is set and then the callback is dispatched - in this case, the callback handles the toast warning at the container level\n  onSetValidation = (validation, cb) => this.setState({ validation }, cb);\n\n  // TODO: Clean this up once the react toast bugs are fixed. Just logging the validation response for now\n  onSaveChanges = async (event) => {\n    event.preventDefault();\n    // const { onSavePassageChanges, onSaveChangesError, onSetPassageValidation } = this.props;\n    const { updatedUser } = this.state;\n    const valid = await nestedEditFieldValidation(this.state, this.state.updatedUser, this.onSetValidation, (validation) => console.warn('validation', validation));\n    if (!valid) {\n      // return onSaveChangesError();\n      console.warn('not valid');\n    }\n    this.setState({ originalUser: this.state.updatedUser });\n    // return onSavePassageChanges(updatedUser);\n  }\n\n  onDeleteAccount = () => {\n    console.warn('Stubbed out delete user');\n  }\n\n  onSendWelcomeEmail = (event) => {\n    event.preventDefault();\n    console.warn('Stubbed out send email');\n  }\n\n  onSendPasswordResetEmail = (event) => {\n    event.preventDefault();\n    console.warn('Stubbed out password reset email');\n  }\n\n  onResetPassword = (event) => {\n    event.preventDefault();\n    const { actions: { password, confirmPassword } } = this.state;\n    if (password !== confirmPassword) {\n      console.warn('Toast is broken, have a console log');\n      // return this.notify\n    }\n    if (!confirmPassword.length) {\n      console.warn('Toast is broken, have a console log');\n      // return this.notify()\n    }\n    return console.warn('stubbed out password reset');\n  }\n\n  onRemoveOption = (optionIndex, section, array) => {\n    const updatedUser = update(this.state.updatedUser, {\n      [section]: {\n        [array]: {\n          $splice: [[optionIndex, 1]],\n        },\n      },\n    });\n    this.setState({ updatedUser });\n  }\n\n  initialUserMount = () => this.state.originalUser.id !== this.props.user.id;\n\n  handleActionsChange = (event, name, checkBox = false) => {\n    const { actions: previousActions } = this.state;\n    let value;\n    if (checkBox) {\n      value = !previousActions.ccAdmin;\n    } else {\n      value = event.target.value;\n    }\n    const updatedState = update(this.state, {\n      actions: { $merge: { [name]: value } },\n    });\n    this.setState(updatedState);\n  }\n\n  handleOptionsChange = (selectedOptions, section, array) => {\n    const updatedUser = update(this.state.updatedUser, {\n      [section]: {\n        [array]: {\n          $set: selectedOptions,\n        },\n      },\n    });\n    this.setState({ updatedUser });\n  }\n\n  // Checkbox is passed in as a boolean to avoid creating a mostly similar function just for the active checkbox\n  // We pull the value based on the field type then merge that updated key/value pair with the last version of component state\n  handleDetailsChange = (event, name, section, checkBox = false) => {\n    const { updatedUser: previousUserState } = this.state;\n    let value;\n    if (checkBox) {\n      value = !previousUserState[section][name];\n    } else {\n      value = event.target ? event.target.value : event;\n    }\n    const updatedUser = update(previousUserState, {\n      [section]: { $merge: { [name]: value } },\n    });\n    this.setState({ updatedUser });\n  }\n\n  render() {\n    const { locationModalOpen, instructorModalOpen, classModalOpen, actions,\n      updatedUser: { studentInformation: updatedStudentInformation, contactInformation: updatedContactInformation, emailAddress: updatedEmailAddress, location: updatedLocation,\n        instructor: updatedInstructor, course: updatedClasses, courseContext: updatedCourseContext, accountSettings: updatedAccountSettings } } = this.state;\n    const { user: { studentInformation, contactInformation, emailAddress, location, instructor, course, courseContext, accountSettings, accountStatus, accountType } = {} } = this.props;\n    return (\n      <React.Fragment>\n        <Toast />\n        <ClassModal\n          open={classModalOpen}\n          onClose={this.onCloseClassModal}\n          handleClassChange={this.handleOptionsChange}\n        />\n        <LocationModal\n          open={locationModalOpen}\n          onClose={this.onCloseLocationModal}\n          handleLocationsChange={(selectedLocations) => this.handleOptionsChange(selectedLocations, 'location', 'locations')}\n        />\n        <InstructorModal\n          open={instructorModalOpen}\n          onClose={this.onCloseInstructorModal}\n          handleInstructorsChange={(selectedInstructors) => this.handleOptionsChange(selectedInstructors, 'instructor', 'instructors')}\n        />\n        <div className=\"content-section\">\n          <div className=\"content-section-holder\">\n            <div className=\"row mb-0 d-flex-content large\">\n              <div className=\"col s12 l5\">\n                <StudentInformation\n                  state={this.initialUserMount() ? studentInformation : updatedStudentInformation}\n                  handleDetailsChange={this.handleDetailsChange}\n                />\n                <ContactInformation\n                  state={this.initialUserMount() ? contactInformation : updatedContactInformation}\n                  handleDetailsChange={this.handleDetailsChange}\n                />\n                <EmailAddress\n                  state={this.initialUserMount() ? emailAddress : updatedEmailAddress}\n                  handleDetailsChange={this.handleDetailsChange}\n                />\n              </div>\n              <div className=\"col s12 l5\">\n                <Location\n                  state={this.initialUserMount() ? location : updatedLocation}\n                  onOpenLocationModal={this.onOpenLocationModal}\n                  onRemoveLocation={this.onRemoveOption}\n                />\n                <Instructor\n                  state={this.initialUserMount() ? instructor : updatedInstructor}\n                  onOpenInstructorModal={this.onOpenInstructorModal}\n                  onRemoveInstructor={this.onRemoveOption}\n                />\n                <Class\n                  state={this.initialUserMount() ? course : updatedClasses}\n                  onOpenClassModal={this.onOpenClassModal}\n                  onRemoveClass={this.onRemoveOption}\n                />\n              </div>\n            </div>\n            <div className=\"row mb-0 d-flex-content large sameheight\">\n              <AccountStatus\n                state={accountStatus}\n              />\n              <AccountType\n                state={accountType}\n              />\n            </div>\n            <CourseContext\n              state={this.initialUserMount() ? courseContext : updatedCourseContext}\n              handleDetailsChange={this.handleDetailsChange}\n            />\n            <AccountSettings\n              state={this.initialUserMount() ? accountSettings : updatedAccountSettings}\n              handleDetailsChange={this.handleDetailsChange}\n            />\n            <Actions\n              state={actions}\n              handleActionsChange={this.handleActionsChange}\n              onResetPassword={this.onResetPassword}\n              onSendWelcomeEmail={this.onSendWelcomeEmail}\n              onSendPasswordResetEmail={this.onSendPasswordResetEmail}\n            />\n            <DeleteAccount\n              activeButton={accountStatus.status !== 'Activated'}\n              onDeleteAccount={this.onDeleteAccount}\n            />\n            <a\n              href=\"#\"\n              onClick={this.onSaveChanges}\n              className=\"btn\"\n            >\n            Save\n            </a>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nAccountPage.propTypes = {\n  user: PropTypes.object,\n};\n\nexport default AccountPage;\n","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport update from \"immutability-helper\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { StickyContainer } from \"react-sticky\";\nimport FilterSection from \"../../Dashboard/components/FilterSection\";\nimport CalendarHeader from \"../../Dashboard/components/CalendarHeader\";\nimport CalendarRow from \"../../Dashboard/components/CalendarRow\";\n\nimport AssignSessionModal from \"../../Dashboard/components/Modals/AssignSessionModal\";\nimport AssignTestSectionModal from \"../../Dashboard/components/Modals/AssignTestSectionModal\";\nimport AssignSimulatedSatModal from \"../../Dashboard/components/Modals/AssignSimulatedSATModal\";\nimport AssignTargetTestModal from \"../../Dashboard/components/Modals/AssignTargetTestModal\";\nimport AssignLessonModal from \"../../Dashboard/components/Modals/AssignLessonModal\";\nimport AssignWorksheetModal from '../../Dashboard/components/Modals/AssignWorksheetModal';\n\nimport {\n  currentYear,\n  getFirstDay,\n  getDaysInActiveMonth,\n  getDaysInPreviousMonth,\n  getDayDate,\n  getNextMonthAsCurrentMonth,\n} from \"../../Dashboard/utils/dateAndCalendarUtils\";\n\n\nimport {\n  makeSelectAssignLessonsModalOpen,\n  makeSelectAssignWorkSheetsModalOpen,\n  makeSelectCalendarRows,\n} from '../index/selectors';\n\nimport {\n  setAssignLessonsModalOpen,\n  setAssignWorksheetModalOpen,\n  setCalendarRows,\n} from '../index/actions';\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeMonth: '',\n      filters: [],\n      eventFilters: [],\n      activeDate: null,\n      activeColumn: null,\n      addDropdownOpen: false,\n      deleteDropdownOpen: false,\n      assignDropdownIsOpen: false,\n      onToggleHandleFilteredItemsDropdown: false,\n      assignSessionModalOpen: false,\n      assignTestSectionModalOpen: false,\n      assignSimulatedSatModalOpen: false,\n      assignTargetTestDateModalOpen: false,\n      assignLessonsModalOpen: false,\n      assignWorksheetsModalOpen: false,\n      modalDate: null,\n      accountActivated: false,\n      activationDropdownOpen: false,\n      licenseCode: '',\n    };\n  }\n\n\n  // This is called onMount in CalendarHeader component to set the current month calendar rows, and every time the month changes afterward\n  // IMPORTANT: activeMonthIndex is zero-based, meaning January is 0, February is 1, etc.\n  onSetActiveMonth = activeMonthIndex => {\n    // daysInPreviousMonth is used to handle cases where the calendar for the month starts with dates from the preceding month\n    // firstDay indicates the day the first day of the month falls on in a zero-based index manner, meaning Sunday is 0, Monday is 1, etc\n    const daysInPreviousMonth = getDaysInPreviousMonth(activeMonthIndex);\n    const daysInActiveMonth = getDaysInActiveMonth(activeMonthIndex);\n    const firstDay = getFirstDay(activeMonthIndex);\n    const rows = [];\n\n    // We increment calDate and change inMonth in the case where dates from the next month appear in row 1 or row 6\n    // Since activeMonthIndex is zero-based, currentMonth adds 1 so the cells are accurate as actual calendar dates\n    // getNextMonthAsCurrentMonth is used to derive the current month to ensure it matches the format of incoming dates - 01/15/19 vs 1/15/19, otherwise new events wouldn't find the date to be assigned to\n    let inMonth = true;\n    let calDate = 1;\n    let currentMonth = getNextMonthAsCurrentMonth(activeMonthIndex);\n    if (firstDay !== 0) {\n      currentMonth =\n        currentMonth > 9 ? (currentMonth -= 1) : `0${currentMonth - 1}`;\n      calDate = daysInPreviousMonth - firstDay + 1;\n      inMonth = false;\n    }\n    // First for loop handles the 6 calendar rows, second for loop handles the 7 days of the week\n    for (let i = 0; i < 6; i++) {\n      const rowArr = [];\n      for (let j = 0; j < 7; j++) {\n        const date = `${currentMonth}/${\n          calDate > 9 ? calDate : `0${calDate}`\n        }/${currentYear}`;\n        const dayDate = getDayDate(date);\n        const activeDateKey = `row-${i + 1}-column-${j + 1}`;\n        // This if statement handles the easiest calendar month scenario, where the 1st of the month falls on a Sunday\n        if (firstDay === 0) {\n          const dateCell = {\n            date,\n            dayDate,\n            calDate,\n            activeDateKey,\n            inMonth,\n            sessions: [],\n            lessons: [],\n            worksheets: [],\n            testSections: [],\n            simulatedSat: [],\n          };\n          // This if statement handles the case where the date spills over into the next month\n          if (calDate === daysInActiveMonth) {\n            calDate = 1;\n            currentMonth =\n              activeMonthIndex > 9\n                ? activeMonthIndex + 2\n                : `0${activeMonthIndex + 2}`;\n            inMonth = false;\n          } else {\n            calDate += 1;\n          }\n          rowArr.push(dateCell);\n        }\n        // This else statement handles the more likely scenario, where the first row contains several days from the preceding month\n        else {\n          const dateCell = {\n            date,\n            dayDate,\n            calDate,\n            activeDateKey,\n            inMonth,\n            sessions: [],\n            lessons: [],\n            worksheets: [],\n            testSections: [],\n            simulatedSat: [],\n          };\n          // This if statement handles the case where the date spills over into the next month\n          if (inMonth === false && calDate === daysInPreviousMonth) {\n            calDate = 1;\n            currentMonth = getNextMonthAsCurrentMonth(activeMonthIndex);\n            inMonth = true;\n          } else if (inMonth === true && calDate === daysInActiveMonth) {\n            currentMonth =\n              activeMonthIndex > 9\n                ? activeMonthIndex + 2\n                : `0${activeMonthIndex + 2}`;\n            calDate = 1;\n            inMonth = false;\n          } else {\n            calDate += 1;\n          }\n          rowArr.push(dateCell);\n        }\n      }\n      rows.push(...rowArr);\n    }\n    this.setState({ activeMonth: activeMonthIndex });\n    if (this.props.rows.length === 0) {\n      const { onSetCalendarRows } = this.props;\n      onSetCalendarRows(rows);\n    }\n  };\n\n  onSetActiveDate = incomingDate => {\n    this.setState({ activeDate: incomingDate, activeColumn: incomingDate[13] });\n  };\n\n  onAssignSession = session => {\n    const { rows } = this.props;\n    const updatedDate = rows.filter(row => row.date === session.date)[0];\n    const updatedDateIndex = rows.indexOf(updatedDate);\n    updatedDate.sessions.push(session);\n    const updatedRows = update(rows, {\n      $splice: [[updatedDateIndex, 1, updatedDate]],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n    this.onToggleAssignSessionModal();\n  };\n\n\n  onAssignLessons = (lessons, date) => {\n    const { rows } = this.props;\n    const updatedDate = rows.filter(row => row.date === date)[0];\n    const updatedDateIndex = rows.indexOf(updatedDate);\n    updatedDate.lessons.push(...lessons);\n    const updatedRows = update(rows, {\n      $splice: [[updatedDateIndex, 1, updatedDate]],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n    this.onToggleAssignLessonsModal();\n  };\n\n  onToggleAssignLessonsModal = (event = null, modalDate = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    const { onSetAssignLessonsModalOpen, assignLessonsModalOpen } = this.props;\n    onSetAssignLessonsModalOpen(!assignLessonsModalOpen);\n    this.setState({ modalDate, assignDropdownIsOpen: false });\n  };\n\n  onAssignTestSection = testSection => {\n    const { rows } = this.props;\n    const updatedDate = rows.filter(row => row.date === testSection.assignDate)[0];\n    const updatedDateIndex = rows.indexOf(updatedDate);\n    updatedDate.testSections.push(testSection);\n    const updatedRows = update(rows, {\n      $splice: [[updatedDateIndex, 1, updatedDate]],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n    this.onToggleAssignTestSectionModal();\n  };\n\n  onAssignSimulatedSat = simulatedSat => {\n    const { rows } = this.props;\n    const updatedDate = rows.filter(\n      row => row.date === simulatedSat.assignDate\n    )[0];\n    const updatedDateIndex = rows.indexOf(updatedDate);\n    updatedDate.simulatedSat.push(simulatedSat);\n    const updatedRows = update(rows, {\n      $splice: [[updatedDateIndex, 1, updatedDate]],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n    this.onToggleAssignSimulatedSatModal();\n  };\n\n  onAssignTargetTest = targetTestDate => {\n    throw `pending decision of what test date assign ui looks like${targetTestDate.toString()}`;\n    // console.warn(, targetTestDate);\n  };\n\n  onToggleAssignSessionModal = (event = null, modalDate = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState(({ assignSessionModalOpen }) => ({\n      assignSessionModalOpen: !assignSessionModalOpen,\n      modalDate,\n      assignDropdownIsOpen: false,\n    }));\n  };\n\n  onToggleAssignTestSectionModal = (event = null, modalDate = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState(({ assignTestSectionModalOpen }) => ({\n      assignTestSectionModalOpen: !assignTestSectionModalOpen,\n      modalDate,\n      assignDropdownIsOpen: false,\n    }));\n  };\n\n  onToggleAssignSimulatedSatModal = (event = null, modalDate = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState(({ assignSimulatedSatModalOpen }) => ({\n      assignSimulatedSatModalOpen: !assignSimulatedSatModalOpen,\n      modalDate,\n      assignDropdownIsOpen: false,\n    }));\n  };\n\n  onToggleAssignTargetTestModal = (event = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState(({ assignTargetTestDateModalOpen }) => ({\n      assignTargetTestDateModalOpen: !assignTargetTestDateModalOpen,\n      assignDropdownIsOpen: false,\n    }));\n  };\n\n  onToggleAddDropdown = () =>\n    this.setState(({ addDropdownOpen }) => ({\n      addDropdownOpen: !addDropdownOpen,\n      deleteDropdownOpen: false,\n    }));\n  onToggleDeleteDropdown = () =>\n    this.setState(({ deleteDropdownOpen }) => ({\n      deleteDropdownOpen: !deleteDropdownOpen,\n      addDropdownOpen: false,\n    }));\n\n  onToggleAssignDropdown = () =>\n    this.setState(({ assignDropdownIsOpen }) => ({\n      assignDropdownIsOpen: !assignDropdownIsOpen,\n    }));\n  onToggleHandleFilteredItemsDropdown = () =>\n    this.setState(({ onToggleHandleFilteredItemsDropdown }) => ({\n      onToggleHandleFilteredItemsDropdown: !onToggleHandleFilteredItemsDropdown,\n    }));\n\n  onClearFilters = () => this.setState({ filters: [], eventFilters: [] });\n\n  onHandleDetailsChange = (name, event) =>\n    this.setState({ [name]: event.target.value });\n\n  onDragEnd = result => {\n    const { rows } = this.props;\n    const { source, destination, draggableId } = result;\n    // The following draggable vars are pulled from the dragged item to identify the event type (lesson, worksheet, etc), date, and index in that date's array of that type of event\n    const draggableKeys = draggableId.split(\"-\");\n    const draggableType = draggableKeys[0];\n    const draggableIndex = draggableKeys[2];\n\n    // If the event isn't switching dates, we return out of the function early and do nothing\n    if (!destination || source.droppableId === destination.droppableId) {\n      return;\n    }\n\n    // The follwing sourceDate and destinationDate vars are used to find the dates being modified and their index in the month of calendar dates\n    const sourceDateKey = source.droppableId.split(\"-\")[1];\n    const destinationDateKey = destination.droppableId.split(\"-\")[1];\n\n    const sourceDate = rows.filter(row => row.date === sourceDateKey)[0];\n    const destinationDate = rows.filter(\n      row => row.date === destinationDateKey\n    )[0];\n\n    const sourceDateIndex = rows.indexOf(sourceDate);\n    const destinationDateIndex = rows.indexOf(destinationDate);\n\n    // Here we target the event being moved, alter its date to that of the destintion, splice it from the source and push it to the destination\n    // Finally, we perform two splice operations to replace the old source and destination dates with their updated equivalents\n    const movedEvent = sourceDate[draggableType][draggableIndex];\n    movedEvent.date = destinationDate.date;\n    sourceDate[draggableType].splice(draggableIndex, 1);\n    destinationDate[draggableType].push(movedEvent);\n    const updatedRows = update(rows, {\n      $splice: [+[sourceDateIndex, 1, sourceDate],\n        [destinationDateIndex, 1, destinationDate],\n      ],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n  };\n\n  handleFilterClick = (filter, eventFilter = false) => {\n    // TODO: Only the following filters are active: sessions, lessons, worksheets, test sections, simulated sats, target tests\n    // The other filters dont seem to have corresponding data in this page\n    const { filters: allFilters, eventFilters } = this.state;\n    let filters;\n    let filterName;\n    if (eventFilter) {\n      filters = eventFilters;\n      filterName = \"eventFilters\";\n    } else {\n      filters = allFilters;\n      filterName = \"filters\";\n    }\n    let updatedFilters;\n    if (filters.indexOf(filter) === -1) {\n      updatedFilters = update(filters, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = filters.indexOf(filter);\n      updatedFilters = update(filters, {\n        $splice: [[filterIndex, 1]],\n      });\n    }\n    this.setState({ [filterName]: updatedFilters });\n  };\n\n\n  onToggleAssignWorksheetsModal = (event = null, modalDate = null) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState({ modalDate, assignDropdownIsOpen: false });\n    const { onSetAssignWorksheetModalOpen, assignWorkSheetsModalOpen } = this.props;\n    onSetAssignWorksheetModalOpen(!assignWorkSheetsModalOpen);\n  };\n\n  onAssignWorksheets = (worksheets, date) => {\n    const { rows } = this.props;\n    const updatedDate = rows.filter(row => row.date === date)[0];\n    const updatedDateIndex = rows.indexOf(updatedDate);\n    updatedDate.worksheets.push(...worksheets);\n    const updatedRows = update(rows, {\n      $splice: [[updatedDateIndex, 1, updatedDate]],\n    });\n    const { onSetCalendarRows } = this.props;\n    onSetCalendarRows(updatedRows);\n    this.onToggleAssignWorksheetsModal();\n  };\n\n\n  mapRows = () => {\n    const {\n      filters,\n      eventFilters,\n      activeDate,\n      activeColumn,\n      addDropdownOpen,\n      deleteDropdownOpen,\n    } = this.state;\n    const {\n      rows,\n    } = this.props;\n    let startIndex = -7;\n    let endIndex = 0;\n    const rowArray = [];\n    for (let i = 0; i < 6; i++) {\n      startIndex += 7;\n      endIndex += 7;\n      rowArray.push(\n        <CalendarRow\n          key={i}\n          rows={rows.slice(startIndex, endIndex)}\n          filters={filters}\n          eventFilters={eventFilters}\n          activeDate={activeDate}\n          activeColumn={activeColumn}\n          addDropdownOpen={addDropdownOpen}\n          deleteDropdownOpen={deleteDropdownOpen}\n          onSetActiveDate={this.onSetActiveDate}\n          onToggleAddDropdown={this.onToggleAddDropdown}\n          onToggleDeleteDropdown={this.onToggleDeleteDropdown}\n          onToggleAssignLessonsModal={this.onToggleAssignLessonsModal}\n          onToggleAssignSessionModal={this.onToggleAssignSessionModal}\n          onToggleAssignWorksheetsModal={this.onToggleAssignWorksheetsModal}\n          onToggleAssignTestSectionModal={this.onToggleAssignTestSectionModal}\n          onToggleAssignSimulatedSatModal={this.onToggleAssignSimulatedSatModal}\n        />\n      );\n    }\n    return rowArray;\n  };\n\n  render() {\n    const {\n      assignSessionModalOpen,\n      activeMonth,\n      assignTestSectionModalOpen,\n      assignSimulatedSatModalOpen,\n      assignTargetTestDateModalOpen,\n      modalDate,\n      assignDropdownIsOpen,\n      onToggleHandleFilteredItemsDropdown,\n      filters,\n      eventFilters,\n    } = this.state;\n    const {\n      assignLessonsModalOpen,\n      assignWorkSheetsModalOpen,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <Choose>\n          <When condition={assignLessonsModalOpen}>\n            <AssignLessonModal\n              modalDate={modalDate}\n              open={assignLessonsModalOpen}\n              onClose={this.onToggleAssignLessonsModal}\n              onAssignLessons={this.onAssignLessons}\n            />\n          </When>\n          <When condition={assignWorkSheetsModalOpen}>\n            <AssignWorksheetModal\n              modalDate={modalDate}\n              open={assignWorkSheetsModalOpen}\n              onClose={this.onToggleAssignWorksheetsModal}\n              onAssignWorksheets={this.onAssignWorksheets}\n            />\n          </When>\n          <Otherwise>\n            <AssignSessionModal\n              modalDate={modalDate}\n              open={assignSessionModalOpen}\n              onClose={this.onToggleAssignSessionModal}\n              onAssignSession={this.onAssignSession}\n            />\n            <AssignTestSectionModal\n              modalDate={modalDate}\n              open={assignTestSectionModalOpen}\n              onClose={this.onToggleAssignTestSectionModal}\n              onAssignTestSection={this.onAssignTestSection}\n              user = {this.props.user}\n            />\n            <AssignSimulatedSatModal\n              modalDate={modalDate}\n              open={assignSimulatedSatModalOpen}\n              onClose={this.onToggleAssignSimulatedSatModal}\n              onAssignSimulatedSat={this.onAssignSimulatedSat}\n            />\n            <AssignTargetTestModal\n              open={assignTargetTestDateModalOpen}\n              onClose={this.onToggleAssignTargetTestModal}\n              onAssignTargetTest={this.onAssignTargetTest}\n            />\n            <StickyContainer>\n              <FilterSection\n                filters={filters}\n                eventFilters={eventFilters}\n                onClearFilters={this.onClearFilters}\n                handleFilterClick={this.handleFilterClick}\n              />\n              <div className=\"calendar-section view-month\">\n                <div className=\"calendar-slider\">\n                  <CalendarHeader\n                    activeMonth={Number(activeMonth)}\n                    onSetActiveMonth={this.onSetActiveMonth}\n                  />\n                  <div\n                    id=\"calendar\"\n                    className=\"main-slick-calendar cal-context\"\n                    style={{ width: \"100%\" }}\n                  >\n                    <div className=\"slide\">\n                      <table className=\"calendar-table cal-month-box\">\n                        <thead>\n                          <tr className=\"calendar-head-row\">\n                            <th>Su</th>\n                            <th>M</th>\n                            <th>Tu</th>\n                            <th>W</th>\n                            <th>Th</th>\n                            <th>F</th>\n                            <th>Sa</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <DragDropContext onDragEnd={this.onDragEnd}>\n                            {this.mapRows()}\n                          </DragDropContext>\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                  <div className=\"add-btn-block\">\n                    <a\n                      href=\"#\"\n                      data-target=\"dropdown_assign\"\n                      onClick={this.onToggleAssignDropdown}\n                      className=\"dropdown-trigger waves-effect waves-teal btn add-btn\"\n                    >\n                  Assign...\n                    </a>\n                    <ul\n                      id=\"dropdown_assign\"\n                      className=\"dropdown-content\"\n                      style={{\n                        display: assignDropdownIsOpen ? \"block\" : \"none\",\n                        opacity: assignDropdownIsOpen ? \"100\" : \"0\",\n                      }}\n                    >\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignSessionModal}\n                          className=\"modal-trigger\"\n                        >\n                      Session\n                        </a>\n                      </li>\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignLessonsModal}\n                          className=\"modal-trigger\"\n                        >\n                      Lesson\n                        </a>\n                      </li>\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignWorksheetsModal}\n                          className=\"modal-trigger\"\n                        >\n                      Worksheet\n                        </a>\n                      </li>\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignTestSectionModal}\n                          className=\"modal-trigger\"\n                        >\n                      Test Section\n                        </a>\n                      </li>\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignSimulatedSatModal}\n                          className=\"modal-trigger\"\n                        >\n                      Simulated SAT\n                        </a>\n                      </li>\n                      <li>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleAssignTargetTestModal}\n                          className=\"modal-trigger\"\n                        >\n                      Target Test\n                        </a>\n                      </li>\n                      <li className=\"divider\" tabIndex=\"-1\"></li>\n                      <li className=\"dropdown-footer\">\n                        <a href=\"#\" className=\"modal-trigger\">\n                      Apply Course Template\n                        </a>\n                      </li>\n                    </ul>\n                  </div>\n                  <div className=\"add-btn-block btn-block-right\">\n                    <a\n                      href=\"#\"\n                      data-target=\"dropdown_other\"\n                      onClick={this.onToggleHandleFilteredItemsDropdown}\n                      className=\"dropdown-trigger waves-effect waves-teal btn add-btn-circle\"\n                    >\n                      <i className=\"icon-dots\"></i>\n                    </a>\n                    <ul\n                      id=\"dropdown_other\"\n                      className=\"dropdown-content\"\n                      style={{\n                        display: onToggleHandleFilteredItemsDropdown\n                          ? \"block\"\n                          : \"none\",\n                        opacity: onToggleHandleFilteredItemsDropdown ? \"100\" : \"0\",\n                      }}\n                    >\n                      <li className=\"dropdown-header\">\n                        <b>With Filtered Items... </b>\n                        <b className=\"small\">\n                      (items currently visible on calendar)\n                        </b>\n                      </li>\n                      <li className=\"divider\"></li>\n                      <li>\n                        <a href=\"#\" className=\"modal-trigger\">\n                      Save Course as Template\n                        </a>\n                      </li>\n                      <li>\n                        <a href=\"#\">Reset All</a>\n                      </li>\n                      <li>\n                        <a href=\"#\">Delete All</a>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </StickyContainer>\n          </Otherwise>\n        </Choose>\n      </React.Fragment>\n    );\n  }\n}\n\n\nCalendar.propTypes = {\n  assignLessonsModalOpen: PropTypes.bool.isRequired,\n  assignWorkSheetsModalOpen: PropTypes.bool.isRequired,\n  onSetAssignLessonsModalOpen: PropTypes.func.isRequired,\n  onSetAssignWorksheetModalOpen: PropTypes.func.isRequired,\n  onSetCalendarRows: PropTypes.func.isRequired,\n  rows: PropTypes.array.isRequired,\n  user: PropTypes.object.isRequired,\n};\n\n\nconst mapStateToProps = createStructuredSelector({\n  assignLessonsModalOpen: makeSelectAssignLessonsModalOpen(),\n  assignWorkSheetsModalOpen: makeSelectAssignWorkSheetsModalOpen(),\n  rows: makeSelectCalendarRows(),\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetAssignLessonsModalOpen: (value) => dispatch(setAssignLessonsModalOpen(value)),\n    onSetAssignWorksheetModalOpen: (value) => dispatch(setAssignWorksheetModalOpen(value)),\n    onSetCalendarRows: (rows) => dispatch(setCalendarRows(rows)),\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport default compose(withConnect)(Calendar);\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ClassToggleCard = ({ course, onToggleClassSelect }) => (\n  <li onClick={() => onToggleClassSelect(course)}>\n    <input\n      type=\"checkbox\"\n    />\n    <div className=\"card-location card\">\n      <div className=\"owner-box card-panel card-panel-location\" style={{ backgroundColor: '#31837a', color: '#fff' }}>\n        <span className=\"check-link icon-check\"></span>\n        <div className=\"card-panel-row row\">\n          <div className=\"col s10\">\n            <h3 className=\"h4 truncate\">{course.className}</h3>\n            <h4 className=\"sub-title\">{course.classLocation}</h4>\n          </div>\n          <div className=\"col s2 right-align\">\n            <span className=\"block-icon\">\n              <i className=\"icon-user\"></i>\n              <span className=\"text-icon\">Instructor</span>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </li>\n);\n\nClassToggleCard.propTypes = {\n  course: PropTypes.object.isRequired,\n  onToggleClassSelect: PropTypes.func.isRequired,\n};\n\nexport default ClassToggleCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\n\nimport Portal from '../../Portal';\nimport ClickOffComponentWrapper from '../../ClickOffComponentWrapper';\nimport ClassToggleCard from './components/ClassToggleCard';\n\nimport sampleClasses from '../../utils/sampleClasses';\n\nclass ClassModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      classes: sampleClasses,\n      selectedClasses: [],\n    };\n  }\n\n  onCloseModal = () => this.setState({ selectedClasses: [] }, this.props.onClose)\n\n  onToggleClassSelect = (course) => {\n    const { selectedClasses } = this.state;\n    if (selectedClasses.indexOf(course) === -1) {\n      this.setState({ selectedClasses: [...selectedClasses, course] });\n    } else {\n      const updatedClasses = update(selectedClasses, {\n        $splice: [[selectedClasses.indexOf(course), 1]],\n      });\n      this.setState({ selectedClasses: updatedClasses });\n    }\n  }\n\n  onSaveClassChanges = () => {\n    const { selectedClasses } = this.state;\n    const { handleClassChange } = this.props;\n    handleClassChange(selectedClasses, 'course', 'classes');\n    this.onCloseModal();\n  }\n\n  render() {\n    const { open } = this.props;\n    const { classes } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={this.onCloseModal}>\n              <div id=\"modal_Location1\" className=\"modal modal-custom modal-location\">\n                <div className=\"card-modal card\">\n                  <div className=\"owner-box card-panel card-panel-title\" style={{ backgroundColor: '#00456b', color: '#fff' }}>\n                    <div className=\"card-panel-row row\">\n                      <div className=\"col\">\n                        <h3>Select Class(es)</h3>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"card-content\">\n                    <div className=\"card-body\">\n                      <span className=\"hint\">Click to select or deselect.</span>\n                      <div className=\"box-scrollable\">\n                        <div className=\"height-40 jcf-scrollable\">\n                          <div className=\"card-location-holder\" style={{ height: '100%', overflowY: 'scroll' }}>\n                            <ul className=\"checkbox-list\">\n                              {classes.map(course => (\n                                <ClassToggleCard\n                                  key={course.className}\n                                  course={course}\n                                  onToggleClassSelect={this.onToggleClassSelect}\n                                />\n                              ))}\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                      <a\n                        href=\"#\"\n                        onClick={this.onCloseModal}\n                        className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\"\n                      >\n                        Cancel\n                      </a>\n                      <a\n                        href=\"#\"\n                        className=\"btn\"\n                        onClick={this.onSaveClassChanges}\n                      >\n                        Add\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n          {`\n              h4 {\n                font-size: 2.28rem;\n                line-height: 110%;\n                margin: 1.52rem 0 .912rem 0;\n                margin-top: 0;\n              }\n              .overlay {\n                position: fixed;\n                background-color: rgba(0, 0, 0, 0.7);\n                top: 0;\n                right: 0;\n                bottom: 0;\n                left: 0;\n                z-index: 1999;\n              }\n              .card-modal {\n                margin: 0;\n                border-radius: 6px;\n              }\n              #modal_Location1 {\n                border-radius: 6px;\n              }\n              .modal {\n                display: block;\n                background-color: white;\n                position: absolute;\n                top: 10%;\n                right: 10%;\n                left: 10%;\n                box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12), 0 11px 15px -7px rgba(0, 0, 0, 0.2);\n              }\n              .modal-custom {\n                opacity: 1;\n                visibility: visible;\n              }\n              .modal-footer {\n                background-color: white;\n              }\n            `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nClassModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  handleClassChange: PropTypes.func.isRequired,\n};\n\nexport default ClassModal;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport dynamic from \"next/dynamic\";\nimport moment from \"moment\";\n\nimport update from \"immutability-helper\";\nimport Portal from \"../../../../Portal\";\nimport ClickOffComponentWrapper from \"../../../../ClickOffComponentWrapper\";\nimport Dropdown from \"../../../../FormComponents/Dropdown\";\nimport getValueFromState from \"../../../../utils/getValueFromState\";\nimport timeOptions from \"../../utils/timeOptions\";\n\nconst DatePicker = dynamic(() => import(\"../../../../FormComponents/DatePicker\"), {\n  ssr: false,\n});\n\nconst AssignDatesModal = props => {\n  const [assignDate, setAssignDate] = useState(moment()._d);\n  const [assignTime, setAssignTime] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n  const [dueTime, setDueTime] = useState(\"\");\n  const [openDueDate, onOpenDueDate] = useState(false);\n\n  const { open, onAssignLesson } = props;\n\n  const onAssignDates = () => {\n    onAssignLesson({\n      assignDate: moment(assignDate).format(\"YYYY-MM-DD\"),\n      assignTime,\n      dueDate: dueDate ? moment(dueDate).format(\"YYYY-MM-DD\") : \"\",\n      dueTime,\n    });\n\n    closeModal();\n  };\n\n  const closeModal = () => {\n    // setAssignDate(\"\");\n    setAssignTime(\"\");\n    setDueDate(\"\");\n    setDueTime(\"\");\n    props.onCloseDatesModal();\n  };\n\n  const hanldeDueDate = () => {\n    setDueDate(\"\");\n    setDueTime(\"\");\n\n    onOpenDueDate(!openDueDate);\n  };\n\n  // handleChange = (event, name) => {\n  //   const value = event.target ? event.target.value : event;\n  //   this.setState({\n  //     [name]: value,\n  //   });\n  // }\n\n  return (\n    <Portal selector=\"#modal\">\n      {open && (\n        <div className=\"outer-overlay\">\n          <ClickOffComponentWrapper onOuterClick={closeModal}>\n            <div id=\"datesModal\" className=\"modal modal-custom modal-assignDates\">\n              <div className=\"card-modal card\" style={{ overflow: \"auto\" }}>\n                <div\n                  className=\"owner-box card-panel card-panel-title\"\n                  style={{ backgroundColor: \"rgb(24,181,233)\", color: \"#fff\" }}\n                >\n                  <div className=\"card-panel-row row\">\n                    <div className=\" icon-col\">\n                      <i className=\"icon-calendar\"></i>\n                    </div>\n                    <div className=\"col\">\n                      <h4 style={{ padding: \"8px 0px 0px 20px\" }}>Select Dates</h4>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"card-content\">\n                  <div className=\"card-body\" style={{ height: \"300px\", padding: \"10px 37px\" }}>\n                    <div className=\"row justify-center\" style={{ marginTop: \"18px\" }}>\n                      <div className=\"col s6\">\n                        <label htmlFor=\"assignDate\">Assignment Date</label>\n                        <div className=\"datepicker-field input-field\">\n                          <i\n                            className=\"icon-calendar-dark\"\n                            style={{ marginRight: \"20px\", zIndex: \"1001\" }}\n                          ></i>\n                          <DatePicker\n                            id=\"assignDate\"\n                            selected={assignDate}\n                            onChange={event =>\n                              setAssignDate(event.target ? event.target.value : event)\n                            }\n                            name=\"assignDate\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"col s6\">\n                        <div\n                          className=\"input-field focus-blue\"\n                          style={{ marginTop: \"-15px\", zIndex: \"1001\" }}\n                        >\n                          <Dropdown\n                            value={getValueFromState(assignTime, timeOptions)}\n                            onChange={event =>\n                              setAssignTime(event.target ? event.target.value : event)\n                            }\n                            label=\"Time\"\n                            options={timeOptions}\n                            stateKey=\"assignmentDate\"\n                            dropdownKey=\"assignmentDate\"\n                            name=\"assignTime\"\n                            id=\"assignTime\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    {openDueDate && (\n                      <div className=\"row\">\n                        <div className=\"col s6\">\n                          <label htmlFor=\"dueDate\" style={{ marginTop: \"50px\" }}>\n                            Due Date\n                          </label>\n                          <div className=\"datepicker-field input-field\">\n                            <i\n                              className=\"icon-calendar-dark\"\n                              style={{ marginRight: \"20px\", zIndex: \"1001\" }}\n                            ></i>\n                            <DatePicker\n                              id=\"dueDate\"\n                              selected={dueDate}\n                              onChange={event =>\n                                setDueDate(event.target ? event.target.value : event)\n                              }\n                              name=\"dueDate\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"col s6\">\n                          <div className=\"input-field focus-blue\" style={{ marginTop: \"35px\" }}>\n                            <Dropdown\n                              value={getValueFromState(dueTime, timeOptions)}\n                              onChange={event =>\n                                setDueTime(event.target ? event.target.value : event)\n                              }\n                              label=\"Time\"\n                              options={timeOptions}\n                              stateKey=\"dueTime\"\n                              dropdownKey=\"dueTime\"\n                              name=\"dueTime\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    <div className=\"row\">\n                      <div className=\"col s6\">\n                        <a className=\"btn\" onClick={hanldeDueDate}>\n                          {openDueDate ? \"Remove Due Date\" : \"Add Due Dute\"}\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"modal-footer\">\n                    <a\n                      href=\"#\"\n                      onClick={closeModal}\n                      className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\"\n                    >\n                      Cancel\n                    </a>\n                    <a href=\"#\" className=\"btn\" onClick={onAssignDates}>\n                      Assign Dates\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </ClickOffComponentWrapper>\n        </div>\n      )}\n      <style jsx>\n        {`\n          h4 {\n            font-size: 2.28rem;\n            line-height: 110%;\n            margin: 1.52rem 0 0.912rem 0;\n            margin-top: 0;\n          }\n          .outer-overlay {\n            position: fixed;\n            background-color: rgba(0, 0, 0, 0.7);\n            top: 0;\n            right: 0;\n            bottom: 0;\n            left: 0;\n            z-index: 999;\n          }\n          .card-modal {\n            margin: 0;\n            border-radius: 6px;\n          }\n          #assign-dates {\n            border-radius: 6px;\n          }\n          .modal {\n            display: block;\n            background-color: white;\n            position: absolute;\n            width: 30%;\n            top: 10%;\n            right: 10%;\n            left: 10%;\n            box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12),\n              0 11px 15px -7px rgba(0, 0, 0, 0.2);\n          }\n          .modal-custom {\n            opacity: 1;\n            visibility: visible;\n          }\n          .modal-footer {\n            background-color: white;\n          }\n        `}\n      </style>\n    </Portal>\n  );\n};\n\nAssignDatesModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onCloseDatesModal: PropTypes.func.isRequired,\n  onHandleDates: PropTypes.func.isRequired,\n};\n\nexport default AssignDatesModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport statusColorMap from '../../../../DetailWorksheetPage/utils/statusColorMap';\n\nclass LessonListItem extends React.Component {\n  // eslint-disable-next-line consistent-return\n  renderLessonIcon = (subject) => {\n    switch (subject) {\n      case 'Reading':\n        return 'icon-books';\n      case 'Writing':\n        return 'icon-hands';\n      case 'Math':\n        return 'icon-calculator';\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const { checkedLessons, selectAll, handleCheckbox, index, lesson, lesson: { id, name: lessonName, status, assigned, score, scoreStatus, reviewedAlerts, subject, unit, passage, timeEstimate, problems, lessonType, flags } } = this.props;\n    return (\n      <div className=\"card list-table-row\" key={id} style={{ opacity: assigned ? 0.5 : 1 }}>\n        <div className=\"list-table-cell icon-cell\">\n          <label htmlFor={index}>\n            <input\n              type=\"checkbox\"\n              id={index}\n              checked={!selectAll ? checkedLessons.indexOf(lesson) > -1 : true}\n              onChange={() => handleCheckbox(lesson)}\n              className=\"filled-in\"\n            />\n            <span><b>&nbsp;</b></span>\n          </label>\n        </div>\n        <div className=\"list-table-cell icon-cell\">\n          <span className=\"block-icon\">\n            <i className={this.renderLessonIcon(subject)}></i>\n          </span>\n        </div>\n        <div className=\"list-table-cell name-cell\" style={{ width: '140px' }}>\n          <div className=\"card-panel-text truncate\">\n            <div className=\"text-large truncate\" id=\"lessonName\">{unit} {lessonName}</div>\n          </div>\n        </div>\n        <div className=\"list-table-cell graph-cell\" style={{ marginLeft: '50px' }}>\n          {scoreStatus && (\n            <span className={`chart-bar ${statusColorMap[scoreStatus]} white-text`}>{Math.floor(`${score / problems * 100}`)}%</span>\n          )}\n        </div>\n        <div className=\"list-table-cell status-cell\" >\n          <Choose>\n            <When condition={scoreStatus !== \"\"}>\n              <span className={`badge badge-rounded-md ${statusColorMap[scoreStatus]} white-text`}>{scoreStatus}</span>\n            </When>\n            <Otherwise>\n              <span className={`badge badge-rounded-md ${statusColorMap[status]} white-text`}>{status}</span>\n            </Otherwise>\n          </Choose>\n        </div>\n        <div className=\"list-table-cell type-cell\" style={{ marginLeft: '10px' }}>{subject}</div>\n        <div className=\"list-table-cell type-cell\">p. {passage}</div>\n        <div className=\"list-table-cell date-cell\">{timeEstimate}</div>\n        <div className=\"list-table-cell date-cell\"style={{ paddingLeft: '50px' }}>{problems}</div>\n\n        <div className=\"list-table-cell name-cell\">\n          <div className=\"card-panel-text truncate\">\n            <div className=\"text-large truncate\" style={{ paddingLeft: '70px' }}>{lessonType}</div>\n          </div>\n        </div>\n        {/* <div className=\"list-table-cell graph-cell\">\n          {reviewedAlerts.length > 0 && (\n            <span className=\"badge-rounded-xs badge grey darken-1 white-text\"><b className=\"badge-text\">{reviewedAlerts.length}</b> <i className=\"icon-flag\"></i></span>\n          )}\n        </div>\n        <div className=\"list-table-cell flags-cell\">\n          {flags.length > 0 && (\n            <span className=\"badge-rounded-xs badge red darken-2 white-text\"><b className=\"badge-text\">{flags.length}</b> <i className=\"icon-flag\"></i></span>\n          )}\n        </div> */}\n      </div>\n    );\n  }\n}\n\nLessonListItem.propTypes = {\n  index: PropTypes.number.isRequired,\n  lesson: PropTypes.object.isRequired,\n  selectAll: PropTypes.bool.isRequired,\n  handleCheckbox: PropTypes.func.isRequired,\n  checkedLessons: PropTypes.array.isRequired,\n};\n\nexport default LessonListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport Portal from '../../../../Portal';\nimport LessonListItem from './components/LessonListItem';\nimport { totalProblemsDescending, totalProblemsAscending, timeEstimate, timeEstimateAscending, subjectAscending, subjectDescending, passageAscending, passageDescending, lessonNameDescending, lessonNameAscending, statusDescending, statusAscending, flagsAscending, flagsDescending, lessonTypeAscending, lessonTypeDescending } from '../../../../utils/sortFunctions';\nimport ModalFilterSection from '../ModalFilterSection';\nimport AssignDatesModal from '../AssignDatesModal';\n\nclass AssignLessonModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lessons: this.props.lessons,\n      statusFilters: [],\n      subjectFilters: [],\n      lessonTypeFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\",\n      checked: false,\n      checkedLessons: [],\n      datesModalOpen: false,\n    };\n  }\n\n  onOpenDatesModal = () => this.setState({ datesModalOpen: true })\n  onCloseDatesModal = () => this.setState({ datesModalOpen: false })\n  onToggleChecked = () => {\n    this.setState({ checked: !this.state.checked }, () => this.onChecked());\n  }\n  onClearFilters = () => this.setState({ statusFilters: [], subjectFilters: [], lessonTypeFilters: [], unitFilter: \"\", nameFilter: \"\" })\n  onSetSort = (sort) => this.setState({ sort })\n  onSetFilteredState = (lesson) => this.setState({ nameFilter: lesson })\n  onUnsetFilteredState = (filter) => this.setState({ [filter]: \"\" })\n  onSetUnitFilter = (unit) => this.setState({ unitFilter: unit })\n\n  // checks if SelectAll checkbox is checked and adds lessons or empties checkedLessons array on uncheck\n  onChecked = () => {\n    const { checkedLessons, checked } = this.state;\n    if (checked) {\n      let mappedLessons = this.getMappableLessons();\n      for (let i = 0; i < mappedLessons.length; i++) {\n        if (checkedLessons.indexOf(mappedLessons[i]) > -1) {\n          mappedLessons = mappedLessons.filter(lesson => checkedLessons.indexOf(lesson) === -1);\n        }\n      }\n      this.setState(prevState => {\n        prevState.checkedLessons.push(...mappedLessons);\n      });\n    } else {\n      (\n        this.setState({ checkedLessons: [] })\n      );\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  onSortLessons = (lessons) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case 'subjectAscending':\n        return lessons.sort(subjectAscending);\n      case 'subjectDescending':\n        return lessons.sort(subjectDescending);\n      case 'passageAscending':\n        return lessons.sort(passageAscending);\n      case 'passageDescending':\n        return lessons.sort(passageDescending);\n      case 'statusAscending':\n        return lessons.sort(statusAscending);\n      case 'statusDescending':\n        return lessons.sort(statusDescending);\n      case 'flagsAscending':\n        return lessons.sort(flagsAscending);\n      case 'flagsDescending':\n        return lessons.sort(flagsDescending);\n      case 'lessonNameAscending':\n        return lessons.sort(lessonNameAscending);\n      case 'lessonNameDescending':\n        return lessons.sort(lessonNameDescending);\n      case 'lessonTypeAscending':\n        return lessons.sort(lessonTypeAscending);\n      case 'lessonTypeDescending':\n        return lessons.sort(lessonTypeDescending);\n      case 'timeEstimateDescending':\n        return lessons.sort(timeEstimate);\n      case 'timeEstimateAscending':\n        return lessons.sort(timeEstimateAscending);\n      case 'totalProblemsDescending':\n        return lessons.sort(totalProblemsDescending);\n      case 'totalProblemsAscending':\n        return lessons.sort(totalProblemsAscending);\n      default:\n        break;\n    }\n  }\n\n  onFilterByName = () => {\n    const { lessons, nameFilter } = this.state;\n    return lessons.reduce((finalArr, currentLesson) => {\n      const { lessonName } = currentLesson;\n      const lessonString = lessonName.replace(/\\s/g, \"\").toLowerCase();\n      if (lessonString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n        finalArr.push(currentLesson);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterLessons = () => {\n    const { statusFilters, subjectFilters, lessonTypeFilters, unitFilter, lessons: allLessons } = this.state;\n    let lessons = allLessons;\n    if (statusFilters.length && statusFilters.indexOf('all') === -1) {\n      if (statusFilters.indexOf(\"Unassigned\") !== -1) {\n        lessons = lessons.filter(lesson => statusFilters.indexOf(lesson.status) !== -1);\n      } else { lessons = lessons.filter(lesson => lesson.assigned === true); }\n    }\n    if (subjectFilters.length && subjectFilters.indexOf('all') === -1) {\n      lessons = lessons.filter(lesson => subjectFilters.indexOf(lesson.subject) !== -1);\n    }\n    if (lessonTypeFilters.length && lessonTypeFilters.indexOf('all') === -1) {\n      lessons = lessons.filter(lesson => lessonTypeFilters.indexOf(lesson.type) !== -1);\n    }\n    if (unitFilter.length && unitFilter.indexOf('all') === -1) {\n      lessons = lessons.filter(lesson => unitFilter.indexOf(lesson.unitNumber) !== -1);\n    }\n    return lessons;\n  }\n\n  // TODO: add toast verifying lessons were assigned\n  // takes input from the assign selected lessons modal and updates the updatedLessons array in parent\n  // eslint-disable-next-line consistent-return\n  onHandleDates = (assignDate, assignTime, dueDate, dueTime) => {\n    const { onAddUpdatedLessons } = this.props;\n    const updatedLessons = [];\n    const { checkedLessons: previousCheckedLessons } = this.state;\n    for (let i = 0; i < previousCheckedLessons.length; i++) {\n      const updatedCheckedLessons = update(previousCheckedLessons[i], {\n        $merge: {\n          assigned: true,\n          dueDate: moment(dueDate).format('DD/MM/YYYY'),\n          dueTime,\n          availableDate: moment(assignDate).format(\"DD/MM/YYYY\"),\n          status: \"Scheduled\",\n          assignTime,\n        },\n      },\n      );\n      updatedLessons.push(updatedCheckedLessons);\n    }\n    onAddUpdatedLessons(updatedLessons);\n    this.props.onCloseModal();\n  };\n\n  setSortType = (name) => {\n    const { sort } = this.state;\n    if (sort !== `${name}Ascending` && sort !== `${name}Descending`) {\n      this.onSetSort(`${name}Ascending`);\n    }\n    if (sort === `${name}Descending`) {\n      this.onSetSort(`${name}Ascending`);\n    } else {\n      this.onSetSort(`${name}Descending`);\n    }\n  }\n\n  getMappableLessons = () => {\n    const { sort, unitFilter, lessons, statusFilters, subjectFilters, lessonTypeFilters, nameFilter } = this.state;\n    let mappableLessons = lessons;\n    if (nameFilter.length) {\n      mappableLessons = this.onFilterByName();\n    }\n    if (statusFilters.length || unitFilter.length || lessonTypeFilters.length || subjectFilters.length) {\n      mappableLessons = this.onFilterLessons();\n    }\n    if (sort) {\n      return this.onSortLessons(mappableLessons);\n    }\n    return mappableLessons;\n  }\n\n\n  handleCheckbox = (selectedLesson) => {\n    const { checkedLessons } = this.state;\n    let updatedLessonArray;\n    if (checkedLessons.indexOf(selectedLesson) > -1) {\n      updatedLessonArray = checkedLessons.filter(lesson => lesson !== selectedLesson);\n    } else {\n      updatedLessonArray = [...checkedLessons, selectedLesson];\n    }\n    this.setState({ checkedLessons: updatedLessonArray });\n  }\n\n\n  handleFilterClick = (filterType, filter) => {\n    const { subjectFilters: currentSubjectFilters, statusFilters: currentStatusFilters, lessonTypeFilters: currentLessonTypeFilters } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case 'subject':\n        modifiedFilterCurrentState = currentSubjectFilters;\n        modifiedFilterName = 'subjectFilters';\n        break;\n      case 'status':\n        modifiedFilterCurrentState = currentStatusFilters;\n        modifiedFilterName = 'statusFilters';\n        break;\n      case 'lessonType':\n        modifiedFilterCurrentState = currentLessonTypeFilters;\n        modifiedFilterName = 'lessonTypeFilters';\n        break;\n      default:\n        break;\n    }\n    // Decide whether we're adding or removing the selected filter\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[filterIndex, 1]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  }\n\n  mapLessonListItem = () => this.getMappableLessons().map((lesson, index) =>\n    (<LessonListItem\n      lesson={lesson}\n      index={index}\n      selectAll={this.state.checked}\n      key={lesson.id}\n      onSelectLesson={this.onSelectLesson}\n      renderLessonIcon={this.renderLessonIcon}\n      checkedLessons={this.state.checkedLessons}\n      handleCheckbox={this.handleCheckbox}\n    />)\n  )\n\n  renderTableHeader = () => (\n    <div className=\"list-table-row\">\n      <div className=\"list-table-cell icon-cell\">\n        <label htmlFor=\"selectAll\">\n          <input\n            type=\"checkbox\"\n            id=\"selectAll\"\n            defaultChecked={this.state.checked}\n            onChange={this.onToggleChecked}\n            className=\"filled-in\"\n          />\n          <span><b>&nbsp;</b></span>\n        </label>\n      </div>\n      <div className=\"list-table-cell icon-cell\">&nbsp;</div>\n      <div className=\"list-table-cell name-cell\" value=\"lessonName\">\n        <a href=\"#\" onClick={() => this.setSortType(\"lessonName\")}><b>Lesson</b></a>\n      </div>\n      <div className=\"list-table-cell name-cell\" style={{ width: '100px', paddingLeft: '237px' }}>\n        <a href=\"#\" onClick={() => this.setSortType(\"status\")}><b>Status</b></a>\n      </div>\n      <div className=\"list-table-call completed-cell\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>\n      <div className=\"list-table-cell type-cell\" style={{ marginLeft: '30px', paddingLeft: '58px' }}>\n        <a href=\"#\" onClick={() => this.setSortType(\"subject\")}><b>Subject</b></a>\n      </div>\n      <div className=\"list-table-cell completed-cell\" style={{ paddingLeft: '56px' }}>\n        <a href=\"#\" onClick={() => this.setSortType(\"passage\")}><b>Page</b></a>\n      </div>\n      <div className=\"list-table-cell completed-cell\" style={{ marginLeft: '30px' }}>\n        <a href=\"#\" onClick={() => this.setSortType(\"timeEstimate\")}><b>Time Est</b></a>\n      </div>\n      <div className=\"list-table-cell type-cell\" style={{ marginLeft: '13px', paddingLeft: '-1px' }}>\n        <a href=\"#\" onClick={() => this.setSortType(\"totalProblems\")}><b>Problems</b></a>\n      </div>\n      <div className=\"list-table-cell completed-cell\">\n        <a href=\"#\" onClick={() => this.setSortType(\"lessonType\")}><b>Type</b></a>\n      </div>\n      <div className=\"list-table-cell flags-cell\"><b>&nbsp;</b></div>\n      <div className=\"list-table-cell flags-cell\"><b>&nbsp;</b></div>\n      <div className=\"list-table-cell flags-cell\">\n        <a href=\"#\" onClick={() => this.setSortType(\"alerts\")}><b>Flags</b></a>\n      </div>\n    </div>\n  )\n\n\n  render() {\n    const { lessons, subjectFilters, statusFilters, lessonTypeFilters } = this.state;\n    const { open, onCloseModal } = this.props;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <div id=\"assign-lesson-modal\" className=\"modal modal-custom\">\n              <div className=\"header-row card-panel light-blue lighten-1 white-text\">\n                <div className=\"card-panel-row row\">\n                  <div className=\"col s3\">&nbsp;</div>\n                  <div className=\"col s9 right-align\">\n                    <div className=\"row icons-row\"> <span>\n                      <a href=\"#\" onClick={onCloseModal}><i className=\"icon-close\"></i></a>\n                    </span></div>\n                  </div>\n                </div>\n                <div className=\"card-panel-row row\">\n                  <div className=\"icon-col col s1\">\n                    <i className=\"icon-books\"></i>\n                  </div>\n                  <div className=\"col s9\">\n                    <div className=\"card-panel-text\">\n                      <div className=\"text-large\">Assign Lessons</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"content-section\" style={{ backgroundColor: '#f2f2f2' }}>\n                <ModalFilterSection\n                  handleFilterClick={this.handleFilterClick}\n                  subjectFilters={subjectFilters}\n                  statusFilters={statusFilters}\n                  lessonTypeFilters={lessonTypeFilters}\n                  onClearFilters={this.onClearFilters}\n                  onSetFilteredState={this.onSetFilteredState}\n                  onUnsetFilteredState={this.onUnsetFilteredState}\n                  onSetSort={this.onSetSort}\n                  onSetUnitFilter={this.onSetUnitFilter}\n                />\n                <div className=\"container-md\" style={{ marginTop: '50px' }}>\n                  <div className=\"result-row center-align\">\n                    <b className=\"result\"> - {lessons.length} Lessons</b>\n                  </div>\n                  <div className=\"list-view-section\" style={{ margin: '0 -160px' }}>\n                    <div className=\"list-table\" >\n                      <div className=\"list-table-header\">\n                        {this.renderTableHeader()}\n                      </div>\n                      <div className=\"list-table-body\">\n                        {this.mapLessonListItem()}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <AssignDatesModal\n              open={this.state.datesModalOpen}\n              onCloseDatesModal={this.onCloseDatesModal}\n              onHandleDates={this.onHandleDates}\n            />\n            <a href=\"#\" onClick={this.onOpenDatesModal} className=\"waves-effect waves-teal btn add-btn modal-trigger\"><i className=\"material-icons\">add</i>Assign Selected</a>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 999;\n            }\n            #assign-lesson-modal {\n              border-radius: 6px;\n              \n            }\n            .modal {\n              display: block;\n              background-color: white;\n              position: absolute;\n              top: 13%;\n              right: 0%;\n              left: 14%;\n              box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12), 0 11px 15px -7px rgba(0, 0, 0, 0.2);\n            }\n            .modal-footer {\n              background-color: white;\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n              max-width: 1280px !important;\n            }\n            #assign-lessons-header {\n              background: rgb(24,181,233) !important\n              background: linear-gradient(90deg, rgba(24,181,233,1) 0%, rgba(8,107,140,1) 100%) !important;\n            }\n            \n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nAssignLessonModal.propTypes = {\n  lessons: PropTypes.array.isRequired,\n  open: PropTypes.bool.isRequired,\n  onCloseModal: PropTypes.func.isRequired,\n  onAddUpdatedLessons: PropTypes.func.isRequired,\n};\nexport default AssignLessonModal;\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport lessonSortOptions from '../../utils/lessonSortOptions';\nimport { makeSelectUnitFilterOptions } from '../../../index/selectors';\nimport { setUnitFilterOptions, fetchUnits, fetchSubjects } from '../../../index/actions';\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      sort: {},\n      nameFilter: \"\",\n      unitFilter: \"\",\n      unitOptions: [{\n        label: \"Any\",\n        value: \"\",\n      }],\n    };\n  }\n\n  componentDidMount = () => {\n    const { onFetchUnits, onFetchSubjects } = this.props;\n    onFetchUnits();\n    onFetchSubjects();\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    if (nextProps.unitOptions.length !== 0) {\n      const { unitOptions: newOptions } = nextProps;\n      this.setState({\n        unitOptions: this.state.unitOptions.concat(newOptions),\n      });\n    }\n  }\n\n  onToggleShowFilters = () => this.setState(({ open }) => ({ open: !open }))\n  handleSortChange = (event) => {\n    const { onSetSort } = this.props;\n    this.setState({ sort: event });\n    onSetSort(event);\n  }\n\n  submitNameFilter = () => {\n    const { onSetFilteredState, onUnsetFilteredState } = this.props;\n    const { nameFilter } = this.state;\n    if (nameFilter === '') {\n      onUnsetFilteredState(nameFilter);\n    }\n    const transformedName = nameFilter.replace(/\\s/g, \"\").toLowerCase();\n    onSetFilteredState(transformedName);\n  }\n\n  handleUnitChange = (event) => {\n    const { onSetUnitFilter } = this.props;\n    this.setState({ unitFilter: event });\n    onSetUnitFilter(event);\n  }\n\n  clearAllFilters = () => {\n    const { onClearFilters } = this.props;\n    this.setState({ sort: {}, nameFilter: \"\", unitFilter: \"\" });\n    onClearFilters();\n  }\n  // eslint-disable-next-line consistent-return\n  handleFilterChange = (event, name) => {\n    const { onUnsetFilteredState, onSetFilteredState, onSetUnitFilter } = this.props;\n    const value = event.target ? event.target.value : event;\n    const updatedState = update(this.state, {\n      $merge: { [name]: value },\n    });\n    this.setState(updatedState);\n    if (name === 'nameFilter') {\n      if (event === '') {\n        return onUnsetFilteredState();\n      }\n      return onSetFilteredState(event.target.value);\n    }\n    if (name === 'unitFilter') {\n      if (event === \"\") {\n        return onUnsetFilteredState();\n      }\n      return onSetUnitFilter(event);\n    }\n  }\n  render() {\n    const { open, sort, nameFilter, unitFilter } = this.state;\n    const { currentView, dueDateFilters, flagFilters, subjectFilters, scoreStatusFilters, onChangeView, handleFilterClick } = this.props;\n    return (\n      <div className=\"filter-form-holder\">\n        <ul className=\"collapsible expandable\">\n          <li>\n            <div className=\"collapsible-body\" style={open ? { display: 'block' } : { display: 'none' }}>\n              <div className=\"filter-form_checkbox-list-holder justify-center\">\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"reading\"\n                      checked={subjectFilters.indexOf('Reading') !== -1}\n                      onChange={() => handleFilterClick(\"subject\", 'Reading')}\n                    />\n                    <label htmlFor=\"reading\">Reading</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"writing\"\n                      checked={subjectFilters.indexOf('Writing and Language') !== -1}\n                      onChange={() => handleFilterClick(\"subject\", 'Writing and Language')}\n                    />\n                    <label htmlFor=\"writing\">Writing</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"math\"\n                      checked={subjectFilters.indexOf('Math') !== -1}\n                      onChange={() => handleFilterClick(\"subject\", 'Math')}\n                    />\n                    <label htmlFor=\"math\">Math</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"great\"\n                      checked={scoreStatusFilters.indexOf('great') !== -1}\n                      onChange={() => handleFilterClick(\"score\", 'great')}\n                    />\n                    <label htmlFor=\"great\">Great</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"aboveAverage\"\n                      checked={scoreStatusFilters.indexOf('above average') !== -1}\n                      onChange={() => handleFilterClick(\"score\", 'above average')}\n                    />\n                    <label htmlFor=\"aboveAverage\">Above Average</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"belowAverage\"\n                      checked={scoreStatusFilters.indexOf('below average') !== -1}\n                      onChange={() => handleFilterClick(\"score\", 'below average')}\n                    />\n                    <label htmlFor=\"belowAverage\">Below Average</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"poor\"\n                      checked={scoreStatusFilters.indexOf('poor') !== -1}\n                      onChange={() => handleFilterClick(\"score\", 'poor')}\n                    />\n                    <label htmlFor=\"poor\">Poor</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"hasReviewFlags\"\n                      checked={flagFilters.indexOf(\"true\") !== -1}\n                      onChange={() => handleFilterClick('flags', 'true')}\n                    />\n                    <label htmlFor=\"hasReviewFlags\">Has Review Flags</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"dueToday\"\n                      checked={dueDateFilters.indexOf('dueToday') !== -1}\n                      onChange={() => handleFilterClick('dueDate', 'dueToday')}\n                    />\n                    <label htmlFor=\"dueToday\">Due Today</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"dueNextSession\"\n                      checked={dueDateFilters.indexOf('dueNextSession') !== -1}\n                      onChange={() => handleFilterClick('dueDate', 'dueNextSession')}\n                    />\n                    <label htmlFor=\"dueNextSession\">Due By Next Session</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"overdue\"\n                      checked={dueDateFilters.indexOf('overdue') !== -1}\n                      onChange={() => handleFilterClick('dueDate', 'overdue')}\n                    />\n                    <label htmlFor=\"overdue\">Overdue</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"noDueDate\"\n                      checked={dueDateFilters.indexOf('noDueDate') !== -1}\n                      onChange={() => handleFilterClick('dueDate', 'noDueDate')}\n                    />\n                    <label htmlFor=\"noDueDate\">noDueDate</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"unAssigned\"\n                      checked={dueDateFilters.indexOf('unAssigned') !== -1}\n                      onChange={() => handleFilterClick('dueDate', 'unAssigned')}\n                    />\n                    <label htmlFor=\"unAssigned\">UnAssigned</label>\n                  </li>\n                </ul>\n              </div>\n              <div className=\"d-flex row mb-0 justify-center\">\n                <div className=\"col s12 m3\">\n                  <div className=\"search-field input-field\" style={{ marginTop: '30px' }}>\n                    <input\n                      type=\"search\"\n                      id=\"name_search\"\n                      className=\"input-control  validate\"\n                      name=\"nameFilter\"\n                      value={nameFilter}\n                      onChange={(event) => this.handleFilterChange(event, 'nameFilter')}\n                    />\n                    <button\n                      type=\"submit\"\n                      className=\"search-button\"\n                      onClick={this.submitNameFilter}\n                    ><i className=\"icon-search\"></i></button>\n                    <label className={nameFilter.length ? \"label active\" : \"label\"} htmlFor=\"name_search\">Search</label>\n                  </div>\n                </div>\n                <div className=\"col s12 m3\">\n                  <div className=\"input-field\" style={{ marginTop: '-7px' }}>\n                    <Dropdown\n                      value={getValueFromState(unitFilter, this.state.unitOptions)}\n                      onChange={(event) => this.handleUnitChange(event)}\n                      options={this.state.unitOptions}\n                      label=\"Unit\"\n                      stateKey=\"unit\"\n                      dropdownKey=\"unit\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"row mb-0 d-flex align-items-center\">\n              <div className=\"col s12 l4\">\n                <div className=\"row mb-0\">\n\n                  <div className=\"col s12 m12\">\n                    <div className=\"input-field\">\n                      <Dropdown\n                        value={getValueFromState(sort, lessonSortOptions)}\n                        onChange={(event) => this.handleSortChange(event)}\n                        options={lessonSortOptions}\n                        label=\"Sort by\"\n                        stateKey=\"sort\"\n                        dropdownKey=\"sort\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"switcher-block col s12 l4\" style={{ marginTop: '14px' }}>\n                <div className=\"view-switcher\">\n                  <ul className=\"switcher center-align\">\n                    <li\n                      data-view=\"view-full\"\n                      className={currentView === 'full' ? 'active' : \"\"}\n                    >\n                      <a href=\"#\" onClick={() => onChangeView('full')}>Full View</a>\n                    </li>\n                    <li\n                      data-view=\"view-list\"\n                      className={currentView === 'list' ? 'active' : ''}\n                    >\n                      {/* @TODO student lesson listview commented out for now */}\n                      {/* <a href=\"#\" onClick={() => onChangeView('list')}>List View</a> */}\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              <div className=\"col s12 l4\">\n                <div className=\"option-filters\">\n                  <div className=\"option-item clear\"><a href=\"#\" onClick={this.clearAllFilters}>Clear Filters</a></div>\n                  <div className=\"option-item\">\n                    <span\n                      className=\"collapsible-header\"\n                      onClick={this.onToggleShowFilters}\n                    >\n                      <span className=\"open-text\">{open ? 'Hide Filters' : 'Open Filters'}</span>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nFilterSection.propTypes = {\n  currentView: PropTypes.string.isRequired,\n  onChangeView: PropTypes.func.isRequired,\n  handleFilterClick: PropTypes.func.isRequired,\n  onClearFilters: PropTypes.func.isRequired,\n  onSetFilteredState: PropTypes.func.isRequired,\n  onUnsetFilteredState: PropTypes.func.isRequired,\n  onSetSort: PropTypes.func.isRequired,\n  subjectFilters: PropTypes.array.isRequired,\n  scoreStatusFilters: PropTypes.array.isRequired,\n  flagFilters: PropTypes.array.isRequired,\n  dueDateFilters: PropTypes.array.isRequired,\n  onSetUnitFilter: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  unitOptions: makeSelectUnitFilterOptions(),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSetUnitFilterOptions: options => dispatch(setUnitFilterOptions(options)),\n  onFetchUnits: () => dispatch(fetchUnits()),\n  onFetchSubjects: () => dispatch(fetchSubjects()),\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(FilterSection);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Checkbox = ({\n  label,\n  checkBoxId,\n  checkBoxtyle,\n  checked,\n  onChecked,\n  onUnChecked,\n  cardId,\n  type\n}) => {\n  const handleCheck = cardId => {\n    if (!checked) {\n      onChecked(cardId);\n    } else {\n      onUnChecked(cardId);\n    }\n  };\n  switch (type) {\n    case \"cardCheckBox\":\n      return (\n        <label htmlFor={checkBoxId} style={{ checkBoxtyle }}>\n          <input\n            type='checkbox'\n            id={checkBoxId}\n            checked={checked}\n            onChange={() => handleCheck(cardId)}\n          />\n          <span>{label}</span>\n        </label>\n      );\n    case \"pageCheckBox\":\n      return (\n        <label htmlFor={checkBoxId} style={{ checkBoxtyle }}>\n          <input\n            type='checkbox'\n            id={checkBoxId}\n            checked={checked}\n            onChange={e => onChecked(!e.target.checked)}\n          />\n          <span>{label}</span>\n        </label>\n      );\n    default:\n      return <p>invaild checkbox</p>;\n  }\n};\n\nCheckbox.propTypes = {\n  label: PropTypes.string,\n  checkBoxId: PropTypes.string,\n  checkBoxtyle: PropTypes.object,\n  type: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  onChecked: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n};\n\nexport default Checkbox;\n","/* eslint-disable */\n// used vars and indentifers not camelcase\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport PropTypes from \"prop-types\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport ClickOffComponentWrapper from \"../../../../../../ClickOffComponentWrapper\";\nimport moment from 'moment'\n// RENDERING UTILS\nimport {\n  getProblemCompletionStatusColor,\n  getLessonActivityStatus,\n  renderLessonIcon,\n  renderDropdownOptions,\n  renderProblemCount,\n  renderAlerts,\n  statusColorMap,\n  chartColorMap,\n  gradeColorMap,\n  formatStatus\n} from \"./utils\";\nimport Checkbox from \"./components/Checkbox\";\nimport { setIsVisibleTopBar, setActiveLesson, setOpenActivePage } from \"../../../../../index/actions\";\nimport { fetchStudentLessonSectionApi } from \"../../../../../index/api\";\nimport {makeSelectSubjects,makeSelectUnitFilterOptions} from '../../../../../index/selectors'\n\nconst data = (current, target, status) => ({\n  datasets: [\n    {\n      data: [current, target - current],\n      backgroundColor: [chartColorMap[status], \"#eaeaea\"]\n    }\n  ]\n});\n\nconst LessonCard = props => {\n  // PROPS\n  const {\n    lesson,\n    lesson: {\n      id,\n      name,\n      drill_page: drillPage,\n      practice_page: practicePage,\n      starting_page: startingPage,\n      ending_page: endingPage,\n      status,\n      time_estimate: timeEstimate,\n      subject_id: subjectId,\n      unit_id: unitId,\n      lesson_problems: lessonProblems,\n      dueDate,\n      completionDate,\n      challenge_page,\n      practice_page,\n      due_date,\n      completed_at,\n      assignment_date,\n      scoring = {}\n    },\n    onOpenModal,\n    onCloseDropdown,\n    handleRescheduleModalOpen,\n    handleResetLesson,\n    handleMarkAllFlagsReviewed\n  } = props;\n  const dueAt = due_date || dueDate\n  const completedAt = completed_at || completionDate\n  // STATE\n  const [dropdownIsOpen, toggleDropdown] = useState(false);\n  const [hasFlaggedProblems, setHasFlaggedProblems] = useState(false)\n\n  useEffect(() => {\n    if (lesson.problems && lesson.problems.length > 0) {\n      const hasFlaggedProblems = lesson.problems.filter(\n        (problem) => problem.flag_status === \"FLAGGED\"\n      );\n      if (hasFlaggedProblems.length > 0) {\n        return setHasFlaggedProblems(true);\n      }\n    } else if (lesson.sections && lesson.sections.length > 0) {\n      const section1 = fetchStudentLessonSectionApi(\n        props.user.id,\n        lesson.id,\n        lesson.sections[0].id\n      );\n      const section2 = fetchStudentLessonSectionApi(\n        props.user.id,\n        lesson.id,\n        lesson.sections[1].id\n      );\n      Promise.all([section1, section2]).then((sections) => {\n        const filteredSections = sections.filter((section) => section);\n        filteredSections.map((section) => {\n          section.lesson_problems.map((problem) => {\n            if (problem.flag_status === \"FLAGGED\") {\n              setHasFlaggedProblems(true);\n            }\n          });\n        });\n      });\n    }\n  }, []);\n\n  const onOpenDetailModal = async (e) => {\n    e.preventDefault()\n    const { onSetIsVisibleTopbar, onSetActiveLesson, onSetOpenActivePage, lesson } = props;\n    onSetIsVisibleTopbar(false);\n    onSetActiveLesson(lesson);\n    const condition = lesson.type.label === 'Drill' || lesson.type.label === \"Module\"\n    if (condition) {\n      onSetOpenActivePage(\"AnswerSheet\")\n    } else {\n      onSetOpenActivePage(\"ReadWorkBook\")\n    }\n  }\n  const onSetDropdown = () => toggleDropdown(!dropdownIsOpen);\n\n  const onReschedule = (assignDate, assignTime, dueAt, dueTime) => {\n    // eslint-disable-next-line no-console\n    console.warn(\"Stubbed out date functionality\", assignDate, assignTime, dueAt, dueTime);\n  };\n\n  const onChecked = cardId => {\n    props.onAddCheckedLesson(cardId, props.uniqueId);\n  };\n\n  const onUnChecked = cardId => {\n    props.onRemoveCheckedLesson(cardId, props.uniqueId);\n  };\n\n  const handleAssignLesson = () => {\n    onOpenModal();\n    props.onAddCheckedLesson(props.lessonId);\n  };\n\n  const getUnitName = () => {\n    // Get the unit name of the lesson\n    if (lesson.units) {\n      return lesson.units.name\n    }\n    const lessonUnit = props.units.filter(unit => unit.value === unitId)\n    return (lessonUnit[0] ? lessonUnit[0].label : '') \n  }\n\n  const graphData = () => {\n    // Determines the graph progress of a completed or started lesson\n    if (status === 'COMPLETED') {\n      return data(\n        scoring.correct_count,\n        scoring.question_count,\n        scoring.grade ? scoring.grade : \"POOR\"\n      )\n\n    } else if (status === 'STARTED' && lesson.problems) {\n      const completedProblems = lesson.problems.filter(problem => problem.answered).length\n      return data(completedProblems, lesson.problems.length, status)\n\n    } else if (status === 'STARTED' && lesson.sections) {\n      const completedSections = lesson.sections.filter(section => section.status === 'COMPLETED').length\n      return data(completedSections, lesson.sections.length, status)\n    }\n\n    return data(0, 1, \"ASSIGNED\")\n  }\n\n  const startMarkFlagsReviewed = (lessonIds) => {\n    handleMarkAllFlagsReviewed(lessonIds)\n    setHasFlaggedProblems(false)\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"card-main-col col s12 m8 l7 xl5\">\n        <div\n          className={getLessonActivityStatus(props.lesson.lesson_id ? \"assigned\" : \"notassigned\")}\n        >\n          <div className=\"card-panel\">\n            <div className=\"card-panel-row row\">\n              <div className=\"icon-col col s2\">\n                <i\n                  className={renderLessonIcon(\n                    lesson.subjects ? lesson.subjects.name : props.subjects[subjectId]\n                  )}\n                ></i>\n              </div>\n              <div className=\"col s9\">\n                <div className=\"card-panel-text center-left\">\n                  <div className=\"text-small\">\n                    {getUnitName()}\n                  </div>\n                  <div className=\"text-large\">\n                    <a href=\"#\" onClick={(e) => onOpenDetailModal(e)}>\n                      {lesson.name}\n                    </a>\n                  </div>\n                  <div className=\"text-small\">\n                    Subject: {lesson.subjects ? lesson.subjects.name : props.subjects[subjectId]}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col s1 right-align\">\n                <div className=\"row icons-row\">\n                  {hasFlaggedProblems && !props.flagRemoved && <i style={{ color: \"#c0272d\" }} className=\"icon-flag\"></i>}\n                  <div className=\"dropdown-block col\">\n                    <a\n                      className=\"dropdown-trigger btn\"\n                      href=\"#\"\n                      data-target=\"dropdown01\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        onSetDropdown(dropdownIsOpen);\n                      }}\n                    >\n                      <i className=\"material-icons dots-icon\">more_vert</i>\n                    </a>\n                    <If condition={dropdownIsOpen}>\n                      <ClickOffComponentWrapper onOuterClick={() => onSetDropdown(dropdownIsOpen)}>\n                        <ul\n                          id=\"dropdown01\"\n                          className=\"dropdown-content dropdown-wide\"\n                          style={{\n                            display: \"block\",\n                            opacity: \"1\",\n                            transform: \"scaleX(1) scaleY(1)\",\n                          }}\n                        >\n                          {renderDropdownOptions(\n                            status,\n                            handleAssignLesson,\n                            handleRescheduleModalOpen,\n                            props.handleExcuseLessonLateness,\n                            handleResetLesson,\n                            startMarkFlagsReviewed,\n                            props.handleUnassignLesson,\n                            [lesson.id]\n                          )}\n                        </ul>\n                      </ClickOffComponentWrapper>\n                    </If>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"card-content\">\n            <div className=\"d-flex sameheight-all row mb-0\">\n              <div className=\"col s6\">\n                <div className=\"chart-container\">\n                  <div className=\"chart-holder\" style={{ width: \"140px\", height: \"95px\" }}>\n                    <Choose>\n                      <When condition={lesson.type.label !== \"Reading\"}>\n                        <Doughnut\n                          data={\n                            graphData()\n                          }\n                          options={{\n                            circumference: Math.PI,\n                            rotation: Math.PI,\n                            cutoutPercentage: 60,\n                            tooltips: false,\n                          }}\n                        />\n                        {lesson.problems && renderProblemCount(\n                          status,\n                          scoring.grade ? scoring.grade : \"POOR\",\n                          scoring && scoring.percentage_correct,\n                          lesson.problems.length,\n                          lesson.problems.filter(problem => problem.answered).length\n                        )}\n                        {lesson.sections && renderProblemCount(\n                          status,\n                          scoring.grade ? scoring.grade : \"POOR\",\n                          scoring && scoring.percentage_correct,\n                          lesson.sections.length,\n                          lesson.sections.filter(section => section.status === 'COMPLETED').length\n                        )}\n                      </When>\n                      <Otherwise>\n                        <p style={{ paddingTop: \"25%\", fontWeight: \"bold\" }}>\n                          No Scoring Available For Reading Lessons.\n                        </p>\n                      </Otherwise>\n                    </Choose>\n                  </div>\n\n                  <div className=\"chart-row\">\n                    <div className=\"chart-col chart-start\"></div>\n                    <div className=\"chart-col chart-end\">\n                    <Choose>\n                          <When condition={status === \"COMPLETED\" && (lesson.type.label === \"Drill\" || lesson.type.label === 'Module')}>\n                      <span className=\"amount\" style={{ color: chartColorMap[scoring.grade ? scoring.grade : 'POOR'] }}>\n                        \n                            {scoring.correct_count} of {scoring.question_count}\n                            </span>\n                          </When>\n                        </Choose>\n                      \n                    </div>\n                  </div>\n                  <div className=\"chart-description\" style={{ marginTop: \"10px\" }}>\n                    <dl className=\"dl-horizontal\">\n                      <dt>Time Est:</dt>\n                      <dd>{timeEstimate ? `${timeEstimate} mins` : \"None\"}</dd>\n                    </dl>\n                    <Choose>\n                      <When\n                        condition={lesson.type.label === \"Reading\" || lesson.type.label === \"Module\"}\n                      ></When>\n                      <When condition={lesson.type.label === \"Drill\"}>\n                        <dl className=\"dl-horizontal\">\n                          <dt>Problems:</dt>\n                          <dd>{lesson.problems.length}</dd>\n                        </dl>\n                      </When>\n                      <Otherwise>\n                        <dl className=\"dl-horizontal\">\n                          <dt>Problems:</dt>\n                          <dd>{lessonProblems && lessonProblems.length}</dd>\n                        </dl>\n                      </Otherwise>\n                    </Choose>\n                  </div>\n                </div>\n              </div>\n              <div\n                className=\"col s6 d-flex align-items-center left-align\"\n                style={{ height: \"100px\" }}\n              >\n                <div className=\"dates\">\n                  <dl className=\"row\">\n                    {assignment_date && (\n                      <dt /*style={{ float: \"right\", clear: \"both\" }}*/>\n                        Available:{\" \"}\n                        <time dateTime={assignment_date}>\n                          {moment(assignment_date).format(\"MM/DD/YYYY\")}\n                        </time>\n                      </dt>\n                    )}\n\n                    {dueAt && assignment_date ? (\n                      <dt /*style={{ float: \"right\", clear: \"both\" }}*/>\n                        Due: <time dateTime={dueAt}>{moment(dueAt).format(\"MM/DD/YYYY\")}</time>\n                      </dt>\n                    ) : assignment_date ? (\n                      <dt>No Due Date</dt>\n                    ) : (\n                      \"\"\n                    )}\n\n                    {completedAt ? (\n                      <dt /*style={{ float: \"right\", clear: \"both\" }}*/>\n                        Completed:{\" \"}\n                        <time dateTime={completedAt}>\n                          {moment(completedAt).format(\"MM/DD/YYYY\")}\n                        </time>\n                      </dt>\n                    ) : (\n                      \"\"\n                    )}\n                  </dl>\n                </div>\n\n                <div className=\"align-self-end\">\n                  <Choose>\n                    {/* If this is an assigned student lesson */}\n                    <When condition={lesson.lesson_id}>\n                      <Choose>\n                        <When condition={status === \"COMPLETED\" && lesson.type.label === \"Reading\"}>\n                          <span\n                            style={{\n                              backgroundColor: `#74b287`,\n                            }}\n                            className={`badge badge-rounded-md white-text`}\n                          >\n                            {formatStatus(status)}\n                          </span>\n                        </When>\n                        <When condition={status === \"COMPLETED\"}>\n                          <span\n                            style={{\n                              backgroundColor: `${\n                                scoring.grade\n                                  ? gradeColorMap[scoring.grade]\n                                  : gradeColorMap[\"POOR\"]\n                              }`,\n                            }}\n                            className={`badge badge-rounded-md white-text`}\n                          >\n                            {formatStatus(scoring.grade ? scoring.grade : 'POOR')}\n                          </span>\n                        </When>\n                        <When condition={status === \"OVERDUE\"}>\n                          <span\n                            style={\n                              status === \"OVERDUE\"\n                                ? {\n                                    backgroundColor: `#fff`,\n                                    borderColor: \"red\",\n                                    color: \"red\",\n                                  }\n                                : { backgroundColor: `#212121`, color: \"white\" }\n                            }\n                            className={`badge badge-rounded-md ${statusColorMap[status]} `}\n                          >\n                            {formatStatus(status)}\n                          </span>\n                        </When>\n                        <Otherwise>\n                          <span\n                            style={{ backgroundColor: `#212121`, color: \"white\" }}\n                            className={`badge badge-rounded-md ${statusColorMap[status]} `}\n                          >\n                            {formatStatus(status)}\n                          </span>\n                        </Otherwise>\n                      </Choose>\n                    </When>\n                  </Choose>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col s2\">\n              <Checkbox\n                checked={props.lesson.selected}\n                onChecked={onChecked}\n                onUnChecked={onUnChecked}\n                cardId={props.lessonId}\n                type=\"cardCheckBox\"\n              />\n            </div>\n            <div className=\"col s8\">\n              <dl className=\"dl-horizontal\">\n                <dt>p.</dt>\n                <Choose>\n                  <When condition={lesson.type.label === \"Module\"}>\n                    <dd>\n                      ({challenge_page} - {practice_page}) ({\"Challenge\"} + {\"Practice\"})\n                    </dd>\n                  </When>\n                  <When condition={lesson.type.label === \"Drill\"}>\n                    <dd>\n                      ({drillPage} - {drillPage}) ({\"Drill\"})\n                    </dd>\n                  </When>\n                  <Otherwise>\n                    <dd>\n                      ({startingPage} - {endingPage}) ({\"Starting\"} - {\"Ending\"})\n                    </dd>\n                  </Otherwise>\n                </Choose>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nLessonCard.propTypes = {\n  lesson: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  onSetIsVisibleTopbar: PropTypes.func.isRequired,\n};\nconst mapDispatchToProps = dispatch => ({\n  onSetIsVisibleTopbar: bindActionCreators(setIsVisibleTopBar, dispatch),\n  onSetActiveLesson: bindActionCreators(setActiveLesson, dispatch),\n  onSetOpenActivePage: bindActionCreators(setOpenActivePage, dispatch)\n});\n\nconst mapStateToProps = createStructuredSelector({\n  subjects: makeSelectSubjects(),\n  units: makeSelectUnitFilterOptions(),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LessonCard);\n","// RENDERING OPTIONS\nexport const getProblemCompletionStatusColor = (solvedProblems, totalProblems) => {\n  if (solvedProblems / totalProblems <= 0.25) {\n    return { backgroundColor: '#ed1c25' };\n  } else if (solvedProblems / totalProblems <= 0.5) {\n    return { backgroundColor: '#a005a5' };\n  }\n  return { backgroundColor: '#0200fd' };\n};\n\nexport const getLessonActivityStatus = (assigned, dueDate) => {\n  // if (\"assigned && dueDate\") {\n  if (assigned === \"assigned\") {\n    return 'card-main card-lesson-detail card-assigned card';\n  }\n  // if (!assigned && !dueDate) {\n  if (assigned === \"notassigned\") {\n    return 'card-main card-lesson-detail card-not-assigned card';\n  }\n  return 'card-main card-lesson-detail card';\n};\n\n// eslint-disable-next-line consistent-return\nexport const renderLessonIcon = subject => {\n  switch (subject) {\n    case \"Reading\":\n      return \"icon-books\";\n    case \"Writing and Language\":\n      return \"icon-hands\";\n    case \"Math\":\n      return \"icon-calculator\";\n    default:\n      break;\n  }\n};\n\nexport const renderDropdownOptions = (\n  status,\n  handleAssignLesson,\n  handleRescheduleModalOpen,\n  handleExcuseLessonLateness,\n  handleResetLesson,\n  handleMarkFlagsReviewed,\n  handleUnassignLesson,\n  listOfCardIds,\n) => {\n  if (status === \"NOTASSIGNED\") {\n    return (\n      <React.Fragment>\n        <li>\n          <a href=\"#\" onClick={() => handleAssignLesson()}>\n            Assign\n          </a>\n        </li>\n      </React.Fragment>\n    );\n  }\n  return (\n    <React.Fragment>\n      <li>\n        <a href=\"#\" onClick={() => handleAssignLesson()}>\n            Assign\n        </a>\n      </li>\n      <li>\n        <a href=\"#\" onClick={() => handleRescheduleModalOpen(listOfCardIds)}>\n            Reschedule\n        </a>\n      </li>\n      <li>\n        <a href=\"#!\" onClick={() => handleExcuseLessonLateness(listOfCardIds)}>Excuse/ Unexcuse Lateness</a>\n      </li>\n      <li>\n        <a href=\"#!\" onClick={() => handleResetLesson(listOfCardIds)}>Reset</a>\n      </li>\n      <li>\n        <a href=\"#!\" onClick={() => handleMarkFlagsReviewed(listOfCardIds)}>Mark Flags Reviewed</a>\n      </li>\n      <li>\n        <a href=\"#!\" onClick={() => handleUnassignLesson(listOfCardIds)}>Unassign</a>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport const renderProblemCount = (status, scoreStatus, score, problems, completedProblems) => {\n  if (status === \"STARTED\") {\n    return (\n      <span\n        className=\"chart-value chart-value-column\"\n        style={{ bottom: \"8px\", backgroundColor: chartColorMap[status] }}\n      >\n        <span\n          className=\"chart-count\"\n          data-count-up\n          data-start-val=\"0\"\n          data-end-val=\"4\"\n          data-duration=\"1\"\n        >\n          <span className=\"text-small\" style={{ fontSize: \"x-small\" }}>\n            {completedProblems}\n          </span>\n        </span>\n        <span className=\"text-small\" style={{ fontSize: \"xx-small\" }}>\n            out of\n        </span>{\" \"}\n        <span className=\"text-small\" style={{ fontSize: \"x-small\" }}>\n          {problems}\n        </span>\n      </span>\n    );\n  }\n  if (status === \"ASSIGNED\") {\n    return (\n      <span\n        className=\"chart-value chart-value-column\"\n        style={{ bottom: \"8px\", border: `2px solid ${chartColorMap[status]}`, backgroundColor: 'white' }}\n      ></span>\n    );\n  }\n  if (status === \"OVERDUE\") {\n    return (\n      <span\n        className=\"chart-value chart-value-column\"\n        style={{ bottom: \"8px\", border: `2px solid red`, backgroundColor: 'white' }}\n      ></span>\n    );\n  }\n  if (status === \"NOTASSIGNED\") return;\n  const percentScore = score ? score.toFixed(0) : \"0\";\n  return (\n    <span\n      className=\"chart-value\"\n      style={{\n        height: \"50px\",\n        width: \"50px\",\n        bottom: \"6px\",\n        backgroundColor: chartColorMap[scoreStatus],\n      }}\n    >\n      <span data-count-up data-start-val=\"0\" data-end-val=\"96\" data-duration=\"1\"></span>\n      <span className=\"percentage\">{percentScore}%</span>\n    </span>\n  );\n};\n\nexport const renderAlerts = flags => {\n  // if (flags.length) {\n\n  if (flags.length) {\n    return (\n      <span className=\"badge-rounded-xs badge red darken-2 white-text\">\n        <b className=\"badge-text\">{flags.length}</b> <i className=\"icon-flag\"></i>\n      </span>\n    );\n  }\n  return <div className=\"right-col col s3\">&nbsp;</div>;\n};\n\n// COLOR MAPS\nexport const statusColorMap = {\n  ASSIGNED: 'grey darken-4',\n  OVERDUE: 'overdue-card',\n  STARTED: 'grey darken-4',\n  SCHEDULED: 'grey',\n  ACCOMPLISHED: 'purple darken-3',\n  BEGINNING: 'red darken-3',\n  EXEMPLARY: 'blue accent-4',\n  DEVELOPING: 'purple',\n};\n\nexport const chartColorMap = {\n  ASSIGNED: '#333',\n  STARTED: \"#333\",\n  OVERDUE: '#fff',\n  SCHEDULED: \"#b2b2b2\",\n  ACCOMPLISHED: '#7327cc',\n  BEGINNING: '#ed1c24',\n  EXEMPLARY: 'rgb(0, 100, 244)',\n  DEVELOPING: '#c10078',\n  GREAT: '#74b287',\n  ABOVE_AVERAGE: '#a9c466',\n  AVERAGE: '#d8c539',\n  BELOW_AVERAGE: '#e89258',\n  POOR: '#f27c7c',\n};\n\nexport const gradeColorMap = {\n  GREAT: '#74b287',\n  ABOVE_AVERAGE: '#a9c466',\n  AVERAGE: '#d8c539',\n  BELOW_AVERAGE: '#e89258',\n  POOR: '#f27c7c',\n};\n\nexport const formatStatus = (status) => {\n  if (!status) return \"\";\n  return status.replace('_', ' ').toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { bindActionCreators } from \"redux\";\nimport PropTypes from \"prop-types\";\nimport LessonCard from \"./components/LessonCard\";\nimport Checkbox from \"./components/LessonCard/components/Checkbox\";\n// eslint-disable-next-line\nimport ClickOffComponentWrapper from \"../../../../ClickOffComponentWrapper\";\nimport { rescheduleStudentLessons, unAssignLessonToStudent, resetStudentLessons } from '../../../index/actions';\nimport moment from 'moment';\nimport { makeSelectCheckedLessons } from '../../../index/selectors';\nimport RescheduleModal from \"../RescheduleModal\";\nimport Modal from '../../../../Modal/index';\n\n\nconst FullView = props => {\n  const [openRescheduleModal, toggleRescheduleModal] = useState(false);\n  const [activeLesson, setActiveLesson] = useState([]);\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n  const [confirmationFunc, setConfirmationFunc] = useState(\"\");\n  const [lessonIdsToEdit, setLessonIdsToEdit] = useState([]);\n  const [rescheduleModalState, setRescheduleModalState] = useState({});\n\n  const {\n    lessons = [],\n    onCloneLesson,\n    onDeleteLesson,\n    user,\n    onAddCheckedLesson,\n    onRemoveCheckedLesson,\n    onCheckAll,\n    selectAll,\n    dropdownIsOpen,\n    onOpenModal,\n    onOpenDropdown,\n    onCloseDropdown,\n    renderDropdownOptions,\n    checkedCardIds,\n    resetLessonSelections,\n    handleMarkAllFlagsReviewed,\n    lessonIdsToUnFlag,\n  } = props;\n  const mapLessons = () => lessons.map((lesson, index) => (\n    <LessonCard\n      // eslint-disable-next-line react/no-array-index-key\n      key={lesson.id}\n      lessonId={lesson.lesson_id ? lesson.lesson_id : lesson.id}\n      uniqueId={lesson.id}\n      index={index}\n      lesson={lesson}\n      onCloneLesson={() => onCloneLesson(index)}\n      onDeleteLesson={() => onDeleteLesson(index)}\n      user={user}\n      selected={lesson.selected}\n      onAddCheckedLesson={onAddCheckedLesson}\n      onRemoveCheckedLesson={onRemoveCheckedLesson}\n      handleRescheduleModalOpen={handleRescheduleModalOpen}\n      onOpenModal={onOpenModal}\n      onCloseDropdown={onCloseDropdown}\n      onAddAssignLessonIds={props.onAddAssignLessonIds}\n      handleResetLesson={handleResetLesson}\n      handleUnassignLesson={handleUnassignLesson}\n      handleMarkAllFlagsReviewed={handleMarkAllFlagsReviewed}\n      flagRemoved={lessonIdsToUnFlag.includes(lesson.id)}\n      handleExcuseLessonLateness={props.handleExcuseLessonLateness}\n    />\n  ));\n  const handleRescheduleModalOpen = activeLesson => {\n    onCloseDropdown();\n    toggleRescheduleModal(!openRescheduleModal);\n    setActiveLesson(activeLesson);\n  };\n\n  const handleAssignLesson = () => {\n    onOpenModal();\n  };\n\n  const onSaveScheduleChanges = (modalState) => {\n    if (checkForDifferentStatus(activeLesson)) {\n      setIsConfirmModalOpen(true);\n      setLessonIdsToEdit(activeLesson);\n      setRescheduleModalState(modalState);\n      return setConfirmationFunc('reschedule');\n    }\n    onSubmitScheduleChanges(modalState, activeLesson);\n  };\n\n  const onSubmitScheduleChanges = (modalState, activeLesson) => {\n    const { dispathRescheduleStudentLessons } = props;\n    const payload = {\n      student_lesson_ids: activeLesson,\n      assignment_date: moment(modalState.assignDate).format('YYYY-MM-DD'),\n      due_date: !modalState.isTimed ? moment(modalState.dueDate).format('YYYY-MM-DD') : null,\n    };\n    if (Object.keys(payload).length > 0 && typeof payload === 'object') {\n      dispathRescheduleStudentLessons(payload);\n      toggleRescheduleModal(!openRescheduleModal);\n      resetLessonSelections();\n    }\n  };\n\n  const handleUnassignLesson = lessonIds => {\n    if (checkForDifferentStatus(lessonIds)) {\n      setIsConfirmModalOpen(true);\n      setLessonIdsToEdit(lessonIds);\n      return setConfirmationFunc('unassign');\n    }\n    onSubmitUnassignLesson(lessonIds);\n  };\n\n  const onSubmitUnassignLesson = (lessonIds) => {\n    const { dispathUnAssignLessonToStudent } = props;\n    if (lessonIds && typeof lessonIds === 'object' && lessonIds.length > 0) {\n      dispathUnAssignLessonToStudent(lessonIds);\n      onCloseDropdown();\n      resetLessonSelections();\n    }\n  };\n\n  const handleResetLesson = lessonIds => {\n    if (checkForDifferentStatus(lessonIds)) {\n      setIsConfirmModalOpen(true);\n      setLessonIdsToEdit(lessonIds);\n      return setConfirmationFunc('reset');\n    }\n    onSubmitResetLesson(lessonIds);\n  };\n\n  const onSubmitResetLesson = (lessonIds) => {\n    const { dispathResetStudentLessons } = props;\n    if (lessonIds && typeof lessonIds === 'object' && lessonIds.length > 0) {\n      dispathResetStudentLessons(lessonIds);\n      onCloseDropdown();\n      resetLessonSelections();\n    }\n  };\n\n  const onHandleExcuseLesson = (lessonIds) => {\n    if (checkForDifferentStatus(lessonIds)) {\n      setIsConfirmModalOpen(true);\n      setLessonIdsToEdit(lessonIds);\n      return setConfirmationFunc('excuse/unexcuse');\n    }\n    onSubmitExcuseLesson(lessonIds);\n  };\n\n  const onSubmitExcuseLesson = (lessonIds) => {\n    const { handleExcuseLessonLateness } = props;\n    handleExcuseLessonLateness(lessonIds);\n    onCloseDropdown();\n  };\n\n  const checkForDifferentStatus = (lessonIds) => {\n    const relevantLessons = lessons.filter(lesson => lessonIds.includes(lesson.id));\n    const statusList = [];\n    relevantLessons.map(lesson => !statusList.includes(lesson.status) && statusList.push(lesson.status));\n    if (statusList.length > 1) {\n      return true;\n    }\n    return false;\n  };\n\n  const startMarkFlagsReviewed = (lessonIds) => {\n    if (checkForDifferentStatus(lessonIds)) {\n      setIsConfirmModalOpen(true);\n      setLessonIdsToEdit(lessonIds);\n      return setConfirmationFunc('review flagged');\n    }\n    onSubmitMarkFlagsReviewed(lessonIds);\n  };\n\n  const onSubmitMarkFlagsReviewed = (lessonIds) => {\n    handleMarkAllFlagsReviewed(lessonIds);\n    onCloseDropdown();\n  };\n\n  const onConfirmModalFunction = () => {\n    switch (confirmationFunc) {\n      case 'reschedule':\n        onSubmitScheduleChanges(rescheduleModalState, lessonIdsToEdit);\n        break;\n      case 'unassign':\n        onSubmitUnassignLesson(lessonIdsToEdit);\n        break;\n      case 'reset':\n        onSubmitResetLesson(lessonIdsToEdit);\n        break;\n      case 'excuse/unexcuse':\n        onSubmitExcuseLesson(lessonIdsToEdit);\n        break;\n      case 'review flagged':\n        onSubmitMarkFlagsReviewed(lessonIdsToEdit);\n        break;\n      default:\n        break;\n    }\n    setIsConfirmModalOpen(false);\n    toggleRescheduleModal(false);\n  };\n\n  return (\n    <div className=\"content-section\">\n      <Modal\n        open={isConfirmModalOpen}\n        onConfirm={() => onConfirmModalFunction()}\n        onClose={() => setIsConfirmModalOpen(false)}\n        header={`Are you sure you want to ${confirmationFunc} lesson(s)?`}\n        body={\"Some of the lessons are you are trying to edit have a different completion status. Edit lesson(s) anyways?\"}\n      />\n      <div className=\"d-flex justify-content-between\">\n        <div>\n          <Checkbox\n            label=\"Check all\"\n            checkBoxId=\"checkall\"\n            onChecked={onCheckAll}\n            type=\"pageCheckBox\"\n            checked={selectAll}\n          />\n        </div>\n        <div>\n          <b> - {lessons && lessons.length} results -</b>\n        </div>\n\n        <div className=\"dropdown-block col\">\n          <a\n            className=\"dropdown-trigger btn\"\n            href=\"#\"\n            data-target=\"dropdown01\"\n            // eslint-disable-next-line\n            onClick={(e) => {\n              e.preventDefault();\n              onOpenDropdown();\n            }}\n          >\n            <i className=\"material-icons dots-icon\">more_vert</i>\n          </a>\n          <div className=\"row d-flex-content card-width-272\">\n            <RescheduleModal\n              open={openRescheduleModal}\n              lesson={activeLesson}\n              onClose={handleRescheduleModalOpen}\n              onSave={onSaveScheduleChanges}\n            />\n          </div>\n\n          <If condition={dropdownIsOpen}>\n            <ClickOffComponentWrapper onOuterClick={() => onCloseDropdown()}>\n              <ul\n                id=\"dropdown01\"\n                className=\"dropdown-content dropdown-wide\"\n                style={{\n                  display: \"block\",\n                  opacity: \"1\",\n                  transform: \"scaleX(1) scaleY(1)\",\n                }}\n              >\n                {renderDropdownOptions(\n                  status,\n                  handleAssignLesson,\n                  handleRescheduleModalOpen,\n                  onHandleExcuseLesson,\n                  handleResetLesson,\n                  startMarkFlagsReviewed,\n                  handleUnassignLesson,\n                  checkedCardIds)}\n              </ul>\n            </ClickOffComponentWrapper>\n          </If>\n        </div>\n      </div>\n      <div className=\"row d-flex-content  justify-content-center card-width-auto\">\n        {mapLessons()}\n      </div>\n    </div>\n  );\n};\n\nFullView.propTypes = {\n  lessons: PropTypes.array.ifsRequired,\n  user: PropTypes.object.isRequired,\n  onCloneLesson: PropTypes.func.isRequired,\n  onDeleteLesson: PropTypes.func.isRequired,\n  onCheckAll: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  dispathRescheduleStudentLessons: bindActionCreators(rescheduleStudentLessons, dispatch),\n  dispathUnAssignLessonToStudent: bindActionCreators(unAssignLessonToStudent, dispatch),\n  dispathResetStudentLessons: bindActionCreators(resetStudentLessons, dispatch),\n});\n\nconst mapStateToProps = createStructuredSelector({\n  checkedLessons: makeSelectCheckedLessons(),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FullView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport statusColorMap from '../../../../DetailWorksheetPage/utils/statusColorMap';\nimport LessonDetailAnswerSheet from '../../../../LessonDetailAnswerSheet';\n\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      detailModalOpen: false,\n    };\n  }\n\n  onOpenDetailModal = () => this.setState({ detailModalOpen: true })\n  onCloseDetailModal = () => this.setState({ detailModalOpen: false });\n\n\n   // eslint-disable-next-line consistent-return\n   renderLessonIcon = (subject) => {\n     switch (subject) {\n       case 'Reading':\n         return 'icon-books';\n       case 'Writing':\n         return 'icon-hands';\n       case 'Math':\n         return 'icon-calculator';\n       default:\n         break;\n     }\n   }\n\n  renderDropdownOptions = (status) => {\n    if (status === \"Scheduled\" || status === 'Assigned') {\n      return (\n        <React.Fragment>\n          <li><a href=\"#\">Reschedule</a></li>\n          <li><a href=\"#!\">Unassign</a></li>\n        </React.Fragment>\n      );\n    }\n    return (\n      <React.Fragment>\n        <li><a href=\"#\">Reschedule</a></li>\n        <li><a href=\"#!\" >Mark all Flags Reviewed</a></li>\n        <li><a href=\"#!\">Reset</a></li>\n        <li><a href=\"#!\">Unassign</a></li>\n      </React.Fragment>\n    );\n  }\n\n\n  render() {\n    const { lessonName, score, scoreStatus, passage, reviewedAlerts, overdue, subject, status, completionDate, problems, type, availableDate, dueDate, flags } = this.props.lesson;\n    const { dropdownIndex, lesson, dropdownIsOpen, index, user, handleDropdownClick } = this.props;\n    return (\n      <React.Fragment>\n        <LessonDetailAnswerSheet\n          onCloseDetailModal={this.onCloseDetailModal}\n          open={this.state.detailModalOpen}\n          user={user}\n          lesson={lesson}\n        />\n        <div className=\"card list-table-row\" key={index}>\n          <div className=\"list-table-cell icon-cell\">\n            <span className=\"block-icon\">\n              <i className={this.renderLessonIcon(subject)}></i>\n            </span>\n          </div>\n          <div className=\"list-table-cell type-cell\">\n            <div className=\"card-panel-text truncate\">\n              <div className=\"text-large truncate\" id=\"lessonName\"><a href=\"#\" onClick={this.onOpenDetailModal}>{lessonName}</a></div>\n            </div>\n          </div>\n          <div className=\"list-table-cell graph-cell\" style={{ marginLeft: '50px' }}>\n            {scoreStatus && (\n              <span className={`chart-bar ${statusColorMap[scoreStatus]} white-text`}>{Math.floor(`${score / problems * 100}`)}%</span>\n            )}\n          </div>\n          <div className=\"list-table-cell status-cell\" >\n            <Choose>\n              <When condition={scoreStatus !== \"\"}>\n                <span className={`badge badge-rounded-md ${statusColorMap[scoreStatus]} white-text`}>{scoreStatus}</span>\n              </When>\n              <Otherwise>\n                <span className={`badge badge-rounded-md ${statusColorMap[status]} white-text`}>{status}</span>\n              </Otherwise>\n            </Choose>\n          </div>\n          <div className=\"list-table-cell type-cell\" style={{ marginLeft: '10px' }}>{subject}</div>\n          <div className=\"list-table-cell type-cell\">p. {passage}</div>\n          <div className=\"list-table-cell date-cell\"><time dateTime=\"2019-01-27\">{availableDate}</time></div>\n          <div className=\"list-table-cell dueDate-cell\" style={{ color: overdue ? \"#db1b29\" : \"\" }}><time dateTime=\"2019-01-27\">{dueDate}</time></div>\n          <div className=\"list-table-cell completed-cell\">{completionDate}\n            {/* {completed && (\n            <React.Fragment>\n              {completionDate}\n            </React.Fragment>\n          )} */}\n          </div>\n          <div className=\"list-table-cell name-cell\">\n            <div className=\"card-panel-text truncate\">\n              <div className=\"text-large truncate\">{type}</div>\n            </div>\n          </div>\n          <div className=\"list-table-cell graph-cell\">\n            {reviewedAlerts.length > 0 && (\n              <span className=\"badge-rounded-xs badge grey darken-1 white-text\"><b className=\"badge-text\">{reviewedAlerts.length}</b> <i className=\"icon-flag\"></i></span>\n            )}\n          </div>\n          <div className=\"list-table-cell flags-cell\">\n            {flags.length > 0 && (\n              <span className=\"badge-rounded-xs badge red darken-2 white-text\"><b className=\"badge-text\">{flags.length}</b> <i className=\"icon-flag\"></i></span>\n            )}\n          </div>\n\n          <div className=\"list-table-cell drop-cell\">\n            <div className=\"dropdown-block\">\n              <a\n                href=\"#\"\n                data-target=\"dropdown01\"\n                className=\"dropdown-trigger btn\"\n                onClick={(event) => handleDropdownClick(event, index)}\n              >\n                <i className=\"material-icons dots-icon\">more_vert</i>\n              </a>\n              <If condition={dropdownIsOpen && dropdownIndex === index}>\n                <ul id=\"dropdown01\" className=\"dropdown-content dropdown-wide\" style={{ display: 'block', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}>\n                  {this.renderDropdownOptions(status)}\n                </ul>\n              </If>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nListItem.propTypes = {\n  lesson: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  dropdownIndex: PropTypes.number.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  handleDropdownClick: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n\n};\n\nexport default ListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from './components/ListItem';\n\n\nclass ListView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n    };\n  }\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  setSortType = (name) => {\n    const { onSetSort, sort } = this.props;\n    if (sort !== `${name}Ascending` && sort !== `${name}Descending`) {\n      onSetSort(`${name}Ascending`);\n    }\n    if (sort === `${name}Descending`) {\n      onSetSort(`${name}Ascending`);\n    } else {\n      onSetSort(`${name}Descending`);\n    }\n  }\n\n  handleDropdownClick = (event, index) => {\n    const { dropdownIsOpen } = this.state;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return this.onCloseDropdown();\n    }\n    return this.onSetDropdown(index);\n  }\n\n  mapLessonRows = () => {\n    const { lessons, user } = this.props;\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    return lessons.map((lesson, index) => (\n      <ListItem\n        lesson={lesson}\n        user={user}\n        index={index}\n        dropdownIndex={dropdownIndex}\n        dropdownIsOpen={dropdownIsOpen}\n        handleDropdownClick={this.handleDropdownClick}\n      />\n    ));\n  }\n\n  // eslint-disable-next-line consistent-return\n  renderLessonIcon = (subject) => {\n    switch (subject) {\n      case 'Reading':\n        return 'icon-books';\n      case 'Writing':\n        return 'icon-hands';\n      case 'Math':\n        return 'icon-calculator';\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const { lessons } = this.props;\n    return (\n      <React.Fragment>\n        <div className=\"content-section\">\n          <div className=\"container-md\">\n            <div className=\"result-row center-align\">\n              <b className=\"result\"> - {lessons.length} results -</b>\n            </div>\n            <div className=\"list-view-section\" style={{ margin: '0 -160px' }}>\n              <div className=\"list-table\">\n                <div className=\"list-table-header\">\n                  <div className=\"list-table-row\">\n                    <div className=\"list-table-cell icon-cell\">&nbsp;</div>\n                    <div className=\"list-table-cell name-cell\" style={{ marginRight: '55px' }} value=\"lessonName\">\n                      <a\n                        href=\"#\"\n                        onClick={() => this.setSortType(\"lessonName\")}\n                      >\n                        <b>Lesson</b>\n                      </a>\n                    </div>\n                    {/* <div className=\"list-table-cell drop-cell\">&nbsp;</div> */}\n                    <div className=\"list-table-cell completed-cell\"><a\n                      href=\"#\"\n                      onClick={() => this.setSortType(\"status\")}\n                    >\n                      <b>Status</b>\n                    </a>\n                    </div>\n                    <div className=\"list-table-cell completed-cell\" style={{ marginLeft: '5px' }}><a\n                      href=\"#\"\n                      onClick={() => this.setSortType(\"subject\")}\n                    >\n                      <b>Subject</b>\n                    </a>\n                    </div>\n                    <div className=\"list-table-cell page-cell\" style={{ paddingRight: '82px  ' }}>\n                      <a\n                        href=\"#\"\n                        onClick={() => this.setSortType(\"passage\")}\n                      ><b>Page</b>\n                      </a></div>\n                    <div className=\"list-table-cell date-cell\" style={{ marginLeft: '-53px' }}><a\n                      href=\"#\"\n                      onClick={() => this.setSortType(\"availableDate\")}\n                    >\n                      <b>Date</b>\n                    </a>\n                    </div>\n                    <div className=\"list-table-cell dueDate-cell\" style={{ marginLeft: '13px', paddingLeft: '-1px' }}><a\n                      href=\"#\"\n                      onClick={() => this.setSortType(\"dueDate\")}\n                    >\n                      <b>Due Date</b>\n                    </a>\n                    </div>\n                    <div className=\"list-table-cell completed-cell\"><a\n                      href=\"#\"\n                      onClick={() => this.setSortType(\"completionDate\")}\n                    >\n                      <b>Complete</b>\n                    </a>\n                    </div>\n                    <div className=\"list-table-cell completed-cell\"><a\n                      href=\"#\"\n                      onClick={() => this.setSortType(\"lessonType\")}\n                    >\n                      <b>Type</b>\n                    </a>\n                    </div>\n                    <div className=\"list-table-cell flags-cell\"><b>&nbsp;</b></div>\n                    <div className=\"list-table-cell flags-cell\"><a\n                      href=\"#\"\n                      onClick={() => this.setSortType(\"flags\")}\n                    >\n                      <b>Flags</b>\n                    </a>\n                    </div>\n                    <div className=\"list-table-cell drop-cell\">&nbsp;</div>\n                  </div>\n                </div>\n                <div className=\"list-table-body\">\n                  {this.mapLessonRows()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <style jsx>\n          {`\n           #nameCell {\n             width: 140px;\n           }\n           .list-table .list-table-cell.type-cell {\n             max-width: 12%\n           }`}\n        </style>\n      </React.Fragment>\n\n    );\n  }\n}\n\nListView.propTypes = {\n  lessons: PropTypes.array.isRequired,\n  onSetSort: PropTypes.func.isRequired,\n  sort: PropTypes.string.isRequired,\n  user: PropTypes.object.isRequired,\n\n};\n\nexport default ListView;\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport PropTypes from 'prop-types';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport lessonSortOptions from '../../utils/lessonSortOptions';\nimport unitOptions from '../../utils/unitOptions';\nimport modalSortOptions from '../../utils/modalSortOptions';\n\nclass ModalFilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      sort: {},\n      nameFilter: \"\",\n      unitFilter: \"\",\n    };\n  }\n\n  onToggleShowFilters = () => this.setState(({ open }) => ({ open: !open }))\n  handleSortChange = (event) => {\n    const { onSetSort } = this.props;\n    this.setState({ sort: event });\n    onSetSort(event);\n  }\n\n  submitNameFilter = () => {\n    const { onSetFilteredState, onUnsetFilteredState } = this.props;\n    const { nameFilter } = this.state;\n    if (nameFilter === '') {\n      onUnsetFilteredState(nameFilter);\n    }\n    const transformedName = nameFilter.replace(/\\s/g, \"\").toLowerCase();\n    onSetFilteredState(transformedName);\n  }\n\n  handleUnitChange = (event) => {\n    const { onSetUnitFilter } = this.props;\n    this.setState({ unitFilter: event });\n    onSetUnitFilter(event);\n  }\n\n  clearAllFilters = () => {\n    const { onClearFilters } = this.props;\n    this.setState({ sort: {}, nameFilter: \"\", unitFilter: \"\" });\n    onClearFilters();\n  }\n  handleFilterChange = (event, name) => {\n    const { onUnsetFilteredState, onSetFilteredState, onSetUnitFilter } = this.props;\n    const value = event.target ? event.target.value : event;\n    const updatedState = update(this.state, {\n      $merge: { [name]: value },\n    });\n    this.setState(updatedState);\n    if (name === 'nameFilter') {\n      if (event === '') {\n        return onUnsetFilteredState();\n      }\n      return onSetFilteredState(event);\n    }\n    if (name === 'unitFilter') {\n      if (event === \"\") {\n        return onUnsetFilteredState();\n      }\n      return onSetUnitFilter(event);\n    }\n  }\n  render() {\n    const { open, sort, nameFilter, unitFilter } = this.state;\n    const { subjectFilters, statusFilters, lessonTypeFilters, handleFilterClick } = this.props;\n    return (\n      <div className=\"filter-form-holder\">\n        <ul className=\"collapsible expandable\">\n          <li>\n            <div className=\"collapsible-body\" style={open ? { display: 'block' } : { display: 'none' }}>\n              <div className=\"filter-form_checkbox-list-holder justify-center\">\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"assignedModal\"\n                      checked={statusFilters.indexOf('Assigned') !== -1}\n                      onChange={() => handleFilterClick('status', 'Assigned')}\n                    />\n                    <label htmlFor=\"assignedModal\">Assigned</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"unassigned\"\n                      checked={statusFilters.indexOf('Unassigned') !== -1}\n                      onChange={() => handleFilterClick('status', 'Unassigned')}\n                    />\n                    <label htmlFor=\"unassigned\">Unassigned</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"readingModal\"\n                      checked={subjectFilters.indexOf('Reading') !== -1}\n                      onChange={() => handleFilterClick('subject', 'Reading')}\n                    />\n                    <label htmlFor=\"readingModal\">Reading</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"writingModal\"\n                      checked={subjectFilters.indexOf('Writing') !== -1}\n                      onChange={() => handleFilterClick('subject', 'Writing')}\n                    />\n                    <label htmlFor=\"writingModal\">Writing</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"mathModal\"\n                      checked={subjectFilters.indexOf('Math') !== -1}\n                      onChange={() => handleFilterClick('subject', 'Math')}\n                    />\n                    <label htmlFor=\"mathModal\">Math</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"challengePractice\"\n                      checked={lessonTypeFilters.indexOf('Challenge + Practice') !== -1}\n                      onChange={() => handleFilterClick('lessonType', 'Challenge + Practice')}\n                    />\n                    <label htmlFor=\"challengePractice\">Challenge + Practice</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"homeworkDrill\"\n                      checked={lessonTypeFilters.indexOf('Homework Drill') !== -1}\n                      onChange={() => handleFilterClick('lessonType', 'Homework Drill')}\n                    />\n                    <label htmlFor=\"homeworkDrill\">Homework Drill</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"readingFromWorkbook\"\n                      checked={lessonTypeFilters.indexOf('Read from the Book') !== -1}\n                      onChange={() => handleFilterClick('lessonType', 'Read from the Book')}\n                    />\n                    <label htmlFor=\"readingFromWorkbook\">Reading from Workbook</label>\n                  </li>\n\n                </ul>\n              </div>\n              <div className=\"d-flex row mb-0 justify-center\">\n                <div className=\"col s12 m3\">\n                  <div className=\"search-field input-field\" style={{ marginTop: '30px' }}>\n                    <input\n                      type=\"search\"\n                      id=\"name_search\"\n                      className=\"input-control  validate\"\n                      name=\"nameFilter\"\n                      value={nameFilter}\n                      onChange={(event) => this.handleFilterChange(event, 'nameFilter')}\n                    />\n                    <button\n                      type=\"submit\"\n                      className=\"search-button\"\n                      onClick={this.submitNameFilter}\n                    ><i className=\"icon-search\"></i></button>\n                    <label className={nameFilter.length ? \"label active\" : \"label\"} htmlFor=\"name_search\">Search</label>\n                  </div>\n                </div>\n                <div className=\"col s12 m3\">\n                  <div className=\"input-field\" style={{ marginTop: '-7px' }}>\n                    <Dropdown\n                      value={getValueFromState(unitFilter, unitOptions)}\n                      onChange={(event) => this.handleUnitChange(event)}\n                      options={unitOptions}\n                      label=\"Unit Number\"\n                      stateKey=\"unit\"\n                      dropdownKey=\"unit\"\n                    />\n                  </div>\n                </div>\n\n              </div>\n            </div>\n\n            <div className=\"row mb-0 d-flex align-items-center\">\n              <div className=\"col s12 l4\">\n                <div className=\"row mb-0\">\n\n                  <div className=\"col s12 14\">\n                    <div className=\"input-field\" >\n                      <Dropdown\n                        value={getValueFromState(sort, modalSortOptions)}\n                        onChange={(event) => this.handleSortChange(event)}\n                        options={modalSortOptions}\n                        label=\"Sort by\"\n                        stateKey=\"sort\"\n                        dropdownKey=\"sort\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col s12 l4 offset-s12\">\n                <div className=\"option-filters\">\n                  <div className=\"option-item clear\"><a href=\"#\" onClick={this.clearAllFilters}>Clear Filters</a></div>\n                  <div className=\"option-item\">\n                    <span\n                      className=\"collapsible-header\"\n                      onClick={this.onToggleShowFilters}\n                    >\n                      <span className=\"open-text\">{open ? 'Hide Filters' : 'Open Filters'}</span>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nModalFilterSection.propTypes = {\n  handleFilterClick: PropTypes.func.isRequired,\n  onClearFilters: PropTypes.func.isRequired,\n  onSetFilteredState: PropTypes.func.isRequired,\n  onUnsetFilteredState: PropTypes.func.isRequired,\n  onSetSort: PropTypes.func.isRequired,\n  subjectFilters: PropTypes.array.isRequired,\n  statusFilters: PropTypes.array.isRequired,\n  lessonTypeFilters: PropTypes.array.isRequired,\n  onSetUnitFilter: PropTypes.func.isRequired,\n};\nexport default ModalFilterSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Portal from \"../../../../Portal\";\nimport ClickOffComponentWrapper from \"../../../../ClickOffComponentWrapper\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass RescheduleModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      version: \"SAT Pratice Test #1\",\n      assignTime: new Date(),\n      dueTime: new Date(),\n      assignDate: new Date(),\n      dueDate: new Date(),\n      reading: false,\n      mathNoCalc: false,\n      writing: false,\n      mathWithCalc: false,\n      isAllowed: false,\n      isIncluded: false,\n      isTimed: false,\n      versionOptions: [\n        {\n          label: \"SAT Pratice Test #1\",\n          value: \"SAT Pratice Test #1\",\n        },\n        {\n          label: \"SAT Pratice Test #2\",\n          value: \"SAT Pratice Test #2\",\n        },\n        {\n          label: \"SAT Pratice Test #3\",\n          value: \"SAT Pratice Test #3\",\n        },\n      ],\n    };\n  }\n  handleDetailsChange = (event, name, checkBox = false) => {\n    const value = event.target ? event.target.value : event;\n    if (checkBox) {\n      this.setState({\n        [name]: !this.state[name],\n      });\n    } else {\n      this.setState({\n        [name]: value,\n      });\n    }\n  };\n\n  onSave = () => {\n    const { onSave, activeLesson } = this.props;\n    onSave(this.state, activeLesson);\n  };\n\n  render() {\n    const {\n      open,\n      onClose,\n    } = this.props;\n    const {\n      assignDate,\n      dueDate,\n      assignTime,\n      dueTime,\n      isTimed,\n    } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <React.Fragment>\n            <div className=\"overlay\">\n              <ClickOffComponentWrapper onOuterClick={onClose}>\n                <div id=\"modal_add_new_class\" className=\"modal modal-custom modal-460\" style={{ borderRadius: '5px' }}>\n                  <form action=\"#\" className=\"custom-form\">\n                    <fieldset>\n                      <div className=\"card-modal card-main card\">\n                        <div\n                          className=\"card-panel card-panel-title\"\n                          style={{ backgroundColor: \"#21B9FF\", color: \"#fff\" }}\n                        >\n                          <div className=\"card-panel-row row\">\n                            <div className=\"col\">\n                              <h2>\n                                <span className=\"heading-holder\">\n                                  <span className=\"heading-block\">Reschedule</span>\n                                </span>\n                              </h2>\n                            </div>\n                            <div className=\"col right-align\">\n                              <a\n                                href=\"#!\"\n                                className=\"panel-link close modal-close\"\n                                onClick={onClose}\n                              >\n                                <i className=\"icon-close-thin\" />\n                              </a>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"card-content\">\n                          <div className=\"card-body\">\n                            <div className=\"row mb-0\">\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-calendar\" />\n                                  <DatePicker\n                                    id=\"assignDate\"\n                                    selected={assignDate}\n                                    onChange={date => this.handleDetailsChange(date, \"assignDate\")}\n                                    placeholderText=\"AssignFor\"\n                                  />\n                                  <label\n                                    className={assignDate !== \"\" ? \"label active\" : \"label\"}\n                                    htmlFor=\"assignDate\"\n                                  >\n                                    Assign For\n                                  </label>\n                                </div>\n                              </div>\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-clock2\"></i>\n                                  <DatePicker\n                                    id=\"assignTime\"\n                                    selected={assignTime}\n                                    onChange={date => this.handleDetailsChange(date, \"assignTime\")}\n                                    showTimeSelect\n                                    showTimeSelectOnly\n                                    timeIntervals={15}\n                                    timeCaption=\"Time\"\n                                    dateFormat=\"h:mm aa\"\n                                  />\n                                  <label\n                                    className={assignTime !== \"\" ? \"label active\" : \"label\"}\n                                    htmlFor=\"assignTime\"\n                                  >\n                                    Time\n                                  </label>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"row mb-0\">\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-calendar\" />\n                                  <DatePicker\n                                    id=\"dueDate\"\n                                    selected={dueDate}\n                                    onChange={date => this.handleDetailsChange(date, \"dueDate\")}\n                                    placeholderText=\"Due(optional)\"\n                                  />\n                                  <label\n                                    className={dueDate !== \"\" ? \"label active\" : \"label\"}\n                                    htmlFor=\"dueDate\"\n                                  >\n                                    Due(Optionanl)\n                                  </label>\n                                </div>\n                              </div>\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-clock2\"></i>\n                                  <DatePicker\n                                    selected={dueTime}\n                                    onChange={date => this.handleDetailsChange(date, \"dueTime\")}\n                                    showTimeSelect\n                                    showTimeSelectOnly\n                                    timeIntervals={15}\n                                    timeCaption=\"Time\"\n                                    dateFormat=\"h:mm aa\"\n                                  />\n                                  <label\n                                    className={dueTime !== \"\" ? \"label active\" : \"label\"}\n                                    htmlFor=\"dueTime\"\n                                  >\n                                    Time\n                                  </label>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"check-holder\">\n                              <div className=\"row mb-0\">\n                                <div className=\"col s12\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"isTimed\"\n                                        className=\"filled-in\"\n                                        checked={isTimed}\n                                        onChange={event =>\n                                          this.handleDetailsChange(event, \"isTimed\", \"checkbox\")\n                                        }\n                                      />\n                                      <span>No Due Date</span>\n                                    </label>\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"modal-footer\">\n                            <a\n                              href=\"#!\"\n                              className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\"\n                              onClick={onClose}\n                            >\n                              Cancel\n                            </a>\n                            <a href=\"#\" className=\"btn\" onClick={this.onSave}>\n                              Save Changes\n                            </a>\n                          </div>\n                        </div>\n                      </div>\n                    </fieldset>\n                  </form>\n                </div>\n              </ClickOffComponentWrapper>\n            </div>\n          </React.Fragment>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 1999;\n            }\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            #modal_Location1 {\n              border-radius: 6px;\n            }\n            .modal {\n              display: block;\n              background-color: white;\n              position: absolute;\n              top: 10%;\n              right: 10%;\n              left: 10%;\n              box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12),\n                0 11px 15px -7px rgba(0, 0, 0, 0.2);\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nRescheduleModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n\nexport default RescheduleModal;\n","/* eslint-disable react/no-did-mount-set-state */\n/* eslint-disable react/no-did-update-set-state */\n/* eslint-disable react/no-array-index-key */\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport update from \"immutability-helper\";\nimport moment from \"moment\";\nimport FilterSection from \"./components/FilterSection\";\nimport FullView from \"./components/FullView\";\nimport {\n  dueDateAscending,\n  subjectAscending,\n  subjectDescending,\n  passageAscending,\n  passageDescending,\n  lessonNameDescending,\n  lessonNameAscending,\n  statusDescending,\n  statusAscending,\n  scoreDescending,\n  scoreAscending,\n  availableDateAscending,\n  availableDateDescending,\n  dueDate,\n  flagsAscending,\n  flagsDescending,\n  completionDateAscending,\n  completionDateDescending,\n  lessonTypeAscending,\n  lessonTypeDescending,\n} from \"../../utils/sortFunctions\";\nimport ListView from \"./components/ListView\";\nimport LessonDetailAnswerSheet from \"../LessonDetailAnswerSheet\";\nimport AssignLessonModal from \"./components/AssignLessonModal\";\nimport { renderDropdownOptions } from './components/FullView/components/LessonCard/utils/index';\nimport ReadWorkBook from '../ReadWorkBook';\nimport Modal from \"../../Modal/index\";\n\nimport {\n  getLessonList,\n  getStudentLessonList,\n  checkLesson,\n  checkAllLessons,\n  unCheckAllLessons,\n  addCheckedLesson,\n  removeCheckedLesson,\n  assignLessonToStudent,\n  addAllLessons,\n  removeAllLessons,\n  excuseStudentLateness,\n  filterLessons,\n  flagStudentLessonProblem,\n} from \"../index/actions\";\nimport { makeSelectGetLessonList, makeSelectCheckedLessons, makeSelectActiveStudentToken, makeSelectGetStudentLessonList, makeSelectActiveLesson, makeSelectOpenActivePage, makeSelectSubjects } from \"../index/selectors\";\nimport { createStructuredSelector } from \"reselect\";\nimport AssignDatesModal from \"./components/AssignDatesModal\";\nimport { setOpenActivePage, setIsVisibleTopBar } from \"../index/actions\";\nimport { fetchStudentLessonSectionApi } from \"../index/api\";\nimport { mergeArrays } from './utils/mergeArrays';\n\n// TODO: compare updatedlessons to lessons and update lesson list\nclass DetailLessonList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: true,\n      lessons: [],\n      modalOpen: false,\n      currentView: \"full\",\n      active: \"full\",\n      subjectFilters: [],\n      scoreStatusFilters: [],\n      flagFilters: [],\n      dueDateFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\",\n      updatedLessons: [],\n      selectAll: false,\n      dropdownIsOpen: false,\n      checkedCardIds: [],\n      isConfirmModalOpen: false,\n      prevAssignedLessons: [],\n      lessonsToAssign: {},\n      prevFilters: {\n        nameFilter: '',\n        unitFilter: '',\n      },\n      confirmationModalMessage: '',\n      lessonIdsToUnFlag: [],\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispathGetLessonList();\n    const { id } = this.props.user;\n    const { studentToken } = this.props;\n    const postBody = {\n      id,\n      studentToken,\n    };\n    this.props.dispathGetStudentLessonList(postBody);\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    if (this.state.lessons.length === 0) {\n      this.setState({\n        lessons: nextProps.lessonList,\n      });\n    }\n  };\n\n  // deSelectAllLessons = async (selectedLessonIds) => {\n  //   await this.props.dispatchUnCheckAllLesson(selectedLessonIds);\n  //   await this.props.dispatchRemoveAllLessons(this.getMappableLessons());\n  //   this.setState({ selectAll: false });\n  // }\n\n  /**\n   * @param checked {bool}\n   */\n  onCheckAllClicked = async (checked) => {\n    const selectedLessonIds = this.getMappableLessons().map(lesson => lesson.id);\n    if (!checked) {\n      await this.props.dispatchCheckAllLesson(selectedLessonIds);\n      await this.props.dispatchAddAllLessons(this.getMappableLessons());\n      this.setState({ selectAll: !checked });\n    } else {\n      await this.props.dispatchUnCheckAllLesson(selectedLessonIds);\n      await this.props.dispatchRemoveAllLessons(this.getMappableLessons());\n      this.setState({ selectAll: false });\n    }\n    this.setCheckedCardIds();\n  };\n\n  /**\n   * @param lessonId {string}\n   * @param uniqueId {string}\n   */\n  onAddCheckedLesson = async (lessonId, uniqueId) => {\n    await this.props.dispatchAddCheckedLesson(lessonId);\n    await this.props.dispathCheckLesson(uniqueId);\n    this.setCheckedCardIds();\n    if (!this.state.selectAll) {\n      this.setState({\n        selectAll: true,\n      });\n    }\n  };\n\n  /**\n   * @param lessonId {string}\n   * @param uniqueId {string}\n   */\n  onRemoveCheckedLesson = async (lessonId, uniqueId) => {\n    await this.props.dispatchRemoveCheckedLesson(lessonId);\n    await this.props.dispathCheckLesson(uniqueId);\n    this.setCheckedCardIds();\n    if (this.props.checkedLessons.length === 0) {\n      this.setState({\n        selectAll: false,\n      });\n    }\n  };\n\n  // This updates the selected ASSIGNED student lessons in local state\n  setCheckedCardIds = () => {\n    this.setState({\n      checkedCardIds: this.props.lessonList\n        .filter((lesson) => lesson.selected && lesson.lesson_id)\n        .map((lesson) => lesson.id),\n    });\n  };\n\n  onOpenModal = () => this.setState({ modalOpen: true });\n  onCloseModal = () => this.setState({ modalOpen: false });\n\n  onOpenDropdown = () => this.setState({ dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  onOpenConfirmModal = () => this.setState({ isConfirmModalOpen: true });\n  onCloseConfirmModal = () => this.setState({ isConfirmModalOpen: false });\n\n  onClearFilters = () =>\n    this.setState({\n      subjectFilters: [],\n      completeFilters: [],\n      flagFilters: [],\n      dueDateFilters: [],\n      unitFilter: \"\",\n      nameFilter: \"\",\n    });\n  onSetSort = (sort) => this.setState({ sort });\n  onSetFilteredState = (lesson) => this.setState({ nameFilter: lesson });\n  onUnsetFilteredState = (filter) => this.setState({ [filter]: \"\" });\n  onChangeView = (view) => this.setState({ currentView: view, active: view });\n\n  onSetUnitFilter = (unit) => {\n    this.setState({ unitFilter: unit });\n  };\n\n  // eslint-disable-next-line consistent-return\n  onSortLessons = (lessons) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case \"subjectAscending\":\n        return lessons.sort(subjectAscending);\n      case \"subjectDescending\":\n        return lessons.sort(subjectDescending);\n      case \"passageAscending\":\n        return lessons.sort(passageAscending);\n      case \"statusAscending\":\n        return lessons.sort(statusAscending);\n      case \"scoreAscending\":\n        return lessons.sort(scoreAscending);\n      case \"passageDescending\":\n        return lessons.sort(passageDescending);\n      case \"statusDescending\":\n        return lessons.sort(statusDescending);\n      case \"scoreDescending\":\n        return lessons.sort(scoreDescending);\n      case \"availableDateAscending\":\n        return lessons.sort(availableDateAscending);\n      case \"availableDateDescending\":\n        return lessons.sort(availableDateDescending);\n      case \"dueDateDescending\":\n        return lessons.sort(dueDate);\n      case \"dueDateAscending\":\n        return lessons.sort(dueDateAscending);\n      case \"flagsAscending\":\n        return lessons.sort(flagsAscending);\n      case \"flagsDescending\":\n        return lessons.sort(flagsDescending);\n      case \"lessonNameAscending\":\n        return lessons.sort(lessonNameAscending);\n      case \"lessonNameDescending\":\n        return lessons.sort(lessonNameDescending);\n      case \"completionDateAscending\":\n        return lessons.sort(completionDateAscending);\n      case \"completionDateDescending\":\n        return lessons.sort(completionDateDescending);\n      case \"lessonTypeAscending\":\n        return lessons.sort(lessonTypeAscending);\n      case \"lessonTypeDescending\":\n        return lessons.sort(lessonTypeDescending);\n      case \"dueDate\":\n        return lessons.sort(dueDateAscending);\n      default:\n        break;\n    }\n  };\n  onAddUpdatedLessons = (lessons) => this.setState({ updatedLessons: lessons });\n\n  onFilterByName = (mappableLessons) => {\n    const { nameFilter } = this.state;\n    return mappableLessons.reduce((finalArr, currentLesson) => {\n      const { name } = currentLesson;\n      const lessonString = name.replace(/\\s/g, \"\").toLowerCase();\n      if (lessonString.indexOf(nameFilter.toLowerCase().replace(/\\s/g, '')) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n        finalArr.push(currentLesson);\n      }\n      return finalArr;\n    }, []);\n  };\n\n  onCloneLesson = (index) => {\n    const { lessons } = this.state;\n    this.setState((prevState) => {\n      prevState.lessons.push(lessons[index]);\n      return { lessons: prevState.lessons };\n    });\n  };\n\n  onDeleteLesson = (index) => {\n    const { lessons } = this.state;\n    const newLessonsArray = this.arrayItemRemover(lessons, lessons[index]);\n    this.setState({ lessons: newLessonsArray });\n  };\n  // note: unassigned and incomplete are filtering opposite, but this works for some reason\n  onFilterLessons = (mappableLessons) => {\n    const {\n      subjectFilters,\n      unitFilter,\n      scoreStatusFilters,\n      flagFilters,\n    } = this.state;\n    const { subjects } = this.props;\n    let lessons = [];\n    if (scoreStatusFilters.length && scoreStatusFilters.indexOf(\"all\") === -1) {\n      lessons = mappableLessons.filter((lesson) =>\n        (lesson.scoring && lesson.scoring.grade && scoreStatusFilters.indexOf(lesson.scoring.grade.toLowerCase()) !== -1),\n      );\n    }\n    if (subjectFilters.length && subjectFilters.indexOf(\"all\") === -1) {\n      lessons = mappableLessons.filter((lesson) => {\n        if (!lesson.subjects) {\n          return subjectFilters.indexOf(subjects[lesson.subject_id]) !== -1;\n        }\n        return subjectFilters.indexOf(lesson.subjects.name) !== -1;\n      });\n    }\n    if (flagFilters.length && flagFilters.indexOf(\"all\") === -1) {\n      lessons = lessons.filter((lesson) =>\n        (lesson.problems && lesson.problems.filter(problem => problem.flat_status).length !== 0),\n      );\n    }\n    if (unitFilter.length && unitFilter.indexOf(\"all\") === -1) {\n      lessons = mappableLessons.filter((lesson) => {\n        if (!lesson.units) {\n          return unitFilter.indexOf(lesson.unit_id) !== -1;\n        }\n        return unitFilter.indexOf(lesson.units.id) !== -1;\n      });\n    }\n    return lessons;\n  };\n\n  getMappableLessons = () => {\n    const {\n      sort,\n      unitFilter,\n      dueDateFilters,\n      nameFilter,\n      subjectFilters,\n      scoreStatusFilters,\n      flagFilters,\n      prevFilters,\n    } = this.state;\n    if (unitFilter !== prevFilters.unitFilter || nameFilter !== prevFilters.nameFilter) {\n      const { dispatchFilterLessons } = this.props;\n      this.setState({ prevFilters: { unitFilter, nameFilter } });\n      dispatchFilterLessons({ unitFilter, nameFilter });\n    }\n    let mappableLessons = this.props.lessonList;\n    if (nameFilter.length) {\n      mappableLessons = this.onFilterByName(mappableLessons);\n    }\n    if (\n      unitFilter.length ||\n      scoreStatusFilters.length ||\n      subjectFilters.length ||\n      flagFilters.length\n    ) {\n      mappableLessons = this.onFilterLessons(mappableLessons);\n    }\n    if (dueDateFilters.length) {\n      mappableLessons = this.filterDueDate(mappableLessons);\n    }\n    if (sort) {\n      return [...this.onSortLessons(mappableLessons)];\n    }\n    return mappableLessons;\n  };\n\n  // may need to alter dueNextSession depending if client wants ALL vs incomplete/overdue\n  // TODO: only works with one due date filter, not multiple\n  filterDueDate = (mappableLessons) => {\n    const { user } = this.props;\n    const { dueDateFilters } = this.state;\n    let lessons = mappableLessons;\n    if (dueDateFilters.length && dueDateFilters.indexOf(\"all\") === -1) {\n      if (dueDateFilters.includes(\"dueToday\")) {\n        lessons = lessons.filter((lesson) => lesson.due_date === moment().format(\"YYYY-MM-DD\"));\n      }\n      if (dueDateFilters.includes(\"dueNextSession\")) {\n        lessons = lessons.filter((lesson) =>\n          moment(user.nextSession).isSameOrAfter(lesson.dueDate, \"day\"),\n        );\n      }\n      if (dueDateFilters.includes(\"overdue\")) {\n        lessons = lessons.filter((lesson) => lesson.status === 'OVERDUE');\n      }\n      if (dueDateFilters.includes(\"noDueDate\")) {\n        lessons = lessons.filter((lesson) => !lesson.due_date);\n      }\n      if (dueDateFilters.includes(\"unAssigned\")) {\n        lessons = lessons.filter((lesson) => lesson.status === \"NOTASSIGNED\");\n      }\n      return lessons;\n    }\n    return lessons;\n  };\n\n  handleFilterClick = (filterType, filter) => {\n    const {\n      subjectFilters: currentSubjectFilters,\n      scoreStatusFilters: currentScoreStatusFilters,\n      flagFilters: currentFlagFilters,\n      dueDateFilters: currentDueDateFilters,\n    } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case \"subject\":\n        modifiedFilterCurrentState = currentSubjectFilters;\n        modifiedFilterName = \"subjectFilters\";\n        break;\n      case \"score\":\n        modifiedFilterCurrentState = currentScoreStatusFilters;\n        modifiedFilterName = \"scoreStatusFilters\";\n        break;\n      case \"flags\":\n        modifiedFilterCurrentState = currentFlagFilters;\n        modifiedFilterName = \"flagFilters\";\n        break;\n      case \"dueDate\":\n        modifiedFilterCurrentState = currentDueDateFilters;\n        modifiedFilterName = \"dueDateFilters\";\n        break;\n      default:\n        break;\n    }\n    // Decide whether we're adding or removing the selected filter\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[filterIndex, 1]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  };\n\n  arrayItemRemover = (array, value) => array.filter((lesson) => lesson !== value);\n\n  renderCurrentView = () => {\n    const { active } = this.state;\n    const { user } = this.props;\n    if (active === \"full\") {\n      return (\n        <FullView\n          user={user}\n          lessons={this.getMappableLessons()}\n          selectAll={this.state.selectAll}\n          onDeleteLesson={this.onDeleteLesson}\n          onCloneLesson={this.onCloneLesson}\n          onCheckAll={this.onCheckAllClicked}\n          onAddCheckedLesson={this.onAddCheckedLesson}\n          onRemoveCheckedLesson={this.onRemoveCheckedLesson}\n          dropdownIsOpen={this.state.dropdownIsOpen}\n          onOpenModal={this.onOpenModal}\n          onCloseDropdown={this.onCloseDropdown}\n          onOpenDropdown={this.onOpenDropdown}\n          renderDropdownOptions={renderDropdownOptions}\n          checkedCardIds={this.state.checkedCardIds}\n          onAddAssignLessonIds={this.onAddAssignLessonIds}\n          resetLessonSelections={this.resetLessonSelections}\n          handleMarkAllFlagsReviewed={this.handleMarkAllFlagsReviewed}\n          lessonIdsToUnFlag={this.state.lessonIdsToUnFlag}\n          handleExcuseLessonLateness={this.handleExcuseLessonLateness}\n        />\n      );\n    }\n    return (\n      <ListView\n        user={user}\n        lessons={this.getMappableLessons()}\n        onSetSort={this.onSetSort}\n        sort={this.state.sort}\n      />\n    );\n  };\n\n  onAssignLesson = (lessonDates) => {\n    const { checkedLessons, studentLess } = this.props;\n    // Check if there are lessons to assign\n    if (checkedLessons.length <= 0) return null;\n    // Check if that lesson has already been assigned\n    const payload = {\n      student_id: this.props.user.id,\n      lesson_ids: checkedLessons,\n      assignment_date: lessonDates.assignDate,\n      due_date: lessonDates.dueDate,\n    };\n    const prevAssignedLessons = studentLess.filter((lesson) =>\n      checkedLessons.includes(lesson.lesson_id),\n    );\n\n    // If lessons have been assigned before, open modal\n    if (prevAssignedLessons.length > 0) {\n      this.onOpenConfirmModal();\n      return this.setState({\n        prevAssignedLessons,\n        lessonsToAssign: payload,\n        confirmationModalMessage: 'One or more lessons you are assigning to this student have previously been assigned. Assign Lessons anyways?',\n      });\n    }\n    // Move onto sending request\n    this.submitAssignedLesson(payload);\n  }\n\n  submitAssignedLesson = (lessons) => {\n    const {\n      dispatchAssignLessonToStudent,\n    } = this.props;\n    this.onCloseConfirmModal();\n    // Dispatch assign lesson to student\n    let payload = lessons;\n    if (!payload) {\n      payload = this.state.lessonsToAssign;\n    }\n    dispatchAssignLessonToStudent(payload);\n    // Clear the redux checkedLesson property\n    this.resetLessonSelections();\n  }\n\n  // Resets redux store, unchecks lessons, resets checked state\n  resetLessonSelections = () => {\n    const {\n      dispatchRemoveAllLessons,\n      dispatchUnCheckAllLesson,\n    } = this.props;\n    dispatchUnCheckAllLesson(this.getMappableLessons());\n    dispatchRemoveAllLessons(this.getMappableLessons());\n    this.setState({ selectAll: false, prevAssignedLessons: [], lessonsToAssign: {} });\n  }\n\n  confirmationModal() {\n    return (\n      <Modal\n        open={this.state.isConfirmModalOpen}\n        onConfirm={() => this.submitAssignedLesson()}\n        onClose={this.onCloseConfirmModal}\n        header=\"Are you sure?\"\n        body={this.state.confirmationModalMessage}\n      />\n    );\n  }\n\n  onCloseDetailModal = () => {\n    const { onSetOpenActivePage, onSetIsVisibleTopBar } = this.props;\n    onSetIsVisibleTopBar(true);\n    onSetOpenActivePage(\"\");\n  }\n\n  handleMarkAllFlagsReviewed = (studentLessonIds) => {\n    const { onFlagStudentLessonProblem } = this.props;\n    if (studentLessonIds && studentLessonIds.length > 0) {\n      this.getMappableLessons().forEach(lesson => {\n        if (studentLessonIds.includes(lesson.id)) {\n          if (lesson.problems && lesson.problems.length > 0) {\n            lesson.problems.forEach(problem => {\n              if (problem.flag_status === \"FLAGGED\") {\n                const payload = {\n                  student_lesson_id: lesson.id,\n                  problem_id: problem.problem.id,\n                  flag_status: 'REVIEWED',\n                };\n                onFlagStudentLessonProblem(payload);\n              }\n            });\n          } else if (lesson.sections && lesson.sections.length > 0) {\n            const section1 = fetchStudentLessonSectionApi(\n              this.props.user.id,\n              lesson.id,\n              lesson.sections[0].id,\n            );\n            const section2 = fetchStudentLessonSectionApi(\n              this.props.user.id,\n              lesson.id,\n              lesson.sections[1].id,\n            );\n            Promise.all([section1, section2]).then((sections) => {\n              const filteredSections = sections.filter((section) => section);\n              filteredSections.map((section) => {\n                section.lesson_problems.map((problem) => {\n                  if (problem.flag_status === \"FLAGGED\") {\n                    const payload = {\n                      student_lesson_id: lesson.id,\n                      problem_id: problem.problem.id,\n                      flag_status: 'REVIEWED',\n                    };\n                    onFlagStudentLessonProblem(payload);\n                  }\n                });\n              });\n            });\n          }\n        }\n      });\n      this.setState({ lessonIdsToUnFlag: mergeArrays(this.state.lessonIdsToUnFlag, studentLessonIds) });\n      this.resetLessonSelections();\n    }\n  }\n\n  handleExcuseLessonLateness = (lessonCardIds) => {\n    const { onExcuseStudentLateness } = this.props;\n    if (lessonCardIds && lessonCardIds.length > 0) {\n      this.getMappableLessons().forEach(lesson => {\n        if (lessonCardIds.includes(lesson.id)) {\n          const payload = {\n            student_lesson_id: lesson.id,\n            was_excused: !lesson.lateness_excused,\n          };\n          onExcuseStudentLateness(payload);\n        }\n      });\n      // Deselect all checks and lessons\n      this.resetLessonSelections();\n    }\n  }\n\n  render() {\n    const {\n      currentView,\n      subjectFilters,\n      scoreStatusFilters,\n      flagFilters,\n      dueDateFilters,\n    } = this.state;\n\n    const {\n      activeShowPage,\n    } = this.props;\n    return (\n      <React.Fragment>\n        {this.confirmationModal()}\n        <Choose>\n          <When condition={activeShowPage === \"AnswerSheet\"}>\n            <LessonDetailAnswerSheet\n              onCloseDetailModal={this.onCloseDetailModal}\n              user={this.props.user}\n              lesson={this.props.activeLesson}\n              onOpenModal={this.onOpenModal}\n              onAddCheckedLesson={this.onAddCheckedLesson}\n              onCloseDropdown={this.onCloseDropdown}\n              resetLessonSelections={this.resetLessonSelections}\n              handleMarkAllFlagsReviewed={this.handleMarkAllFlagsReviewed}\n              lessonIdsToUnFlag={this.state.lessonIdsToUnFlag}\n              handleExcuseLessonLateness={this.handleExcuseLessonLateness}\n            />\n          </When>\n          <When condition={activeShowPage === \"ReadWorkBook\"}>\n            <ReadWorkBook\n              onCloseDetailModal={this.onCloseDetailModal}\n              user={this.props.user}\n              lesson={this.props.activeLesson}\n              onOpenModal={this.onOpenModal}\n              onAddCheckedLesson={this.onAddCheckedLesson}\n              onCloseDropdown={this.onCloseDropdown}\n              resetLessonSelections={this.resetLessonSelections}\n              handleMarkAllFlagsReviewed={this.handleMarkAllFlagsReviewed}\n              handleExcuseLessonLateness={this.handleExcuseLessonLateness}\n            />\n          </When>\n          <Otherwise>\n            <FilterSection\n              currentView={currentView}\n              onChangeView={this.onChangeView}\n              onClearFilters={this.onClearFilters}\n              onSetFilteredState={this.onSetFilteredState}\n              onUnsetFilteredState={this.onUnsetFilteredState}\n              onSetSort={this.onSetSort}\n              subjectFilters={subjectFilters}\n              scoreStatusFilters={scoreStatusFilters}\n              flagFilters={flagFilters}\n              dueDateFilters={dueDateFilters}\n              handleFilterClick={this.handleFilterClick}\n              onSetUnitFilter={this.onSetUnitFilter}\n              filterDueDate={this.filterDueDate}\n            />\n            {this.renderCurrentView()}\n            <AssignDatesModal\n              open={this.state.modalOpen}\n              // lessons={this.props.user.lessons}\n              lessons={this.props.lessonList}\n              onCloseDatesModal={this.onCloseModal}\n              onAddUpdatedLessons={this.onAddUpdatedLessons}\n              onAssignLesson={this.onAssignLesson.bind(this)}\n            />\n            <a\n              href=\"#\"\n              onClick={this.onOpenModal}\n              className=\"waves-effect waves-teal btn add-btn modal-trigger\"\n            >\n              <i className=\"material-icons\">add</i>Assign Lesson\n            </a>\n          </Otherwise>\n        </Choose>\n      </React.Fragment>\n    );\n  }\n}\n\nDetailLessonList.propTypes = {\n  user: PropTypes.object.isRequired,\n  activeLesson: PropTypes.object,\n  openAnswerSheetStatus: PropTypes.bool.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispathGetLessonList: bindActionCreators(getLessonList, dispatch),\n  dispathGetStudentLessonList: bindActionCreators(getStudentLessonList, dispatch),\n  dispathCheckLesson: bindActionCreators(checkLesson, dispatch),\n  dispatchCheckAllLesson: bindActionCreators(checkAllLessons, dispatch),\n  dispatchUnCheckAllLesson: bindActionCreators(unCheckAllLessons, dispatch),\n  dispatchAddCheckedLesson: bindActionCreators(addCheckedLesson, dispatch),\n  dispatchRemoveCheckedLesson: bindActionCreators(removeCheckedLesson, dispatch),\n  dispatchAssignLessonToStudent: bindActionCreators(assignLessonToStudent, dispatch),\n  dispatchAddAllLessons: bindActionCreators(addAllLessons, dispatch),\n  dispatchRemoveAllLessons: bindActionCreators(removeAllLessons, dispatch),\n  onSetOpenActivePage: bindActionCreators(setOpenActivePage, dispatch),\n  onSetIsVisibleTopBar: bindActionCreators(setIsVisibleTopBar, dispatch),\n  onExcuseStudentLateness: bindActionCreators(excuseStudentLateness, dispatch),\n  dispatchFilterLessons: bindActionCreators(filterLessons, dispatch),\n  onFlagStudentLessonProblem: bindActionCreators(flagStudentLessonProblem, dispatch),\n});\n\nconst mapStateToProps = createStructuredSelector({\n  lessonList: makeSelectGetLessonList(),\n  studentLess: makeSelectGetStudentLessonList(),\n  checkedLessons: makeSelectCheckedLessons(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeLesson: makeSelectActiveLesson(),\n  activeShowPage: makeSelectOpenActivePage(),\n  subjects: makeSelectSubjects(),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailLessonList);\n","export default [\n  {\n    label: \"Page Number\",\n    value: \"passageAscending\",\n  },\n  {\n    label: \"Status\",\n    value: \"statusAscending\",\n  },\n  {\n    label: \"Assignment Date\",\n    value: \"availableDateAscending\",\n  },\n  {\n    label: \"Due Date\",\n    value: \"dueDateDescending\",\n  },\n  {\n    label: \"Score\",\n    value: \"scoreAscending\",\n  },\n];\n","export function mergeArrays(array1, array2) {\n  const result_array = [];\n  const arr = array1.concat(array2);\n  let len = arr.length;\n  const assoc = {};\n\n  while (len--) {\n    const item = arr[len];\n\n    if (!assoc[item]) {\n      result_array.unshift(item);\n      assoc[item] = true;\n    }\n  }\n\n  return result_array;\n}\n","export default [\n  {\n    label: \"Page Number\",\n    value: \"passageAscending\",\n  },\n  {\n    label: \"Status\",\n    value: \"statusAscending\",\n  },\n  {\n    label: \"Time Est\",\n    value: \"timeEstimateDescending\",\n  },\n  {\n    label: \"Type\",\n    value: \"lessonTypeAscending\",\n  },\n  {\n    label: \"Flag Count\",\n    value: \"alertsDescending\",\n  },\n  {\n    label: \"Subject\",\n    value: \"subjectAscending\",\n  },\n  {\n    label: \"Lesson Name\",\n    value: \"lessonNameAscending\",\n  },\n];\n","export default [\n  {\n    label: '12:00 am',\n    value: \"12:00 am\",\n  },\n  {\n    label: '1:00 am',\n    value: \"1:00 am\",\n  },\n  {\n    label: '2:00 am',\n    value: \"2:00 am\",\n  },\n  {\n    label: '3:00 am',\n    value: \"3:00 am\",\n  },\n  {\n    label: '4:00 am',\n    value: \"4:00 am\",\n  },\n  {\n    label: '5:00 am',\n    value: \"5:00 am\",\n  },\n  {\n    label: '6:00 am',\n    value: \"6:00 am\",\n  },\n  {\n    label: '7:00 am',\n    value: \"7:00 am\",\n  },\n  {\n    label: '8:00 am',\n    value: \"8:00 am\",\n  },\n  {\n    label: '9:00 am',\n    value: \"9:00 am\",\n  },\n  {\n    label: '10:00 am',\n    value: \"10:00 am\",\n  },\n  {\n    label: '11:00 am',\n    value: \"11:00 am\",\n  },\n  {\n    label: '12:00 pm',\n    value: \"12:00 pm\",\n  },\n  {\n    label: '1:00 pm',\n    value: \"1:00 pm\",\n  },\n  {\n    label: '2:00 pm',\n    value: \"2:00 pm\",\n  },\n  {\n    label: '3:00 pm',\n    value: \"3:00 pm\",\n  },\n  {\n    label: '4:00 pm',\n    value: \"4:00 pm\",\n  },\n  {\n    label: '5:00 pm',\n    value: \"5:00 pm\",\n  },\n  {\n    label: '6:00 pm',\n    value: \"6:00 pm\",\n  },\n  {\n    label: '7:00 pm',\n    value: \"7:00 pm\",\n  },\n  {\n    label: '8:00 pm',\n    value: \"8:00 pm\",\n  },\n  {\n    label: '9:00 pm',\n    value: \"9:00 pm\",\n  },\n  {\n    label: '10:00 pm',\n    value: \"10:00 pm\",\n  },\n  {\n    label: '11:00 pm',\n    value: \"11:00 pm\",\n  },\n];\n","export default [\n  {\n    label: \"Any\",\n    value: \"\",\n  },\n  {\n    label: \"Reading Unit #1\",\n    value: \"Reading Unit #1\",\n  },\n  {\n    label: \"Reading Unit #2\",\n    value: \"Reading Unit #2\",\n  },\n  {\n    label: \"Reading Unit #3\",\n    value: \"Reading Unit #3\",\n  },\n  {\n    label: \"Math Unit #1\",\n    value: \"Math Unit #1\",\n  },\n  {\n    label: \"Math Unit #2\",\n    value: \"Math Unit #2\",\n  },\n  {\n    label: \"Math Unit #3\",\n    value: \"Math Unit #3\",\n  },\n  {\n    label: \"Writing Unit #1\",\n    value: \"Writing Unit #1\",\n  },\n  {\n    label: \"Writing Unit #2\",\n    value: \"Writing Unit #2\",\n  },\n  {\n    label: \"Writing Unit #3\",\n    value: \"Writing Unit #3\",\n  },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst areaColorMap = {\n  maroon: '#ce237a',\n  blue: '#1aa3ef',\n  purple: '#752189',\n  green: '#3a8745',\n  orange: '#e28100',\n};\n\nconst data = (percentage, color) => ({\n  datasets: [{\n    data: [100, 100-percentage],\n    backgroundColor: [\n      areaColorMap[color],\n      'rgb(234, 234, 234)',\n    ],\n  }],\n})\n\n  // TODO: Implement doughnut charts\n  const CourseProgress = ({ state: { startDate, testDate, progress, improvement, lessons, instruction, practiceTests }, active }) => (\n  <div className=\"col s12 l7 card-width-747\">\n    <div className=\"card-main card card-chart\">\n      <div className=\"card-content\">\n        <h2>Course Progress</h2>\n        <div className=\"progress-block\">\n          <div className=\"progress-legend\">\n            <Choose>\n              <When condition={active}>\n                <div className=\"legend-block\">\n                  <span className=\"small-text\">Start Date</span>\n                  <time dateTime=\"2018-06-13\" className=\"large-text\">{startDate}</time>\n                </div>\n                <div className=\"legend-block\">\n                  <span className=\"small-text\">Test Date</span>\n                  <time dateTime=\"2018-10-06\" className=\"large-text\">Oct SAT ({testDate})</time>\n                </div>\n              </When>\n              <Otherwise>\n                <span className=\"text-frame\">Once the course begins, check here to be sure the student is on track.</span>\n              </Otherwise>\n            </Choose>\n          </div>\n          <div className=\"progress\">\n            <div className=\"determinate\" style={{ width: active ? `${progress}%` : '0%'}}>\n                {active && <span className=\"progress-label\">{progress}%</span>}\n              </div>\n          </div>\n        </div>\n        <div className=\"charts-container\">\n          <div className=\"row mb-0\">\n            <div className=\"col\">\n              <div className=\"chart-block\">\n              <Choose>\n                <When condition={active}>\n                <Doughnut\n                  data={() => data(improvement, 'maroon')}\n                  width={156}\n                  height={156}\n                  options={{\n                    cutoutPercentage: 75,\n                  }}\n                />\n                </When>\n                <Otherwise>\n                <div className=\"js-donut-chart js-donut-middle\" data-stroke-width=\"20\" data-source='./inc/score-data-improvement.json'></div>\n                </Otherwise>\n              </Choose>\n                <div className=\"chart-text\">\n                  <span className=\"title\">Improvement</span>\n                  <Choose>\n                    <When condition={active}>\n                      <span className=\"value\">{improvement}%</span>\n                      <span className=\"description\">vs target score</span>\n                    </When>\n                    <Otherwise>\n                      <span className=\"inactive-text\">None Yet</span>\n                    </Otherwise>\n                  </Choose>\n\n                </div>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"chart-block\">\n              <Choose>\n                <When condition={active}>\n                <Doughnut\n                  data={() => data(lessons, 'purple')}\n                  width={156}\n                  height={156}\n                  options={{\n                    cutoutPercentage: 75,\n                  }}\n                />\n                </When>\n                <Otherwise>\n                <div className=\"js-donut-chart js-donut-middle\" data-stroke-width=\"20\" data-source='./inc/score-data-improvement.json'></div>\n                </Otherwise>\n              </Choose>\n                 <div className=\"chart-text\">\n                  <span className=\"title\">Lessons</span>\n                  <Choose>\n                    <When condition={active}>\n                      <span className=\"value\">{lessons}%</span>\n                      <span className=\"description\">vs scheduled lessons</span>\n                    </When>\n                    <Otherwise>\n                      <span className=\"inactive-text\">None Scheduled</span>\n                    </Otherwise>\n                  </Choose>\n                </div>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"chart-block\">\n              <Choose>\n                <When condition={active}>\n                <Doughnut\n                  data={() => data(instruction, 'orange')}\n                  width={156}\n                  height={156}\n                  options={{\n                    cutoutPercentage: 75,\n                  }}\n                />\n                </When>\n                <Otherwise>\n                <div className=\"js-donut-chart js-donut-middle\" data-stroke-width=\"20\" data-source='./inc/score-data-improvement.json'></div>\n                </Otherwise>\n              </Choose>\n                <div className=\"chart-text\">\n                  <span className=\"title\">Instruction</span>\n                  <Choose>\n                    <When condition={active}>\n                      <span className=\"value\">{instruction}%</span>\n                      <span className=\"description\">vs scheduled instruction</span>\n                    </When>\n                    <Otherwise>\n                      <span className=\"inactive-text\">None Scheduled</span>\n                    </Otherwise>\n                  </Choose>\n                </div>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"chart-block\">\n              <Choose>\n                <When condition={active}>\n                  <Doughnut\n                    data={() => data(practiceTests, 'blue')}\n                    width={156}\n                    height={156}\n                    options={{\n                      cutoutPercentage: 75,\n                    }}\n                  />\n                </When>\n                <Otherwise>\n                  <div className=\"js-donut-chart js-donut-middle\" data-stroke-width=\"20\" data-source='./inc/score-data-improvement.json'></div>\n                </Otherwise>\n              </Choose>\n                 <div className=\"chart-text\">\n                  <span className=\"title\">Practice Tests</span>\n                  <Choose>\n                    <When condition={active}>\n                      <span className=\"value\">{practiceTests}%</span>\n                      <span className=\"description\">vs scheduled tests</span>\n                    </When>\n                    <Otherwise>\n                      <span className=\"inactive-text\">None Scheduled</span>\n                    </Otherwise>\n                  </Choose>\n                </div>\n              </div>\n            </div>\n          </div>\n          <If condition={active}>\n            <div className=\"chart-legend\">\n              <div className=\"row mb-0\">\n                <div className=\"col legend-frame\">\n                  <span className=\"box complete\"></span>\n                  <span className=\"text\">Complete</span>\n                </div>\n                <div className=\"col legend-frame\">\n                  <span className=\"box behind\"></span>\n                  <span className=\"text\">Behind Schedule</span>\n                </div>\n              </div>\n            </div>\n          </If>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nCourseProgress.propTypes = {\n  state: PropTypes.object.isRequired,\n  active: PropTypes.bool.isRequired,\n};\n\nexport default CourseProgress;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst OverdueWork = ({ state: { lessons, worksheets, quizzes, practiceTests }, active }) => (\n  <div className=\"col s12 l5 card-width-366\">\n    <div className=\"card-main card card-chart\">\n      <div className=\"card-content\">\n        <h2>Overdue Work</h2>\n        <ul className=\"points-list-large\">\n          <li className={active ? 'style-red-darken' : ''}>\n            <span className=\"badge-circle\">{lessons} <span className=\"badge-text\">Lessons</span></span>\n          </li>\n          <li className={active ? 'style-pink-darken' : ''}>\n            <span className=\"badge-circle\" style={{ paddingTop: '0' }}>{worksheets} <span className=\"badge-text\">Worksheets</span></span>\n          </li>\n          <li>\n            <span className=\"badge-circle\">{quizzes} <span className=\"badge-text\">Quizzes</span></span>\n          </li>\n          <li className={active ? 'style-blue-light' : ''}>\n            <span className=\"badge-circle\" style={{ paddingTop: '0' }}>{practiceTests} <span className=\"badge-text\">Practice Tests</span></span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nOverdueWork.propTypes = {\n  state: PropTypes.object.isRequired,\n  active: PropTypes.bool.isRequired,\n};\n\nexport default OverdueWork;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getIndicatorStatus, data } from './utils';\nimport { Doughnut } from 'react-chartjs-2';\n\n// TODO: Figure out how the client wants this data visualized and what these bar graphs actually mean\nclass StrengthsAndWeaknesses extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openSection: 'reading',\n    };\n  }\n\n  onSetOpenSection = (event, openSection) => {\n    event.preventDefault();\n    this.setState({ openSection })\n  }\n\n  render() {\n    const { openSection } = this.state;\n    // eslint-disable-next-line no-unused-vars\n    const { state: { reading, writing, math }, active } = this.props;\n    return (\n      <div className=\"card-block\">\n      <h2 className=\"h1\">Strengths &amp; Weaknesses</h2>\n      <div className=\"card-main-full card\">\n        <div className=\"tabs-container\">\n        <Choose>\n          <When condition={active}>\n            <div className=\"card-panel light-blue accent-2 white-text\">\n              <ul className=\"tabs\" >\n                <li className=\"tab col s4 l3\" style={{ margin: '0', paddingRight: '20px', paddingLeft: '20px', height: '24px'}}>\n                  <a\n                    href=\"#\"\n                    style={{fontSize: '17px'}}\n                    className={openSection === 'reading' ? 'active' : ''}\n                    onClick={(event) => this.onSetOpenSection(event, 'reading')}\n                  >\n                    Reading\n                  </a>\n                </li>\n                <li className=\"tab col s4 l3\" style={{ margin: '0', paddingRight: '20px', paddingLeft: '20px', height: '24px'}}>\n                  <a\n                    href=\"#\"\n                    style={{fontSize: '17px'}}\n                    className={openSection === 'writing' ? 'active' : ''}\n                    onClick={(event) => this.onSetOpenSection(event, 'writing')}\n                  >\n                    Writing\n                  </a>\n                </li>\n                <li className=\"tab col s4 l3\" style={{ margin: '0', paddingRight: '20px', paddingLeft: '20px', height: '24px'}}>\n                  <a\n                    href=\"#\"\n                    style={{fontSize: '17px'}}\n                    className={openSection === 'math' ? 'active' : ''}\n                    onClick={(event) => this.onSetOpenSection(event, 'math')}\n                  >\n                    Math\n                  </a>\n                </li>\n                <li className=\"indicator\" style={getIndicatorStatus(openSection)}></li>\n              </ul>\n            </div>\n            <div className=\"card-content tabs-content\">\n                <div id=\"tabs_tab01\" className={openSection === 'reading' ? '' : 'tab-content'}>\n                  <div className=\"row mb-0\">\n                    <div className=\"col s12 l5 xl4 chart-column\">\n                      <div className=\"chart-block chart-block-large\">\n                      <Doughnut\n                        data={() => data(reading.correctAnswers, reading.totalAnswers )}\n                        width={250}\n                        height={250}\n                        options={{\n                          cutoutPercentage: 80,\n                        }} />\n                        <div className=\"chart-text\">\n                          <span className=\"title\">Reading</span>\n                          <span className=\"value\">{reading.correctAnswers}</span>\n                          <span className=\"description\">out of <b>{reading.totalAnswers}</b></span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"col s12 l7 xl8\">\n                      <ul className=\"collapsible expandable collapsible-explain\">\n                        <li>\n                          <div className=\"collapsible-header\"><b>Explain This Graph</b></div>\n                          <div className=\"collapsible-body\">\n                            <div className=\"row mb-0\">\n                              <div className=\"col l6\">\n                                <ul className=\"legend-list\">\n                                  <li>\n                                    <div className=\"legend-frame\">\n                                      <span className=\"box red darken-2\"></span>\n                                      <strong className=\"text h3\">Focus Here!</strong>\n                                    </div>\n                                    <p>Most people with your score would get these correct, but you got them wrong. Work on these and you can pick up some easy points!</p>\n                                  </li>\n                                  <li>\n                                    <div className=\"legend-frame\">\n                                      <span className=\"box red lighten-5\"></span>\n                                      <strong className=\"text h3\">Tough Gains</strong>\n                                    </div>\n                                    <p>You missed these, but so did most others with a similar score. You’ll likely ﬁnd easier gains elsewhere.</p>\n                                  </li>\n                                </ul>\n                              </div>\n                              <div className=\"col l6\">\n                                <ul className=\"legend-list\">\n                                  <li>\n                                    <div className=\"legend-frame\">\n                                      <span className=\"box light-green darken-2\"></span>\n                                      <strong className=\"text h3\">Well Done!</strong>\n                                    </div>\n                                    <p>You’re overachiving in this category compared to other with your score. Keep up the good work!</p>\n                                  </li>\n                                  <li>\n                                    <div className=\"legend-frame\">\n                                      <span className=\"box  light-green lighten-4\"></span>\n                                      <strong className=\"text h3\">Piece o’ Cake</strong>\n                                    </div>\n                                    <p>You answered these correctly like others with a similar score.</p>\n                                  </li>\n                                </ul>\n                              </div>\n                            </div>\n                          </div>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                  <div className=\"graphs-section\">\n                    <div className=\"graphs-block\">\n                      <div className=\"graph-row graph-row-title\">\n                        <div className=\"graph-col text-column\">\n                          <h3 className=\"graph-title\">Passage Type</h3>\n                        </div>\n                        <div className=\"graph-col graph-container\">\n                          <div className=\"graph-linear\">\n                            <div className=\"part-left\">\n                              <div className=\"part-green-light\" style={{ width: '100%' }}>\n                                <div className=\"part-red\" style={{ width: '80%' }}></div>\n                              </div>\n                            </div>\n                            <div className=\"part-right\">\n                              <div className=\"part-red-light\" style={{ width: '80%'}}>\n                                <div className=\"part-green\" style={{ width: '0' }}></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"graph-col graph-info\">\n                          <span className=\"text-large\">12</span>\n                          <span className=\"text-small\">out of</span>\n                          <span className=\"text-large\">18</span>\n                        </div>\n                      </div>\n                      <div className=\"graph-row\">\n                        <div className=\"graph-col text-column\">\n                          <strong className=\"graph-subtitle\">Science</strong>\n                        </div>\n                        <div className=\"graph-col graph-container\">\n                          <div className=\"graph-linear\">\n                            <div className=\"part-left\">\n                              <div className=\"part-green-light\" style={{ width: '85%' }}>\n                                <div className=\"part-red\" style={{ width: '0' }}></div>\n                              </div>\n                            </div>\n                            <div className=\"part-right\">\n                              <div className=\"part-red-light\" style={{ width: '100%' }}>\n                                <div className=\"part-green\" style={{ width: '70%' }}></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"graph-col graph-info\">\n                          <span className=\"text-large\">12</span>\n                          <span className=\"text-small\">out of</span>\n                          <span className=\"text-large\">18</span>\n                        </div>\n                      </div>\n                      <div className=\"graph-row\">\n                        <div className=\"graph-col text-column\">\n                          <strong className=\"graph-subtitle\">Informational Graphic Passage</strong>\n                        </div>\n                        <div className=\"graph-col graph-container\">\n                          <div className=\"graph-linear\">\n                            <div className=\"part-left\">\n                              <div className=\"part-green-light\" style={{ width: '75%' }}>\n                                <div className=\"part-red\" style={{ width: '70%' }}></div>\n                              </div>\n                            </div>\n                            <div className=\"part-right\">\n                              <div className=\"part-red-light\" style={{ width: '70%' }}>\n                                <div className=\"part-green\" style={{ width: '0' }}></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"graph-col graph-info\">\n                          <span className=\"text-large\">12</span>\n                          <span className=\"text-small\">out of</span>\n                          <span className=\"text-large\">18</span>\n                        </div>\n                      </div>\n                      <div className=\"graph-row\">\n                        <div className=\"graph-col text-column\">\n                          <strong className=\"graph-subtitle\">History/Social Science</strong>\n                        </div>\n                        <div className=\"graph-col graph-container\">\n                          <div className=\"graph-linear\">\n                            <div className=\"part-left\">\n                              <div className=\"part-green-light\" style={{ width: '85%' }}>\n                                <div className=\"part-red\" style={{ width: '5%' }}></div>\n                              </div>\n                            </div>\n                            <div className=\"part-right\">\n                              <div className=\"part-red-light\" style={{ width: '15%' }}>\n                                <div className=\"part-green\" style={{ width: '0' }}></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"graph-col graph-info\">\n                          <span className=\"text-large\">12</span>\n                          <span className=\"text-small\">out of</span>\n                          <span className=\"text-large\">18</span>\n                        </div>\n                      </div>\n                      <div className=\"graph-row\">\n                        <div className=\"graph-col text-column\">\n                          <strong className=\"graph-subtitle\">US &amp; World Literature</strong>\n                        </div>\n                        <div className=\"graph-col graph-container\">\n                          <div className=\"graph-linear\">\n                            <div className=\"part-left\">\n                              <div className=\"part-green-light\" style={{ width: '45%' }}>\n                                <div className=\"part-red\" style={{ width: '85%' }}></div>\n                              </div>\n                            </div>\n                            <div className=\"part-right\">\n                              <div className=\"part-red-light\" style={{ width: '0' }}>\n                                <div className=\"part-green\" style={{ width: '0' }}></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"graph-col graph-info\">\n                          <span className=\"text-large\">12</span>\n                          <span className=\"text-small\">out of</span>\n                          <span className=\"text-large\">18</span>\n                        </div>\n                      </div>\n                      <div className=\"graph-row\">\n                        <div className=\"graph-col text-column\">\n                          <strong className=\"graph-subtitle\">Paired Passages</strong>\n                        </div>\n                        <div className=\"graph-col graph-container\">\n                          <div className=\"graph-linear\">\n                            <div className=\"part-left\">\n                              <div className=\"part-green-light\" style={{ width: '35%' }}>\n                                <div className=\"part-red\" style={{ width: '0' }}></div>\n                              </div>\n                            </div>\n                            <div className=\"part-right\">\n                              <div className=\"part-red-light\" style={{ width: '60%' }}>\n                                <div className=\"part-green\" style={{ width: '10%' }}></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"graph-col graph-info\">\n                          <span className=\"text-large\">12</span>\n                          <span className=\"text-small\">out of</span>\n                          <span className=\"text-large\">18</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"graphs-block\">\n                      <div className=\"graph-row graph-row-title\">\n                        <div className=\"graph-col text-column\">\n                          <h3 className=\"graph-title\">Question Type</h3>\n                        </div>\n                        <div className=\"graph-col graph-container\">\n                          <div className=\"graph-linear\">\n                            <div className=\"part-left\">\n                              <div className=\"part-green-light\" style={{ width: '85%' }}>\n                                <div className=\"part-red\" style={{ width: '12%' }}></div>\n                              </div>\n                            </div>\n                            <div className=\"part-right\">\n                              <div className=\"part-red-light\" style={{ width: '95%' }}>\n                                <div className=\"part-green\" style={{ width: '0' }}></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"graph-col graph-info\">\n                          <span className=\"text-large\">12</span>\n                          <span className=\"text-small\">out of</span>\n                          <span className=\"text-large\">18</span>\n                        </div>\n                      </div>\n                      {/* <!-- block with inners rows --> */}\n                      <div className=\"graph-row-block\">\n                        <div className=\"graph-row graph-row-subtitle\">\n                          <div className=\"graph-col text-column\">\n                            <strong className=\"graph-subtitle\">Citing Textual Evidence</strong>\n                          </div>\n                          <div className=\"graph-col graph-container\">\n                            <div className=\"graph-linear\">\n                              <div className=\"part-left\">\n                                <div className=\"part-green-light\" style={{ width: '55%' }}>\n                                  <div className=\"part-red\" style={{ width: '0' }}></div>\n                                </div>\n                              </div>\n                              <div className=\"part-right\">\n                                <div className=\"part-red-light\" style={{ width: '70%' }}>\n                                  <div className=\"part-green\" style={{ width: '12%' }}></div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"graph-col graph-info\">\n                            <span className=\"text-large\">12</span>\n                            <span className=\"text-small\">out of</span>\n                            <span className=\"text-large\">18</span>\n                          </div>\n                        </div>\n                        <div className=\"graph-row graph-row-inner\">\n                          <div className=\"graph-col text-column\">\n                            <strong className=\"graph-subtitle\">Cite Text as Evidence</strong>\n                          </div>\n                          <div className=\"graph-col graph-container\">\n                            <div className=\"graph-linear\">\n                              <div className=\"part-left\">\n                                <div className=\"part-green-light\" style={{ width: '20%' }}>\n                                  <div className=\"part-red\" style={{ width: '85%' }}></div>\n                                </div>\n                              </div>\n                              <div className=\"part-right\">\n                                <div className=\"part-red-light\" style={{ width: '70%' }}>\n                                  <div className=\"part-green\" style={{ width: '0' }}></div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"graph-col graph-info\">\n                            <span className=\"text-large\">12</span>\n                            <span className=\"text-small\">out of</span>\n                            <span className=\"text-large\">18</span>\n                          </div>\n                        </div>\n                        <div className=\"graph-row graph-row-inner\">\n                          <div className=\"graph-col text-column\">\n                            <strong className=\"graph-subtitle\">Author’s Intention and Method</strong>\n                          </div>\n                          <div className=\"graph-col graph-container\">\n                            <div className=\"graph-linear\">\n                              <div className=\"part-left\">\n                                <div className=\"part-green-light\" style={{ width: '55%' }}>\n                                  <div className=\"part-red\" style={{ width: '7%' }}></div>\n                                </div>\n                              </div>\n                              <div className=\"part-right\">\n                                <div className=\"part-red-light\" style={{ width: '15%' }}>\n                                  <div className=\"part-green\" style={{ width: '0' }}></div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"graph-col graph-info\">\n                            <span className=\"text-large\">12</span>\n                            <span className=\"text-small\">out of</span>\n                            <span className=\"text-large\">18</span>\n                          </div>\n                        </div>\n                        <div className=\"graph-row graph-row-inner\">\n                          <div className=\"graph-col text-column\">\n                            <strong className=\"graph-subtitle\">Support / Refute a Claim</strong>\n                          </div>\n                          <div className=\"graph-col graph-container\">\n                            <div className=\"graph-linear\">\n                              <div className=\"part-left\">\n                                <div className=\"part-green-light\" style={{ width: '47%' }}>\n                                  <div className=\"part-red\" style={{ width: '12%' }}></div>\n                                </div>\n                              </div>\n                              <div className=\"part-right\">\n                                <div className=\"part-red-light\" style={{ width: '0' }}>\n                                  <div className=\"part-green\" style={{ width: '0' }}></div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"graph-col graph-info\">\n                            <span className=\"text-large\">12</span>\n                            <span className=\"text-small\">out of</span>\n                            <span className=\"text-large\">18</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"graph-row-block\">\n                        <div className=\"graph-row graph-row-subtitle\">\n                          <div className=\"graph-col text-column\">\n                            <strong className=\"graph-subtitle\">Reading Closely</strong>\n                          </div>\n                          <div className=\"graph-col graph-container\">\n                            <div className=\"graph-linear\">\n                              <div className=\"part-left\">\n                                <div className=\"part-green-light\" style={{ width: '12%' }}>\n                                  <div className=\"part-red\" style={{ width: '0' }}></div>\n                                </div>\n                              </div>\n                              <div className=\"part-right\">\n                                <div className=\"part-red-light\" style={{ width: '55%' }}>\n                                  <div className=\"part-green\" style={{ width: '10%' }}></div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"graph-col graph-info\">\n                            <span className=\"text-large\">12</span>\n                            <span className=\"text-small\">out of</span>\n                            <span className=\"text-large\">18</span>\n                          </div>\n                        </div>\n                        <div className=\"graph-row graph-row-inner\">\n                          <div className=\"graph-col text-column\">\n                            <strong className=\"graph-subtitle\">Detail Question</strong>\n                          </div>\n                          <div className=\"graph-col graph-container\">\n                            <div className=\"graph-linear\">\n                              <div className=\"part-left\">\n                                <div className=\"part-green-light\" style={{ width: '100%' }}>\n                                  <div className=\"part-red\" style={{ width: '8%' }}></div>\n                                </div>\n                              </div>\n                              <div className=\"part-right\">\n                                <div className=\"part-red-light\" style={{ width: '95%' }}>\n                                  <div className=\"part-green\" style={{ width: '0' }}></div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"graph-col graph-info\">\n                            <span className=\"text-large\">12</span>\n                            <span className=\"text-small\">out of</span>\n                            <span className=\"text-large\">18</span>\n                          </div>\n                        </div>\n                        <div className=\"graph-row graph-row-inner\">\n                          <div className=\"graph-col text-column\">\n                            <strong className=\"graph-subtitle\">Support / Refute a Claim</strong>\n                          </div>\n                          <div className=\"graph-col graph-container\">\n                            <div className=\"graph-linear\">\n                              <div className=\"part-left\">\n                                <div className=\"part-green-light\" style={{ width: '75%' }}>\n                                  <div className=\"part-red\" style={{ width: '0' }}></div>\n                                </div>\n                              </div>\n                              <div className=\"part-right\">\n                                <div className=\"part-red-light\" style={{ width: '100%' }}>\n                                  <div className=\"part-green\" style={{ width: '70%' }}></div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"graph-col graph-info\">\n                            <span className=\"text-large\">12</span>\n                            <span className=\"text-small\">out of</span>\n                            <span className=\"text-large\">18</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div id=\"tabs_tab02\" className={openSection === 'writing' ? '' : 'tab-content'}>\n                  <h3>Tab 02 content</h3>\n                  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolore quasi inventore expedita maxime, vero magnam architecto eius laudantium corrupti! Ut fuga sit corrupti, vitae cum temporibus sed dolore labore! Fugit.</p>\n                  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Maxime dolorem nihil minus, quasi, dicta cupiditate aut magni ea veniam natus provident eveniet tempore iure minima placeat distinctio ducimus quo cum.</p>\n                </div>\n                <div id=\"tabs_tab03\" className={openSection === 'math' ? '' : 'tab-content'}>\n                  <h3>Tab 03 content</h3>\n                  <p>Expedita quibusdam sed, temporibus quasi dolorem iure non inventore quaerat sit mollitia dolores minima illo perspiciatis omnis delectus, recusandae quos, incidunt ratione.</p>\n                  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quisquam, enim? Itaque reprehenderit, id eos quasi optio est. Soluta alias, minima consequuntur obcaecati odio maiores, molestiae, vel ipsum modi delectus enim!</p>\n                </div>\n              </div>\n          </When>\n          <Otherwise>\n            <div className=\"card-panel white-text\" style={{ backgroundColor: '#b2b2b2' }}>\n              <h2>Areas for Improvement</h2>\n            </div>\n            <div className=\"card-content\">\n              <div className=\"card-note-box\">\n                <span className=\"title\">Nothing to see here yet.</span>\n                <span className=\"text-frame\">As the this student takes practice tests and completes course work, we’ll track the student’s strengths and weaknesess. Check back here once the course begins.</span>\n              </div>\n            </div>\n          </Otherwise>\n        </Choose>\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nStrengthsAndWeaknesses.propTypes = {\n  state: PropTypes.object.isRequired,\n  active: PropTypes.bool.isRequired,\n}\n\nexport default StrengthsAndWeaknesses;\n","export const getIndicatorStatus = (activeSection) => {\n  switch (activeSection) {\n    case 'reading':\n      return {\n        left: '1.5%',\n        right: '92%',\n        height: '2px',\n      }\n    case 'writing':\n      return {\n        left: '11%',\n        right: '83%',\n        height: '2px',\n      }\n    case 'math':\n      return {\n        left: '20%',\n        right: '75%',\n        height: '2px',\n      }\n    default:\n      return null;\n  }\n}\n\nexport const data = (totalScore, totalPossible) => ({\n  datasets: [{\n    data: [totalPossible, totalPossible-totalScore],\n    backgroundColor: [\n      '#ce237a',\n      'rgb(234, 234, 234)',\n    ],\n  }],\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatTimeLoggedIn, formatVideoWatched } from './utils';\n\nconst SummaryCards = ({ state: { questionsAnswered, videoWatched, notesTaken, totalTimeLoggedIn, lastLogIn, loginTimeCode, onTimePercentage }, active }) => (\n  <div className=\"col s12 l5 card-width-366\">\n    <ul className=\"alerts-list\">\n      <li className=\"card card-alert\">\n        <span className={active ? 'icon-box purple darken-3' : 'icon-box'}><i className=\"icon-pencil2\"></i></span>\n        <div className={active ? 'alert-text purple-text text-darken-3' : 'alert-text'}>\n          <p><b>Questions Answered</b></p>\n          <div className=\"value\"><b className=\"text-large\">{active ? questionsAnswered : '0'}</b></div>\n        </div>\n      </li>\n      <li className=\"card card-alert alert-blue-dark\">\n        <span className={active ? 'icon-box cyan darken-2' : 'icon-box'}><i className=\"icon-videocam\"></i></span>\n        <div className={active ? 'alert-text cyan-text text-darken-2' : 'alert-text'}>\n          <p><b>Video Watched</b></p>\n          <div className=\"value\">\n            <Choose>\n              <When condition={active}>\n                {formatVideoWatched(videoWatched)}\n              </When>\n              <Otherwise>\n                <b className=\"text-large\">0</b>\n              </Otherwise>\n            </Choose>\n          </div>\n        </div>\n      </li>\n      <li className=\"card card-alert\">\n        <span className={active ? 'icon-box pink darken-2' : 'icon-box'}><i className=\"icon-note\"></i></span>\n        <div className={active ? 'alert-text pink-text text-darken-2' : 'alert-text'}>\n          <p><b>Notes Taken</b></p>\n          <div className=\"value\"><b className=\"text-large\">{active ? notesTaken : '0'}</b></div>\n        </div>\n      </li>\n      <li className=\"card card-alert\">\n        <span className={active ? 'icon-box green darken-3' : 'icon-box'}><i className=\"icon-clock\"></i></span>\n        <div className={active ? 'alert-text green-text text-darken-3' : 'alert-text'}>\n          <p><b>Total Time Logged In</b></p>\n          <div className=\"value\">\n            <Choose>\n              <When condition={active}>\n                {formatTimeLoggedIn(totalTimeLoggedIn)}\n              </When>\n              <Otherwise>\n                <b className=\"text-large\">0</b>\n              </Otherwise>\n            </Choose>\n          </div>\n        </div>\n      </li>\n      <li className=\"card card-alert\">\n        <span className={active ? 'icon-box orange darken-2' : 'icon-box'}><i className=\"icon-arrow-right\"></i></span>\n        <div className={active ? 'alert-text orange-text text-darken-2' : 'alert-text'}>\n          <p><b>Last Log In</b></p>\n          <div className=\"value\">\n            <Choose>\n              <When condition={active}>\n                <React.Fragment>\n                  <span className=\"text-large\">{lastLogIn}</span> <span className=\"text-small\">{loginTimeCode}</span>\n                </React.Fragment>\n              </When>\n              <Otherwise>\n                <span className=\"text-large\">none</span>\n              </Otherwise>\n            </Choose>\n          </div>\n        </div>\n      </li>\n      <li className=\"card card-alert\">\n        <span className={active ? 'icon-box red' : 'icon-box'}><i className=\"icon-bell\"></i></span>\n        <div className={active ? 'alert-text red-text' : 'alert-text'}>\n          <p><b>On-Time Percentage</b></p>\n          <div className=\"value\">\n            <Choose>\n              <When condition={active}>\n                <b className=\"text-large\">{onTimePercentage}%</b>\n              </When>\n              <Otherwise>\n                <b className=\"text-large\">not available</b>\n              </Otherwise>\n            </Choose>\n          </div>\n        </div>\n      </li>\n    </ul>\n  </div>\n);\n\nSummaryCards.propTypes = {\n  state: PropTypes.object.isRequired,\n  active: PropTypes.bool.isRequired,\n};\n\nexport default SummaryCards;\n","import React from 'react';\n\nexport const formatTimeLoggedIn = (totalMinutes) => {\n  const hours = Math.floor(totalMinutes / 60) === 0 ? 0 : Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60 === 0 ? 0 : totalMinutes % 60;\n  return (\n    <React.Fragment>\n      { hours !== 0 && (\n        <React.Fragment>\n          <b className=\"text-large\">{hours}</b>\n          <span className=\"text-small\">hrs </span>\n        </React.Fragment>\n      )}\n      { minutes !== 0 && (\n        <React.Fragment>\n          <b className=\"text-large\">{minutes}</b>\n          <span className=\"text-small\">min</span>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport const formatVideoWatched = (totalMinutes) => {\n  const hours = Math.floor(totalMinutes / 60) === 0 ? 0 : Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60 === 0 ? 0 : totalMinutes % 60;\n  return (\n    <React.Fragment>\n      { hours !== 0 && (\n        <React.Fragment>\n          <b className=\"text-large\">{hours}</b>\n          <span className=\"text-small\">hrs </span>\n        </React.Fragment>\n      )}\n      { minutes !== 0 && (\n        <React.Fragment>\n          <b className=\"text-large\">{minutes}</b>\n          <span className=\"text-small\">min</span>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Line } from 'react-chartjs-2';\n\nconst data = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'My First dataset',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: [65, 59, 80, 81, 56, 55, 40],\n    },\n  ],\n};\n\nconst getIndicatorStatus = (activeSection, active) => ({\n  left: activeSection === 'subjectScores' ? '50%' : '0',\n  right: activeSection === 'subjectScores' ? '0' : '50%',\n  backgroundColor: active ? '#00bbf7' : '#b2b2b2',\n})\n\n// TODO: Implement final line chart data implementation later\nclass TestScores extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openSection: 'compositeScore',\n    }\n  }\n\n  onSetOpenSection = (event, openSection) => {\n    event.preventDefault();\n    this.setState({ openSection })\n  }\n\n  render() {\n    const { openSection } = this.state;\n    const { state: { compositeScore, subjectScores }, active } = this.props;\n    return (\n      <div className=\"col s12 l7 card-width-747\">\n        <div className=\"card-main card card-chart\">\n          <div className=\"card-content\">\n            <h2>Test Scores</h2>\n            <div className=\"tabs-container tabs-charts-container\">\n              <If condition={!active}>\n                <div className=\"card-note-box\" style={{ display: 'block' }}>\n                  <span className=\"title\">Nothing to see here yet.</span>\n                  <span className=\"text-frame\">Once this student has taken multiple tests, you can track the progress here. </span>\n                </div>\n              </If>\n              <ul className=\"tabs\" style={{ filter: !active ? 'blur(3px)': \"\"}}>\n                <li className=\"tab col s6 l6\">\n                  <a\n                    href=\"#\"\n                    onClick={(event) => this.onSetOpenSection(event, 'compositeScore')}\n                    className={openSection === 'compositeScore' ? 'active' : ''}\n                  >\n                    Composite Score\n                  </a>\n                </li>\n                <li className=\"tab col s6 l6\">\n                  <a\n                    href=\"#\"\n                    onClick={(event) => this.onSetOpenSection(event, 'subjectScores')}\n                    className={openSection === 'subjectScores' ? 'active' : ''}\n                  >\n                    Subject Scores\n                  </a>\n                </li>\n                <li className=\"indicator\" style={getIndicatorStatus(openSection, active)}></li>\n              </ul>\n              <div id=\"scores_tab01\" className={openSection === 'compositeScore' ? '' : 'tab-content'} style={active ? {} : { filter: 'blur(3px)'}}>\n                <div className={active ? 'card-panel panel-scores light-blue accent-2 white-text' : 'card-panel panel-scores white-text'}>\n                  <ul className=\"panel-list\">\n                    <li className=\"panel-block\">\n                      <strong className=\"text-small\">Reading</strong>\n                      <If condition={active}>\n                        <strong className=\"text-large\">+{compositeScore.reading}</strong>\n                      </If>\n                    </li>\n                    <li className=\"panel-block\">\n                      <strong className=\"text-small\">Writing</strong>\n                      <If condition={active}>\n                        <strong className=\"text-large\">+{compositeScore.writing}</strong>\n                      </If>\n                    </li>\n                    <li className=\"panel-block\">\n                      <strong className=\"text-small\">Math</strong>\n                      <If condition={active}>\n                        <strong className=\"text-large\">+{compositeScore.math}</strong>\n                      </If>\n                    </li>\n                    <li className=\"panel-block\">\n                      <strong className=\"text-small\">Composite</strong>\n                      <If condition={active}>\n                        <strong className=\"text-large\">+{compositeScore.composite}</strong>\n                      </If>\n                    </li>\n                  </ul>\n                </div>\n                <div className=\"chart-line-container js-scrollable-chart\">\n                  <Line data={data} />\n                </div>\n              </div>\n              <div id=\"scores_tab02\" className={openSection === 'subjectScores' ? '' : 'tab-content'} style={active ? {} : { filter: 'blur(3px)'}}>\n                <div className={active ? 'card-panel panel-scores light-blue accent-2 white-text' : 'card-panel panel-scores white-text'}>\n                  <ul className=\"panel-list\">\n                    <li className=\"panel-block\">\n                      <strong className=\"text-small\">Reading</strong>\n                      <If condition={active}>\n                        <strong className=\"text-large\">+{subjectScores.reading}</strong>\n                      </If>\n                    </li>\n                    <li className=\"panel-block\">\n                      <strong className=\"text-small\">Writing</strong>\n                      <If condition={active}>\n                        <strong className=\"text-large\">+{subjectScores.writing}</strong>\n                      </If>\n                    </li>\n                    <li className=\"panel-block\">\n                      <strong className=\"text-small\">Math</strong>\n                      <If condition={active}>\n                        <strong className=\"text-large\">+{subjectScores.math}</strong>\n                      </If>\n                    </li>\n                    <li className=\"panel-block\">\n                      <strong className=\"text-small\">Composite</strong>\n                      <If condition={active}>\n                        <strong className=\"text-large\">+{subjectScores.composite}</strong>\n                      </If>\n                    </li>\n                  </ul>\n                </div>\n                <div className=\"chart-line-container js-scrollable-chart\">\n                  <Line data={data} />\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    )\n  }\n};\n\nTestScores.propTypes = {\n  state: PropTypes.object.isRequired,\n  active: PropTypes.bool.isRequired,\n};\n\nexport default TestScores;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CourseProgress from './components/CourseProgress';\nimport OverdueWork from './components/OverdueWork';\nimport SummaryCards from './components/SummaryCards';\nimport TestScores from './components/TestScores';\nimport StrengthsAndWeaknesses from './components/StrengthsAndWeaknesses';\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass DetailSummaryPage extends React.Component {\n  render() {\n    const { user: { active, courseProgress, overdueWork, summary, testScores, strengthsAndWeaknesses } } = this.props;\n    return (\n      <div className=\"content-section\">\n        <div className=\"container\">\n          <div className=\"cards-section\">\n            <div className=\"row d-flex justify-content-center mb-0\">\n              <CourseProgress active={active} state={courseProgress} />\n              <OverdueWork active={active} state={overdueWork} />\n            </div>\n            <div className=\"row d-flex justify-content-center mb-0\">\n              <SummaryCards active={active} state={summary} />\n              <TestScores active={active} state={testScores} />\n            </div>\n          </div>\n          <StrengthsAndWeaknesses active={active} state={strengthsAndWeaknesses} />\n        </div>\n      </div>\n    );\n  }\n}\n\nDetailSummaryPage.propTypes = {\n  user: PropTypes.object.isRequired,\n};\n\nexport default DetailSummaryPage;","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AnswerSheetNavBar = ({ activeSlide, onSetActiveSlide, getExistingSections }) => {\n  // Constants\n  const { reading, writing, mathCalc, mathNoCalc } = getExistingSections;\n\n  // UseEffects\n  useEffect(() => {\n    if (reading) return onSetActiveSlide('reading');\n    else if (writing) return onSetActiveSlide('writing');\n    else if (mathNoCalc) return onSetActiveSlide('math (no calc)');\n    else if (mathCalc) return onSetActiveSlide('math (calculator)');\n  }, [reading, writing, mathCalc, mathNoCalc]);\n\n  return (\n  // eslint-disable-next-line no-unused-expressions\n    <div className=\"card-panel light-blue accent-2 white-text\" style={{ display: 'block' }}>\n      <div className=\"container\">\n        <div className=\"row mb-0\">\n          <div className=\"nav-slick nav-tab\" style={{ fontSize: '15px', display: 'table', margin: '0 auto' }}>\n\n            {reading && <div className=\"tab slide col 3\" style={{ padding: '0px 70px' }}>\n              <a\n                className={activeSlide === 'reading' ? 'active' : ''}\n                onClick={() => onSetActiveSlide('reading')}\n                href=\"#\"\n              >\n            Reading\n              </a>\n            </div>}\n            {writing && <div className=\"tab slide col 3\" style={{ padding: '0px 70px' }}>\n              <a\n                className={activeSlide === 'writing' ? 'active' : ''}\n                onClick={() => onSetActiveSlide('writing')}\n                href=\"#\"\n              >\n            Writing\n              </a>\n            </div>}\n            {mathNoCalc && <div className=\"tab slide col 3\" style={{ padding: '0px 70px' }}>\n              <a\n                className={activeSlide === 'math (no calc)' ? 'active' : ''}\n                onClick={() => onSetActiveSlide('math (no calc)')}\n                href=\"#\"\n              >\n            Math <span className=\"block-sm\">(no calc)</span>\n              </a>\n            </div>}\n            {mathCalc && <div className=\"tab slide col 3\" style={{ padding: '0px 70px' }}>\n              <a\n                className={activeSlide === 'math (calculator)' ? 'active' : ''}\n                onClick={() => onSetActiveSlide('math (calculator)')}\n                href=\"#\"\n              >\n            Math <span className=\"block-sm\">(calculator)</span>\n              </a>\n            </div>}\n            <div className=\"tab slide col 3\" style={{ padding: '0px 70px' }}>\n              <a\n                className={activeSlide === 'essay' ? 'active' : ''}\n                onClick={() => onSetActiveSlide('essay')}\n                href=\"#\"\n              >\n            Essay\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nAnswerSheetNavBar.propTypes = {\n  activeSlide: PropTypes.string.isRequired,\n  onSetActiveSlide: PropTypes.func.isRequired,\n};\nexport default AnswerSheetNavBar;\n","import React from 'react';\nimport { toast } from 'react-toastify';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport sampleEssayScores from '../../utils/sampleEssayScores';\nimport { updateStudentEssayScoreApi, fetchStudentTestScoreApi } from '../../../index/api';\n\n\nclass EssayPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      readingScore: \"\",\n      analysisScore: \"\",\n      writingScore: \"\",\n    };\n  }\n\n  componentDidMount = async () => {\n    const { testScoreDetails: { status, student_id, student_test_id } } = this.props;\n    if (status !== \"COMPLETED\") {\n      const response = await fetchStudentTestScoreApi(student_id, student_test_id);\n      if (!response || (response && response.message)) return null;\n      if (!response.data.essay) return null;\n      const { reading, writing, analysis } = response.data.essay;\n      this.setState({\n        readingScore: reading,\n        analysisScore: analysis,\n        writingScore: writing,\n      });\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { readingScore, writingScore, analysisScore } = state;\n    if (props.testScores && props.testScores.essay && props.testScoreDetails.status === \"COMPLETED\") {\n      const { reading, writing, analysis } = props.testScores.essay;\n      if (!readingScore && !writingScore && !analysisScore) {\n        return {\n          readingScore: reading,\n          analysisScore: analysis,\n          writingScore: writing,\n        };\n      }\n      return null;\n    }\n    return null;\n  }\n\n  onSubmitScores = async () => {\n    const { readingScore, writingScore, analysisScore } = this.state;\n    const {\n      testScoreDetails: { student_test_id: studentTestId },\n      setEssayScore,\n    } = this.props;\n    if (readingScore && writingScore && analysisScore && studentTestId) {\n      const scores = {\n        student_test_id: studentTestId,\n        score: {\n          reading: readingScore,\n          analysis: analysisScore,\n          writing: writingScore,\n        },\n      };\n      const response = await updateStudentEssayScoreApi(scores);\n      const essay = {\n        reading: readingScore,\n        analysis: analysisScore,\n        writing: writingScore,\n      };\n      setEssayScore(essay);\n      if (response.ok) {\n        toast.success(`All scores has been successfully saved!`, {\n          className: \"update-success\",\n          progressClassName: \"progress-bar-success\",\n        });\n      } else {\n        toast.error(`There was an error saving the scores`, {\n          className: \"update-error\",\n          progressClassName: \"progress-bar-error\",\n        });\n      }\n    } else {\n      toast.warning(`All three essay scores are required for scoring`, {\n        className: \"update-error\",\n        progressClassName: \"progress-bar-error\",\n      });\n    }\n  };\n\n  onSetReadingScore = (readingScore) => this.setState({ readingScore });\n  onSetAnalysisScore = (analysisScore) => this.setState({ analysisScore });\n  onSetWritingScore = (writingScore) => this.setState({ writingScore });\n  render() {\n    const { readingScore, writingScore, analysisScore } = this.state;\n    return (\n      <div className=\"slide\">\n        <div className=\"tabs-section tabs-content-lg-visible\">\n          <ul className=\"tabs tabs-flex\">\n            <li className=\"tab col s3\">\n              <a className=\"active\" href=\"#reading\">\n                <b>Reading</b>\n              </a>\n            </li>\n            <li className=\"tab col s3\">\n              <a href=\"#analysis\">\n                <b>Analysis</b>\n              </a>\n            </li>\n            <li className=\"tab col s3\">\n              <a href=\"#writing\">\n                <b>Writing</b>\n              </a>\n            </li>\n          </ul>\n          <div className=\"tabs-content\">\n            <div className=\"row\">\n              <div className=\"col s12 l4\">\n                <div id=\"reading\" className=\"tab-content\">\n                  <div className=\"card-panel\">\n                    <h1 className=\"h2\">\n                      <span className=\"hide-on-large-only\">Score:</span>\n                      <span className=\"visible-lg-inline\">Reading |</span>{\" \"}\n                      <span className=\"quality\">2 to 8</span>\n                    </h1>\n                    <div className=\"input-row row\">\n                      <div className=\"input-field col s8 m6 l5\">\n                        <Dropdown\n                          value={getValueFromState(readingScore, sampleEssayScores)}\n                          onChange={this.onSetReadingScore}\n                          options={sampleEssayScores}\n                          label=\"Score\"\n                          stateKey=\"state\"\n                          dropdownKey=\"state\"\n                          id=\"readingScore\"\n                        />\n                      </div>\n                    </div>\n                    <div\n                      className=\"text-content custom-form\"\n                      style={{ borderTop: \"1px solid gray\" }}\n                    >\n                      <div\n                        className=\"jcf-scrollable height-570 box scrollable\"\n                        style={{ boxShadow: \"none\" }}\n                      >\n                        <div\n                          className=\"text-container\"\n                          style={{ height: \"100%\", overflowY: \"scroll\" }}\n                        >\n                          <div className=\"text-frame\">\n                            <h2>Score: 8 - Advanced</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response shows an understanding of the text&#39;s central idea(s)\n                              and of most important details and how they interrelate, demonstrating\n                              a comprehensive understanding of the text.\n                            </p>\n                            <p>\n                              The response is free of errors of fact or interpretation with regard\n                              to the text.\n                            </p>\n                            <p>\n                              The response makes skillful use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating a complete understanding of the\n                              source text.\n                            </p>\n                          </div>\n                          <div className=\"text-frame\">\n                            <h2>Score: 6 - Proﬁcient</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response shows an understanding of the text&#39;s central idea(s)\n                              and of most important details.\n                            </p>\n                            <p>\n                              The response is free of errors of fact or interpretation with regard\n                              to the text.\n                            </p>\n                            <p>\n                              The response makes skillful use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating a complete understanding of the\n                              source text.\n                            </p>\n                          </div>\n                          <div className=\"text-frame\">\n                            <h2>Score: 4 - Partial</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response shows an understanding of the text&#39;s central idea(s)\n                              and of most important details.\n                            </p>\n                            <p>\n                              The response is free of errors of fact or interpretation with regard\n                              to the text.\n                            </p>\n                            <p>\n                              The response makes skillful use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating a complete understanding of the\n                              source text.\n                            </p>\n                          </div>\n                          <div className=\"text-frame\">\n                            <h2>Score: 2 - Inadequate</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response fails to show an understanding of the text&#39;s central\n                              idea(s) and may include only details without reference to central\n                              idea(s).{\" \"}\n                            </p>\n                            <p>\n                              The response may contain numerous errors of fact and/or interpretation\n                              with regard to the text.{\" \"}\n                            </p>\n                            <p>\n                              The response makes little or no use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating little or no understanding of the\n                              source text.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col s12 l4\">\n                <div id=\"analysis\" className=\"tab-content\">\n                  <div className=\"card-panel\">\n                    <h1 className=\"h2\">\n                      <span className=\"hide-on-large-only\">Score:</span>\n                      <span className=\"visible-lg-inline\">Analysis |</span>{\" \"}\n                      <span className=\"quality\">2 to 8</span>\n                    </h1>\n                    <div className=\"input-row row\">\n                      <div className=\"input-field col s8 m6 l5\">\n                        <Dropdown\n                          value={getValueFromState(analysisScore, sampleEssayScores)}\n                          onChange={this.onSetAnalysisScore}\n                          options={sampleEssayScores}\n                          label=\"Score\"\n                          stateKey=\"state\"\n                          dropdownKey=\"state\"\n                          id=\"analysisScore\"\n                        />\n                      </div>\n                    </div>\n                    <div\n                      className=\"text-content custom-form\"\n                      style={{ borderTop: \"1px solid gray\" }}\n                    >\n                      <div\n                        className=\"jcf-scrollable height-570 box scrollable\"\n                        style={{ boxShadow: \"none\" }}\n                      >\n                        <div\n                          className=\"text-container\"\n                          style={{ height: \"100%\", overflowY: \"scroll\" }}\n                        >\n                          <div className=\"text-frame\">\n                            <h2>Score: 8 - Advanced</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response shows an understanding of the text&#39;s central idea(s)\n                              and of most important details and how they interrelate, demonstrating\n                              a comprehensive understanding of the text.\n                            </p>\n                            <p>\n                              The response is free of errors of fact or interpretation with regard\n                              to the text.\n                            </p>\n                            <p>\n                              The response makes skillful use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating a complete understanding of the\n                              source text.\n                            </p>\n                          </div>\n                          <div className=\"text-frame\">\n                            <h2>Score: 6 - Proﬁcient</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response shows an understanding of the text&#39;s central idea(s)\n                              and of most important details.\n                            </p>\n                            <p>\n                              The response is free of errors of fact or interpretation with regard\n                              to the text.\n                            </p>\n                            <p>\n                              The response makes skillful use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating a complete understanding of the\n                              source text.\n                            </p>\n                          </div>\n                          <div className=\"text-frame\">\n                            <h2>Score: 4 - Partial</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response shows an understanding of the text&#39;s central idea(s)\n                              and of most important details.\n                            </p>\n                            <p>\n                              The response is free of errors of fact or interpretation with regard\n                              to the text.\n                            </p>\n                            <p>\n                              The response makes skillful use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating a complete understanding of the\n                              source text.\n                            </p>\n                          </div>\n                          <div className=\"text-frame\">\n                            <h2>Score: 2 - Inadequate</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response fails to show an understanding of the text&#39;s central\n                              idea(s) and may include only details without reference to central\n                              idea(s).{\" \"}\n                            </p>\n                            <p>\n                              The response may contain numerous errors of fact and/or interpretation\n                              with regard to the text.{\" \"}\n                            </p>\n                            <p>\n                              The response makes little or no use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating little or no understanding of the\n                              source text.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col s12 l4\">\n                <div id=\"writing\" className=\"tab-content\">\n                  <div className=\"card-panel\">\n                    <h1 className=\"h2\">\n                      <span className=\"hide-on-large-only\">Score:</span>\n                      <span className=\"visible-lg-inline\">Writing |</span>{\" \"}\n                      <span className=\"quality\">2 to 8</span>\n                    </h1>\n                    <div className=\"input-row row\">\n                      <div className=\"input-field col s8 m6 l5\">\n                        <Dropdown\n                          value={getValueFromState(writingScore, sampleEssayScores)}\n                          onChange={this.onSetWritingScore}\n                          options={sampleEssayScores}\n                          label=\"Score\"\n                          stateKey=\"state\"\n                          dropdownKey=\"state\"\n                          id=\"readingScore\"\n                        />\n                      </div>\n                    </div>\n                    <div\n                      className=\"text-content custom-form\"\n                      style={{ borderTop: \"1px solid gray\" }}\n                    >\n                      <div\n                        className=\"jcf-scrollable height-570 box scrollable\"\n                        style={{ boxShadow: \"none\" }}\n                      >\n                        <div\n                          className=\"text-container\"\n                          style={{ height: \"100%\", overflowY: \"scroll\" }}\n                        >\n                          <div className=\"text-frame\">\n                            <h2>Score: 8 - Advanced</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response shows an understanding of the text&#39;s central idea(s)\n                              and of most important details and how they interrelate, demonstrating\n                              a comprehensive understanding of the text.\n                            </p>\n                            <p>\n                              The response is free of errors of fact or interpretation with regard\n                              to the text.\n                            </p>\n                            <p>\n                              The response makes skillful use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating a complete understanding of the\n                              source text.\n                            </p>\n                          </div>\n                          <div className=\"text-frame\">\n                            <h2>Score: 6 - Proﬁcient</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response shows an understanding of the text&#39;s central idea(s)\n                              and of most important details.\n                            </p>\n                            <p>\n                              The response is free of errors of fact or interpretation with regard\n                              to the text.\n                            </p>\n                            <p>\n                              The response makes skillful use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating a complete understanding of the\n                              source text.\n                            </p>\n                          </div>\n                          <div className=\"text-frame\">\n                            <h2>Score: 4 - Partial</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response shows an understanding of the text&#39;s central idea(s)\n                              and of most important details.\n                            </p>\n                            <p>\n                              The response is free of errors of fact or interpretation with regard\n                              to the text.\n                            </p>\n                            <p>\n                              The response makes skillful use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating a complete understanding of the\n                              source text.\n                            </p>\n                          </div>\n                          <div className=\"text-frame\">\n                            <h2>Score: 2 - Inadequate</h2>\n                            <p>\n                              The response demonstrates thorough comprehension of the source text.\n                            </p>\n                            <p>\n                              The response fails to show an understanding of the text&#39;s central\n                              idea(s) and may include only details without reference to central\n                              idea(s).{\" \"}\n                            </p>\n                            <p>\n                              The response may contain numerous errors of fact and/or interpretation\n                              with regard to the text.{\" \"}\n                            </p>\n                            <p>\n                              The response makes little or no use of textual evidence (quotations,\n                              paraphrases, or both), demonstrating little or no understanding of the\n                              source text.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"btn-holder right-align\">\n                <a\n                  href=\"#\"\n                  className=\"btn btn-xlarge waves-effect waves-light bg-blue\"\n                  onClick={() => this.onSubmitScores()}\n                >\n                  Score Essay\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EssayPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AnswerRow from '../WritingPage/components/AnswerRow';\n\nclass MathCalculatorPage extends React.Component {\n  mapAnswers = () => {\n    const { testSection: { problems: problemsSection }, testSection, fetchProblemsMessage } = this.props;\n    if (!problemsSection && fetchProblemsMessage) return <p style={{ color: \"red\" }}>{this.props.fetchProblemsMessage}</p>;\n    return (\n      problemsSection.problems &&\n      problemsSection.problems.map(problem =>\n        <AnswerRow key={problem.test_problem_id} testSection={testSection} problem={problem} onAddStudentAnswerToTest={this.props.onAddStudentAnswerToTest} />,\n      )\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slide\" id=\"mathCalcAnswerSheetImg\">\n        <div className=\"row\" style={{ columns: '3 auto', marginLeft: '10px', marginRight: '10px' }}>\n          <ol className=\"answers-list\" style={{ marginBottom: '40px' }}>\n            {this.props.testSection && this.mapAnswers()}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nMathCalculatorPage.propTypes = {\n  testSection: PropTypes.object,\n};\nexport default MathCalculatorPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AnswerRow from '../WritingPage/components/AnswerRow';\n\nclass MathNoCalcPage extends React.Component {\n  mapAnswers = () => {\n    const { testSection: { problems: problemsSection }, testSection, fetchProblemsMessage } = this.props;\n    if (!problemsSection && fetchProblemsMessage) return <p style={{ color: \"red\" }}>{this.props.fetchProblemsMessage}</p>;\n    return (\n      problemsSection.problems &&\n      problemsSection.problems.map(problem =>\n        <AnswerRow key={problem.test_problem_id} testSection={testSection} problem={problem} onAddStudentAnswerToTest={this.props.onAddStudentAnswerToTest} />,\n      )\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slide\" id=\"mathNoCalcAnswerSheetImg\">\n        <div className=\"row\" style={{ columns: '3 auto', marginLeft: '10px', marginRight: '10px' }}>\n          <ol className=\"answers-list\" style={{ marginBottom: '40px' }}>\n            {this.props.testSection && this.mapAnswers()}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nMathNoCalcPage.propTypes = {\n  testSection: PropTypes.object,\n};\nexport default MathNoCalcPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AnswerRow from '../WritingPage/components/AnswerRow';\n\nclass ReadingPage extends React.Component {\n  mapAnswers = () => {\n    const { testSection: { problems: problemsSection }, testSection, fetchProblemsMessage } = this.props;\n    if (!problemsSection && fetchProblemsMessage) return <p style={{ color: \"red\" }}>{this.props.fetchProblemsMessage}</p>;\n    return (\n      problemsSection.problems &&\n      problemsSection.problems.map(problem =>\n        <AnswerRow key={problem.test_problem_id} testSection={testSection} onAddStudentAnswerToTest={this.props.onAddStudentAnswerToTest} problem={problem} />,\n      )\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slide\" id=\"readingAnswerSheetImg\">\n        <div className=\"row\" style={{ columns: '3 auto', marginLeft: '10px', marginRight: '10px' }}>\n          <ol className=\"answers-list\" style={{ marginBottom: '40px' }}>\n            {this.props.testSection && this.mapAnswers()}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nReadingPage.propTypes = {\n  testSection: PropTypes.object,\n};\n\nexport default ReadingPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport BubbleGroup from \"../Bubble\";\nimport FreeResponse from '../FreeResponse';\nimport DropDownMenuOptions from '../DropDownOptions';\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      status: '',\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.problem.flag) {\n      const { problem: { flag: { status } } } = this.props;\n      this.setState({\n        status,\n      });\n    }\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    const { problem: { flag: { status: nextPropsStatus } } } = nextProps;\n    if (nextPropsStatus !== this.state.status) {\n      this.setState({\n        status: nextPropsStatus,\n      });\n    }\n  }\n\n  onOpenQuestionModal = () => this.setState({ open: !this.state.open });\n  onCloseQuestionModal = () => this.setState({ open: false });\n\n  mapNumberBubbles = () => {\n    const {\n      problem: { student_answer, correct_answer },\n      problem,\n      testSection,\n    } = this.props;\n    if (student_answer === correct_answer) {\n      return (\n        <>\n          <li>\n            <FreeResponse problem={problem} testSection={testSection} answerStatus={{ complete: true, isCorrect: true }} />\n          </li>\n          <li key={student_answer}>\n            <span\n              className=\"badge badge-rounded badge-rounded-bordered\"\n              style={{ color: \"#fff\", borderColor: \"#32955c\", backgroundColor: \"#3eb777\" }}\n            >\n              {student_answer}\n            </span>\n          </li>\n        </>\n      );\n    }\n    return (\n      <React.Fragment>\n        <li key={student_answer}>\n          <FreeResponse problem={problem} testSection={testSection} answerStatus={{ complete: true, isCorrect: false }} />\n        </li>\n        <li key={correct_answer}>\n          <span\n            className=\"badge badge-rounded badge-rounded-bordered\"\n            style={{\n              color: \"#32955c\",\n              borderColor: \"#32955c\",\n              backgroundColor: \"#fff\",\n              width: \"100%\",\n            }}\n          >\n            {correct_answer}\n          </span>\n        </li>\n      </React.Fragment>\n    );\n  };\n\n  getAnswerType = problem => {\n    const { correct_answer } = problem;\n    if (!parseFloat(correct_answer) && correct_answer !== '0.0') {\n      return null;\n    }\n    return correct_answer;\n  };\n\n  render() {\n    const { problem, onAddStudentAnswerToTest, testSection } = this.props;\n    const { open, status } = this.state;\n    return (\n      <React.Fragment>\n        <li\n          className=\"answers-list-holder\"\n          key={problem.test_problem_id}\n          style={{ marginRight: \"15px\" }}\n        >\n          <div className=\"answer-row row mb-0\">\n            <div className=\"col col-120\">\n              <ul className=\"answer-list\">\n                <Choose>\n                  <When condition={this.getAnswerType(problem)}>{this.mapNumberBubbles()}</When>\n                  <When condition={problem.type === \"fill_in_the_blank\"}>\n                    <FreeResponse\n                      problem={problem}\n                      testSection={testSection}\n                      answerStatus={{ complete: false }}\n                    />\n                  </When>\n                  <Otherwise>\n                    <BubbleGroup\n                      id={problem.id}\n                      testSection={testSection}\n                      onAddStudentAnswerToTest={onAddStudentAnswerToTest}\n                      problem={problem}\n                    />\n                  </Otherwise>\n                </Choose>\n              </ul>\n            </div>\n            <div className=\"col col-30\">\n              {/* @TODO Difficulty level of test problems should be here */}\n              {/* <span className=\"status-info\">E</span> */}\n            </div>\n            <div className=\"col col-auto\">\n              <If condition={status === \"FLAGGED\"}>\n                <span className=\"status-answer\" style={{ color: \"#c0272d\" }}>\n                  <i className=\"icon-flag\"></i>\n                  <b className=\"status-text\">Review</b>\n                </span>\n              </If>\n              <If condition={status === \"REVIEWED\"}>\n                <span className=\"status-answer status-disabled\" style={{ color: \"#c0272d\" }}>\n                  <i className=\"icon-flag\"></i>\n                  <b className=\"status-text\">Reviewed</b>\n                </span>\n              </If>\n            </div>\n            <div className=\"dropdown-block col col-35\">\n              <a\n                className=\"dropdown-trigger\"\n                href=\"#\"\n                data-target=\"dropdown01\"\n                onClick={() => this.onOpenQuestionModal()}\n              >\n                <i className=\"material-icons dots-icon\">more_vert</i>\n              </a>\n              <DropDownMenuOptions\n                open={open}\n                onOpenQuestionModal={this.onOpenQuestionModal}\n                onCloseQuestionModal={this.onCloseQuestionModal}\n                question={problem}\n                studentTestId={this.props.testSection.student_test_id}\n              />\n            </div>\n          </div>\n        </li>\n      </React.Fragment>\n    );\n  }\n}\n\nAnswerRow.propTypes = {\n  problem: PropTypes.object,\n};\n\nexport default AnswerRow;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport update from \"immutability-helper\";\n\nconst styles = {\n  red: {\n    position: \"relative\",\n    color: \"#fff\",\n    borderColor: \"#fff\",\n    border: \"1px solid\",\n    backgroundColor: \"#db1d41\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  greenFilled: {\n    position: \"relative\",\n    color: \"#fff\",\n    borderColor: \"#32955c\",\n    border: \"1px solid\",\n    backgroundColor: \"#32955c\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  greenBorderOnly: {\n    position: \"relative\",\n    color: \"#32955c\",\n    border: \"1px solid #32955c\",\n    backgroundColor: \"#fff\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  plain: {\n    position: \"relative\",\n    color: \"#a6a8ab\",\n    border: \"1px solid #a6a8ab\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  blueFilled: {\n    position: \"relative\",\n    color: \"#fff\",\n    border: \"1px solid #40c4ff\",\n    backgroundColor: \"#40c4ff\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n};\n\nclass BubbleGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [\n        {\n          id: 0,\n          label: \"A\",\n          selected: false,\n        },\n        {\n          id: 1,\n          label: \"B\",\n          selected: false,\n        },\n        {\n          id: 2,\n          label: \"C\",\n          selected: false,\n        },\n        {\n          id: 3,\n          label: \"D\",\n          selected: false,\n        },\n      ],\n    };\n  }\n\n  /**\n   * This exists to revert the user's answser choice if request fails but it is slow to update. Needs better solution in the future.\n   */\n  static getDerivedStateFromProps(props, state) {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    const { problem: { student_answer } } = props;\n    const { problemCells, selectedIndex } = state;\n    if (letters.indexOf(student_answer) !== selectedIndex) {\n      const revertedProblemCells = problemCells.map((cell, index) => {\n        if (index === letters.indexOf(student_answer)) {\n          cell.selected = true;\n          return cell;\n        }\n        if (cell.selected) {\n          cell.selected = false;\n          return cell;\n        }\n        return cell;\n      });\n      return { selectedIndex: letters.indexOf(student_answer), problemCells: revertedProblemCells };\n    }\n    return null\n  }\n\n  componentDidMount = () => {\n    const { problem } = this.props;\n    if (!problem.student_answer) {\n      return;\n    }\n    const cells = this.state.problemCells;\n    let selectedIndex = -1;\n    cells.map((cell, index) => {\n      if (cell.label === problem.student_answer) {\n        cells[index] = { ...cell, selected: true };\n        selectedIndex = index;\n      }\n    });\n    return this.setState({ problemCells: [...cells], selectedIndex });\n  };\n\n  handleClickBadge = (index) => {\n    const currentBadge = this.state.problemCells[index];\n    const selectedIndex = this.state.selectedIndex;\n    if (selectedIndex === -1) {\n      const updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n      return this.onSaveStudentAnswer(updatedProblemCells, index);\n    }\n    const updatedProblemCells = update(this.state.problemCells, {\n      [index]: { selected: { $set: !currentBadge.selected } },\n      [selectedIndex]: { selected: { $set: false } },\n    });\n    if (selectedIndex === index) {\n      return this.onSaveStudentAnswer(updatedProblemCells, -1);\n    }\n    return this.onSaveStudentAnswer(updatedProblemCells, index);\n  };\n\n  onSaveStudentAnswer = (updatedProblemCells, index) => {\n    const { onAddStudentAnswerToTest, problem, testSection } = this.props;\n    this.setState({ problemCells: updatedProblemCells, selectedIndex: index });\n    const label = index === -1 ? null : this.state.problemCells[index].label;\n    onAddStudentAnswerToTest(problem, label, testSection.student_test_id);\n  };\n\n  mapEmptyBubbles = id => {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    return letters.map((letter, index) => (\n      <li\n        key={letter}\n        style={{ cursor: \"pointer\" }}\n        onClick={() => this.handleClickBadge(index)}\n      >\n        <form>\n          <label\n            htmlFor={`${id}${letter}`}\n            style={this.renderBubbleStyle(letter)}\n          >\n            <span style={{ cursor: \"pointer\", display: \"block\", marginTop: \"2px\", paddingLeft: \"4.5px\" }}>\n              {letter}\n            </span>\n          </label>\n        </form>\n      </li>\n    ));\n  };\n\n  renderBubbleStyle = letter => {\n    const {\n      problem: { correct_answer, student_answer },\n    } = this.props;\n    const { selectedIndex, problemCells } = this.state;\n    const selectedAnswer = problemCells[selectedIndex] ? problemCells[selectedIndex].label : null;\n    const studentAnswer = student_answer || selectedAnswer;\n    if (studentAnswer === letter && studentAnswer === correct_answer) {\n      return styles.greenFilled;\n    }\n    if (studentAnswer === letter && studentAnswer !== correct_answer && correct_answer) {\n      return styles.red;\n    }\n    if (letter !== studentAnswer && letter === correct_answer) {\n      return styles.greenBorderOnly;\n    }\n    if (!correct_answer && studentAnswer === letter) {\n      return styles.blueFilled;\n    }\n    return styles.plain;\n  };\n\n  render() {\n    const {\n      problem: { test_problem_id },\n    } = this.props;\n    return <React.Fragment>{this.mapEmptyBubbles(test_problem_id)}</React.Fragment>;\n  }\n}\n\nBubbleGroup.propTypes = {\n  problem: PropTypes.object.isRequired,\n};\n\nexport default BubbleGroup;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport PropTypes from \"prop-types\";\nimport { toast } from \"react-toastify\";\nimport ClickOffComponentWrapper from \"../../../../../../ClickOffComponentWrapper\";\nimport { updateFlagStatus } from \"../../../../../index/actions\";\n\nclass DropDownOptions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: \"UN_FLAGGED\",\n    };\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    const {\n      question: {\n        flag: { status },\n      },\n      question,\n    } = nextProps;\n    if (question.flag.status !== this.state.status) {\n      this.setState({\n        status,\n      });\n    }\n  };\n\n  onHandleQuestionFlagStatus = async (_e, status) => {\n    const {\n      studentTestId,\n      onUpdateFlagStatus,\n      question: {\n        flag: { id },\n      },\n      question,\n      onCloseQuestionModal,\n    } = this.props;\n    // User validation\n    if (status === this.state.status) return;\n    if (this.state.status === \"UN_FLAGGED\" && status === \"REVIEWED\" && !id) {\n      return toast.error(`There is no flag to mark reviwed.`, {\n        className: \"update-error\",\n        progressClassName: \"progress-bar-error\",\n      });\n    }\n    // Continue with request\n    let postBody = {};\n    const newQuestion = question;\n\n    if (status === \"FLAGGED\" && !id) {\n      postBody = { student_test_id: studentTestId, test_problem_id: question.id };\n    } else {\n      postBody = { student_test_id: studentTestId, flag_id: id, status };\n    }\n    newQuestion.flag.status = status;\n    onUpdateFlagStatus(postBody, status, newQuestion);\n    onCloseQuestionModal();\n  };\n\n  render() {\n    const {\n      open,\n      onCloseQuestionModal,\n    } = this.props;\n    return (\n      <If condition={open}>\n        <ClickOffComponentWrapper onOuterClick={() => onCloseQuestionModal()}>\n          <ul\n            id=\"dropdown01\"\n            className=\"dropdown-content dropdown-wide\"\n            style={{\n              display: \"block\",\n              opacity: \"1\",\n              transform: \"scaleX(1) scaleY(1)\",\n            }}\n          >\n            <li>\n              <a className=\"option\" href=\"#\" onClick={(e) => this.onHandleQuestionFlagStatus(e, \"FLAGGED\")}>Add Flag</a>\n            </li>\n            <li>\n              <a className=\"option\" href=\"#!\" onClick={(e) => this.onHandleQuestionFlagStatus(e, \"REVIEWED\")}>Mark Flag Reviewed</a>\n            </li>\n            <li>\n              <a className=\"option\" href=\"#!\" onClick={(e) => this.onHandleQuestionFlagStatus(e, \"UN_FLAGGED\")}>Remove Flag</a>\n            </li>\n          </ul>\n        </ClickOffComponentWrapper>\n        <style jsx>{`\n            .option {\n              font-weight: normal;\n            }\n          `}</style>\n      </If>\n    );\n  }\n}\n\nDropDownOptions.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onCloseQuestionModal: PropTypes.func.isRequired,\n  question: PropTypes.object.isRequired,\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onUpdateFlagStatus: (payload, status, question) =>\n      dispatch(updateFlagStatus(payload, status, question)),\n  };\n}\n\nconst withConnect = connect(null, mapDispatchToProps);\n\nexport default compose(withConnect)(DropDownOptions);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { addFreeResponseAnswerToTest } from '../../../../../index/actions';\n\nclass FreeResponseInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answer: props.problem.student_answer,\n      basicStyle: { width: \"50px\" },\n      incorrectStyle: { color: \"#fff\", borderColor: \"#ad1e3e\", backgroundColor: \"#db1d41\", width: \"50px\" },\n      correctStyle: { color: \"#fff\", borderColor: \"#32955c\", backgroundColor: \"#3eb777\", width: \"50px\" },\n    };\n  }\n\n  handleInputChange = (e) => {\n    e.preventDefault();\n    const answer = e.target.value;\n    const { onAddFreeResponseAnswerToTest, problem, testSection: { student_test_id } } = this.props;\n    const postBody = { student_test_id, test_problem_id: problem.id, answer };\n    onAddFreeResponseAnswerToTest(postBody, problem.test_section_id);\n    this.setState({ answer });\n  };\n\n  render() {\n    const { answerStatus } = this.props;\n    let style = {};\n    !answerStatus.complete ? style = this.state.basicStyle : !answerStatus.isCorrect ? style = this.state.incorrectStyle : style = this.state.correctStyle;\n    return (\n      <input\n        className=\"badge badge-rounded badge-rounded-bordered\"\n        style={style}\n        type=\"text\"\n        name=\"answer\"\n        defaultValue={this.state.answer}\n        onChange={this.handleInputChange}\n      />\n    );\n  }\n}\n\nFreeResponseInput.propTypes = {\n  problem: PropTypes.object,\n  answerStatus: PropTypes.object,\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onAddFreeResponseAnswerToTest: (postBody, sectionId) => dispatch(addFreeResponseAnswerToTest(postBody, sectionId)),\n  };\n}\n\nconst withConnect = connect(null, mapDispatchToProps);\n\nexport default compose(withConnect)(FreeResponseInput);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AnswerRow from './components/AnswerRow';\n\nclass WritingPage extends React.Component {\n  mapAnswers = () => {\n    const { testSection: { problems: problemsSection }, testSection, fetchProblemsMessage } = this.props;\n    if (!problemsSection && fetchProblemsMessage) return <p style={{ color: \"red\" }}>{this.props.fetchProblemsMessage}</p>;\n    return (\n      problemsSection.problems &&\n      problemsSection.problems.map(problem =>\n        <AnswerRow key={problem.test_problem_id} problem={problem} testSection={testSection} onAddStudentAnswerToTest={this.props.onAddStudentAnswerToTest} />,\n      )\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slide\" id=\"writingAnswerSheetImg\">\n        <div className=\"row\" style={{ columns: '3 auto', marginLeft: '10px', marginRight: '10px' }}>\n          <ol className=\"answers-list\" style={{ marginBottom: '40px' }}>\n            {this.props.testSection && this.mapAnswers()}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nWritingPage.propTypes = {\n  testSection: PropTypes.object,\n};\n\nexport default WritingPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { toast } from 'react-toastify';\nimport AnswerSheetNavBar from './components/AnswerSheetNavBar';\nimport ReadingPage from './components/ReadingPage';\nimport WritingPage from './components/WritingPage';\nimport MathNoCalcPage from './components/MathNoCalcPage';\nimport MathCalculatorPage from './components/MathCalculatorPage';\nimport EssayPage from './components/EssayPage';\nimport {\n  makeSelectStudentSections,\n  makeSelectActiveStudentToken,\n  makeSelectActiveStudent,\n  makeSelectTests,\n  makeSelectActiveStudentTestId,\n  makeSelectActiveTestScores,\n} from '../index/selectors';\n\nimport {\n  fetchStudentTestSections,\n  addStudentAnswerToTest,\n  setEssayScore,\n  resetErrorMessage,\n  getTestScores,\n} from '../index/actions';\nimport { updateStudentTestSectionStatusApi } from '../index/api';\nimport { makeSelectErrorMessages } from '../index/selectors';\nclass DetailTestAnswerSheetComplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSlide: '',\n      isOpened: false,\n      testSections: [],\n      studentTestId: '',\n      testReadingProblems: null,\n      testWritingProblems: null,\n      testMathCalcProblems: null,\n      testMathNoCalcProblems: null,\n      activeTestSection: null,\n      updatedState: {\n        activeReadingSection: false,\n        showInCompleteTest: false,\n        activeWritingSection: false,\n        activeMathNoCalcSection: false,\n        activeMathWithCalcSection: false,\n        activeSection: '',\n      },\n      updatedSectionStatus: {},\n      showSectionMessage: false,\n      answerTestProblemMessage: \"\",\n      testFlagMessage: \"\",\n      fetchSectionsMessage: \"\",\n      fetchingStudentTestsMessage: \"\",\n      enableScoreReport: false,\n    };\n  }\n\n  componentDidMount() {\n    const { enableScoreReport } = this.state;\n    const { sections, testScoreDetails: { student_test_id } } = this.props;\n    if (sections.length !== 0 && !enableScoreReport) {\n      this.onSetProblems(sections, student_test_id);\n    }\n    this.props.onRef(this);\n  }\n  componentWillUnmount() {\n    const { onResetErrorMessage } = this.props;\n    this.props.onRef(undefined);\n    onResetErrorMessage('answerTestProblemMessage');\n    onResetErrorMessage('testFlagMessage');\n    onResetErrorMessage('fetchSectionsMessage');\n    onResetErrorMessage('fetchProblemsMessage');\n    onResetErrorMessage('fetchingStudentTestsMessage');\n  }\n\n  componentWillReceiveProps = nextProps => {\n    const {\n      sections,\n      student_test_id,\n      errorMessages: {\n        answerTestProblemMessage,\n        testFlagMessage,\n        fetchSectionsMessage,\n        fetchProblemsMessage,\n        fetchingStudentTestsMessage,\n      },\n    } = nextProps;\n    if (sections.length !== 0 && !this.state.enableScoreReport) {\n      this.onSetProblems(sections, student_test_id);\n    }\n    if (answerTestProblemMessage !== this.state.answerTestProblemMessage) {\n      this.onErrorMessage(answerTestProblemMessage, \"answerTestProblemMessage\");\n    }\n    if (testFlagMessage !== this.state.testFlagMessage) {\n      this.onErrorMessage(testFlagMessage, \"testFlagMessage\");\n    }\n    if (fetchingStudentTestsMessage !== this.state.fetchingStudentTestsMessage) {\n      this.onErrorMessage(fetchingStudentTestsMessage, \"fetchingStudentTestsMessage\");\n    }\n    if (fetchProblemsMessage !== this.state.fetchProblemsMessage) {\n      this.setState({ fetchProblemsMessage });\n    }\n    if (fetchSectionsMessage !== this.state.fetchSectionsMessage) {\n      this.setState({ fetchSectionsMessage });\n    }\n    if (fetchingStudentTestsMessage !== this.state.fetchingStudentTestsMessage) {\n      this.setState({ fetchingStudentTestsMessage });\n    }\n  };\n  onErrorMessage(message, name) {\n    if (!message) return this.setState({ [name]: \"\" });\n    toast.error(message, {\n      className: 'update-error',\n      progressClassName: 'progress-bar-error',\n    });\n    this.setState({ [name]: message });\n  }\n  onSetProblems = (sections, studentTestId) => new Promise(async resolve => {\n    const { tests, testScoreDetails: { test_id }, testScoreDetails } = this.props;\n    const testIds = tests.map(test => test.id);\n    const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    sections.map(section => {\n      const testSectionIds = currentTestSections.map(testSection => testSection.id);\n      const currentTestSectionIndex = testSectionIds.findIndex(\n        testSectionId => testSectionId === section.test_section_id,\n      );\n      const currentTestSection = currentTestSections[currentTestSectionIndex];\n      // Confirm that the sections are for the current student_test_id\n      if (!currentTestSection || testScoreDetails.student_test_id !== section.student_test_id) return null;\n      switch (currentTestSection.name) {\n        case 'Math (Calculator)':\n          this.setState({\n            testMathCalcProblems: section,\n          });\n          break;\n        case 'Writing':\n          this.setState({\n            testWritingProblems: section,\n          });\n          break;\n        case 'Math (No Calculator)':\n          this.setState({\n            testMathNoCalcProblems: section,\n          });\n          break;\n        case 'Reading':\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n        default:\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n      }\n    });\n    this.setState({\n      testSections: sections,\n      studentTestId,\n      showSectionMessage: false,\n    });\n    setTimeout(() => {\n      resolve();\n    }, 1000);\n  });\n\n  getComponentImages = () =>\n    new Promise(resolve => {\n      this.setState({\n        enableScoreReport: true,\n      });\n      const imgDataList = [];\n      const componentRefs = [\n        { id: 'readingAnswerSheetImg', state: 'reading' },\n        { id: 'writingAnswerSheetImg', state: 'writing' },\n        { id: 'mathNoCalcAnswerSheetImg', state: 'math (no calc)' },\n        { id: 'mathCalcAnswerSheetImg', state: 'math (calculator)' },\n      ];\n      setTimeout(() => {\n        const { sections, testScoreDetails: { student_test_id } } = this.props;\n        this.onSetProblems(sections, student_test_id).then(() => {\n          setTimeout(async () => {\n            const getImgListPromise = componentRefs.reduce(\n              (accumulatorPromise, item) =>\n                accumulatorPromise\n                  .then(async () => {\n                    const result = await this.getData(item);\n                    return imgDataList.push(result);\n                  })\n                  .catch(console.error),\n              Promise.resolve(),\n            );\n            getImgListPromise.then(() => {\n              resolve(imgDataList);\n            });\n          }, 1000);\n        });\n      }, 5000);\n    });\n\n  getData = item =>\n    new Promise(resolve => {\n      this.setState({ activeSlide: item.state }, async () => {\n        const currentImg = await this.onHandleTargetImage(item.id);\n        resolve(currentImg);\n      });\n    });\n\n  onHandleTargetImage = async currentRef => {\n    const { getTargetImage } = this.props;\n    const currentImg = await getTargetImage(document.getElementById(currentRef));\n    return currentImg;\n  };\n\n  onSetActiveSlide = activeSlide => {\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    let currentSection;\n    switch (activeSlide) {\n      case 'reading':\n        currentSection = testReadingProblems;\n        break;\n      case 'writing':\n        currentSection = testWritingProblems;\n        break;\n      case 'math (no calc)':\n        currentSection = testMathNoCalcProblems;\n        break;\n      case 'math (calculator)':\n        currentSection = testMathCalcProblems;\n        break;\n      default:\n        currentSection = testReadingProblems;\n        break;\n    }\n    this.setState({ activeSlide, activeTestSection: currentSection });\n    // Remove any error message for the previous slide\n    this.props.onUpdateTestSectionMsg(\"\");\n  };\n\n  renderCurrentSlide = () => {\n    const { activeSlide, fetchSectionsMessage } = this.state;\n    const { sections, activeStudentTestId, activeTestScores, onSetEssayScore } = this.props;\n    if (sections) {\n      const {\n        testReadingProblems,\n        testWritingProblems,\n        testMathCalcProblems,\n        testMathNoCalcProblems,\n      } = this.state;\n      if (activeSlide === 'reading') {\n        this.updateSectionStatus(activeSlide, testReadingProblems);\n        return (\n          <ReadingPage\n            testSection={testReadingProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'writing') {\n        this.updateSectionStatus(activeSlide, testWritingProblems);\n        return (\n          <WritingPage\n            testSection={testWritingProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'math (no calc)') {\n        this.updateSectionStatus(activeSlide, testMathNoCalcProblems);\n        return (\n          <MathNoCalcPage\n            testSection={testMathNoCalcProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'math (calculator)') {\n        this.updateSectionStatus(activeSlide, testMathCalcProblems);\n        return (\n          <MathCalculatorPage\n            testSection={testMathCalcProblems}\n            onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n            fetchProblemsMessage={this.state.fetchProblemsMessage}\n          />\n        );\n      } else if (activeSlide === 'essay') {\n        return (\n          <EssayPage\n            testId={activeStudentTestId}\n            testScores={activeTestScores}\n            setEssayScore={onSetEssayScore}\n            onGetTestScores={this.props.onGetTestScores}\n            testScoreDetails={this.props.testScoreDetails}\n          />\n        );\n      }\n      if (!fetchSectionsMessage) {\n        return <h1 style={{ textAlign: 'center' }}>Loading Problems...</h1>;\n      }\n      return (\n        <h1 style={{ textAlign: 'center', color: 'red' }}>\n          {fetchSectionsMessage}\n        </h1>\n      );\n    }\n    return null;\n  };\n\n  onAddStudentAnswerToTest = async (problem, answer, student_test_id) => {\n    const { dispatchAddStudentAnswerToTest } = this.props;\n    const postBody = {\n      student_test_id,\n      test_problem_id: problem.id,\n      answer,\n    };\n    dispatchAddStudentAnswerToTest(postBody, problem.test_section_id);\n  };\n\n  updateSectionStatus = async (activeSlide, currentSection) => {\n    if (!currentSection) return;\n    if (currentSection.test_section_status === 'CREATED') {\n      if (!this.state.updatedSectionStatus[`${activeSlide}Section`]) {\n        const postBody = {\n          student_test_id: currentSection.student_test_id,\n          student_test_section_id: currentSection.id,\n          student_test_section_status: 'STARTED',\n        };\n        await updateStudentTestSectionStatusApi(postBody);\n        this.setState({\n          updatedSectionStatus: {\n            ...this.state.updatedSectionStatus,\n            [`${activeSlide}Section`]: 'STARTED',\n          },\n        });\n      }\n    }\n  };\n\n  getExistingSections = () => {\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    return {\n      reading: !!testReadingProblems,\n      writing: !!testWritingProblems,\n      mathCalc: !!testMathCalcProblems,\n      mathNoCalc: !!testMathNoCalcProblems,\n    };\n  };\n\n  completedSectionMessage = () => (\n    <p\n      style={{\n        color: \"white\",\n        backgroundColor: \"#28a745\",\n        fontSize: \"14px\",\n        borderRadius: \"25px\",\n      }}\n      className=\"center-align\"\n    >\n        This test section is complete. You can still edit answer choices if needed.\n    </p>\n  );\n\n  render() {\n    const {\n      activeSlide,\n      activeTestSection,\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    const { completedSections, testScoreDetails: { status }, updateTestSectionMessage } = this.props;\n    let showSectionMessage = this.state.showSectionMessage;\n    switch (activeSlide) {\n      case 'reading':\n        if (completedSections.readingSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      case 'writing':\n        if (completedSections.writingSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      case 'math (no calc)':\n        if (completedSections.mathNoCalcSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      case 'math (calculator)':\n        if (completedSections.mathCalcSectionCompleted) {\n          showSectionMessage = true;\n        }\n        break;\n      default:\n        break;\n    }\n    return (\n      <div className=\"card-main-full card\">\n        <div className=\"slick-tabs-gallery\">\n          <AnswerSheetNavBar\n            activeSlide={activeSlide}\n            onSetActiveSlide={this.onSetActiveSlide}\n            getExistingSections={this.getExistingSections()}\n          />\n        </div>\n        <div className=\"card-content\">\n          {showSectionMessage && status !== \"COMPLETED\" && this.completedSectionMessage()}\n          <div className=\"main-slick\">\n            {this.renderCurrentSlide()}\n          </div>\n          {activeSlide && activeSlide !== \"essay\" && status !== \"COMPLETED\" && (\n            <div className=\"row\">\n              <div className=\"btn-holder right-align\">\n                <a\n                  href=\"#\"\n                  className=\"btn btn-xlarge waves-effect waves-light bg-blue\"\n                  onClick={() => {\n                    this.props.handleTestScore(activeTestSection, {\n                      testReadingProblems,\n                      testWritingProblems,\n                      testMathNoCalcProblems,\n                      testMathCalcProblems,\n                    });\n                  }}\n                >\n                  {!showSectionMessage ? \"Submit Test Section\" : \"Resubmit Test\"}\n                </a>\n              </div>\n            </div>)}\n          <p className=\"red-text right-align\">{updateTestSectionMessage}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nDetailTestAnswerSheetComplete.propTypes = {\n  getTargetImage: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeStudent: makeSelectActiveStudent(),\n  tests: makeSelectTests(),\n  activeStudentTestId: makeSelectActiveStudentTestId(),\n  activeTestScores: makeSelectActiveTestScores(),\n  errorMessages: makeSelectErrorMessages(),\n});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n    onSetEssayScore: score => dispatch(setEssayScore(score)),\n    dispatchAddStudentAnswerToTest: (payload, sectionId) =>\n      dispatch(addStudentAnswerToTest(payload, sectionId)),\n    onResetErrorMessage: errorName => dispatch(resetErrorMessage(errorName)),\n    onGetTestScores: (postBody) => dispatch(getTestScores(postBody)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(DetailTestAnswerSheetComplete);\n","const sampleEssayScores = [\n  {\n    value: 2,\n    label: \"2\",\n  },\n  {\n    value: 4,\n    label: \"4\",\n  },\n  {\n    value: 6,\n    label: \"6\",\n  },\n  {\n    value: 8,\n    label: \"8\" },\n];\n\nexport default sampleEssayScores;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\n\nclass AssignedTestCard extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  handleDropdownClick = event => {\n    const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  };\n\n  render() {\n    const {\n      dropdownIndex,\n      index,\n      dropdownIsOpen,\n      test: { test_name, test_description, due_date, assignment_date, student_test_id, student_id },\n      onEnterAnswers,\n      handleTestSettingModalOpen,\n      onDeleteTest,\n      onTestFlagReviewed,\n    } = this.props;\n    const formattedDueDate = moment(due_date).format(\"MM/DD/YY\");\n    const formattedAssignedDate = moment(assignment_date).format(\"MM/DD/YY\");\n    return (\n      <React.Fragment>\n        <div\n          className=\"card-full-width card-scored card\"\n          style={{ margin: \"10px\", minWidth: \"580px\" }}\n        >\n          <div className=\"card-content\">\n            <div className=\" card-panel-row row mb-0\">\n              <div className=\"col s12\">\n                <ul className=\"to-do-list\">\n                  <li>\n                    <div\n                      className=\"row\"\n                      style={{ marginBottom: \"0px !important\", marginTop: \"20px\" }}\n                    >\n                      <div className=\"col s12 m6\">\n                        <strong className=\"list-title\">{test_name}</strong>\n                      </div>\n                      <div className=\"col s6 m6 right-align\">\n                        <div className=\"row icons-row\" style={{ marginBottom: \"10px\" }}>\n                          <div className=\"dropdown-block col\">\n                            <a\n                              href=\"#\"\n                              className=\"dropdown-trigger btn\"\n                              onClick={this.handleDropdownClick}\n                            >\n                              <i className=\"material-icons dots-icon\">more_vert</i>\n                            </a>\n                            <If condition={dropdownIsOpen && dropdownIndex === index}>\n                              <ul\n                                id=\"dropdown01\"\n                                style={{\n                                  display: \"block\",\n                                  minWidth: \"160px\",\n                                  transformOrigin: \"0px 0px 0px\",\n                                  opacity: \"1\",\n                                  transform: \"scaleX(1) scaleY(1)\",\n                                  width: \"210px\",\n                                }}\n                                className=\"dropdown-content\"\n                              >\n                                <li>\n                                  <a href=\"#\" onClick={handleTestSettingModalOpen}>\n                                    Edit Test Settings\n                                  </a>\n                                </li>\n                                <li>\n                                  <a href=\"#\" onClick={() => onEnterAnswers(student_test_id)}>\n                                    Edit/Enter Answers\n                                  </a>\n                                </li>\n                                <li>\n                                  <a href=\"#\" className=\"disabled\">\n                                    Excuse/Unexcuse lateness\n                                  </a>\n                                </li>\n                                <li>\n                                  <a\n                                    href=\"#\"\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      onTestFlagReviewed(student_test_id, student_id);\n                                    }}\n                                  >\n                                    Mark flags reviewed\n                                  </a>\n                                </li>\n                                <li>\n                                  <a href=\"#\" className=\"disabled\">\n                                    Reset\n                                  </a>\n                                </li>\n                                <li>\n                                  <a\n                                    href=\"#\"\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      onDeleteTest(student_test_id, student_id, \"assignedStudentTests\");\n                                    }}\n                                    className=\"red-text text-darken-3\"\n                                  >\n                                    Unassign\n                                  </a>\n                                </li>\n                              </ul>\n                            </If>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col s12 m8\">\n                        <ul className=\"info-list info-list-gray  assigned\">\n                          <li>\n                            <span className=\"list-status\">\n                              <span className=\"ico-mark\" />\n                              <span className=\"status-text\">Assigned {formattedAssignedDate}</span>\n                            </span>\n                          </li>\n                          <li>\n                            <span className=\"list-date\">\n                              <i className=\"icon-calendar\" />\n                              <span className=\"date\">Due {formattedDueDate}</span>\n                            </span>\n                          </li>\n                        </ul>\n                        <div\n                          className=\"card-meta-block\"\n                          style={{ padding: \"0px\", marginTop: \"10px\" }}\n                        >\n                          <dl className=\"dl-horizontal\">\n                            <dt>Version:</dt>\n                            <dd>{test_description}</dd>\n                          </dl>\n                        </div>\n                      </div>\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nAssignedTestCard.propTypes = {\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onDownloadReport: PropTypes.func.isRequired,\n  test: PropTypes.object.isRequired,\n};\n\nexport default AssignedTestCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst CardHeader = ({ title, amount, themeColor }) => (\n  <div className=\"title-block\">\n    <strong\n      style={{\n        color: themeColor,\n        display: \"block\",\n        fontSize: \"18px\",\n        margin: \"0 0 12px\"\n      }}\n    >\n      {title}\n      <span\n        className=\"badge-circle\"\n        style={{\n          backgroundColor: themeColor,\n          width: \"19px\",\n          height: \"19px\",\n          color: \"#fff\",\n          border: \"none\",\n          fontSize: \"12px\",\n          fontWeight: 700,\n          lineHeight: \"13px\",\n          padding: \"2px\",\n          marginLeft: \"5px\"\n        }}\n      >\n        {amount}\n      </span>\n    </strong>\n  </div>\n);\nexport default CardHeader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nimport { setActiveTestScores } from '../../../index/actions';\nimport { makeSelectActiveTestScores, makeSelectActiveStudent } from '../../../index/selectors';\n\nimport { fetchStudentTestScoreApi } from '../../../index/api';\nclass CompletedTestCard extends React.Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      scores: null,\n      ReadingScore: null,\n      WritingScore: null,\n      ReadingAndWritingScore: null,\n      MathScore: null,\n      NA: 0,\n    };\n  }\n\n  componentDidMount = async () => {\n    const { test } = this.props;\n    this._isMounted = true;\n    const formattedScores = await this.getScoresByStudentTest(this.props.test);\n    if (!formattedScores) return;\n    if (formattedScores && this._isMounted) {\n      this.setState({\n        scores: { ...formattedScores, student_test_id: test.student_test_id },\n      });\n      this.setScores(formattedScores.subjects);\n    }\n  };\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onEditTest = async () => {\n    const { onEditTest, onSetScores } = this.props;\n    const { scores } = this.state;\n    if (scores) {\n      onSetScores(scores);\n      onEditTest();\n    }\n  };\n\n  setScores = scores => {\n    Object.values(scores).map(score => {\n      switch (score.name) {\n        case 'Reading':\n          this.setState({ ReadingScore: score });\n          break;\n        case 'Writing and Language':\n          this.setState({ ReadingAndWritingScore: score });\n          break;\n        case 'Math':\n          this.setState({ MathScore: score });\n          break;\n        case 'Writing':\n          this.setState({ WritingScore: score });\n          break;\n        default:\n          this.setState({ NA: 0 });\n          break;\n      }\n    });\n  };\n\n  getScoresByStudentTest = async test => {\n    const { student_test_id } = test;\n    const { activeStudent: { id } } = this.props;\n    const formattedTestScores = await fetchStudentTestScoreApi(id, student_test_id);\n    return formattedTestScores.data;\n  };\n\n  handleDropdownClick = event => {\n    const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  };\n\n  render() {\n    const {\n      dropdownIndex,\n      index,\n      dropdownIsOpen,\n      onDownloadReport,\n      test: {\n        test_name,\n        test_description,\n        due_date,\n        completion_date,\n        student_test_id,\n        student_id,\n        problem_flag_count,\n      },\n      onEnterAnswers,\n      onDeleteTest,\n      onTestFlagReviewed,\n      handleTestSettingModalOpen,\n    } = this.props;\n    const { ReadingScore, WritingScore, ReadingAndWritingScore, MathScore } = this.state;\n    const formattedDueDate = moment(due_date).format('MM/DD/YY');\n    const formattedCompletedDate = moment(completion_date.date).format('MM/DD/YY');\n    return (\n      <React.Fragment>\n        <div className=\"card-full-width card-scored card\" style={{ margin: '10px' }}>\n          <div className=\"card-content\">\n            <div className=\" card-panel-row row mb-0\">\n              <div className=\"col s12\">\n                <ul className=\"to-do-list\">\n                  <li>\n                    <div\n                      className=\"row\"\n                      style={{ marginBottom: '0px !important', marginTop: '20px' }}\n                    >\n                      <div className=\"col s12 m6\">\n                        <strong className=\"list-title\">\n                          {test_name}\n                        </strong>\n                      </div>\n                      <div className=\"col s12 m6 right-align\">\n                        <div className=\"row icons-row\" style={{ marginBottom: '10px' }}>\n                          {problem_flag_count > 0 &&\n                            <span\n                              className=\"badge-rounded-xs badge red darken-2 white-text\"\n                              style={{\n                                minWidth: '20px',\n                                minHeight: '20px',\n                                borderRadius: '50%',\n                              }}\n                            >\n                              <i className=\"icon-flag\" />\n                            </span>}\n                          <div className=\"dropdown-block col\">\n                            <a\n                              href=\"#\"\n                              className=\"dropdown-trigger btn\"\n                              onClick={this.handleDropdownClick}\n                            >\n                              <i className=\"material-icons dots-icon\">more_vert</i>\n                            </a>\n                            <If condition={dropdownIsOpen && dropdownIndex === index}>\n                              <ul\n                                id=\"dropdown01\"\n                                style={{\n                                  display: 'block',\n                                  minWidth: '160px',\n                                  transformOrigin: '0px 0px 0px',\n                                  opacity: '1',\n                                  transform: 'scaleX(1) scaleY(1)',\n                                  width: '210px',\n                                }}\n                                className=\"dropdown-content\"\n                              >\n                                <li>\n                                  <a href=\"#\" onClick={handleTestSettingModalOpen}>\n                                    Edit Test Settings\n                                  </a>\n                                </li>\n                                <li>\n                                  <a href=\"#\" onClick={() => onEnterAnswers(student_test_id)}>\n                                    Edit/Enter Answers\n                                  </a>\n                                </li>\n                                <li>\n                                  <a href=\"#\" onClick={() => onDownloadReport(this.props.test)}>\n                                    Download score report\n                                  </a>\n                                </li>\n                                <li>\n                                  <a href=\"#\" className=\"disabled\">\n                                    Excuse/Unexcuse lateness\n                                  </a>\n                                </li>\n                                <li>\n                                  <a\n                                    className={problem_flag_count === 0 ? \"disabled\" : \"\"}\n                                    href=\"#\"\n                                    onClick={e => {\n                                      e.preventDefault();\n                                      onTestFlagReviewed(student_test_id, student_id);\n                                    }}\n                                  >\n                                    Mark flags reviewed\n                                  </a>\n                                </li>\n                                <li>\n                                  <a href=\"#\" className=\"disabled\">\n                                    Reset\n                                  </a>\n                                </li>\n                                <li>\n                                  <a\n                                    href=\"#\"\n                                    onClick={e => {\n                                      e.preventDefault();\n                                      onDeleteTest(\n                                        student_test_id,\n                                        student_id,\n                                        'completedStudentTests',\n                                      );\n                                    }}\n                                    className=\"red-text text-darken-3\"\n                                  >\n                                    Unassign\n                                  </a>\n                                </li>\n                              </ul>\n                            </If>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"row\" onClick={e => this.onEditTest(e)}>\n                      <div className=\"col s12 m8\">\n                        <ul className=\"info-list info-list-gray  assigned\">\n                          <li>\n                            <span className=\"list-status\">\n                              <span className=\"ico-mark\" />\n                              <span className=\"status-text\">\n                                Complete {formattedCompletedDate}\n                              </span>\n                            </span>\n                          </li>\n                          <li>\n                            <span className=\"list-date\">\n                              <i className=\"icon-calendar\" />\n                              <span className=\"date\">\n                                Due {formattedDueDate}\n                              </span>\n                            </span>\n                          </li>\n                        </ul>\n                        <div\n                          className=\"card-meta-block\"\n                          style={{ padding: '0px', marginTop: '10px' }}\n                        >\n                          <dl className=\"dl-horizontal\">\n                            <dt>Version:</dt>\n                            <dd>\n                              {test_description}\n                            </dd>\n                          </dl>\n                        </div>\n                      </div>\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <ul className=\"points-list-custom\" onClick={e => this.onEditTest(e)}>\n              {MathScore && ReadingAndWritingScore && ReadingScore\n                ? <li>\n                  <span\n                    className=\"badge-circle\"\n                    style={{\n                      backgroundColor: '#00BBFF',\n                      borderColor: '#00BBFF',\n                      width: '120px',\n                      height: '120px',\n                      fontSize: '55px',\n                    }}\n                  >\n                    <span className=\"badge-text\">\n                      <strong>\n                        <h2 style={{ marginBottom: '5px' }}>SAT Score</h2>\n                      </strong>\n                      <h2 style={{ marginBottom: '20px' }}>\n                        {MathScore.current_score +\n                            ReadingScore.current_score +\n                            ReadingAndWritingScore.current_score}\n                      </h2>\n                    </span>\n                  </span>\n                </li>\n                : <li>\n                  <span\n                    className=\"badge-circle\"\n                    style={{\n                      width: '120px',\n                      height: '120px',\n                      fontSize: '55px',\n                    }}\n                  >\n                    <span className=\"badge-text\">\n                      <strong>\n                        <h2 style={{ marginBottom: '10px' }}>SAT Score</h2>\n                      </strong>\n                      <h2 style={{ marginBottom: '15px' }}>n/a</h2>\n                    </span>\n                  </span>\n                </li>}\n              {MathScore\n                ? <li>\n                  <span\n                    className=\"badge-circle\"\n                    style={{\n                      backgroundColor: '#4785f4',\n                      borderColor: '#4785f4',\n                    }}\n                  >\n                    <span className=\"badge-text\">\n                      <strong>\n                        <h2 style={{ marginBottom: '5px' }}>Math</h2>\n                      </strong>\n                      <h2 style={{ marginBottom: MathScore.previous_score ? '5px' : '20px' }}>\n                        {MathScore.current_score}\n                        <br />\n                        {MathScore.previous_score === null ? '' : `${MathScore.delta}`}\n                      </h2>\n                    </span>\n                  </span>\n                </li>\n                : <li>\n                  <span className=\"badge-circle\">\n                    <span className=\"badge-text\">\n                      <strong>\n                        <h2 style={{ marginBottom: '10px' }}>Math</h2>\n                      </strong>\n                      <h2 style={{ marginBottom: '15px' }}>n/a</h2>\n                    </span>\n                  </span>\n                </li>}\n              {ReadingAndWritingScore\n                ? <li>\n                  <span\n                    className=\"badge-circle\"\n                    style={{\n                      backgroundColor: '#55b24b',\n                      borderColor: '#55b24b',\n                    }}\n                  >\n                    <span className=\"badge-text\" style={{ fontSize: '16px' }}>\n                      <strong>\n                          Writing\n                        {/* <br />\n                                &amp; Language */}\n                      </strong>\n                      <h2\n                        style={{\n                          marginBottom: ReadingAndWritingScore.previous_score ? '' : '15px',\n                        }}\n                      >\n                        {ReadingAndWritingScore.current_score}\n                        <br />\n                        {ReadingAndWritingScore.previous_score === null\n                          ? ''\n                          : `${ReadingAndWritingScore.delta}`}\n                      </h2>\n                    </span>\n                  </span>\n                </li>\n                : <li>\n                  <span className=\"badge-circle\">\n                    <span className=\"badge-text\" style={{ fontSize: '16px', marginBottom: '10px' }}>\n                      <strong>\n                          Writing\n                        {/* <br />\n                                &amp; Language */}\n                      </strong>\n                      <h2>n/a</h2>\n                    </span>\n                  </span>\n                </li>}\n\n              {ReadingScore\n                ? <li>\n                  <span\n                    className=\"badge-circle\"\n                    style={{\n                      backgroundColor: '#35a6af',\n                      borderColor: '#35a6af',\n                      width: '80px',\n                      height: '80px',\n                    }}\n                  >\n                    <span className=\"badge-text\" style={{ fontSize: '16px' }}>\n                        Reading\n                      <br />\n                      <h3 style={{ marginBottom: ReadingScore.previous_score ? '' : '20px' }}>\n                        {ReadingScore.current_score}\n                        <br />\n                        {ReadingScore.previous_score === null ? '' : `${ReadingScore.delta}`}\n                      </h3>\n                    </span>\n                  </span>\n                </li>\n                : <li>\n                  <span\n                    className=\"badge-circle\"\n                    style={{\n                      width: '80px',\n                      height: '80px',\n                    }}\n                  >\n                    <span className=\"badge-text\" style={{ fontSize: '16px' }}>\n                        Reading\n                      <br />\n                      <h3 style={{ marginTop: '10px' }}>n/a</h3>\n                    </span>\n                  </span>\n                </li>}\n            </ul>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nCompletedTestCard.propTypes = {\n  index: PropTypes.string,\n  dropdownIndex: PropTypes.string,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onDownloadReport: PropTypes.func.isRequired,\n  test: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  scores: makeSelectActiveTestScores(),\n  activeStudent: makeSelectActiveStudent(),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSetScores: scores => dispatch(setActiveTestScores(scores)),\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(CompletedTestCard);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// import 'react-datepicker/dist/react-datepicker-cssmodules.css';\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const {\n      testDate,\n      dueDate,\n      handleDatePickerChange,\n      allowStudentToEnterAnswers,\n      timed,\n      handleSettingsChange\n    } = this.props;\n    return (\n      <React.Fragment>\n        <h2>Settings</h2>\n        <div className=\"card card-test-detail\">\n          <div className=\"card-content\">\n            <div className=\"datepicker-field input-field\">\n              <i className=\"icon-calendar\"></i>\n              <DatePicker\n                selected={testDate}\n                withPortal\n                dateFormat=\"MM/dd/yy\"\n                id=\"testDate\"\n                name=\"testDate\"\n                onChange={event => handleDatePickerChange(\"testDate\", event)}\n              />\n              <label\n                className={testDate ? \"label active\" : \"label\"}\n                htmlFor=\"date_Test\"\n              >\n                Test Date\n              </label>\n            </div>\n            <div className=\"datepicker-field input-field\">\n              <i className=\"icon-calendar\"></i>\n              <DatePicker\n                selected={dueDate}\n                withPortal\n                dateFormat=\"MM/dd/yy\"\n                id=\"dueDate\"\n                name=\"dueDate\"\n                onChange={event => handleDatePickerChange(\"dueDate\", event)}\n              />\n              <label\n                className={dueDate ? \"label active\" : \"label\"}\n                htmlFor=\"date_Test\"\n              >\n                Due Date (optional)\n              </label>\n            </div>\n            <div className=\"input-field\">\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"allowStudentToEnterAnswers\"\n                    className=\"filled-in\"\n                    checked={allowStudentToEnterAnswers}\n                    onChange={handleSettingsChange}\n                  />\n                  <span>Allow Student to Enter Answers</span>\n                </label>\n              </p>\n            </div>\n            <div className=\"input-field\">\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"timed\"\n                    className=\"filled-in\"\n                    checked={timed}\n                    onChange={handleSettingsChange}\n                  />\n                  <span>Timed</span>\n                </label>\n              </p>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nSettings.propTypes = {\n  dueDate: PropTypes.any,\n  testDate: PropTypes.any,\n  timed: PropTypes.bool.isRequired,\n  handleSettingsChange: PropTypes.func.isRequired,\n  handleDatePickerChange: PropTypes.func.isRequired,\n  allowStudentToEnterAnswers: PropTypes.bool.isRequired\n};\n\nexport default Settings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from '../../../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../../../utils/getValueFromState';\nimport { versionOptions } from './utils';\n\nconst TestVersionSettings = ({ version, reading, writing, math, essay, includeScoreInImprovementMetrics, handleTestVersionSettingsChange }) => (\n  <React.Fragment>\n    <h2>Test Version</h2>\n    <div className=\"card card-test-detail\">\n      <div className=\"card-content\">\n        <div className=\"row\">\n          <div className=\"input-field col s12\">\n            <Dropdown\n              value={getValueFromState(version, versionOptions)}\n              onChange={handleTestVersionSettingsChange}\n              options={versionOptions}\n              label=\"Version\"\n              stateKey=\"version\"\n              dropdownKey=\"version\"\n            />\n          </div>\n        </div>\n        <div className=\"check-holder\">\n          <div className=\"row mb-0\">\n            <div className=\"col s6\">\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"reading\"\n                    className=\"filled-in\"\n                    checked={reading}\n                    onChange={handleTestVersionSettingsChange}\n                  />\n                  <span>Reading Section</span>\n                </label>\n              </p>\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"writing\"\n                    className=\"filled-in\"\n                    checked={writing}\n                    onChange={handleTestVersionSettingsChange}\n                  />\n                  <span>Writing Section</span>\n                </label>\n              </p>\n            </div>\n            <div className=\"col s6\">\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"math\"\n                    className=\"filled-in\"\n                    checked={math}\n                    onChange={handleTestVersionSettingsChange}\n                  />\n                  <span>Math Section</span>\n                </label>\n              </p>\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"essay\"\n                    className=\"filled-in\"\n                    checked={essay}\n                    onChange={handleTestVersionSettingsChange}\n                  />\n                  <span>Essay</span>\n                </label>\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"row mb-0\">\n          <div className=\"input-field col s12\">\n            <p>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  name=\"includeScoreInImprovementMetrics\"\n                  className=\"filled-in\"\n                  checked={includeScoreInImprovementMetrics}\n                  onChange={handleTestVersionSettingsChange}\n                />\n                <span>Include Score in Improvement Metrics</span>\n              </label>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </React.Fragment>\n);\n\nTestVersionSettings.propTypes = {\n  math: PropTypes.bool.isRequired,\n  essay: PropTypes.bool.isRequired,\n  reading: PropTypes.bool.isRequired,\n  writing: PropTypes.bool.isRequired,\n  version: PropTypes.string.isRequired,\n  handleTestVersionSettingsChange: PropTypes.func.isRequired,\n  includeScoreInImprovementMetrics: PropTypes.bool.isRequired,\n}\n\nexport default TestVersionSettings;\n","export const versionOptions = [\n  {\n    value: 'SAT Practice Test #1',\n    label: 'SAT Practice Test #1',\n  },\n  {\n    value: 'SAT Practice Test #2',\n    label: 'SAT Practice Test #2',\n  },\n  {\n    value: 'SAT Practice Test #3',\n    label: 'SAT Practice Test #3',\n  },\n  {\n    value: 'SAT Practice Test #4',\n    label: 'SAT Practice Test #4',\n  },\n];\n","/* eslint-disable react/no-did-update-set-state */\n/* eslint-disable react/no-did-mount-set-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { toast } from 'react-toastify';\nimport TestVersionPage from '../TestVersionPage';\nimport DetailTestScorePage from '../../../DetailTestScorePage';\nimport DetailTestAnswerSheetComplete from '../../../DetailTestAnswerSheetComplete';\nimport StrengthsAndWeaknesses from '../../../DetailTestStrengthsAndWeakesses';\nimport pdfMakeReport from './pdfMakeReport';\nimport {\n  makeSelectStudentSections,\n  makeSelectActiveStudentToken,\n  makeSelectTests,\n  makeSelectAssignedStudentTests,\n  makeSelectActiveStudent,\n  makeSelectActiveTestScores,\n  makeSelectErrorMessages,\n} from '../../../index/selectors';\nimport {\n  setStudentAssignedTests,\n  setStudentCompletedTests,\n  updateTestStatus,\n  setActiveTestScores,\n  getTestScores,\n  resetErrorMessage,\n  fetchStudentTestSections,\n} from '../../../index/actions';\nimport {\n  updateStudentTestSectionStatusApi,\n  updateStudentTestStatusApi,\n  fetchTestsByStudentIdApi,\n} from '../../../index/api';\n\nimport { css } from '@emotion/core';\nimport BarLoader from 'react-spinners/BarLoader';\n\nclass EditTestModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activePage: props.activePage,\n      scoresImages: null,\n      analysisBarImages: [],\n      analysisCicleImages: [],\n      answerSheetImages: [],\n      enablePublish: true,\n      subjects: [\n        'Practice Test Scores',\n        'Reading Analysis',\n        'Reading Analysis (cont’d)',\n        'Reading Answer Sheet',\n        'Writing Analysis',\n        'Writing Analysis (cont’d)',\n        'Writing Answer Sheet',\n        'Math Analysis',\n        \"Math Analysis (cont'd)\",\n        'Math Answer Sheet(no calc)',\n        'Math Answer Sheet(calculator)',\n      ],\n      adminInfo: 'Study Hut Tutoring | www.studyhut.com | (310) 555-1212 | info@studyhut.com',\n      userInfo: {\n        version: '',\n        target: 'Score Report',\n        test_date: '',\n        name: '',\n        test_type: 'Practice Test',\n        order: '3rd',\n      },\n      headerGradient: ['#ec693d 0%', '#649aab 61%', '#30add6 87%', '#18b5e9 100%'],\n      readingSectionCompleted: false,\n      writingSectionCompleted: false,\n      mathNoCalcSectionCompleted: false,\n      mathCalcSectionCompleted: false,\n      fetchScoresMsg: \"\",\n      updateTestStatusMsg: \"\",\n      updateTestSectionMessage: \"\",\n    };\n  }\n\n  componentDidMount = async () => {\n    const {\n      onFetchStudentTestSections,\n      studentToken,\n      test: { student_test_id },\n      activeStudent: { id },\n    } = this.props;\n\n    const postBody = {\n      id,\n      student_test_id,\n      studentToken,\n    };\n    onFetchStudentTestSections(postBody);\n    this.props.onRef(this);\n  };\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n    this.props.onResetErrorMessage(\"fetchScoresMsg\");\n    this.props.onResetErrorMessage(\"updateTestStatusMsg\");\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { activePage, sections, errorMessages } = nextProps;\n    const { onCloseEditTestModal } = this.props;\n    if (activePage !== this.state.activePage && activePage !== this.props.activePage) {\n      this.setState({ activePage });\n    }\n    if (sections.length !== 0) {\n      const { tests, test: { test_id } } = this.props;\n      sections.map(section => {\n        if (section.test_section_status === 'COMPLETED') {\n          const testIds = tests.map(test => test.id);\n          const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n          const currentTestSections = tests[currentTestIndex].test_sections;\n          const testSectionIndex = currentTestSections.findIndex(\n            testSection => testSection.id === section.test_section_id,\n          );\n          // If no match return and wait for new props\n          if (!currentTestSections[testSectionIndex]) return;\n\n          const sectionType = currentTestSections[testSectionIndex].name;\n          switch (sectionType) {\n            case 'Reading':\n              return this.setState({ readingSectionCompleted: true });\n            case 'Writing':\n              return this.setState({ writingSectionCompleted: true });\n            case 'Math (Calculator)':\n              return this.setState({ mathCalcSectionCompleted: true });\n            case 'Math (No Calculator)':\n              return this.setState({ mathNoCalcSectionCompleted: true });\n            default:\n          }\n        }\n      });\n    }\n    const errorConditon = (name) => (errorMessages[name] && errorMessages[name] !== this.state[name] && errorMessages[name] !== \"\");\n    if (errorConditon(\"fetchScoresMsg\")) {\n      this.setState({ fetchScoresMsg: errorMessages.fetchScoresMsg });\n      toast.error(errorMessages.fetchScoresMsg);\n      onCloseEditTestModal();\n    }\n    if (errorConditon(\"updateTestStatusMsg\")) {\n      this.setState({ updateTestStatusMsg: errorMessages.updateTestStatusMsg });\n      toast.error(errorMessages.updateTestStatusMsg);\n      onCloseEditTestModal();\n    }\n  }\n\n  getBase64ImageFromURL = url =>\n    new Promise((resolve, reject) => {\n      const img = new Image();\n      img.setAttribute('crossOrigin', 'anonymous');\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const dataURL = canvas.toDataURL('image/png');\n        resolve(dataURL);\n      };\n      img.onerror = error => {\n        reject(error);\n      };\n      img.src = url;\n    });\n\n  onSetActivePage = activePage => {\n    this.setState({\n      activePage,\n    });\n  };\n\n  getTargetImage = currentRef => {\n    const html2canvas = require('html2canvas');\n    const defaultCanvasSetting = {\n      scale: 2,\n      useCORS: true,\n      allowTaint: true,\n      backgroundColor: 'rgba(0,0,0,0)',\n      removeContainer: true,\n    };\n    const targetImg = html2canvas(currentRef, defaultCanvasSetting).then(canvas => {\n      const imgData = canvas.toDataURL('image/png', 1.0);\n      return imgData;\n    });\n    return targetImg;\n  };\n\n  getData = item =>\n    new Promise(resolve => {\n      const currentChild = item.child;\n      this.setState(\n        {\n          activePage: item.state,\n        },\n        async () => {\n          const data = await this[currentChild].getComponentImages();\n          switch (item.state) {\n            case 'StrengthsAndWeaknesses':\n              this.setState({\n                analysisCicleImages: data.circleImageList,\n                analysisBarImages: data.barImageList,\n              });\n              break;\n            case 'answerSheet':\n              this.setState({\n                answerSheetImages: data,\n              });\n              break;\n            case 'scores':\n              this.setState({\n                scoresImages: data,\n              });\n              break;\n            default:\n              break;\n          }\n          resolve();\n        },\n      );\n    });\n\n  generateScoreReportPdf = async () => {\n    this.setState({\n      enablePublish: false,\n    });\n    const imgDataLists = [];\n    const { subjects, adminInfo, headerGradient } = this.state;\n    const coverBackgroundImg = './static/images/sunset.jpg';\n    const logoImg = './static/images/study-hut-logo.png';\n    const backgroundImage = await this.getBase64ImageFromURL(\n      `${coverBackgroundImg}?auto=compress&cs=tinysrgb&dpr=1&w=500`,\n    );\n    const logo = await this.getBase64ImageFromURL(\n      `${logoImg}?auto=compress&cs=tinysrgb&dpr=1&w=500`,\n    );\n    const pageStates = [\n      {\n        state: 'scores',\n        child: 'ScoresChild',\n      },\n      {\n        state: 'StrengthsAndWeaknesses',\n        child: 'AnalysisChild',\n      },\n      {\n        state: 'answerSheet',\n        child: 'AnswerSheetChild',\n      },\n    ];\n    const getImagesPromise = pageStates.reduce(\n      (accumulatorPromise, item) =>\n        accumulatorPromise\n          .then(async () => {\n            const images = await this.getData(item);\n          })\n          .catch(console.error),\n      Promise.resolve(),\n    );\n\n    getImagesPromise.then(() => {\n      this.setState({\n        enablePublish: true,\n      });\n      const { scoresImages, analysisCicleImages, analysisBarImages, answerSheetImages } = this.state;\n      imgDataLists.push({\n        image: scoresImages,\n        width: 550,\n        margin: [0, 20, 0, 0],\n        pageBreak: 'after',\n      });\n      for (let i = 0; i < 3; i++) {\n        imgDataLists.push({\n          image: analysisCicleImages[i],\n          width: 300,\n          margin: [0, 20, 0, 0],\n        });\n        imgDataLists.push({\n          image: analysisBarImages[i],\n          width: 550,\n          margin: [0, 20, 0, 0],\n          pageBreak: 'after',\n        });\n        imgDataLists.push({\n          image: analysisBarImages[i],\n          width: 550,\n          margin: [0, 20, 0, 0],\n          pageBreak: 'after',\n        });\n        imgDataLists.push({\n          image: answerSheetImages[i],\n          width: 550,\n          margin: [0, 20, 0, 0],\n          pageBreak: 'after',\n        });\n      }\n      imgDataLists.push({\n        image: answerSheetImages[3],\n        width: 550,\n        margin: [0, 20, 0, 0],\n      });\n      const {\n        test: { test_description, completion_date },\n        activeStudent: { studentInformation: { firstName, lastName } },\n      } = this.props;\n      const userInfo = update(this.state.userInfo, {\n        $merge: {\n          name: `${firstName} ${lastName}`,\n          version: test_description,\n          test_date: moment(completion_date).format('MMMM Do YYYY'),\n        },\n      });\n      pdfMakeReport(\n        imgDataLists,\n        userInfo,\n        subjects,\n        adminInfo,\n        backgroundImage,\n        headerGradient,\n        logo,\n      );\n    });\n  };\n\n  onUpdateTestSectionMsg = (message) => this.setState({ updateTestSectionMessage: message })\n\n  renderCurrentPage = () => {\n    const { activePage } = this.state;\n    const { test, user, onDeleteTest, onSaveTestChanges, onOpentTestScore } = this.props;\n    if (activePage === 'testVersion') {\n      return (\n        <TestVersionPage\n          test={test}\n          user={user}\n          onDeleteTest={onDeleteTest}\n          onSaveTestChanges={onSaveTestChanges}\n        />\n      );\n    }\n    if (activePage === 'scores') {\n      return (\n        <div id=\"wrapper\">\n          <DetailTestScorePage\n            test={test}\n            getTargetImage={this.getTargetImage}\n            onRef={ref => (this.ScoresChild = ref)}\n            onGetTestScores={this.props.onGetTestScores}\n          />\n        </div>\n      );\n    }\n    if (activePage === 'answerSheet') {\n      const {\n        readingSectionCompleted,\n        writingSectionCompleted,\n        mathNoCalcSectionCompleted,\n        mathCalcSectionCompleted,\n        updateTestSectionMessage,\n        setIsCompleted,\n      } = this.state;\n      return (\n        <DetailTestAnswerSheetComplete\n          testScoreDetails={test}\n          getTargetImage={this.getTargetImage}\n          onRef={ref => (this.AnswerSheetChild = ref)}\n          handleTestScore={this.handleTestScore}\n          completedSections={{\n            readingSectionCompleted,\n            writingSectionCompleted,\n            mathNoCalcSectionCompleted,\n            mathCalcSectionCompleted,\n          }}\n          setIsCompleted={setIsCompleted}\n          test={this.props.test}\n          updateTestSectionMessage={updateTestSectionMessage}\n          onUpdateTestSectionMsg={this.onUpdateTestSectionMsg}\n          openTestScores={onOpentTestScore}\n        />\n      );\n    }\n\n    if (activePage === 'StrengthsAndWeaknesses') {\n      return (\n        <StrengthsAndWeaknesses\n          getTargetImage={this.getTargetImage}\n          onRef={ref => (this.AnalysisChild = ref)}\n          test={this.props.test}\n          activeStudent={this.props.activeStudent}\n        />\n      );\n    }\n    return null;\n  };\n\n  handleTestScore = async (activeSection, problemsByTest) => {\n    // Check for non-existing sections and set them to completed\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = problemsByTest;\n    if (!testReadingProblems) this.setState({ readingSectionCompleted: true });\n    if (!testWritingProblems) this.setState({ writingSectionCompleted: true });\n    if (!testMathCalcProblems) this.setState({ mathCalcSectionCompleted: true });\n    if (!testMathNoCalcProblems) this.setState({ mathNoCalcSectionCompleted: true });\n\n    // @TODO bring back started check for a test that was just created\n    // if (activeTest.test_section_status === 'STARTED') {\n    const { tests, test: { test_id }, test } = this.props;\n    const postBody = {\n      student_test_id: test.student_test_id,\n      student_test_section_id: activeSection.id,\n      student_test_section_status: 'COMPLETED',\n    };\n    const res = await updateStudentTestSectionStatusApi(postBody);\n    if (res && res.message) {\n      return this.onUpdateTestSectionMsg('Something went wrong completing this test section. Please try again later.');\n    }\n\n    // Update current section as completed\n    const currentTestSectionId = activeSection.test_section_id;\n    const testIds = tests.map(test => test.id);\n    const currentTestIndex = testIds.findIndex(testId => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    const testSectionIds = currentTestSections.map(testSection => testSection.id);\n    const currentTestSectionIndex = testSectionIds.findIndex(\n      testSectionId => testSectionId === currentTestSectionId,\n    );\n    const currentTestSection = currentTestSections[currentTestSectionIndex];\n    switch (currentTestSection.name) {\n      case 'Math (Calculator)':\n        this.setState({\n          mathCalcSectionCompleted: true,\n        });\n        break;\n      case 'Writing':\n        this.setState({\n          writingSectionCompleted: true,\n        });\n        break;\n      case 'Math (No Calculator)':\n        this.setState({\n          mathNoCalcSectionCompleted: true,\n        });\n        break;\n      case 'Reading':\n        this.setState({\n          readingSectionCompleted: true,\n        });\n        break;\n      default:\n        this.setState({\n          readingSectionCompleted: true,\n        });\n    }\n    const {\n      readingSectionCompleted,\n      writingSectionCompleted,\n      mathCalcSectionCompleted,\n      mathNoCalcSectionCompleted,\n    } = this.state;\n    if (\n      readingSectionCompleted &&\n      writingSectionCompleted &&\n      mathCalcSectionCompleted &&\n      mathNoCalcSectionCompleted\n    ) {\n      const postBody = {\n        student_test_id: test.student_test_id,\n        status: 'COMPLETED',\n      };\n      const { onOpentTestScore, onUpdateTestStatus } = this.props;\n      const currentTestStatus =\n        test.due_status === 'OVERDUE' ? 'overdueStudentTests' : 'assignedStudentTests';\n      onUpdateTestStatus(postBody, currentTestStatus, test.student_id);\n      // Delay set on saga before running onOpentTestScore()\n      onOpentTestScore({ ...test, status: 'COMPLETED' });\n    }\n  };\n\n  render() {\n    const { test, user, onCloseEditTestModal } = this.props;\n    const { activePage, enablePublish } = this.state;\n    const { title, test_name } = test;\n    const { studentInformation: { firstName, lastName } } = user;\n    const completedTest = test.status === 'COMPLETED';\n    return (\n      <div className=\"wrapper\">\n        <div\n          className=\"card-modal card-main card switcher-section grey lighten-5 modal\"\n          style={{\n            zIndex: '1003',\n            display: 'block',\n            position: 'absolute',\n            top: '0',\n            minHeight: '100%',\n            minWidth: '100%',\n          }}\n        >\n          <div className=\"header-row card-panel light-blue lighten-1 white-text\">\n            <div className=\"card-panel-row row\">\n              <div className=\"icon-col col s1\">\n                <i className=\"icon-letter-a\" />\n              </div>\n              <div className=\"col s9\">\n                <div className=\"card-panel-text center-align\">\n                  <div className=\"text-xlarge\">\n                    {title}\n                  </div>\n                  <div className=\"text-small\">\n                    Version: {test_name}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col s1 right-align\">\n                <div className=\"close-block\">\n                  <a href=\"#\" className=\"modal-close close\">\n                    <i className=\"icon-close-thin\" onClick={onCloseEditTestModal} />\n                  </a>\n                </div>\n              </div>\n            </div>\n            <div className=\"header-row-block card-panel-row row\">\n              <div className=\"col s3\">&nbsp;</div>\n              <div className=\"col s9 right-align\">\n                <div>\n                  <span className=\"name\">\n                    {firstName} {lastName}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"nav-header white\">\n            <div className=\"nav-additional\">\n              <ul className=\"menu-additional\">\n                {completedTest &&\n                  <li className=\"col s3\">\n                    <a\n                      className={activePage === 'scores' ? 'active' : ''}\n                      onClick={() => enablePublish && this.onSetActivePage('scores')}\n                      href=\"#\"\n                    >\n                      Scores\n                    </a>\n                  </li>}\n                <li className=\"col s3\">\n                  <a\n                    className={activePage === 'answerSheet' ? 'active' : ''}\n                    onClick={() => enablePublish && this.onSetActivePage('answerSheet')}\n                    href=\"#\"\n                  >\n                    Answer Sheet\n                  </a>\n                </li>\n                {completedTest &&\n                  <li className=\"col s3\">\n                    <a\n                      className={activePage === 'StrengthsAndWeaknesses' ? 'active' : ''}\n                      onClick={() =>\n                        enablePublish && this.onSetActivePage('StrengthsAndWeaknesses')}\n                      href=\"#\"\n                    >\n                      Strengths &amp; Weaknesses\n                    </a>\n                  </li>}\n                {completedTest &&\n                  <li className=\"menu-special col s3\">\n                    <a href=\"#\" onClick={() => enablePublish && this.generateScoreReportPdf()}>\n                      Download Score Report\n                      <i className=\"icon-download-file\" />\n                    </a>\n                  </li>}\n              </ul>\n            </div>\n          </div>\n          <div className=\"sweet-loading\">\n            <BarLoader\n              height={3}\n              width={'100%'}\n              color={'#36D7B7'}\n              loading={!this.state.enablePublish}\n            />\n          </div>\n          {\n            !this.state.enablePublish && <div style={{ textAlign: 'center', padding: 10 }}>please wait the test score report downloading...</div>\n          }\n          <div className=\"content-section\">\n            <div className=\"content-section-holder\">\n              {this.renderCurrentPage()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nEditTestModal.propTypes = {\n  test: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSaveTestChanges: PropTypes.func.isRequired,\n  onCloseEditTestModal: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  tests: makeSelectTests(),\n  assignedTests: makeSelectAssignedStudentTests(),\n  activeStudent: makeSelectActiveStudent(),\n  activeTestScores: makeSelectActiveTestScores(),\n  errorMessages: makeSelectErrorMessages(),\n});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n    onSetAssignedTests: tests => dispatch(setStudentAssignedTests(tests)),\n    onSetCompletedTests: tests => dispatch(setStudentCompletedTests(tests)),\n    onUpdateTestStatus: (payload, currentStatus, studentId) =>\n      dispatch(updateTestStatus(payload, currentStatus, studentId)),\n    onSetScores: scores => dispatch(setActiveTestScores(scores)),\n    onGetTestScores: (postBody) => dispatch(getTestScores(postBody)),\n    onResetErrorMessage: errorName => dispatch(resetErrorMessage(errorName)),\n  };\n}\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(EditTestModal);\n","import pdfMake from \"pdfmake/build/pdfmake\";\nimport vfsFonts from \"pdfmake/build/vfs_fonts\";\n\nexport default (\n  imgDataLists,\n  userInfo,\n  subjects,\n  adminInfo,\n  backgroundImg,\n  headerGradient,\n  logo,\n) => {\n  const { vfs } = vfsFonts.pdfMake;\n  pdfMake.vfs = vfs;\n\n  const documentDefinition = {\n    pageSize: \"A4\",\n    pageOrientation: \"portrait\",\n    pageMargins: [30, 50, 20, 25],\n    header(currentPage) {\n      if (currentPage > 1) {\n        return [\n          {\n            canvas: [\n              {\n                type: \"rect\",\n                x: 0,\n                y: 0,\n                w: 700,\n                h: 50,\n                linearGradient: headerGradient,\n              },\n            ],\n          },\n          {\n            text: subjects[currentPage - 2],\n            style: { fontSize: 28 },\n            absolutePosition: { x: 50, y: 10 },\n          },\n          {\n            image: logo,\n            width: 113,\n            height: 40,\n            absolutePosition: { x: 450, y: 10 },\n          },\n        ];\n      }\n    },\n    background(currentPage, pageSize) {\n      if (currentPage === 1) {\n        return {\n          image: backgroundImg,\n          height: 841.89,\n          alignment: \"center\",\n        };\n      }\n    },\n    footer(currentPage) {\n      if (currentPage === 1) {\n        return {\n          columns: [\n            {\n              text: adminInfo,\n              alignment: \"center\",\n            },\n          ],\n        };\n      }\n      return {\n        columns: [\n          {\n            text: adminInfo,\n            alignment: \"left\",\n            margin: [50, 0, 0, 0],\n            width: \"70%\",\n            style: { fontSize: 10, color: \"#818284\" },\n          },\n          {\n            text: `${userInfo.name} | Page ${(currentPage - 1).toString()}`,\n            alignment: \"right\",\n            margin: [0, 0, 20, 0],\n            width: \"30%\",\n            style: { fontSize: 10, color: \"#3F3E40\" },\n          },\n        ],\n      };\n    },\n    content: [\n      {\n        image: logo,\n        width: 226,\n        height: 79,\n        absolutePosition: { x: 50, y: 50 },\n      },\n      {\n        text: userInfo.test_date,\n        alignment: \"right\",\n      },\n      {\n        text: userInfo.version,\n        alignment: \"right\",\n      },\n      {\n        text: userInfo.name,\n        alignment: \"center\",\n        margin: [0, 300, 0, 0],\n        style: { fontSize: 28 },\n      },\n      {\n        text: userInfo.order,\n        alignment: \"center\",\n        margin: [0, 10, 0, 0],\n        style: { fontSize: 32, bold: true },\n      },\n      {\n        text: userInfo.test_type,\n        alignment: \"center\",\n        margin: [0, 10, 0, 0],\n        style: { fontSize: 28, bold: true },\n      },\n      {\n        text: userInfo.target,\n        alignment: \"center\",\n        margin: [0, 10, 0, 0],\n        style: { fontSize: 28 },\n        pageBreak: \"after\",\n      },\n    ],\n    defaultStyle: {\n      fontSize: 12,\n      color: \"#FFFFFF\",\n    },\n  };\n  imgDataLists.map(imgData => {\n    documentDefinition.content.push(imgData);\n  });\n  pdfMake.createPdf(documentDefinition).download();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentWillReceiveProps = nextProps => {\n    const { existingSections } = nextProps;\n    const matches = (prev, next) =>\n      Object.keys(next).every(key => prev.hasOwnProperty(key) && prev[key] === next[key]);\n    if (!matches(existingSections, this.props.existingSections)) {\n      this.setActiveTab(existingSections);\n    }\n  };\n\n  setActiveTab = (existingSections) => {\n    const { onSetActivePage } = this.props;\n    Object.keys(existingSections).find((key) => {\n      if (existingSections[key] === true) {\n        switch (key) {\n          case 'reading':\n            return onSetActivePage(\"activeReadingSection\");\n          case 'writing':\n            return onSetActivePage(\"activeWritingSection\");\n          case 'mathCalc':\n            return onSetActivePage(\"activeMathWithCalcSection\");\n          case 'mathNoCalc':\n            return onSetActivePage(\"activeMathNoCalcSection\");\n          default:\n            return '';\n        }\n      }\n    });\n  }\n\n  render() {\n    const {\n      onCloaseAnswerWrapper,\n      onSetActivePage,\n      testDescription,\n      active,\n      existingSections: { reading, writing, mathCalc, mathNoCalc },\n    } = this.props;\n\n    return (\n      <React.Fragment>\n        <div className=\"header-row card-panel light-blue lighten-1 white-text\">\n          <div className=\"card-panel-row row\">\n            <div className=\"col s10\">\n              <div className=\"card-panel-text\">\n                <h1 className=\"text-large\">\n                  {testDescription}\n                </h1>\n              </div>\n            </div>\n            <div className=\"col s2 right-align\">\n              <div className=\"close-block\">\n                <a href=\"#\" className=\"modal-close close\">\n                  <i className=\"icon-close-thin\" onClick={onCloaseAnswerWrapper} />\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"nav-header\" style={{ cursor: \"pointer\", background: \"white\" }}>\n          {/* tabs switcher */}\n          <ul className=\"tabs tabs-flex\">\n            {reading && (\n              <li className=\"tab col s3\">\n                <a\n                  className={active === 'activeReadingSection' ? 'active' : ''}\n                  onClick={() => onSetActivePage(\"activeReadingSection\")}\n                >\n                  <b>Reading</b>\n                </a>\n              </li>\n            )}\n            {writing && (\n              <li className=\"tab col s3\">\n                <a\n                  className={active === 'activeWritingSection' ? 'active' : ''}\n                  onClick={() => onSetActivePage(\"activeWritingSection\")}\n                >\n                  <b>Writing</b>\n                </a>\n              </li>\n            )}\n            {mathNoCalc && (\n              <li className=\"tab col s3\">\n                <a\n                  className={active === 'activeMathNoCalcSection' ? 'active' : ''}\n                  onClick={() => onSetActivePage(\"activeMathNoCalcSection\")}\n                >\n                  <b>Math (no calc)</b>\n                </a>\n              </li>\n            )}\n            {mathCalc && (\n              <li className=\"tab col s3\">\n                <a\n                  className={active === 'activeMathWithCalcSection' ? 'active' : ''}\n                  onClick={() => onSetActivePage(\"activeMathWithCalcSection\")}\n                >\n                  <b>Math (calculator)</b>\n                </a>\n              </li>\n            )}\n          </ul>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nNavBar.propTypes = {\n  onCloaseAnswerWrapper: PropTypes.func.isRequired,\n  onSetActivePage: PropTypes.func.isRequired,\n  testDescription: PropTypes.string.isRequired,\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport ProblemRow from \"./ProblemRow\";\n\nclass InCompleteReadingTest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      problems: [],\n    };\n  }\n  componentWillReceiveProps = nextProps => {\n    const { testSection } = nextProps;\n    if (!testSection || !testSection.hasOwnProperty('problems')) return;\n    const updatedProblems = update(this.state.problems, {\n      $set: testSection.problems.problems,\n    });\n    this.setState({\n      problems: updatedProblems,\n    });\n  };\n\n  mapProblems = () =>\n    this.state.problems.map((problem, index) => (\n      <ProblemRow\n        problem={problem}\n        index={index}\n        key={problem.test_problem_id}\n        onAddStudentAnswerToTest={this.props.onAddStudentAnswerToTest}\n      />\n    ));\n\n  render() {\n    const {\n      open,\n      testSection,\n      handleTestScore,\n    } = this.props;\n    return (\n      <div>\n        {open && (\n          <React.Fragment>\n            <div className=\"full-height-section\">\n              <div className=\"content-section content-section-simulated\">\n                <div className=\"content-section-holder\">\n                  <div className=\"card-full-height card-student card-main-full card\">\n                    <div className=\"card-content\">\n                      <div className=\"custom-form\">\n                        <div className=\"jcf-scrollable no-border height-window\">\n                          <ol\n                            className=\"answers-list answers-list-columns\"\n                            style={{ marginBottom: \"20px\" }}\n                          >\n                            {testSection && testSection.problems && this.mapProblems()}\n                          </ol>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"btn-holder right-align\">\n                      <a\n                        href=\"#\"\n                        className=\"btn btn-xlarge waves-effect waves-light bg-blue\"\n                        onClick={() => handleTestScore(this.props.testSection)}\n                      >\n                        Score Test\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nInCompleteReadingTest.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n  testSection: PropTypes.object.isRequired,\n  onStudentTestScore: PropTypes.func.isRequired,\n  handleTestScore: PropTypes.func.isRequired,\n};\n\nexport default InCompleteReadingTest;\n","import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\n\nclass ProblemRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [\n        {\n          id: 0,\n          label: \"A\",\n          selected: false,\n        },\n        {\n          id: 1,\n          label: \"B\",\n          selected: false,\n        },\n        {\n          id: 2,\n          label: \"C\",\n          selected: false,\n        },\n        {\n          id: 3,\n          label: \"D\",\n          selected: false,\n        },\n      ],\n    };\n  }\n\n  componentDidMount = () => {\n    const { problem } = this.props;\n    if (!problem && !problem.student_answer) {\n      return;\n    }\n    const studentAnswer = problem.student_answer;\n    let index = -1;\n    switch (studentAnswer) {\n      case \"A\":\n        index = 0;\n        break;\n      case \"B\":\n        index = 1;\n        break;\n      case \"C\":\n        index = 2;\n        break;\n      case \"D\":\n        index = 3;\n        break;\n      default:\n        break;\n    }\n    if (index !== -1) this.handleClickBadge(index, false);\n  };\n\n  handleClickBadge = (index, isSavingStudentAns) => {\n    const currentBadge = this.state.problemCells[index];\n    const selectedIndex = this.state.selectedIndex;\n    if (selectedIndex === -1) {\n      const updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n      this.onSaveStudentAnswer(updatedProblemCells, index, isSavingStudentAns);\n    } else {\n      const updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n        [selectedIndex]: { selected: { $set: false } },\n      });\n      this.onSaveStudentAnswer(updatedProblemCells, index, isSavingStudentAns);\n    }\n  };\n\n  onSaveStudentAnswer = (updatedProblemCells, index, isSavingStudentAns) => {\n    const { onAddStudentAnswerToTest, problem } = this.props;\n    this.setState({ problemCells: updatedProblemCells, selectedIndex: index });\n    const { label } = this.state.problemCells[index];\n    if (isSavingStudentAns) onAddStudentAnswerToTest(problem.id, label);\n  };\n  render() {\n    const { problemCells } = this.state;\n    return (\n      <li className=\"answers-list-holder\">\n        {/* we are not using input box for now */}\n        {/* {this.props.problem.answerInput === true ? (<input type=\"text\" className=\"answer-input\" tabIndex={0} />):( */}\n        <ul className=\"answer-list\">\n          {problemCells.map((cell, index) => (\n            <li\n              style={{ cursor: \"pointer\" }}\n              onClick={() => this.handleClickBadge(index, true)}\n              key={index}\n            >\n              <span\n                className=\"badge-circle badge-circle-bordered\"\n                style={{\n                  color: cell.selected ? \"#fff\" : \"\",\n                  borderColor: cell.selected ? \"#19b4e9\" : \"\",\n                  backgroundColor: cell.selected ? \"#19b4e9\" : \"\",\n                }}\n              >\n                {cell.label}\n              </span>\n            </li>\n          ))}\n        </ul>\n        {/* )} */}\n      </li>\n    );\n  }\n}\n\nProblemRow.propTypes = {\n  problem: PropTypes.object.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n};\n\nexport default ProblemRow;\n","import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\n\nclass StartReadingTest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sampleProblems: [],\n    };\n  }\n\n  componentWillReceiveProps = nextProps => {\n    const { testSection } = nextProps;\n    if (!testSection || !testSection.hasOwnProperty('problems')) return;\n    const updatedProblems = update(this.state.sampleProblems, {\n      $set: testSection.problems.problems,\n    });\n    this.setState({\n      sampleProblems: updatedProblems,\n    });\n  };\n\n  mapProblems = () => {\n    const { sampleProblems } = this.state;\n    return sampleProblems.map((problem, index) => (\n      <li className=\"answers-list-holder\" key={index}>\n        <ul className=\"answer-list\">\n          <li>\n            <span className=\"badge-circle badge-circle-bordered\">A</span>\n          </li>\n          <li>\n            <span\n              className=\"badge-circle badge-circle-bordered\"\n              style={{\n                color: \"#fff\",\n                borderColor: \"#19b4e9\",\n                backgroundColor: \"#19b4e9\",\n              }}\n            >\n              B\n            </span>\n          </li>\n          <li>\n            <span className=\"badge-circle badge-circle-bordered\">C</span>\n          </li>\n          <li>\n            <span className=\"badge-circle badge-circle-bordered\">D</span>\n          </li>\n        </ul>\n      </li>\n    ));\n  };\n\n  render() {\n    const { open, onSetActivePage, testSection } = this.props;\n    return (\n      <React.Fragment>\n        {open && testSection.problems && (\n          <div className=\"tabs-content\">\n            <div id=\"tab_reading\" className=\"tab-content\">\n              <div className=\"content-section content-section-simulated\">\n                <div className=\"content-section-holder\">\n                  <div className=\"card-full-height card-student card-main-full card\">\n                    <div className=\"card-content\">\n                      <div className=\"custom-form blured-effect\">\n                        <div className=\"jcf-scrollable no-border height-window\">\n                          <ol className=\"answers-list answers-list-columns\">\n                            {this.mapProblems()}\n                          </ol>\n                        </div>\n                      </div>\n                      <div className=\"starting-block\">\n                        <div className=\"holder\">\n                          <span className=\"title\">\n                            This section has {testSection ? testSection.problems.problems.length : \"0\"} questions and is {testSection ? testSection.problems.time_limit : \"0\"} minutes\n                            total\n                          </span>\n                          <a\n                            onClick={() =>\n                              onSetActivePage(\"showInCompleteTest\")\n                            }\n                            className=\"btn btn-xlarge waves-effect waves-light bg-blue\"\n                          >\n                            Begin Section\n                          </a>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nStartReadingTest.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onSetActivePage: PropTypes.func.isRequired,\n  testSection: PropTypes.object.isRequired,\n};\n\nexport default StartReadingTest;\n","import React from 'react';\nimport update from 'immutability-helper';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {createStructuredSelector} from 'reselect';\nimport PropTypes from 'prop-types';\nimport NavBar from './common/NavBar';\nimport InCompleteTestSection from './components/InCompleteSection';\nimport PreStartTestSection from './components/StartSection';\nimport { toast } from 'react-toastify';\nimport Toast from '../../../../Toast';\nimport {\n  addStudentAnswerToTestApi,\n  updateStudentTestSectionStatusApi,\n  updateStudentTestStatusApi,\n} from '../../../index/api';\nimport {\n  makeSelectStudentSections,\n  makeSelectActiveStudentToken,\n  makeSelectActiveStudent,\n  makeSelectTests,\n} from '../../../index/selectors';\nimport {fetchStudentTestSections} from '../../../index/actions';\n\n\nclass EnterAnswerWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      previewTest: false,\n      startedTest: false,\n      testSections: [],\n      studentTestId: \"\",\n      testReadingProblems: null,\n      testWritingProblems: null,\n      testMathCalcProblems: null,\n      testMathNoCalcProblems: null,\n      updatedState: {\n        activeReadingSection: true,\n        showInCompleteTest: false,\n        activeWritingSection: false,\n        activeMathNoCalcSection: false,\n        activeMathWithCalcSection: false,\n        activeSection: \"\",\n      },\n      readingSectionCompleted: false,\n      writingSectionCompleted: false,\n      mathCalcSectionCompleted: false,\n      mathNoCalcSectionCompleted: false,\n    };\n  }\n\n  componentDidMount = () => {\n    const {\n      onFetchStudentTestSections,\n      sections,\n      studentToken,\n      test: {student_test_id},\n      activeStudent: {id},\n    } = this.props;\n    const postBody = {\n      id,\n      student_test_id,\n      studentToken,\n    };\n    onFetchStudentTestSections(postBody);\n  };\n\n  componentWillReceiveProps = (nextProps) => {\n    const { sections, student_test_id } = nextProps;\n    if (sections.length !== 0) {\n      this.onSetProblems(sections, student_test_id);\n    }\n  };\n\n  onSetProblems = (sections, studentTestId) => {\n    const {\n      tests,\n      test: { test_id },\n    } = this.props;\n    const testIds = tests.map((test) => test.id);\n    const currentTestIndex = testIds.findIndex((testId) => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    sections.map((section) => {\n      const testSectionIds = currentTestSections.map((testSection) => testSection.id);\n      const currentTestSectionIndex = testSectionIds.findIndex(\n        (testSectionId) => testSectionId === section.test_section_id,\n      );\n      const currentTestSection = currentTestSections[currentTestSectionIndex];\n      if (!currentTestSection) return;\n      switch (currentTestSection.name) {\n        case \"Math (Calculator)\":\n          this.setState({\n            testMathCalcProblems: section,\n          });\n          break;\n        case \"Writing\":\n          this.setState({\n            testWritingProblems: section,\n          });\n          break;\n        case \"Math (No Calculator)\":\n          this.setState({\n            testMathNoCalcProblems: section,\n          });\n          break;\n        case \"Reading\":\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n        default:\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n      }\n    });\n    this.setState({\n      testSections: sections,\n      studentTestId,\n    });\n  };\n\n  onSetActivePage = async (name) => {\n    const currentSection = this.state.updatedState.activeSection;\n    let updatedState;\n    if (name === 'showInCompleteTest') {\n      updatedState = update(this.state.updatedState, {\n        [name]: {$set: true},\n        [currentSection]: {$set: false},\n      });\n    } else {\n      updatedState = update(this.state.updatedState, {\n        [name]: {$set: true},\n        [currentSection]: {$set: false},\n        activeSection: {$set: name},\n      });\n    }\n    this.setState({ updatedState });\n    if (name === \"showInCompleteTest\") {\n      const currentProblems = this.getCurrentTestProblems();\n      const test_section_id = currentProblems.id;\n      const postBody = {\n        student_test_id: currentProblems.student_test_id,\n        student_test_section_id: test_section_id,\n        student_test_section_status: 'STARTED',\n      };\n      const response = await updateStudentTestSectionStatusApi(postBody);\n      if (response && response.ok === true) {\n        // Check for successful response before starting test or no answers will get recorded\n        toast.success(\"Test section is now STARTED.\");\n        this.setState({\n          previewTest: false,\n          startedTest: true,\n        });\n      }\n    } else {\n      this.setState({\n        previewTest: true,\n        startedTest: false,\n      });\n    }\n  };\n\n  onAddStudentAnswerToTest = async (test_problem_id, answer) => {\n    const {studentTestId} = this.state;\n    const postBody = {\n      student_test_id: studentTestId,\n      test_problem_id,\n      answer,\n    };\n    await addStudentAnswerToTestApi(postBody);\n  };\n\n  getCurrentTestProblems = () => {\n    const activeSection = this.state.updatedState.activeSection;\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    switch (activeSection) {\n      case \"activeReadingSection\":\n        return testReadingProblems;\n      case \"activeWritingSection\":\n        return testWritingProblems;\n      case \"activeMathWithCalcSection\":\n        return testMathCalcProblems;\n      case \"activeMathNoCalcSection\":\n        return testMathNoCalcProblems;\n      default:\n        return '';\n    }\n  };\n\n  handleTestScore = async (activeTest) => {\n    // Check for non-existing sections and set them to completed\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    if (!testReadingProblems) this.setState({ readingSectionCompleted: true });\n    if (!testWritingProblems) this.setState({ writingSectionCompleted: true });\n    if (!testMathCalcProblems) this.setState({ mathCalcSectionCompleted: true });\n    if (!testMathNoCalcProblems) this.setState({ mathNoCalcSectionCompleted: true });\n\n    // Update current section as completed\n    const {\n      tests,\n      test: { test_id },\n    } = this.props;\n    const currentTestSectionId = activeTest.test_section_id;\n    const testIds = tests.map((test) => test.id);\n    const currentTestIndex = testIds.findIndex((testId) => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    const testSectionIds = currentTestSections.map((testSection) => testSection.id);\n    const currentTestSectionIndex = testSectionIds.findIndex(\n      (testSectionId) => testSectionId === currentTestSectionId,\n    );\n    const currentTestSection = currentTestSections[currentTestSectionIndex];\n    switch (currentTestSection.name) {\n      case \"Math (Calculator)\":\n        this.setState({\n          mathCalcSectionCompleted: true,\n        });\n        break;\n      case \"Writing\":\n        this.setState({\n          writingSectionCompleted: true,\n        });\n        break;\n      case \"Math (No Calculator)\":\n        this.setState({\n          mathNoCalcSectionCompleted: true,\n        });\n        break;\n      case \"Reading\":\n        this.setState({\n          readingSectionCompleted: true,\n        });\n        break;\n      default:\n        this.setState({\n          readingSectionCompleted: true,\n        });\n    }\n    // @TODO bring back started check for a test that was just created\n    // if (activeTest.test_section_status === 'STARTED') {\n    const postBody = {\n      student_test_id: activeTest.student_test_id,\n      student_test_section_id: activeTest.id,\n      student_test_section_status: \"COMPLETED\",\n    };\n    await updateStudentTestSectionStatusApi(postBody);\n    const {\n      readingSectionCompleted,\n      writingSectionCompleted,\n      mathCalcSectionCompleted,\n      mathNoCalcSectionCompleted,\n    } = this.state;\n    if (\n      readingSectionCompleted &&\n        writingSectionCompleted &&\n        mathCalcSectionCompleted &&\n        mathNoCalcSectionCompleted\n    ) {\n      const postBody = {\n        student_test_id: activeTest.student_test_id,\n        status: \"COMPLETED\",\n      };\n      await updateStudentTestStatusApi(postBody);\n      toast.success(\"All test sections have been COMPLETED.\");\n      const { onOpentTestScore } = this.props;\n      onOpentTestScore(activeTest);\n    } else {\n      toast.success(\"Test section is now COMPLETED.\");\n    }\n    // }\n    // }\n  };\n\n  getExistingSections = () => {\n    const { testReadingProblems, testWritingProblems, testMathCalcProblems, testMathNoCalcProblems } = this.state;\n    return {\n      reading: !!testReadingProblems,\n      writing: !!testWritingProblems,\n      mathCalc: !!testMathCalcProblems,\n      mathNoCalc: !!testMathNoCalcProblems,\n    };\n  }\n\n  render() {\n    const {\n      startedTest,\n      previewTest,\n      updatedState,\n    } = this.state;\n    const {\n      onCloaseAnswerWrapper,\n      open,\n      test: {test_description},\n      test,\n      onAddStudentAnswerToTest,\n    } = this.props;\n    if (!test) return;\n    return (\n      <React.Fragment>\n        {open && (\n          <div className=\"starting\">\n            <div className=\"main-holder grey lighten-5\">\n              <NavBar\n                onCloaseAnswerWrapper={onCloaseAnswerWrapper}\n                onSetActivePage={this.onSetActivePage}\n                testDescription={test_description}\n                active={updatedState.activeSection}\n                existingSections={this.getExistingSections()}\n              />\n              <PreStartTestSection\n                open={previewTest && this.getCurrentTestProblems()}\n                onSetActivePage={this.onSetActivePage}\n                testSection={this.getCurrentTestProblems()}\n              />\n              <InCompleteTestSection\n                open={startedTest && this.getCurrentTestProblems()}\n                onAddStudentAnswerToTest={onAddStudentAnswerToTest}\n                testSection={this.getCurrentTestProblems()}\n                onStudentTestScore={onCloaseAnswerWrapper}\n                handleTestScore={this.handleTestScore}\n              />\n              <Toast />\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nEnterAnswerWrapper.propTypes = {\n  onCloaseAnswerWrapper: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  test: PropTypes.object,\n  onOpentTestScore: PropTypes.func.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeStudent: makeSelectActiveStudent(),\n  tests: makeSelectTests(),\n});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n  };\n}\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(EnterAnswerWrapper);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\n\nclass OverDueTestCard extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  handleDropdownClick = event => {\n    const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  };\n\n  render() {\n    const {\n      dropdownIndex,\n      index,\n      dropdownIsOpen,\n      test: { test_name, test_description, due_date, assignment_date, student_test_id, student_id },\n      onEnterAnswers,\n      handleTestSettingModalOpen,\n      onDeleteTest,\n      onTestFlagReviewed,\n    } = this.props;\n    const formattedDueDate = moment(due_date).format(\"MM/DD/YY\");\n    const formattedCompletedDate = moment(assignment_date).format(\"MM/DD/YY\");\n    return (\n      <React.Fragment>\n        <div\n          className=\"card-full-width card-scored card\"\n          style={{ margin: \"10px\", minWidth: \"580px\" }}\n        >\n          <div className=\"card-content\">\n            <div className=\" card-panel-row row mb-0\">\n              <div className=\"col s12\">\n                <ul className=\"to-do-list\">\n                  <li>\n                    <div\n                      className=\"row\"\n                      style={{ marginBottom: \"0px !important\", marginTop: \"20px\" }}\n                    >\n                      <div className=\"col s12 m6\">\n                        <strong className=\"list-title\">{test_name}</strong>\n                      </div>\n                      <div className=\"col s6 m6 right-align\">\n                        <div className=\"row icons-row\" style={{ marginBottom: \"10px\" }}>\n                          <div className=\"dropdown-block col\">\n                            <a\n                              href=\"#\"\n                              className=\"dropdown-trigger btn\"\n                              onClick={this.handleDropdownClick}\n                            >\n                              <i className=\"material-icons dots-icon\">more_vert</i>\n                            </a>\n                            <If condition={dropdownIsOpen && dropdownIndex === index}>\n                              <ul\n                                id=\"dropdown01\"\n                                style={{\n                                  display: \"block\",\n                                  minWidth: \"160px\",\n                                  transformOrigin: \"0px 0px 0px\",\n                                  opacity: \"1\",\n                                  transform: \"scaleX(1) scaleY(1)\",\n                                  width: \"210px\",\n                                }}\n                                className=\"dropdown-content\"\n                              >\n                                <li>\n                                  <a href=\"#\" onClick={handleTestSettingModalOpen}>\n                                    Edit Test Settings\n                                  </a>\n                                </li>\n                                <li>\n                                  <a href=\"#\" onClick={() => onEnterAnswers(student_test_id)}>\n                                    Edit/Enter Answers\n                                  </a>\n                                </li>\n                                <li>\n                                  <a href=\"#\" className=\"disabled\">\n                                    Excuse/Unexcuse lateness\n                                  </a>\n                                </li>\n                                <li>\n                                  <a\n                                    href=\"#\"\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      onTestFlagReviewed(student_test_id, student_id);\n                                    }}\n                                  >\n                                    Mark flags reviewed\n                                  </a>\n                                </li>\n                                <li>\n                                  <a href=\"#\" className=\"disabled\">\n                                    Reset\n                                  </a>\n                                </li>\n                                <li>\n                                  <a\n                                    href=\"#\"\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      onDeleteTest(student_test_id, student_id, \"overdueStudentTests\");\n                                    }}\n                                    className=\"red-text text-darken-3\"\n                                  >\n                                    Unassign\n                                  </a>\n                                </li>\n                              </ul>\n                            </If>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col s12 m8\">\n                        <ul className=\"info-list info-list-gray  overdue\">\n                          <li>\n                            <span className=\"list-status\">\n                              <span className=\"ico-mark\" />\n                              <span className=\"status-text\">Assigned {formattedCompletedDate}</span>\n                            </span>\n                          </li>\n                          <li>\n                            <span className=\"list-date\">\n                              <i className=\"icon-calendar\" />\n                              <span className=\"date\">Due {formattedDueDate}</span>\n                            </span>\n                          </li>\n                        </ul>\n                        <div\n                          className=\"card-meta-block\"\n                          style={{ padding: \"0px\", marginTop: \"10px\" }}\n                        >\n                          <dl className=\"dl-horizontal\">\n                            <dt>Version:</dt>\n                            <dd>{test_description}</dd>\n                          </dl>\n                        </div>\n                      </div>\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nOverDueTestCard.propTypes = {\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onDownloadReport: PropTypes.func.isRequired,\n  test: PropTypes.object.isRequired,\n};\n\nexport default OverDueTestCard;\n","import React from \"react\";\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport PropTypes from \"prop-types\";\nimport Portal from \"../../../../Portal\";\nimport getValueFromState from \"../../../../utils/getValueFromState\";\nimport Dropdown from \"../../../../FormComponents/Dropdown\";\nimport ClickOffComponentWrapper from \"../../../../ClickOffComponentWrapper\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport { makeSelectTests } from \"../../../index/selectors\";\nimport { setTests } from \"../../../index/actions\";\nimport { fetchAllTestsApi } from \"../../../index/api\";\n\nclass NewTestModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      version: \"\",\n      assignTime: new Date(),\n      dueTime: new Date(),\n      assignDate: new Date(),\n      dueDate: new Date(),\n      reading: false,\n      mathNoCalc: false,\n      writing: false,\n      mathWithCalc: false,\n      isAllowed: false,\n      isIncluded: false,\n      isTimed: false,\n      versionOptions: [],\n      sectionIds: [],\n    };\n  }\n\n  componentDidMount = async () => {\n    const { tests, onSetTests } = this.props;\n    if (tests.length === 0) {\n      const { data: { tests } } = await fetchAllTestsApi();\n      onSetTests(tests);\n    }\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    if (this.state.versionOptions.length === 0) {\n      const formattedVersions = nextProps.tests.map(test => ({\n        label: test.name,\n        value: test.id,\n      }));\n\n      this.setState({\n        versionOptions: formattedVersions,\n      });\n      if (formattedVersions.length !== 0) {\n        this.setState({\n          version: formattedVersions[0].value,\n        });\n      }\n    }\n  }\n\n  handleDetailsChange = (event, name, checkBox = false) => {\n    const value = event.target ? event.target.value : event;\n    if (checkBox) {\n      this.setState({\n        [name]: !this.state[name],\n      });\n    } else {\n      this.setState({\n        [name]: value,\n      });\n    }\n  };\n\n  onSave = () => {\n    const { onSave } = this.props;\n    onSave(this.state);\n  };\n\n  render() {\n    const { open, onClose } = this.props;\n    const {\n      versionOptions,\n      version,\n      assignDate,\n      dueDate,\n      assignTime,\n      dueTime,\n      reading,\n      mathNoCalc,\n      writing,\n      mathWithCalc,\n      isAllowed,\n      isIncluded,\n      isTimed,\n    } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <React.Fragment>\n            <div className=\"overlay\">\n              <ClickOffComponentWrapper onOuterClick={onClose}>\n                <div\n                  id=\"modal_add_new_class\"\n                  className=\"modal modal-custom modal-460\"\n                >\n                  <form action=\"#\" className=\"custom-form\">\n                    <fieldset>\n                      <div className=\"card-modal card-main card\">\n                        <div\n                          className=\"card-panel card-panel-title\"\n                          style={{ backgroundColor: \"#E74021\", color: \"#fff\" }}\n                        >\n                          <div className=\"card-panel-row row\">\n                            <div className=\"col\">\n                              <h2>\n                                <span className=\"heading-holder\">\n                                  <i className=\"icon-courses\" />\n                                  <span className=\"heading-block\">New Test</span>\n                                </span>\n                              </h2>\n                            </div>\n                            <div className=\"col right-align\">\n                              <a\n                                href=\"#!\"\n                                className=\"panel-link close modal-close\"\n                                onClick={onClose}\n                              >\n                                <i className=\"icon-close-thin\" />\n                              </a>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"card-content\">\n                          <div className=\"card-body\">\n                            <div className=\"row mb-0\">\n                              <div className=\"col s12\">\n                                <div className=\"input-field\">\n                                  <Dropdown\n                                    value={getValueFromState(\n                                      version,\n                                      versionOptions,\n                                    )}\n                                    onChange={event =>\n                                      this.handleDetailsChange(event, \"version\")\n                                    }\n                                    options={versionOptions}\n                                    label=\"Version\"\n                                    stateKey=\"version\"\n                                    dropdownKey=\"version\"\n                                  />\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"row mb-0\">\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-calendar\" />\n                                  <DatePicker\n                                    id=\"assignDate\"\n                                    selected={assignDate}\n                                    onChange={date =>\n                                      this.handleDetailsChange(date, \"assignDate\")\n                                    }\n                                    placeholderText=\"AssignFor\"\n                                  />\n                                </div>\n                              </div>\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-clock2\"></i>\n                                  <DatePicker\n                                    id=\"assignTime\"\n                                    selected={assignTime}\n                                    onChange={date =>\n                                      this.handleDetailsChange(\n                                        date,\n                                        \"assignTime\",\n                                      )\n                                    }\n                                    showTimeSelect\n                                    showTimeSelectOnly\n                                    timeIntervals={15}\n                                    timeCaption=\"Time\"\n                                    dateFormat=\"h:mm aa\"\n                                  />\n                                  <label\n                                    className={\n                                      assignTime !== \"\"\n                                        ? \"label active\"\n                                        : \"label\"\n                                    }\n                                    htmlFor=\"assignTime\"\n                                  >\n                                    Time\n                                  </label>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"row mb-0\">\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-calendar\" />\n                                  <DatePicker\n                                    id=\"dueDate\"\n                                    selected={dueDate}\n                                    onChange={date =>\n                                      this.handleDetailsChange(date, \"dueDate\")\n                                    }\n                                    placeholderText=\"Due(optional)\"\n                                  />\n                                </div>\n                              </div>\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-clock2\"></i>\n                                  <DatePicker\n                                    selected={dueTime}\n                                    onChange={date =>\n                                      this.handleDetailsChange(date, \"dueTime\")\n                                    }\n                                    showTimeSelect\n                                    showTimeSelectOnly\n                                    timeIntervals={15}\n                                    timeCaption=\"Time\"\n                                    dateFormat=\"h:mm aa\"\n                                  />\n                                  <label\n                                    className={\n                                      dueTime !== \"\" ? \"label active\" : \"label\"\n                                    }\n                                    htmlFor=\"dueTime\"\n                                  >\n                                    Time\n                                  </label>\n                                </div>\n                              </div>\n                            </div>\n                            <label>Sections:</label>\n                            <div className=\"check-holder\">\n                              <div className=\"row mb-0\">\n                                <div className=\"col s6\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"reading\"\n                                        className=\"filled-in\"\n                                        checked={reading}\n                                        onChange={event =>\n                                          this.handleDetailsChange(\n                                            event,\n                                            \"reading\",\n                                            \"checkBox\",\n                                          )\n                                        }\n                                      />\n                                      <span>Reading</span>\n                                    </label>\n                                  </p>\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"mathNoCalc\"\n                                        className=\"filled-in\"\n                                        checked={mathNoCalc}\n                                        onChange={event =>\n                                          this.handleDetailsChange(\n                                            event,\n                                            \"mathNoCalc\",\n                                            \"checkbox\",\n                                          )\n                                        }\n                                      />\n                                      <span>Math(no calc)</span>\n                                    </label>\n                                  </p>\n                                </div>\n                                <div className=\"col s6\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"writing\"\n                                        className=\"filled-in\"\n                                        checked={writing}\n                                        onChange={event =>\n                                          this.handleDetailsChange(\n                                            event,\n                                            \"writing\",\n                                            \"checkbox\",\n                                          )\n                                        }\n                                      />\n                                      <span>Writing</span>\n                                    </label>\n                                  </p>\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"mathWithCalc\"\n                                        className=\"filled-in\"\n                                        checked={mathWithCalc}\n                                        onChange={event =>\n                                          this.handleDetailsChange(\n                                            event,\n                                            \"mathWithCalc\",\n                                            \"checkbox\",\n                                          )\n                                        }\n                                      />\n                                      <span>Math(calculator)</span>\n                                    </label>\n                                  </p>\n                                </div>\n                                <label>\n                                  Note: scaled test scores may require\n                                  combinations of sections\n                                </label>\n                              </div>\n                            </div>\n                            <div className=\"check-holder\">\n                              <div className=\"row mb-0\">\n                                <div className=\"col s12\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"isAllowed\"\n                                        className=\"filled-in\"\n                                        checked={isAllowed}\n                                        onChange={event =>\n                                          this.handleDetailsChange(\n                                            event,\n                                            \"isAllowed\",\n                                            \"checkbox\",\n                                          )\n                                        }\n                                      />\n                                      <span>Allow Student to Enter Answers</span>\n                                    </label>\n                                  </p>\n                                </div>\n                                {/* @TODO this is taken out for now */}\n                                {/* <div className=\"col s12\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"isIncluded\"\n                                        className=\"filled-in\"\n                                        checked={isIncluded}\n                                        onChange={event =>\n                                          this.handleDetailsChange(\n                                            event,\n                                            \"isIncluded\",\n                                            \"checkbox\",\n                                          )\n                                        }\n                                      />\n                                      <span>\n                                        Include Score in Improvement Metrics\n                                      </span>\n                                    </label>\n                                  </p>\n                                </div> */}\n                                <div className=\"col s12\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"isTimed\"\n                                        className=\"filled-in\"\n                                        checked={isTimed}\n                                        onChange={event =>\n                                          this.handleDetailsChange(\n                                            event,\n                                            \"isTimed\",\n                                            \"checkbox\",\n                                          )\n                                        }\n                                      />\n                                      <span>Timed</span>\n                                    </label>\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"modal-footer\">\n                            <a\n                              href=\"#!\"\n                              className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\"\n                              onClick={onClose}\n                            >\n                              Cancel\n                            </a>\n                            <a href=\"#\" className=\"btn\" onClick={this.onSave}>\n                              Save\n                            </a>\n                          </div>\n                        </div>\n                      </div>\n                    </fieldset>\n                  </form>\n                </div>\n              </ClickOffComponentWrapper>\n            </div>\n          </React.Fragment>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 1999;\n            }\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            #modal_Location1 {\n              border-radius: 6px;\n            }\n            .modal {\n              display: block;\n              background-color: white;\n              position: absolute;\n              top: 10%;\n              right: 10%;\n              left: 10%;\n              box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14),\n                0 9px 46px 8px rgba(0, 0, 0, 0.12),\n                0 11px 15px -7px rgba(0, 0, 0, 0.2);\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nNewTestModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  tests: PropTypes.array.isRequired,\n};\n\n\nconst mapStateToProps = createStructuredSelector({\n  tests: makeSelectTests(),\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetTests: tests => dispatch(setTests(tests)),\n  };\n}\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(NewTestModal);\n","import React from \"react\";\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport PropTypes from \"prop-types\";\nimport Portal from \"../../../../Portal\";\nimport getValueFromState from \"../../../../utils/getValueFromState\";\nimport Dropdown from \"../../../../FormComponents/Dropdown\";\nimport ClickOffComponentWrapper from \"../../../../ClickOffComponentWrapper\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport { makeSelectTests } from \"../../../index/selectors\";\nimport { setTests } from \"../../../index/actions\";\nimport { fetchAllTestsApi } from \"../../../index/api\";\n\nclass TestSettingModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      version: \"1734df3c-8a1e-48e4-aafc-31e3134efd40\",\n      assignTime: new Date(),\n      dueTime: new Date(),\n      assignDate: new Date(),\n      dueDate: new Date(),\n      reading: false,\n      mathNoCalc: false,\n      writing: false,\n      mathWithCalc: false,\n      isAllowed: false,\n      isIncluded: false,\n      isTimed: false,\n      versionOptions: [],\n    };\n  }\n\n  componentDidMount = async () => {\n    const { tests, onSetTests } = this.props;\n    if (tests.length === 0) {\n      const { data: { tests } } = await fetchAllTestsApi();\n      onSetTests(tests);\n    } else {\n      const formattedVersions = tests.map(test => ({\n        label: test.name,\n        value: test.id,\n      }));\n      this.setState({\n        versionOptions: formattedVersions,\n      });\n    }\n    if (this.props.test) {\n      const { test: { test_id } } = this.props\n      this.setState({\n        version: test_id\n      });\n    }\n  }\n\n  handleDetailsChange = (event, name, checkBox = false) => {\n    const value = event.target ? event.target.value : event;\n    if (checkBox) {\n      this.setState({\n        [name]: !this.state[name]\n      });\n    } else {\n      this.setState({\n        [name]: value\n      });\n    }\n  };\n\n  onSave = () => {\n    const { onSave } = this.props;\n    onSave(this.state);\n  };\n\n  render() {\n    const {\n      open,\n      onClose,\n      test: { test_name: testName }\n    } = this.props;\n    const {\n      versionOptions,\n      version,\n      assignDate,\n      dueDate,\n      assignTime,\n      dueTime,\n      reading,\n      mathNoCalc,\n      writing,\n      mathWithCalc,\n      isAllowed,\n      isIncluded,\n      isTimed\n    } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <React.Fragment>\n            <div className=\"overlay\">\n              <ClickOffComponentWrapper onOuterClick={onClose}>\n                <div id=\"modal_add_new_class\" className=\"modal modal-custom modal-460\">\n                  <form action=\"#\" className=\"custom-form\">\n                    <fieldset>\n                      <div className=\"card-modal card-main card\">\n                        <div\n                          className=\"card-panel card-panel-title\"\n                          style={{ backgroundColor: \"#E74021\", color: \"#fff\" }}\n                        >\n                          <div className=\"card-panel-row row\">\n                            <div className=\"col\">\n                              <h2>\n                                <span className=\"heading-holder\">\n                                  <i className=\"icon-courses\" />\n                                  <span className=\"heading-block\">{testName}</span>\n                                </span>\n                              </h2>\n                            </div>\n                            <div className=\"col right-align\">\n                              <a\n                                href=\"#!\"\n                                className=\"panel-link close modal-close\"\n                                onClick={onClose}\n                              >\n                                <i className=\"icon-close-thin\" />\n                              </a>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"card-content\">\n                          <div className=\"card-body\">\n                            <div className=\"row mb-0\">\n                              <div className=\"col s12\">\n                                <div className=\"input-field\">\n                                  <Dropdown\n                                    value={getValueFromState(version, versionOptions)}\n                                    onChange={event => this.handleDetailsChange(event, \"version\")}\n                                    options={versionOptions}\n                                    label=\"Version\"\n                                    stateKey=\"version\"\n                                    dropdownKey=\"version\"\n                                  />\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"row mb-0\">\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-calendar\" />\n                                  <DatePicker\n                                    id=\"assignDate\"\n                                    selected={assignDate}\n                                    onChange={date => this.handleDetailsChange(date, \"assignDate\")}\n                                    placeholderText=\"AssignFor\"\n                                  />\n                                </div>\n                              </div>\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-clock2\"></i>\n                                  <DatePicker\n                                    id=\"assignTime\"\n                                    selected={assignTime}\n                                    onChange={date => this.handleDetailsChange(date, \"assignTime\")}\n                                    showTimeSelect\n                                    showTimeSelectOnly\n                                    timeIntervals={15}\n                                    timeCaption=\"Time\"\n                                    dateFormat=\"h:mm aa\"\n                                  />\n                                  <label\n                                    className={assignTime !== \"\" ? \"label active\" : \"label\"}\n                                    htmlFor=\"assignTime\"\n                                  >\n                                    Time\n                                  </label>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"row mb-0\">\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-calendar\" />\n                                  <DatePicker\n                                    id=\"dueDate\"\n                                    selected={dueDate}\n                                    onChange={date => this.handleDetailsChange(date, \"dueDate\")}\n                                    placeholderText=\"Due(optional)\"\n                                  />\n                                </div>\n                              </div>\n                              <div className=\"col s6\">\n                                <div className=\"datepicker-field input-field\">\n                                  <i className=\"icon-clock2\"></i>\n                                  <DatePicker\n                                    selected={dueTime}\n                                    onChange={date => this.handleDetailsChange(date, \"dueTime\")}\n                                    showTimeSelect\n                                    showTimeSelectOnly\n                                    timeIntervals={15}\n                                    timeCaption=\"Time\"\n                                    dateFormat=\"h:mm aa\"\n                                  />\n                                  <label\n                                    className={dueTime !== \"\" ? \"label active\" : \"label\"}\n                                    htmlFor=\"dueTime\"\n                                  >\n                                    Time\n                                  </label>\n                                </div>\n                              </div>\n                            </div>\n                            <label>Sections:</label>\n                            <div className=\"check-holder\">\n                              <div className=\"row mb-0\">\n                                <div className=\"col s6\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"reading\"\n                                        className=\"filled-in\"\n                                        checked={reading}\n                                        onChange={event =>\n                                          this.handleDetailsChange(event, \"reading\", \"checkBox\")\n                                        }\n                                      />\n                                      <span>Reading</span>\n                                    </label>\n                                  </p>\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"mathNoCalc\"\n                                        className=\"filled-in\"\n                                        checked={mathNoCalc}\n                                        onChange={event =>\n                                          this.handleDetailsChange(event, \"mathNoCalc\", \"checkbox\")\n                                        }\n                                      />\n                                      <span>Math(no calc)</span>\n                                    </label>\n                                  </p>\n                                </div>\n                                <div className=\"col s6\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"writing\"\n                                        className=\"filled-in\"\n                                        checked={writing}\n                                        onChange={event =>\n                                          this.handleDetailsChange(event, \"writing\", \"checkbox\")\n                                        }\n                                      />\n                                      <span>Writing</span>\n                                    </label>\n                                  </p>\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"mathWithCalc\"\n                                        className=\"filled-in\"\n                                        checked={mathWithCalc}\n                                        onChange={event =>\n                                          this.handleDetailsChange(\n                                            event,\n                                            \"mathWithCalc\",\n                                            \"checkbox\"\n                                          )\n                                        }\n                                      />\n                                      <span>Math(calculator)</span>\n                                    </label>\n                                  </p>\n                                </div>\n                                <label>\n                                  Note: scaled test scores may require combinations of sections\n                                </label>\n                              </div>\n                            </div>\n                            <div className=\"check-holder\">\n                              <div className=\"row mb-0\">\n                                <div className=\"col s12\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"isAllowed\"\n                                        className=\"filled-in\"\n                                        checked={isAllowed}\n                                        onChange={event =>\n                                          this.handleDetailsChange(event, \"isAllowed\", \"checkbox\")\n                                        }\n                                      />\n                                      <span>Allow Student to Enter Answers</span>\n                                    </label>\n                                  </p>\n                                </div>\n                                <div className=\"col s12\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"isIncluded\"\n                                        className=\"filled-in\"\n                                        checked={isIncluded}\n                                        onChange={event =>\n                                          this.handleDetailsChange(event, \"isIncluded\", \"checkbox\")\n                                        }\n                                      />\n                                      <span>Include Score in Improvement Metrics</span>\n                                    </label>\n                                  </p>\n                                </div>\n                                <div className=\"col s12\">\n                                  <p>\n                                    <label>\n                                      <input\n                                        type=\"checkbox\"\n                                        name=\"isTimed\"\n                                        className=\"filled-in\"\n                                        checked={isTimed}\n                                        onChange={event =>\n                                          this.handleDetailsChange(event, \"isTimed\", \"checkbox\")\n                                        }\n                                      />\n                                      <span>Timed</span>\n                                    </label>\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"modal-footer\">\n                            <a\n                              href=\"#!\"\n                              className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\"\n                              onClick={onClose}\n                            >\n                              Cancel\n                            </a>\n                            <a href=\"#\" className=\"btn\" onClick={this.onSave}>\n                              Save\n                            </a>\n                          </div>\n                        </div>\n                      </div>\n                    </fieldset>\n                  </form>\n                </div>\n              </ClickOffComponentWrapper>\n            </div>\n          </React.Fragment>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 1999;\n            }\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            #modal_Location1 {\n              border-radius: 6px;\n            }\n            .modal {\n              display: block;\n              background-color: white;\n              position: absolute;\n              top: 10%;\n              right: 10%;\n              left: 10%;\n              box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12),\n                0 11px 15px -7px rgba(0, 0, 0, 0.2);\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nTestSettingModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = createStructuredSelector({\n  tests: makeSelectTests(),\n})\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetTests: tests => dispatch(setTests(tests))\n  }\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(TestSettingModal);\n","import React from \"react\";\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport TestVersionSettings from '../EditTestModal/components/TestVersionSettings';\nimport Settings from '../EditTestModal/components/Settings';\n\n\nimport {\n  updateStudentTestDueDate,\n  updateStudentTestAssignmentDate,\n} from '../../../index/api';\n\nclass TestVersion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      testVersion: {\n        version: '',\n        sections: {\n          reading: false,\n          writing: false,\n          math: false,\n          essay: false,\n        },\n        includeScoreInImprovementMetrics: false,\n      },\n      settings: {\n        testDate: '',\n        dueDate: '',\n        allowStudentToEnterAnswers: false,\n        timed: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { test: { assignment_date: unformattedTestDate, dueDate: unformattedDueDate } } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n    const settings = update(this.state.settings, {\n      testDate: {\n        $set: testDate,\n      },\n      dueDate: {\n        $set: dueDate,\n      },\n    });\n    this.setState({ settings });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { test: { testDate: unformattedTestDate, dueDate: unformattedDueDate } } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n    if (prevProps.test.id !== this.props.test.id) {\n      const settings = update(this.state.settings, {\n        testDate: {\n          $set: testDate,\n        },\n        dueDate: {\n          $set: dueDate,\n        },\n      });\n      this.setState({ settings });\n    }\n  }\n\n  handleTestVersionSettingsChange = (event) => {\n    const { testVersion: { sections } } = this.state;\n    let testVersion;\n    if (event.target) {\n      const { target: { name: setting } } = event;\n      if (sections[setting] !== undefined) {\n        testVersion = update(this.state.testVersion, {\n          sections: {\n            [setting]: {\n              $set: !sections[setting],\n            },\n          },\n        });\n      } else {\n        testVersion = update(this.state.testVersion, {\n          [setting]: {\n            $set: !this.state.testVersion[setting],\n          },\n        });\n      }\n    } else {\n      testVersion = update(this.state.testVersion, {\n        version: {\n          $set: event,\n        },\n      });\n    }\n    this.setState({ testVersion });\n  }\n\n  handleSettingsChange = (event) => {\n    const { settings: previousSettings } = this.state;\n    const { target: { name: setting } } = event;\n    const settings = update(this.state.settings, {\n      [setting]: {\n        $set: !previousSettings[setting],\n      },\n    });\n    this.setState({ settings });\n  }\n\n  handleDatePickerChange = (field, value) => {\n    const settings = update(this.state.settings, {\n      [field]: {\n        $set: value,\n      },\n    });\n    this.setState({ settings }, () => this.handleStudentTestApiUpdate(field, value));\n  }\n\n  saveTestChanges = () => {\n    const { onSaveTestChanges } = this.props;\n    const { testVersion, settings: { testDate: unformattedTestDate, dueDate: unformattedDueDate, allowStudentToEnterAnswers, timed } } = this.state;\n    const testDate = moment(unformattedTestDate).format('MM/DD/YY');\n    const dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n    onSaveTestChanges(testVersion, { testDate, dueDate, allowStudentToEnterAnswers, timed });\n  }\n\n  handleStudentTestApiUpdate = async(name, value) => {\n    const {student_test_id} = this.props.test;\n    const postDate =  moment(value).format('YYYY-MM-DD');\n    switch (name) {\n      case \"dueDate\":\n        return updateStudentTestDueDate({student_test_id:student_test_id,due_date:postDate});\n      case \"testDate\":\n        return updateStudentTestAssignmentDate({student_test_id:student_test_id,assignment_date:postDate});\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const { test, user, onDeleteTest } = this.props;\n    const { completionDate, completionTime } = test;\n    const { studentInformation: { firstName, lastName } } = user;\n    const { testVersion: {sections: { reading, writing, math, essay },version, includeScoreInImprovementMetrics},\n      settings: { testDate, dueDate, allowStudentToEnterAnswers, timed },\n    } = this.state;\n    return (\n      <div className=\"container-xsmall\">\n        <div className=\"row d-flex-content card-width-322\">\n          <div className=\"card-main-col col s12 m8 l7 xl5\">\n            <TestVersionSettings\n              version={version}\n              reading={reading}\n              writing={writing}\n              math={math}\n              essay={essay}\n              includeScoreInImprovementMetrics={ includeScoreInImprovementMetrics}\n              handleTestVersionSettingsChange={ this.handleTestVersionSettingsChange}\n            />\n            <Settings\n              timed={timed}\n              testDate={testDate}\n              dueDate={dueDate}\n              handleSettingsChange={this.handleSettingsChange}\n              handleDatePickerChange={this.handleDatePickerChange}\n              allowStudentToEnterAnswers={allowStudentToEnterAnswers}\n            />\n          </div>\n          <div className=\"card-main-col col s12 m8 l7 xl5\">\n            <h2>Status</h2>\n            <div className=\"card card-test-detail\">\n              <div className=\"card-content\">\n                <div className=\"meta-info\">\n                  <If condition={completionDate.length}>\n                    <p>\n                      Completed :{\" \"}\n                      <time dateTime=\"2018-12-29\">\n                        {completionDate} at {completionTime}\n                      </time>\n                      <If\n                        condition={\n                          completionDate.length && test.dueDate < completionDate\n                        }\n                      >\n                        <span\n                          className=\"badge white-text badge-rounded-sm\"\n                          style={{ backgroundColor: \"#db1d41\" }}\n                        >\n                          <b className=\"badge-text\">late</b>\n                        </span>\n                      </If>\n                    </p>\n                  </If>\n                  <p>\n                    Answers Entered by: {firstName} {lastName} (student)\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"btn-holder\">\n          <a href=\"#\" className=\"btn\" onClick={this.saveTestChanges}>\n            Save\n          </a>\n          <a\n            href=\"#\"\n            className=\"waves-effect waves-teal btn-flat pink-text text-darken-1\"\n            onClick={onDeleteTest}\n          >\n            Delete\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TestVersion;\n","/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport Moment from 'moment';\nimport { toast } from 'react-toastify';\nimport Toast from '../../Toast';\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport AssignedTestCard from \"./components/AssignedTestCard\";\nimport OverDueTestCard from \"./components/OverDueTestCard\";\nimport CompletedTestCard from \"./components/CompletedTestCard\";\nimport EditTestModal from \"./components/EditTestModal\";\nimport NewTestModal from \"./components/TestModal\";\nimport TestSettingModal from \"./components/TestSettingModal\";\nimport EnterAnswerWrapper from \"./components/EnterAnswerWrapper\";\nimport CardHeader from \"./components/CardHeader\";\nimport {\n  setIsVisibleTopBar,\n  fetchStudentTests,\n  setActiveStudentTestId,\n  deleteStudentTest,\n  updateTestFlag,\n  assignNewTest,\n  fetchStudentTestSections,\n  addNewTestToStudentTests,\n  updateTestStatus,\n  setStudentSections,\n  setStudentTests,\n  setStudentCompletedTests,\n  setStudentOverDueTests,\n  setStudentAssignedTests,\n  getTestScores,\n} from \"../index/actions\";\nimport {\n  makeSelectOverDueStudentTests,\n  makeSelectCompletedStudentTests,\n  makeSelectAssignedStudentTests,\n  makeSelectStudentTests,\n  makeSelectTests,\n  makeSelectActiveStudent,\n  makeSelectFetchStudentTestsStatus,\n} from '../index/selectors';\nimport {\n  assignTestToStudentApi,\n  addStudentAnswerToTestApi,\n} from '../index/api';\n\nclass DetailTestList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTest: {},\n      activePage: \"scores\",\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      openEditTestModal: false,\n      openCreateTestModal: false,\n      opentTestSettingModal: false,\n      openEnterAnswerWrapper: false,\n    };\n  }\n\n  componentDidMount = async () => {\n    const { onFetchStudentTests, studentTests, activeStudent, user } = this.props;\n    if (studentTests.length === 0) {\n      onFetchStudentTests(user);\n    } else if (studentTests.length > 0 && studentTests[0].student_id !== activeStudent.id) {\n      onFetchStudentTests(user);\n    }\n  };\n\n  componentWillUnmount = () => {\n    this.props.onSetStudentTests([]);\n    this.props.onSetStudentCompletedTests([]);\n    this.props.onSetStudentOverDueTests([]);\n    this.props.onSetStudentAssignedTests([]);\n  }\n\n  onSetActiveTestComplete = () => this.setState({ activeTest: { ...this.state.activeTest, status: \"COMPLETED\" } })\n\n  onToggleEditTestModal = async (activeTest) => {\n    const { onSetActiveStudentTestId } = this.props;\n    onSetActiveStudentTestId(activeTest.student_test_id);\n    this.onSetIsVisibleTopBar(false);\n    const postBody = {\n      id: this.props.activeStudent.id,\n      student_test_id: activeTest.student_test_id,\n    };\n    this.props.onFetchStudentTestSections(postBody);\n    this.setState(\n      ({ openEditTestModal }) => ({\n        openEditTestModal: true,\n        openEnterAnswerWrapper: false,\n        activeTest,\n        activePage: 'scores',\n      }),\n      this.onCloseDropdown,\n    );\n  };\n  onCloseEditTestModal = () => {\n    this.onSetIsVisibleTopBar(true);\n    this.setState(({ openEditTestModal }) => ({\n      openEditTestModal: !openEditTestModal,\n      openEnterAnswerWrapper: false,\n    }));\n  };\n\n  onSetDropdown = dropdownIndex => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  handleTestSettingModalOpen = activeTest => {\n    this.onCloseDropdown();\n    this.setState(({ opentTestSettingModal }) => ({\n      activeTest,\n      opentTestSettingModal: !opentTestSettingModal,\n    }));\n  };\n\n  onCreateTest = event => {\n    event.preventDefault();\n    this.setState({ openCreateTestModal: true });\n    console.warn('Pending implementation of create test UI and functionality');\n  };\n\n  onEnterAnswers = async currentTestId => {\n    const { onFetchStudentTestSections, user, studentTests } = this.props;\n    // Have to clear all sections to have no side effects for now\n    onFetchStudentTestSections({ id: user.id, student_test_id: currentTestId });\n    this.onSetIsVisibleTopBar(false);\n    this.onCloseDropdown();\n    const activeTest = studentTests.find(test => test.student_test_id === currentTestId);\n    if (activeTest.status === 'ASSIGNED') {\n      const postBody = {\n        student_test_id: currentTestId,\n        status: 'STARTED',\n      };\n      const { onUpdateTestStatus } = this.props;\n      await onUpdateTestStatus(postBody, 'STARTED', user.id);\n    } else if (activeTest.status === 'COMPLETED') {\n      const { activeStudent: { id }, onGetTestScores } = this.props;\n      const postBody = { studentId: id, student_test_id: currentTestId };\n      onGetTestScores(postBody);\n    }\n    this.setState({ openEditTestModal: true, activeTest, activePage: \"answerSheet\" });\n  };\n\n  onDownloadReport = activeTest => {\n    this.onSetIsVisibleTopBar(false);\n    this.onCloseDropdown();\n    this.setState(\n      {\n        activeTest,\n        openEditTestModal: true,\n      },\n      async () => {\n        await this.editTestModal.generateScoreReportPdf();\n      },\n    );\n  };\n  onDeleteTest = (student_test_id, student_id, type) => {\n    this.onSetIsVisibleTopBar(true);\n    this.setState({ openEditTestModal: false }, () =>\n      this.props.onDeleteStudentTest(student_test_id, student_id, type),\n    );\n  };\n  onTestFlagReviewed = (student_test_id, student_id) => {\n    this.props.onUpdateTestFlag(student_test_id, student_id);\n  };\n  onSetIsVisibleTopBar = value => {\n    const { onSetIsVisibleTopBar } = this.props;\n    onSetIsVisibleTopBar(value);\n  };\n  onSaveTestChanges = (testVersion, settings) => {\n    this.onToggleEditTestModal();\n    this.onSetIsVisibleTopBar(true);\n    console.warn('Pending save test changes functionality', testVersion, settings);\n  };\n\n  mapCompletedTests = () => {\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    const { completes } = this.props;\n    return completes.map((test, index) =>\n      (<CompletedTestCard\n        test={test}\n        index={`completed${index}`}\n        key={`completed-${index}`}\n        onEnterAnswers={this.onEnterAnswers}\n        onEditTest={() => this.onToggleEditTestModal({ ...test, status: 'COMPLETED' })}\n        onSetDropdown={this.onSetDropdown}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={dropdownIndex}\n        dropdownIsOpen={dropdownIsOpen}\n        onTestFlagReviewed={this.onTestFlagReviewed}\n        onDeleteTest={this.onDeleteTest}\n        handleTestSettingModalOpen={() => this.handleTestSettingModalOpen(test)}\n      />),\n    );\n  };\n\n  mapAssignedTests = () => {\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    const { assigneds } = this.props;\n    return assigneds.map((test, index) =>\n      (<AssignedTestCard\n        test={test}\n        key={`assigned-${index}`}\n        handleTestSettingModalOpen={() => this.handleTestSettingModalOpen(test)}\n        onDeleteTest={this.onDeleteTest}\n        onSetDropdown={this.onSetDropdown}\n        onEnterAnswers={this.onEnterAnswers}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={dropdownIndex}\n        dropdownIsOpen={dropdownIsOpen}\n        index={`assigned${index}`}\n        onTestFlagReviewed={this.onTestFlagReviewed}\n      />),\n    );\n  };\n  mapOverDueTests = () => {\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    const { overdues } = this.props;\n    return overdues.map((test, index) =>\n      (<OverDueTestCard\n        test={test}\n        key={`overdue-${index}`}\n        handleTestSettingModalOpen={() => this.handleTestSettingModalOpen(test)}\n        onDeleteTest={this.onDeleteTest}\n        onSetDropdown={this.onSetDropdown}\n        onEnterAnswers={this.onEnterAnswers}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={dropdownIndex}\n        dropdownIsOpen={dropdownIsOpen}\n        index={`overdue${index}`}\n        onTestFlagReviewed={this.onTestFlagReviewed}\n      />),\n    );\n  };\n\n  onCloseTestModal = () => this.setState({ openCreateTestModal: false });\n  onCloaseAnswerWrapper = async () => {\n    this.onSetIsVisibleTopBar(true);\n    this.setState({\n      openEnterAnswerWrapper: false,\n    });\n    this.onCloseDropdown();\n  };\n\n  onSaveNewTest = async test => {\n    const { studentTests, tests } = this.props;\n    if (!this.props.activeStudent.active && studentTests.length >= 1) {\n      return toast.error(`This student is not activated. A free student account can only be assigned one free test.`, {\n        className: 'update-error',\n        progressClassName: 'progress-bar-error',\n      });\n    }\n    this.onCloseTestModal();\n    const test_sections = [];\n    const testIds = tests.map(test => test.id);\n    const currentTestIndex = testIds.findIndex(testId => testId === test.version);\n    const currentTest = tests[currentTestIndex];\n\n    const { user: { id } } = this.props;\n    currentTest.test_sections.map(testSection => {\n      if (testSection.name === 'Reading' && test.reading) {\n        test_sections.push(testSection);\n      }\n      if (testSection.name === 'Writing' && test.writing) {\n        test_sections.push(testSection);\n      }\n      if (testSection.name === 'Math (No Calculator)' && test.mathNoCalc) {\n        test_sections.push(testSection);\n      }\n      if (testSection.name === 'Math (Calculator)' && test.mathWithCalc) {\n        test_sections.push(testSection);\n      }\n    });\n    if (test_sections.length === 0) {\n      return toast.error(`Cannot assign a test without selecting one or more sections.`, {\n        className: 'update-error',\n        progressClassName: 'progress-bar-error',\n      });\n    }\n    const postBody = {\n      student_id: id,\n      test_id: test.version,\n      assignment_date: Moment(test.assignDate).format('YYYY-MM-DD'),\n      due_date: Moment(test.dueDate).format('YYYY-MM-DD'),\n      test_section_ids: test_sections.map(testSection => testSection.id),\n      is_timed: test.isTimed,\n    };\n    const { student_test_id } = await assignTestToStudentApi(postBody);\n    if (student_test_id) {\n      const formattedNewTest = {\n        assignment_date: test.assignDate,\n        due_date: test.dueDate,\n        due_status: '',\n        status: 'ASSIGNED',\n        student_id: id,\n        student_test_id,\n        test_description: currentTest.description,\n        test_form: '3',\n        test_id: test.version,\n        test_name: currentTest.name,\n      };\n      const { onAssignNewTest, onAddNewTestToStudentTests } = this.props;\n      onAssignNewTest(formattedNewTest);\n      onAddNewTestToStudentTests(formattedNewTest);\n    } else {\n      toast.error(`This student is not activated. A free student account can only be assigned one free test.`, {\n        className: 'update-error',\n        progressClassName: 'progress-bar-error',\n      });\n    }\n  };\n\n  onAddStudentAnswerToTest = async (test_problem_id, answer) => {\n    const { activeTest: { student_test_id } } = this.state;\n    const postBody = {\n      student_test_id,\n      test_problem_id,\n      answer,\n    };\n    await addStudentAnswerToTestApi(postBody);\n  };\n\n  render() {\n    const {\n      openEditTestModal,\n      openCreateTestModal,\n      openEnterAnswerWrapper,\n      activeTest,\n      opentTestSettingModal,\n    } = this.state;\n    const { user, completes, assigneds, overdues, studentTestsFetchedStatus } = this.props;\n    return (\n      <React.Fragment>\n        <Toast />\n        <Choose>\n          <When condition={openEditTestModal}>\n            <EditTestModal\n              onRef={ref => (this.editTestModal = ref)}\n              user={user}\n              test={activeTest}\n              onDeleteTest={this.onDeleteTest}\n              onSaveTestChanges={this.onSaveTestChanges}\n              onCloseEditTestModal={this.onCloseEditTestModal}\n              activePage={this.state.activePage}\n              onOpentTestScore={this.onToggleEditTestModal}\n            />\n          </When>\n          <When condition={openEnterAnswerWrapper}>\n            {/* <EnterAnswerWrapper\n              open={openEnterAnswerWrapper}\n              onCloaseAnswerWrapper={this.onCloaseAnswerWrapper}\n              onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n              test={activeTest}\n              onOpentTestScore={() => this.onToggleEditTestModal(activeTest)}\n            /> */}\n          </When>\n          <When condition={opentTestSettingModal}>\n            <TestSettingModal\n              open={opentTestSettingModal}\n              test={activeTest}\n              onClose={this.handleTestSettingModalOpen}\n              onSave={this.onSaveNewTest}\n            />\n          </When>\n          <Otherwise>\n            <NewTestModal\n              open={openCreateTestModal}\n              onClose={this.onCloseTestModal}\n              onSave={this.onSaveNewTest}\n            />\n            <div className=\"content-section\">\n              <div className=\"section-holder\">\n                {overdues.length !== 0 && studentTestsFetchedStatus &&\n                  <div className=\"content-container\">\n                    <CardHeader title=\"OverDue\" amount={overdues.length} themeColor=\"#e94319\" />\n                    <div className=\"row d-flex-content card-width-366\">\n                      {this.mapOverDueTests()}\n                    </div>\n                  </div>}\n                {assigneds.length !== 0 && studentTestsFetchedStatus &&\n                  <div className=\"content-container\">\n                    <CardHeader title=\"Assigned\" amount={assigneds.length} themeColor=\"#39b44a\" />\n                    <div className=\"row d-flex-content card-width-366\">\n                      {this.mapAssignedTests()}\n                    </div>\n                  </div>}\n                {completes.length !== 0 && studentTestsFetchedStatus &&\n                  <div className=\"content-container\">\n                    <CardHeader title=\"Completed\" amount={completes.length} themeColor=\"#39b44a\" />\n                    <div className=\"row d-flex-content card-width-366\">\n                      {this.mapCompletedTests()}\n                    </div>\n                  </div>}\n              </div>\n              <a\n                href=\"#\"\n                onClick={this.onCreateTest}\n                className=\"waves-effect waves-teal btn add-btn\"\n              >\n                <i className=\"material-icons\">add</i>New Test\n              </a>\n            </div>\n          </Otherwise>\n        </Choose>\n      </React.Fragment>\n    );\n  }\n}\n\nDetailTestList.propTypes = {\n  user: PropTypes.object.isRequired,\n  onSetIsVisibleTopBar: PropTypes.func.isRequired,\n  completes: PropTypes.array,\n  overdues: PropTypes.array,\n  assigneds: PropTypes.array,\n  onSetStudentAssignedTests: PropTypes.func,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  completes: makeSelectCompletedStudentTests(),\n  assigneds: makeSelectAssignedStudentTests(),\n  overdues: makeSelectOverDueStudentTests(),\n  studentTests: makeSelectStudentTests(),\n  tests: makeSelectTests(),\n  activeStudent: makeSelectActiveStudent(),\n  studentTestsFetchedStatus: makeSelectFetchStudentTestsStatus(),\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetIsVisibleTopBar: value => dispatch(setIsVisibleTopBar(value)),\n    onFetchStudentTests: user => dispatch(fetchStudentTests(user)),\n    onSetActiveStudentTestId: studentTestId => dispatch(setActiveStudentTestId(studentTestId)),\n    onDeleteStudentTest: (studentTestId, studentId, type) => dispatch(deleteStudentTest(studentTestId, studentId, type)),\n    onUpdateTestFlag: (studentTestId, studentId) => dispatch(updateTestFlag(studentTestId, studentId)),\n    onAssignNewTest: (newTest) => dispatch(assignNewTest(newTest)),\n    onFetchStudentTestSections: (studentInfo) => dispatch(fetchStudentTestSections(studentInfo)),\n    onAddNewTestToStudentTests: (studentInfo) => dispatch(addNewTestToStudentTests(studentInfo)),\n    onUpdateTestStatus: (payload, currentStatus, studentId) => dispatch(updateTestStatus(payload, currentStatus, studentId)),\n    onSetStudentTests: (tests) => dispatch(setStudentTests(tests)),\n    onSetStudentCompletedTests: (tests) => dispatch(setStudentCompletedTests(tests)),\n    onSetStudentOverDueTests: (tests) => dispatch(setStudentOverDueTests(tests)),\n    onSetStudentAssignedTests: (tests) => dispatch(setStudentAssignedTests(tests)),\n    onGetTestScores: (postBody) => dispatch(getTestScores(postBody)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(DetailTestList);\n","import React from 'react';\n\nclass CrossTestScoresCard extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  mapProgressBar = () => {\n    const { crossTestScores } = this.props;\n    if (crossTestScores) {\n      return Object.entries(crossTestScores).map(item =>\n        (<div className=\"progress-block progress-block-md\">\n          <div className=\"progress-legend\">\n            <div className=\"legend-block\">\n              <span className=\"text\">\n                {item[0]}\n              </span>\n            </div>\n          </div>\n          <div className=\"progress progress-rounded-md\">\n            <div\n              className=\"determinate\"\n              style={{ width: `${item[1] / 40 * 100}%`, backgroundColor: '#f5883f' }}\n            >\n              <span className=\"progress-label\">\n                {item[1]}\n              </span>\n            </div>\n          </div>\n        </div>),\n      );\n    }\n  };\n  render() {\n    return (\n      <div className=\"col s12 l6 card-width-546\">\n        <div className=\"card-block\">\n          <h2>\n            Cross-Test Scores <span className=\"separator\">|</span>{' '}\n            <span className=\"quantity\">10 to 40</span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content\">\n              <div className=\"progress-section\">\n                {this.mapProgressBar()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CrossTestScoresCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass EssayScoresCard extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  mapProgressBar = () => {\n    const { essayScores } = this.props;\n    if (essayScores) {\n      return Object.entries(essayScores).map(item =>\n        (<div className=\"progress-block progress-block-lg\">\n          <div className=\"progress-legend\">\n            <div className=\"legend-block\">\n              <span className=\"text\">\n                {item[0]}\n              </span>\n            </div>\n          </div>\n          <div className=\"progress progress-rounded-lg\" style={{ borderRadius: '13px' }}>\n            <div\n              className=\"determinate\"\n              style={{\n                width: `${item[1] / 8 * 100}%`,\n                backgroundColor: '#ce237a',\n                borderRadius: '13px',\n              }}\n            >\n              <span className=\"progress-label\">\n                {item[1]}\n              </span>\n            </div>\n          </div>\n        </div>),\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"col s12 l4 card-width-316\">\n        <div className=\"card-block\">\n          <h2>\n            Essay Scores <span className=\"separator\">|</span>{' '}\n            <span className=\"quantity\">2 to 8</span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content\">\n              <div className=\"progress-section\">\n                {this.mapProgressBar()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nEssayScoresCard.propTypes = {\n  essayScores: PropTypes.object.isRequired,\n};\n\nexport default EssayScoresCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nclass SectionScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColorList: [\n        {\n          id: \"Writing and Language\",\n          colorString: [\"#51b349\", \"rgb(234, 234, 234)\"],\n        },\n        {\n          id: \"Reading\",\n          colorString: [\"#35a6af\", \"rgb(234, 234, 234)\"],\n        },\n        {\n          id: \"Math\",\n          colorString: [\"#567ebf\", \"rgb(234, 234, 234)\"],\n        },\n      ],\n    };\n  }\n  getCircleBarData = (currentScore, totalPossible, name) => ({\n    datasets: [\n      {\n        data: [totalPossible, totalPossible - currentScore],\n        backgroundColor: this.getBgColorByName(name),\n      },\n    ],\n  });\n\n  getBgColorByName = (name) => {\n    const { bgColorList } = this.state;\n    const ids = bgColorList.map(element => element.id);\n    const targetIndex = ids.findIndex(ids => ids === name);\n    return bgColorList[targetIndex].colorString;\n  }\n\n  mapSectionScores = () => Object.values(this.props.sectionScores).map(score => (\n    <div className=\"col s6 center-align\">\n      <div className=\"chart-block chart-block-218\">\n        <Doughnut\n          data={() =>\n            this.getCircleBarData(score.current_score, 800, score.name)\n          }\n          width={215}\n          height={215}\n          options={{\n            cutoutPercentage: 80,\n          }}\n        />\n        <div className=\"chart-text\">\n          <span className=\"title\">{score.name === 'Writing and Language' ? 'Writing & Language' : score.name}</span>\n          <span className=\"value\">{score.current_score}</span>\n          <span className=\"description\">(+{score.delta ? score.delta : 0})</span>\n        </div>\n      </div>\n    </div>\n  ))\n  render() {\n    return (\n      <div className=\"col s12 l6 card-width-546\">\n        <div className=\"card-block\">\n          <h2>\n            Section Scores <span className=\"separator\">|</span>\n            <span className=\"quantity\">200 to 800</span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content\">\n              <div className=\"several-charts-row row mb-0\">\n                {this.props.sectionScores && this.mapSectionScores()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nSectionScoreCard.propTypes = {\n  sectionScores: PropTypes.object.isRequired,\n};\nexport default SectionScoreCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SubScoresCard extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  renderProgressElement = item =>\n    (<div className=\"progress-block progress-block-md\">\n      <div className=\"progress-legend\">\n        <div className=\"legend-block\">\n          <span className=\"text\">\n            {item[0]}\n          </span>\n        </div>\n      </div>\n      <div className=\"progress progress-rounded-md\" style={{ borderRadius: '13px' }}>\n        <div\n          className=\"determinate\"\n          style={{\n            width: `${item[1] / 15 * 100}%`,\n            backgroundColor: '#f5883f',\n            borderRadius: '13px',\n          }}\n        >\n          <span className=\"progress-label\">\n            {item[1]}\n          </span>\n        </div>\n      </div>\n    </div>);\n  mapProgressBar = () => {\n    const { subScores } = this.props;\n    const newRowIndex = Math.floor(Object.entries(subScores).length / 2);\n    return (\n      <React.Fragment>\n        <div className=\"col s12 m6\">\n          {Object.entries(subScores).map((item, index) => {\n            if (index > newRowIndex) {\n            } else {\n              return this.renderProgressElement(item);\n            }\n          })}\n        </div>\n        <div className=\"col s12 m6\">\n          {Object.entries(subScores).map((item, index) => {\n            if (index <= newRowIndex) {\n            } else {\n              return this.renderProgressElement(item);\n            }\n          })}\n        </div>\n      </React.Fragment>\n    );\n  };\n  render() {\n    return (\n      <div className=\"col s12 l6 card-width-546\">\n        <div className=\"card-block\">\n          <h2>\n            Subscores <span className=\"separator\">|</span> <span className=\"quantity\">1 to 15</span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content\">\n              <div className=\"progress-section\">\n                <div className=\"row mb-0\">\n                  {this.mapProgressBar()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nSubScoresCard.propTypes = {\n  subScores: PropTypes.object.isRequired,\n};\n\nexport default SubScoresCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst readingData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#32A6AF', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\nconst writingData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#3b9f85', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\nconst mathData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#567EBF', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\n\nclass TestScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mathScores: null,\n      readingScores: null,\n      writingScores: null,\n    };\n  }\n\n  componentDidMount = () => {\n    const { subjectScores } = this.props;\n    if (subjectScores) {\n      subjectScores.map(subject => {\n        switch (subject.name) {\n          case 'Writing and Language':\n            this.setState({\n              writingScores: subject,\n            });\n            break;\n          case 'Math':\n            this.setState({\n              mathScores: subject,\n            });\n            break;\n          case 'Reading':\n            this.setState({\n              readingScores: subject,\n            });\n            break;\n          default:\n        }\n      });\n    }\n  };\n\n  render() {\n    const { readingScores, mathScores, writingScores } = this.state;\n    return (\n      <div className=\"col s12 l8 card-width-772\">\n        <div className=\"card-block\">\n          <h2>\n            Test Scores <span className=\"separator\">|</span>{' '}\n            <span className=\"quantity\">10 to 40</span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content\">\n              <div className=\"several-charts-row row mb-0\">\n                <div className=\"col s4 center-align\">\n                  {readingScores &&\n                    <div className=\"chart-block chart-block-182\">\n                      <Doughnut\n                        data={() => readingData(readingScores.current_score, 40)}\n                        width={182}\n                        height={182}\n                        options={{\n                          cutoutPercentage: 80,\n                        }}\n                      />\n                      <div className=\"chart-text\">\n                        <span className=\"title\">Reading</span>\n                        <span className=\"value\">\n                          {readingScores.current_score}\n                        </span>\n                        <span className=\"description\">\n                          ({readingScores.delta})\n                        </span>\n                      </div>\n                    </div>}\n                </div>\n                <div className=\"col s4 center-align\">\n                  {writingScores &&\n                    <div className=\"chart-block chart-block-182\">\n                      <Doughnut\n                        data={() => writingData(writingScores.current_score, 40)}\n                        width={182}\n                        height={182}\n                        options={{\n                          cutoutPercentage: 80,\n                        }}\n                      />\n                      <div className=\"chart-text\">\n                        <span className=\"title\">Writing</span>\n                        <span className=\"value\">\n                          {writingScores.current_score}\n                        </span>\n                        <span className=\"description\">\n                          ({writingScores.delta})\n                        </span>\n                      </div>\n                    </div>}\n                </div>\n                <div className=\"col s4 center-align\">\n                  {mathScores &&\n                    <div className=\"chart-block chart-block-182\">\n                      <Doughnut\n                        data={() => mathData(mathScores.current_score, 40)}\n                        width={182}\n                        height={182}\n                        options={{\n                          cutoutPercentage: 80,\n                        }}\n                      />\n                      <div className=\"chart-text\">\n                        <span className=\"title\">Math</span>\n                        <span className=\"value\">\n                          {mathScores.current_score}\n                        </span>\n                        <span className=\"description\">\n                          ({mathScores.delta})\n                        </span>\n                      </div>\n                    </div>}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nTestScoreCard.propTypes = {\n  subjectScores: PropTypes.object.isRequired,\n};\n\nexport default TestScoreCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst data = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#32b9ec', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\nclass TotalScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTotalScore: 0,\n      deltaScore: 0,\n    };\n  }\n\n  componentDidMount = () => {\n    const { subjectScores } = this.props;\n    let currentTotalScore = 0;\n    let deltaScore = 0;\n    if (subjectScores && subjectScores instanceof Array) {\n      subjectScores.map(subjectScore => {\n        currentTotalScore += subjectScore.current_score;\n        deltaScore += subjectScore.delta;\n      });\n      this.setState({\n        currentTotalScore,\n        deltaScore,\n      });\n    }\n  };\n\n  render() {\n    const { currentTotalScore, deltaScore } = this.state;\n    return (\n      <div className=\"col s12 l6 card-width-546\">\n        <div className=\"card-block\">\n          <h2>\n            Your Score <span className=\"separator\">|</span>\n            <span className=\"quantity\">\n              400 to 1600\n            </span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content center-align\">\n              <div className=\"chart-block chart-block-total\">\n                <Doughnut\n                  data={() => data(currentTotalScore, 1600)}\n                  width={320}\n                  height={320}\n                  options={{\n                    cutoutPercentage: 80,\n                  }}\n                />\n                <div className=\"chart-text\">\n                  <span className=\"title\">TotalScore</span>\n                  <span className=\"value\">\n                    {currentTotalScore}\n                  </span>\n                  <span className=\"description\">\n                    ({deltaScore})\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nTotalScoreCard.propTypes = {};\n\nexport default TotalScoreCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport TotalScoreCard from './components/TotalScoreCard';\nimport SectionScoreCard from './components/SectionScoreCard';\nimport TestScoreCard from './components/TestScoreCard';\nimport EssayScoresCard from './components/EssayScoresCard';\nimport CrossTestScoresCard from './components/CrossTestScoresCard';\nimport SubScoresCard from './components/SubscoresCard';\nimport { makeSelectActiveTestScores, makeSelectActiveStudent } from '../index/selectors';\nimport { setActiveTestScores } from '../index/actions';\nimport { fetchStudentTestScoreApi } from '../index/api';\n\nclass DetailTestScorePage extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount = () => {\n    this.props.onRef(this);\n  };\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  delay = () => {\n    const { scores, test: { student_test_id }, onGetTestScores, activeStudent: { id } } = this.props;\n    return new Promise(async resolve => {\n      if (!scores) {\n        const postBody = { studentId: id, student_test_id };\n        onGetTestScores(postBody);\n      }\n      resolve();\n    });\n  };\n\n  getComponentImages = () =>\n    new Promise(resolve => {\n      this.delay().then(() => {\n        setTimeout(async () => {\n          const { getTargetImage } = this.props;\n          const [scoresImages] = await Promise.all([\n            getTargetImage(document.getElementById('scoresRef')),\n          ]);\n          resolve(scoresImages);\n        }, 3000);\n      });\n    });\n\n  loadingSpinner = () => (\n    <div className=\"overlay-spinning\">\n      <h1>Fetching Scores...</h1>\n      <div className=\"spinning\" />\n    </div>\n  )\n\n  render() {\n    const { scores, test } = this.props;\n    if (!scores) {\n      return this.loadingSpinner();\n    }\n    if (scores.student_test_id !== test.student_test_id) {\n      return this.loadingSpinner();\n    }\n    const { subjects, cross_test_score, sub_section_score, essay } = scores;\n    return (\n      <div className=\"container\" id=\"scoresRef\">\n        <div className=\"cards-section\">\n          <div className=\"d-flex-content same-height justify-center row mb-0\">\n            <TotalScoreCard subjectScores={subjects} />\n            {/* <SectionScoreCard sectionScores={sub_section_score} /> */}\n          </div>\n          <div className=\"d-flex-content same-height justify-center row mb-0\">\n            <TestScoreCard subjectScores={subjects} />\n            <EssayScoresCard essayScores={essay} />\n          </div>\n          <div className=\"d-flex-content justify-center row mb-0\">\n            <CrossTestScoresCard crossTestScores={cross_test_score} />\n            <SubScoresCard subScores={sub_section_score} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nDetailTestScorePage.propTypes = {\n  getTargetImage: PropTypes.func.isRequired,\n  test: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  scores: makeSelectActiveTestScores(),\n  activeStudent: makeSelectActiveStudent(),\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetScores: scores => dispatch(setActiveTestScores(scores)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(DetailTestScorePage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GroupBlock from '../common/GroupBlock';\n\nclass MathPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      parentScores: [],\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.scores) {\n      const { scores: { children } } = this.props;\n      this.setState({\n        parentScores: children,\n      });\n    }\n  };\n\n  mapGroupBlcok = () => {\n    const { parentScores } = this.state;\n    return (\n      parentScores instanceof Array &&\n      parentScores.map(group => <GroupBlock data={group} key={group.id} />)\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slide\">\n        <div className=\"container-sm\">\n          <div className=\"graphs-section graphs-students\" id=\"mathAnalysisBarImg\">\n            {this.mapGroupBlcok()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMathPage.propTypes = {\n  scores: PropTypes.object,\n};\n\nexport default MathPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GroupBlock from '../common/GroupBlock';\n\nclass ReadingPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      parentScores: [],\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.scores) {\n      const { scores: { children } } = this.props;\n      this.setState({\n        parentScores: children,\n      });\n    }\n  };\n\n  componentWillReceiveProps = nextProps => {\n    if (nextProps.scores) {\n      const { scores: { children } } = nextProps;\n      this.setState({\n        parentScores: children,\n      });\n    }\n  };\n\n  mapGroupBlcok = () => {\n    const { parentScores } = this.state;\n    return parentScores instanceof Array && parentScores.map(group => <GroupBlock data={group} key={group.id} />);\n  };\n\n  render() {\n    return (\n      <div className=\"slide\">\n        <div className=\"container-sm\">\n          <div className=\"graphs-section graphs-students\" id=\"readingAnalysisBarImg\">\n            {this.mapGroupBlcok()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReadingPage.propTypes = {\n  scores: PropTypes.object,\n};\n\nexport default ReadingPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst StrengthsWeaknessesNavBar = ({ activeSlide, onSetActiveSlide, scores }) => (\n  // eslint-disable-next-line no-unused-expressions\n  <div\n    className=\"card-panel light-blue accent-2 white-text\"\n    style={{ display: \"block\" }}\n  >\n    <div className=\"container\">\n      <div className=\"row mb-0\">\n        <div\n          className=\"nav-slick nav-tab\"\n          style={{ fontSize: \"15px\", display: \"table\", margin: \"0 auto\" }}\n        >\n          {scores.readingScores && <div className=\"tab slide col 3\" style={{ padding: \"0px 70px\" }}>\n            <a\n              className={activeSlide === \"reading\" ? \"active\" : \"\"}\n              onClick={() => onSetActiveSlide(\"reading\")}\n              href=\"#\"\n            >\n              Reading\n            </a>\n          </div>}\n          {scores.writingSCores && <div className=\"tab slide col 3\" style={{ padding: \"0px 70px\" }}>\n            <a\n              className={activeSlide === \"writing\" ? \"active\" : \"\"}\n              onClick={() => onSetActiveSlide(\"writing\")}\n              href=\"#\"\n            >\n              Writing\n            </a>\n          </div>}\n          {scores.mathScores && <div className=\"tab slide col 3\" style={{ padding: \"0px 70px\" }}>\n            <a\n              className={activeSlide === \"math\" ? \"active\" : \"\"}\n              onClick={() => onSetActiveSlide(\"math\")}\n              href=\"#\"\n            >\n              Math\n            </a>\n          </div>}\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nStrengthsWeaknessesNavBar.propTypes = {\n  activeSlide: PropTypes.string.isRequired,\n  onSetActiveSlide: PropTypes.func.isRequired,\n};\nexport default StrengthsWeaknessesNavBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst readingData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#35a6af', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\nconst writingData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#389b7d', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\nconst mathData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#4785f4', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\n\nconst SubjectsCard = ({ readingScores, writingScores, mathScores }) =>\n  (<div className=\"col s12 l8 card-width-772\">\n    <div className=\"card-block\">\n      <h2>Subjects</h2>\n      <div className=\"card-main-full card\">\n        <div className=\"card-content\">\n          <div className=\"several-charts-row row mb-0\">\n            <div className=\"col s4 center-align\" id=\"analysisReadingCicleImg\">\n              {readingScores &&\n                <div className=\"chart-block chart-block-182\">\n                  <Doughnut\n                    data={() => readingData(readingScores.score.correct, readingScores.score.total)}\n                    width={200}\n                    height={200}\n                    options={{\n                      cutoutPercentage: 75,\n                    }}\n                  />\n                  <div className=\"chart-text\">\n                    <span className=\"title\">Reading</span>\n                    <span className=\"value\">\n                      {(readingScores.score.percent_correct).toFixed(0)}%\n                    </span>\n                    <span className=\"description\">\n                      <b>{readingScores.score.correct}</b> of <b>{readingScores.score.total}</b>\n                    </span>\n                  </div>\n                </div>}\n            </div>\n\n            <div className=\"col s4 center-align\" id=\"analysisWritingCircleImg\">\n              {writingScores &&\n                <div className=\"chart-block chart-block-182\">\n                  <Doughnut\n                    data={() => writingData(writingScores.score.correct, writingScores.score.total)}\n                    width={200}\n                    height={200}\n                    options={{\n                      cutoutPercentage: 75,\n                    }}\n                  />\n                  <div className=\"chart-text\">\n                    <span className=\"title\">Writing</span>\n                    <span className=\"value\">\n                      {(writingScores.score.percent_correct).toFixed(0)}%\n                    </span>\n                    <span className=\"description\">\n                      <b>{writingScores.score.correct}</b> of <b>{writingScores.score.total}</b>\n                    </span>\n                  </div>\n                </div>}\n            </div>\n\n            <div className=\"col s4 center-align\" id=\"analysisMathCircleImg\">\n              {mathScores &&\n                <div className=\"chart-block chart-block-182\">\n                  <Doughnut\n                    data={() => mathData(mathScores.score.correct, mathScores.score.total)}\n                    width={200}\n                    height={200}\n                    options={{\n                      cutoutPercentage: 75,\n                    }}\n                  />\n                  <div className=\"chart-text\">\n                    <span className=\"title\">Math</span>\n                    <span className=\"value\">\n                      {(mathScores.score.percent_correct).toFixed(0)}%\n                    </span>\n                    <span className=\"description\">\n                      <b>{mathScores.score.correct}</b> of <b>{mathScores.score.total}</b>\n                    </span>\n                  </div>\n                </div>}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>);\n\nSubjectsCard.propTypes = {};\n\nexport default SubjectsCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GroupBlock from '../common/GroupBlock';\n\nclass WritingPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      parentScores: [],\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.scores) {\n      const { scores: { children } } = this.props;\n      this.setState({\n        parentScores: children,\n      });\n    }\n  };\n\n  mapGroupBlcok = () => {\n    const { parentScores } = this.state;\n    return (\n      parentScores instanceof Array &&\n      parentScores.map(group => <GroupBlock data={group} key={group.id} />)\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slide\">\n        <div className=\"container-sm\">\n          <div className=\"graphs-section graphs-students\" id=\"writingAnalysisBarImg\">\n            {this.mapGroupBlcok()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nWritingPage.propTypes = {\n  scores: PropTypes.object,\n};\n\nexport default WritingPage;\n","export const getScoreStatus = score => {\n  let scoreStyle = '';\n  if (score >= 90) {\n    scoreStyle = 'badge-rounded-sm light-green lighten-1 badge white-text';\n  } else if (score > 75 && score < 90) {\n    scoreStyle = 'badge-rounded-sm light-green lighten-1 darken-1 badge white-text';\n  } else if (score > 60 && score <= 75) {\n    scoreStyle = 'badge-rounded-sm light-green lighten-1 darken-2 badge white-text';\n  } else if (score > 40 && score <= 60) {\n    scoreStyle = 'badge-rounded-sm orange darken-5 badge white-text';\n  } else {\n    scoreStyle = 'badge-rounded-sm red darken-5 badge white-text';\n  }\n  return scoreStyle;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SubBlock from './SubBlock';\n\nimport { getScoreStatus } from '../common/GetScoreStatus';\n\nclass GroupBlock extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  mapGroupRow = () => {\n    const { data: { children } } = this.props;\n    if (children.length !== 0) {\n      return children.map(children => <SubBlock data={children} key={children.id} />);\n    }\n  };\n\n  render() {\n    const { data: { name, score: { percent_correct, correct, incorrect, total } } } = this.props;\n    return (\n      <div className=\"graphs-block\">\n        <div className=\"graph-row graph-row-title\">\n          <div className=\"graph-col text-column\">\n            <h3 className=\"graph-title\">\n              <span className={getScoreStatus((percent_correct).toFixed(0))}>\n                {(percent_correct).toFixed(0)}%\n              </span>\n              {name}\n            </h3>\n          </div>\n          <div className=\"graph-col graph-container\">\n            <div className=\"graph-linear-students\">\n              <div\n                className=\"graph-holder\"\n                style={{ width: `${(correct / total * 100).toFixed(0)}%` }}\n              >\n                <div className=\"graph-admin\">\n                  <div\n                    className=\"part-red\"\n                    style={{ width: `${(incorrect / total * 100).toFixed(0)}%` }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"graph-col graph-info\">\n            <span className=\"text-large\">\n              {correct}\n            </span>\n            <span className=\"text-small\">out of</span>\n            <span className=\"text-large\">\n              {total}\n            </span>\n          </div>\n        </div>\n        {this.props.data.children && this.mapGroupRow()}\n      </div>\n    );\n  }\n}\n\nGroupBlock.propTypes = {};\n\nexport default GroupBlock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getScoreStatus } from '../common/GetScoreStatus';\n\nconst GroupRow = ({ data: { name, score: { percent_correct, correct, incorrect, total } } }) =>\n  (<div className=\"graph-row graph-row-inner\">\n    <div className=\"graph-col text-column\">\n      <strong className=\"graph-subtitle\">\n        <span className={getScoreStatus((percent_correct).toFixed(0))}>\n          {(percent_correct).toFixed(0)}%\n        </span>\n        {name}\n      </strong>\n    </div>\n    <div className=\"graph-col graph-container\">\n      <div className=\"graph-linear-students\">\n        <div className=\"graph-holder\" style={{ width: `${(correct / total * 100).toFixed(0)}%` }}>\n          <div className=\"graph-admin\">\n            <div className=\"part-red\" style={{ width: `${(incorrect / total * 100).toFixed(0)}%` }} />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div className=\"graph-col graph-info\">\n      <span className=\"text-large\">\n        {correct}\n      </span>\n      <span className=\"text-small\">out of</span>\n      <span className=\"text-large\">\n        {total}\n      </span>\n    </div>\n  </div>);\n\nGroupRow.propTypes = {};\n\nexport default GroupRow;\n","import React from 'react';\nimport GroupRow from './GroupRow';\n\nimport { getScoreStatus } from '../common/GetScoreStatus';\n\nclass SubBlock extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  mapSubRow = data => {\n    if (data.children) {\n      return data.children.map(children => <GroupRow data={children} key={children.id} />);\n    }\n  };\n\n  renderSubBlock = data => {\n    return (\n      <React.Fragment>\n        <div className=\"graph-row-block\">\n          <div className=\"graph-row graph-row-subtitle\">\n            <div className=\"graph-col text-column\">\n              <strong className=\"graph-subtitle\">\n                <span className={getScoreStatus(data.score.percent_correct)}>\n                  {(data.score.percent_correct).toFixed(0)}%\n                </span>\n                {data.name}\n              </strong>\n            </div>\n            <div className=\"graph-col graph-container\">\n              <div className=\"graph-linear-students\">\n                <div\n                  className=\"graph-holder\"\n                  style={{width: `${(data.score.correct / data.score.total * 100).toFixed(0)}%`}}\n                >\n                  <div className=\"graph-admin\">\n                    <div\n                      className=\"part-red\"\n                      style={{\n                        width: `${(data.score.incorrect / data.score.total * 100).toFixed(0)}%`,\n                      }}\n                    />\n                  </div>\n                \n              </div>\n            </div>\n          </div>\n          <div className=\"graph-col graph-info\">\n            <span className=\"text-large\">\n              {data.score.correct}\n            </span>\n            <span className=\"text-small\">out of</span>\n            <span className=\"text-large\">\n              {data.score.total}\n            </span>\n          </div>\n        </div>\n        {this.mapSubRow(data)}\n      </div>\n    </React.Fragment>\n  )};\n\n  render() {\n    return this.renderSubBlock(this.props.data);\n  }\n}\n\nSubBlock.propTypes = {};\n\nexport default SubBlock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport StrengthsWeaknessesNavBar from './components/StrengthsWeaknessesNavBar';\nimport ReadingPage from './components/ReadingPage';\nimport WritingPage from './components/WritingPage';\nimport MathPage from './components/MathPage';\nimport SubjectsCard from './components/SubjectsCard';\n\nimport { makeSelectActiveTestScores } from '../index/selectors';\nimport { fetchStudentTestScoreApi } from '../index/api';\n\nclass DetailTestAnswerSheetComplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSlide: 'reading',\n      readingScores: null,\n      writingScores: null,\n      mathScores: null,\n    };\n  }\n\n  async componentDidMount() {\n    this.props.onRef(this);\n    const { activeTestScores } = this.props;\n    let fetchedScores = {};\n    if (!this.props.activeTestScores) {\n      const { test, activeStudent } = this.props;\n      const response = await fetchStudentTestScoreApi(activeStudent.id, test.student_test_id);\n      if (response && !response.message) {\n        fetchedScores = response.categories;\n      }\n    }\n    const categories = activeTestScores ? activeTestScores.categories : fetchedScores;\n    if (categories && categories.length !== 0) {\n      categories.map(category => {\n        switch (category.name) {\n          case 'Writing':\n            this.setState({\n              writingScores: category,\n            });\n            break;\n          case 'Math':\n            this.setState({\n              mathScores: category,\n            });\n            break;\n          case 'Reading':\n            this.setState({\n              readingScores: category,\n            });\n            break;\n          default:\n        }\n      });\n    }\n  }\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  getComponentImages = () =>\n    new Promise(async resolve => {\n      const circleImageList = [];\n      let barImageList = [];\n      const circleRefs = [\n        { id: 'analysisReadingCicleImg' },\n        { id: 'analysisWritingCircleImg' },\n        { id: 'analysisMathCircleImg' },\n      ];\n      const barRefs = [\n        { id: 'readingAnalysisBarImg', state: 'reading' },\n        { id: 'writingAnalysisBarImg', state: 'writing' },\n        { id: 'mathAnalysisBarImg', state: 'math' },\n      ];\n\n      const getCircleImagesPromise = circleRefs.reduce(\n        (accumulatorPromise, circleRef) =>\n          accumulatorPromise\n            .then(async () => {\n              const [currentImg] = await Promise.all([this.onHandleTargetImage(circleRef.id)]);\n              circleImageList.push(currentImg);\n            })\n            .catch(console.error),\n        Promise.resolve(),\n      );\n      barImageList = await Promise.all(barRefs.map(async barRef => await this.getData(barRef)));\n      getCircleImagesPromise.then(() => {\n        const imgList = { circleImageList, barImageList };\n        resolve(imgList);\n      });\n    });\n  getData = item =>\n    new Promise(async resolve => {\n      setTimeout(() => {\n        this.setState({ activeSlide: item.state }, async () => {\n          const [currentImg] = await Promise.all([this.onHandleTargetImage(item.id)]);\n          if (currentImg) resolve(currentImg);\n        });\n      }, 500);\n    });\n\n  onHandleTargetImage = async currentRef =>\n    new Promise(async resolve => {\n      const { getTargetImage } = this.props;\n      const [currentImg] = await Promise.all([getTargetImage(document.getElementById(currentRef))]);\n      resolve(currentImg);\n    });\n\n  onSetActiveSlide = activeSlide => this.setState({ activeSlide });\n\n  renderCurrentSlide = () => {\n    const { activeSlide, readingScores, mathScores, writingScores } = this.state;\n    if (activeSlide === 'reading') {\n      return <ReadingPage scores={readingScores} />;\n    }\n    if (activeSlide === 'writing') {\n      return <WritingPage scores={writingScores} />;\n    }\n    if (activeSlide === 'math') {\n      return <MathPage scores={mathScores} />;\n    }\n    return null;\n  };\n\n  render() {\n    const { activeSlide, readingScores, mathScores, writingScores } = this.state;\n    return (\n      <React.Fragment>\n        <SubjectsCard\n          readingScores={readingScores}\n          writingScores={writingScores}\n          mathScores={mathScores}\n        />\n        <div className=\"card-block\">\n          <h2>Details</h2>\n          <div className=\"card-main-full card\">\n            <div className=\"slick-tabs-gallery\">\n              <StrengthsWeaknessesNavBar\n                activeSlide={activeSlide}\n                onSetActiveSlide={this.onSetActiveSlide}\n                scores={{ readingScores, mathScores, writingScores }}\n              />\n            </div>\n            <div className=\"card-content\">\n              <div className=\"main-slick\">\n                {this.renderCurrentSlide()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nDetailTestAnswerSheetComplete.propTypes = {\n  getTargetImage: PropTypes.func.isRequired,\n  activeTestScores: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  activeTestScores: makeSelectActiveTestScores(),\n});\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect)(DetailTestAnswerSheetComplete);\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\n\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport sampleTopics from '../../../../utils/sampleTopics';\nimport worksheetSortOptions from '../../../../../utils/worksheetSortOptions';\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      worksheetName: '',\n      topic: {},\n      sort: {},\n      activeFilters: [],\n    };\n  }\n\n  onToggleShowFilters = () => this.setState(({ open }) => ({ open: !open }))\n  onClearFilters = () => this.setState({ activeFilters: [] })\n\n  handleFilterClick = (filter) => {\n    const { activeFilters: currentActiveFilters } = this.state;\n    let activeFilters;\n    if (currentActiveFilters.indexOf(filter) === -1) {\n      activeFilters = update(currentActiveFilters, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = currentActiveFilters.indexOf(filter);\n      activeFilters = update(currentActiveFilters, {\n        $splice: [[filterIndex, 1]],\n      });\n    }\n    this.setState({ activeFilters });\n  }\n\n  // eslint-disable-next-line consistent-return\n  handleFilterChange = (event, name) => {\n    const { onSetFilteredTopicState, onUnsetFilteredTopicState, onSetSort } = this.props;\n    const value = event.target ? event.target.value : event;\n    const updatedState = update(this.state, {\n      $merge: { [name]: value },\n    });\n    this.setState(updatedState);\n    if (name === 'topic') {\n      if (event === '') {\n        return onUnsetFilteredTopicState();\n      }\n      return onSetFilteredTopicState(event);\n    } else if (name === 'sort') {\n      return onSetSort(event);\n    }\n  }\n\n  // Strips the entered name of any spaces and capitalizing and fires off the ListPage event that filters the instructors\n  submitNameFilter = () => {\n    const { onSetFilteredState, onUnsetFilteredState } = this.props;\n    const { worksheetName } = this.state;\n    if (worksheetName === '') {\n      onUnsetFilteredState();\n    }\n    const transformedName = worksheetName.replace(/\\s/g, \"\").toLowerCase();\n    onSetFilteredState(transformedName);\n  }\n\n  render() {\n    const { open, activeFilters, worksheetName, topic, sort } = this.state;\n    const { currentView, onChangeView } = this.props;\n    return (\n      <div className=\"filter-form-holder\">\n        <ul className=\"collapsible expandable\">\n          <li>\n            <div className=\"collapsible-body\" style={open ? { display: 'block' } : { display: 'none' }}>\n              <div className=\"filter-form_checkbox-list-holder justify-center\">\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"reading\"\n                      checked={activeFilters.indexOf('reading') !== -1}\n                      onChange={() => this.handleFilterClick('reading')}\n                    />\n                    <label htmlFor=\"reading\">Reading</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"writing\"\n                      checked={activeFilters.indexOf('writing') !== -1}\n                      onChange={() => this.handleFilterClick('writing')}\n                    />\n                    <label htmlFor=\"writing\">Writing</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"math\"\n                      checked={activeFilters.indexOf('math') !== -1}\n                      onChange={() => this.handleFilterClick('math')}\n                    />\n                    <label htmlFor=\"math\">Math</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"beginning\"\n                      checked={activeFilters.indexOf('beginning') !== -1}\n                      onChange={() => this.handleFilterClick('beginning')}\n                    />\n                    <label htmlFor=\"beginning\">Beginning</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"developing\"\n                      checked={activeFilters.indexOf('developing') !== -1}\n                      onChange={() => this.handleFilterClick('developing')}\n                    />\n                    <label htmlFor=\"developing\">Developing</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"accomplished\"\n                      checked={activeFilters.indexOf('accomplished') !== -1}\n                      onChange={() => this.handleFilterClick('accomplished')}\n                    />\n                    <label htmlFor=\"accomplished\">Accomplished</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"exemplary\"\n                      checked={activeFilters.indexOf('exemplary') !== -1}\n                      onChange={() => this.handleFilterClick('exemplary')}\n                    />\n                    <label htmlFor=\"exemplary\">Exemplary</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"unassigned\"\n                      checked={activeFilters.indexOf('unassigned') !== -1}\n                      onChange={() => this.handleFilterClick('unassigned')}\n                    />\n                    <label htmlFor=\"unassigned\">Unassigned</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"complete\"\n                      checked={activeFilters.indexOf('complete') !== -1}\n                      onChange={() => this.handleFilterClick('complete')}\n                    />\n                    <label htmlFor=\"complete\">Complete</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"incomplete\"\n                      checked={activeFilters.indexOf('incomplete') !== -1}\n                      onChange={() => this.handleFilterClick('incomplete')}\n                    />\n                    <label htmlFor=\"incomplete\">Incomplete</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"hasReviewFlags\"\n                      checked={activeFilters.indexOf('hasReviewFlags') !== -1}\n                      onChange={() => this.handleFilterClick('hasReviewFlags')}\n                    />\n                    <label htmlFor=\"hasReviewFlags\">Has Review Flags</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"dueToday\"\n                      checked={activeFilters.indexOf('dueToday') !== -1}\n                      onChange={() => this.handleFilterClick('dueToday')}\n                    />\n                    <label htmlFor=\"dueToday\">Due Today</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"dueNextSession\"\n                      checked={activeFilters.indexOf('dueNextSession') !== -1}\n                      onChange={() => this.handleFilterClick('dueNextSession')}\n                    />\n                    <label htmlFor=\"dueNextSession\">Due By Next Session</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"dueThisWeek\"\n                      checked={activeFilters.indexOf('dueThisWeek') !== -1}\n                      onChange={() => this.handleFilterClick('dueThisWeek')}\n                    />\n                    <label htmlFor=\"dueThisWeek\">Due this Week</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"overdue\"\n                      checked={activeFilters.indexOf('overdue') !== -1}\n                      onChange={() => this.handleFilterClick('overdue')}\n                    />\n                    <label htmlFor=\"overdue\">Overdue</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"some-class\"\n                      checked={activeFilters.indexOf('class') !== -1}\n                      onChange={() => this.handleFilterClick('class')}\n                    />\n                    <label htmlFor=\"some-class\">Some Class</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"tutoring\"\n                      checked={activeFilters.indexOf('tutoring') !== -1}\n                      onChange={() => this.handleFilterClick('tutoring')}\n                    />\n                    <label htmlFor=\"tutoring\">Tutoring</label>\n                  </li>\n                </ul>\n              </div>\n              <div className=\"d-flex row mb-0 justify-center\">\n                <div className=\"col s12 m3\">\n                  <div className=\"search-field input-field\">\n                    <input\n                      type=\"search\"\n                      id=\"name_search\"\n                      value={worksheetName}\n                      className=\"input-control validate\"\n                      onChange={(event) => this.handleFilterChange(event, 'worksheetName')}\n                    />\n                    <button\n                      type=\"submit\"\n                      className=\"search-button\"\n                      onClick={this.submitNameFilter}\n                    >\n                      <i className=\"icon-search\"></i>\n                    </button>\n                    <label className={worksheetName.length ? 'label active' : 'label'} htmlFor=\"name_search\">Search</label>\n                  </div>\n                </div>\n                <div className=\"col s12 m3\">\n                  <div className=\"input-field\">\n                    <Dropdown\n                      value={getValueFromState(topic, sampleTopics)}\n                      onChange={(event) => this.handleFilterChange(event, 'topic')}\n                      options={sampleTopics}\n                      label=\"Topic\"\n                      stateKey=\"topic\"\n                      dropdownKey=\"topic\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row mb-0 d-flex align-items-center\">\n              <div className=\"col s12 l4\">\n                <div className=\"row mb-0\">\n                  <div className=\"col s12 xl7\">\n                    <div className=\"input-field\">\n                      <Dropdown\n                        value={getValueFromState(sort, worksheetSortOptions)}\n                        onChange={(event) => this.handleFilterChange(event, 'sort')}\n                        options={worksheetSortOptions}\n                        label=\"Sort By\"\n                        stateKey=\"sort\"\n                        dropdownKey=\"sort\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"switcher-block col s12 l4\">\n                <div className=\"view-switcher\">\n                  <ul className=\"switcher center-align\">\n                    <li\n                      data-view=\"view-full\"\n                      className={currentView === 'full' ? 'active' : ''}\n                      onClick={() => onChangeView('full')}\n                    >\n                      <a href=\"#\">Full View</a>\n                    </li>\n                    <li\n                      data-view=\"view-list\"\n                      className={currentView === 'list' ? 'active' : ''}\n                      onClick={() => onChangeView('list')}\n                    >\n                      {/* @TODO listview commented out for now */}\n                      {/* <a href=\"#\">List View</a> */}\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              <div className=\"col s12 l4\">\n                <div className=\"option-filters\">\n                  <div className=\"option-item clear\"><a href=\"#\" onClick={this.onClearFilters}>Clear Filters</a></div>\n                  <div className=\"option-item\">\n                    <span\n                      className=\"collapsible-header\"\n                      onClick={this.onToggleShowFilters}\n                    >\n                      <span className=\"open-text\">{open ? 'Hide Filters' : 'Open Filters'}</span>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nFilterSection.propTypes = {\n  currentView: PropTypes.string.isRequired,\n  onChangeView: PropTypes.func.isRequired,\n  onSetSort: PropTypes.func.isRequired,\n  onSetFilteredTopicState: PropTypes.func.isRequired,\n  onUnsetFilteredTopicState: PropTypes.func.isRequired,\n  onSetFilteredState: PropTypes.func.isRequired,\n  onUnsetFilteredState: PropTypes.func.isRequired,\n};\n\nexport default FilterSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nimport formatTimeEstimate from '../../../../../utils/formatTimeEstimate';\nimport statusColorMap, { chartColorMap } from '../../utils/statusColorMap';\n\nconst data = (percentage, status) => ({\n  datasets: [{\n    data: [percentage, 100 - percentage],\n    backgroundColor: [\n      chartColorMap[status],\n      '#eaeaea',\n    ],\n  }],\n});\n\nclass FullView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n    }\n  }\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  handleDropdownClick = (event, index) => {\n    const { dropdownIsOpen } = this.state;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return this.onCloseDropdown();\n    }\n    return this.onSetDropdown(index);\n  }\n\n  mapWorksheetCards = () => {\n    const { worksheets, onToggleDetailModalOpen } = this.props;\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    return worksheets.map((worksheet, index) => {\n      const { disabled, worksheetName, worksheetSource, subject, problemType, difficulty, score, status, problems, timeEstimate, availableDate, dueDate, classifications, flags, late } = worksheet;\n      return (\n        <div className=\"card-main-col col s12 m8 l7 xl5\" key={worksheet.id}>\n          <div className={disabled ? 'card-main work-card card-disabled card' : 'card-main work-card card'}>\n            <div className=\"card-panel panel-border\">\n              <div className=\"card-panel-row row\">\n                <div className=\"icon-col col s2\">\n                  <span className=\"block-icon\">\n                    <i className=\"icon-sheets-w\"></i>\n                  </span>\n                </div>\n                <div className=\"col s8\">\n                  <div className=\"card-panel-text\">\n                    <div className=\"text-small truncate\">Worksheet ({subject})</div>\n                    <div className=\"text-large truncate\">{worksheetName}</div>\n                  </div>\n                </div>\n                <div className=\"position-top right-align\">\n                  <div className=\"icons-row\">\n                    {flags.length > 0 && (\n                      <span className=\"badge-rounded-xs badge red darken-2 white-text\">\n                        <b className=\"badge-text\">{flags.length}</b> <i className=\"icon-flag\"></i>\n                      </span>\n                    )}\n                    <div className=\"dropdown-block col\">\n                      <a\n                        href='#'\n                        data-target='dropdown01'\n                        className='dropdown-trigger btn'\n                        onClick={(event) => this.handleDropdownClick(event, index)}\n                      >\n                        <i className=\"material-icons dots-icon\">more_vert</i>\n                      </a>\n                      <If condition={dropdownIsOpen && dropdownIndex === index}>\n                        <ul id='dropdown01' className='dropdown-content dropdown-wide' style={{ display: 'block', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}>\n                          <li>\n                            <a\n                              href=\"#\"\n                              className=\"modal-trigger link-block\"\n                              onClick={() => onToggleDetailModalOpen(index)}\n                            >\n                              View Details\n                            </a>\n                          </li>\n                          <li><a href=\"#!\">Dismiss Flags</a></li>\n                          <li><a href=\"#!\">Reset</a></li>\n                          <li><a href=\"#!\" className=\"link-delete\">Delete</a></li>\n                        </ul>\n                      </If>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card-top-block\">\n                <div className=\"d-flex row mb-0\">\n                  <div className=\"left-col col s7\">\n                    <dl className=\"dl-horizontal\">\n                      <dt>Problem Type:</dt>\n                      <dd>{problemType}</dd>\n                    </dl>\n                  </div>\n                  <div className=\"right-col col s5 right-align\">\n                    <dl className=\"dl-horizontal\">\n                      <dt>Diﬃculty:</dt>\n                      <dd>{difficulty}</dd>\n                    </dl>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"card-content\">\n              <div className=\"d-flex sameheight-all row mb-0\">\n                <div className=\"col s6\">\n                  <div className=\"chart-container\">\n                    <div className=\"chart-holder\">\n                      <Doughnut\n                        data={() => data(score, status)}\n                        options={{\n                          circumference: 1 * Math.PI,\n                          rotation: 1 * Math.PI,\n                          cutoutPercentage: 60,\n                          tooltips: false,\n                        }}\n                      />\n                      <span className=\"chart-value\" style={{ backgroundColor: chartColorMap[status] }}><span data-count-up data-start-val=\"0\" data-end-val=\"96\" data-duration=\"1\"></span><span className=\"percentage\">{score && `${score}%`}</span></span>\n                    </div>\n                    <div className=\"chart-row\">\n                      <div className=\"chart-col chart-start\">&nbsp;</div>\n                      <div className=\"chart-col chart-end\">\n                        <span className=\"amount\" style={{ color: chartColorMap[status] }}>{problems}</span>\n                      </div>\n                    </div>\n                    <div className=\"chart-description\">\n                      <dl className=\"dl-horizontal\">\n                        <dt>Time Est:</dt>\n                        <dd>{formatTimeEstimate(timeEstimate)}</dd>\n                      </dl>\n                      <dl className=\"dl-horizontal\">\n                        <dt>Problems:</dt>\n                        <dd>{problems}</dd>\n                      </dl>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col s6 right-align justify-end\">\n                  <div className=\"chart-description\">\n                    <dl className=\"dl-horizontal\">\n                      <dt>Available:</dt>\n                      <dd><time dateTime={availableDate}>{availableDate}</time></dd>\n                    </dl>\n                    <dl className={late ? 'dl-horizontal red-text text-darken-3' : 'dl-horizontal'}>\n                      <Choose>\n                        <When condition={disabled}>\n                          <dt>No Due Date</dt>\n                        </When>\n                        <Otherwise>\n                          <dt>Due:</dt>\n                          <dd><time dateTime={dueDate}>{dueDate}</time></dd>\n                        </Otherwise>\n                      </Choose>\n                    </dl>\n                  </div>\n                  <div className=\"align-self-end\">\n                    <span className={`badge badge-rounded-md ${statusColorMap[status]} white-text`}>{status}</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card-text\">\n                <dl className=\"dl-horizontal\">\n                  <dt>Worksheet Source:</dt>\n                  <dd>{worksheetSource}</dd>\n                </dl>\n              </div>\n              <div className=\"card-inner-row\">\n                <div className=\"row-holder\">\n                  <ul className=\"classification-list\">\n                    {classifications.map(classification => (\n                      <li className=\"class-box\" key={classification}>\n                        {classification}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    })\n  }\n\n  render() {\n    const { worksheets } = this.props;\n    return (\n      <div className=\"content-section\">\n          <div className=\"result-row center-align\">\n            <b className=\"result\"> - {worksheets.length} results -</b>\n          </div>\n          <div className=\"row d-flex-content card-width-272\">\n            {this.mapWorksheetCards()}\n          </div>\n        </div>\n    )\n  }\n}\n\nFullView.propTypes = {\n  worksheets: PropTypes.array.isRequired,\n  onToggleDetailModalOpen: PropTypes.func.isRequired,\n};\n\nexport default FullView;\n","import React from 'react';\n\nconst TableHeader = () => (\n  <div className=\"list-table-header\">\n    <div className=\"list-table-row\">\n      <div className=\"list-table-cell icon-cell\">&nbsp;</div>\n      <div className=\"list-table-cell name-cell\"><b>Worksheet</b></div>\n      <div className=\"list-table-cell graph-cell\"><b>Score</b></div>\n      <div className=\"list-table-cell description-cell\"><b>Problems</b></div>\n      <div className=\"list-table-cell time-cell\"><b>Time Est</b></div>\n      <div className=\"list-table-cell date-cell\"><b>Assign</b></div>\n      <div className=\"list-table-cell date-cell\"><b>Due</b></div>\n      <div className=\"list-table-cell completed-cell\"><b>Completed</b></div>\n      <div className=\"list-table-cell flags-cell\"><b>Flags</b></div>\n      <div className=\"list-table-cell status-cell\"><b>Status</b></div>\n      <div className=\"list-table-cell drop-cell\">&nbsp;</div>\n    </div>\n  </div>\n);\n\nexport default TableHeader;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TableHeader from './components/TableHeader';\n\nimport formatTimeEstimate from '../../../../../utils/formatTimeEstimate';\nimport statusColorMap from '../../utils/statusColorMap';\n\nclass ListView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n    };\n  }\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  handleDropdownClick = (event, index) => {\n    const { dropdownIsOpen } = this.state;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return this.onCloseDropdown();\n    }\n    return this.onSetDropdown(index);\n  }\n\n  mapWorksheetRows = () => {\n    const { worksheets, onToggleDetailModalOpen } = this.props;\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    return worksheets.map((worksheet, index) => {\n      const { disabled, worksheetName, score, status, problems, timeEstimate, assignDate, dueDate, completed, flags } = worksheet;\n      return (\n        <div className={disabled ? 'card card-disabled list-table-row' : 'card list-table-row'} key={worksheet.id}>\n          <div className=\"list-table-cell icon-cell\">\n            <span className=\"block-icon\">\n              <i className=\"icon-sheets-w\"></i>\n            </span>\n          </div>\n          <div className=\"list-table-cell name-cell\">\n            <div className=\"card-panel-text truncate\">\n              <div className=\"text-large truncate\">{worksheetName}</div>\n            </div>\n          </div>\n          <div className=\"list-table-cell graph-cell\">\n            {score && (\n              <span className={`chart-bar ${statusColorMap[status]} white-text`}>{score}%</span>\n            )}\n          </div>\n          <div className=\"list-table-cell description-cell\">{problems}</div>\n          <div className=\"list-table-cell time-cell\">{formatTimeEstimate(timeEstimate)}</div>\n          <div className=\"list-table-cell date-cell\"><time dateTime=\"2019-01-27\">{assignDate}</time></div>\n          <div className=\"list-table-cell date-cell\"><time dateTime=\"2019-01-27\">{dueDate}</time></div>\n          <div className=\"list-table-cell completed-cell\">\n            {completed && (\n              <React.Fragment>\n                {completed} of {problems}\n              </React.Fragment>\n            )}\n          </div>\n          <div className=\"list-table-cell flags-cell\">\n            {flags.length > 0 && (\n              <span className=\"badge-rounded-xs badge red darken-2 white-text\"><b className=\"badge-text\">{flags.length}</b> <i className=\"icon-flag\"></i></span>\n            )}\n          </div>\n          <div className=\"list-table-cell status-cell\">\n            <span className={`badge badge-rounded-md ${statusColorMap[status]} white-text`}>{status}</span>\n          </div>\n          <div className=\"list-table-cell drop-cell\">\n            <div className=\"dropdown-block\">\n              <a\n                href='#'\n                data-target='dropdown01'\n                className='dropdown-trigger btn'\n                onClick={(event) => this.handleDropdownClick(event, index)}\n              >\n                <i className=\"material-icons dots-icon\">more_vert</i>\n              </a>\n              <If condition={dropdownIsOpen && dropdownIndex === index}>\n                <ul id='dropdown01' className='dropdown-content dropdown-wide' style={{ display: 'block', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}>\n                  <li>\n                    <a\n                      href=\"#\"\n                      className=\"modal-trigger link-block\"\n                      onClick={() => onToggleDetailModalOpen(index)}\n                    >\n                      View Details\n                    </a>\n                  </li>\n                  <li><a href=\"#!\">Dismiss Flags</a></li>\n                  <li><a href=\"#!\">Reset</a></li>\n                  <li><a href=\"#!\" className=\"link-delete\">Delete</a></li>\n                </ul>\n              </If>\n            </div>\n          </div>\n        </div>\n      )\n    })\n  }\n\n  render() {\n    const { worksheets } = this.props;\n    return (\n      <React.Fragment>\n        <div className=\"content-section\">\n          <div className=\"container-md\">\n            <div className=\"result-row center-align\">\n              <b className=\"result\"> - {worksheets.length} results -</b>\n            </div>\n            <div className=\"list-view-section\">\n              <div className=\"list-table\">\n                <TableHeader />\n                <div className=\"list-table-body\">\n                  {this.mapWorksheetRows()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nListView.propTypes = {\n  worksheets: PropTypes.array.isRequired,\n  onToggleDetailModalOpen: PropTypes.func.isRequired,\n}\n\nexport default ListView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport FullView from './components/FullView';\nimport ListView from './components/ListView';\nimport FilterSection from './components/FilterSection';\n\nimport sampleWorksheets from './utils/sampleWorksheets';\nimport { dueDate, assignDate, problems, completed, flags, score, timeEstimate } from '../../utils/sortFunctions';\nimport LessonWorksheetTestSection from '../LessonWorksheetTestSection';\n\nclass DetailWorksheetPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sort: '',\n      filterName: '',\n      filterTopic: '',\n      currentView: 'full',\n      assignWorksheetDropdownOpen: false,\n      worksheets: sampleWorksheets,\n      detailModalOpen: false,\n      activeWorksheet: null,\n    };\n  }\n\n  onToggleAssignWorksheetDropdown = (event) => {\n    event.preventDefault();\n    this.setState(({ assignWorksheetDropdownOpen }) => ({ assignWorksheetDropdownOpen: !assignWorksheetDropdownOpen }));\n  }\n\n  onToggleDetailModalOpen = (worksheetIndex) => this.setState(({ detailModalOpen, worksheets }) => ({ detailModalOpen: !detailModalOpen, activeWorksheet: worksheets[worksheetIndex] }))\n\n  onSetSort = (sort) => this.setState({ sort })\n  onChangeView = (view) => this.setState({ currentView: view });\n\n  onSetFilteredState = (filterName) => this.setState({ worksheetsAreFiltered: true, filterName })\n  onUnsetFilteredState = () => this.setState({ worksheetsAreFiltered: false, filterName: '' })\n\n  onSetFilteredTopicState = (filterTopic) => this.setState({ worksheetsAreFiltered: true, filterTopic })\n  onUnsetFilteredTopicState = () => this.setState({ filterTopic: '' }, this.checkForFilteredState)\n\n  onAssignWorksheet = (assignType) => {\n    console.warn('Stubbed out assign worksheet click', assignType);\n  }\n\n  onFilterByName = () => {\n    const { worksheets, filterName } = this.state;\n    return worksheets.reduce((finalArr, currentWorksheet) => {\n      const { accountInfo: { lastName, firstName } } = currentWorksheet;\n      const worksheetString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n      if (worksheetString.indexOf(filterName) !== -1 && finalArr.indexOf(currentWorksheet) === -1) {\n        finalArr.push(currentWorksheet);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterByTopic = (preFilteredWorksheets = []) => {\n    const { worksheets: allWorksheets, filterTopic } = this.state;\n    let worksheets;\n    if (preFilteredWorksheets.length) {\n      worksheets = preFilteredWorksheets;\n    } else {\n      worksheets = allWorksheets;\n    }\n    return worksheets.reduce((finalArr, currentWorksheet) => {\n      const { topic } = currentWorksheet;\n      if (topic === filterTopic && finalArr.indexOf(currentWorksheet) === -1) {\n        finalArr.push(currentWorksheet);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  // eslint-disable-next-line consistent-return\n  onSortWorksheets = (worksheets) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case 'dueDate':\n        return worksheets.sort(dueDate);\n      case 'assignDate':\n        return worksheets.sort(assignDate);\n      case 'problems':\n        return worksheets.sort(problems);\n      case 'completed':\n        return worksheets.sort(completed);\n      case 'flags':\n        return worksheets.sort(flags);\n      case 'score':\n        return worksheets.sort(score);\n      case 'timeEstimate':\n        return worksheets.sort(timeEstimate);\n      default:\n        break;\n    }\n  }\n\n  getMappableWorksheets = () => {\n    const { filterName, filterTopic, worksheets: allWorksheets, sort } = this.state;\n    let worksheets;\n    if (filterName.length && !filterTopic.length) {\n      worksheets = this.onFilterByName();\n    } else if (!filterName.length && filterTopic.length) {\n      worksheets = this.onFilterByTopic();\n    } else if (filterName.length && filterTopic.length) {\n      const filteredByName = this.onFilterByName();\n      worksheets = this.onFilterByTopic(filteredByName);\n    } else {\n      worksheets = allWorksheets;\n    }\n    if (sort) {\n      return this.onSortWorksheets(worksheets);\n    }\n    return worksheets;\n  }\n\n  checkForFilteredState = () => {\n    const { filterName, filterTopic } = this.state;\n    if (!filterName.length && !filterTopic.length) {\n      this.setState({ worksheetsAreFiltered: false });\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  renderWorksheetView = () => {\n    const { currentView } = this.state;\n    switch (currentView) {\n      case 'list':\n        return <ListView onToggleDetailModalOpen={this.onToggleDetailModalOpen} worksheets={this.getMappableWorksheets()} />;\n      case 'full':\n        return <FullView onToggleDetailModalOpen={this.onToggleDetailModalOpen} worksheets={this.getMappableWorksheets()} />;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const { currentView, assignWorksheetDropdownOpen, detailModalOpen, activeWorksheet } = this.state;\n    const { user } = this.props;\n    return (\n      <React.Fragment>\n        <Choose>\n          <When condition={detailModalOpen}>\n            <LessonWorksheetTestSection\n              onClose={this.onToggleDetailModalOpen}\n              worksheet={activeWorksheet}\n              user={user}\n            />\n          </When>\n          <Otherwise>\n            <div className=\"main-holder grey lighten-5 switcher-section\">\n              <FilterSection\n                currentView={currentView}\n                onChangeView={this.onChangeView}\n                onSetSort={this.onSetSort}\n                onSetFilteredState={this.onSetFilteredState}\n                onUnsetFilteredState={this.onUnsetFilteredState}\n                onSetFilteredTopicState={this.onSetFilteredTopicState}\n                onUnsetFilteredTopicState={this.onUnsetFilteredTopicState}\n              />\n              {this.renderWorksheetView()}\n            </div>\n            <div className=\"add-btn-block\">\n              <a\n                href=\"#\"\n                data-target=\"dropdown_assign_selected\"\n                onClick={this.onToggleAssignWorksheetDropdown}\n                className=\"dropdown-trigger waves-effect waves-teal btn add-btn\"\n              >\n                <i className=\"material-icons\">add</i> Assign Worksheet\n              </a>\n              <ul\n                id=\"dropdown_assign_selected\"\n                className=\"dropdown-content dropdown-small\"\n                style={{ display: assignWorksheetDropdownOpen ? 'block' : '0', opacity: assignWorksheetDropdownOpen ? '1' : '0' }}\n              >\n                <li><a href=\"#\" onClick={() => this.onAssignWorksheet('fromSaved')}>From Saved</a></li>\n                <li><a href=\"#\" onClick={() => this.onAssignWorksheet('createNew')}>Create New</a></li>\n              </ul>\n            </div>\n          </Otherwise>\n        </Choose>\n      </React.Fragment>\n    );\n  }\n}\n\nDetailWorksheetPage.propTypes = {\n  user: PropTypes.object.isRequired,\n};\n\nexport default DetailWorksheetPage;\n","import sampleQuestions from '../../LessonWorksheetTestSection/utils/sampleQuestions';\n\nexport default [\n  {\n    id: 1,\n    worksheetName: 'Some SAT Problems about Triangles',\n    subject: 'Math',\n    score: '',\n    problems: 15,\n    problemType: 'Skill Builder',\n    difficulty: 'Beginner',\n    timeEstimate: '14',\n    assignDate: '1/27/19',\n    assignTime: '3:01 PM',\n    availableDate: '1/27/19',\n    dueDate: '2/10/19',\n    dueTime: '9:32 AM',\n    completionDate: '3/12/19',\n    completionTime: '2:53 PM',\n    completedProblems: '',\n    completionLevel: 'Complete',\n    unit: 'Reading Unit #4',\n    passage: '214',\n    type: 'challenge + practice',\n    flags: [],\n    status: 'Assigned',\n    disabled: true,\n    late: false,\n    topic: 'specialRightTriangles',\n    worksheetSource: 'Admin Created',\n    classifications: ['Right Triangles', 'More Math', \"Lots Of Math\"],\n    totalVideoMinutesWatched: '77',\n    totalVideoMinutesAllMissedProblems: '214',\n    questions: sampleQuestions,\n  },\n  {\n    id: 2,\n    worksheetName: 'Worksheet 2',\n    subject: 'Reading',\n    score: '',\n    problems: 18,\n    problemType: 'Skill Builder',\n    difficulty: 'Beginner',\n    timeEstimate: '30',\n    assignDate: '1/19/19',\n    assignTime: '3:01 PM',\n    availableDate: '1/19/19',\n    dueDate: '2/02/19',\n    dueTime: '9:32 AM',\n    completionDate: '',\n    completionTime: '',\n    completedProblems: 0,\n    completionLevel: 'Not Started',\n    unit: 'Reading Unit #4',\n    passage: '51',\n    type: 'challenge + practice',\n    flags: [{ title: 'one', status: 'reviewed' }, { title: 'two', status: 'reviewed' }, { title: 'three', status: 'toReview' }],\n    status: 'Assigned',\n    disabled: false,\n    late: true,\n    topic: 'topic2',\n    worksheetSource: 'User Created',\n    classifications: ['Math', 'More Math', \"Lots Of Math\"],\n    totalVideoMinutesWatched: '77',\n    totalVideoMinutesAllMissedProblems: '214',\n    questions: sampleQuestions,\n  },\n  {\n    id: 3,\n    worksheetName: 'Worksheet 3',\n    subject: 'Science',\n    score: '81',\n    problems: 16,\n    problemType: 'SAT Style',\n    difficulty: 'Advanced',\n    timeEstimate: '24',\n    assignDate: '1/11/19',\n    assignTime: '3:01 PM',\n    availableDate: '1/11/19',\n    dueDate: '2/12/19',\n    dueTime: '9:32 AM',\n    completionDate: '3/12/19',\n    completionTime: '2:53 PM',\n    completedProblems: 10,\n    completionLevel: 'Complete',\n    unit: 'Reading Unit #4',\n    passage: '121',\n    type: 'challenge + practice',\n    flags: [],\n    status: 'Accomplished',\n    disabled: false,\n    late: false,\n    topic: 'topic2',\n    worksheetSource: 'Admin Created',\n    classifications: ['Right Triangles', 'Math', \"Lots Of Math\"],\n    totalVideoMinutesWatched: '124',\n    totalVideoMinutesAllMissedProblems: '312',\n    questions: sampleQuestions,\n  },\n  {\n    id: 4,\n    worksheetName: 'Worksheet 4',\n    subject: 'Science',\n    score: '32',\n    problems: 14,\n    problemType: 'SAT Style',\n    difficulty: 'Mixed',\n    timeEstimate: '31',\n    assignDate: '1/24/19',\n    assignTime: '3:01 PM',\n    availableDate: '1/24/19',\n    dueDate: '2/27/19',\n    dueTime: '9:32 AM',\n    completionDate: '',\n    completionTime: '',\n    completedProblems: 4,\n    completionLevel: 'Started',\n    unit: 'Reading Unit #4',\n    passage: '128',\n    type: 'challenge + practice',\n    flags: [{ title: 'one', status: 'reviewed' }, { title: 'two', status: 'reviewed' }, { title: 'three', status: 'toReview' }, { title: 'four', status: 'toReview' }],\n    status: 'Beginning',\n    disabled: false,\n    late: true,\n    topic: 'topic3',\n    worksheetSource: 'User Created',\n    classifications: ['Trigonometry', 'More Math', \"Lots Of Math\"],\n    totalVideoMinutesWatched: '311',\n    totalVideoMinutesAllMissedProblems: '401',\n    questions: sampleQuestions,\n  },\n  {\n    id: 5,\n    worksheetName: 'Worksheet 5',\n    subject: 'Reading',\n    score: '93',\n    problems: 21,\n    problemType: 'Mixed',\n    difficulty: 'Mixed',\n    timeEstimate: '23',\n    assignDate: '1/12/19',\n    assignTime: '3:01 PM',\n    availableDate: '1/12/19',\n    dueDate: '2/03/19',\n    dueTime: '9:32 AM',\n    completionDate: '3/12/19',\n    completionTime: '2:53 PM',\n    completedProblems: 6,\n    completionLevel: 'Instructor Editing',\n    unit: 'Reading Unit #4',\n    passage: '73',\n    type: 'challenge + practice',\n    flags: [{ title: 'one', status: 'toReview' }, { title: 'two', status: 'toReview' }],\n    status: 'Developing',\n    disabled: false,\n    late: false,\n    topic: 'topic3',\n    worksheetSource: 'Admin Created',\n    classifications: ['Trigonometry', 'Math', \"Lots Of Math\"],\n    totalVideoMinutesWatched: '51',\n    totalVideoMinutesAllMissedProblems: '200',\n    questions: sampleQuestions,\n  },\n  {\n    id: 6,\n    worksheetName: 'Worksheet 6',\n    subject: 'Math',\n    score: '64',\n    problems: 30,\n    problemType: 'Mixed',\n    difficulty: 'Advanced',\n    timeEstimate: '65',\n    assignDate: '1/09/19',\n    assignTime: '3:01 PM',\n    availableDate: '1/09/19',\n    dueDate: '2/12/19',\n    dueTime: '9:32 AM',\n    completionDate: '',\n    completionTime: '',\n    completedProblems: 5,\n    completionLevel: 'Not Started',\n    unit: 'Reading Unit #4',\n    passage: '153',\n    type: 'challenge + practice',\n    flags: [],\n    status: 'Developing',\n    disabled: false,\n    late: false,\n    topic: 'topic4',\n    worksheetSource: 'User Created',\n    classifications: ['Right Triangles', 'Trigonometry', 'More Math'],\n    totalVideoMinutesWatched: '83',\n    totalVideoMinutesAllMissedProblems: '305',\n    questions: sampleQuestions,\n  },\n];\n","const statusColorMap = {\n  Assigned: 'grey darken-4',\n  Overdue: 'grey darken-4',\n  Started: 'grey darken-4',\n  Scheduled: 'grey',\n  Accomplished: 'purple darken-3',\n  Beginning: 'red darken-3',\n  Exemplary: 'blue accent-4',\n  Developing: 'purple',\n};\n\nexport const chartColorMap = {\n  Assigned: '#333',\n  Started: \"#333\",\n  Overdue: '#333',\n  Scheduled: \"#b2b2b2\",\n  Accomplished: '#7327cc',\n  Beginning: '#ed1c24',\n  Exemplary: 'rgb(0, 100, 244)',\n  Developing: '#c10078',\n};\n\nexport default statusColorMap;\n","import React from \"react\";\nimport { compose, bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport moment from 'moment';\nimport ClickOffComponentWrapper from \"../../ClickOffComponentWrapper\";\nimport { renderDropdownOptions } from \"../DetailLessonList/components/FullView/components/LessonCard/utils/\";\nimport RescheduleModal from \"../DetailLessonList/components/RescheduleModal\";\n\nimport {\n  setIsVisibleTopBar,\n  setActiveLesson,\n  setOpenActivePage,\n  rescheduleStudentLessons,\n  unAssignLessonToStudent,\n  resetStudentLessons,\n} from \"../index/actions\";\n\nclass DropDownMenu extends React.Component {\n  state = {\n    openRescheduleModal: false,\n  }\n\n  leaveDetailView = () => {\n    const {\n      onSetIsVisibleTopbar,\n      onSetActiveLesson,\n      onSetOpenActivePage,\n      onCloseDetailModal,\n    } = this.props;\n    onSetIsVisibleTopbar(true);\n    onSetActiveLesson({});\n    onSetOpenActivePage(\"\");\n    onCloseDetailModal();\n  }\n\n  onToggleRescheduleModal = () => this.setState({ openRescheduleModal: !this.state.openRescheduleModal })\n\n  handleAssignLesson = () => {\n    const {\n      onOpenModal,\n      onAddCheckedLesson,\n      lesson,\n    } = this.props;\n    onOpenModal();\n    onAddCheckedLesson(lesson.lesson_id);\n    this.leaveDetailView();\n  };\n\n  handleRescheduleModalOpen = () => {\n    const { onCloseDropdown } = this.props;\n    onCloseDropdown();\n    this.onToggleRescheduleModal();\n  };\n\n  onSaveScheduleChanges = (modalState) => {\n    const { onRescheduleStudentLessons, lesson, resetLessonSelections, onSetActiveLesson } = this.props;\n    const payload = {\n      student_lesson_ids: [lesson.id],\n      assignment_date: moment(modalState.assignDate).format('YYYY-MM-DD'),\n      due_date: !modalState.isTimed ? moment(modalState.dueDate).format('YYYY-MM-DD') : null,\n    };\n    if (Object.keys(payload).length > 0 && typeof payload === 'object') {\n      onRescheduleStudentLessons(payload);\n      this.onToggleRescheduleModal();\n      resetLessonSelections();\n      onSetActiveLesson({ ...lesson, assignment_date: moment(modalState.assignDate).format('YYYY-MM-DD'), due_date: !modalState.isTimed ? moment(modalState.dueDate).format('YYYY-MM-DD') : null });\n    }\n  };\n\n  handleUnassignLesson = lessonIds => {\n    const { onUnAssignLessonToStudent, onCloseDropdown, resetLessonSelections } = this.props;\n    if (lessonIds && typeof lessonIds === 'object' && lessonIds.length > 0) {\n      onUnAssignLessonToStudent(lessonIds);\n      onCloseDropdown();\n      this.leaveDetailView();\n      resetLessonSelections();\n    }\n  };\n\n  handleResetLesson = lessonIds => {\n    const { onResetStudentLessons, onCloseDropdown, resetLessonSelections } = this.props;\n    if (lessonIds && typeof lessonIds === 'object' && lessonIds.length > 0) {\n      onResetStudentLessons(lessonIds);\n      onCloseDropdown();\n      this.leaveDetailView();\n      resetLessonSelections();\n    }\n  };\n\n  startMarkFlagsReviewed = (lessonIds) => {\n    const { problems, updateProblemList } = this.props;\n    this.props.handleMarkAllFlagsReviewed(lessonIds);\n    problems.map(problemList => {\n      problemList.problems.map(problem => {\n        if (problem.flag_status === 'FLAGGED') {\n          updateProblemList(problemList.type, { ...problem, flag_status: 'REVIEWED' });\n        }\n      });\n    });\n  }\n\n  render() {\n    const { lesson } = this.props;\n    return (\n      <>\n        <RescheduleModal\n          open={this.state.openRescheduleModal}\n          lesson={lesson}\n          onClose={this.handleRescheduleModalOpen}\n          onSave={this.onSaveScheduleChanges}\n        />\n        <If condition={this.props.dropdownIsOpen}>\n          <ClickOffComponentWrapper onOuterClick={() => this.props.onSetDropdown()}>\n            <ul\n              id=\"dropdown01\"\n              className=\"dropdown-content dropdown-wide\"\n              style={{\n                display: \"block\",\n                opacity: \"1\",\n                transform: \"scaleX(1) scaleY(1)\",\n              }}\n            >\n              {renderDropdownOptions(\n                lesson.status,\n                this.handleAssignLesson,\n                this.handleRescheduleModalOpen,\n                this.props.handleExcuseLessonLateness,\n                this.handleResetLesson,\n                this.startMarkFlagsReviewed,\n                this.handleUnassignLesson,\n                [lesson.id],\n              )}\n            </ul>\n          </ClickOffComponentWrapper>\n        </If>\n      </>\n    );\n  }\n}\n\nDropDownMenu.propTypes = {\n  onCloseDetailModal: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired,\n  lesson: PropTypes.object.isRequired,\n  onOpenModal: PropTypes.func.isRequired,\n  onAddCheckedLesson: PropTypes.func.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  resetLessonSelections: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSetIsVisibleTopbar: bindActionCreators(setIsVisibleTopBar, dispatch),\n  onSetActiveLesson: bindActionCreators(setActiveLesson, dispatch),\n  onSetOpenActivePage: bindActionCreators(setOpenActivePage, dispatch),\n  onRescheduleStudentLessons: bindActionCreators(rescheduleStudentLessons, dispatch),\n  onUnAssignLessonToStudent: bindActionCreators(unAssignLessonToStudent, dispatch),\n  onResetStudentLessons: bindActionCreators(resetStudentLessons, dispatch),\n  onSetActiveLesson: bindActionCreators(setActiveLesson, dispatch),\n});\n\nconst withConnect = connect(null, mapDispatchToProps);\n\nexport default compose(withConnect)(DropDownMenu);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Sticky } from 'react-sticky';\nimport AccountPage from '../AccountPage';\nimport DetailSummaryPage from '../DetailSummaryPage';\nimport DetailWorksheetPage from '../DetailWorksheetPage';\nimport DetailLessonList from '../DetailLessonList';\nimport DetailTestList from '../DetailTestList';\nimport LessonDetailAnswerSheet from '../LessonDetailAnswerSheet';\nimport StudentNavBar from '../components/StudentNavBar';\nimport SessionCalendar from '../Calendar';\n\nimport {\n  makeSelectAssignLessonsModalOpen,\n  makeSelectAssignWorkSheetsModalOpen,\n  makeSelectIsVisibleTopBar,\n} from '../index/selectors';\n\nimport { setIsVisibleTopBar, setFetchStudentTestsStatus } from '../index/actions';\n\nimport { updateStudentActivationApi } from '../index/api';\n\nclass IndividualStudentPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activePage: 'summary',\n      activationDropdownOpen: false,\n      licenseCode: '',\n      currentTestSection: {},\n      tests: [],\n    };\n  }\n\n  componentDidMount = async () => {\n    const { onSetIsVisibleTopBar, isVisibleTopBar } = this.props;\n    if (!isVisibleTopBar) {\n      onSetIsVisibleTopBar(true);\n    }\n  };\n\n  onToggleActivationDropdown = () =>\n    this.setState(({ activationDropdownOpen }) => ({\n      activationDropdownOpen: !activationDropdownOpen,\n    }));\n\n  onSetActivePage = activePage => this.setState({ activePage });\n\n  onHandleDetailsChange = (name, event) => this.setState({ [name]: event.target.value });\n\n  renderCurrentPage = () => {\n    const { activePage } = this.state;\n    // The  data is not enough for now,so we are using dummy data for selected student detail\n    const { student } = this.props;\n    // const student = sampleSelectedStudent;\n    if (activePage === 'summary') {\n      return <DetailSummaryPage user={student} />;\n    }\n    if (activePage === 'account') {\n      return <AccountPage user={student} />;\n    }\n    if (activePage === 'lessons') {\n      return <DetailLessonList user={student} />;\n    }\n    if (activePage === 'worksheets') {\n      return <DetailWorksheetPage user={student} />;\n    }\n    if (activePage === 'answer-sheet') {\n      return <LessonDetailAnswerSheet />;\n    }\n    if (activePage === 'test') {\n      return <DetailTestList user={student} />;\n    }\n    if (activePage === 'calendar') {\n      return <SessionCalendar user={student} />;\n    }\n    return null;\n  };\n\n  handleActivateButton = async () => {\n    const { student } = this.props;\n    const payload = {\n      user_id: student.id,\n      code: this.state.licenseCode,\n      activate: true,\n    };\n    const result = await updateStudentActivationApi(payload);\n    // Check status code for 200 response\n    if (result.toString().split('')[0] !== '2') return null;\n    // Set status of student to active true\n    this.props.updateStudentStatus();\n    this.onToggleActivationDropdown();\n  };\n\n  onRedirectToStudentPage = event => {\n    const { onRedirectToStudentPage, onSetFetchStudentTestsStatus } = this.props;\n    onRedirectToStudentPage(event);\n    onSetFetchStudentTestsStatus(false);\n  };\n\n  render() {\n    const { student: { active, studentInformation: { firstName, lastName } } } = this.props;\n    const { activePage, activationDropdownOpen, licenseCode } = this.state;\n    const { assignLessonsModalOpen, assignWorkSheetsModalOpen, isVisibleTopBar } = this.props;\n    return (\n      <React.Fragment>\n        <Choose>\n          <When\n            condition={!assignLessonsModalOpen && !assignWorkSheetsModalOpen && isVisibleTopBar}\n          >\n            <Sticky>\n              {({ style }) =>\n                (<div className=\"title-row card-panel\" style={{ ...style, zIndex: 1999 }}>\n                  <div className=\"mobile-header\">\n                    <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\">\n                      <i className=\"material-icons\">menu</i>\n                    </a>\n                  </div>\n                  <nav className=\"breadcrumb-holder\">\n                    <div className=\"nav-wrapper \">\n                      <a\n                        href=\"#!\"\n                        className=\"breadcrumb\"\n                        onClick={e => this.onRedirectToStudentPage(e)}\n                      >\n                        &lt; Students\n                      </a>\n                    </div>\n                  </nav>\n                  <h2 className=\"h1 white-text\">\n                    <span className=\"heading-holder\">\n                      <i className=\"icon-student\" />\n                      <span className=\"heading-block\">\n                        {firstName} {lastName}\n                      </span>\n                    </span>\n                  </h2>\n                  <StudentNavBar activePage={activePage} onSetActivePage={this.onSetActivePage} />\n                  <div className=\"activate-block\">\n                    <Choose>\n                      <When condition={active}>\n                        <a\n                          href=\"#\"\n                          className=\"waves-effect waves-teal btn btn-white btn-bordered btn-account_activated\"\n                        >\n                          <b className=\"btn-text visible-lg\">Account Activated</b>{' '}\n                          <i className=\"icon-unlock\" />\n                        </a>\n                      </When>\n                      <Otherwise>\n                        <a\n                          href=\"#\"\n                          onClick={this.onToggleActivationDropdown}\n                          className=\"waves-effect btn btn-orange btn-account_inactive dropdown-trigger\"\n                          data-target=\"dropdown_activate\"\n                        >\n                          <b className=\"btn-text visible-lg\">Activate Account</b>{' '}\n                          <i className=\"icon-key\" />\n                        </a>\n                      </Otherwise>\n                    </Choose>\n                    <div\n                      id=\"dropdown_activate\"\n                      className=\"dropdown-content\"\n                      style={activationDropdownOpen ? { display: 'block', opacity: '1' } : {}}\n                    >\n                      <div className=\"card-panel\">\n                        <div className=\"title-block\">\n                          <div className=\"h3\">Ready to begin your course?</div>\n                          <div className=\"subtitle\">Please enter a valid license code below.</div>\n                        </div>\n                        <div className=\"input-field\">\n                          <input\n                            type=\"text\"\n                            value={licenseCode}\n                            id=\"license-code\"\n                            onChange={event => this.onHandleDetailsChange('licenseCode', event)}\n                          />\n                          <label className=\"label\" htmlFor=\"license_code\">\n                            License Code\n                          </label>\n                        </div>\n                        <div className=\"btn-holder center-align\">\n                          <button\n                            className=\"btn btn-blue\"\n                            type=\"submit\"\n                            onClick={() => this.handleActivateButton()}\n                          >\n                            Activate\n                          </button>\n                        </div>\n                        <div className=\"text-block center-align\">\n                          <p>\n                            If you need license codes, you can get them here:{' '}\n                            <a href=\"#\" className=\"waves-effect waves-light btn-small btn-blue\">\n                              Purchase Licenses\n                            </a>\n                          </p>\n                        </div>\n                        <div className=\"text-block\">\n                          <p>*Note: </p>\n                          <p>\n                            We oﬀer discounted account licenses for students enrolled in courses\n                            with 5 or more students in a class or group format (as opposed to\n                            individual instruction). These licenses provide the features necessary\n                            to conduct a customized course for the class as a whole, rather than for\n                            individual students.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>)}\n            </Sticky>\n          </When>\n        </Choose>\n        {this.renderCurrentPage()}\n      </React.Fragment>\n    );\n  }\n}\n\nIndividualStudentPage.propTypes = {\n  student: PropTypes.object.isRequired,\n  onRedirectToStudentPage: PropTypes.func.isRequired,\n  isVisibleTopBar: PropTypes.bool,\n  onSetIsVisibleTopBar: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  assignLessonsModalOpen: makeSelectAssignLessonsModalOpen(),\n  assignWorkSheetsModalOpen: makeSelectAssignWorkSheetsModalOpen(),\n  isVisibleTopBar: makeSelectIsVisibleTopBar(),\n});\n\nfunction maptDispatchToProps(dispatch) {\n  return {\n    onSetIsVisibleTopBar: value => dispatch(setIsVisibleTopBar(value)),\n    onSetFetchStudentTestsStatus: status => dispatch(setFetchStudentTestsStatus(status)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, maptDispatchToProps);\n\nexport default compose(withConnect)(IndividualStudentPage);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst styles = {\n  red: {\n    position: \"relative\",\n    color: \"#fff\",\n    border: \"1px solid #fff\",\n    backgroundColor: \"#db1d41\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  greenFilled: {\n    position: \"relative\",\n    color: \"#fff\",\n    border: \"1px solid #32955c\",\n    backgroundColor: \"#32955c\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  greenBorderOnly: {\n    position: \"relative\",\n    color: \"#32955c\",\n    border: \"1px solid #32955c\",\n    backgroundColor: \"#fff\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n  plain: {\n    position: \"relative\",\n    color: \"#a6a8ab\",\n    border: \"1px solid #a6a8ab\",\n    height: \"19px\",\n    width: \"19px\",\n    borderRadius: \"50%\",\n  },\n};\n\nclass BubbleGroup extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  mapEmptyBubbles = id => {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    return letters.map((letter, index) => (\n      <li key={letter}>\n        <form>\n          <label\n            htmlFor={`${id}${letter}`}\n            style={this.renderBubbleStyle(index)}\n          >\n            <span style={{ display: \"block\", marginTop: \"2px\", paddingLeft: \"4.5px\" }}>\n              {letter}\n            </span>\n          </label>\n        </form>\n      </li>\n    ));\n  };\n\n  getCorrectAnswerIndexMatchedId = (answer) => answer === this.props.lesson.correct_answer_id;\n  getStudentAnswerIndexMatchedId = (answer) => answer === this.props.lesson.answer_id;\n\n  getCorrectAnswerIndex = (answerIds) => {\n    const correctAnswerIndex = answerIds.findIndex(this.getCorrectAnswerIndexMatchedId);\n    return correctAnswerIndex;\n  }\n  getStudentAnswerIndex = (answerIds) => {\n    const studentAnswerIndex = answerIds.findIndex(this.getStudentAnswerIndexMatchedId);\n    return studentAnswerIndex;\n  }\n\n  renderBubbleStyle = index => {\n    const {\n      lesson: { is_correct },\n      lesson,\n    } = this.props;\n    const answerIds = this.props.lesson.problem.answers.map(answer => answer.id);\n    const correctAnswerIndex = this.getCorrectAnswerIndex(answerIds);\n    const studentAnswerIndex = this.getStudentAnswerIndex(answerIds);\n    const matchingAnswers = correctAnswerIndex === studentAnswerIndex;\n    const condition = correctAnswerIndex ? matchingAnswers : is_correct;\n    if (correctAnswerIndex === index && condition) {\n      return styles.greenFilled;\n    }\n    if (correctAnswerIndex === index && !condition) {\n      return styles.greenBorderOnly;\n    }\n    if (index === studentAnswerIndex && !condition) {\n      return styles.red;\n    }\n    if (index !== studentAnswerIndex && index !== correctAnswerIndex) {\n      return styles.plain;\n    }\n    return styles.plain;\n  };\n\n  render() {\n    const {\n      lesson: { id },\n    } = this.props;\n    return <React.Fragment>{this.mapEmptyBubbles(id)}</React.Fragment>;\n  }\n}\n\nBubbleGroup.propTypes = {\n  lesson: PropTypes.object.isRequired,\n};\n\nexport default BubbleGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Question from '../Question';\n\nclass ChallengeQuestions extends React.Component {\n  mapQuestions = () => {\n    if (this.props.questions.length !== 0) {\n      return this.props.questions.map(problem => (\n        <Question\n          key={problem.id}\n          problem={problem}\n          updateProblemList={this.props.updateProblemList}\n          problemType={this.props.problemType}\n        />\n      ));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"col s12 l12\">\n        <div className=\"card-block\">\n          <h2>Challenge</h2>\n          <div className=\"card-answer card\">\n            <div className=\"card-content\">\n              <ol className=\"answers-list\">\n                {this.mapQuestions()}\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nChallengeQuestions.propTypes = {\n  questions: PropTypes.array.isRequired,\n};\n\nexport default ChallengeQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Question from '../Question';\n\nclass DrillQuestions extends React.Component {\n  mapQuestions = () => {\n    if (this.props.questions.length !== 0) {\n      return this.props.questions.map(problem => (\n        <Question\n          key={problem.id}\n          problem={problem}\n          updateProblemList={this.props.updateProblemList}\n          problemType={this.props.problemType}\n        />\n      ));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"col s12 l12\">\n        <div className=\"card-block\">\n          <h2>Drill</h2>\n          <div className=\"card-answer card\">\n            <div className=\"card-content\">\n              <ol className=\"answers-list\">\n                {this.mapQuestions()}\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nDrillQuestions.propTypes = {\n  questions: PropTypes.array.isRequired,\n};\n\nexport default DrillQuestions;\n","import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport styled from 'styled-components';\nimport { addStudentLessonProblemAnswerApi } from '../../../index/api';\nimport { answerStudentLessonProblem } from '../../../index/actions';\n\nclass ProblemRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [\n        {\n          id: 0,\n          label: \"A\",\n          selected: false,\n        },\n        {\n          id: 1,\n          label: \"B\",\n          selected: false,\n        },\n        {\n          id: 2,\n          label: \"C\",\n          selected: false,\n        },\n        {\n          id: 3,\n          label: \"D\",\n          selected: false,\n        },\n      ],\n      answerChoices: [],\n      answer_text: \"\",\n      userMessage: \"\",\n      messageType: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const { question: { answer_id, answer_text, answered } } = this.props;\n    if (answer_id && !answer_text && answered) {\n      this.setAnswerChoice();\n    } else if (!answer_id && answer_text && answered) {\n      this.setAnswerText();\n    }\n  }\n\n  setAnswerChoice = () => {\n    const { question } = this.props;\n    const currentAnswerId = question.answer_id;\n    const answerChoices = question.problem.answers;\n    const currentSelection = answerChoices\n      .map((answer, index) => {\n        if (answer.id === currentAnswerId) {\n          return index;\n        }\n        return null;\n      })\n      .filter((index) => index !== null)[0];\n\n    if (typeof currentSelection !== \"number\") return;\n\n    this.setState({\n      problemCells: update(this.state.problemCells, {\n        [currentSelection]: { selected: { $set: true } },\n      }),\n      selectedIndex: currentSelection,\n    });\n  }\n\n  setAnswerText = () => {\n    const { question: { answer_text } } = this.props;\n    const setText = !answer_text ? \"\" : answer_text;\n    this.setState({ answer_text: setText });\n  }\n\n  onSaveStudentAnswer = async (updatedProblemCells, index) => {\n    const { activeLesson, question } = this.props;\n    const answerChoices = question.problem.answers;\n    this.setState({ problemCells: updatedProblemCells, selectedIndex: index });\n    const payload = {\n      student_lesson_id: activeLesson.id,\n      problem_id: question.problem.id,\n      answer_id: answerChoices[index].id,\n    };\n    const res = await addStudentLessonProblemAnswerApi(payload);\n    if (res === 202) {\n      this.props.updateProblemList(this.props.problemType, { ...question, answer_id: answerChoices[index].id, answer_text: null, answered: true });\n      return this.handleUserMessage('success');\n    }\n    return this.handleUserMessage('fail');\n  };\n\n  handleSubmit = async (e) => {\n    const { activeLesson, question } = this.props;\n    const payload = {\n      student_lesson_id: activeLesson.id,\n      problem_id: question.problem.id,\n      answer_text: this.state.answer_text,\n    };\n    // convert API call to action dispatch answerStudentLessonProblem\n    const res = await addStudentLessonProblemAnswerApi(payload);\n    if (res === 202) {\n      this.props.updateProblemList(this.props.problemType, { ...question, answer_id: null, answer_text: this.state.answer_text, answered: true });\n      return this.handleUserMessage('success');\n    }\n    return this.handleUserMessage('fail');\n  }\n\n  handleClickBadge = (index) => {\n    const currentBadge = this.state.problemCells[index];\n    const selectedIndex = this.state.selectedIndex;\n    let updatedProblemCells = this.state.problemCells;\n    if (selectedIndex === -1) {\n      updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n    } else {\n      updatedProblemCells = update(this.state.problemCells, {\n        [selectedIndex]: { selected: { $set: false } },\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n    }\n    this.onSaveStudentAnswer(updatedProblemCells, index);\n  };\n\n  handleChange = (e) => {\n    this.setState({ answer_text: e.target.value });\n  }\n\n  handleUserMessage = (status) => {\n    if (status === 'fail') {\n      return this.setState({ userMessage: \"Something went wrong updating student answer.\", messageType: status });\n    }\n    return this.setState({ userMessage: \"Successfully updated student answer.\", messageType: status });\n  }\n\n  render() {\n    const { problemCells } = this.state;\n    if (this.props.question.problem.answers.length === 0) {\n      return (\n        <>\n          <input type=\"text\" className=\"answer-input\" value={this.state.answer_text} onChange={this.handleChange} />\n          <button className=\"btn\" onClick={this.handleSubmit}>Submit</button>\n          <UserMessage messageType={this.state.messageType}>{this.state.userMessage}</UserMessage>\n        </>\n      );\n    }\n    return (\n      <>\n      <ul className=\"answer-list\">\n        {problemCells.map((cell, index) => (\n          <li\n            style={{ cursor: \"pointer\" }}\n            onClick={() => this.handleClickBadge(index)}\n            key={index}\n          >\n            <span\n              className=\"badge-circle badge-circle-bordered\"\n              style={{\n                color: cell.selected ? \"#fff\" : \"\",\n                borderColor: cell.selected ? \"#19b4e9\" : \"\",\n                backgroundColor: cell.selected ? \"#19b4e9\" : \"\",\n              }}\n            >\n              {cell.label}\n            </span>\n          </li>\n        ))}\n      </ul>\n      <UserMessage messageType={this.state.messageType}>{this.state.userMessage}</UserMessage>\n      </>\n    );\n  }\n}\n\nconst UserMessage = styled.p`\n  color: ${props => props.messageType === 'fail' ? \"red\" : \"green\"};\n`;\n\nProblemRow.propTypes = {\n  activeLesson: PropTypes.object.isRequired,\n  question: PropTypes.object.isRequired,\n  updateProblemList: PropTypes.func.isRequired,\n  problemType: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProblemRow);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst styles = {\n  red: {\n    color: \"#fff\",\n    border: \"1px solid #fff\",\n    backgroundColor: \"#db1d41\",\n  },\n  greenFilled: {\n    color: \"#fff\",\n    border: \"1px solid #32955c\",\n    backgroundColor: \"#32955c\",\n  },\n  greenBorderOnly: {\n    color: \"#32955c\",\n    border: \"1px solid #32955c\",\n    backgroundColor: \"#fff\",\n  },\n  plain: {\n    color: \"#a6a8ab\",\n    border: \"1px solid #a6a8ab\",\n  },\n};\n\nclass FreeResponse extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  responseSection = () => {\n    const {\n      lesson: { is_correct, answer_text, correct_answer_id },\n    } = this.props;\n    return (\n      <>\n        <li>\n          <span\n            className=\"badge badge-rounded badge-rounded-bordered\"\n            style={this.renderResponseStyle()}\n          >\n            {!answer_text ? \"Free Response\" : answer_text}\n          </span>\n        </li>\n        {!is_correct && correct_answer_id && (\n          <li>\n            <span\n              className=\"badge badge-rounded badge-rounded-bordered\"\n              style={styles.greenBorderOnly}\n            >\n              {correct_answer_id}\n            </span>\n          </li>\n        )}\n      </>\n    );\n  };\n\n  renderResponseStyle = () => {\n    const {\n      lesson: { is_correct, correct_answer_id, answer_text },\n    } = this.props;\n    if (is_correct && answer_text && correct_answer_id === answer_text) {\n      return styles.greenFilled;\n    }\n    if (!is_correct && answer_text && correct_answer_id !== answer_text) {\n      return styles.red;\n    }\n    return styles.plain;\n  };\n\n  render() {\n    const {\n      lesson: { id },\n    } = this.props;\n    return <React.Fragment>{this.responseSection()}</React.Fragment>;\n  }\n}\n\nFreeResponse.propTypes = {\n  lesson: PropTypes.object.isRequired,\n};\n\nexport default FreeResponse;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Question from '../Question';\n\nclass PracticeQuestions extends React.Component {\n  mapQuestions = () => {\n    if (this.props.questions.length !== 0) {\n      return this.props.questions.map(problem => (\n        <Question\n          key={problem.id}\n          problem={problem}\n          updateProblemList={this.props.updateProblemList}\n          problemType={this.props.problemType}\n        />\n      ));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"col s12 l12\">\n        <div className=\"card-block\">\n          <h2>Practice</h2>\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <ol className=\"answers-list\">\n                {this.mapQuestions()}\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPracticeQuestions.propTypes = {\n  questions: PropTypes.array.isRequired,\n};\n\nexport default PracticeQuestions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport QuestionModal from \"../QuestionModal\";\nimport BubbleGroup from \"../Bubble\";\nimport FreeResponse from '../FreeResponse';\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      status: '',\n      originalTestProblemId: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    const { problem: { id } } = this.props;\n    const { originalTestProblemId } = this.state;\n    if (id !== originalTestProblemId && this.props.problem.flag_status) {\n      const { problem: { flag_status } } = this.props;\n      this.setState({\n        status: flag_status,\n        originalTestProblemId: id,\n      });\n    }\n  }\n  onChangeFlagState = (status) => {\n    this.setState({\n      status,\n    });\n  }\n\n  onOpenQuestionModal = () => this.setState({ open: true });\n  onCloseQuestionModal = () => this.setState({ open: false });\n\n  isFreeResponse = () => {\n    if (this.props.problem.problem.answers.length === 0) return true;\n    return false;\n  }\n\n\n  render() {\n    const { problem } = this.props;\n    const { open, status } = this.state;\n    return (\n      <React.Fragment>\n        <QuestionModal\n          open={open}\n          onOpenQuestionModal={this.onOpenQuestionModal}\n          onCloseQuestionModal={this.onCloseQuestionModal}\n          question={problem}\n          onChangeFlagState={this.onChangeFlagState}\n          updateProblemList={this.props.updateProblemList}\n          problemType={this.props.problemType}\n        />\n        <li\n          className=\"answers-list-holder\"\n          key={problem.id}\n          style={{ marginRight: \"15px\" }}\n        >\n          <div className=\"answer-row row mb-0\">\n            <div className=\"col col-120\">\n              <ul className=\"answer-list\">\n                {this.isFreeResponse() ? <FreeResponse lesson={problem} /> : <BubbleGroup lesson={problem} />}\n              </ul>\n            </div>\n            <div className=\"col col-30\">\n              <span className=\"status-info\">E</span>\n            </div>\n            <div className=\"col col-auto\">\n              <Choose>\n                <When condition={status === 'FLAGGED'}>\n                  <span className=\"status-answer\" style={{ color: \"#c0272d\" }}>\n                    <i className=\"icon-flag\"></i>\n                    <b className=\"status-text\">Review</b>\n                  </span>\n                </When>\n                <When condition={status === 'REVIEWED'}>\n                  <span className=\"status-answer status-disabled\" style={{ color: \"#c0272d\" }}>\n                    <i className=\"icon-flag\"></i>\n                    <b className=\"status-text\">Review</b>\n                  </span>\n                </When>\n              </Choose>\n            </div>\n            <div className=\"dropdown-block col col-35\">\n              <a className=\"modal-trigger\" href=\"#\" onClick={this.onOpenQuestionModal}>\n                <i className=\"material-icons dots-icon\">more_vert</i>\n              </a>\n            </div>\n          </div>\n        </li>\n      </React.Fragment>\n    );\n  }\n}\n\nAnswerRow.propTypes = {\n  problem: PropTypes.object,\n};\n\nexport default AnswerRow;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport PropTypes from \"prop-types\";\nimport Portal from \"../../../../common/Portal\";\nimport ClickOffComponentWrapper from \"../../../../common/ClickOffComponentWrapper\";\nimport { addStudentLessonProblemFlagApi, addVideoWatchedTime } from \"../../../index/api\";\nimport { makeSelectActiveLesson } from \"../../../index/selectors\";\nimport RadialBar from \"../../../../common/RadialBar\";\nimport { ConvertSecondsToMinutesSeconds } from '../../../../utils/ConvertSecondsToMinutesSeconds';\nimport VideoPlayer from '../VideoPlayer';\nimport EditProblemRow from '../EditProblemRow';\nclass QuestionModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'UN_FLAGGED',\n      originalTestProblemId: '',\n      videoWatchedTime: 0,\n      intervalId: null,\n      watchedVideo: false,\n    };\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    const { question: { id, video_watched_seconds } } = nextProps;\n    const { originalTestProblemId } = this.state;\n    if (id !== originalTestProblemId && this.props.question.flag_status) {\n      const { question: { flag_status } } = this.props;\n      this.setState({\n        status: flag_status,\n        originalTestProblemId: id,\n      });\n    }\n    if (video_watched_seconds) {\n      this.setState({\n        videoWatchedTime: video_watched_seconds,\n      });\n    }\n  }\n\n  onHandleQuestionFlagStatus = async (_e, status) => {\n    const {\n      activeLesson: { id: lessonId },\n      onChangeFlagState,\n    } = this.props;\n    this.setState({\n      status,\n    });\n    onChangeFlagState(status);\n    const { question: { problem: { id: problemId } } } = this.props;\n    const postBody = { problem_id: problemId, student_lesson_id: lessonId, flag_status: status };\n    await addStudentLessonProblemFlagApi(postBody);\n  };\n\n  recordVideoWatchedTime = () => {\n    this.setState({\n      videoWatchedTime: this.state.videoWatchedTime + 1,\n    });\n  }\n\n  onHandleWatchedVideo = (status) => {\n    if (status === 'STARTED') {\n      const intervalId = setInterval(this.recordVideoWatchedTime, 1000);\n      this.setState({\n        watchedVideo: true,\n        intervalId,\n      });\n    } else {\n      clearInterval(this.state.intervalId);\n    }\n  }\n\n  onCloseQuestionModal = async () => {\n    const { onCloseQuestionModal, question: { problem: { id } }, activeLesson: { id: lessonId } } = this.props;\n    if (this.state.watchedVideo) {\n      clearInterval(this.state.intervalId);\n      const { videoWatchedTime } = this.state;\n      const postBody = {\n        problem_id: id,\n        student_lesson_id: lessonId,\n        watched_seconds: videoWatchedTime,\n      };\n      await addVideoWatchedTime(postBody);\n    }\n    onCloseQuestionModal();\n  }\n\n\n  render() {\n    const { open, question: { problem: { reference_number, video } } } = this.props;\n    const { videoWatchedTime } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={this.onCloseQuestionModal}>\n              <div id=\"modal_video001\" className=\"modal modal-answer-single\">\n                <div className=\"modal-header row mb-0\">\n                  <div className=\"col s10\">\n                    <span className=\"subtitle\">Reading</span>\n                    <span className=\"title\">Problem {reference_number}</span>\n                  </div>\n                  <div className=\"col s2 right-align\">\n                    <a href=\"#!\" className=\"close modal-close\" onClick={this.onCloseQuestionModal}>\n                      <i className=\"icon-close-thin\"></i>\n                    </a>\n                  </div>\n                </div>\n                <div className=\"modal-content\">\n                  {video &&\n                    <div className=\"card-panel\">  <div className=\"panel-block\">\n                      <div className=\"embed-responsive\">\n                        <VideoPlayer url={video ? video.url : ''} onHandleWatchedVideo={this.onHandleWatchedVideo} />\n                      </div>\n                    </div></div>\n                  }\n                  <div className=\"card-panel\">\n                    <div className=\"panel-block\">\n                      <strong className=\"subtitle\">Review With Student</strong>\n                      <form action=\"#\" className=\"answer-form review-form\">\n                        <ul>\n                          <li>\n                            <label>\n                              <input\n                                className=\"with-gap\"\n                                name=\"review_radio\"\n                                type=\"radio\"\n                                checked={this.state.status === \"UN_FLAGGED\"}\n                                onClick={e => this.onHandleQuestionFlagStatus(e, \"UN_FLAGGED\")}\n                              />\n                              <span>Nope. Got it.</span>\n                            </label>\n                          </li>\n                          <li>\n                            <label>\n                              <input\n                                className=\"with-gap\"\n                                name=\"review_radio\"\n                                type=\"radio\"\n                                checked={this.state.status === \"FLAGGED\"}\n                                onClick={e => this.onHandleQuestionFlagStatus(e, \"FLAGGED\")}\n                              />\n                              <span>\n                                <i className=\"icon-flag red-text text-darken-3\" />\n                                Flag for Review\n                              </span>\n                            </label>\n                          </li>\n                          <li>\n                            <label>\n                              <input\n                                className=\"with-gap\"\n                                name=\"review_radio\"\n                                type=\"radio\"\n                                checked={this.state.status === \"REVIEWED\"}\n                                onClick={e => this.onHandleQuestionFlagStatus(e, \"REVIEWED\")}\n                              />\n                              <span>\n                                <i className=\"icon-flag gray-text text-darken-3\" />\n                                Mark Reviewed\n                              </span>\n                            </label>\n                          </li>\n                        </ul>\n                      </form>\n                    </div>\n                    {/* <div className=\"panel-block\" style={{ width: '60%', float: 'left' }}>\n                      <ul className=\"informers-list\">\n                        <li className=\"informer-block\">\n                          <div\n                            className=\"informer-box\"\n                            style={{ width: \"10%\", backgroundColor: \"#e5e5e5\" }}\n                          >\n                            <b className=\"informer-circle\" style={{ backgroundColor: \"#e5e5e5\" }}>\n                              A\n                            </b>\n                          </div>\n                          <b className=\"informer-value\">10%</b>\n                        </li>\n                        <li className=\"informer-block\">\n                          <div\n                            className=\"informer-box\"\n                            style={{ width: \"16%\", backgroundColor: \"#db1d41\" }}\n                          >\n                            <b\n                              className=\"informer-circle\"\n                              style={{ backgroundColor: \"#db1d41\", color: \"#fff\" }}\n                            >\n                              B\n                            </b>\n                          </div>\n                          <b className=\"informer-value\">16%</b>\n                        </li>\n                        <li className=\"informer-block\">\n                          <div\n                            className=\"informer-box\"\n                            style={{ width: \"37%\", backgroundColor: \"#d3efde\" }}\n                          >\n                            <b\n                              className=\"informer-circle\"\n                              style={{ backgroundColor: \"#32955c\", color: \"#fff\" }}\n                            >\n                              C\n                            </b>\n                          </div>\n                          <b className=\"informer-value\">37%</b>\n                        </li>\n                        <li className=\"informer-block\">\n                          <div\n                            className=\"informer-box\"\n                            style={{ width: \"8%\", backgroundColor: \"#e5e5e5\" }}\n                          >\n                            <b className=\"informer-circle\" style={{ backgroundColor: \"#e5e5e5\" }}>\n                              D\n                            </b>\n                          </div>\n                          <b className=\"informer-value\">8%</b>\n                        </li>\n                      </ul>\n                    </div> */}\n                    <div className=\"col panel-block\">\n                      <div className=\"chart-block chart-block-test\">\n                        <RadialBar\n                          svgWidth={150}\n                          svgHeight={150}\n                          strokeWidth={10}\n                          maxValue={video ? video.duration : 0}\n                          currentValue={20}\n                          strokeColor=\"#00BBF7\"\n                        />\n                        <div className=\"chart-text\">\n                          <span className=\"value\" style={{ fontSize: '32px', color: 'rgb(0, 187, 247)' }}>{ConvertSecondsToMinutesSeconds(videoWatchedTime)}</span>\n                          <span className=\"title\" style={{ fontSize: '14px' }}>out of</span>\n                          <span className=\"description\" style={{ fontSize: '32px' }}>\n                            {ConvertSecondsToMinutesSeconds(video ? video.duration : 0)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"card-panel\">\n                    <div className=\"panel-block\">\n                      <strong className=\"subtitle\">Edit Student's Answer</strong>\n                      <EditProblemRow\n                        activeLesson={this.props.activeLesson}\n                        question={this.props.question}\n                        updateProblemList={this.props.updateProblemList}\n                        problemType={this.props.problemType}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 1999;\n            }\n            #modal_video001 {\n              z-index: 2003;\n              opacity: 1;\n              transform: scaleX(1) scaleY(1);\n            }\n            .modal {\n              display: block;\n              background-color: white;\n              position: fixed;\n              top: 10%;\n              left: 10%;\n              box-shadow: none;\n            }\n            .modal-answer-single {\n              opacity: 1;\n              visibility: visible;\n              display: block !important;\n              top: 0 !important;\n              left: auto;\n              right: 0;\n              height: 100vh;\n              max-weight: none;\n              margin: 0 0 0 auto;\n              border-radius: 0;\n              width: 100%;\n              transform-origin: 100% 0;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n            .modal-header {\n              background: #ec693d\n                linear-gradient(to right, #ec693d 0%, #649aab 61%, #30add6 87%, #18b5e9 100%);\n              color: #fff;\n              padding: 7px 10px 5px;\n              min-height: 50px;\n              display: flex;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nQuestionModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onCloseQuestionModal: PropTypes.func.isRequired,\n  question: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  activeLesson: makeSelectActiveLesson(),\n});\n\nexport default connect(mapStateToProps, null)(QuestionModal);\n","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Slider from \"react-input-slider\";\n\nclass VideoPlayer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      volume: 0,\n      currentTime: 0,\n      duration: 0,\n      play: true,\n      pause: false,\n      volumeUp: true,\n      volumeOff: false,\n      replay: false,\n      ended: false,\n      fullscreen: false,\n    };\n  }\n\n    videoLoaded = () => {\n      this.volumeBar = this.video.volume;\n      this.setState({\n        duration: this.video.duration,\n        currentTime: 0,\n        play: true,\n        pause: false,\n        volumeUp: true,\n        volumeOff: false,\n        replay: false,\n        ended: false,\n      });\n      this.timeEndLabel.innerText = this.calcTime(this.video.duration);\n    };\n\n    calcTime = time => {\n      const min = Math.floor(Math.floor(time) / 60);\n      const sec = Math.floor(time) % 60;\n      return `${min < 10 ? `0${min}` : min} : ${sec < 10 ? `0${sec}` : sec}`;\n    };\n\n    handleVideoEnded = () => {\n      this.initPlayVideoState();\n    }\n\n    moveSeek = () => {\n      this.setState({\n        currentTime: this.video.currentTime,\n      });\n      this.timeStartLabel.innerText = this.calcTime(this.video.currentTime);\n    };\n\n    playVideo = () => {\n      this.video.play();\n      this.reverseVideoPlayState();\n      const { onHandleWatchedVideo } = this.props;\n      onHandleWatchedVideo('STARTED');\n    };\n    reverseVideoPlayState = () => {\n      this.setState({\n        play: !this.state.play,\n        pause: !this.state.pause,\n      });\n    }\n    handleClickVolume = () => {\n      const { volumeUp, volumeOff } = this.state;\n      if (volumeUp) {\n        this.video.volume = 0;\n      } else {\n        this.video.volume = this.volumeBar.value;\n      }\n      this.setState({\n        volumeUp: !volumeUp,\n        volumeOff: !volumeOff,\n      });\n    }\n    pauseVideo = () => {\n      this.video.pause();\n      this.reverseVideoPlayState();\n      const { onHandleWatchedVideo } = this.props;\n      onHandleWatchedVideo('STOPPED');\n    };\n\n    showVolumeBar = () => {\n      this.volumeBarContainer.style.opacity = 1;\n    };\n\n    hideVolumeBar = () => {\n      this.volumeBarContainer.style.opacity = 0;\n    };\n\n    fullScreen = () => {\n      if (this.state.fullscreen) {\n        document.exitFullscreen();\n        this.setState({ fullscreen: false });\n      } else {\n        this.videoWrap.requestFullscreen();\n        this.setState({ fullscreen: true });\n      }\n    };\n\n    changeVolume = e => {\n      this.video.volume = e.currentTarget.value;\n    };\n\n    replayVideo = () => {\n      this.setState({\n        play: true,\n        pause: false,\n        replay: false,\n      });\n      this.video.currentTime = 0;\n    }\n    handleChangeTimeSlider = (x) => {\n      const { play } = this.state;\n      if (play && this.video.currentTime === parseFloat(this.state.duration.toFixed(2)) - 0.01) {\n        this.initPlayVideoState();\n      } else {\n        this.setState({ currentTime: parseFloat(x.toFixed(2)) });\n        this.video.currentTime = parseFloat(x.toFixed(2));\n      }\n    }\n\n    initPlayVideoState = () => {\n      this.setState({\n        replay: true,\n        play: false,\n        pause: false,\n        currentTime: 0,\n      });\n    }\n    render() {\n      const { url } = this.props;\n      const { pause, play, replay, volumeUp, volumeOff } = this.state;\n      return (\n            <>\n                <div\n                  id=\"video-player\"\n                  ref={\n                    videoWrap => {\n                      this.videoWrap = videoWrap;\n                    }\n                  }\n                >\n                  <video\n                    className=\"in-modal embed-responsive-item\"\n                    id=\"video-source\"\n                    ref={video => {\n                      this.video = video;\n                    }}\n                    src={url}\n                    preload=\"metadata\"\n                    playsInline\n                    onLoadedData={this.videoLoaded}\n                    onTimeUpdate={this.moveSeek}\n                    volume={this.state.volume}\n                    onEnded={this.handleVideoEnded}\n                  />\n                  <div id=\"video-control\">\n                    <If condition={play}>\n                      <button\n                        id=\"play-button\"\n                        name=\"play\"\n                        ref={c => (this.playButton = c)}\n                        onClick={this.playVideo}\n                      >\n                        <i className=\"material-icons\">play_arrow</i>\n                      </button>\n                    </If>\n                    <If condition={pause}>\n                      <button\n                        id=\"pause-button\"\n                        ref={c => (this.pauseButton = c)}\n                        onClick={this.pauseVideo}\n                      >\n                        <i className=\"material-icons\">pause</i>\n                      </button>\n                    </If>\n                    <If condition={replay}>\n                      <button\n                        id=\"replay-button\"\n                        name=\"replay\"\n                        ref={c => (this.replayButton = c)}\n                        onClick={this.replayVideo}\n                      >\n                        <i className=\"material-icons\">replay</i>\n                      </button>\n                    </If>\n\n                    <div id=\"seek-bar\">\n                      <label\n                        id=\"time-start-label\"\n                        ref={label => {\n                          this.timeStartLabel = label;\n                        }}\n                        style={{\n                          marginRight: '20px',\n                        }}\n                      >\n                                00 : 00\n                      </label>\n                      <Slider\n                        id=\"time-progress\"\n                        axis=\"x\"\n                        xmax={this.state.duration}\n                        x={this.state.currentTime}\n                        styles={{\n                          track: {\n                            width: '350px',\n                            backgroundColor: 'rgba(0,162,232,.25)',\n                          },\n                          active: {\n                            backgroundColor: '#00a2e8',\n                          },\n                          thumb: {\n                            width: 15,\n                            height: 15,\n                            backgroundColor: '#00a2e8',\n                          },\n                        }}\n                        xstep={0.01}\n                        onChange={({ x }) => this.handleChangeTimeSlider(x)}\n                      />\n                      <label\n                        id=\"time-end-label\"\n                        ref={label => {\n                          this.timeEndLabel = label;\n                        }}\n                        style={{\n                          marginLeft: '20px',\n                        }}\n                      >\n                                00 : 00\n                      </label>\n                    </div>\n                    <div\n                      id=\"volume-bar-container\"\n                      ref={c => (this.volumeBarContainer = c)}\n                      onMouseOver={this.showVolumeBar}\n                    >\n                      <input\n                        id=\"volume-bar\"\n                        name=\"volume\"\n                        ref={c => (this.volumeBar = c)}\n                        type=\"range\"\n                        min={0}\n                        max={1}\n                        step=\"0.01\"\n                        onChange={e => this.changeVolume(e)}\n                        defaultValue={0.5}\n                      />\n                    </div>\n                    <button\n                      id=\"full-screen-button\"\n                      onClick={this.fullScreen}\n                    >\n                      <i className=\"material-icons\">fullscreen</i>\n                    </button>\n                    <If condition={volumeUp}>\n                      <button\n                        id=\"volume-button\"\n                        onMouseOver={this.showVolumeBar}\n                        onMouseOut={this.hideVolumeBar}\n                        onClick={this.handleClickVolume}\n                      >\n                        <i className=\"material-icons\">volume_up</i>\n                      </button>\n                    </If>\n                    <If condition={volumeOff}>\n                      <button\n                        id=\"volume-button\"\n                        onMouseOver={this.showVolumeBar}\n                        onMouseOut={this.hideVolumeBar}\n                        onClick={this.handleClickVolume}\n                      >\n                        <i className=\"material-icons\">volume_off</i>\n                      </button>\n                    </If>\n                  </div>\n                </div>\n\n                <style jsx>\n                  {`\n            a {\n              color: #343434;\n            }\n            * {\n              outline: none;\n            }\n\n            #video-player {\n              position: relative;\n              width: 100%;\n            }\n\n            #video-player video {\n              position: relative;\n              width: 100%;\n            }\n\n            #video-player #video-control {\n              position: relative;\n              width: 100%;\n              height: 30px;\n              transform: translate(0, -30px);\n              z-index: 2147483647;\n            }\n\n            #video-player #video-control i {\n              color: white;\n            }\n\n            #video-player #video-control label {\n              color: #00a2e8;\n            }\n\n            #video-player #video-control button {\n              border: none;\n              width: 30px;\n              height: 30px;\n              justify-content: center;\n              background: #00a2e8;\n              z-index: 2147483647;\n            }\n\n            #play-button,\n            #pause-button {\n              float: left;\n            }\n\n            #seek-bar {\n              width: calc(100% - 150px);\n              padding-top: 10px;\n              text-align: center;\n              justify-content: center;\n            }\n\n            .input-range {\n              width: 100px !important;\n            }\n\n            #volume-button,\n            #full-screen-button {\n              float: right;\n            }\n\n            #volume-bar-container {\n              position: absolute;\n              padding: 0 5px;\n              background: rgba(0, 0, 0, 0.5);\n              transform: rotate(-90deg);\n              margin-left: 27px;\n              margin-top: -68px;\n              opacity: 0;\n            }\n\n            #volume-bar {\n              width: 90px;\n            }\n\n            #video-player #video-control * {\n              display: inline-flex;\n            }\n            video::-webkit-media-controls {\n                display:none !important;\n              }\n            video::-webkit-media-controls-enclosure {\n                display:none !important;\n            }\n          `}\n                </style>\n            </>\n      );\n    }\n}\nVideoPlayer.propTypes = {\n  url: PropTypes.string,\n  onHandleWatchedVideo: PropTypes.func.isRequired,\n};\nexport default VideoPlayer;\n","import React from 'react';\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\nimport PracticeQuestions from './components/PracticeQuestions';\nimport ChallengeQuestions from './components/ChallengeQuestions';\nimport DrillQuestions from './components/DrillQuestions';\nimport moment from \"moment\";\nimport { fetchStudentLessonSectionApi } from \"../index/api\";\nimport { makeSelectUnitFilterOptions } from \"../index/selectors\";\nimport DropDownMenu from '../DropDownMenu';\n\n\nconst data = (value, total) => ({\n  datasets: [{\n    data: [value, total - value],\n    backgroundColor: [\n      getValuesByScore(value, total, 'color'),\n      \"#eaeaea\",\n    ],\n  }],\n});\nconst getValuesByScore = (value, max, target) => {\n  let activeIndex = 0;\n  if (max === 0) {\n    activeIndex = 4;\n  } else {\n    const score = (value / max) * 100;\n    if (score >= 90) {\n      activeIndex = 0;\n    } else if (score < 90 && score > 75) {\n      activeIndex = 1;\n    } else if (score > 60 && score < 76) {\n      activeIndex = 2;\n    } else if (score >= 40 && score <= 60) {\n      activeIndex = 3;\n    } else if (score < 40) {\n      activeIndex = 4;\n    }\n  }\n  const colorList = [\n    { label: \"Great\", color: \"#74b287\" },\n    { label: \"Above Average\", color: \"#a9c466\" },\n    { label: \"Average\", color: \"d8c539\" },\n    { label: \"Below Average\", color: \"#e89258\" },\n    { label: \"Poor\", color: \"#f27c7c\" },\n  ];\n  if (target === 'color') {\n    return colorList[activeIndex].color;\n  }\n  return colorList[activeIndex].label;\n};\n\nclass LessonDetailAnswerSheet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      challengeProblems: [],\n      practiceProlems: [],\n      drillProblems: [],\n      currentType: \"\",\n      hasChallenge: false,\n      hasPractice: false,\n      hasDrill: false,\n      dropdownIsOpen: false,\n    };\n  }\n\n\n  componentDidMount = async () => {\n    const { lesson, user: { id: student_id } } = this.props;\n    if (lesson.sections) { // lesson module type\n      this.setState({\n        currentType: \"Module\",\n      });\n      const lesson_id = this.props.lesson.id;\n      const { sections } = this.props.lesson;\n      sections.map(async section => {\n        const section_id = section.id;\n        const currentSectionName = section.name;\n        if (currentSectionName === \"challenge\") {\n          this.setState({\n            hasChallenge: true,\n          });\n          const challengeProblems = await fetchStudentLessonSectionApi(student_id, lesson_id, section_id);\n          this.setState({\n            challengeProblems: challengeProblems.lesson_problems,\n          });\n        } else {\n          this.setState({\n            hasPractice: true,\n          });\n          const practiceProblems = await fetchStudentLessonSectionApi(student_id, lesson_id, section_id);\n          if (!practiceProblems) return;\n          this.setState({\n            practiceProlems: practiceProblems.lesson_problems,\n          });\n        }\n      });\n    }\n    if (lesson.problems && lesson.problems.length !== 0) {\n      this.setState({\n        currentType: \"Drill\",\n        hasDrill: true,\n      });\n      if (this.props.lessonIdsToUnFlag.includes(lesson.id)) {\n        lesson.problems.map(problem => {\n          if (problem.flag_status === 'FLAGGED') {\n            problem.flag_status = 'REVIEWED';\n            return problem;\n          }\n          return problem;\n        });\n      }\n      this.setState({\n        drillProblems: lesson.problems,\n      });\n    }\n  }\n\n  getProblemsAmount = () => {\n    if (this.state.currentType === \"Module\") {\n      return this.state.challengeProblems.length + this.state.practiceProlems.length;\n    }\n    if (this.state.currentType === \"Drill\") {\n      return this.state.drillProblems.length;\n    }\n  }\n\n  getReviewedAndFlaggedProblemAmount = (type) => {\n    let amount = 0;\n    if (this.props.lesson.problems && this.props.lesson.problems.length !== 0) {\n      this.props.lesson.problems.map(section => {\n        if (section.flag_status === type) {\n          amount += 1;\n        }\n      });\n    }\n    if (this.props.lesson.sections && this.props.lesson.sections.length !== 0) {\n      const { challengeProblems, practiceProlems } = this.state;\n      challengeProblems.length !== 0 && challengeProblems.map(section => {\n        if (section.flag_status === type) {\n          amount += 1;\n        }\n      });\n      practiceProlems.length !== 0 && practiceProlems.map(section => {\n        if (section.flag_status === type) {\n          amount += 1;\n        }\n      });\n    }\n    return amount;\n  }\n\n  getTypeLabel = () => {\n    let typeLabel = \"\";\n    if (this.state.hasChallenge && this.state.hasPractice) {\n      typeLabel = \"Challenge + Practice\";\n    } else {\n      if (this.state.hasChallenge) {\n        typeLabel = \"Challenge\";\n      }\n      if (this.state.hasPractice) {\n        typeLabel = \"Practice\";\n      }\n    }\n\n    if (this.state.hasDrill) {\n      typeLabel = \"Drill\";\n    }\n\n    return typeLabel;\n  }\n\n  getUnitNameById = () => {\n    const { units } = this.props;\n    if (units && units.length !== 0) {\n      const unitIds = units.map(unit => unit.value);\n      const currentIndex = unitIds.findIndex(this.getUnitIndexMatchedUnitId);\n      const currentUnit = units[currentIndex];\n      return currentUnit.label;\n    }\n    return \"Undefind UnitName\";\n  }\n\n  getUnitIndexMatchedUnitId = unitId => unitId === this.props.lesson.unit_id;\n\n  onSetDropdown = () => this.setState({ dropdownIsOpen: !this.state.dropdownIsOpen });\n\n  handleAssignLesson = () => {\n    const { onOpenModal, onAddCheckedLesson, lesson } = this.props;\n    onOpenModal();\n    onAddCheckedLesson(lesson.id);\n  }\n\n  updateProblemList = (problemsType, updatedProblem) => {\n    const problems = this.state[problemsType];\n    const newProblems = problems.map(problem => {\n      if (problem.id === updatedProblem.id) return updatedProblem;\n      return problem;\n    });\n    this.setState({ [problemsType]: [...newProblems] });\n  }\n\n  getCurrentProblemList = () => {\n    const { currentType, drillProblems, practiceProlems, challengeProblems } = this.state;\n    if (currentType === 'Drill') return [{ problems: drillProblems, type: \"drillProblems\" }];\n    if (currentType === 'Module') return [{ problems: challengeProblems, type: \"challengeProblems\" }, { problems: practiceProlems, type: \"practiceProlems\" }];\n  }\n\n  render() {\n    const { challengeProblems, practiceProlems, drillProblems } = this.state;\n    const { onCloseDetailModal, user,\n      lesson: { name, starting_page, ending_page, completed_at, assignTime, assignment_date, due_date, dueTime } } = this.props;\n    const { studentInformation: { firstName, lastName } } = user;\n    return (\n      <React.Fragment>\n        <div className=\"wrapper\">\n          <div\n            className=\"card-modal card-main card switcher-section grey lighten-5 modal\"\n            style={{\n              zIndex: \"1004\",\n              display: \"block\",\n              position: \"absolute\",\n              top: \"0\",\n              minHeight: \"100%\",\n              minWidth: \"100%\",\n            }}\n          >\n            <div className=\"header-box card-panel light-blue lighten-1 white-text\">\n              <div className=\"header-flex-row row mb-0\" style={{ width: \"100%\" }}>\n                <div className=\"col s12 m7 xl8\">\n                  <div className=\"header-holder\">\n                    <div className=\"header-col\">\n                      <div className=\"icon-col\">\n                        <i className=\"icon-books\" />\n                        <span className=\"text-icon\">Lesson</span>\n                      </div>\n                    </div>\n                    <div className=\"header-col\">\n                      <div className=\"card-panel-text\">\n                        <div className=\"text-small\">{this.getUnitNameById()}</div>\n                        <h1 className=\"text-large\">{name}</h1>\n                        <div className=\"text-small\">\n                          p.{starting_page}\n                          {ending_page > starting_page ? `-${ending_page}` : \"\"}(Reading)\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col s9 m4 xl3 position-mobile-left\">\n                  <div className=\"card-panel-text\">\n                    <h2 className=\"text-large\">\n                      {firstName} {lastName}\n                    </h2>\n                    {assignment_date && (\n                      <dl className=\"text-small dl-horizontal\">\n                        <dt>Assigned:</dt>\n                        <dd>\n                          <time dateTime=\"2019-01-06T08:00\">{`${moment(assignment_date).format(\n                            \"MM/DD/YY\",\n                          )} at ${moment(assignTime).format(\"hh:mm\")}`}</time>\n                        </dd>\n                      </dl>\n                    )}\n                    {due_date && (\n                      <dl className=\"text-small dl-horizontal\">\n                        <dt>Due:</dt>\n                        <dd>\n                          <time dateTime=\"2019-01-06T16:00\">{`${moment(due_date).format(\n                            \"MM/DD/YY\",\n                          )} at ${moment(dueTime).format(\"hh:mm\")}`}</time>\n                        </dd>\n                      </dl>\n                    )}\n                    {completed_at && (\n                      <dl className=\"text-small dl-horizontal\">\n                        <dt>Completed:</dt>\n                        <dd>\n                          <time dateTime=\"2019-09-01T06:59\">{`${moment(completed_at).format(\n                            \"MM/DD/YY\",\n                          )} at ${moment(completed_at).format(\"hh:mm\")}`}</time>\n                        </dd>\n                      </dl>\n                    )}\n                  </div>\n                </div>\n                <div className=\"col s2 m1 right-align position-mobile-right\">\n                  <div className=\"dropdown-block\">\n                    <a\n                      className=\"dropdown-trigger btn\"\n                      href=\"#\"\n                      data-target=\"dropdown_top\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        this.onSetDropdown();\n                      }}\n                    >\n                      <i className=\"material-icons dots-icon\">more_vert</i>\n                    </a>\n                    <DropDownMenu\n                      onOpenModal={this.props.onOpenModal}\n                      onAddCheckedLesson={this.props.onAddCheckedLesson}\n                      lesson={this.props.lesson}\n                      dropdownIsOpen={this.state.dropdownIsOpen}\n                      onSetDropdown={this.onSetDropdown}\n                      onCloseDetailModal={this.props.onCloseDetailModal}\n                      onCloseDropdown={this.props.onCloseDropdown}\n                      resetLessonSelections={this.props.resetLessonSelections}\n                      handleMarkAllFlagsReviewed={this.props.handleMarkAllFlagsReviewed}\n                      updateProblemList={this.updateProblemList}\n                      problems={this.getCurrentProblemList()}\n                      handleExcuseLessonLateness={this.props.handleExcuseLessonLateness}\n                    />\n                  </div>\n                  <div className=\"close-block\">\n                    <a href=\"#\" className=\"modal-close close\" onClick={onCloseDetailModal}>\n                      <i className=\"icon-close-thin\" />\n                    </a>\n                  </div>\n                </div>\n              </div>\n              <div className=\"header-row-block card-panel-row row\">\n                <div className=\"col s12 right-align\">\n                  <h2 className=\"text-large\">DownloadPDF</h2>\n                </div>\n              </div>\n            </div>\n            <div className=\"content-section\">\n              <div className=\"row\">\n                <div className=\"container-sm\">\n                  {this.props.lesson.status === \"COMPLETED\" && (\n                    <div className=\"col s12 m6\">\n                      <div className=\"main-row row\">\n                        <div className=\"col s12\">\n                          <div className=\"card-block\" style={{ margin: \"0 auto\" }}>\n                            <h3>Performance</h3>\n                            <div className=\"card-answer card\">\n                              <div className=\"card-content\">\n                                <div className=\"row\">\n                                  <div className=\"col s6\">\n                                    <div className=\"chart-container\" style={{ width: 140 }}>\n                                      <div className=\"chart-holder\" style={{ width: 140 }}>\n                                        <Doughnut\n                                          data={() =>\n                                            data(\n                                              this.props.lesson.scoring.correct_count,\n                                              this.props.lesson.scoring.question_count,\n                                            )\n                                          }\n                                          height={140}\n                                          width={140}\n                                          options={{\n                                            circumference: 1.45 * Math.PI,\n                                            rotation: -3.85,\n                                            cutoutPercentage: 55,\n                                            tooltips: false,\n                                          }}\n                                        />\n                                        <span\n                                          className=\"chart-value\"\n                                          style={{\n                                            backgroundColor: getValuesByScore(\n                                              this.props.lesson.scoring.correct_count,\n                                              this.props.lesson.scoring.question_count,\n                                              \"color\",\n                                            ),\n                                            marginBottom: \"-40px\",\n                                            width: \"50px\",\n                                            height: \"50px\",\n                                          }}\n                                        >\n                                          {Math.floor(\n                                            this.props.lesson.scoring.percentage_correct ? this.props.lesson.scoring.percentage_correct : 0,\n                                          )}\n                                          %\n                                        </span>\n                                      </div>\n                                      <div\n                                        style={{\n                                          color: getValuesByScore(\n                                            this.props.lesson.scoring.correct_count,\n                                            this.props.lesson.scoring.question_count,\n                                            \"color\",\n                                          ),\n                                          margin: \"45px 45px 0 45px\",\n                                        }}\n                                      >\n                                        {this.props.lesson.scoring.correct_count} of{\" \"}\n                                        {this.props.lesson.scoring.question_count}\n                                      </div>\n                                    </div>\n                                  </div>\n                                  <div className=\"col s6\">\n                                    <div\n                                      className=\"chart-description\"\n                                      style={{ marginTop: \"10px\" }}\n                                    >\n                                      <dl className=\"dl-horizontal\" style={{ fontSize: 16 }}>\n                                        <dt>Time Est:</dt>\n                                        <dd>\n                                          {this.props.lesson.time_estimate\n                                            ? this.props.lesson.time_estimate\n                                            : 0}\n                                          min\n                                        </dd>\n                                      </dl>\n                                      <dl className=\"dl-horizontal\" style={{ fontSize: 16 }}>\n                                        <dt>Problems:</dt>\n                                        <dd>{this.getProblemsAmount()}</dd>\n                                      </dl>\n                                      <dl\n                                        className=\"dl-horizontal\"\n                                        style={{\n                                          fontSize: 16,\n                                          margin: 30,\n                                          padding: 10,\n                                          backgroundColor: getValuesByScore(\n                                            this.props.lesson.scoring.correct_count,\n                                            this.props.lesson.scoring.question_count,\n                                            \"color\",\n                                          ),\n                                          color: \"white\",\n                                        }}\n                                      >\n                                        {getValuesByScore(\n                                          this.props.lesson.scoring.correct_count,\n                                          this.props.lesson.scoring.question_count,\n                                          \"label\",\n                                        )}\n                                      </dl>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"main-row row\">\n                        <div className=\"col s12\">\n                          <div className=\"card-block\" style={{ margin: \"0 auto\" }}>\n                            <h3>Flagged For Review</h3>\n                            <div className=\"card-answer card\">\n                              <div className=\"card-content\">\n                                <div className=\"row-bordered d-flex row\">\n                                  <div className=\"col s6 badge-block-column red-text\">\n                                    <span className=\"badge-rounded-xlg badge red darken-2 white-text\">\n                                      <b className=\"badge-text\">\n                                        {this.getReviewedAndFlaggedProblemAmount(\"FLAGGED\")}\n                                      </b>{\" \"}\n                                      <i className=\"icon-flag\"></i>\n                                    </span>\n                                    <span style={{ marginLeft: 10, fontSize: 16 }}>To Review</span>\n                                  </div>\n                                  <div className=\"col s6 badge-block-column\">\n                                    <span className=\"badge-rounded-xlg badge grey darken-2 white-text\">\n                                      <b className=\"badge-text\">\n                                        {this.getReviewedAndFlaggedProblemAmount(\"REVIEWED\")}\n                                      </b>{\" \"}\n                                      <i className=\"icon-flag\"></i>\n                                    </span>\n                                    <span style={{ marginLeft: 10, fontSize: 16 }}>Reviewed</span>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  <Choose>\n                    <When condition={this.props.lesson.status === \"COMPLETED\"}>\n                      <div className=\"col s12 m6\">\n                        <div className=\"row\" style={{ margin: 0 }}>\n                          <div className=\"card-block\" style={{ margin: \"0 auto\" }}>\n                            {challengeProblems.length !== 0 && (\n                              <div className=\"main-row row\">\n                                <ChallengeQuestions questions={challengeProblems} updateProblemList={this.updateProblemList} problemType={'challengeProblems'} />\n                              </div>\n                            )}\n                            {practiceProlems.length !== 0 && (\n                              <div className=\"main-row row\">\n                                <PracticeQuestions questions={practiceProlems} updateProblemList={this.updateProblemList} problemType={'practiceProlems'} />\n                              </div>\n                            )}\n                            {drillProblems.length !== 0 && (\n                              <div className=\"main-row row\">\n                                <DrillQuestions questions={drillProblems} updateProblemList={this.updateProblemList} problemType={'drillProblems'} />\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </When>\n                    <Otherwise>\n                      <div className=\"col s12 m6 card-block\" style={{ margin: \"0 auto\" }}>\n                        {challengeProblems.length !== 0 && (\n                          <div className=\"main-row row\">\n                            <ChallengeQuestions questions={challengeProblems} updateProblemList={this.updateProblemList} problemType={'challengeProblems'} />\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"col s12 m6 card-block\" style={{ margin: \"0 auto\" }}>\n                        {practiceProlems.length !== 0 && (\n                          <div className=\"main-row row\">\n                            <PracticeQuestions questions={practiceProlems} updateProblemList={this.updateProblemList} problemType={'practiceProlems'} />\n                          </div>\n                        )}\n                      </div>\n                      {drillProblems.length !== 0 && (\n                        <div className=\"main-row row\">\n                          <DrillQuestions questions={drillProblems} updateProblemList={this.updateProblemList} problemType={'drillProblems'} />\n                        </div>\n                      )}\n                    </Otherwise>\n                  </Choose>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nLessonDetailAnswerSheet.propTypes = {\n  open: PropTypes.bool.isRequired,\n  lesson: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  onCloseDetailModal: PropTypes.func.isRequired,\n};\n\n\nconst mapStateToProps = createStructuredSelector({\n  units: makeSelectUnitFilterOptions(),\n});\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect)(LessonDetailAnswerSheet);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Doughnut } from 'react-chartjs-2';\nimport { data, statusColorMap, chartColorMap, formatTimeEstimate } from '../../utils/index';\n\nconst CardSection = ({ completionLevel, problems, completedProblems, status, flags, totalVideoMinutesWatched, totalVideoMinutesAllMissedProblems }) => {\n  const percentageComplete = Number((completedProblems / problems) * 100).toFixed(0);\n  const videoWatchedPercentage = Number((totalVideoMinutesWatched / totalVideoMinutesAllMissedProblems) * 100).toFixed(0);\n  return (\n    <div className=\"cards-section\">\n      <div className=\"d-flex same-height justify-center row mb-0\">\n        <div className=\"col s12 l5 col-435\">\n          <div className=\"card-block\">\n            <h2>Performance</h2>\n            <div className=\"card-student-detail card-main-full card\">\n              <div className=\"card-content\">\n                <div className=\"d-flex sameheight-all row mb-0\">\n                  <div className=\"col s6\">\n                    <div className=\"chart-container chart-container-195\">\n                      <div className=\"chart-holder\">\n                        <Doughnut\n                          data={() => data(percentageComplete, status)}\n                          options={{\n                            circumference: 1 * Math.PI,\n                            rotation: 1 * Math.PI,\n                            cutoutPercentage: 60,\n                            tooltips: false,\n                          }}\n                        />\n                        <span className=\"chart-value\" style={{ backgroundColor: chartColorMap[status] }}><span data-count-up data-start-val=\"0\" data-end-val=\"75\" data-duration=\"1\"></span><span className=\"percentage\">{completionLevel === 'Complete' ? percentageComplete : ''}{completionLevel !== 'Started' ? '%' : ''}</span></span>\n                      </div>\n                      <div className=\"chart-row\">\n                        <div className=\"chart-col chart-start\">&nbsp;</div>\n                        <div className=\"chart-col chart-end\">\n                          <span className=\"amount\" style={{ color: chartColorMap[status] }}>{problems}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col s6\">\n                    <div className=\"card-description\">\n                      <dl className=\"dl-horizontal\">\n                        <dt className=\"text-large\">Status:</dt>\n                        <dd className=\"text-large\">{completionLevel}</dd>\n                      </dl>\n                      <b className=\"text-small\">{completedProblems} out of {problems} {completionLevel === 'Started' ? 'completed' : 'correct'}</b>\n                    </div>\n                    <div className=\"card-description\">\n                      <Choose>\n                        <When condition={completionLevel === 'Completed' || completionLevel === 'Instructor Editing'}>\n                          <dl className=\"dl-horizontal\">\n                            <dt className=\"text-large\">Score:</dt>\n                            <dd className=\"text-large\">{percentageComplete}%</dd>\n                          </dl>\n                          <b className=\"text-small\">{completedProblems} out of {problems} correct</b>\n                        </When>\n                        <Otherwise>\n                          <span className=\"text-large gray-text\">Score: Incomplete</span>\n                        </Otherwise>\n                      </Choose>\n                    </div>\n                    <div className=\"align-self-end\">\n                      <span className={`badge badge-rounded-lg ${statusColorMap[status]} white-text`}>{status}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col s12 l3 col-320\">\n          <div className=\"card-block\">\n            <h2>Video</h2>\n            <div className=\"card-student-detail card-main-full card\">\n              <div className=\"card-content\">\n                <div className=\"d-flex sameheight-all row mb-0 align-center\">\n                  <div className=\"col s6\" style={{ marginBottom: '12px' }}>\n                    <div className=\"chart-container chart-container-195\">\n                      <div className=\"chart-holder\" style={{ width: '130px' }}>\n                        <span style={{ position: 'absolute', top: '30px', left: '42px' }}>\n                          <span style={{ fontSize: '23px', fontWeight: '700', color: '#02baf7' }}>{formatTimeEstimate(totalVideoMinutesWatched)}</span> <br />\n                          <span style={{ fontSize: '16px', color: '#bbbbbb' }}>out of</span> <br />\n                          <span style={{ fontSize: '23px', fontWeight: '700', color: '#838383' }}>{formatTimeEstimate(totalVideoMinutesAllMissedProblems)}</span>\n                        </span>\n                        <Doughnut\n                          data={() => data(videoWatchedPercentage, status, '#02baf7')}\n                          height={300}\n                          width={300}\n                          options={{\n                            circumference: 2 * Math.PI,\n                            rotation: 1 * Math.PI,\n                            cutoutPercentage: 70,\n                            tooltips: false,\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col s6\">\n                    <div className=\"video-description\">\n                      <strong className=\"blue-text\">total minutes of video watched</strong>\n                    </div>\n                    <div className=\"video-description\">\n                      <strong className=\"grey-text\">total minutes of video for all missed problems</strong>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col s12 l3 col-320\">\n          <div className=\"card-block\">\n            <h2>Flagged for Review</h2>\n            <div className=\"card-student-detail card-main-full card\">\n              <div className=\"card-content\">\n                <div className=\"d-flex sameheight-all row mb-0\">\n                  <div className=\"col s12\">\n                    <div className=\"badges-container\">\n                      <div className=\"badge-block red-text\">\n                        <span className=\"badge-rounded-md badge red darken-2 white-text\">\n                          <b className=\"badge-text\">{flags.filter(flag => flag.status === 'toReview').length}</b> <i className=\"icon-flag\"></i>\n                        </span>\n                        <span className=\"badge-block-text\">To Review</span>\n                      </div>\n                      <div className=\"badge-block\">\n                        <span className=\"badge-rounded-md badge grey darken-2 white-text\">\n                          <b className=\"badge-text\">{flags.filter(flag => flag.status === 'reviewed').length}</b> <i className=\"icon-flag\"></i>\n                        </span>\n                        <span className=\"badge-block-text\">Reviewed</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nCardSection.propTypes = {\n  flags: PropTypes.array.isRequired,\n  status: PropTypes.string.isRequired,\n  problems: PropTypes.number.isRequired,\n  completionLevel: PropTypes.string.isRequired,\n  completedProblems: PropTypes.number.isRequired,\n  totalVideoMinutesWatched: PropTypes.string.isRequired,\n  totalVideoMinutesAllMissedProblems: PropTypes.string.isRequired,\n};\n\nexport default CardSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Question from '../Question';\n\nclass ChallengeQuestions extends React.Component {\n  mapQuestions = () => this.props.questions.map(question => (\n    <Question\n      key={question.id}\n      question={question}\n      questionDropdownIndex={this.props.questionDropdownIndex}\n      questionDropdownOpen={this.props.questionDropdownOpen}\n      answerSheetComplete={this.props.answerSheetComplete}\n      onOpenQuestionModal={this.props.onOpenQuestionModal}\n      handleQuestionDropdownClick={this.props.handleQuestionDropdownClick}\n    />\n  ))\n\n  render() {\n    return (\n      <div className=\"col s12 l6\">\n        <div className=\"card-block\">\n          <h2>Challenge</h2>\n          <div className=\"card-answer card\">\n            <div className=\"card-content\">\n              <ol className=\"answers-list\">\n                {this.mapQuestions()}\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nChallengeQuestions.propTypes = {\n  questions: PropTypes.array.isRequired,\n  questionDropdownIndex: PropTypes.number,\n  answerSheetComplete: PropTypes.bool.isRequired,\n  onOpenQuestionModal: PropTypes.func.isRequired,\n  questionDropdownOpen: PropTypes.bool.isRequired,\n  handleQuestionDropdownClick: PropTypes.func.isRequired,\n};\n\nexport default ChallengeQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Question from '../Question';\n\nclass PracticeQuestions extends React.Component {\n  mapQuestions = () => this.props.questions.map(question => (\n    <Question\n      key={question.id}\n      question={question}\n      questionDropdownIndex={this.props.questionDropdownIndex}\n      questionDropdownOpen={this.props.questionDropdownOpen}\n      answerSheetComplete={this.props.answerSheetComplete}\n      onOpenQuestionModal={this.props.onOpenQuestionModal}\n      handleQuestionDropdownClick={this.props.handleQuestionDropdownClick}\n    />\n  ))\n\n  render() {\n    return (\n      <div className=\"col s12 l6\">\n        <div className=\"card-block\">\n          <h2>Practice</h2>\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <ol className=\"answers-list\">\n                {this.mapQuestions()}\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPracticeQuestions.propTypes = {\n  questions: PropTypes.array.isRequired,\n  questionDropdownIndex: PropTypes.number,\n  answerSheetComplete: PropTypes.bool.isRequired,\n  onOpenQuestionModal: PropTypes.func.isRequired,\n  questionDropdownOpen: PropTypes.bool.isRequired,\n  handleQuestionDropdownClick: PropTypes.func.isRequired,\n};\n\nexport default PracticeQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { difficultyMap, getAnswerColor, getCompleteAnswerColor } from '../../utils';\n\nclass Question extends React.Component {\n  mapAnswerChoices = () => {\n    const { question: { answerType, answerChoices, studentAnswer }, answerSheetComplete } = this.props;\n    if (answerSheetComplete) {\n      if (answerType === 'letter') {\n        return (\n          <ul className=\"answer-list\">\n            {answerChoices.map(answer => (\n              <li key={answer.answerLetter}>\n                <span\n                  className=\"badge-circle badge-circle-bordered\"\n                  style={getCompleteAnswerColor('letter', answer, studentAnswer)}\n                >\n                  {answer.answerLetter}\n                </span>\n              </li>\n            ))}\n          </ul>\n        );\n      }\n      return (\n        <ul className=\"answer-list\">\n          {answerChoices.map(answer => (\n            <li key={answer.answerValue}>\n              <span\n                className=\"badge badge-rounded badge-rounded-bordered\"\n                style={getCompleteAnswerColor('value', answer, studentAnswer)}\n              >\n                {answer.answerValue}\n              </span>\n            </li>\n          ))}\n        </ul>\n      )\n    }\n    if (answerType === 'letter') {\n      return (\n        <ul className=\"answer-list\">\n          {answerChoices.map(answer => (\n            <li key={answer.answerLetter}>\n              <span\n                className=\"badge-circle badge-circle-bordered\"\n                style={getAnswerColor(answer)}\n              >\n                {answer.answerLetter}\n              </span>\n            </li>\n          ))}\n        </ul>\n      );\n    }\n    return (\n      <ul className=\"answer-list\">\n        {answerChoices.map(answer => (\n          <li key={answer.answerValue}>\n            <span\n              className=\"badge badge-rounded badge-rounded-bordered\"\n              style={getAnswerColor(answer)}\n            >\n              {answer.answerValue}\n            </span>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  render() {\n    const { onOpenQuestionModal, question, answerSheetComplete, handleQuestionDropdownClick, questionDropdownOpen, questionDropdownIndex } = this.props;\n    const { difficulty, hasVideo, flagged, studentNotes } = question;\n    return (\n      <li className=\"answers-list-holder\">\n        <div className=\"answer-row row mb-0\">\n          <div className=\"col col-120\">\n            {this.mapAnswerChoices()}\n          </div>\n          <div className=\"col col-30\">\n            <span className=\"status-info\">{difficultyMap[difficulty]}</span>\n          </div>\n          {hasVideo && (\n            <div className=\"col col-43\">\n              <span className=\"play-progress\" data-video-id=\"video001\">\n                <span className=\"play\"></span>\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle className=\"circle-static\" cx=\"25.8\" cy=\"24.3\" r=\"22.8\" style={{ strokeWidth: '3', fill: 'rgba(0,0,0,0)' }}/>\n                  <circle className=\"circle-progress\" cx=\"25.8\" cy=\"24.3\" r=\"22.8\" style={{ stroke: 'none', strokeWidth: '3', fill: 'rgba(0,0,0,0)' }}/>\n                </svg>\n              </span>\n            </div>\n          )}\n          <div className=\"col col-auto\">\n            <If condition={answerSheetComplete && flagged}>\n              <span className=\"status-answer\" style={{ color: '#c0272d' }}>\n                <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n              </span>\n            </If>\n          </div>\n          <div className=\"dropdown-block col col-35\">\n            <a\n              href='#'\n              className='dropdown-trigger'\n              data-target='dropdown_answer01-3'\n              onClick={(event) => handleQuestionDropdownClick(event, question)}\n            >\n              <i className=\"material-icons dots-icon\">more_vert</i>\n            </a>\n            <If condition={questionDropdownOpen && question.id === questionDropdownIndex}>\n              <ul id='dropdown_answer01-3' className='dropdown-content dropdown-exwide' style={{ display: 'block', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}>\n                <li><a className='modal-trigger' href=\"#\" onClick={() => onOpenQuestionModal(question)}>View Problem</a></li>\n                <li><a href=\"#!\">Dismiss Flag</a></li>\n                <li><a href=\"#!\">Edit Response</a></li>\n              </ul>\n            </If>\n          </div>\n        </div>\n        <If condition={answerSheetComplete && studentNotes}>\n          <div className=\"comment-block\">\n            <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore?  tincidunt ut laoreet dolore?</p>\n          </div>\n        </If>\n      </li>\n    );\n  }\n};\n\nQuestion.propTypes = {\n  question: PropTypes.object.isRequired,\n  questionDropdownIndex: PropTypes.number,\n  onOpenQuestionModal: PropTypes.func.isRequired,\n  answerSheetComplete: PropTypes.bool.isRequired,\n  questionDropdownOpen: PropTypes.bool.isRequired,\n  handleQuestionDropdownClick: PropTypes.func.isRequired,\n};\n\nexport default Question;\n","/* eslint-disable jsx-a11y/media-has-caption */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Portal from '../../../../Portal';\nimport ClickOffComponentWrapper from '../../../../ClickOffComponentWrapper';\n\nimport { getAnswerChoiceColors, getAnswerPercentageBreakdownColors } from '../../utils';\n\nclass QuestionModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      reviewedWithStudent: false,\n    }\n  }\n\n  toggleReviewedStatus = () => this.setState(({ reviewedWithStudent }) => ({ reviewedWithStudent: !reviewedWithStudent }))\n\n  mapAnswerChoices = () => {\n    const { question: { answerChoices, studentAnswer } } = this.props;\n    if (answerChoices[0].answerLetter) {\n      return answerChoices.map(answer => (\n        <li className=\"answer-block\" key={answer.answerLetter}>\n          <div className=\"answer-box\" style={getAnswerChoiceColors(answer.answerLetter, answer.correctAnswer, studentAnswer)}>\n            <b className=\"answer-circle\">{answer.answerLetter}.</b>\n            <span className=\"answer-text\">{answer.answerText}</span>\n          </div>\n        </li>\n      ))\n    }\n    return answerChoices.map(answer => (\n      <li className=\"answer-block\" key={answer.answerValue}>\n        <div className=\"answer-box\" style={getAnswerChoiceColors(answer.answerValue, answer.correctAnswer, studentAnswer)}>\n          <span className=\"answer-text\" style={{ marginLeft: '30px' }}>{answer.answerValue}</span>\n        </div>\n      </li>\n    ))\n  }\n\n  renderAnswerPercentageBreakdown = () => {\n    const { question: { answerChoices, studentAnswer } } = this.props;\n    if (answerChoices[0].answerLetter) {\n      return answerChoices.map(answer => (\n        <li className=\"informer-block\" key={answer.answerLetter}>\n          <div className=\"informer-box\" style={getAnswerPercentageBreakdownColors('half', answer.answerLetter, answer.answerPercentage, answer.correctAnswer, studentAnswer)}>\n            <b className=\"informer-circle\" style={getAnswerPercentageBreakdownColors('full', answer.answerLetter, answer.answerPercentage, answer.correctAnswer, studentAnswer)}>{answer.answerLetter}</b>\n          </div>\n          <b className=\"informer-value\">{answer.answerPercentage}%</b>\n        </li>\n      ))\n    }\n    return answerChoices.map(answer => (\n      <li className=\"informer-block\" key={answer.answerValue}>\n        <div className=\"informer-box\" style={getAnswerPercentageBreakdownColors('half', answer.answerValue, answer.answerPercentage, answer.correctAnswer, studentAnswer)}>\n          <b className=\"informer-circle\" style={getAnswerPercentageBreakdownColors('full', answer.answerValue, answer.answerPercentage, answer.correctAnswer, studentAnswer)}>{answer.answerValue}</b>\n        </div>\n        <b className=\"informer-value\">{answer.answerPercentage}%</b>\n      </li>\n    ))\n  }\n\n  render() {\n    const { open, onCloseModal, question = {} } = this.props;\n    const { reviewedWithStudent } = this.state;\n    const { topic, questionType, question: questionText, hasVideo, flagged, questionNumber, videoSource, studentNotes, passage, videoThumbnail } = question;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={onCloseModal}>\n              <div id=\"modal_video001\" className=\"modal modal-answer\">\n                <div className=\"modal-header row mb-0\">\n                  <div className=\"col s10\">\n                    <span className=\"subtitle\">{topic}</span>\n                    <span className=\"title\">{questionType} Problem #{questionNumber}</span>\n                  </div>\n                  <div className=\"col s2 right-align\">\n                    <a href=\"#\" className=\"close modal-close\" onClick={onCloseModal}><i className=\"icon-close-thin\"></i></a>\n                  </div>\n                </div>\n                <div className=\"modal-content\">\n                  <div className=\"d-flex row mb-0\">\n                    <div className=\"col s12 l6 order-lg-2\">\n                      {hasVideo && (\n                        <div className=\"card-panel\">\n                          <div className=\"video-frame\">\n                            <div className=\"embed-responsive embed-responsive-16by9\">\n                              <video id=\"video001\" className=\"in-modal embed-responsive-item\" data-current-time=\"0\" poster={videoThumbnail} preload=\"metadata\" controls playsinline>\n                              <source type=\"video/mp4\" src={videoSource} />\n                              </video>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                      <div className=\"card-panel\">\n                        <div className=\"panel-block\">\n                          <div className=\"d-flex align-items-center row mb-0\">\n                            {flagged && (\n                              <div className=\"col\">\n                                <span className=\"status-answer\" style={{ color: '#c0272d' }}>\n                                  <i className=\"icon-flag\"></i><b className=\"status-text\">Flagged</b>\n                                </span>\n                              </div>\n                            )}\n                            <div className=\"col\">\n                              <label>\n                                <input\n                                  type=\"checkbox\"\n                                  className=\"filled-in\"\n                                  checked={reviewedWithStudent}\n                                  onChange={this.toggleReviewedStatus}\n                                />\n                                <span><b>Reviewed with Student</b></span>\n                              </label>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"panel-block\">\n                          <ul className=\"informers-list\">\n                            {this.renderAnswerPercentageBreakdown()}\n                          </ul>\n                        </div>\n                        <div className=\"panel-block\">\n                          <strong className=\"subtitle\">Student’s Notes:</strong>\n                          <div className=\"text-content custom-form\">\n                            <div className=\"jcf-scrollable height-22\">\n                              <div className=\"text-holder\">\n                                {studentNotes}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"col s12 l6 order-lg-1\">\n                      <div className=\"card-panel\">\n                        <div className=\"text-content custom-form\">\n                          <div className=\"jcf-scrollable height-45\">\n                            <div className=\"text-holder\">\n                              {passage}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"card-panel\">\n                        <strong className=\"h3 subtitle\">{questionText}</strong>\n                        <ul className=\"answer-full-list\">\n                          {this.mapAnswerChoices()}\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 9999;\n            }\n            .modal-answer {\n              opacity: 1;\n              visibility: visible;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nQuestionModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  question: PropTypes.object.isRequired,\n  onCloseModal: PropTypes.func.isRequired,\n}\n\nexport default QuestionModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\n\nimport Portal from '../../../../Portal';\nimport ClickOffComponentWrapper from '../../../../ClickOffComponentWrapper';\n\nclass ReassignModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      assignDate: '',\n      assignTime: '',\n      dueDate: '',\n      dueTime: '',\n    };\n  }\n\n  onResetModal = () => this.setState({ assignDate: '', assignTime: '', dueDate: '', dueTime: '' })\n\n  onCloseModal = () => {\n    const { onClose } = this.props;\n    onClose();\n    this.onResetModal();\n  }\n\n  reassignDate = () => {\n    const { onReassignDate } = this.props;\n    const { assignDate: unformattedAssignDate, assignTime: unformattedAssignTime, dueDate: unformattedDueDate, dueTime: unformattedDueTime } = this.state;\n    const assignDate = moment(unformattedAssignDate).format('MM/DD/YY');\n    const assignTime = moment(unformattedAssignTime).format('hh:mm');\n    const dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n    const dueTime = moment(unformattedDueTime).format('hh:mm');\n    onReassignDate({ assignDate, assignTime, dueDate, dueTime });\n    this.onResetModal();\n  }\n\n  handleDatePickerChange = (field, value) => this.setState({ [field]: value })\n\n  render() {\n    const { open } = this.props;\n    const { assignDate, assignTime, dueDate, dueTime } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={this.onCloseModal}>\n              <div id=\"modal_reschedule\" className=\"modal modal-custom modal-calendar\">\n                <div className=\"card-modal card\">\n                  <div className=\"card-panel card-panel-title\" style={{ backgroundColor: '#25bbf7', color: '#fff' }}>\n                    <div className=\"card-panel-row row\">\n                      <div className=\"col\">\n                        <h2>\n                          <span className=\"heading-holder\">\n                            <span className=\"heading-block\">Reschedule</span>\n                          </span>\n                        </h2>\n                      </div>\n                      <div className=\"col right-align\">\n                        <a href=\"#\" className=\"panel-link close modal-close\"><i className=\"icon-close-thin\"></i></a>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"card-content\" style={{ height: '410px' }}>\n                    <div className=\"card-body\" style={{ height: '335px' }}>\n                      <div className=\"modal-row row\">\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-calendar\"></i>\n                            <DatePicker\n                              selected={assignDate}\n                              withPortal\n                              dateFormat=\"MM/dd/yy\"\n                              id=\"assignDate\"\n                              name=\"assignDate\"\n                              onChange={(event) => this.handleDatePickerChange('assignDate', event)}\n                            />\n                            <label className={assignDate ? 'label active' : 'label'} htmlFor=\"new_test_section_assign_date\">Assign For</label>\n                          </div>\n                        </div>\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-clock2\"></i>\n                            <DatePicker\n                              selected={assignTime}\n                              withPortal\n                              showTimeSelect\n                              showTimeSelectOnly\n                              timeIntervals={15}\n                              dateFormat=\"h:mm aa\"\n                              timeCaption=\"Time\"\n                              id=\"assignTime\"\n                              name=\"assignTime\"\n                              onChange={(event) => this.handleDatePickerChange('assignTime', event)}\n                            />\n                            <label className={assignTime ? 'label active' : 'label'} htmlFor=\"assignTime\">Time</label>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-row row\">\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-calendar\"></i>\n                            <DatePicker\n                              selected={dueDate}\n                              withPortal\n                              dateFormat=\"MM/dd/yy\"\n                              id=\"dueDate\"\n                              name=\"dueDate\"\n                              onChange={(event) => this.handleDatePickerChange('dueDate', event)}\n                            />\n                            <label className={dueDate ? 'label active' : 'label'} htmlFor=\"dueDate\">Due (optional)</label>\n                          </div>\n                        </div>\n                        <div className=\"col s6\">\n                          <div className=\"datepicker-field input-field\">\n                            <i className=\"icon-clock2\"></i>\n                            <DatePicker\n                              selected={dueTime}\n                              withPortal\n                              showTimeSelect\n                              showTimeSelectOnly\n                              timeIntervals={15}\n                              dateFormat=\"h:mm aa\"\n                              timeCaption=\"Time\"\n                              id=\"dueTime\"\n                              name=\"dueTime\"\n                              onChange={(event) => this.handleDatePickerChange('dueTime', event)}\n                            />\n                            <label className={dueTime ? 'label active' : 'label'} htmlFor=\"dueTime\">Time</label>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"modal-row row\">\n                        <p>&nbsp;</p>\n                      </div>\n                    </div>\n                    <div className=\"modal-footer modal-footer-width\">\n                      <a href=\"#\" className=\"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\">Cancel</a>\n                      <a href=\"#\" className=\"link-btn waves-effect waves-teal btn-flat\">Save Changes</a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 2003;\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n            #modal_reschedule {\n              top: 10%;\n            }\n            div.react-datepicker__portal {\n              height: 100%!important;\n              width: 100%!important;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nReassignModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onReassignDate: PropTypes.func.isRequired,\n}\n\nexport default ReassignModal;\n","/* eslint-disable react/no-did-mount-set-state */\n/* eslint-disable react/no-did-update-set-state */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Portal from '../../Portal';\n\nimport PracticeQuestions from './components/PracticeQuestions';\nimport ChallengeQuestions from './components/ChallengeQuestions';\nimport QuestionModal from './components/QuestionModal';\n\nimport sampleQuestions from './utils/sampleQuestions';\nimport CardSection from './components/CardSection';\nimport ReassignModal from './components/ReassignModal';\n\nclass LessonWorksheetTestSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedQuestion: {},\n      questionModalOpen: false,\n      answerSheetComplete: false,\n      questions: sampleQuestions,\n      dropdownIsOpen: false,\n      questionDropdownOpen: false,\n      questionDropdownIndex: null,\n      reassigNModalOpen: false,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.worksheet.completionLevel !== 'Not Started') {\n      this.setState({ answerSheetComplete: true });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { worksheet } = this.props;\n    if (prevProps.worksheet.id !== worksheet.id) {\n      if (worksheet.completionLevel === 'Not Started') {\n        this.setState({ answerSheetComplete: false });\n      } else {\n        this.setState({ answerSheetComplete: true });\n      }\n    }\n  }\n\n  onToggleReassignModal = () => this.setState(({ reassigNModalOpen }) => ({ reassigNModalOpen: !reassigNModalOpen, dropdownIsOpen: false }))\n\n  onToggleQuestionModal = (selectedQuestion = {}) => this.setState(({ questionModalOpen }) => ({ questionModalOpen: !questionModalOpen, selectedQuestion, questionDropdownOpen: false, questionDropdownIndex: null }))\n\n  onOpenDropdown = () => this.setState({ dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  onReassignDate = (assignDate, assignTime, dueDate, dueTime) => {\n    console.warn('Stubbed out date functionality', assignDate, assignTime, dueDate, dueTime);\n  }\n\n  handleQuestionDropdownClick = (event, question) => {\n    const { questionDropdownOpen, questionDropdownIndex } = this.state;\n    event.preventDefault();\n    if (questionDropdownOpen && question.id === questionDropdownIndex) {\n      this.setState({ questionDropdownOpen: false, questionDropdownIndex: null });\n    } else if (questionDropdownOpen && question !== questionDropdownIndex) {\n      this.setState({ questionDropdownIndex: question.id });\n    } else if (questionDropdownOpen && question.id === questionDropdownIndex) {\n      this.setState({ questionDropdownOpen: false, questionDropdownIndex: null });\n    } else {\n      this.setState({ questionDropdownOpen: true, questionDropdownIndex: question.id });\n    }\n  }\n\n  handleDropdownClick = (event) => {\n    const { dropdownIsOpen } = this.state;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return this.onCloseDropdown();\n    }\n    return this.onOpenDropdown();\n  }\n\n  render() {\n    const { questionModalOpen, selectedQuestion, questions, answerSheetComplete, dropdownIsOpen, questionDropdownOpen, questionDropdownIndex, reassigNModalOpen } = this.state;\n    const { onClose, worksheet, user = {} } = this.props;\n    const { studentInformation: { firstName, lastName } } = user;\n    return (\n      <React.Fragment>\n        <QuestionModal\n          open={questionModalOpen}\n          question={selectedQuestion}\n          onCloseModal={this.onToggleQuestionModal}\n        />\n        <ReassignModal\n          open={reassigNModalOpen}\n          onClose={this.onToggleReassignModal}\n          onReassignDate={this.onReassignDate}\n        />\n        <Portal selector=\"#modal\">\n          <div className=\"wrapper modal\" style={{ zIndex: '1003', display: 'block', position: 'absolute', top: '0', width: '100%' }}>\n            <div className=\"header-box card-panel light-blue lighten-1 white-text\" style={{ zIndex: '9' }}>\n              <div className=\"header-flex-row row mb-0\">\n                <div className=\"col s12 m7 xl8\">\n                  <div className=\"header-holder\">\n                    <div className=\"header-col\">\n                      <div className=\"icon-col\">\n                        <i className=\"icon-books-l\"></i>\n                        <span className=\"text-icon\">Lesson</span>\n                      </div>\n                    </div>\n                    <div className=\"header-col\">\n                      <div className=\"card-panel-text\">\n                        <div className=\"text-small\">{worksheet.unit}</div>\n                        <h1 className=\"text-large\">{worksheet.worksheetName}</h1>\n                        <div className=\"text-small\">p.{worksheet.passage}  ({worksheet.type})</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col s9 m4 xl3 position-mobile-left\">\n                  <div className=\"card-panel-text\">\n                    <h2 className=\"text-large\">{firstName} {lastName}</h2>\n                    <dl className=\"text-small dl-horizontal\">\n                      <dt>Assigned:</dt>\n                      <dd><time dateTime=\"2019-01-06T08:00\">{worksheet.assignDate} at {worksheet.assignTime}</time></dd>\n                    </dl>\n                    <dl className=\"text-small dl-horizontal\">\n                      <dt>Due:</dt>\n                      <dd><time dateTime=\"2019-01-06T16:00\">{worksheet.dueDate} at {worksheet.dueTime}</time></dd>\n                    </dl>\n                    <If condition={worksheet.completionDate}>\n                      <dl className=\"text-small dl-horizontal\">\n                        <dt>Completed:</dt>\n                        <dd><time dateTime=\"2019-09-01T06:59\">{worksheet.completionDate} at {worksheet.completionTime}</time></dd>\n                      </dl>\n                    </If>\n                  </div>\n                </div>\n                <div className=\"col s2 m1 right-align position-mobile-right\">\n                  <div className=\"dropdown-block\">\n                    <a\n                      href=\"#\"\n                      data-target=\"dropdown_top\"\n                      className=\"dropdown-trigger btn\"\n                      onClick={this.handleDropdownClick}\n                    >\n                      <i className=\"material-icons dots-icon\">more_vert</i>\n                    </a>\n                    <If condition={dropdownIsOpen}>\n                      <ul id=\"dropdown_top\" className=\"dropdown-content dropdown-exwide\" style={{ display: 'block', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}>\n                        <li><a href=\"#\" className=\"modal-trigger\" onClick={this.onToggleReassignModal}>Change Date</a></li>\n                        <li><a href=\"#\" className=\"modal-trigger\" onClick={this.onToggleReassignModal}>Change Due Date</a></li>\n                        <li><a href=\"#\" className=\"modal-trigger\" onClick={this.onToggleReassignModal}>Remove Due Date</a></li>\n                        <li><a href=\"#\">Excuse Latness</a></li>\n                        <li><a href=\"#\">Reset</a></li>\n                        <li><a href=\"#\" className=\"link-delete\">Delete</a></li>\n                      </ul>\n                    </If>\n                  </div>\n                  <div className=\"close-block\" onClick={onClose}>\n                    <a href=\"#\" className=\"modal-close close\"><i className=\"icon-close-thin\"></i></a>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"content-section content-section-85\">\n              <div className=\"container-sm\">\n                <If condition={worksheet.completionLevel !== 'Not Started'}>\n                  <CardSection\n                    flags={worksheet.flags}\n                    status={worksheet.status}\n                    problems={worksheet.problems}\n                    completedProblems={worksheet.completedProblems}\n                    completionLevel={worksheet.completionLevel}\n                    totalVideoMinutesWatched={worksheet.totalVideoMinutesWatched}\n                    totalVideoMinutesAllMissedProblems={worksheet.totalVideoMinutesAllMissedProblems}\n                  />\n                </If>\n                <div className=\"main-row row\">\n                  <ChallengeQuestions\n                    answerSheetComplete={answerSheetComplete}\n                    questionDropdownIndex={questionDropdownIndex}\n                    questionDropdownOpen={questionDropdownOpen}\n                    onOpenQuestionModal={this.onToggleQuestionModal}\n                    handleQuestionDropdownClick={this.handleQuestionDropdownClick}\n                    questions={questions.filter(question => question.questionType === 'Challenge')}\n                  />\n                  <PracticeQuestions\n                    answerSheetComplete={answerSheetComplete}\n                    questionDropdownIndex={questionDropdownIndex}\n                    questionDropdownOpen={questionDropdownOpen}\n                    onOpenQuestionModal={this.onToggleQuestionModal}\n                    handleQuestionDropdownClick={this.handleQuestionDropdownClick}\n                    questions={questions.filter(question => question.questionType === 'Practice')}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </Portal>\n      </React.Fragment>\n    );\n  }\n}\n\nLessonWorksheetTestSection.propTypes = {\n  user: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  worksheet: PropTypes.object.isRequired,\n};\n\nexport default LessonWorksheetTestSection;\n","export const getAnswerChoiceColors = (answerLetter, correctAnswer, studentAnswer) => {\n  if (correctAnswer) {\n    return (\n      { backgroundColor: '#32955e' }\n    );\n  } else if (answerLetter === studentAnswer && studentAnswer !== correctAnswer) {\n    return (\n      { backgroundColor: '#db1d41' }\n    )\n  }\n  return null;\n};\n\nexport const getAnswerPercentageBreakdownColors = (colorType, answerLetter, answerPercentage, correctAnswer, studentAnswer) => {\n  if (correctAnswer) {\n    if (colorType === 'full') {\n      return { backgroundColor: '#32955c', color: '#fff' }\n    }\n    return (\n      { width: `${answerPercentage}%`, backgroundColor: '#d3efde' }\n    )\n  } else if (answerLetter === studentAnswer && studentAnswer !== correctAnswer) {\n    if (colorType === 'full') {\n      return (\n        { backgroundColor: '#db1d41', color: '#fff' }\n      )\n    }\n    return (\n      { width: `${answerPercentage}%`, backgroundColor: '#db1d41' }\n    )\n  }\n  if (colorType === 'full') {\n    return (\n      { backgroundColor: '#e5e5e5' }\n    );\n  }\n  return (\n    { width: `${answerPercentage}%`, backgroundColor: '#e5e5e5' }\n  );\n};\n\nexport const getAnswerColor = (answer) => {\n  if (answer.correctAnswer) {\n    return (\n      {\n      color: '#3eb777', borderColor: '#32955c',\n      }\n    );\n  }\n  return null;\n}\n\nexport const difficultyMap = {\n  'Easy': 'E',\n  'Medium': 'M',\n  'Difficult': 'D',\n};\n\nexport const getCompleteAnswerColor = (answerType, answer, studentAnswer) => {\n  if (answerType === 'letter') {\n    if (answer.answerLetter !== studentAnswer && answer.correctAnswer) {\n      return (\n        {\n          color: '#32955c', borderColor: '#32955c', backgroundColor: '#fff',\n        }\n      )\n    }\n    else if (answer.answerLetter === studentAnswer && answer.correctAnswer ) {\n      return (\n        {\n          color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777',\n        }\n      );\n    }\n    else if (!answer.correctAnswer && answer.answerLetter === studentAnswer) {\n      return (\n        {\n          color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41',\n        }\n      )\n    }\n    return null;\n  }\n  if (answer.answerValue !== studentAnswer && answer.correctAnswer) {\n    return (\n      {\n        color: '#32955c', borderColor: '#32955c', backgroundColor: '#fff',\n      }\n    )\n  }\n  else if (answer.answerValue === studentAnswer && answer.correctAnswer ) {\n    return (\n      {\n        color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777',\n      }\n    );\n  }\n  else if (!answer.correctAnswer && answer.answerValue === studentAnswer) {\n    return (\n      {\n        color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41',\n      }\n    )\n  }\n  return null;\n}\n\nexport const statusColorMap = {\n  Assigned: 'grey darken-4',\n  Accomplished: 'purple darken-3',\n  Beginning: 'red darken-3',\n  Exemplary: 'blue accent-4',\n  Developing: 'purple',\n};\n\nexport const chartColorMap = {\n  Assigned: '#333',\n  Accomplished: '#7327cc',\n  Beginning: '#ed1c24',\n  Exemplary: 'rgb(0, 100, 244)',\n  Developing: '#c10078',\n}\n\nexport const data = (percentage, status, colorOverride = null) => ({\n  datasets: [{\n    data: [percentage, 100 - percentage],\n    backgroundColor: [\n      colorOverride || chartColorMap[status],\n      '#eaeaea',\n    ],\n  }],\n});\n\nexport const formatTimeEstimate = (totalMinutes) => {\n  const hours = Math.floor(totalMinutes / 60) === 0 ? 0 : Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60 === 0 ? 0 : totalMinutes % 60;\n  const hourString = hours !== 0 ? `${hours}:` : '';\n  const minuteString = minutes !== 0 ? `${minutes}` : '';\n  return `${hourString}${minuteString}`\n}\n\n","export default [\n  {\n    id: 1,\n    hasVideo: false,\n    questionType: 'Challenge',\n    questionNumber: 1,\n    topic: 'Special Right Triangles',\n    difficulty: 'Easy',\n    studentNotes: '1 this is an example of some pretty long student notes 1 this is an example of some pretty long student notes 1 this is an example of some pretty long student notes 1 this is an example of some pretty long student notes 1 this is an example of some pretty long student notes',\n    passage: `Question 1-10 are based on the following passage.\n    Why do we use it? \n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Porro id eius voluptatem explicabo harum eligendi modi minus velit, aliquam, repellat magni ab obcaecati. Maxime rerum beatae numquam aliquam vel soluta. Voluptatum architecto iusto totam error aliquid, et excepturi accusamus omnis, labore magni recusandae odit maxime. Velit laborum ab enim minima provident atque. Aperiam possimus quo maxime dolores voluptatem consequatur explicabo architecto corrupti, hic, laborum suscipit sequi voluptates dignissimos. Nostrum nesciunt possimus, eveniet dignissimos fugiat!\n    Where does it come from?\n    Inventore quod obcaecati labore aut molestiae illum sint harum, corrupti, neque incidunt sunt optio commodi, sequi aliquam vel mollitia aspernatur ad! Atque. Itaque earum suscipit voluptatem magni quaerat officia repudiandae.\n    `,\n    question: 'As it is used in line 14, convention most nearly means',\n    flagged: false,\n    studentAnswer: 'B',\n    answerType: 'letter',\n    answerChoices: [\n      {\n        answerLetter: 'A',\n        answerText: 'ceremony',\n        correctAnswer: false,\n        answerPercentage: '12',\n      },\n      {\n        answerLetter: 'B',\n        answerText: 'ceremony2',\n        correctAnswer: false,\n        answerPercentage: '18',\n      },\n      {\n        answerLetter: 'C',\n        answerText: 'generalization',\n        correctAnswer: true,\n        answerPercentage: '40',\n      },\n      {\n        answerLetter: 'D',\n        answerText: 'code',\n        correctAnswer: false,\n        answerPercentage: '30',\n      },\n    ],\n  },\n  {\n    id: 2,\n    hasVideo: true,\n    questionType: 'Challenge',\n    videoSource: 'https://www.youtube.com/watch?v=zGP6zk7jcrQ',\n    videoThumbnail: 'https://s3.amazonaws.com/cdn-origin-etr.akc.org/wp-content/uploads/2017/11/12225921/Pembroke-Welsh-Corgi-MP.jpg',\n    questionNumber: 2,\n    topic: 'Geometry',\n    difficulty: 'Medium',\n    studentNotes: '2 this is an example of some pretty long student notes 2 this is an example of some pretty long student notes 2 this is an example of some pretty long student notes 2 this is an example of some pretty long student notes 2 this is an example of some pretty long student notes',\n    passage: `This is the start of another passage.\n    Why do we use it?\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Porro id eius voluptatem explicabo harum eligendi modi minus velit, aliquam, repellat magni ab obcaecati. Maxime rerum beatae numquam aliquam vel soluta. Voluptatum architecto iusto totam error aliquid, et excepturi accusamus omnis, labore magni recusandae odit maxime. Velit laborum ab enim minima provident atque. Aperiam possimus quo maxime dolores voluptatem consequatur explicabo architecto corrupti, hic, laborum suscipit sequi voluptates dignissimos. Nostrum nesciunt possimus, eveniet dignissimos fugiat!\n    Where does it come from?\n    Inventore quod obcaecati labore aut molestiae illum sint harum, corrupti, neque incidunt sunt optio commodi, sequi aliquam vel mollitia aspernatur ad! Atque. Itaque earum suscipit voluptatem magni quaerat officia repudiandae.\n    `,\n    question: 'What is the correct number choice',\n    flagged: true,\n    studentAnswer: '2.91',\n    answerType: 'value',\n    answerChoices: [\n      {\n        answerValue: '5.12',\n        correctAnswer: true,\n        answerPercentage: '67',\n      },\n      {\n        answerValue: '2.91',\n        correctAnswer: false,\n        answerPercentage: '33',\n      },\n    ],\n  },\n  {\n    id: 3,\n    hasVideo: true,\n    questionType: 'Challenge',\n    videoSource: 'https://www.youtube.com/watch?v=zGP6zk7jcrQ',\n    videoThumbnail: 'https://s3.amazonaws.com/cdn-origin-etr.akc.org/wp-content/uploads/2017/11/12225921/Pembroke-Welsh-Corgi-MP.jpg',\n    questionNumber: 3,\n    topic: 'Pythagorean Theorem',\n    difficulty: 'Difficult',\n    studentNotes: '3 this is an example of some pretty long student notes 3 this is an example of some pretty long student notes 3 this is an example of some pretty long student notes 3 this is an example of some pretty long student notes 3 this is an example of some pretty long student notes',\n    passage: `Question three!\n    Why do we use it? \n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Porro id eius voluptatem explicabo harum eligendi modi minus velit, aliquam, repellat magni ab obcaecati. Maxime rerum beatae numquam aliquam vel soluta. Voluptatum architecto iusto totam error aliquid, et excepturi accusamus omnis, labore magni recusandae odit maxime. Velit laborum ab enim minima provident atque. Aperiam possimus quo maxime dolores voluptatem consequatur explicabo architecto corrupti, hic, laborum suscipit sequi voluptates dignissimos. Nostrum nesciunt possimus, eveniet dignissimos fugiat!\n    Where does it come from?\n    Inventore quod obcaecati labore aut molestiae illum sint harum, corrupti, neque incidunt sunt optio commodi, sequi aliquam vel mollitia aspernatur ad! Atque. Itaque earum suscipit voluptatem magni quaerat officia repudiandae.\n    `,\n    question: 'Here is the third question',\n    flagged: false,\n    studentAnswer: 'C',\n    answerType: 'letter',\n    answerChoices: [\n      {\n        answerLetter: 'A',\n        answerText: 'answera',\n        correctAnswer: true,\n        answerPercentage: '62',\n      },\n      {\n        answerLetter: 'B',\n        answerText: 'answerb',\n        correctAnswer: false,\n        answerPercentage: '8',\n      },\n      {\n        answerLetter: 'C',\n        answerText: 'answerc',\n        correctAnswer: false,\n        answerPercentage: '20',\n      },\n      {\n        answerLetter: 'D',\n        answerText: 'answerd',\n        correctAnswer: false,\n        answerPercentage: '10',\n      },\n    ],\n  },\n  {\n    id: 4,\n    hasVideo: false,\n    questionType: 'Challenge',\n    questionNumber: 4,\n    topic: 'Algebra',\n    difficulty: 'Medium',\n    studentNotes: '4 this is an example of some pretty long student notes 4 this is an example of some pretty long student notes 4 this is an example of some pretty long student notes 4 this is an example of some pretty long student notes 4 this is an example of some pretty long student notes',\n    passage: `Fourth passage sample.\n    Why do we use it?\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Porro id eius voluptatem explicabo harum eligendi modi minus velit, aliquam, repellat magni ab obcaecati. Maxime rerum beatae numquam aliquam vel soluta. Voluptatum architecto iusto totam error aliquid, et excepturi accusamus omnis, labore magni recusandae odit maxime. Velit laborum ab enim minima provident atque. Aperiam possimus quo maxime dolores voluptatem consequatur explicabo architecto corrupti, hic, laborum suscipit sequi voluptates dignissimos. Nostrum nesciunt possimus, eveniet dignissimos fugiat!\n    Where does it come from?\n    Inventore quod obcaecati labore aut molestiae illum sint harum, corrupti, neque incidunt sunt optio commodi, sequi aliquam vel mollitia aspernatur ad! Atque. Itaque earum suscipit voluptatem magni quaerat officia repudiandae.\n    `,\n    question: 'What is the correct number choice 2',\n    flagged: true,\n    studentAnswer: '6.91',\n    answerType: 'value',\n    answerChoices: [\n      {\n        answerValue: '6.91',\n        correctAnswer: false,\n        answerPercentage: '22',\n      },\n      {\n        answerValue: '4.53',\n        correctAnswer: true,\n        answerPercentage: '78',\n      },\n    ],\n  },\n  {\n    id: 5,\n    hasVideo: true,\n    questionType: 'Practice',\n    videoSource: 'https://www.youtube.com/watch?v=zGP6zk7jcrQ',\n    videoThumbnail: 'https://s3.amazonaws.com/cdn-origin-etr.akc.org/wp-content/uploads/2017/11/12225921/Pembroke-Welsh-Corgi-MP.jpg',\n    questionNumber: 3,\n    topic: 'Pythagorean Theorem',\n    difficulty: 'Difficult',\n    studentNotes: '3 this is an example of some pretty long student notes 3 this is an example of some pretty long student notes 3 this is an example of some pretty long student notes 3 this is an example of some pretty long student notes 3 this is an example of some pretty long student notes',\n    passage: `Question three!\n    Why do we use it? \n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Porro id eius voluptatem explicabo harum eligendi modi minus velit, aliquam, repellat magni ab obcaecati. Maxime rerum beatae numquam aliquam vel soluta. Voluptatum architecto iusto totam error aliquid, et excepturi accusamus omnis, labore magni recusandae odit maxime. Velit laborum ab enim minima provident atque. Aperiam possimus quo maxime dolores voluptatem consequatur explicabo architecto corrupti, hic, laborum suscipit sequi voluptates dignissimos. Nostrum nesciunt possimus, eveniet dignissimos fugiat!\n    Where does it come from?\n    Inventore quod obcaecati labore aut molestiae illum sint harum, corrupti, neque incidunt sunt optio commodi, sequi aliquam vel mollitia aspernatur ad! Atque. Itaque earum suscipit voluptatem magni quaerat officia repudiandae.\n    `,\n    question: 'Here is the third question',\n    flagged: false,\n    studentAnswer: 'C',\n    answerType: 'letter',\n    answerChoices: [\n      {\n        answerLetter: 'A',\n        answerText: 'answera',\n        correctAnswer: true,\n        answerPercentage: '62',\n      },\n      {\n        answerLetter: 'B',\n        answerText: 'answerb',\n        correctAnswer: false,\n        answerPercentage: '8',\n      },\n      {\n        answerLetter: 'C',\n        answerText: 'answerc',\n        correctAnswer: false,\n        answerPercentage: '20',\n      },\n      {\n        answerLetter: 'D',\n        answerText: 'answerd',\n        correctAnswer: false,\n        answerPercentage: '10',\n      },\n    ],\n  },\n  {\n    id: 6,\n    hasVideo: false,\n    questionType: 'Practice',\n    questionNumber: 4,\n    topic: 'Algebra',\n    difficulty: 'Medium',\n    studentNotes: '4 this is an example of some pretty long student notes 4 this is an example of some pretty long student notes 4 this is an example of some pretty long student notes 4 this is an example of some pretty long student notes 4 this is an example of some pretty long student notes',\n    passage: `Fourth passage sample.\n    Why do we use it? \n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Porro id eius voluptatem explicabo harum eligendi modi minus velit, aliquam, repellat magni ab obcaecati. Maxime rerum beatae numquam aliquam vel soluta. Voluptatum architecto iusto totam error aliquid, et excepturi accusamus omnis, labore magni recusandae odit maxime. Velit laborum ab enim minima provident atque. Aperiam possimus quo maxime dolores voluptatem consequatur explicabo architecto corrupti, hic, laborum suscipit sequi voluptates dignissimos. Nostrum nesciunt possimus, eveniet dignissimos fugiat!\n    Where does it come from?\n    Inventore quod obcaecati labore aut molestiae illum sint harum, corrupti, neque incidunt sunt optio commodi, sequi aliquam vel mollitia aspernatur ad! Atque. Itaque earum suscipit voluptatem magni quaerat officia repudiandae.\n    `,\n    question: 'What is the correct number choice 2',\n    flagged: true,\n    studentAnswer: '6.91',\n    answerType: 'value',\n    answerChoices: [\n      {\n        answerValue: '6.91',\n        correctAnswer: false,\n        answerPercentage: '22',\n      },\n      {\n        answerValue: '4.53',\n        correctAnswer: true,\n        answerPercentage: '78',\n      },\n    ],\n  },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport locationOptions from '../../../../utils/locationOptions';\nimport sortOptions from '../../../../utils/sortOptions';\nimport { searchStudents } from '../../../index/actions';\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      nameFilter: '',\n      location: '',\n      sort: {},\n      activeFilters: [],\n    };\n  }\n\n  // eslint-disable-next-line consistent-return\n  onToggleShowFilters = () => this.setState(({ open }) => ({ open: !open }))\n\n  onHandleFilterClick = (filter) => {\n    const { activeFilters: currentActiveFilters } = this.state;\n    let activeFilters;\n    if (currentActiveFilters.indexOf(filter) === -1) {\n      activeFilters = update(currentActiveFilters, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = currentActiveFilters.indexOf(filter);\n      activeFilters = update(currentActiveFilters, {\n        $splice: [[filterIndex, 1]],\n      });\n    }\n    this.setState({ activeFilters });\n  }\n\n  onClearFilters = () => this.setState({ activeFilters: [] })\n\n  // eslint-disable-next-line consistent-return\n  handleFilterChange = (event, name) => {\n    const { onSetFilteredLocationState, onUnsetFilteredLocationState, onSetSort } = this.props;\n    const value = event.target ? event.target.value : event;\n    const updatedState = update(this.state, {\n      $merge: { [name]: value },\n    });\n    this.setState(updatedState, () => {\n      // Collect inputs and dispatch search\n      const { onSearchStudents } = this.props;\n      const { name, location, sort } = this.state;\n      const filters = {\n        name,\n        location,\n        sort,\n      };\n      onSearchStudents(filters);\n    });\n    if (name === 'location') {\n      if (event === '') {\n        return onUnsetFilteredLocationState();\n      }\n      return onSetFilteredLocationState(event);\n    } else if (name === 'sort') {\n      return onSetSort(event);\n    }\n  }\n\n  render() {\n    // eslint-disable-next-line no-unused-vars\n    const { nameFilter, location, sort, open, activeFilters } = this.state;\n    return (\n      <div className=\"filter-form-holder\">\n        <ul className=\"collapsible expandable\">\n          <li>\n            <div className=\"collapsible-body\" style={open ? { display: 'block' } : { display: 'none' }}>\n              <div className=\"filter-form_checkbox-list-holder\">\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"activated\"\n                      checked={activeFilters.indexOf(\"activated\") !== -1}\n                      onChange={() => this.onHandleFilterClick('activated')}\n                    />\n                    <label htmlFor=\"activated\">Activated</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"unactivated\"\n                      checked={activeFilters.indexOf(\"unactivated\") !== -1}\n                      onChange={() => this.onHandleFilterClick('unactivated')}\n                    />\n                    <label htmlFor=\"unactivated\">Unactivated</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"expired\"\n                      checked={activeFilters.indexOf(\"expired\") !== -1}\n                      onChange={() => this.onHandleFilterClick('expired')}\n                    />\n                    <label htmlFor=\"expired\">Expired</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"current\"\n                      checked={activeFilters.indexOf(\"current\") !== -1}\n                      onChange={() => this.onHandleFilterClick('current')}\n                    />\n                    <label htmlFor=\"current\">Current</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"archived\"\n                      checked={activeFilters.indexOf(\"archived\") !== -1}\n                      onChange={() => this.onHandleFilterClick('archived')}\n                    />\n                    <label htmlFor=\"archived\">Archived</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"no-gain\"\n                      checked={activeFilters.indexOf(\"no-gain\") !== -1}\n                      onChange={() => this.onHandleFilterClick('no-gain')}\n                    />\n                    <label htmlFor=\"no-gain\">No Gain</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"some-gain\"\n                      checked={activeFilters.indexOf(\"some-gain\") !== -1}\n                      onChange={() => this.onHandleFilterClick('some-gain')}\n                    />\n                    <label htmlFor=\"some-gain\">Some Gain</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"gain-100+\"\n                      checked={activeFilters.indexOf(\"gain-100+\") !== -1}\n                      onChange={() => this.onHandleFilterClick('gain-100+')}\n                    />\n                    <label htmlFor=\"gain-100+\">Gain of 100+</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"gain-200+\"\n                      checked={activeFilters.indexOf(\"gain-200+\") !== -1}\n                      onChange={() => this.onHandleFilterClick('gain-200+')}\n                    />\n                    <label htmlFor=\"gain-200+\">Gain of 200+</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"hit-target-score\"\n                      checked={activeFilters.indexOf(\"hit-target-score\") !== -1}\n                      onChange={() => this.onHandleFilterClick('hit-target-score')}\n                    />\n                    <label htmlFor=\"hit-target-score\">Hit Target Score</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"hasnt-hit-target-score\"\n                      checked={activeFilters.indexOf(\"hasnt-hit-target-score\") !== -1}\n                      onChange={() => this.onHandleFilterClick('hasnt-hit-target-score')}\n                    />\n                    <label htmlFor=\"hasnt-hit-target-score\">Hasn’t Hit Target Score</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"no-tests\"\n                      checked={activeFilters.indexOf(\"no-tests\") !== -1}\n                      onChange={() => this.onHandleFilterClick('tests')}\n                    />\n                    <label htmlFor=\"no-tests\">No Tests</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"1-test\"\n                      checked={activeFilters.indexOf(\"1-test\") !== -1}\n                      onChange={() => this.onHandleFilterClick('1-test')}\n                    />\n                    <label htmlFor=\"1-test\">1 Test</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"2-test\"\n                      checked={activeFilters.indexOf(\"2-test\") !== -1}\n                      onChange={() => this.onHandleFilterClick('2-test')}\n                    />\n                    <label htmlFor=\"2-test\">2 Tests</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"3-test\"\n                      checked={activeFilters.indexOf(\"3-test\") !== -1}\n                      onChange={() => this.onHandleFilterClick('3-test')}\n                    />\n                    <label htmlFor=\"3-test\">3+ Tests</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"has-overdue-work\"\n                      checked={activeFilters.indexOf(\"has-overdue-work\") !== -1}\n                      onChange={() => this.onHandleFilterClick('has-overdue-work')}\n                    />\n                    <label htmlFor=\"has-overdue-work\">Has Overdue Work</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"unreviewed-flags\"\n                      checked={activeFilters.indexOf(\"unreviewed-flags\") !== -1}\n                      onChange={() => this.onHandleFilterClick('unreviewed-flags')}\n                    />\n                    <label htmlFor=\"unreviewed-flags\">Unreviewed Flags</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"sessions-this-week\"\n                      checked={activeFilters.indexOf(\"sessions-this-week\") !== -1}\n                      onChange={() => this.onHandleFilterClick('sessions-this-week')}\n                    />\n                    <label htmlFor=\"sessions-this-week\">Sessions This Week</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"session-today\"\n                      checked={activeFilters.indexOf(\"session-today\") !== -1}\n                      onChange={() => this.onHandleFilterClick('session-today')}\n                    />\n                    <label htmlFor=\"session-today\">Session Today</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"no-sessions\"\n                      checked={activeFilters.indexOf(\"no-sessions\") !== -1}\n                      onChange={() => this.onHandleFilterClick('no-sessions')}\n                    />\n                    <label htmlFor=\"no-sessions\">No Sessions Scheduled</label>\n                  </li>\n                </ul>\n                <ul className=\"filter-form_checkbox-list\">\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"entered-actual-score\"\n                      checked={activeFilters.indexOf(\"entered-actual-score\") !== -1}\n                      onChange={() => this.onHandleFilterClick('entered-actual-score')}\n                    />\n                    <label htmlFor=\"entered-actual-score\">Entered Actual Score</label>\n                  </li>\n                  <li>\n                    <input\n                      type=\"checkbox\"\n                      id=\"no-actual-score\"\n                      checked={activeFilters.indexOf(\"no-actual-score\") !== -1}\n                      onChange={() => this.onHandleFilterClick('no-actual-score')}\n                    />\n                    <label htmlFor=\"no-actual-score\">No Actual Score</label>\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"filter-inputs-holder\">\n              <div className=\"col s12 18\" style={{ marginTop: '-30px', marginBottom: '-10px' }}>\n\n                <div className=\"row mb-0\">\n                  <div className=\"col s12 m3\">\n                    <div className=\"search-field input-field\" style={{ marginTop: '50px' }}>\n                      <input\n                        type=\"search\"\n                        id=\"name_search\"\n                        className=\"input-control validate\"\n                        name=\"nameFilter\"\n                        value={nameFilter}\n                        onChange={(event) => this.handleFilterChange(event, 'nameFilter')}\n                      />\n                      <button\n                        type=\"submit\"\n                        className=\"search-button\"\n                        onClick={this.onFilterByName}\n                      >\n                        <i className=\"icon-search\"></i>\n                      </button>\n                      <label className={nameFilter.length ? 'label active' : 'label'} htmlFor=\"name_search\">Search</label>\n                    </div>\n                  </div>\n                  <div className=\"col s12 m3\">\n                    <div className=\"input-field\">\n                      <Dropdown\n                        value={getValueFromState(location, locationOptions)}\n                        onChange={(event) => this.handleFilterChange(event, 'location')}\n                        options={locationOptions}\n                        label=\"Location\"\n                        stateKey=\"location\"\n                        dropdownKey=\"location\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col s12 m3\">\n                    <div className=\"input-field\">\n                      <Dropdown\n                        value={getValueFromState(sort, sortOptions)}\n                        onChange={(event) => this.handleFilterChange(event, 'sort')}\n                        options={sortOptions}\n                        label=\"Sort\"\n                        stateKey=\"sort\"\n                        dropdownKey=\"sort\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col s12 14\">\n                  <div className=\"option-filters\">\n                    <div className=\"option-item clear\"><a href=\"#\" onClick={this.onClearFilters}>Clear Filters</a></div>\n                    <div className=\"option-item\">\n                      {/*  eslint-disable-next-line jsx-a11y/no-static-element-interactions  */}\n                      <span className=\"collapsible-header\" onClick={this.onToggleShowFilters}>\n                        <span className=\"open-text\">{open ? 'Hide Filters' : 'Open Filters'}</span>\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nFilterSection.propTypes = {\n  onSetSort: PropTypes.func.isRequired,\n  onSetFilteredState: PropTypes.func.isRequired,\n  onUnsetFilteredState: PropTypes.func.isRequired,\n  onSetFilteredLocationState: PropTypes.func.isRequired,\n  onUnsetFilteredLocationState: PropTypes.func.isRequired,\n  onSearchStudents: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchStudents: (filters) => dispatch(searchStudents(filters)),\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(FilterSection);\n","import React from \"react\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport PropTypes from \"prop-types\";\nimport { setOpenActivePage, setIsVisibleTopBar } from \"../index/actions\";\nimport { makeSelectActiveLesson, makeSelectUnitFilterOptions } from \"../index/selectors\";\nimport moment from \"moment\";\nimport DropDownMenu from '../DropDownMenu';\n\n\nclass ReadWorkBook extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // use initials to check against\n      initials: [],\n      dropdownIsOpen: false,\n    };\n  }\n    onSetActivePage = () => {\n      const { onSetOpenActivePage, onSetIsVisibleTopBar } = this.props;\n      onSetIsVisibleTopBar(true);\n      onSetOpenActivePage(\"\");\n    }\n\n    getUnitNameById = () => {\n      const { units } = this.props;\n      if (units && units.length !== 0) {\n        const unitIds = units.map(unit => unit.value);\n        const currentIndex = unitIds.findIndex(this.getUnitIndexMatchedUnitId);\n        const currentUnit = units[currentIndex];\n        return currentUnit.label;\n      }\n      return \"Undefind UnitName\";\n    }\n\n    getUnitIndexMatchedUnitId = unitId => unitId === this.props.lesson.unit_id;\n\n    onSetDropdown = () => this.setState({ dropdownIsOpen: !this.state.dropdownIsOpen });\n\n    render() {\n      const { user,\n        lesson: { name, starting_page, ending_page, completed_at, assignTime, assignment_date, due_date, dueTime, description } } = this.props;\n      const { studentInformation: { firstName, lastName } } = user;\n      return (\n        <div className=\"wrapper\">\n          <div\n            className=\"card-modal card-main card switcher-section grey lighten-5 modal\"\n            style={{\n              zIndex: \"1003\",\n              display: \"block\",\n              position: \"absolute\",\n              top: \"0\",\n              minHeight: \"100%\",\n              minWidth: \"100%\",\n            }}\n          >\n            <div className=\"header-box card-panel light-blue lighten-1 white-text\">\n              <div className=\"header-flex-row row mb-0\" style={{ width: '100%' }}>\n                <div className=\"col s12 m7 xl8\">\n                  <div className=\"header-holder\">\n                    <div className=\"header-col\">\n                      <div className=\"icon-col\">\n                        <i className=\"icon-books\" />\n                        <span className=\"text-icon\">Lesson</span>\n                      </div>\n                    </div>\n                    <div className=\"header-col\">\n                      <div className=\"card-panel-text\">\n                        <div className=\"text-small\">{this.getUnitNameById()}</div>\n                        <h1 className=\"text-large\">{name}</h1>\n                        <div className=\"text-small\">p.{starting_page}{ending_page > starting_page ? `-${ending_page}` : \"\"}(Reading)</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col s9 m4 xl3 position-mobile-left\">\n                  <div className=\"card-panel-text\">\n                    <h2 className=\"text-large\">{firstName} {lastName}</h2>\n                    {assignment_date && <dl className=\"text-small dl-horizontal\">\n                      <dt>Assigned:</dt>\n                      <dd><time dateTime=\"2019-01-06T08:00\">{`${moment(assignment_date).format(\"MM/DD/YY\")} at ${moment(assignTime).format('hh:mm')}`}</time></dd>\n                    </dl>}\n                    {due_date && <dl className=\"text-small dl-horizontal\">\n                      <dt>Due:</dt>\n                      <dd><time dateTime=\"2019-01-06T16:00\">{`${moment(due_date).format(\"MM/DD/YY\")} at ${moment(dueTime).format('hh:mm')}`}</time></dd>\n                    </dl>}\n                    {completed_at &&\n                                        <dl className=\"text-small dl-horizontal\">\n                                          <dt>Completed:</dt>\n                                          <dd><time dateTime=\"2019-09-01T06:59\">{`${moment(completed_at).format(\"MM/DD/YY\")} at ${moment(completed_at).format('hh:mm')}`}</time></dd>\n                                        </dl>}\n                  </div>\n                </div>\n                <div className=\"col s2 m1 right-align position-mobile-right\">\n                  <div className=\"dropdown-block\">\n                    <a\n                      className=\"dropdown-trigger btn\"\n                      href=\"#\"\n                      data-target=\"dropdown_top\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        this.onSetDropdown();\n                      }}\n                    ><i className=\"material-icons dots-icon\">more_vert</i></a>\n                    <DropDownMenu\n                      onOpenModal={this.props.onOpenModal}\n                      onAddCheckedLesson={this.props.onAddCheckedLesson}\n                      lesson={this.props.lesson}\n                      dropdownIsOpen={this.state.dropdownIsOpen}\n                      onSetDropdown={this.onSetDropdown}\n                      onCloseDetailModal={this.props.onCloseDetailModal}\n                      onCloseDropdown={this.props.onCloseDropdown}\n                      resetLessonSelections={this.props.resetLessonSelections}\n                      handleMarkAllFlagsReviewed={this.props.handleMarkAllFlagsReviewed}\n                      handleExcuseLessonLateness={this.props.handleExcuseLessonLateness}\n                    />\n                  </div>\n                  <div className=\"close-block\">\n                    <a href=\"#\" className=\"modal-close close\" onClick={this.onSetActivePage}><i className=\"icon-close-thin\" /></a>\n                  </div>\n                </div>\n              </div>\n              <div className=\"header-row-block card-panel-row row\">\n                <div className=\"col s12 right-align\">\n                  <h2 className=\"text-large\">DownloadPDF</h2>\n                </div>\n              </div>\n            </div>\n            <div className=\"content-section\">\n              <div className=\"content-section-holder\">\n                <div className=\"card-block\" style={{ maxWidth: 450, margin: \"0 auto\" }}>\n                  <h3>\n                                    Read page(s) {starting_page}\n                    {ending_page > starting_page\n                      ? `-${ending_page}`\n                      : \"\"}\n                  </h3>\n                  <div className=\"card\">\n                    <div className=\"card-content\">\n                      <h3>\n                                            I have read page(s) {starting_page}{ending_page > starting_page ? `-${ending_page}` : \"\"}\n                        {description}\n                      </h3>\n                      <div className=\"answers-list\">\n                        <h2 style={{ float: \"left\", marginRight: 20 }}>Student's Initials:</h2>\n                        <input type=\"text\" className=\"answer-input\" />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n}\n\nReadWorkBook.propTypes = {\n  onSetActivePage: PropTypes.func.isRequired,\n  onSetIsVisibleTopBar: PropTypes.func.isRequired,\n  lesson: PropTypes.object,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  lesson: makeSelectActiveLesson(),\n  units: makeSelectUnitFilterOptions(),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSetOpenActivePage: (activepage) => dispatch(setOpenActivePage(activepage)),\n  onSetIsVisibleTopBar: (value) => dispatch(setIsVisibleTopBar(value)),\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(ReadWorkBook);\n","import React from \"react\";\nimport update from 'immutability-helper';\nimport PropTypes from \"prop-types\";\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\n\nimport Portal from \"../../../../Portal\";\nimport ClickOffComponentWrapper from \"../.././../../ClickOffComponentWrapper\";\nimport Dropdown from \"../../../../FormComponents/Dropdown\";\nimport stateOptions from \"../../../../utils/stateOptions\";\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport {\n  updateStudentFirstName,\n  updateStudentLastName,\n  updateStudentAddress,\n  updateStudentCity,\n  updateStudentEmail,\n  updateStudentPhone,\n  updateStudentState,\n  updateStudentZip,\n} from \"../../../index/actions\";\n\nclass EditModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      originalStudent: {\n        id: \"\",\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [\n            {\n              locationNickname: '',\n              locationName: '',\n            },\n            {\n              locationNickname: '',\n              locationName: '',\n            },\n            {\n              locationNickname: '',\n              locationName: '',\n            },\n          ],\n        },\n      },\n      updatedStudent: {\n        id: \"\",\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: '',\n        },\n        emailAddress: {\n          email: '',\n        },\n        location: {\n          locations: [\n            {\n              locationNickname: '',\n              locationName: '',\n            },\n            {\n              locationNickname: '',\n              locationName: '',\n            },\n            {\n              locationNickname: '',\n              locationName: '',\n            },\n          ],\n        },\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { student: { id, active, studentInformation, contactInformation, emailAddress, location } = {} } = this.props;\n    const updatedStudent = { id, active, studentInformation, contactInformation, emailAddress, location };\n    const { originalStudent: originalStudentState } = this.state;\n    const originalStudent = update(originalStudentState, {\n      $merge: updatedStudent,\n    });\n    this.setState({ originalStudent, updatedStudent }); // eslint-disable-line\n  }\n\n  // This resets the component state to reflect the details of the next student the user clicks on\n  componentWillReceiveProps = (nextProps) => {\n    if ((!this.state.originalStudent || nextProps.student.id !== this.state.originalStudent.id)) {\n      const { student: { id, active, studentInformation, contactInformation, emailAddress, location } = {} } = nextProps;\n      const updatedStudent = { id, active, studentInformation, contactInformation, emailAddress, location };\n      const { originalStudent: originalStudentState } = this.state;\n      const originalStudent = update(originalStudentState, {\n        $merge: nextProps.student,\n      });\n      this.setState({ originalStudent, updatedStudent });\n    }\n  }\n\n  initialStudentMount = () => this.state.originalStudent.id !== this.props.student.id;\n\n  handleDetailsChange = (event, name, section) => {\n    const { updatedStudent: previousStudentState } = this.state;\n    const value = event.target ? event.target.value : event;\n    const updatedStudent = update(previousStudentState, {\n      [section]: { $merge: { [name]: value } },\n    });\n    this.setState({ updatedStudent });\n    this.handleUnitApiUpdate(name, value);\n  };\n\n  // Fired after every handleDetailsChange call to make the appropriate update api call\n  // eslint-disable-next-line consistent-return\n  handleUnitApiUpdate = async (name, value) => {\n    const {\n      onUpdateStudentFirstName,\n      onUpdateStudentLastName,\n      onUpdateStudentAddress,\n      onUpdateStudentCity,\n      onUpdateStudentEmail,\n      onUpdateStudentPhone,\n      onUpdateStudentState,\n      onUpdateStudentZip,\n    } = this.props;\n    const {\n      student: { id: student_id },\n    } = this.props;\n    switch (name) {\n      case \"firstName\":\n        return onUpdateStudentFirstName({\n          student_id,\n          first_name: value,\n        });\n      case \"lastName\":\n        return onUpdateStudentLastName({ student_id, last_name: value });\n      case \"email\":\n        return onUpdateStudentEmail({ student_id, email: value });\n      case \"phone\":\n        return onUpdateStudentPhone({ student_id, phone: value });\n      case \"addressLine1\":\n        return onUpdateStudentAddress({ student_id, address: value });\n      case \"city\":\n        return onUpdateStudentCity({ student_id, city: value });\n      case \"state\":\n        return onUpdateStudentState({ student_id, state: value });\n      case \"zipCode\":\n        return onUpdateStudentZip({ student_id, zip: value });\n      default:\n        break;\n    }\n  };\n\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n    const { updatedStudent: { id, active, studentInformation, contactInformation, emailAddress, location } } = this.state;\n    const { onSaveStudentChanges, onCloseEditModal } = this.props;\n    const postBody = { id, active, studentInformation, contactInformation, emailAddress, location };\n    onSaveStudentChanges(postBody);\n    onCloseEditModal();\n  }\n\n  render() {\n    const { open, onCloseEditModal, student: { id, active, studentInformation, contactInformation, emailAddress, location } } = this.props;\n    const {\n      updatedStudent: {\n        active: updatedActive, studentInformation: updatedStudentInformation, contactInformation: updatedContactInformation, emailAddress: updatedEmailAddress, location: updatedLocation,\n      },\n    } = this.state;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n            <ClickOffComponentWrapper onOuterClick={onCloseEditModal}>\n              <div\n                id=\"modal_user_edit\"\n                className=\"modal modal-custom modal-custom-large modal-gray\"\n              >\n                <form action=\"#\" className=\"custom-form\">\n                  <fieldset>\n                    <div className=\"card-modal card-main card grey lighten-3\">\n                      <div\n                        className=\"owner-box card-panel card-panel-title\"\n                        style={{ backgroundColor: \"#31837a\", color: \"#fff\" }}\n                      >\n                        <div className=\"card-panel-row row\">\n                          <div className=\"col s9\">\n                            <div className=\"user-block\">\n                              <div\n                                className=\"user-circle\"\n                                style={{\n                                  backgroundColor: \"#0085ce\",\n                                  color: \"#fff\",\n                                }}\n                              >\n                                <img\n                                  src=\"./static/images/img-owner01.jpg\"\n                                  alt=\"\"\n                                />\n                              </div>\n                              <div\n                                className=\"user-text\"\n                                style={{ color: \"#fff\" }}\n                              >\n                                <h4 className=\"h3\">Ownerly, Jennifer</h4>\n                                <a href=\"mailto:&#106;&#101;&#110;&#046;&#111;&#119;&#110;&#101;&#114;&#108;&#121;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;\">\n                                  &#106;&#101;&#110;&#046;&#111;&#119;&#110;&#101;&#114;&#108;&#121;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;\n                                </a>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col\">\n                            <span className=\"block-icon\">\n                              <i className=\"icon-owner\"></i>\n                              <span className=\"text-icon\">Owner</span>\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"card-content\">\n                        <div className=\"card-body\">\n                          <div className=\"row mb-0\">\n                            <div className=\"col s12 l6\">\n                              {/* form panel */}\n                              <div className=\"card-block\">\n                                <h3>Account Info</h3>\n                                <div className=\"card-main card\">\n                                  <div className=\"card-content\">\n                                    <div className=\"row mb-0\">\n                                      <div className=\"input-field col s12\">\n                                        <input\n                                          type=\"text\"\n                                          id=\"firstName\"\n                                          name=\"firstName\"\n                                          value={this.initialStudentMount() ? studentInformation.firstName : updatedStudentInformation.firstName}\n                                          onChange={event => this.handleDetailsChange(event, \"firstName\", \"studentInformation\")}\n                                        />\n                                        <label\n                                          className={studentInformation.firstName ? 'label active' : 'label'}\n                                          htmlFor=\"firstName\"\n                                        >\n                                          FirstName\n                                        </label>\n                                      </div>\n                                    </div>\n                                    <div className=\"row mb-0\">\n                                      <div className=\"input-field col s12\">\n                                        <input\n                                          type=\"text\"\n                                          id=\"lastName\"\n                                          name=\"lastName\"\n                                          value={this.initialStudentMount() ? studentInformation.lastName : updatedStudentInformation.lastName}\n                                          onChange={event => this.handleDetailsChange(event, \"lastName\", \"studentInformation\")}\n                                        />\n                                        <label\n                                          className={studentInformation.lastName ? 'label active' : 'label'}\n                                          htmlFor=\"lastName\"\n                                        >\n                                          LastName\n                                        </label>\n                                      </div>\n                                    </div>\n                                    <div className=\"row mb-0\">\n                                      <div className=\"input-field col s12\">\n                                        <input\n                                          type=\"text\"\n                                          id=\"email\"\n                                          name=\"email\"\n                                          value={this.initialStudentMount() ? emailAddress.email : updatedEmailAddress.email}\n                                          onChange={event => this.handleDetailsChange(event, \"email\", \"emailAddress\")}\n                                        />\n                                        <label\n                                          className={emailAddress.email ? 'label active' : 'label'}\n                                          htmlFor=\"email\"\n                                        >\n                                          Email\n                                        </label>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                              {/* form panel */}\n                              <div className=\"card-block\">\n                                <h3>Contact Info</h3>\n                                <div className=\"card-main card\">\n                                  <div className=\"card-content\">\n                                    <div className=\"row mb-0\">\n                                      <div className=\"input-field col s12\">\n                                        <input\n                                          type=\"tel\"\n                                          id=\"phone\"\n                                          name=\"phone\"\n                                          value={this.initialStudentMount() ? contactInformation.phone : updatedContactInformation.phone}\n                                          onChange={event => this.handleDetailsChange(event, \"phone\", \"contactInformation\")}\n                                        />\n                                        <label\n                                          className={contactInformation.phone ? 'label active' : 'label'}\n                                          htmlFor=\"phone\"\n                                        >\n                                          Phone\n                                        </label>\n                                      </div>\n                                    </div>\n                                    <div className=\"row mb-0\">\n                                      <div className=\"input-field col s12\">\n                                        <input\n                                          type=\"text\"\n                                          id=\"address\"\n                                          name=\"address\"\n                                          value={this.initialStudentMount() ? contactInformation.addressLine1 : updatedContactInformation.addressLine1}\n                                          onChange={event => this.handleDetailsChange(event, \"addressLine1\", \"contactInformation\")}\n                                        />\n                                        <label\n                                          className={contactInformation.addressLine1 ? 'label active' : 'label'}\n                                          htmlFor=\"address\"\n                                        >\n                                          Address\n                                          (optional)\n                                        </label>\n                                      </div>\n                                    </div>\n                                    <div className=\"row mb-0\">\n                                      <div className=\"input-field col s12\">\n                                        <input\n                                          type=\"text\"\n                                          id=\"city\"\n                                          value={this.initialStudentMount() ? contactInformation.city : updatedContactInformation.city}\n                                          name=\"city\"\n                                          onChange={event => this.handleDetailsChange(event, \"city\", \"contactInformation\")}\n                                        />\n                                        <label className={contactInformation.city ? 'label active' : 'label'} htmlFor=\"city\">\n                                          City\n                                          (optional)\n                                        </label>\n                                      </div>\n                                    </div>\n                                    <div className=\"row mb-0\">\n                                      <div className=\"col s12 m6 l5\">\n                                        <div className=\"input-field\">\n                                          <Dropdown\n                                            value={this.initialStudentMount() ? getValueFromState(contactInformation.state, stateOptions) : getValueFromState(updatedContactInformation.state, stateOptions)}\n                                            name=\"state\"\n                                            onChange={event => this.handleDetailsChange(event, \"state\", \"contactInformation\")}\n                                            options={stateOptions}\n                                            label=\"State\"\n                                            stateKey=\"state\"\n                                            dropdownKey=\"state\"\n                                          />\n                                        </div>\n                                      </div>\n                                      <div className=\"col s12 m6 l7\">\n                                        <div className=\"input-field\">\n                                          <input\n                                            type=\"tel\"\n                                            id=\"zipCode\"\n                                            name=\"zipCode\"\n                                            value={this.initialStudentMount() ? contactInformation.zipCode : updatedContactInformation.zipCode}\n                                            onChange={event => this.handleDetailsChange(event, \"zipCode\", \"contactInformation\")}\n                                          />\n                                          <label\n                                            className={contactInformation.zipCode ? 'label active' : 'label'}\n                                            htmlFor=\"zipCode\"\n                                          >\n                                            zipCode\n                                            (optional)\n                                          </label>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"col s12 l6\">\n                              <div className=\"card-block\">\n                                <h3>Location(s)</h3>\n                                <div className=\"card-main card-location card card-large\">\n                                  <div\n                                    className=\"card-panel card-panel-location\"\n                                    style={{\n                                      backgroundColor: \"#62b771\",\n                                      color: \"#fff\",\n                                    }}\n                                  >\n                                    <div className=\"card-panel-row row\">\n                                      <div className=\"col s9\">\n                                        <h3 className=\"h4 truncate\">\n                                          Tutor Doctor\n                                        </h3>\n                                        <h4 className=\"sub-title\">\n                                          Tutor Doctor - Austin, TX\n                                        </h4>\n                                      </div>\n                                      <div className=\"col s3\">\n                                        <div className=\"row icons-row\">\n                                          <div className=\"col\">\n                                            <span className=\"block-icon\">\n                                              <i className=\"icon-location\"></i>\n                                              <span className=\"text-icon\">\n                                                Location\n                                              </span>\n                                            </span>\n                                          </div>\n                                          <div className=\"dropdown-block col\">\n                                            <a className=\"dropdown-trigger btn\" href=\"#\">\n                                              <i className=\"material-icons dots-icon\">\n                                                more_vert\n                                              </i>\n                                            </a>\n                                            <ul id=\"dropdown105\" className=\"dropdown-content dropdown-wide\">\n                                              <li>\n                                                <a\n                                                  href=\"#modal_location_edit\"\n                                                  className=\"modal-trigger link-block\"\n                                                >\n                                                  Edit\n                                                </a>\n                                              </li>\n                                              <li>\n                                                <a href=\"#!\">Clone</a>\n                                              </li>\n                                              <li>\n                                                <a href=\"#!\">Delete</a>\n                                              </li>\n                                            </ul>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                                <div className=\"card-main card-location card card-large\">\n                                  <div\n                                    className=\"card-panel card-panel-location\"\n                                    style={{\n                                      backgroundColor: \"#62b771\",\n                                      color: \"#fff\",\n                                    }}\n                                  >\n                                    <div className=\"card-panel-row row\">\n                                      <div className=\"col s9\">\n                                        <h3 className=\"h4 truncate\">\n                                          Tutor Doctor\n                                        </h3>\n                                        <h4 className=\"sub-title\">\n                                          Tutor Doctor - Dallas, TX\n                                        </h4>\n                                      </div>\n                                      <div className=\"col s3\">\n                                        <div className=\"row icons-row\">\n                                          <div className=\"col\">\n                                            <span className=\"block-icon\">\n                                              <i className=\"icon-location\"></i>\n                                              <span className=\"text-icon\">\n                                                Location\n                                              </span>\n                                            </span>\n                                          </div>\n                                          <div className=\"dropdown-block col\">\n                                            <a className=\"dropdown-trigger btn\" href=\"#\">\n                                              <i className=\"material-icons dots-icon\">\n                                                more_vert\n                                              </i>\n                                            </a>\n                                            <ul id=\"dropdown106\" className=\"dropdown-content dropdown-wide\">\n                                              <li>\n                                                <a href=\"#modal_location_edit\" className=\"modal-trigger link-block\">\n                                                  Edit\n                                                </a>\n                                              </li>\n                                              <li>\n                                                <a href=\"#!\">Clone</a>\n                                              </li>\n                                              <li>\n                                                <a href=\"#!\">Delete</a>\n                                              </li>\n                                            </ul>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                                <div className=\"add-box\">\n                                  <div className=\"add-box-holder\">\n                                    <a className=\"btn-floating waves-effect waves-light green lighten-1\">\n                                      <i className=\"material-icons\">add</i>\n                                    </a>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"modal-footer\">\n                          <a href=\"#!\" className=\"waves-effect waves-teal btn-flat pink-text text-darken-1\">\n                            Delete\n                          </a>\n                          <a\n                            href=\"#!\"\n                            className=\"modal-close waves-effect waves-teal btn-flat grey-text text-darken-1\"\n                            onClick={onCloseEditModal}\n                          >\n                            Cancel\n                          </a>\n                          <a href=\"#\" className=\"btn\" onClick={this.onSubmit}>\n                            Save\n                          </a>\n                        </div>\n                      </div>\n                    </div>\n                  </fieldset>\n                </form>\n              </div>\n            </ClickOffComponentWrapper>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 999;\n            }\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            #modal_Location1 {\n              border-radius: 6px;\n            }\n            .modal {\n              display: block;\n              background-color: white;\n              position: absolute;\n              top: 10%;\n              right: 10%;\n              left: 10%;\n              box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14),\n                0 9px 46px 8px rgba(0, 0, 0, 0.12),\n                0 11px 15px -7px rgba(0, 0, 0, 0.2);\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n          `}\n        </style>\n      </Portal>\n    );\n  }\n}\n\nEditModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onCloseEditModal: PropTypes.func.isRequired,\n  student: PropTypes.object.isRequired,\n  onSaveStudentChanges: PropTypes.func.isRequired,\n  onUpdateStudentFirstName: PropTypes.func.isRequired,\n  onUpdateStudentLastName: PropTypes.func.isRequired,\n  onUpdateStudentAddress: PropTypes.func.isRequired,\n  onUpdateStudentCity: PropTypes.func.isRequired,\n  onUpdateStudentEmail: PropTypes.func.isRequired,\n  onUpdateStudentPhone: PropTypes.func.isRequired,\n  onUpdateStudentState: PropTypes.func.isRequired,\n  onUpdateStudentZip: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onUpdateStudentFirstName: (value) => dispatch(updateStudentFirstName(value)),\n    onUpdateStudentLastName: (value) => dispatch(updateStudentLastName(value)),\n    onUpdateStudentAddress: (value) => dispatch(updateStudentAddress(value)),\n    onUpdateStudentCity: (value) => dispatch(updateStudentCity(value)),\n    onUpdateStudentEmail: (value) => dispatch(updateStudentEmail(value)),\n    onUpdateStudentPhone: (value) => dispatch(updateStudentPhone(value)),\n    onUpdateStudentState: (value) => dispatch(updateStudentState(value)),\n    onUpdateStudentZip: (value) => dispatch(updateStudentZip(value)),\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport default compose(withConnect)(EditModal);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\nimport EditModal from './components/EditModal';\nconst data = (current = 0, target = 0, initial = 0) => ({\n  datasets: [{\n    data: [current - initial, (target - initial) - (current - initial)],\n    backgroundColor: [\n      '#0085ce',\n      '#eaeaea',\n    ],\n  }],\n});\n\nclass StudentCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editModalOpen: false,\n      cloneModalOpen: false,\n      showOwnerModalOpen: false,\n      deleteModalOpen: false,\n      activateAccountModalOpen: false,\n      assignInstructorModalOpen: false,\n    };\n  }\n\n    onOpenEditModal = () => {\n      this.props.onCloseDropdown();\n      this.setState({ editModalOpen: true });\n    }\n    onCloseEditModal = () => this.setState({ editModalOpen: false })\n\n    handleDropdownClick = (event) => {\n      const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n      event.preventDefault();\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n      return onSetDropdown(index);\n    }\n\n    render() {\n      const { onHandleStudentCard, onSaveStudentChanges, onDeleteStudent, onCloneStudent, index, dropdownIndex, student, student: { id, active, tutor, testScores: { initialScore, currentScore }, courseContext: { targetScore }, studentInformation: { firstName, lastName },\n        emailAddress: { email }, stats }, dropdownIsOpen } = this.props;\n      const { editModalOpen } = this.state;\n      return (\n        <React.Fragment>\n          <EditModal\n            open={editModalOpen}\n            onSaveStudentChanges={onSaveStudentChanges}\n            onCloseEditModal={this.onCloseEditModal}\n            student={student}\n            handleDetailsChange={this.handleDetailsChange}\n          />\n\n          <div className=\"card-main-col col s12 m8 l7 xl5\" id={id}>\n            <div\n              className={\n                active\n                  ? \"card-main card-location card card-large\"\n                  : \"card-main card-location card-disabled card-large card\"\n              }\n            >\n              <div\n                className=\"owner-box card-panel card-panel-panel card-panel-large\"\n                style={{\n                  backgroundColor: active ? \"#0085ce\" : \"#9b9b9b\",\n                  color: \"#fff\",\n                }}\n              >\n                <div className=\"card-panel-row row\">\n                  <div className=\"col s9\">\n                    <div className=\"user-block\">\n                      <div\n                        className=\"user-circle\"\n                        style={{\n                          backgroundColor: active ? \"#14b14b\" : \"#808080\",\n                          color: \"#fff\",\n                          height: \"45px\",\n                        }}\n                      >\n                        <img src=\"#\" alt=\"\" />\n                      </div>\n                      <div className=\"user-text\" style={{ color: \"#fff\" }}>\n                        <h4 className=\"h3\">\n                          <a\n                            href=\"#\"\n                            value={student}\n                            onClick={() => onHandleStudentCard({ index })}\n                          >\n                            {lastName}, {firstName}\n                          </a>\n                        </h4>\n                        <a href={`mailto:${email}`}>{email}</a>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col s2 right-align\">\n                    <span className=\"block-icon\">\n                      <i className=\"icon-user\"></i>\n                      <span className=\"text-icon\">Student</span>\n                    </span>\n                  </div>\n                  <div className=\"col s1 right-align\">\n                    <div className=\"row icons-row\">\n                      <div className=\"dropdown-block col\">\n                        <a\n                          href=\"#\"\n                          className=\"dropdown-trigger btn\"\n                          data-target=\"dropdown01\"\n                          onClick={this.handleDropdownClick}\n                        >\n                          <i className=\"material-icons dots-icon\">more_vert</i>\n                        </a>\n                        <If condition={dropdownIsOpen && dropdownIndex === index}>\n                          <ul\n                            id=\"dropdown01\"\n                            className=\"dropdown-content dropdown-wide\"\n                            style={{\n                              display: \"block\",\n                              opacity: \"1\",\n                              transform: \"scaleX(1) scaleY(1)\",\n                            }}\n                          >\n                            <li>\n                              <a\n                                href=\"#\"\n                                className=\"modal-trigger link-block\"\n                                onClick={this.onOpenEditModal}\n                              >\n                              Edit\n                              </a>\n                            </li>\n                            <li>\n                              <a href=\"#!\" onClick={() => onCloneStudent(index)}>\n                              Clone\n                              </a>\n                            </li>\n                            <li>\n                              <a href=\"#!\">Show Owner</a>\n                            </li>\n                            <li>\n                              <a href=\"#!\" onClick={() => onDeleteStudent(index)}>\n                              Delete\n                              </a>\n                            </li>\n                          </ul>\n                        </If>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* card content */}\n              <div className=\"card-content\" ref={this.studentCard}>\n                <div className=\"row d-flex align-items-center mb-0\">\n                  <div className=\"col s12 m6\">\n                    <div className=\"chart-container chart-container-large\">\n                      <div className=\"chart-holder\">\n                        <If condition={active}>\n                          <Doughnut\n                            data={() =>\n                              data(currentScore, targetScore, initialScore)\n                            }\n                            height={210}\n                            options={{\n                              circumference: 1.45 * Math.PI,\n                              rotation: -3.85,\n                              cutoutPercentage: 60,\n                              tooltips: false,\n                            }}\n                          />\n                        </If>\n                        <span\n                          className=\"chart-value\"\n                          style={{ backgroundColor: \"#0085ce\", bottom: \"7px\" }}\n                        >\n                          <span\n                            data-count-up\n                            data-start-val={initialScore}\n                            data-end-val={currentScore}\n                            data-duration=\"1\"\n                          >\n                            {currentScore}\n                          </span>\n                        </span>\n                      </div>\n                      <div className=\"chart-row\">\n                        <div className=\"chart-col chart-start\">\n                          <span className=\"amount\" style={{ color: \"#0085ce\" }}>\n                            {initialScore}\n                          </span>\n                          <span className=\"amount-text\">&nbsp; initial</span>\n                        </div>\n                        <div className=\"chart-col chart-end\">\n                          <span className=\"amount\">{targetScore}</span>\n                          <span className=\"amount-text\">&nbsp; target</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col s12 m6\">\n                    <ul className=\"points-list-bordered\">\n                      <li className=\"style-green\">\n                        <span className=\"badge-circle\">\n                          {stats.complete}\n                        </span>\n                        <span className=\"point-text\">complete</span>\n                      </li>\n                      <li className=\"style-red\">\n                        <span className=\"badge-circle\">\n                          {stats.overdue}\n                        </span>\n                        <span className=\"point-text\">overdue</span>\n                      </li>\n                      <li className=\"style-orange\">\n                        <span className=\"badge-circle\">\n                          {stats.practice_tests}\n                        </span>\n                        <span className=\"point-text\">practice tests</span>\n                      </li>\n                      <li className=\"style-blue-lighter\">\n                        <span className=\"badge-circle\">\n                          <span>{stats.sessions_complete}</span>{\" \"}\n                          <span className=\"of\">\n                          of {stats.total_sessions}\n                          </span>\n                        </span>\n                        <span className=\"point-text\">sessions</span>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n                <div className=\"card-inner-row\">\n                  <div className=\"row-holder\">\n                    <ul className=\"category-list\">\n                      <li className=\"category-box\">\n                        <span className=\"category-badge badge-purple\"></span>\n                        <span className=\"category-text\">{tutor}</span>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          {/* </div> */}\n        </React.Fragment>\n      );\n    }\n}\n\nStudentCard.propTypes = {\n  student: PropTypes.object.isRequired,\n  onHandleStudentCard: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  index: PropTypes.number.isRequired,\n  onDeleteStudent: PropTypes.func.isRequired,\n  onCloneStudent: PropTypes.func.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  dropdownIndex: PropTypes.number,\n  onSaveStudentChanges: PropTypes.func.isRequired,\n};\n\nexport default StudentCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LcoationCard from '../../../../../Location/components/LocationCard';\n\nconst Location = ({ locations, onOpenLocationModal, onRemoveLocation }) => (\n  <React.Fragment>\n    <div className=\"card-block\">\n      <h3>Location(s)</h3>\n\n      {locations.length > 0 && (\n        locations.map((location, index) => (\n          <LcoationCard location={location} onRemoveLocation={() => onRemoveLocation(index)} key={location.id} />\n        ))\n      )}\n    </div>\n    <div className=\"add-box\">\n      <div className=\"add-box-holder\">\n        <a href=\"#\" className=\"btn-floating waves-effect waves-light green lighten-1\" onClick={onOpenLocationModal}><i className=\"material-icons\">add</i></a>\n      </div>\n    </div>\n  </React.Fragment>\n);\n\nLocation.propTypes = {\n  locations: PropTypes.array.isRequired,\n  onRemoveLocation: PropTypes.func.isRequired,\n  onOpenLocationModal: PropTypes.func.isRequired,\n};\n\nexport default Location;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Portal from '../../../Portal';\nimport Dropdown from '../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../utils/getValueFromState';\nimport stateOptions from '../../../utils/stateOptions';\nimport Location from './components/Location';\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass StudentModal extends React.Component {\n  render() {\n    const { state, open, handleChange, onSave, onClose, onOpenLocationModal, onRemoveLocation, onDeleteNewStudent } = this.props;\n    return (\n      <Portal selector=\"#modal\">\n        {open && (\n          <div className=\"overlay\">\n\n            <div id=\"modal_user_edit\" className=\"modal modal-custom modal-custom-large modal-gray\">\n              <form action=\"#\" className=\"custom-form\" >\n                <fieldset>\n                  <div className=\"card-modal card-main card grey lighten-3\">\n                    <div className=\"owner-box card-panel card-panel-title\" style={{ backgroundColor: \"#31837a\", color: \"#fff\" }}>\n                      <div className=\"card-panel-row row\">\n                        <div className=\"col s9\">\n                          <div className=\"user-block\">\n                            <div className=\"user-circle\" style={{ backgroundColor: \"#0085ce\", color: \"#fff\" }}>\n                              <img src=\"./static/images/img-owner01.jpg\" alt=\"\" />\n                            </div>\n                            <div className=\"user-text\" style={{ color: \"#fff\" }}>\n                              <h4 className=\"h3\">Ownerly, Jennifer</h4>\n                              <a href=\"mailto:&#106;&#101;&#110;&#046;&#111;&#119;&#110;&#101;&#114;&#108;&#121;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;\">&#106;&#101;&#110;&#046;&#111;&#119;&#110;&#101;&#114;&#108;&#121;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;</a>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"col\">\n                          <span className=\"block-icon\">\n                            <i className=\"icon-owner\"></i>\n                            <span className=\"text-icon\">Owner</span>\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"card-content\">\n                      <div className=\"card-body\">\n                        <div className=\"row mb-0\">\n                          <div className=\"col s12 l6\">\n\n                            {/* form panel */}\n                            <div className=\"card-block\">\n                              <h3>Account Info</h3>\n                              <div className=\"card-main card\">\n                                <div className=\"card-content\">\n                                  <div className=\"row mb-0\">\n                                    <div className=\"input-field col s12\">\n                                      <input\n                                        type=\"text\"\n                                        id=\"firstName\"\n                                        name=\"firstName\"\n                                        value={state.studentInformation.firstName}\n                                        onChange={(event) => handleChange(event, 'firstName', 'studentInformation')}\n                                      />\n                                      <label className=\"label\" htmlFor=\"firstName\">First Name*</label>\n                                    </div>\n                                  </div>\n                                  <div className=\"row mb-0\">\n                                    <div className=\"input-field col s12\">\n                                      <input\n                                        type=\"text\"\n                                        id=\"lastName\"\n                                        name=\"lastName\"\n                                        value={state.studentInformation.lastName}\n                                        onChange={(event) => handleChange(event, 'lastName', 'studentInformation')}\n                                      />\n                                      <label className=\"label\" htmlFor=\"lastName\">Last Name*</label>\n                                    </div>\n                                  </div>\n                                  <div className=\"row mb-0\">\n                                    <div className=\"input-field col s12\">\n                                      <input\n                                        type=\"text\"\n                                        id=\"email\"\n                                        name=\"email\"\n                                        value={state.emailAddress.email}\n                                        onChange={(event) => handleChange(event, 'email', 'emailAddress')}\n                                      />\n                                      <label className=\"label\" htmlFor=\"email\">Email Address (optional)</label>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            {/* form panel */}\n                            <div className=\"card-block\">\n                              <h3>Contact Info</h3>\n                              <div className=\"card-main card\">\n                                <div className=\"card-content\">\n                                  <div className=\"row mb-0\">\n                                    <div className=\"input-field col s12\">\n                                      <input\n                                        type=\"tel\"\n                                        id=\"phone\"\n                                        name=\"phone\"\n                                        value={state.contactInformation.phone}\n                                        onChange={(event) => handleChange(event, 'phone', 'contactInformation')}\n                                      />\n                                      <label className=\"label\" htmlFor=\"phone\">Phone (optional)</label>\n                                    </div>\n                                  </div>\n                                  <div className=\"row mb-0\">\n                                    <div className=\"input-field col s12\">\n                                      <input\n                                        type=\"text\"\n                                        id=\"address\"\n                                        name=\"address\"\n                                        value={state.contactInformation.addressLine}\n                                        onChange={(event) => handleChange(event, 'addressLine', 'contactInformation')}\n                                      />\n                                      <label className=\"label\" htmlFor=\"address\">Street Address (optional)</label>\n                                    </div>\n                                  </div>\n                                  <div className=\"row mb-0\">\n                                    <div className=\"input-field col s12\">\n                                      <input\n                                        type=\"text\"\n                                        id=\"city\"\n                                        name=\"city\"\n                                        value={state.contactInformation.city}\n                                        onChange={(event) => handleChange(event, 'city', 'contactInformation')}\n                                      />\n                                      <label className=\"label\" htmlFor=\"city\">City (optional)</label>\n                                    </div>\n                                  </div>\n                                  <div className=\"row mb-0\">\n                                    <div className=\"col s12 m6 l5\">\n                                      <div className=\"input-field\">\n                                        <Dropdown\n                                          value={getValueFromState(state.contactInformation.state, stateOptions)}\n                                          onChange={(event) => handleChange(event, 'state', 'contactInformation')}\n                                          options={stateOptions}\n                                          label=\"State\"\n                                          stateKey=\"state\"\n                                          dropdownKey=\"state\"\n                                        />\n                                      </div>\n                                    </div>\n                                    <div className=\"col s12 m6 l7\">\n                                      <div className=\"input-field\">\n                                        <input\n                                          type=\"tel\"\n                                          name=\"zipCode\"\n                                          id=\"zipCode\"\n                                          value={state.contactInformation.zipCode}\n                                          onChange={(event) => handleChange(event, 'zipCode', 'contactInformation')}\n                                        />\n                                        <label className=\"label\" htmlFor=\"zipCode\">Zip (optional)</label>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col s12 l6\">\n                            <Location locations={state.location.locations} onOpenLocationModal={onOpenLocationModal} onRemoveLocation={onRemoveLocation} />\n                            <div className=\"modal-footer\">\n                              <a href=\"#!\" className=\"waves-effect waves-teal btn-flat pink-text text-darken-1\" onClick={onDeleteNewStudent}>Delete</a>\n                              <a href=\"#!\" className=\"modal-close waves-effect waves-teal btn-flat grey-text text-darken-1\" onClick={onClose}>Cancel</a>\n                              <a href=\"#\" className=\"btn\" onClick={onSave}>Save</a>\n                            </div>\n                          </div>\n                          {!this.props.hasRequiredFields && <p className=\"save-message\">Please fill out the required fields before submitting.</p>}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </fieldset>\n              </form>\n            </div>\n          </div>\n        )}\n        <style jsx>\n          {`\n            .overlay {\n              position: fixed;\n              background-color: rgba(0, 0, 0, 0.7);\n              top: 0;\n              right: 0;\n              bottom: 0;\n              left: 0;\n              z-index: 1999;\n            }\n            .card-modal {\n              margin: 0;\n              border-radius: 6px;\n            }\n            .save-message {\n              color: red;\n              float: right;\n            }\n            #modal_Location1 {\n              border-radius: 6px;\n            }\n            .modal {\n              display: block;\n              background-color: white;\n              position: absolute;\n              top: 10%;\n              right: 10%;\n              left: 10%;\n              box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12), 0 11px 15px -7px rgba(0, 0, 0, 0.2);\n            }\n            .modal-custom {\n              opacity: 1;\n              visibility: visible;\n            }\n            .modal-footer {\n              background-color: white;\n            }\n          `}\n        </style>\n      </Portal >\n    );\n  }\n}\n\nStudentModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  state: PropTypes.object.isRequired,\n  onOpenLocationModal: PropTypes.func.isRequired,\n  onRemoveLocation: PropTypes.func.isRequired,\n  onDeleteNewStudent: PropTypes.func.isRequired,\n};\n\nexport default StudentModal;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst StudentNavBar = ({ activePage, onSetActivePage }) => (\n  <nav className=\"nav-additional\">\n    <ul className=\"menu-additional\">\n      <li>\n        <a\n          className={activePage === 'summary' ? 'active' : ''}\n          onClick={() => onSetActivePage('summary')}\n          href=\"#\"\n        >\n          Summary\n        </a>\n      </li>\n      <li>\n        <a\n          className={activePage === 'calendar' ? 'active' : ''}\n          onClick={() => onSetActivePage('calendar')}\n          href=\"#\"\n        >\n          Calendar\n        </a>\n      </li>\n      <li>\n        <a\n          className={activePage === 'lessons' ? 'active' : ''}\n          onClick={() => onSetActivePage('lessons')}\n          href=\"#\"\n        >\n          Lessons\n        </a>\n      </li>\n      <li>\n        <a\n          className={activePage === 'worksheets' ? 'active' : ''}\n          onClick={() => onSetActivePage('worksheets')}\n          href=\"#\"\n        >\n          Worksheets\n        </a>\n      </li>\n      <li>\n        <a\n          className={activePage === 'test' ? 'active' : ''}\n          onClick={() => onSetActivePage('test')}\n          href=\"#\"\n        >\n          Tests\n        </a>\n      </li>\n      <li>\n        <a\n          className={activePage === 'account' ? 'active' : ''}\n          onClick={() => onSetActivePage('account')}\n          href=\"#\"\n        >\n          Account\n        </a>\n      </li>\n    </ul>\n  </nav>\n);\n\nStudentNavBar.propTypes = {\n  activePage: PropTypes.string.isRequired,\n  onSetActivePage: PropTypes.func.isRequired,\n};\n\nexport default StudentNavBar;\n","import {\n  FETCH_STUDENTS,\n  SET_STUDENTS,\n  SEARCH_STUDENTS,\n  DELETE_STUDENT,\n  UPDATE_STUDENT_ADDRESS,\n  UPDATE_STUDENT_CITY,\n  UPDATE_STUDENT_EMAIL,\n  UPDATE_STUDENT_FIRSTNAME,\n  UPDATE_STUDENT_LASTNAME,\n  UPDATE_STUDENT_PHONE,\n  UPDATE_STUDENT_STATE,\n  UPDATE_STUDENT_ZIP,\n  SET_STUDENTS_CALENDAR_ASSIGN_LESSONS_MODAL_OPEN,\n  SET_STUDENTS_CALENDAR_ASSIGN_WORKSHEETS_MODAL_OPEN,\n  SET_STUDENTS_CALENDAR_CALENDAR_ROWS,\n  SET_IS_VISIBLE_TOP_BAR,\n  SET_ACTIVE_TEST_SCORES,\n  GET_TESTS,\n  SET_STUDENT_COMPLETED_TESTS,\n  SET_STUDENT_OVERDUE_TESTS,\n  SET_STUDENT_ASSIGNED_TESTS,\n  SET_STUDENT_TESTS,\n  SET_STUDENT_SECTIONS,\n  FETCH_STUDENT_TEST_SECTIONS,\n  SET_ACTIVE_STUDENT_TEST_ID,\n  FETCH_LESSON_LIST,\n  FETCH_STUDENT_LESSON_LIST,\n  CHECKED_LESSON,\n  SELECT_ALL_LESSONS,\n  UNSELECT_ALL_LESSONS,\n  ADD_CHECKED_LESSON,\n  REMOVE_CHECKED_LESSON,\n  FETCH_UNITS,\n  SET_UNIT_FILTER_OPTIONS,\n  SET_ACTIVE_STUDENT_TOKEN,\n  ASSIGN_STUDENT_LESSON,\n  RESET_STUDENT_LESSONS,\n  UNASSIGN_STUDENT_LESSON,\n  RESCHEDULE_STUDENT_LESSONS,\n  ADD_ALL_LESSONS,\n  REMOVE_ALL_LESSONS,\n  SET_ACTIVE_LESSON,\n  SET_OPEN_ACTIVE_PAGE,\n  UPDATE_STUDENT_ACTIVATION,\n  FETCH_SUBJECTS,\n  EXCUSE_STUDENT_LATENESS,\n  FILTER_LESSONS,\n  FLAG_STUDENT_LESSON_PROBLEM,\n  SET_TESTS,\n  SET_ACTIVE_STUDENT,\n  ADD_LESSON_ANSWER,\n  DELETE_STUDENT_TEST,\n  UPDATE_TEST_FLAG,\n  ASSIGN_NEW_TEST,\n  ADD_NEW_TEST_TO_STUDENT_TESTS,\n  SET_ESSAY_SCORE,\n  ADD_STUDENT_ANSWER_TO_TEST,\n  UPDATE_TEST_STATUS,\n  UPDATE_FLAG_STATUS,\n  FETCH_STUDENT_TESTS_SUCCESSFUL,\n  ADD_FREE_RESPONSE_ANSWER_TO_TEST,\n  SEND_ERROR_MESSAGE,\n  RESET_ERROR_MESSAGE,\n  GET_TEST_SCORES,\n} from \"./constants\";\n\nexport function fetchStudents() {\n  return {\n    type: FETCH_STUDENTS,\n  };\n}\n\nexport function fetchUnits() {\n  return {\n    type: FETCH_UNITS,\n  };\n}\n\nexport function fetchSubjects() {\n  return {\n    type: FETCH_SUBJECTS,\n  };\n}\n\nexport function setUnitFilterOptions(options) {\n  return {\n    type: SET_UNIT_FILTER_OPTIONS,\n    options,\n  };\n}\n\nexport function searchStudents(filters) {\n  return {\n    type: SEARCH_STUDENTS,\n    filters,\n  };\n}\n\nexport function fetchStudentTests(user) {\n  return {\n    type: GET_TESTS,\n    user,\n  };\n}\n\nexport function fetchStudentTestSections(postBody) {\n  return {\n    type: FETCH_STUDENT_TEST_SECTIONS,\n    postBody,\n  };\n}\n\nexport function setStudentSections(sections) {\n  return {\n    type: SET_STUDENT_SECTIONS,\n    sections,\n  };\n}\n\nexport function setActiveStudentToken(token) {\n  return {\n    type: SET_ACTIVE_STUDENT_TOKEN,\n    token,\n  };\n}\n\nexport function setActiveStudentTestId(studentTestId) {\n  return {\n    type: SET_ACTIVE_STUDENT_TEST_ID,\n    studentTestId,\n  };\n}\n\nexport function setStudentTests(tests) {\n  return {\n    type: SET_STUDENT_TESTS,\n    tests,\n  };\n}\n\nexport function setStudentCompletedTests(tests) {\n  return {\n    type: SET_STUDENT_COMPLETED_TESTS,\n    tests,\n  };\n}\nexport function setStudentOverDueTests(tests) {\n  return {\n    type: SET_STUDENT_OVERDUE_TESTS,\n    tests,\n  };\n}\nexport function setStudentAssignedTests(tests) {\n  return {\n    type: SET_STUDENT_ASSIGNED_TESTS,\n    tests,\n  };\n}\n\nexport function setStudents(students) {\n  return {\n    type: SET_STUDENTS,\n    students,\n  };\n}\n\nexport function deleteStudent(id) {\n  return {\n    type: DELETE_STUDENT,\n    id,\n  };\n}\n\nexport function updateStudentAddress(address) {\n  return {\n    type: UPDATE_STUDENT_ADDRESS,\n    address,\n  };\n}\n\nexport function updateStudentCity(city) {\n  return {\n    type: UPDATE_STUDENT_CITY,\n    city,\n  };\n}\n\nexport function updateStudentEmail(email) {\n  return {\n    type: UPDATE_STUDENT_EMAIL,\n    email,\n  };\n}\n\nexport function updateStudentFirstName(firstName) {\n  return {\n    type: UPDATE_STUDENT_FIRSTNAME,\n    firstName,\n  };\n}\n\nexport function updateStudentLastName(lastName) {\n  return {\n    type: UPDATE_STUDENT_LASTNAME,\n    lastName,\n  };\n}\n\nexport function updateStudentPhone(phone) {\n  return {\n    type: UPDATE_STUDENT_PHONE,\n    phone,\n  };\n}\n\nexport function updateStudentState(state) {\n  return {\n    type: UPDATE_STUDENT_STATE,\n    state,\n  };\n}\n\nexport function updateStudentZip(zip) {\n  return {\n    type: UPDATE_STUDENT_ZIP,\n    zip,\n  };\n}\n\nexport function setAssignLessonsModalOpen(value) {\n  return {\n    type: SET_STUDENTS_CALENDAR_ASSIGN_LESSONS_MODAL_OPEN,\n    value,\n  };\n}\n\nexport function setAssignWorksheetModalOpen(value) {\n  return {\n    type: SET_STUDENTS_CALENDAR_ASSIGN_WORKSHEETS_MODAL_OPEN,\n    value,\n  };\n}\n\nexport function setCalendarRows(rows) {\n  return {\n    type: SET_STUDENTS_CALENDAR_CALENDAR_ROWS,\n    rows,\n  };\n}\n\nexport function setIsVisibleTopBar(value) {\n  return {\n    type: SET_IS_VISIBLE_TOP_BAR,\n    value,\n  };\n}\n\nexport function setActiveTestScores(scores) {\n  return {\n    type: SET_ACTIVE_TEST_SCORES,\n    scores,\n  };\n}\n\nexport function setEssayScore(score) {\n  return {\n    type: SET_ESSAY_SCORE,\n    score,\n  };\n}\n\nexport const getLessonList = () => ({\n  type: FETCH_LESSON_LIST,\n});\n\nexport const getStudentLessonList = (postBody) => ({\n  type: FETCH_STUDENT_LESSON_LIST,\n  postBody,\n});\n\nexport const checkLesson = (id) => ({\n  type: CHECKED_LESSON,\n  id,\n});\nexport const checkAllLessons = (mappedLessons) => ({\n  type: SELECT_ALL_LESSONS,\n  mappedLessons,\n});\n\nexport const unCheckAllLessons = (mappedLessons) => ({\n  type: UNSELECT_ALL_LESSONS,\n  mappedLessons,\n});\n\nexport const addCheckedLesson = (lessonId) => ({\n  type: ADD_CHECKED_LESSON,\n  lessonId,\n});\n\nexport const removeCheckedLesson = (lessonId) => ({\n  type: REMOVE_CHECKED_LESSON,\n  lessonId,\n});\n\nexport const assignLessonToStudent = (lesson) => ({\n  type: ASSIGN_STUDENT_LESSON,\n  lesson,\n});\n\nexport const resetStudentLessons = (lessons) => ({\n  type: RESET_STUDENT_LESSONS,\n  lessons,\n});\n\nexport const unAssignLessonToStudent = (lesson) => ({\n  type: UNASSIGN_STUDENT_LESSON,\n  lesson,\n});\n\nexport const rescheduleStudentLessons = (studentLessonData) => ({\n  type: RESCHEDULE_STUDENT_LESSONS,\n  studentLessonData,\n});\nexport const addAllLessons = (mappedLessons) => ({\n  type: ADD_ALL_LESSONS,\n  mappedLessons,\n});\n\nexport const removeAllLessons = (mappedLessons) => ({\n  type: REMOVE_ALL_LESSONS,\n  mappedLessons,\n});\n\nexport const setActiveLesson = (activeLesson) => ({\n  type: SET_ACTIVE_LESSON,\n  activeLesson,\n});\n\nexport const setOpenActivePage = (value) => ({\n  type: SET_OPEN_ACTIVE_PAGE,\n  value,\n});\nexport const updateStudentActivation = (studentInfo) => ({\n  type: UPDATE_STUDENT_ACTIVATION,\n  studentInfo,\n});\n\nexport const excuseStudentLateness = (lessons) => ({\n  type: EXCUSE_STUDENT_LATENESS,\n  lessons,\n});\n\nexport const filterLessons = (filters) => ({\n  type: FILTER_LESSONS,\n  filters,\n});\n\nexport const flagStudentLessonProblem = (lesson) => ({\n  type: FLAG_STUDENT_LESSON_PROBLEM,\n  lesson,\n});\n\nexport const setTests = (tests) => ({\n  type: SET_TESTS,\n  tests,\n});\n\n\nexport const setActiveStudent = (student) => ({\n  type: SET_ACTIVE_STUDENT,\n  student,\n});\n\nexport const answerStudentLessonProblem = (payload) => ({\n  type: ADD_LESSON_ANSWER,\n  payload,\n});\n\nexport const deleteStudentTest = (studentTestId, studentId, testType) => ({\n  type: DELETE_STUDENT_TEST,\n  studentTestId,\n  studentId,\n  testType,\n});\n\nexport const updateTestFlag = (studentTestId, studentId) => ({\n  type: UPDATE_TEST_FLAG,\n  studentTestId,\n  studentId,\n});\n\nexport const assignNewTest = (newTest) => ({\n  type: ASSIGN_NEW_TEST,\n  newTest,\n});\n\nexport const addNewTestToStudentTests = (newTest) => ({\n  type: ADD_NEW_TEST_TO_STUDENT_TESTS,\n  newTest,\n});\n\nexport const addStudentAnswerToTest = (payload, sectionId) => ({\n  type: ADD_STUDENT_ANSWER_TO_TEST,\n  payload,\n  sectionId,\n});\n\nexport const updateTestStatus = (payload, currentStatus, studentId) => ({\n  type: UPDATE_TEST_STATUS,\n  payload,\n  currentStatus,\n  studentId,\n});\n\nexport const updateFlagStatus = (payload, status, question) => ({\n  type: UPDATE_FLAG_STATUS,\n  payload,\n  status,\n  question,\n});\n\nexport function setFetchStudentTestsStatus(status) {\n  return {\n    type: FETCH_STUDENT_TESTS_SUCCESSFUL,\n    status,\n  };\n}\n\nexport const addFreeResponseAnswerToTest = (payload, sectionId) => ({\n  type: ADD_FREE_RESPONSE_ANSWER_TO_TEST,\n  payload,\n  sectionId,\n});\n\nexport const sendErrorMessage = (propertyName, message) => ({\n  type: SEND_ERROR_MESSAGE,\n  propertyName,\n  message,\n});\n\nexport const resetErrorMessage = (propertyName) => ({\n  type: RESET_ERROR_MESSAGE,\n  propertyName,\n});\n\nexport const getTestScores = (payload) => ({\n  type: GET_TEST_SCORES,\n  payload,\n});\n","/* eslint-disable camelcase */\n/* eslint-disable jsx-control-statements/jsx-jcs-no-undef */\nconst API_URL = process.env.API_URL;\nimport { getToken } from \"../../../utils/AuthService\";\n\nexport const fetchStudentsApi = () =>\n  fetch(`${API_URL}/api/students`, {\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .then(({ data }) => {\n      const formattedStudents = data.students.map(student => {\n        const { user_address } = student;\n        return ({\n          id: student.id,\n          active: student.active,\n          studentInformation: {\n            firstName: student.first_name,\n            lastName: student.last_name,\n          },\n          contactInformation: {\n            phone: user_address ? user_address.phone : \"\",\n            addressLine1: user_address ? user_address.address : \"\",\n            addressLine2: \"\",\n            city: user_address ? user_address.city : \"\",\n            state: user_address ? user_address.state : \"\",\n            zipCode: user_address ? user_address.zip : \"\",\n          },\n          emailAddress: {\n            email: student.email,\n          },\n          location: {\n            locations: student.user_locations,\n          },\n          stats: student.stats,\n          tutor: !student.hasOwnProperty(\"tutor\") ? \"\" : student.tutor,\n          testScores: {\n            initialScore: !student.hasOwnProperty(\"testScores\")\n              ? \"0\"\n              : student.testScores.initialScore,\n            currentScore: !student.hasOwnProperty(\"testScores\")\n              ? \"0\"\n              : student.testScores.currentScore,\n          },\n          // courseContext: {\n          //   targetScore: !student.hasOwnProperty(\"courseContext\")\n          //     ? \"0\"\n          //     : student.courseContext.targetScore\n          // }\n          courseContext: {\n            courseStartDateOption: \"secondOption\",\n            courseStartDate: \"\",\n            courseEndDateOption: \"secondOption\",\n            courseEndDate: \"\",\n            targetTestDate: \"12/12/2019\",\n            targetScore: \"1400\",\n            highSchool: \"Everglades High\",\n            graduationYear: \"2018\",\n          },\n          courseProgress: {\n            startDate: \"6/03/18\",\n            testDate: \"10/14/18\",\n            progress: \"77\",\n            improvement: \"82\",\n            lessons: \"73\",\n            instruction: \"68\",\n            practiceTests: \"47\",\n          },\n          overdueWork: {\n            lessons: \"12\",\n            worksheets: \"3\",\n            quizzes: \"1\",\n            practiceTests: \"5\",\n          },\n          summary: {\n            questionsAnswered: \"791\",\n            videoWatched: \"416\",\n            notesTaken: \"52\",\n            totalTimeLoggedIn: \"220\",\n            lastLogIn: \"3:12\",\n            loginTimeCode: \"pm\",\n            onTimePercentage: \"77\",\n          },\n          testScores: {\n            initialScore: \"1040\",\n            currentScore: \"1300\",\n            compositeScore: {\n              reading: \"83\",\n              writing: \"31\",\n              math: \"105\",\n              composite: \"218\",\n            },\n            subjectScores: {\n              reading: \"58\",\n              writing: \"44\",\n              math: \"91\",\n              composite: \"195\",\n            },\n          },\n          strengthsAndWeaknesses: {\n            reading: {\n              correctAnswers: \"32\",\n              totalAnswers: \"52\",\n            },\n            writing: {\n              correctAnswers: \"35\",\n              totalAnswers: \"52\",\n            },\n            math: {\n              correctAnswers: \"37\",\n              totalAnswers: \"52\",\n            },\n          },\n        });\n      });\n      return formattedStudents;\n    });\n\nexport const searchStudentsApi = filters => {\n  let queryString = `search=${filters.name}&location=${filters.location}`;\n  switch (filters.sort) {\n    case \"lastNameDescending\":\n      queryString += \"sort_by_field=last_name\";\n      break;\n    case \"firstNameDescending\":\n      queryString += \"sort_by_field=first_name\";\n      break;\n    case \"lastNameAscending\":\n      queryString += \"sort_by_field=last_name&sort_by_asc=true\";\n      break;\n    case \"firstNameAscending\":\n      queryString += \"sort_by_field=first_name&sort_by_asc=true\";\n      break;\n    default:\n      queryString += \"\";\n  }\n  return fetch(`${API_URL}/api/students?${queryString}`, {\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .then(({ data }) => {\n      if (data.students.length < 1) {\n        return [];\n      }\n      const formattedStudents = data.students.map(student => {\n        const { user_address } = student;\n        return ({\n          id: student.id,\n          active: student.active,\n          studentInformation: {\n            firstName: student.first_name,\n            lastName: student.last_name,\n          },\n          contactInformation: {\n            phone: user_address ? user_address.phone : \"\",\n            addressLine1: user_address ? user_address.address : \"\",\n            addressLine2: \"\",\n            city: user_address ? user_address.city : \"\",\n            state: user_address ? user_address.state : \"\",\n            zipCode: user_address ? user_address.zip : \"\",\n          },\n          emailAddress: {\n            email: student.email,\n          },\n          location: {\n            locations: student.user_locations,\n          },\n          stats: student.stats,\n          tutor: !student.hasOwnProperty(\"tutor\") ? \"\" : student.tutor,\n          testScores: {\n            initialScore: !student.hasOwnProperty(\"testScores\")\n              ? \"0\"\n              : student.testScores.initialScore,\n            currentScore: !student.hasOwnProperty(\"testScores\")\n              ? \"0\"\n              : student.testScores.currentScore,\n          },\n          courseContext: {\n            targetScore: !student.hasOwnProperty(\"courseContext\")\n              ? \"0\"\n              : student.courseContext.targetScore,\n          },\n        });\n      });\n      return formattedStudents;\n    })\n    .catch(err => err);\n};\n\nexport const createStudentApi = student =>\n  fetch(`${API_URL}/api/commands/create-student`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(student),\n  })\n    .then(res => res.json())\n    .then(result => result)\n    .catch(err => err);\nexport const updateStudentActivationApi = body =>\n  fetch(`${API_URL}/api/commands/update-student-activation`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.status)\n    .catch(err => err);\n\nexport const updateStudentAddressApi = body =>\n  fetch(`${API_URL}/api/commands/update-student-address`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const updateStudentCityApi = body =>\n  fetch(`${API_URL}/api/commands/update-student-city`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const updateStudentEmailApi = body =>\n  fetch(`${API_URL}/api/commands/update-student-email`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const updateStudentFirstNameApi = body =>\n  fetch(`${API_URL}/api/commands/update-student-first-name`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const updateStudentLastNameApi = body =>\n  fetch(`${API_URL}/api/commands/update-student-last-name`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const updateStudentPhoneApi = body =>\n  fetch(`${API_URL}/api/commands/update-student-phone`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const updateStudentStateApi = body =>\n  fetch(`${API_URL}/api/commands/update-student-state`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const updateStudentZipApi = body =>\n  fetch(`${API_URL}/api/commands/update-student-zip`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const updateStudentTestDueDate = body =>\n  fetch(`${API_URL}/api/commands/update-student-test-due-date`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  }).catch(err => err);\n\nexport const updateStudentTestAssignmentDate = body =>\n  fetch(`${API_URL}/api/commands/update-student-test-assignment-date`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  }).catch(err => err);\n\nexport const deleteStudentApi = id =>\n  fetch(`${API_URL}/api/commands/delete-student`, {\n    method: \"DELETE\",\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify({ student_id: id }),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const assignTestToStudentApi = test =>\n  fetch(`${API_URL}/api/commands/assign-test-to-student`, {\n    method: \"POST\",\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(test),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const fetchTestsByStudentIdApi = student_id =>\n  fetch(`${API_URL}/api/students/${student_id}/student_tests`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .then(({ data }) => ({ data }))\n    .catch(err => err);\n\nexport const fetchTestByTestIdApi = (student_id, test_id) => {\n  fetch(`${API_URL}/api/students/${student_id}/student_tests/${test_id}`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .catch(err => err);\n};\n\nexport const fetchStudentTestSectionsApi = (student_id, student_test_id) =>\n  fetch(`${API_URL}/api/students/${student_id}/student_tests/${student_test_id}/sections`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .then(({ data }) => data.sections)\n    .catch(err => err);\n\nexport const fetchStudentTestSectionProblemsApi = (student_id, student_test_id, section_id, student_token) =>\n  fetch(`${API_URL}/api/students/${student_id}/student_tests/${student_test_id}/sections/${section_id}/problems`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const addStudentAnswerToTestApi = answer =>\n  fetch(`${API_URL}/api/commands/add-student-answer-to-test`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(answer),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const addStudentTestQuestionFlagApi = (body, studentToken) =>\n  fetch(`${API_URL}/api/commands/add-student-test-question-flag`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const fetchStudentTestScoreApi = (student_id, student_test_id) =>\n  fetch(`${API_URL}/api/students/${student_id}/student_tests/${student_test_id}/score`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Allow-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .catch(err => err);\nexport const updateStudentTestQuestionFlagStatusApi = (body) =>\n  fetch(`${API_URL}/api/commands/update-student-test-question-flag-status`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\n\nexport const fetchLessonListApi = () =>\n  fetch(`${API_URL}/api/lessons`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .then(({ data }) => {\n      const lessons = data.lessons;\n      return lessons;\n    });\n\nexport const fetchUnitsApi = () =>\n  fetch(`${API_URL}/api/units`,\n    {\n      headers: {\n        Accept: \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${getToken()}`,\n      },\n    })\n    .then(res => res.json())\n    .then(({ data }) => {\n      const { units = [] } = data;\n      const formattedUnits = units.reduce((finalArr, currentUnit) => {\n        const { id, name, reference_id } = currentUnit;\n        const newUnit = {\n          label: name,\n          value: id,\n        };\n        finalArr.push(newUnit);\n        return finalArr;\n      }, []);\n      return { formattedUnits };\n    })\n    .catch(err => console.warn('err', err));\n\nexport const filterLessonListApi = (filters) => {\n  const { unitFilter, nameFilter } = filters;\n  const unitString = unitFilter.length ? `unit_id=${unitFilter}&` : '';\n  const searchString = nameFilter.length ? `search=${nameFilter.toLowerCase().replace(/\\s/g, '+')}&` : '';\n  const filterQuery = `${searchString}${unitString}`;\n  return fetch(`${API_URL}/api/lessons?${filterQuery}`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then((res) => res.json())\n    .then(({ data }) => {\n      const lessons = data.lessons;\n      return lessons;\n    })\n    .catch(err => err);\n};\nexport const fetchSubjectsApi = () =>\n  fetch(`${API_URL}/api/subjects`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then((res) => res.json())\n    .then(({ data }) => data.subjects)\n    .catch((err) => console.warn(\"err\", err));\n\nexport const assignLessonToStudentApi = lesson => {\n  fetch(`${API_URL}/api/commands/assign-lesson-to-student`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(lesson),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n};\n\n\nexport const fetchStudentLessonListApi = (student, studentToken) =>\n  fetch(`${API_URL}/api/students/${student}/student_lessons`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .then(res => res)\n    .then(({ data }) => {\n      const studentLessons = data;\n      return studentLessons;\n    });\n\nexport const resetStudentLessonsApi = (lessons) => {\n  fetch(`${API_URL}/api/commands/reset-student-lessons`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(lessons),\n  })\n    .then((res) => res.json())\n    .catch((err) => err);\n};\nexport const unAssignLessonFromStudentApi = lessons => {\n  fetch(`${API_URL}/api/commands/unassign-lesson-from-student`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(lessons),\n  })\n    .then((res) => res.json())\n    .catch((err) => err);\n};\n\nexport const rescheduleStudentLessonsApi = (lesson) =>\n  fetch(`${API_URL}/api/commands/reschedule-student-lessons`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(lesson),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const fetchStudentLessonApi = (student_id, lesson_id) =>\n  fetch(`${API_URL}/api/students/${student_id}/student_lessons/${lesson_id}`, {\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then((res) => res.json())\n    .then((res) => res)\n    .then(({ data }) => data);\n\nexport const fetchStudentLessonSectionApi = (student_id, lesson_id, section_id) =>\n  fetch(`${API_URL}/api/students/${student_id}/student_lessons/${lesson_id}/sections/${section_id}`, {\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then((res) => res.json())\n    .then((res) => res)\n    .then(({ data }) => data);\n\nexport const addStudentLessonProblemFlagApi = (body) =>\n  fetch(`${API_URL}/api/commands/flag-student-lesson-problem`, {\n    method: 'POST',\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then((res) => res.json())\n    .catch((err) => err);\n\nexport const addVideoWatchedTime = (body) =>\n  fetch(`${API_URL}/api/commands/watch-student-lesson-problem-video`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then((res) => res.json())\n    .catch((err) => err);\n\nexport const fetchAllTestsApi = () =>\n  fetch(`${API_URL}/api/tests`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .then(({ data }) => ({ data }))\n    .catch(err => err);\nexport const addStudentLessonProblemAnswerApi = (body) =>\n  fetch(`${API_URL}/api/commands/add-student-lesson-problem-answer`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  }).then((res) => res.status);\n\nexport const updateStudentTestStatusApi = (body) =>\n  fetch(`${API_URL}/api/commands/update-student-test-status`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\n\nexport const excuseStudentLessonLatenessApi = (body) =>\n  fetch(`${API_URL}/api/commands/excuse-student-lesson-lateness`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then((res) => res.json())\n    .catch((err) => err);\n\nexport const updateStudentTestSectionStatusApi = (body) =>\n  fetch(`${API_URL}/api/commands/update-student-test-section-status`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then(res => res.json())\n    .catch(err => err);\n\nexport const rescoreStudentLessonApi = (body) =>\n  fetch(`${API_URL}/api/commands/rescore-student-lesson`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then((res) => res)\n    .catch((err) => err);\n\nexport const deleteStudentTestApi = (body) =>\n  fetch(`${API_URL}/api/commands/delete-student-test`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(body),\n  })\n    .then((res) => res)\n    .catch((err) => err);\n\nexport const updateStudentEssayScoreApi = (scores) =>\n  fetch(`${API_URL}/api/commands/update-student-test-essay-score`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n    body: JSON.stringify(scores),\n  })\n    .then(res => res)\n    .catch(err => err);\n","export const FETCH_STUDENTS = \"FETCH_STUDENTS\";\nexport const SEARCH_STUDENTS = \"SEARCH_STUDENTS\";\nexport const SET_STUDENTS = \"SET_STUDENTS\";\n\nexport const DELETE_STUDENT = \"DELETE_STUDENT\";\nexport const UPDATE_STUDENT_ADDRESS = \"UPDATE_STUDENT_ADDRESS\";\nexport const UPDATE_STUDENT_CITY = \"UPDATE_STUDENT_CITY\";\nexport const UPDATE_STUDENT_EMAIL = \"UPDATE_STUDENT_EMAIL\";\nexport const UPDATE_STUDENT_FIRSTNAME = \"UPDATE_STUDENT_FIRSTNAME\";\nexport const UPDATE_STUDENT_LASTNAME = \"UPDATE_STUDENT_LASTNAME\";\nexport const UPDATE_STUDENT_PHONE = \"UPDATE_STUDENT_PHONE\";\nexport const UPDATE_STUDENT_STATE = \"UPDATE_STUDENT_STATE\";\nexport const UPDATE_STUDENT_ZIP = \"UPDATE_STUDENT_ZIP\";\nexport const SET_STUDENTS_CALENDAR_ASSIGN_LESSONS_MODAL_OPEN =\n  \"SET_STUDENTS_CALENDAR_ASSIGN_LESSONS_MODAL_OPEN\";\nexport const SET_STUDENTS_CALENDAR_ASSIGN_WORKSHEETS_MODAL_OPEN =\n  \"SET_STUDENTS_CALENDAR_ASSIGN_WORKSHEETS_MODAL_OPEN\";\nexport const SET_STUDENTS_CALENDAR_CALENDAR_ROWS = \"SET_STUDENTS_CALENDAR_CALENDAR_ROWS\";\nexport const SET_IS_VISIBLE_TOP_BAR = \"SET_IS_VISIBLE_TOP_BAR\";\n\nexport const SET_ACTIVE_TEST_SCORES = \"SET_ACTIVE_TEST_SCORES\";\nexport const SET_ESSAY_SCORE = \"SET_ESSAY_SCORE\";\nexport const GET_TESTS = \"GET_TESTS\";\nexport const SET_STUDENT_TESTS = \"SET_STUDENT_TESTS\";\nexport const SET_STUDENT_COMPLETED_TESTS = \"SET_STUDENT_COMPLETED_TESTS\";\nexport const SET_STUDENT_OVERDUE_TESTS = \"SET_STUDENT_OVERDUE_TESTS\";\nexport const SET_STUDENT_ASSIGNED_TESTS = \"SET_STUDENT_ASSIGNED_TESTS\";\nexport const GET_TEST_SCORES = \"GET_TEST_SCORES\";\n\nexport const FETCH_STUDENT_TEST_SECTIONS = \"FETCH_STUDENT_TEST_SECTIONS\";\nexport const SET_STUDENT_SECTIONS = \"SET_STUDENT_SECTIONS\";\n\nexport const FETCH_LESSON_LIST = 'FETCH_LESSON_LIST';\nexport const FETCH_LESSON_LIST_SUCCESS = 'FETCH_LESSON_LIST_SUCCESS';\nexport const FETCH_LESSON_LIST_FAIL = 'FETCH_LESSON_LIST_FAIL';\n\nexport const FETCH_STUDENT_LESSON_LIST = 'FETCH_STUDENT_LESSON_LIST';\nexport const FETCH_STUDENT_LESSSON_LIST_SUCCESS = 'FETCH_STUDENT_LESSON_LIST_SUCCUSS';\nexport const FETCH_STUDENT_LESSON_LIST_FAIL = 'FETCH_STUDENT_LESSON_LIST_FAIL';\n\nexport const MERGE_STUDENT_LESSON_LISTS = 'MERGE_STUDENT_LESSON_LISTS';\n\nexport const CHECKED_LESSON = 'CHECKED_LESSON';\nexport const SELECT_ALL_LESSONS = 'SELECT_ALL_LESSONS';\nexport const UNSELECT_ALL_LESSONS = 'UNSELECT_ALL_LESSONS';\n\nexport const ADD_CHECKED_LESSON = 'ADD_CHECKED_LESSON';\nexport const REMOVE_CHECKED_LESSON = 'REMOVE_CHECKED_LESSON';\n\nexport const ASSIGN_STUDENT_LESSON = 'ASSIGN_STUDENT_LESSON';\nexport const ASSIGN_STUDENT_LESSON_SUCCESS = 'ASSIGN_STUDENT_LESSON_SUCCESS';\nexport const ASSIGN_STUDENT_LESSON_FAIL = 'ASSIGN_STUDENT_LESSON_FAIL';\n\n\nexport const FETCH_UNITS = 'FETCH_UNITS';\nexport const SET_UNIT_FILTER_OPTIONS = 'SET_UNIT_FILTER_OPTIONS';\nexport const SET_ACTIVE_STUDENT_TEST_ID = 'SET_ACTIVE_STUDENT_TEST_ID';\n\nexport const SET_ACTIVE_STUDENT_TOKEN = 'SET_ACTIVE_STUDENT_TOKEN';\n\nexport const RESET_STUDENT_LESSONS = 'RESET_STUDENT_LESSONS';\nexport const RESET_STUDENT_LESSONS_SUCCESS = 'RESET_STUDENT_LESSONS_SUCCESS';\nexport const RESET_STUDENT_LESSONS_FAIL = 'RESET_STUDENT_LESSONS_FAIL';\nexport const UNASSIGN_STUDENT_LESSON = 'UNASSIGN_STUDENT_LESSON';\nexport const UNASSIGN_STUDENT_LESSON_SUCCESS = 'UNASSIGN_STUDENT_LESSON_SUCCESS';\nexport const UNASSIGN_STUDENT_LESSON_FAIL = 'UNASSIGN_STUDENT_LESSON_FAIL';\nexport const RESCHEDULE_STUDENT_LESSONS = 'RESCHEDULE_STUDENT_LESSONS';\nexport const RESCHEDULE_STUDENT_LESSONS_SUCCESS = 'RESCHEDULE_STUDENT_LESSONS_SUCCESS';\nexport const RESCHEDULE_STUDENT_LESSONS_FAIL = 'RESCHEDULE_STUDENT_LESSONS_FAIL';\nexport const ADD_ALL_LESSONS = 'ADD_ALL_LESSONS';\nexport const REMOVE_ALL_LESSONS = 'REMOVE_ALL_LESSONS';\n\nexport const SET_ACTIVE_LESSON = 'SET_ACTIVE_LESSON';\n\nexport const SET_OPEN_ACTIVE_PAGE = 'SET_OPEN_ACTIVE_PAGE';\nexport const UPDATE_STUDENT_ACTIVATION = 'UPDATE_STUDENT_ACTIVATION';\nexport const UPDATE_STUDENT_ACTIVATION_SUCCESS = 'UPDATE_STUDENT_ACTIVATION_SUCCESS';\nexport const UPDATE_STUDENT_ACTIVATION_FAIL = 'UPDATE_STUDENT_ACTIVATION_FAIL';\nexport const FETCH_SUBJECTS = 'FETCH_SUBJECTS';\nexport const FETCH_SUBJECTS_SUCCESS = 'FETCH_SUBJECTS_SUCCESS';\nexport const SET_OPEN_ANSWERSHEET_STATUS = 'SET_OPEN_ANSWERSHEET_STATUS';\nexport const FETCH_STUDENT_LESSON_LIST_DEBOUNCE = 'FETCH_STUDENT_LESSON_LIST_DEBOUNCE';\nexport const EXCUSE_STUDENT_LATENESS = 'EXCUSE_STUDENT_LATENESS';\nexport const SET_EXCUSE_STUDENT_LATENESS = 'SET_EXCUSE_STUDENT_LATENESS';\nexport const FILTER_LESSONS = 'FILTER_LESSONS';\nexport const FLAG_STUDENT_LESSON_PROBLEM = 'FLAG_STUDENT_LESSON_PROBLEM';\n\nexport const SET_TESTS = \"SET_TESTS\";\n\nexport const SET_ACTIVE_STUDENT = 'SET_ACTIVE_STUDENT';\n\n\nexport const SET_STUDENT_TEST_SECTION_PROBLEMS = 'SET_STUDENT_TEST_SECTION_PROBLEMS';\nexport const ADD_LESSON_ANSWER = 'ADD_LESSON_ANSWER';\nexport const ADD_LESSON_ANSWER_SUCCESS = 'ADD_LESSON_ANSWER_SUCCESS';\nexport const DELETE_STUDENT_TEST = 'DELETE_STUDENT_TEST';\nexport const GET_TESTS_DEBOUNCE = \"GET_TESTS_DEBOUNCE\";\nexport const UPDATE_TEST_FLAG = 'UPDATE_TEST_FLAG';\nexport const REMOVE_TEST = 'REMOVE_TEST';\nexport const ASSIGN_NEW_TEST = 'ASSIGN_NEW_TEST';\nexport const ADD_NEW_TEST_TO_STUDENT_TESTS = 'ADD_NEW_TEST_TO_STUDENT_TESTS';\nexport const ADD_STUDENT_ANSWER_TO_TEST = \"ADD_STUDENT_ANSWER_TO_TEST\";\nexport const UPDATE_STUDENT_TEST_ANSWER = 'UPDATE_STUDENT_TEST_ANSWER';\nexport const UPDATE_TEST_STATUS = 'UPDATE_TEST_STATUS';\nexport const UPDATE_TEST_STATUS_SUCCESS = 'UPDATE_TEST_STATUS_SUCCESS';\nexport const REMOVE_TEST_FROM_PREV_LIST = 'REMOVE_TEST_FROM_PREV_LIST';\nexport const ADD_TEST_TO_COMPLETED = 'ADD_TEST_TO_COMPLETED';\nexport const REMOVE_TEST_FROM_LIST = 'REMOVE_TEST_FROM_LIST';\nexport const UPDATE_FLAG_STATUS = 'UPDATE_FLAG_STATUS';\nexport const UPDATE_FLAG_STATUS_SUCCESS = 'UPDATE_FLAG_STATUS_SUCCESS';\nexport const FETCH_STUDENT_TESTS_SUCCESSFUL = 'FETCH_STUDENT_TESTS_SUCCESSFUL';\nexport const ADD_FREE_RESPONSE_ANSWER_TO_TEST = 'ADD_FREE_RESPONSE_ANSWER_TO_TEST';\nexport const SEND_ERROR_MESSAGE = 'SEND_ERROR_MESSAGE';\nexport const RESET_ERROR_MESSAGE = 'RESET_ERROR_MESSAGE';\n","import { createSelector } from \"reselect\";\n\nconst selectStudentsDomain = state => state.studentReducer;\n\nconst makeSelectStudentPageState = () =>\n  createSelector(selectStudentsDomain, substate => (substate ? substate.toJS() : {}));\n\nconst makeSelectStudents = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.students);\n\n// Lessons\nconst makeSelectGetLessonList = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.lessonList);\n\nconst makeSelectGetStudentLessonList = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.studentLessonList);\n\nconst makeSelectCheckedLessons = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.checkedLessons);\n\nconst makeSelectAssignLessonsModalOpen = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.assignLessonsModalOpen);\n\nconst makeSelectAssignWorkSheetsModalOpen = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.assignWorkSheetsModalOpen);\n\nconst makeSelectCalendarRows = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.calendarRows);\n\nconst makeSelectIsVisibleTopBar = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.isVisibleTopBar);\n\nconst makeSelectActiveTestScores = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.activeTestScores);\n\nconst makeSelectOverDueStudentTests = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.overdueStudentTests);\nconst makeSelectCompletedStudentTests = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.completedStudentTests);\nconst makeSelectAssignedStudentTests = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.assignedStudentTests);\n\nconst makeSelectStudentTests = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.studentTests);\nconst makeSelectStudentSections = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.sections);\nconst makeSelectActiveStudentTestId = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.activeStudentTestId);\nconst makeSelectUnitFilterOptions = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.unitFilterOptions);\nconst makeSelectActiveStudentToken = () =>\n  createSelector(makeSelectStudentPageState(), substate => substate.activeStudentToken);\n\nconst makeSelectActiveLesson = () => createSelector(makeSelectStudentPageState(), substate => substate.activeLesson);\nconst makeSelectOpenAnswerSheetStatus = () => createSelector(makeSelectStudentPageState(), substate => substate.openAnswerSheet);\nconst makeSelectSubjects = () => createSelector(makeSelectStudentPageState(), substate => substate.subjects);\n\nconst makeSelectOpenActivePage = () => createSelector(makeSelectStudentPageState(), substate => substate.activeShowPage);\n\nconst makeSelectTests = () => createSelector(makeSelectStudentPageState(), substate => substate.tests);\n\nconst makeSelectActiveStudent = () => createSelector(makeSelectStudentPageState(), substate => substate.activeStudent);\n\nconst makeSelectFetchStudentTestsStatus = () => createSelector(makeSelectStudentPageState(), substate => substate.studentTestsFetchedStatus);\n\nconst makeSelectErrorMessages = () => createSelector(makeSelectStudentPageState(), substate => substate.errorMessages);\n\nexport default selectStudentsDomain;\nexport {\n  makeSelectStudentPageState,\n  makeSelectAssignLessonsModalOpen,\n  makeSelectAssignWorkSheetsModalOpen,\n  makeSelectCalendarRows,\n  makeSelectStudents,\n  makeSelectIsVisibleTopBar,\n  makeSelectActiveTestScores,\n  makeSelectOverDueStudentTests,\n  makeSelectCompletedStudentTests,\n  makeSelectAssignedStudentTests,\n  makeSelectStudentTests,\n  makeSelectStudentSections,\n  makeSelectActiveStudentTestId,\n  makeSelectGetLessonList,\n  makeSelectUnitFilterOptions,\n  makeSelectActiveStudentToken,\n  makeSelectCheckedLessons,\n  makeSelectGetStudentLessonList,\n  makeSelectActiveLesson,\n  makeSelectOpenAnswerSheetStatus,\n  makeSelectSubjects,\n  makeSelectOpenActivePage,\n  makeSelectTests,\n  makeSelectActiveStudent,\n  makeSelectFetchStudentTestsStatus,\n  makeSelectErrorMessages,\n};\n","import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport ToastWrapper from './styles';\n\nclass Toast extends React.Component { // eslint-disable-line\n  render() {\n    return (\n      <ToastWrapper>\n        <ToastContainer\n          position=\"bottom-center\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnVisibilityChange\n          draggable\n          pauseOnHover\n        />\n      </ToastWrapper>\n    );\n  }\n}\n\nexport default Toast;\n","import styled from 'styled-components';\n\nconst ToastWrapper = styled.div`\n  .update-success {\n    background-color: #31837a;\n  }\n  .progress-bar-success {\n    background-color: #fff;\n  }\n`;\n\nexport default ToastWrapper;\n","const API_URL = process.env.API_URL;\nimport { getToken } from '../../../utils/AuthService';\n\nexport const _checkStatus = (response) => {\n  // raises an error in case response status is not a success\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n};\n\nexport const oAuthTokenApi = (data) =>\n  fetch(`${API_URL}/api/login`, {\n    method: 'POST',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  })\n    .then(response => response.json())\n    .then(data => data)\n    .catch(err => err);\n\nexport const fetchCurrentUserApi = () =>\n  fetch(`${API_URL}/api/users`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(res => res.json())\n    .then(({ data }) => data)\n    .catch(err => err);\nexport const LogoutApi = () =>\n  fetch(`${API_URL}/api/logout`, {\n    method: 'POST',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n    .then(_checkStatus)\n    .then(response => response.json())\n    .then(data => data)\n    .catch(err => err);\nexport default [\n  oAuthTokenApi,\n  fetchCurrentUserApi,\n  LogoutApi,\n];\n","import { createSelector } from 'reselect';\n\nconst selectUserDomain = (state) => state.userReducer;\n\nconst makeSelectUserPageState = () => createSelector(\n  selectUserDomain,\n  (substate) => substate ? substate.toJS() : {},\n);\n\nconst makeSelectUserIsLogged = () => createSelector(\n  makeSelectUserPageState(),\n  (substate) => substate.isLogged,\n);\n\nconst makeSelectCurrentUser = () => createSelector(\n  makeSelectUserPageState(),\n  (substate) => substate.user,\n);\n\nexport default selectUserDomain;\nexport {\n  makeSelectUserPageState,\n  makeSelectUserIsLogged,\n  makeSelectCurrentUser,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ClickOffComponentWrapper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      if (this.props.nestedModals) {\n        return;\n      }\n      this.props.onOuterClick();\n    }\n  }\n\n  render() {\n    return <div className={this.props.className} ref={this.setWrapperRef}>{this.props.children}</div>;\n  }\n}\n\nClickOffComponentWrapper.propTypes = {\n  children: PropTypes.any,\n  onOuterClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  nestedModals: PropTypes.bool,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nexport class Portal extends React.Component {\n  componentDidMount() {\n    this.element = document.querySelector(this.props.selector);\n    this.forceUpdate();\n  }\n\n  render() {\n    if (this.element === undefined) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(this.props.children, this.element);\n  }\n}\n\nPortal.propTypes = {\n  selector: PropTypes.any,\n  children: PropTypes.any,\n};\n\nexport default Portal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getRadius, getDashArray, getDashoffset } from \"../../utils/RadialBar\";\n\nclass RadailBar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const {\n      svgWidth,\n      svgHeight,\n      strokeWidth,\n      maxValue,\n      currentValue,\n      strokeColor,\n    } = this.props;\n    return (\n      <svg width={svgWidth} height={svgHeight} viewBox={`0 0 ${svgWidth}${svgHeight}`}>\n        <circle\n          cx={svgWidth / 2}\n          cy={svgHeight / 2}\n          r={getRadius(svgWidth, strokeWidth)}\n          fill=\"transparent\"\n          stroke=\"#e6e6e6\"\n          strokeWidth={strokeWidth}\n        />\n        <circle\n          cx={svgWidth / 2}\n          cy={svgHeight / 2}\n          r={getRadius(svgWidth, strokeWidth)}\n          fill=\"transparent\"\n          stroke={strokeColor}\n          strokeWidth={strokeWidth}\n          strokeDasharray={getDashArray(svgWidth, strokeWidth)}\n          strokeDashoffset={getDashoffset(svgWidth, strokeWidth, maxValue, currentValue)}\n        />\n      </svg>\n    );\n  }\n}\n\nRadailBar.propTypes = {\n  svgWidth: PropTypes.number,\n  svgHeight: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  maxValue: PropTypes.number,\n  currentValue: PropTypes.number,\n  strokeColor: PropTypes.string,\n};\n\nexport default RadailBar;\n","export const ConvertSecondsToMinutesSeconds = (time) => {\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60 === 0 ? '00' : time % 60;\n  return `${minutes}:${seconds}`;\n};\n","export const  getRadius = (svgWidth,strokeWidth) => {\n   const radius = (svgWidth/2) - (strokeWidth/2);\n   return radius;\n}\n\nexport const getDashArray = (svgWidth,strokeWidth) => {\n    const r = getRadius(svgWidth,strokeWidth)\n    const dasharray = Math.PI*(r*2);\n    return dasharray;\n}\n\nexport const getDashoffset = (svgWidth,strokeWidth,maxValue,currentValue) => {\n    const dasharray = getDashArray(svgWidth,strokeWidth);\n    const dashoffset = dasharray * (1 - currentValue/maxValue);\n    return dashoffset;\n}","import { toast } from 'react-toastify';\n/* eslint-disable array-callback-return */\n\n// HOW THESE FUNCTIONS WORK\n// Each nested validation function takes these three props - component state, a validation state setter, and a set validation function\n// Component state is self-explanatory - it's a copy of the entire component state\n// The validation state setter refers to a function in the component that sets updated validation state and dispatches the set validation function as a callback\n// nestedEditFieldValidation takes updatedInstance as an additional prop - this is the state instance the user has been updating in edit mode\n\n// We set an initial validation boolean that will be switched to false if an invalid field is found\n// We also create a shallow copy of the component's validation map\n// With the nested functions, we map through the validation state and each object contained within for that component's nested state: for example, ownerContactInfo, locationContactInfo, and locationBranding\n// Both functions check if the component state has valid input, referred to by field, and whether that key/field is required - the edit variation checks the user-updated state\n// If an invalid input is found, that boolean in the validation map is set to false, along with validForm\n// The validation state setter is dispatched with the updated validation map\n// The set validation function is passed down from the container level and provides the component with the toast displaying all invalid fields\n\nexport const nestedEditFieldValidation = (componentState, updatedInstance, validationStateSetter, setValidationFunc) => {\n  let validForm = true;\n  const { validation } = componentState;\n  const initialValidation = { ...validation };\n\n  Object.keys(validation).map(fieldSection => {\n    if (!updatedInstance[fieldSection] && initialValidation[fieldSection]) { initialValidation[fieldSection] = false; }\n    Object.keys(validation[fieldSection]).map(field => {\n      if (!updatedInstance[fieldSection][field] && initialValidation[fieldSection][field]) {\n        initialValidation[fieldSection][field] = false;\n        validForm = false;\n      }\n    });\n  });\n  validationStateSetter(initialValidation, setValidationFunc(initialValidation));\n  return validForm;\n};\n\nexport const shallowEditFieldValidation = (componentState, updatedInstance, validationStateSetter, setValidationFunc) => {\n  let validForm = true;\n  const { validation } = componentState;\n  const initialValidation = { ...validation };\n\n  Object.keys(validation).map(field => {\n    if (!updatedInstance[field] && initialValidation[field]) {\n      initialValidation[field] = false;\n      validForm = false;\n    }\n  });\n  validationStateSetter(initialValidation, setValidationFunc(initialValidation));\n  return validForm;\n};\n\n\nexport const nestedCreateFieldValidation = (componentState, validationStateSetter, setValidationFunc) => {\n  let validForm = true;\n  const { validation } = componentState;\n  const initialValidation = { ...validation };\n\n  Object.keys(validation).map(fieldSection => {\n    if (!componentState[fieldSection] && initialValidation[fieldSection]) { initialValidation[fieldSection] = false; }\n    Object.keys(validation[fieldSection]).map(field => {\n      if (!componentState[fieldSection][field] && initialValidation[fieldSection][field]) {\n        initialValidation[fieldSection][field] = false;\n        validForm = false;\n      }\n    });\n  });\n  validationStateSetter(initialValidation, setValidationFunc(initialValidation));\n  return validForm;\n};\n\nexport const shallowCreateFieldValidation = (componentState, validationStateSetter, setValidationFunc) => {\n  let validForm = true;\n  const { validation } = componentState;\n  const initialValidation = { ...validation };\n\n  Object.keys(validation).map(field => {\n    if (!componentState[field] && initialValidation[field]) {\n      initialValidation[field] = false;\n      validForm = false;\n    }\n  });\n  validationStateSetter(initialValidation, setValidationFunc(initialValidation));\n  return validForm;\n};\n\n// validationState is set in state from the root create or edit when an invalid section is found\n// This function maps through the validation object, checks for invalid fields, and converts them to regular english based on validationFieldMap\nexport const parseInvalidFieldsToString = (validationState, validationFieldMap) => {\n  const invalidFields = [];\n  Object.keys(validationState).map(fieldSection => {\n    if (validationState[fieldSection] === false) { invalidFields.push(validationFieldMap[fieldSection]); }\n    Object.keys(validationState[fieldSection]).map(field => {\n      if (validationState[fieldSection][field] === false) {\n        invalidFields.push(validationFieldMap[field]);\n      }\n    });\n  });\n  return invalidFields.join(', ');\n};\n\nexport const shallowParseInvalidFieldsToString = (validationState, validationFieldMap) => {\n  const invalidFields = [];\n  Object.keys(validationState).map(field => {\n    if (validationState[field] === false) {\n      invalidFields.push(validationFieldMap[field]);\n    }\n  });\n  return invalidFields.join(', ');\n};\n\n\nexport const saveNewSuccess = (name) => toast.success(`Your ${name} has been successfully saved!`, {\n  className: 'update-success',\n  progressClassName: 'progress-bar-success',\n});\nexport const saveChangesSuccess = () => toast.success(\"Your changes have been successfully saved!\", {\n  className: 'update-success',\n  progressClassName: 'progress-bar-success',\n});\nexport const saveNewError = (validationState, validationFieldMap, shallowValidation = false) =>\n  toast.error(\n    `Please fill out the following required fields: ${shallowValidation ? shallowParseInvalidFieldsToString(validationState, validationFieldMap) : parseInvalidFieldsToString(validationState, validationFieldMap)}`, {\n      className: 'update-error',\n      progressClassName: 'progress-bar-error',\n    });\n","/* eslint-disable array-callback-return */\n// This function pulls the matching value objects from state for each Dropdown component if an existing value exists - otherwise, returns empty object\nconst getValueFromState = (valueKey, state, nested = false) => {\n  let obj = {};\n  // This is encountered when the options are nested as arrays within objects\n  if (nested) {\n    state.map(substate => {\n      substate.options.map(substateField => {\n        if (substateField.value === valueKey) {\n          obj = substateField;\n        }\n      });\n    });\n  } else {\n    state.map(option => {\n      if (option.value === valueKey) {\n        obj = option;\n      }\n    });\n  }\n  return obj;\n};\n\nexport default getValueFromState;\n","export default {\n  classMember: {\n    name: 'Class Member',\n    description: `This license type allows the student to participate in a course with 4 or more other students. The coursework may be customized for the class as a whole, but not for individual students within the class.\n    To conduct a course for an individual student in a one-on-one format (tutoring), you need a “one-on-one” license type.\n    `,\n  },\n  oneOnOne: {\n    name: 'One-On-One',\n    description: `This license type allows the student to participate in a course with 4 or more other students. The coursework may be customized for the class as a whole, but not for individual students within the class.\n    To conduct a course for an individual student in a one-on-one format (tutoring), you need a “one-on-one” license type.\n    `,\n  },\n};\n","export default [\n  {\n    value: '',\n    label: 'Any',\n  },\n  {\n    value: 'Miami',\n    label: 'Miami',\n  },\n  {\n    value: 'Austin',\n    label: 'Austin',\n  },\n  {\n    value: 'option1',\n    label: 'Option 1',\n  },\n  {\n    value: 'option2',\n    label: 'Option 2',\n  },\n];\n","export default [\n  {\n    className: 'Disneyworld  Tutoring',\n    classLocation: 'Miami, FL',\n  },\n  {\n    className: 'TutorZone Austin',\n    classLocation: 'Austin, TX',\n  },\n  {\n    className: 'TutorZone Miami',\n    classLocation: 'San Francisco, CA',\n  },\n  {\n    className: 'Disneyworld  Tutoring2',\n    classLocation: 'New York, NY',\n  },\n  {\n    className: 'TutorZone Austin2',\n    classLocation: 'Denver, CO',\n  },\n  {\n    className: 'TutorZone Miami2',\n    classLocation: 'Atlanta, GA',\n  },\n];\n","const uuidv4 = require('uuid/v4');\nexport default [\n  {\n    id:uuidv4(),\n    firstName: 'Bob',\n    lastName: 'Smith',\n    email: 'bob@smith.com',\n    addressLine1: '4455 Main St',\n    city: \"Portland\",\n    state: \"OR\",\n    zipCode: \"98758\",\n    timeZone: \"Pacific\",\n    avatarURL: \"https://ichef.bbci.co.uk/news/320/media/images/82399000/jpg/_82399978_75952740.jpg\",\n  },\n  {\n    id:uuidv4(),\n    firstName: 'Jeff',\n    lastName: 'Bezos',\n    email: 'jeff-bezos@email.com',\n    addressLine1: '1234 Test Lane',\n    city: 'Austin',\n    state: 'TX',\n    zipCode: '78757',\n    timeZone: \"Central\",\n    avatarURL: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTUGJC2sKaR6OTgnDzoPwpHdpmEMY2rM8CLT8DbStzvnwQPf51Z\",\n  },\n  {\n    id:uuidv4(),\n    firstName: 'Roger',\n    lastName: 'Rabbit',\n    email: 'roger-rabbit@email.com',\n    addressLine1: '123 Baker Street',\n    city: 'Paris',\n    state: 'ID',\n    zipCode: '88775',\n    timeZone: \"Mountain\",\n    avatarURL: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTM1yFuZbX_ObFSnyaESvq_1a_CTqCLTMURXViN5RyrQvHUm814\",\n\n  },\n  {\n    id:uuidv4(),\n    firstName: 'Jack',\n    lastName: 'InTheBox',\n    email: 'jackinbox@email.com',\n    addressLine1: '123 Baker Street',\n    city: 'Paris',\n    state: 'ID',\n    zipCode: '88775',\n    timeZone: \"Mountain\",\n    avatarURL: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT1vXjnr5RTywwY_6k8nOR7-Oz6B8ci4aNac-CGL9J3y3QRNLfo\",\n  },\n  {\n    id:uuidv4(),\n    firstName: 'John',\n    lastName: 'Jackson',\n    email: 'john-jackson@email.com',\n    addressLine1: \"7643 Some Lane\",\n    city: \"Topeka\",\n    state: \"KS\",\n    zipCode: \"56788\",\n    timeZone: \"Central\",\n    avatarURL: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT6Mh-9HGP3BCegpacxN9MtJFDCtextZ6c9cVC4xdnsuA0WsJgp5A\",\n  },\n  {\n    id:uuidv4(),\n    firstName: 'Jennifer',\n    lastName: 'Ownerson',\n    email: 'jennifern@ownerson.com',\n    addressLine1: \"7643 Some Lane\",\n    city: \"Kansas City\",\n    state: \"KS\",\n    zipCode: \"56788\",\n    timeZone: \"Central\",\n    avatarURL: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS7O1-5ygT98zoHdS26QzqvClNlzTGqeP9fRIj-KTJKwI15QgSF\",\n\n  },\n];\n","export default [\n  {\n    label: 'Right Triangles',\n    value: 'rightTriangles',\n  },\n  {\n    label: 'Trigonometry',\n    value: 'trigonometry',\n  },\n  {\n    label: 'Topic 3',\n    value: 'topic3',\n  },\n  {\n    label: 'Topic 4',\n    value: 'topic4',\n  },\n  {\n    label: 'Topic 5',\n    value: 'topic5',\n  },\n];\n","export const firstNameAscending = ({ accountInfo: { firstName: firstNameA } }, { accountInfo: { firstName: firstNameB } }) => {\n  if (firstNameA < firstNameB) { return -1; }\n  return 0;\n};\n\nexport const firstNameDescending = ({ accountInfo: { firstName: firstNameA } }, { accountInfo: { firstName: firstNameB } }) => {\n  if (firstNameA > firstNameB) { return -1; }\n  return 0;\n};\n\nexport const lastNameAscending = ({ accountInfo: { lastName: lastNameA } }, { accountInfo: { lastName: lastNameB } }) => {\n  if (lastNameA < lastNameB) { return -1; }\n  return 0;\n};\n\nexport const lastNameDescending = ({ accountInfo: { lastName: lastNameA } }, { accountInfo: { lastName: lastNameB } }) => {\n  if (lastNameA > lastNameB) { return -1; }\n  return 0;\n};\n\nexport const studentFirstNameAscending = ({ studentInformation: { firstName: firstNameA } }, { studentInformation: { firstName: firstNameB } }) => {\n  if (firstNameA < firstNameB) { return -1; }\n  return 0;\n};\n\nexport const studentFirstNameDescending = ({ studentInformation: { firstName: firstNameA } }, { studentInformation: { firstName: firstNameB } }) => {\n  if (firstNameA > firstNameB) { return -1; }\n  return 0;\n};\n\nexport const studentLastNameAscending = ({ studentInformation: { lastName: lastNameA } }, { studentInformation: { lastName: lastNameB } }) => {\n  if (lastNameA < lastNameB) { return -1; }\n  return 0;\n};\n\nexport const studentLastNameDescending = ({ studentInformation: { lastName: lastNameA } }, { studentInformation: { lastName: lastNameB } }) => {\n  if (lastNameA > lastNameB) { return -1; }\n  return 0;\n};\n\nexport const dueDate = ({ dueDate: dueDateA }, { dueDate: dueDateB }) => {\n  if (dueDateA < dueDateB) { return -1; }\n  return 0;\n};\n\nexport const assignDate = ({ assignDate: assignDateA }, { assignDate: assignDateB }) => {\n  if (assignDateA > assignDateB) { return -1; }\n  return 0;\n};\n\nexport const problems = ({ problems: problemsA }, { problems: problemsB }) => {\n  if (problemsA > problemsB) { return -1; }\n  return 0;\n};\n\nexport const completed = ({ completed: completedA, problems: problemsA }, { completed: completedB, problems: problemsB }) => {\n  if (completedA / problemsA > completedB / problemsB) { return -1; }\n  return 0;\n};\n\nexport const flags = ({ flags: flagsA }, { flags: flagsB }) => {\n  if (flagsA > flagsB) { return -1; }\n  return 0;\n};\n\nexport const score = ({ score: scoreA }, { score: scoreB }) => {\n  if (scoreA > scoreB) { return -1; }\n  return 0;\n};\n\nexport const timeEstimate = ({ timeEstimate: timeEstimateA }, { timeEstimate: timeEstimateB }) => {\n  if (timeEstimateA > timeEstimateB) { return -1; }\n  return 0;\n};\n\nexport const timeEstimateAscending = ({ timeEstimate: timeEstimateA }, { timeEstimate: timeEstimateB }) => {\n  if (timeEstimateA < timeEstimateB) { return -1; }\n  return 0;\n};\n\nexport const subjectAscending = ({ subject: subjectA }, { subject: subjectB }) => {\n  if (subjectA < subjectB) { return -1; }\n  return 0;\n};\n\nexport const subjectDescending = ({ subject: subjectA }, { subject: subjectB }) => {\n  if (subjectA > subjectB) { return -1; }\n  return 0;\n};\n\nexport const passageAscending = ({ starting_page: passageA }, { starting_page: passageB }) => {\n  if (passageA < passageB) { return -1; }\n  return 0;\n};\nexport const passageDescending = ({ passage: passageA }, { passage: passageB }) => {\n  if (passageA > passageB) { return -1; }\n  return 0;\n};\n\nexport const statusDescending = ({ status: statusA }, { status: statusB }) => {\n  if (statusA > statusB) { return -1; }\n  return 0;\n};\n\nexport const statusAscending = ({ status: statusA }, { status: statusB }) => {\n  if (statusA < statusB) { return -1; }\n  return 0;\n};\nexport const scoreDescending = ({ score: scoreA }, { score: scoreB }) => {\n  if (scoreA > scoreB) { return -1; }\n  return 0;\n};\n\nexport const scoreAscending = ({ score: scoreA }, { score: scoreB }) => {\n  if (scoreA < scoreB) { return -1; }\n  return 0;\n};\n\nexport const flagsDescending = ({ flags: flagsA }, { flags: flagsB }) => {\n  if (flagsA.length > flagsB.length) { return -1; }\n  return 0;\n};\n\nexport const flagsAscending = ({ flags: flagsA }, { flags: flagsB }) => {\n  if (flagsA.length < flagsB.length) { return -1; }\n  return 0;\n};\n\nexport const availableDateDescending = ({ availableDate: availableDateA }, { availableDate: availableDateB }) => {\n  if (availableDateA > availableDateB) { return -1; }\n  return 0;\n};\n\nexport const availableDateAscending = ({ assignment_date: availableDateA }, { assignment_date: availableDateB }) => {\n  if (availableDateA < availableDateB) { return -1; }\n  return 0;\n};\n\nexport const lessonNameAscending = ({ lessonName: lessonNameA }, { lessonName: lessonNameB }) => {\n  if (lessonNameA < lessonNameB) { return -1; }\n  return 0;\n};\n\nexport const lessonNameDescending = ({ lessonName: lessonNameA }, { lessonName: lessonNameB }) => {\n  if (lessonNameA > lessonNameB) { return -1; }\n  return 0;\n};\n\nexport const dueDateAscending = ({ due_date: dueDateA }, { due_date: dueDateB }) => {\n  if (dueDateA < dueDateB) { return -1; }\n  return 0;\n};\n\nexport const completionDateAscending = ({ completionDate: completionDateA }, { completionDate: completionDateB }) => {\n  if (completionDateA < completionDateB) { return -1; }\n  return 0;\n};\n\nexport const completionDateDescending = ({ completionDate: completionDateA }, { completionDate: completionDateB }) => {\n  if (completionDateA > completionDateB) { return -1; }\n  return 0;\n};\n\nexport const lessonTypeAscending = ({ type: typeA }, { type: typeB }) => {\n  if (typeA < typeB) { return -1; }\n  return 0;\n};\n\nexport const lessonTypeDescending = ({ type: typeA }, { type: typeB }) => {\n  if (typeA > typeB) { return -1; }\n  return 0;\n};\n\nexport const totalProblemsAscending = ({ totalProblems: totalProblemsA }, { totalProblems: totalProblemsB }) => {\n  if (totalProblemsA < totalProblemsB) { return -1; }\n  return 0;\n};\n\nexport const totalProblemsDescending = ({ totalProblems: totalProblemsA }, { totalProblems: totalProblemsB }) => {\n  if (totalProblemsA > totalProblemsB) { return -1; }\n  return 0;\n};\n","export default [\n  {\n    value: 'lastNameDescending',\n    label: 'Last Name (Descending)',\n  },\n  {\n    value: 'lastNameAscending',\n    label: 'Last Name (Ascending)',\n  },\n  {\n    value: 'firstNameDescending',\n    label: 'First Name (Descending)',\n  },\n  {\n    value: 'firstNameAscending',\n    label: 'First Name (Ascending)',\n  },\n];\n","const stateOptions = [\n  {\n    label: \"Alabama\",\n    value: \"Alabama\",\n  },\n  {\n    label: \"Alaska\",\n    value: \"Alaska\",\n  },\n  {\n    label: \"American Samoa\",\n    value: \"American Samoa\",\n  },\n  {\n    label: \"Arizona\",\n    value: \"Arizona\",\n  },\n  {\n    label: \"Arkansas\",\n    value: \"Arkansas\",\n  },\n  {\n    label: \"California\",\n    value: \"California\",\n  },\n  {\n    label: \"Colorado\",\n    value: \"Colorado\",\n  },\n  {\n    label: \"Connecticut\",\n    value: \"Connecticut\",\n  },\n  {\n    label: \"Delaware\",\n    value: \"Delaware\",\n  },\n  {\n    label: \"District Of Columbia\",\n    value: \"District Of Columbia\",\n  },\n  {\n    label: \"Federated States Of Micronesia\",\n    value: \"Federated States Of Micronesia\",\n  },\n  {\n    label: \"Florida\",\n    value: \"Florida\",\n  },\n  {\n    label: \"Georgia\",\n    value: \"Georgia\",\n  },\n  {\n    label: \"Guam\",\n    value: \"Guam\",\n  },\n  {\n    label: \"Hawaii\",\n    value: \"Hawaii\",\n  },\n  {\n    label: \"Idaho\",\n    value: \"Idaho\",\n  },\n  {\n    label: \"Illinois\",\n    value: \"Illinois\",\n  },\n  {\n    label: \"Indiana\",\n    value: \"Indiana\",\n  },\n  {\n    label: \"Iowa\",\n    value: \"Iowa\",\n  },\n  {\n    label: \"Kansas\",\n    value: \"Kansas\",\n  },\n  {\n    label: \"Kentucky\",\n    value: \"Kentucky\",\n  },\n  {\n    label: \"Louisiana\",\n    value: \"Louisiana\",\n  },\n  {\n    label: \"Maine\",\n    value: \"Maine\",\n  },\n  {\n    label: \"Marshall Islands\",\n    value: \"Marshall Islands\",\n  },\n  {\n    label: \"Maryland\",\n    value: \"Maryland\",\n  },\n  {\n    label: \"Massachusetts\",\n    value: \"Massachusetts\",\n  },\n  {\n    label: \"Michigan\",\n    value: \"Michigan\",\n  },\n  {\n    label: \"Minnesota\",\n    value: \"Minnesota\",\n  },\n  {\n    label: \"Mississippi\",\n    value: \"Mississippi\",\n  },\n  {\n    label: \"Missouri\",\n    value: \"Missouri\",\n  },\n  {\n    label: \"Montana\",\n    value: \"Montana\",\n  },\n  {\n    label: \"Nebraska\",\n    value: \"Nebraska\",\n  },\n  {\n    label: \"Nevada\",\n    value: \"Nevada\",\n  },\n  {\n    label: \"New Hampshire\",\n    value: \"New Hampshire\",\n  },\n  {\n    label: \"New Jersey\",\n    value: \"New Jersey\",\n  },\n  {\n    label: \"New Mexico\",\n    value: \"New Mexico\",\n  },\n  {\n    label: \"New York\",\n    value: \"New York\",\n  },\n  {\n    label: \"North Carolina\",\n    value: \"North Carolina\",\n  },\n  {\n    label: \"North Dakota\",\n    value: \"North Dakota\",\n  },\n  {\n    label: \"Northern Mariana Islands\",\n    value: \"Northern Mariana Islands\",\n  },\n  {\n    label: \"Ohio\",\n    value: \"Ohio\",\n  },\n  {\n    label: \"Oklahoma\",\n    value: \"Oklahoma\",\n  },\n  {\n    label: \"Oregon\",\n    value: \"Oregon\",\n  },\n  {\n    label: \"Palau\",\n    value: \"Palau\",\n  },\n  {\n    label: \"Pennsylvania\",\n    value: \"Pennsylvania\",\n  },\n  {\n    label: \"Puerto Rico\",\n    value: \"Puerto Rico\",\n  },\n  {\n    label: \"Rhode Island\",\n    value: \"Rhode Island\",\n  },\n  {\n    label: \"South Carolina\",\n    value: \"South Carolina\",\n  },\n  {\n    label: \"South Dakota\",\n    value: \"South Dakota\",\n  },\n  {\n    label: \"Tennessee\",\n    value: \"Tennessee\",\n  },\n  {\n    label: \"Texas\",\n    value: \"Texas\",\n  },\n  {\n    label: \"Utah\",\n    value: \"Utah\",\n  },\n  {\n    label: \"Vermont\",\n    value: \"Vermont\",\n  },\n  {\n    label: \"Virgin Islands\",\n    value: \"Virgin Islands\",\n  },\n  {\n    label: \"Virginia\",\n    value: \"Virginia\",\n  },\n  {\n    label: \"Washington\",\n    value: \"Washington\",\n  },\n  {\n    label: \"West Virginia\",\n    value: \"West Virginia\",\n  },\n  {\n    label: \"Wisconsin\",\n    value: \"Wisconsin\",\n  },\n  {\n    label: \"Wyoming\",\n    value: \"Wyoming\",\n  },\n];\n\nexport default stateOptions;\n","module.exports = require(\"core-js/library/fn/date/now\");","module.exports = require(\"core-js/library/fn/json/stringify\");","module.exports = require(\"core-js/library/fn/object/assign\");","module.exports = require(\"core-js/library/fn/object/define-properties\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/entries\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptor\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptors\");","module.exports = require(\"core-js/library/fn/object/get-own-property-symbols\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/object/values\");","module.exports = require(\"core-js/library/fn/parse-float\");","module.exports = require(\"core-js/library/fn/promise\");","import _Object$defineProperty from \"../../core-js/object/define-property\";\nexport default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import _Object$assign from \"../../core-js/object/assign\";\nexport default function _extends() {\n  _extends = _Object$assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* jshint esversion: 6 */\nimport React, { Component } from \"react\";\nimport update from \"immutability-helper\";\nimport Router from \"next/router\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { createStructuredSelector } from \"reselect\";\nimport {\n  fetchStudents,\n  deleteStudent,\n  setStudents,\n  setActiveStudent,\n} from \"../components/Student/index/actions\";\n\n\nimport { createStudentApi } from \"../components/Student/index/api\";\n\nimport { makeSelectStudents } from \"../components/Student/index/selectors\";\nimport StudentCard from \"../components/Student/components/StudentCard\";\nimport FilterSection from \"../components/Student/ListPage/Components/FilterSection\";\nimport StudentModal from \"../components/Student/components/StudentModal\";\nimport IndividualStudentPage from \"../components/Student/IndividualStudentPage\";\nimport LocationModal from \"../components/Location/components/LocationModal\";\n\nimport {\n  studentFirstNameAscending,\n  studentFirstNameDescending,\n  studentLastNameAscending,\n  studentLastNameDescending,\n} from \"../components/utils/sortFunctions\";\nimport { loggedIn, logIn } from \"../utils/AuthService\";\n\n\nimport {\n  fetchAllLocationns,\n} from '../components/Location/index/actions';\n\nimport { makeSelectLocations } from \"../components/Location/index/selectors\";\nimport { makeSelectCurrentUser } from \"../components/User/index/selectors\";\n\n// eslint-disable-next-line prefer-template\nconst idGenerator = () =>\n  `${subIdGenerator() +\n  subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}${subIdGenerator()}${subIdGenerator()}`;\nconst subIdGenerator = () =>\n  Math.floor((1 + Math.random()) * 0x10000)\n    .toString(16)\n    .substring(1);\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedStudent: null,\n      students: this.props.students,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      location: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\",\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\",\n        },\n        emailAddress: {\n          email: \"\",\n        },\n        location: {\n          locations: [],\n        },\n      },\n      hasRequiredFields: true,\n    };\n  }\n\n  componentDidMount = () => {\n    if (!loggedIn()) {\n      Router.push(\"/login\");\n    } else {\n      const { onFetchStudents, students, locations, onFetchAllLocationns } = this.props;\n      if (students.length === 0) {\n        onFetchStudents();\n      }\n    }\n  };\n\n  componentWillReceiveProps = (nextProps) => {\n    const { onFetchAllLocationns } = this.props;\n    const { locations } = nextProps;\n    if (!locations && nextProps.currentUser) {\n      const { currentUser: { id } } = nextProps;\n      onFetchAllLocationns(id);\n    }\n  }\n\n  componentDidUpdate() {\n    const { students: studentState } = this.state;\n    const { students } = this.props;\n    if (studentState.length === 0 && students.length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ students });\n    }\n  }\n\n  onOpenStudentModal = () => this.setState({ studentModalOpen: true });\n  onCloseStudentModal = () => this.setState({ studentModalOpen: false });\n  onOpenLocationModal = () => this.setState({ locationModalOpen: true });\n  onCloseLocationModal = () => this.setState({ locationModalOpen: false });\n\n  onSetSort = sort => this.setState({ sort });\n  onSetFilteredState = filterName => this.setState({ filterName });\n  onUnsetFilteredState = () => this.setState({ filterName: \"\" });\n\n  onSetFilteredLocationState = location => this.setState({ location });\n  onUnsetFilteredLocationState = () => this.setState({ location: \"\" });\n\n  // TODO add a toas or some notification that a student has been saved\n  onSaveNewStudent = async () => {\n    const { newStudent: previousStudentState } = this.state;\n    const { onFetchStudents } = this.props;\n    const { firstName, lastName } = previousStudentState.studentInformation;\n    // dispatch add student action\n    if (!firstName || !lastName) return this.setState({ hasRequiredFields: false });\n    const { firstName: first_name, lastName: last_name } = previousStudentState.studentInformation;\n    const { email } = previousStudentState.emailAddress;\n    const {\n      state,\n      addressLine,\n      city,\n      phone,\n      zipCode: zip,\n    } = previousStudentState.contactInformation;\n    const { locations } = previousStudentState.location;\n    const formattedLocations = locations.map(location => location.id);\n    const studentPayload = {\n      first_name,\n      last_name,\n      email,\n      state,\n      locations: formattedLocations,\n      phone,\n      address: `${addressLine}`,\n      city,\n      zip,\n    };\n    const { user_id: id } = await createStudentApi(studentPayload);\n    const {\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n    } = previousStudentState;\n    const newTestStudent = {\n      id,\n      active: false,\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n      stats: {\n        complete: 0,\n        overdue: 0,\n        practice_tests: 0,\n        sessions_complete: 0,\n        total_sessions: 0,\n      },\n      tutor: \"\",\n      testScores: {\n        initialScore: \"0\",\n        currentScore: \"0\",\n      },\n      courseContext: {\n        courseStartDateOption: \"secondOption\",\n        courseStartDate: \"\",\n        courseEndDateOption: \"secondOption\",\n        courseEndDate: \"\",\n        targetTestDate: \"12/12/2019\",\n        targetScore: \"1400\",\n        highSchool: \"Everglades High\",\n        graduationYear: \"2018\",\n      },\n      courseProgress: {\n        startDate: \"6/03/18\",\n        testDate: \"10/14/18\",\n        progress: \"77\",\n        improvement: \"82\",\n        lessons: \"73\",\n        instruction: \"68\",\n        practiceTests: \"47\",\n      },\n      overdueWork: {\n        lessons: \"12\",\n        worksheets: \"3\",\n        quizzes: \"1\",\n        practiceTests: \"5\",\n      },\n      summary: {\n        questionsAnswered: \"791\",\n        videoWatched: \"416\",\n        notesTaken: \"52\",\n        totalTimeLoggedIn: \"220\",\n        lastLogIn: \"3:12\",\n        loginTimeCode: \"pm\",\n        onTimePercentage: \"77\",\n      },\n      testScores: {\n        initialScore: \"1040\",\n        currentScore: \"1300\",\n        compositeScore: {\n          reading: \"83\",\n          writing: \"31\",\n          math: \"105\",\n          composite: \"218\",\n        },\n        subjectScores: {\n          reading: \"58\",\n          writing: \"44\",\n          math: \"91\",\n          composite: \"195\",\n        },\n      },\n      strengthsAndWeaknesses: {\n        reading: {\n          correctAnswers: \"32\",\n          totalAnswers: \"52\",\n        },\n        writing: {\n          correctAnswers: \"35\",\n          totalAnswers: \"52\",\n        },\n        math: {\n          correctAnswers: \"37\",\n          totalAnswers: \"52\",\n        },\n      },\n    };\n    const newStudent = update(previousStudentState, {\n      $set: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\",\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\",\n        },\n        emailAddress: {\n          email: \"\",\n        },\n        location: {\n          locations: [],\n        },\n\n\n      },\n    });\n    this.setState({ newStudent });\n    const updatedStudents = update(this.state.students, {\n      $push: [newTestStudent],\n    });\n    this.setState({ students: updatedStudents });\n    // const { onSetStudents } = this.props;\n    // onSetStudents(updatedStudents);\n    this.onCloseStudentModal();\n  };\n\n  onDeleteNewStudent = () => {\n    const { newStudent: previousStudentState } = this.state;\n    const newStudent = update(previousStudentState, {\n      $set: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\",\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\",\n        },\n        emailAddress: {\n          email: \"\",\n        },\n        location: {\n          locations: [],\n        },\n      },\n    });\n    this.setState({ newStudent });\n  };\n\n  onRemoveLocation = index => {\n    const { newStudent: previousStudentState } = this.state;\n    const {\n      location: { locations },\n    } = this.state.newStudent;\n    const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n    const newStudent = update(previousStudentState, {\n      location: { $set: { locations: newLocationsArray } },\n    });\n    this.setState({ newStudent });\n  };\n\n  onFilterByName = () => {\n    const { students, nameFilter } = this.state;\n    return students.reduce((finalArr, currentStudent) => {\n      const {\n        studentInformation: { firstName, lastName },\n      } = currentStudent;\n      const studentString = `${firstName}${lastName}`.replace(/\\s/g, \"\").toLowerCase();\n      if (studentString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n        finalArr.push(currentStudent);\n      }\n      return finalArr;\n    }, []);\n  };\n\n  onHandleStudentCard = async index => {\n    const { students } = this.state;\n    const { onSetActiveStudent } = this.props;\n    onSetActiveStudent(students[index]);\n    this.setState({ selectedStudent: students[index] });\n  };\n\n  onRedirectToStudentPage = event => {\n    event.preventDefault();\n    this.setState({ selectedStudent: null });\n  };\n\n  onDeleteStudent = index => {\n    const { onDeleteStudent } = this.props;\n    const { students } = this.state;\n    // Dispatch deleteStudent\n    // eslint-disable-next-line camelcase\n    const student_id = students[index].id;\n    onDeleteStudent(student_id);\n    const newStudentArray = this.arrayItemRemover(students, students[index]);\n    this.setState({ students: newStudentArray });\n    this.onCloseDropdown();\n  };\n\n  onCloneStudent = index => {\n    const { students } = this.state;\n    const newStudent = update(students[index], {\n      id: { $set: idGenerator() },\n    });\n    this.setState(prevState => {\n      prevState.students.push(newStudent);\n      return { students: prevState.students };\n    });\n  };\n\n  handleChange = (event, name, section) => {\n    const { newStudent: previousStudentState } = this.state;\n    const value = event.target ? event.target.value : event;\n    const updatedStudent = update(previousStudentState, {\n      [section]: { $merge: { [name]: value } },\n    });\n    this.setState({ newStudent: updatedStudent });\n  };\n\n  onSaveStudentChanges = updatedStudent => {\n    const { students: originalStudents } = this.state;\n    const {\n      active,\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n    } = updatedStudent;\n    const studentToUpdate = originalStudents.filter(student => student.id === updatedStudent.id)[0];\n    const updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n    const students = update(originalStudents, {\n      [updatedStudentIndex]: {\n        $merge: { active, studentInformation, contactInformation, emailAddress, location },\n      },\n    });\n    this.setState({ students });\n    const { onSetStudents } = this.props;\n    onSetStudents(students);\n  };\n\n  onSetDropdown = dropdownIndex => this.setState({ dropdownIsOpen: true, dropdownIndex });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  // eslint-disable-next-line consistent-return\n  onSortStudents = students => {\n    const { sort } = this.state;\n    switch (sort) {\n      case \"lastNameDescending\":\n        return students.sort(studentLastNameDescending);\n      case \"lastNameAscending\":\n        return students.sort(studentLastNameAscending);\n      case \"firstNameDescending\":\n        return students.sort(studentFirstNameDescending);\n      case \"firstNameAscending\":\n        return students.sort(studentFirstNameAscending);\n      default:\n        break;\n    }\n  };\n\n  getMappableStudents = () => {\n    const { sort, students } = this.state;\n    const mappableStudents = students;\n    if (sort) {\n      return this.onSortStudents(mappableStudents);\n    }\n    return mappableStudents;\n  };\n\n  arrayItemRemover = (array, value) => array.filter(student => student !== value);\n\n  mapStudents = () =>\n    this.getMappableStudents().map((student, index) => (\n      <StudentCard\n        student={student}\n        index={index}\n        id={student.id}\n        key={student.id}\n        dropdownIsOpen={this.state.dropdownIsOpen}\n        dropdownIndex={this.state.dropdownIndex}\n        onSetDropdown={this.onSetDropdown}\n        onCloseDropdown={this.onCloseDropdown}\n        onHandleStudentCard={() => this.onHandleStudentCard(index)}\n        onDeleteStudent={() => this.onDeleteStudent(index)}\n        onCloneStudent={() => this.onCloneStudent(index, student.id)}\n        onSaveStudentChanges={this.onSaveStudentChanges}\n      />\n    ));\n\n  updateStudentStatus = () => this.setState({ selectedStudent: { ...this.state.selectedStudent, active: true } })\n  render() {\n    const { studentModalOpen, selectedStudent } = this.state;\n    return (\n      <main id=\"main\" role=\"main\">\n        <div className=\"main-holder grey lighten-5\">\n          <StickyContainer>\n            {!selectedStudent && (\n              <React.Fragment>\n                <Sticky>\n                  {({ style }) => (\n                    <div className=\"title-row card-panel\" style={{ ...style, zIndex: 1999 }}>\n                      <div className=\"mobile-header\">\n                        <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\">\n                          <i className=\"material-icons\">menu</i>\n                        </a>\n                      </div>\n                      <h2 className=\"h1 white-text\">\n                        <span className=\"heading-holder\">\n                          <i className=\"icon-student\"></i>\n                          <span className=\"heading-block\">Students</span>\n                        </span>\n                      </h2>\n                    </div>\n                  )}\n                </Sticky>\n                <FilterSection\n                  onSetSort={this.onSetSort}\n                  onSetFilteredState={this.onSetFilteredState}\n                  onUnsetFilteredState={this.onUnsetFilteredState}\n                  onSetFilteredLocationState={this.onSetFilteredLocationState}\n                  onUnsetFilteredLocationState={this.onUnsetFilteredLocationState}\n                  handleFilterClick={this.handleFilterClick}\n                  onFilterByName={this.onFilterByName}\n                />\n                <div className=\"content-section\">\n                  <div className=\"row d-flex-content\">{this.mapStudents()}</div>\n                </div>\n                <a\n                  href=\"#\"\n                  className=\"waves-effect waves-teal btn add-btn modal-trigger\"\n                  onClick={this.onOpenStudentModal}\n                >\n                  <i className=\"material-icons\">add</i>New Student\n                </a>\n                <StudentModal\n                  open={studentModalOpen}\n                  onClose={this.onCloseStudentModal}\n                  handleChange={this.handleChange}\n                  state={this.state.newStudent}\n                  onSave={this.onSaveNewStudent}\n                  onOpenLocationModal={this.onOpenLocationModal}\n                  onRemoveLocation={this.onRemoveLocation}\n                  onDeleteNewStudent={this.onDeleteNewStudent}\n                  hasRequiredFields={this.state.hasRequiredFields}\n                />\n                <LocationModal\n                  open={this.state.locationModalOpen}\n                  onClose={this.onCloseLocationModal}\n                  handleLocationsChange={selectedLocations =>\n                    this.handleChange(selectedLocations, \"locations\", \"location\")\n                  }\n                />\n              </React.Fragment>\n            )}\n            {selectedStudent && (\n              <IndividualStudentPage\n                student={selectedStudent}\n                onRedirectToStudentPage={this.onRedirectToStudentPage}\n                updateStudentStatus={this.updateStudentStatus}\n              />\n            )}\n          </StickyContainer>\n        </div>\n      </main>\n    );\n  }\n}\n\nStudents.propTypes = {\n  students: PropTypes.array.isRequired,\n  onFetchStudents: PropTypes.func.isRequired,\n  onCreateStudent: PropTypes.func.isRequired,\n  onDeleteStudent: PropTypes.func.isRequired,\n  onSetStudents: PropTypes.func.isRequired,\n  locations: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  students: makeSelectStudents(),\n  locations: makeSelectLocations(),\n  currentUser: makeSelectCurrentUser(),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteStudent: id => dispatch(deleteStudent(id)),\n  onFetchStudents: () => dispatch(fetchStudents()),\n  onSetStudents: students => dispatch(setStudents(students)),\n  onSetActiveStudent: student => dispatch(setActiveStudent(student)),\n  onFetchAllLocationns: (user_id) => dispatch(fetchAllLocationns(user_id)),\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(Students);\n","import { oAuthTokenApi } from \"../components/User/index/api\";\nimport decode from \"jwt-decode\";\n\nexport const logIn = async (postBody) => {\n  const data = await oAuthTokenApi(postBody);\n  return data;\n};\nexport const loggedIn = () => {\n  // Checks if there is a saved token and it's still valid\n  const token = getToken();\n  return !!token && !isTokenExpired(token); // handwaiving here\n};\n\nexport const setToken = (token, expires_at) => {\n  // Saves user token to sessionStorage\n  localStorage.setItem('token', token);\n  localStorage.setItem('expires_at', expires_at);\n};\n\nexport const getToken = () => {\n// Retrieves the user token from sessionStorage\n  if (typeof window !== 'undefined') {\n    // Is running on the client\n    return localStorage.getItem('token');\n  }\n};\n\nexport const logout = () => {\n  // Clear user token from sessionStorage\n  localStorage.removeItem('token');\n  localStorage.removeItem('expires_at');\n};\n\nexport const isTokenExpired = token => {\n  try {\n    const decoded = decode(token);\n    if (decoded.exp < Date.now() / 1000) {\n      // Checking if token is expired.\n      return true;\n    } return false;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport default [\n  loggedIn,\n  setToken,\n  getToken,\n  logout,\n];\n","const formatTimeEstimate = (totalMinutes) => {\n  const hours = Math.floor(totalMinutes / 60) === 0 ? 0 : Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60 === 0 ? 0 : totalMinutes % 60;\n  const hourString = hours !== 0 ? `${hours} hrs` : '';\n  const minuteString = minutes !== 0 ? `${minutes} mins` : '';\n  return `${hourString} ${minuteString}`\n}\n\nexport default formatTimeEstimate;\n","export default [\n  {\n    label: 'Due Date',\n    value: 'dueDate',\n  },\n  {\n    label: 'Assign Date',\n    value: 'assignDate',\n  },\n  {\n    label: 'Problems',\n    value: 'problems',\n  },\n  {\n    label: 'Completed',\n    value: 'completed',\n  },\n  {\n    label: 'Flags',\n    value: 'flags',\n  },\n  {\n    label: 'Score',\n    value: 'score',\n  },\n  {\n    label: 'Time Estimate',\n    value: 'timeEstimate',\n  },\n];\n","module.exports = require(\"@emotion/core\");","module.exports = require(\"core-js/library/fn/date/now\");","module.exports = require(\"core-js/library/fn/json/stringify\");","module.exports = require(\"core-js/library/fn/object/assign\");","module.exports = require(\"core-js/library/fn/object/define-properties\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/entries\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptor\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptors\");","module.exports = require(\"core-js/library/fn/object/get-own-property-symbols\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/object/values\");","module.exports = require(\"core-js/library/fn/parse-float\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"html2canvas\");","module.exports = require(\"immutability-helper\");","module.exports = require(\"jwt-decode\");","module.exports = require(\"moment\");","module.exports = require(\"next/dynamic\");","module.exports = require(\"next/router\");","module.exports = require(\"pdfmake/build/pdfmake\");","module.exports = require(\"pdfmake/build/vfs_fonts\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-beautiful-dnd\");","module.exports = require(\"react-chartjs-2\");","module.exports = require(\"react-datepicker\");","module.exports = require(\"react-dom\");","module.exports = require(\"react-input-slider\");","module.exports = require(\"react-redux\");","module.exports = require(\"react-select\");","module.exports = require(\"react-slick\");","module.exports = require(\"react-spinners/BarLoader\");","module.exports = require(\"react-sticky\");","module.exports = require(\"react-toastify\");","module.exports = require(\"redux\");","module.exports = require(\"reselect\");","module.exports = require(\"styled-components\");","module.exports = require(\"styled-jsx/style\");","module.exports = require(\"uuid/v4\");"],"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A;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AA7RA;AACA;AA8RA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;AC1SA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AAFA;AASA;AAAA;AAAA;AAAA;AACA;AAVA;AAWA;AAAA;AAAA;AACA;AAZA;AAaA;AAAA;AAAA;AAAA;AACA;AAdA;AAgBA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AArBA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAggLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;;;;;;;;;;ACtNA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AATA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AAcxGA;AACA;AAuGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxHA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAFA;AAgBA;AAAA;AAAA;AAAA;AACA;AAjBA;AAkBA;AAAA;AAAA;AACA;AAnBA;AAmBA;AAAA;AACA;AApBA;AAqBA;AAAA;AAAA;AAAA;AACA;AAtBA;AAsBA;AAAA;AACA;AAvBA;AAwBA;AAAA;AACA;AAzBA;AAyBA;AAAA;AACA;AA1BA;AA4BA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAhCA;AAmCA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AAjDA;AAmDA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA7DA;AA+DA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAzEA;AA2EA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AArFA;AAuFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvGA;AAyGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;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;AAWA;AAAA;AAAA;AACA;AAZA;AAaA;AAAA;AAAA;AAAA;AACA;AAdA;AAgBA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AArBA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAgaA;;;;;;;;;;;;;;;;;;;;;ACnSA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AATA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AAcvIA;AACA;AAwIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvJA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAkBA;AAAA;AAAA;AAAA;AACA;AAnBA;AAoBA;AAAA;AAAA;AACA;AArBA;AAqBA;AAAA;AACA;AAtBA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAxBA;AAwBA;AAAA;AACA;AAzBA;AA0BA;AAAA;AACA;AA3BA;AA2BA;AAAA;AACA;AA5BA;AA8BA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAlCA;AAqCA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AAnDA;AAqDA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA/DA;AAiEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA3EA;AA6EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA7FA;AA+FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA/GA;AAiHA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAlBA;AACA;AAmBA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAtJA;AAwJA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAtKA;AAwKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAbA;AACA;AAcA;AACA;AACA;AACA;AA7LA;AAgMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA9LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcsFA;AACA;AAxSA;AACA;AAySA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;AC7TA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAiBA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvDA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;;;;;ACjFA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;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AAAA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9DA;AAAA;AAAA;AAiIA;AACA;AAvIA;AAyIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;ACzJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;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;AAMA;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AA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;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AA+HA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAzIA;AA0IA;AAAA;AACA;AA3IA;AA2IA;AAAA;AACA;AA5IA;AA6IA;AAAA;AACA;AA9IA;AA8IA;AAAA;AACA;AA/IA;AAgJA;AAAA;AACA;AAjJA;AAiJA;AAAA;AACA;AAlJA;AAqJA;AAAA;AACA;AAtJA;AAyJA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AApKA;AAsKA;AACA;AACA;AAxKA;AA0KA;AACA;AACA;AACA;AA7KA;AA+KA;AACA;AACA;AACA;AAlLA;AAoLA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAhMA;AAkMA;AACA;AACA;AACA;AADA;AADA;AADA;AAOA;AAAA;AAAA;AACA;AACA;AA3MA;AACA;AADA;AA+MA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AA3NA;AA6NA;AACA;AACA;AACA;AADA;AADA;AADA;AAOA;AAAA;AAAA;AACA;AACA;AAtOA;AA0OA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AApPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAnCA;AA6CA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAnCA;AA6CA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AApGA;AA8GA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAwHA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAzVA;AACA;AA0VA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAMA;AACA;AAKA;AACA;AACA;AACA;AAFA;AA6BA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAzBA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA5HA;AA8HA;AAAA;AAAA;AAAA;AACA;AACA;AAhIA;AAkIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA7IA;AAgJA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA3JA;AA6JA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AApKA;AAsKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAjLA;AAmLA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAhMA;AAkMA;AAEA;AACA;AArMA;AAuMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAhNA;AAkNA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA3NA;AA6NA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAtOA;AAwOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAhPA;AAkPA;AAAA;AACA;AACA;AAFA;AACA;AAnPA;AAuPA;AAAA;AACA;AACA;AAFA;AACA;AAxPA;AA6PA;AAAA;AACA;AADA;AACA;AA9PA;AAiQA;AAAA;AACA;AADA;AACA;AAlQA;AAqQA;AAAA;AAAA;AACA;AAtQA;AAwQA;AAAA;AACA;AAzQA;AA2QA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAjTA;AAmTA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA5UA;AA+UA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAtVA;AAwVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAnWA;AAsWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AAAA;AACA;AACA;AA5YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AAIA;AACA;AACA;AAkXA;AACA;AACA;A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AA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AA9CA;AAiDA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAlCA;AAoCA;AACA;AAvFA;AAyFA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAnGA;AAqGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvHA;AA4HA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AAhJA;AAkJA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA5JA;AA8JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA3KA;AA8KA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAvLA;AA0LA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AAUA;AACA;AAiahTA;AACA;AAiTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;AC1VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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AACA;AALA;AAQA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AACA;AAkBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAujBA;AACA;AAkuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;ACxSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAOA;AAAA;AACA;AARA;AAQA;AAAA;AACA;AATA;AAaA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AARA;AAUA;AACA;AAxBA;AA0BA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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ACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAEA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AA2CA;AACA;AACA;AADA;AAGA;AACA;AACA;AAjDA;AA4DA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAxEA;AA8EA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAvFA;AA6FA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAtGA;AAyGA;AACA;AADA;AAKA;AACA;AA/GA;AAgHA;AAAA;AACA;AAjHA;AAiHA;AAAA;AACA;AAlHA;AAmHA;AAAA;AACA;AApHA;AAoHA;AAAA;AACA;AArHA;AAsHA;AAAA;AACA;AAvHA;AAuHA;AAAA;AACA;AAxHA;AA2HA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AA3HA;AAkIA;AAAA;AACA;AAnIA;AAmIA;AAAA;AACA;AApIA;AAoIA;AAAA;AACA;AArIA;AAqIA;AAAA;AAAA;AACA;AAtIA;AAwIA;AAAA;AAAA;AACA;AACA;AA1IA;AA6IA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AA5CA;AA8CA;AACA;AA7LA;AA6LA;AAAA;AACA;AA9LA;AAgMA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA1MA;AA4MA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAlNA;AAoNA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAxNA;AA0NA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA9PA;AAgQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AASA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAnSA;AAuSA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAhUA;AAkUA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAlBA;AACA;AACA;AAmBA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA5WA;AACA;AADA;AAgXA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AApZA;AAsZA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAhbA;AAkbA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA/bA;AAkcA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA1cA;AAwdA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA5dA;AA8dA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA9gBA;AAghBA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7hBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAkaA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AADA;AAGA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAjnBA;AACA;AAknBA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;;;;;;;;;;;;ACrtBA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChBA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;;;;;;;;;;;;ACzBA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;;;;;;;;;;;;AC7FA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AAFA;AADA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AADA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AADA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AADA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AADA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;AC7MA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;AChvfA;AACA;AAwfA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;ACpgBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AApBA;AAsBA;AAEA;AACA;AACA;AACA;AAFA;AADA;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;ACjGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA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AAAA;AAYA;AACA;AA5JA;AACA;AA6JA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAtCA;AACA;AAgDA;AACA;AACA;AACA;AAFA;AAsDA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AApEA;AAsEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvFA;AAyFA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA9FA;AAgGA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AApHA;AAsHA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAxIA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAlBA;AAyBA;AAEA;;;;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAuFA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAlJA;AACA;AAmJA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAQA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAJA;AACA;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AAPA;AACA;AASA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAlDA;AACA;AADA;AAGA;AACA;AA+CA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBA;AAAA;AAAA;AAAA;AA8BA;AACA;AA1FA;AACA;AA2FA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAhBA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAMA;AACA;AAUA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAnCA;AACA;AAoCA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAVA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAvBA;AACA;AAwBA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AACA;AAUA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAlFA;AA2FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AA5IA;AA+IA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9KA;AAiLA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAtLA;AAwLA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA5LA;AA8LA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAfA;AACA;AAgBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA1NA;AA4NA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AA/RA;AAiSA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAzSA;AA2SA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AACA;AACA;AA7TA;AA+TA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AA5UA;AA+UA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA7UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmCA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAiQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAtBA;AACA;AAuBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAraA;AACA;AAsaA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AANA;AAQA;AACA;AACA;AAEA;;;;;;;;;;;;AC/dA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;ACliaA;AACA;AAzJA;AACA;AA0JA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;;;;;;;;;;;;;;;ACvKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAFA;AACA;AADA;AAaA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAxBA;AA8BA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AArCA;AAuCA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAfA;AAiBA;AACA;AACA;AA3DA;AA6DA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAlEA;AAoEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAzEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAcA;AACA;AACA;AACA;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAjBA;AAmqvZA;AACA;AAwZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACzbA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAA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GA;AACA;AAxIA;AA0IA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAxJA;AA2JA;AACA;AAEA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAlBA;AACA;AAmBA;AACA;AAEA;AACA;AA1LA;AA4LA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AAIA;AACA;AAKA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AASA;AACA;AACA;AAhSA;AAiSA;AAAA;AACA;AAlSA;AAoSA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AACA;AAtWA;AAwWA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAtBA;AACA;AAyBA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AAMA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA3bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAsCA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AATA;AAWA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AA+UA;AACA;AAAA;AAAA;AAAA;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A;AAKA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAFA;AA2BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAzCA;AA2CA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAhDA;AAkDA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAzBA;AA2BA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAjGA;AAmGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AA1IA;AA4IA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AApJA;AAsJA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AA1KA;AA4KA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAtBA;AA2BA;AACA;AACA;AADA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAlQA;AAoQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AA1QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AApBA;AAsBA;AACA;AAoiaA;AACA;AAzJA;AACA;AA0JA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAqBA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AA7CA;AA+CA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AA1DA;AA4DA;AAAA;AAAA;AACA;AACA;AACA;AA7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AA6CA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAegBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAoBA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAxCA;AA0CA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AArDA;AAuDA;AAAA;AAAA;AACA;AACA;AACA;AAxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AAyCA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeazPA;AAAA;AAAA;AA6SA;AACA;AAhYA;AACA;AAiYA;AACA;AACA;AACA;AAHA;AAMA;AACA;AADA;AACA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpaA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAuDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AADA;AADA;AAOA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAnFA;AAqFA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AA9FA;AAgGA;AACA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AAvGA;AAyGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;A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;AACA;AACA;AACA;AA5HA;AA6HA;AACA;AACA;AACA;AACA;AAjIA;AAmIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AAvJA;AAyJA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AA5KA;AA6KA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAhMA;AAiMA;AAAA;AACA;AAlMA;AAmMA;AACA;AACA;AADA;AAGA;AACA;AACA;AAzMA;AA2MA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AA7QA;AA+QA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AArRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AA2QA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;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;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA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;AACA;AACA;AAnBA;AAqBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AA3FA;AACA;AACA;AAFA;AAIA;AACA;AAuFA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AArHA;AACA;AAsHA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAlBA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AApBA;AAqBA;AAAA;AACA;AAtBA;AAsBA;AAAA;AACA;AAvBA;AAwBA;AAAA;AAAA;AACA;AAzBA;AAyBA;AAAA;AAAA;AACA;AA1BA;AA2BA;AAAA;AAAA;AACA;AA5BA;AA4BA;AAAA;AACA;AA7BA;AA+BA;AACA;AACA;AAjCA;AAmCA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA7CA;AA+CA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA9DA;AAiEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAhBA;AAkBA;AACA;AArFA;AAuFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAxGA;AA0GA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA/GA;AAkHA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AANA;AAQA;AACA;AA1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAggLA;AACA;AADA;AAIA;;;;;;;;;;;;AChMA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;;;;;;;;;;;;ACnKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAAA;AAAA;AACA;AADA;AAEA;AADA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAkBA;AAAA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AA9BA;AAgCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AApCA;AAsCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAnDA;AAqDA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DA;AA+DA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AAyEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAlFA;AACA;AAmFA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AAzHA;AACA;AA0HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AAAA;AACA;AADA;AACA;AApBA;AAuBA;AAAA;AACA;AAxBA;AAyBA;AAAA;AACA;AA1BA;AA4BA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAvDA;AAyDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtEA;AAwEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA1EA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAmkBA;AACA;AAtMA;AACA;AAuMA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;ACvPA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AA5BA;AACA;AAqCA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AArBA;AACA;AADA;AACA;AADA;AA0BA;AACA;AACA;AACA;AA7BA;AA8BA;AACA;AACA;AACA;AAjCA;AAmCA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAvDA;AACA;AAwDA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAlEA;AACA;AAmEA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;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;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAzCA;AA2CA;AACA;AADA;AAGA;AACA;AA/CA;AAiDA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AA3DA;AA6DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAxEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAkvJA;AAAA;AAAA;AAyNA;AACA;AA3SA;AACA;AA4SA;AACA;AACA;AACA;AAHA;AAMA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;AACA;AACA;AApCA;AAsCA;AACA;AACA;AAxCA;AA0CA;AACA;AADA;AAGA;AACA;AACA;AA/CA;AAiDA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAtDA;AAuDA;AACA;AACA;AAFA;AAIA;AACA;AA5DA;AA6DA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAxEA;AAyEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA9EA;AAgFA;AACA;AACA;AAlFA;AAoFA;AACA;AACA;AAtFA;AAwFA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAhGA;AAkGA;AACA;AACA;AApGA;AAsGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AA7GA;AA8GA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAtHA;AAwHA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AA7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAgHA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAccA;AACA;AAAA;AAAA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5IA;AAAA;AAAA;AA8OA;AACA;AAnXA;AACA;AAmXA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AADA;AACA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAjEA;AAmEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA1EA;AA4EA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAnGA;AAqGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvHA;AAyHA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAlIA;AACA;AADA;AAqIA;AAAA;AACA;AAtIA;AAwIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA5IA;AA8IA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AArJA;AAuJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AA+IA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA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;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAvDA;AAyDA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAmeA;AACA;AA3LA;AACA;AA4LA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;AClNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AADA;AAIA;AAEA;AAEA;AAAA;AAAA;AADA;AAIA;AAEA;AAEA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AADA;AAIA;AAEA;AAEA;AAAA;AAAA;AADA;AAIA;AAEA;AAEA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAFA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3IA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AARA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AArCA;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAVA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AA1BA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAVA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAvCA;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AARA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAxBA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAVA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAvCA;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AARA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5MA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAYA;AAAA;AAAA;AAAA;AACA;AAbA;AAeA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA7BA;AA8BA;AAAA;AACA;AA/BA;AAkCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAzDA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAilWA;AACA;AAmWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AADA;AACA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAzBA;AACA;AADA;AA4BA;AAAA;AACA;AA1BA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAqapJA;AACA;AAqJA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClLA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAFA;AAwFA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAlGA;AACA;AADA;AAsGA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AA9GA;AAkHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AAAA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AArBA;AAuBA;AACA;AAvJA;AA0JA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA/JA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAVA;AAlBA;AAmCA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAVA;AAlBA;AApCA;AAwcjVA;AAAA;AAAA;AAqYA;AACA;AAjjBA;AACA;AAkjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;AC7mBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AACA;AASA;AACA;AACA;AACA;AAFA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AAhBA;AAgBA;AAAA;AACA;AAjBA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAgaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcaA;;;;;;;;;;;;;;;;;;;;AC3QA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9JA;AAAA;AAAA;AAkNA;AACA;AAvNA;AACA;AAwNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;;;;;;;;AC7OA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9bA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAQA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAGA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AATA;AAgBA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAtFA;AAqGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAdA;AACA;AAeA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAGA;AAJA;AAQA;AACA;AADA;AA/BA;AAqCA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AAcaA;AAEA;AACA;AACA;AACA;AAHA;AADA;AASA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AADA;AASA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;;;;;;;;;;;;ACpwjHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAlBA;AACA;AAmBA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AASA;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAYA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAQA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAYA;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAhCA;AAkCA;AACA;AACA;AACA;AACA;AAJA;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AApCA;AACA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;;;;;;;;;;;;ACnDA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AAFA;;;;;;;;;;;;ACxHA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACvBA;AAAA;AACA;AACA;AACA;;;AAFA;AAMA;AACA;AACA;;;AAFA;AAPA;;;;;;;;;;;;ACAA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;;;;;;;;;;;;ACjBA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;;;;;;;;;;;;ACrBA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;;;;;;;;;;;AC/DA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;;;;;;;;;;;;ACjrLA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;;;;;;;;;;;;ACbA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;;;;;;;;;;;AC/OA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAqCA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AA9CA;AAgDA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAvDA;AAiEA;AAAA;AACA;AAlEA;AAkEA;AAAA;AACA;AAnEA;AAmEA;AAAA;AACA;AApEA;AAoEA;AAAA;AACA;AArEA;AAsEA;AAAA;AACA;AAvEA;AAuEA;AAAA;AACA;AAxEA;AAwEA;AAAA;AACA;AAzEA;AA0EA;AAAA;AACA;AA3EA;AA2EA;AAAA;AACA;AA5EA;AA+EA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AATA;AAgBA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AArEA;AAoFA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAhBA;AADA;AAwBA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAtOA;AAwOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAhBA;AADA;AAsBA;AAAA;AAAA;AACA;AACA;AAjQA;AAmQA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AA7QA;AA+QA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA3RA;AA6RA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAlSA;AAoSA;AACA;AAAA;AAAA;AACA;AACA;AAvSA;AAySA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAnTA;AAqTA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA9TA;AAgUA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAvUA;AAyUA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA5VA;AA6VA;AAAA;AAAA;AACA;AA9VA;AA8VA;AAAA;AAAA;AACA;AA/VA;AAkWA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AAhXA;AAkXA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAzXA;AACA;AADA;AA+XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA/XA;AA8YA;AAAA;AAAA;AAAA;AACA;AA7YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAhBA;AAoBA;AA9BA;AAgCA;AACA;AAqdA;AACA;AA6dA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AC3iBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,eAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AC7CA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;ACzsourceRoot":""}