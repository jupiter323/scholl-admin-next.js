{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\n\nvar AnswerRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnswerRow, _React$Component);\n\n  function AnswerRow(props) {\n    var _this;\n\n    _classCallCheck(this, AnswerRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnswerRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenQuestionModal\", function () {\n      return _this.setState({\n        open: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseQuestionModal\", function () {\n      return _this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleReviewed\", function () {\n      return _this.setState(function (_ref) {\n        var reviewed = _ref.reviewed;\n        return {\n          reviewed: !reviewed\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapLetterBubbles\", function (_ref2) {\n      var index = _ref2.index;\n      var letters = [\"A\", \"B\", \"C\", \"D\"];\n      var sampleAnswers = _this.props.sampleAnswers;\n      var _sampleAnswers$index = sampleAnswers[index],\n          studentChoice = _sampleAnswers$index.studentChoice,\n          answer = _sampleAnswers$index.answer;\n      return letters.map(function (letter) {\n        if (letter === answer && letter === studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter[index]\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: '#fff',\n              borderColor: '#32955c',\n              backgroundColor: '#3eb777'\n            }\n          }, letter));\n        }\n\n        if (letter === answer && letter !== studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter[index]\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: '#32955c',\n              borderColor: '#32955c',\n              backgrounColor: '#fff'\n            }\n          }, letter));\n        }\n\n        if (letter !== answer && letter === studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter[index]\n          }, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: '#fff',\n              borderColor: '#ad1e3e',\n              backgroundColor: '#db1d41'\n            }\n          }, letter));\n        }\n\n        return React.createElement(\"li\", {\n          key: letter[index]\n        }, React.createElement(\"span\", {\n          className: \"badge-circle badge-circle-bordered\"\n        }, letter));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapNumberBubbles\", function (_ref3) {\n      var index = _ref3.index;\n      var sampleAnswers = _this.props.sampleAnswers;\n      var _sampleAnswers$index2 = sampleAnswers[index],\n          answer = _sampleAnswers$index2.answer,\n          studentChoice = _sampleAnswers$index2.studentChoice;\n\n      if (answer === studentChoice) {\n        return React.createElement(\"li\", {\n          key: index\n        }, React.createElement(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: {\n            color: '#fff',\n            borderColor: '#32955c',\n            backgroundColor: '#3eb777'\n          }\n        }, answer));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", {\n        key: index\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#fff',\n          borderColor: '#ad1e3e',\n          backgroundColor: '#db1d41'\n        }\n      }, studentChoice)), React.createElement(\"li\", {\n        key: answer\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#32955c',\n          borderColor: '#32955c',\n          backgroundColor: '#fff'\n        }\n      }, answer)));\n    });\n\n    _this.state = {\n      open: false,\n      reviewed: false\n    };\n    return _this;\n  }\n\n  _createClass(AnswerRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          index = _this$props.index,\n          question = _this$props.question;\n      var _this$state = this.state,\n          open = _this$state.open,\n          reviewed = _this$state.reviewed;\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", {\n        className: \"answers-list-holder\",\n        key: question.id\n      }, React.createElement(\"div\", {\n        className: \"answer-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col col-120\"\n      }, React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, !question.numeric ? this.mapLetterBubbles({\n        index: index\n      }) : this.mapNumberBubbles({\n        index: index\n      }))), React.createElement(\"div\", {\n        className: \"col col-30\"\n      }, React.createElement(\"span\", {\n        className: \"status-info\"\n      }, question.status)), React.createElement(\"div\", {\n        className: \"col col-43\"\n      }, React.createElement(\"span\", {\n        className: \"play-progress\",\n        \"data-video-id\": \"video001\"\n      }, React.createElement(\"span\", {\n        className: \"play\"\n      }), React.createElement(\"svg\", {\n        viewBox: \"0 0 50 50\",\n        width: \"50\",\n        height: \"50\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, React.createElement(\"circle\", {\n        className: \"circle-static\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      }), React.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      })))), React.createElement(\"div\", {\n        className: \"col col-auto\"\n      }, question.flagged ? React.createElement(\"span\", {\n        className: \"status-answer\",\n        style: {\n          color: '#c0272d'\n        }\n      }, React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }), React.createElement(\"b\", {\n        className: \"status-text\"\n      }, \"Review\")) : null), React.createElement(\"div\", {\n        className: \"dropdown-block col col-35\"\n      }, React.createElement(QuestionModal, {\n        open: open,\n        toggleReviewed: this.toggleReviewed,\n        onOpenQuestionModal: this.onOpenQuestionModal,\n        onCloseQuestionModal: this.onCloseQuestionModal,\n        reviewed: reviewed,\n        question: question\n      }), React.createElement(\"a\", {\n        className: \"modal-trigger\",\n        href: \"#\",\n        onClick: this.onOpenQuestionModal\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")))), question.studentNotes ? React.createElement(\"div\", {\n        className: \"comment-block\"\n      }, React.createElement(\"p\", null, question.studentNotes)) : null));\n    }\n  }]);\n\n  return AnswerRow;\n}(React.Component);\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  sampleAnswers: PropTypes.array.isRequired\n};\nexport default AnswerRow;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailTestAnswerSheetComplete\\components\\WritingPage\\components\\AnswerRow\\index.js"],"names":["React","PropTypes","QuestionModal","AnswerRow","props","setState","open","reviewed","index","letters","sampleAnswers","studentChoice","answer","map","letter","color","borderColor","backgroundColor","backgrounColor","state","question","id","numeric","mapLetterBubbles","mapNumberBubbles","status","flagged","toggleReviewed","onOpenQuestionModal","onCloseQuestionModal","studentNotes","Component","propTypes","object","isRequired","number","array"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport QuestionModal from '../QuestionModal';\r\n\r\nclass AnswerRow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      reviewed: false,\r\n     }\r\n  };\r\n  onOpenQuestionModal = () => this.setState({open: true})\r\n  onCloseQuestionModal = () => this.setState({open: false});\r\n\r\n  toggleReviewed = () => this.setState(({ reviewed }) => ({ reviewed: !reviewed }));\r\n\r\n  mapLetterBubbles = ({index}) => {\r\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\r\n    const { sampleAnswers } = this.props;\r\n    const { studentChoice, answer } = sampleAnswers[index];\r\n    return letters.map(letter => {\r\n      if (letter === answer && letter === studentChoice){\r\n        return (\r\n          <li key={letter[index]}>\r\n          <span className=\"badge-circle badge-circle-bordered\"  style={{color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777'}}>{letter}</span>\r\n        </li>\r\n        )\r\n      }\r\n      if (letter === answer && letter !== studentChoice){\r\n        return (\r\n          <li key={letter[index]}>\r\n            <span className=\"badge-circle badge-circle-bordered\" style={{color: '#32955c', borderColor: '#32955c', backgrounColor: '#fff'}}>{letter}</span>\r\n          </li>\r\n        )\r\n      }\r\n      if (letter !== answer && letter === studentChoice){\r\n        return (\r\n          <li key={letter[index]}>\r\n            <span className=\"badge-circle badge-circle-bordered\" style={{color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41'}}>{letter}</span>\r\n          </li>\r\n        )\r\n      }\r\n      return (\r\n          <li key={letter[index]}>\r\n            <span className=\"badge-circle badge-circle-bordered\">{letter}</span>\r\n          </li>\r\n        )\r\n      }\r\n    )\r\n  };\r\n\r\n  mapNumberBubbles = ({ index} ) => {\r\n    const { sampleAnswers } = this.props;\r\n    const { answer, studentChoice }= sampleAnswers[index];\r\n          if ( answer === studentChoice) {\r\n        return (\r\n          <li key={index}>\r\n            <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777'}}>{answer}</span>\r\n          </li>\r\n        )\r\n      }\r\n      return (\r\n          <React.Fragment>\r\n            <li key={index}>\r\n              <span className=\"badge badge-rounded badge-rounded-bordered\"  style={{color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41'}}>{studentChoice}</span>\r\n            </li>\r\n            <li key={answer} >\r\n              <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#32955c', borderColor: '#32955c', backgroundColor: '#fff'}}>{answer}</span>\r\n            </li>\r\n          </React.Fragment>\r\n        )\r\n  };\r\n\r\n  render() {\r\n    const { index, question } = this.props;\r\n    const { open, reviewed } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <li className=\"answers-list-holder\" key={question.id}>\r\n          <div className=\"answer-row row mb-0\">\r\n            <div className=\"col col-120\">\r\n              <ul className=\"answer-list\"  >\r\n                <Choose>\r\n                  <When condition={!question.numeric}>\r\n                  {this.mapLetterBubbles({index})}\r\n                  </When>\r\n                  <Otherwise>\r\n                  {this.mapNumberBubbles({index})}\r\n                  </Otherwise>\r\n                </Choose>\r\n               </ul>\r\n            </div>\r\n            <div className=\"col col-30\">\r\n              <span className=\"status-info\">{question.status}</span>\r\n            </div>\r\n            <div className=\"col col-43\">\r\n              <span className=\"play-progress\" data-video-id=\"video001\">\r\n                <span className=\"play\"></span>\r\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <circle className=\"circle-static\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\r\n                  <circle className=\"circle-progress\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\r\n                </svg>\r\n              </span>\r\n            </div>\r\n            <div className=\"col col-auto\">\r\n              <If condition={question.flagged}>\r\n                  <span className=\"status-answer\" style={{color: '#c0272d'}}>\r\n                    <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\r\n                  </span>\r\n              </If>\r\n            </div>\r\n            <div className=\"dropdown-block col col-35\">\r\n            <QuestionModal open={open} toggleReviewed={this.toggleReviewed} onOpenQuestionModal={this.onOpenQuestionModal} onCloseQuestionModal={this.onCloseQuestionModal} reviewed={reviewed} question={question}/>\r\n\r\n              <a className='modal-trigger' href=\"#\" onClick={this.onOpenQuestionModal}><i className=\"material-icons dots-icon\">more_vert</i></a>\r\n            </div>\r\n          </div>\r\n          <If condition={question.studentNotes}>\r\n            <div className=\"comment-block\">\r\n              <p>{question.studentNotes}</p>\r\n            </div>\r\n          </If>\r\n        </li>\r\n      </React.Fragment>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nAnswerRow.propTypes = {\r\n  question: PropTypes.object.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  sampleAnswers: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default AnswerRow;\r\n\r\n"]},"metadata":{},"sourceType":"module"}