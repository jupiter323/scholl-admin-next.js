{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport sampleTopics from '../../../../utils/sampleTopics';\nimport worksheetSortOptions from '../../../../../utils/worksheetSortOptions';\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onToggleShowFilters\", () => this.setState(({\n      open\n    }) => ({\n      open: !open\n    })));\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      activeFilters: []\n    }));\n\n    _defineProperty(this, \"handleFilterClick\", filter => {\n      const {\n        activeFilters: currentActiveFilters\n      } = this.state;\n      let activeFilters;\n\n      if (currentActiveFilters.indexOf(filter) === -1) {\n        activeFilters = update(currentActiveFilters, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = currentActiveFilters.indexOf(filter);\n        activeFilters = update(currentActiveFilters, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        activeFilters\n      });\n    });\n\n    _defineProperty(this, \"handleFilterChange\", (event, name) => {\n      const {\n        onSetFilteredTopicState,\n        onUnsetFilteredTopicState,\n        onSetSort\n      } = this.props;\n      const value = event.target ? event.target.value : event;\n      const updatedState = update(this.state, {\n        $merge: {\n          [name]: value\n        }\n      });\n      this.setState(updatedState);\n\n      if (name === 'topic') {\n        if (event === '') {\n          return onUnsetFilteredTopicState();\n        }\n\n        return onSetFilteredTopicState(event);\n      } else if (name === 'sort') {\n        return onSetSort(event);\n      }\n    });\n\n    _defineProperty(this, \"submitNameFilter\", () => {\n      const {\n        onSetFilteredState,\n        onUnsetFilteredState\n      } = this.props;\n      const {\n        worksheetName\n      } = this.state;\n\n      if (worksheetName === '') {\n        onUnsetFilteredState();\n      }\n\n      const transformedName = worksheetName.replace(/\\s/g, \"\").toLowerCase();\n      onSetFilteredState(transformedName);\n    });\n\n    this.state = {\n      open: false,\n      worksheetName: '',\n      topic: {},\n      sort: {},\n      activeFilters: []\n    };\n  }\n\n  render() {\n    const {\n      open,\n      activeFilters,\n      worksheetName,\n      topic,\n      sort\n    } = this.state;\n    const {\n      currentView,\n      onChangeView\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"filter-form-holder\"\n    }, React.createElement(\"ul\", {\n      className: \"collapsible expandable\"\n    }, React.createElement(\"li\", null, React.createElement(\"div\", {\n      className: \"collapsible-body\",\n      style: open ? {\n        display: 'block'\n      } : {\n        display: 'none'\n      }\n    }, React.createElement(\"div\", {\n      className: \"filter-form_checkbox-list-holder justify-center\"\n    }, React.createElement(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"reading\",\n      checked: activeFilters.indexOf('reading') !== -1,\n      onChange: () => this.handleFilterClick('reading')\n    }), React.createElement(\"label\", {\n      htmlFor: \"reading\"\n    }, \"Reading\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"writing\",\n      checked: activeFilters.indexOf('writing') !== -1,\n      onChange: () => this.handleFilterClick('writing')\n    }), React.createElement(\"label\", {\n      htmlFor: \"writing\"\n    }, \"Writing\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"math\",\n      checked: activeFilters.indexOf('math') !== -1,\n      onChange: () => this.handleFilterClick('math')\n    }), React.createElement(\"label\", {\n      htmlFor: \"math\"\n    }, \"Math\"))), React.createElement(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"beginning\",\n      checked: activeFilters.indexOf('beginning') !== -1,\n      onChange: () => this.handleFilterClick('beginning')\n    }), React.createElement(\"label\", {\n      htmlFor: \"beginning\"\n    }, \"Beginning\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"developing\",\n      checked: activeFilters.indexOf('developing') !== -1,\n      onChange: () => this.handleFilterClick('developing')\n    }), React.createElement(\"label\", {\n      htmlFor: \"developing\"\n    }, \"Developing\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"accomplished\",\n      checked: activeFilters.indexOf('accomplished') !== -1,\n      onChange: () => this.handleFilterClick('accomplished')\n    }), React.createElement(\"label\", {\n      htmlFor: \"accomplished\"\n    }, \"Accomplished\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"exemplary\",\n      checked: activeFilters.indexOf('exemplary') !== -1,\n      onChange: () => this.handleFilterClick('exemplary')\n    }), React.createElement(\"label\", {\n      htmlFor: \"exemplary\"\n    }, \"Exemplary\"))), React.createElement(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"unassigned\",\n      checked: activeFilters.indexOf('unassigned') !== -1,\n      onChange: () => this.handleFilterClick('unassigned')\n    }), React.createElement(\"label\", {\n      htmlFor: \"unassigned\"\n    }, \"Unassigned\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"complete\",\n      checked: activeFilters.indexOf('complete') !== -1,\n      onChange: () => this.handleFilterClick('complete')\n    }), React.createElement(\"label\", {\n      htmlFor: \"complete\"\n    }, \"Complete\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"incomplete\",\n      checked: activeFilters.indexOf('incomplete') !== -1,\n      onChange: () => this.handleFilterClick('incomplete')\n    }), React.createElement(\"label\", {\n      htmlFor: \"incomplete\"\n    }, \"Incomplete\"))), React.createElement(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"hasReviewFlags\",\n      checked: activeFilters.indexOf('hasReviewFlags') !== -1,\n      onChange: () => this.handleFilterClick('hasReviewFlags')\n    }), React.createElement(\"label\", {\n      htmlFor: \"hasReviewFlags\"\n    }, \"Has Review Flags\"))), React.createElement(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"dueToday\",\n      checked: activeFilters.indexOf('dueToday') !== -1,\n      onChange: () => this.handleFilterClick('dueToday')\n    }), React.createElement(\"label\", {\n      htmlFor: \"dueToday\"\n    }, \"Due Today\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"dueNextSession\",\n      checked: activeFilters.indexOf('dueNextSession') !== -1,\n      onChange: () => this.handleFilterClick('dueNextSession')\n    }), React.createElement(\"label\", {\n      htmlFor: \"dueNextSession\"\n    }, \"Due By Next Session\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"dueThisWeek\",\n      checked: activeFilters.indexOf('dueThisWeek') !== -1,\n      onChange: () => this.handleFilterClick('dueThisWeek')\n    }), React.createElement(\"label\", {\n      htmlFor: \"dueThisWeek\"\n    }, \"Due this Week\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"overdue\",\n      checked: activeFilters.indexOf('overdue') !== -1,\n      onChange: () => this.handleFilterClick('overdue')\n    }), React.createElement(\"label\", {\n      htmlFor: \"overdue\"\n    }, \"Overdue\"))), React.createElement(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"some-class\",\n      checked: activeFilters.indexOf('class') !== -1,\n      onChange: () => this.handleFilterClick('class')\n    }), React.createElement(\"label\", {\n      htmlFor: \"some-class\"\n    }, \"Some Class\")), React.createElement(\"li\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"tutoring\",\n      checked: activeFilters.indexOf('tutoring') !== -1,\n      onChange: () => this.handleFilterClick('tutoring')\n    }), React.createElement(\"label\", {\n      htmlFor: \"tutoring\"\n    }, \"Tutoring\")))), React.createElement(\"div\", {\n      className: \"d-flex row mb-0 justify-center\"\n    }, React.createElement(\"div\", {\n      className: \"col s12 m3\"\n    }, React.createElement(\"div\", {\n      className: \"search-field input-field\"\n    }, React.createElement(\"input\", {\n      type: \"search\",\n      id: \"name_search\",\n      value: worksheetName,\n      className: \"input-control validate\",\n      onChange: event => this.handleFilterChange(event, 'worksheetName')\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"search-button\",\n      onClick: this.submitNameFilter\n    }, React.createElement(\"i\", {\n      className: \"icon-search\"\n    })), React.createElement(\"label\", {\n      className: worksheetName.length ? 'label active' : 'label',\n      htmlFor: \"name_search\"\n    }, \"Search\"))), React.createElement(\"div\", {\n      className: \"col s12 m3\"\n    }, React.createElement(\"div\", {\n      className: \"input-field\"\n    }, React.createElement(Dropdown, {\n      value: getValueFromState(topic, sampleTopics),\n      onChange: event => this.handleFilterChange(event, 'topic'),\n      options: sampleTopics,\n      label: \"Topic\",\n      stateKey: \"topic\",\n      dropdownKey: \"topic\"\n    }))))), React.createElement(\"div\", {\n      className: \"row mb-0 d-flex align-items-center\"\n    }, React.createElement(\"div\", {\n      className: \"col s12 l4\"\n    }, React.createElement(\"div\", {\n      className: \"row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col s12 xl7\"\n    }, React.createElement(\"div\", {\n      className: \"input-field\"\n    }, React.createElement(Dropdown, {\n      value: getValueFromState(sort, worksheetSortOptions),\n      onChange: event => this.handleFilterChange(event, 'sort'),\n      options: worksheetSortOptions,\n      label: \"Sort By\",\n      stateKey: \"sort\",\n      dropdownKey: \"sort\"\n    }))))), React.createElement(\"div\", {\n      className: \"switcher-block col s12 l4\"\n    }, React.createElement(\"div\", {\n      className: \"view-switcher\"\n    }, React.createElement(\"ul\", {\n      className: \"switcher center-align\"\n    }, React.createElement(\"li\", {\n      \"data-view\": \"view-full\",\n      className: currentView === 'full' ? 'active' : '',\n      onClick: () => onChangeView('full')\n    }, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"Full View\")), React.createElement(\"li\", {\n      \"data-view\": \"view-list\",\n      className: currentView === 'list' ? 'active' : '',\n      onClick: () => onChangeView('list')\n    }, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"List View\"))))), React.createElement(\"div\", {\n      className: \"col s12 l4\"\n    }, React.createElement(\"div\", {\n      className: \"option-filters\"\n    }, React.createElement(\"div\", {\n      className: \"option-item clear\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.onClearFilters\n    }, \"Clear Filters\")), React.createElement(\"div\", {\n      className: \"option-item\"\n    }, React.createElement(\"span\", {\n      className: \"collapsible-header\",\n      onClick: this.onToggleShowFilters\n    }, React.createElement(\"span\", {\n      className: \"open-text\"\n    }, open ? 'Hide Filters' : 'Open Filters')))))))));\n  }\n\n}\n\nexport default FilterSection;","map":null,"metadata":{},"sourceType":"module"}