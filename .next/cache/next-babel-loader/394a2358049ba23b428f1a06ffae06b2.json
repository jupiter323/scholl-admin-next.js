{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-did-mount-set-state */\n\n/* eslint-disable react/no-did-update-set-state */\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport FilterSection from './components/FilterSection';\nimport FullView from './components/FullView';\nimport { dueDateAscending, subjectAscending, subjectDescending, passageAscending, passageDescending, lessonNameDescending, lessonNameAscending, statusDescending, statusAscending, availableDateAscending, availableDateDescending, dueDate, flagsAscending, flagsDescending, completionDateAscending, completionDateDescending, lessonTypeAscending, lessonTypeDescending } from '../../utils/sortFunctions';\nimport ListView from './components/ListView';\nimport AssignLessonModal from './components/AssignLessonModal'; // TODO: compare updatedlessons to lessons and update lesson list\n\nvar DetailLessonList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DetailLessonList, _React$Component);\n\n  function DetailLessonList(props) {\n    var _this;\n\n    _classCallCheck(this, DetailLessonList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DetailLessonList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenModal\", function () {\n      return _this.setState({\n        modalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseModal\", function () {\n      return _this.setState({\n        modalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClearFilters\", function () {\n      return _this.setState({\n        statusFilters: [],\n        subjectFilters: [],\n        completeFilters: [],\n        flagFilters: [],\n        classTypeFilters: [],\n        dueDateFilters: [],\n        unitFilter: \"\",\n        nameFilter: \"\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (lesson) {\n      return _this.setState({\n        nameFilter: lesson\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function (filter) {\n      return _this.setState(_defineProperty({}, filter, \"\"));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeView\", function (view) {\n      return _this.setState({\n        currentView: view,\n        active: view\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetUnitFilter\", function (unit) {\n      return _this.setState({\n        unitFilter: unit\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortLessons\", function (lessons) {\n      var sort = _this.state.sort;\n\n      switch (sort) {\n        case 'subjectAscending':\n          return lessons.sort(subjectAscending);\n\n        case 'subjectDescending':\n          return lessons.sort(subjectDescending);\n\n        case 'passageAscending':\n          return lessons.sort(passageAscending);\n\n        case 'statusAscending':\n          return lessons.sort(statusAscending);\n\n        case 'passageDescending':\n          return lessons.sort(passageDescending);\n\n        case 'statusDescending':\n          return lessons.sort(statusDescending);\n\n        case 'availableDateAscending':\n          return lessons.sort(availableDateAscending);\n\n        case 'availableDateDescending':\n          return lessons.sort(availableDateDescending);\n\n        case 'dueDateDescending':\n          return lessons.sort(dueDate);\n\n        case 'dueDateAscending':\n          return lessons.sort(dueDateAscending);\n\n        case 'flagsAscending':\n          return lessons.sort(flagsAscending);\n\n        case 'flagsDescending':\n          return lessons.sort(flagsDescending);\n\n        case 'lessonNameAscending':\n          return lessons.sort(lessonNameAscending);\n\n        case 'lessonNameDescending':\n          return lessons.sort(lessonNameDescending);\n\n        case 'completionDateAscending':\n          return lessons.sort(completionDateAscending);\n\n        case 'completionDateDescending':\n          return lessons.sort(completionDateDescending);\n\n        case 'lessonTypeAscending':\n          return lessons.sort(lessonTypeAscending);\n\n        case 'lessonTypeDescending':\n          return lessons.sort(lessonTypeDescending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddUpdatedLessons\", function (lessons) {\n      return _this.setState({\n        updatedLessons: lessons\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByName\", function () {\n      var _this$state = _this.state,\n          lessons = _this$state.lessons,\n          nameFilter = _this$state.nameFilter;\n      return lessons.reduce(function (finalArr, currentLesson) {\n        var lessonName = currentLesson.lessonName;\n        var lessonString = lessonName.replace(/\\s/g, \"\").toLowerCase();\n\n        if (lessonString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n          finalArr.push(currentLesson);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloneLesson\", function (index) {\n      var lessons = _this.state.lessons;\n\n      _this.setState(function (prevState) {\n        prevState.lessons.push(lessons[index]);\n        return {\n          lessons: prevState.lessons\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteLesson\", function (index) {\n      var lessons = _this.state.lessons;\n\n      var newLessonsArray = _this.arrayItemRemover(lessons, lessons[index]);\n\n      _this.setState({\n        lessons: newLessonsArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterLessons\", function () {\n      var _this$state2 = _this.state,\n          statusFilters = _this$state2.statusFilters,\n          subjectFilters = _this$state2.subjectFilters,\n          unitFilter = _this$state2.unitFilter,\n          classTypeFilters = _this$state2.classTypeFilters,\n          scoreStatusFilters = _this$state2.scoreStatusFilters,\n          flagFilters = _this$state2.flagFilters,\n          allLessons = _this$state2.lessons;\n      var lessons = allLessons;\n\n      if (scoreStatusFilters.length && scoreStatusFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return scoreStatusFilters.indexOf(lesson.scoreStatus) !== -1;\n        });\n      }\n\n      if (statusFilters.length && statusFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return statusFilters.indexOf(lesson.status) !== -1;\n        });\n      }\n\n      if (subjectFilters.length && subjectFilters.indexOf('all') === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return subjectFilters.indexOf(lesson.subject) !== -1;\n        });\n      }\n\n      if (flagFilters.length && flagFilters.indexOf('all') === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return lesson.flags.length !== 0;\n        });\n      }\n\n      if (classTypeFilters.length && classTypeFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return classTypeFilters.indexOf(lesson.type) !== -1;\n        });\n      }\n\n      if (unitFilter.length && unitFilter.indexOf('all') === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return unitFilter.indexOf(lesson.unit) !== -1;\n        });\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMappableLessons\", function () {\n      var _this$state3 = _this.state,\n          sort = _this$state3.sort,\n          unitFilter = _this$state3.unitFilter,\n          lessons = _this$state3.lessons,\n          dueDateFilters = _this$state3.dueDateFilters,\n          nameFilter = _this$state3.nameFilter,\n          statusFilters = _this$state3.statusFilters,\n          subjectFilters = _this$state3.subjectFilters,\n          scoreStatusFilters = _this$state3.scoreStatusFilters,\n          classTypeFilters = _this$state3.classTypeFilters,\n          flagFilters = _this$state3.flagFilters;\n      var mappableLessons = lessons;\n\n      if (nameFilter.length) {\n        mappableLessons = _this.onFilterByName();\n      }\n\n      if (statusFilters.length || unitFilter.length || scoreStatusFilters.length || subjectFilters.length || classTypeFilters.length || flagFilters.length) {\n        mappableLessons = _this.onFilterLessons();\n      }\n\n      if (dueDateFilters.length) {\n        mappableLessons = _this.filterDueDate();\n      }\n\n      if (sort) {\n        return _this.onSortLessons(mappableLessons);\n      }\n\n      return mappableLessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterDueDate\", function () {\n      var user = _this.props.user;\n      var _this$state4 = _this.state,\n          dueDateFilters = _this$state4.dueDateFilters,\n          allLessons = _this$state4.lessons;\n      var lessons = allLessons;\n\n      if (dueDateFilters.length && dueDateFilters.indexOf('all') === -1) {\n        if (dueDateFilters.includes('overdue')) {\n          lessons = lessons.filter(function (lesson) {\n            return lesson.overdue === true;\n          });\n        }\n\n        if (dueDateFilters.includes('dueToday')) {\n          lessons = lessons.filter(function (lesson) {\n            return lesson.dueDate === moment().format(\"MM/DD/Y\");\n          });\n        }\n\n        if (dueDateFilters.includes('dueThisWeek')) {\n          lessons = lessons.filter(function (lesson) {\n            return moment(lesson.dueDate).format('w') === moment().format(\"W\");\n          });\n        }\n\n        if (dueDateFilters.includes('dueNextSession')) {\n          lessons = lessons.filter(function (lesson) {\n            return moment(user.nextSession).isSameOrAfter(lesson.dueDate, 'day');\n          });\n        }\n\n        return lessons;\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFilterClick\", function (filterType, filter) {\n      var _this$state5 = _this.state,\n          currentSubjectFilters = _this$state5.subjectFilters,\n          currentScoreStatusFilters = _this$state5.scoreStatusFilters,\n          currentStatusFilters = _this$state5.statusFilters,\n          currentFlagFilters = _this$state5.flagFilters,\n          currentDueDateFilters = _this$state5.dueDateFilters,\n          currentClassTypeFilters = _this$state5.classTypeFilters;\n      var modifiedFilterCurrentState;\n      var modifiedFilterName;\n      var modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'status':\n          modifiedFilterCurrentState = currentStatusFilters;\n          modifiedFilterName = 'statusFilters';\n          break;\n\n        case 'score':\n          modifiedFilterCurrentState = currentScoreStatusFilters;\n          modifiedFilterName = 'scoreStatusFilters';\n          break;\n\n        case 'flags':\n          modifiedFilterCurrentState = currentFlagFilters;\n          modifiedFilterName = 'flagFilters';\n          break;\n\n        case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n\n        case 'classType':\n          modifiedFilterCurrentState = currentClassTypeFilters;\n          modifiedFilterName = 'classTypeFilters';\n          break;\n\n        default:\n          break;\n      } // Decide whether we're adding or removing the selected filter\n\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        var filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      _this.setState(_defineProperty({}, modifiedFilterName, modifiedFilterUpdatedState));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"arrayItemRemover\", function (array, value) {\n      return array.filter(function (lesson) {\n        return lesson !== value;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCurrentView\", function () {\n      var active = _this.state.active;\n      var user = _this.props.user;\n\n      if (active === 'full') {\n        return __jsx(FullView, {\n          user: user,\n          lessons: _this.getMappableLessons(),\n          onDeleteLesson: _this.onDeleteLesson,\n          onCloneLesson: _this.onCloneLesson\n        });\n      }\n\n      return __jsx(ListView, {\n        user: user,\n        lessons: _this.getMappableLessons(),\n        onSetSort: _this.onSetSort,\n        sort: _this.state.sort\n      });\n    });\n\n    _this.state = {\n      test: true,\n      lessons: _this.props.user.lessons,\n      modalOpen: false,\n      currentView: 'full',\n      active: 'full',\n      statusFilters: [],\n      subjectFilters: [],\n      scoreStatusFilters: [],\n      flagFilters: [],\n      classTypeFilters: [],\n      dueDateFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\",\n      updatedLessons: []\n    };\n    return _this;\n  }\n\n  _createClass(DetailLessonList, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state6 = this.state,\n          currentView = _this$state6.currentView,\n          subjectFilters = _this$state6.subjectFilters,\n          statusFilters = _this$state6.statusFilters,\n          scoreStatusFilters = _this$state6.scoreStatusFilters,\n          flagFilters = _this$state6.flagFilters,\n          dueDateFilters = _this$state6.dueDateFilters,\n          classTypeFilters = _this$state6.classTypeFilters;\n      return __jsx(React.Fragment, null, __jsx(FilterSection, {\n        currentView: currentView,\n        onChangeView: this.onChangeView,\n        onHandleFilterClick: this.onHandleFilterClick,\n        onClearFilters: this.onClearFilters,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState,\n        onSetSort: this.onSetSort,\n        subjectFilters: subjectFilters,\n        statusFilters: statusFilters,\n        scoreStatusFilters: scoreStatusFilters,\n        flagFilters: flagFilters,\n        dueDateFilters: dueDateFilters,\n        classTypeFilters: classTypeFilters,\n        handleFilterClick: this.handleFilterClick,\n        onSetUnitFilter: this.onSetUnitFilter,\n        filterDueDate: this.filterDueDate\n      }), this.renderCurrentView(), __jsx(AssignLessonModal, {\n        open: this.state.modalOpen,\n        lessons: this.props.user.lessons,\n        onCloseModal: this.onCloseModal,\n        onAddUpdatedLessons: this.onAddUpdatedLessons\n      }), __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onOpenModal,\n        className: \"waves-effect waves-teal btn add-btn modal-trigger\"\n      }, __jsx(\"i\", {\n        className: \"material-icons\"\n      }, \"add\"), \"Assign Lesson\"));\n    }\n  }]);\n\n  return DetailLessonList;\n}(React.Component);\n\nexport default DetailLessonList;","map":null,"metadata":{},"sourceType":"module"}