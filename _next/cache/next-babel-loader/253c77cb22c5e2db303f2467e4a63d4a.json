{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/pages/students.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* jshint esversion: 6 */\nimport React, { Component } from \"react\";\nimport update from \"immutability-helper\";\nimport Router from \"next/router\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { createStructuredSelector } from \"reselect\";\nimport { fetchStudents, deleteStudent, setStudents, setActiveStudent } from \"../components/Student/index/actions\";\nimport { createStudentApi } from \"../components/Student/index/api\";\nimport { makeSelectStudents } from \"../components/Student/index/selectors\";\nimport StudentCard from \"../components/Student/components/StudentCard\";\nimport FilterSection from \"../components/Student/ListPage/Components/FilterSection\";\nimport StudentModal from \"../components/Student/components/StudentModal\";\nimport IndividualStudentPage from \"../components/Student/IndividualStudentPage\";\nimport LocationModal from \"../components/Location/components/LocationModal\";\nimport { studentFirstNameAscending, studentFirstNameDescending, studentLastNameAscending, studentLastNameDescending } from \"../components/utils/sortFunctions\";\nimport { loggedIn, logIn } from \"../utils/AuthService\";\nimport { fetchAllLocationns } from '../components/Location/index/actions';\nimport { makeSelectLocations } from \"../components/Location/index/selectors\";\nimport { makeSelectCurrentUser } from \"../components/User/index/selectors\"; // eslint-disable-next-line prefer-template\n\nvar idGenerator = function idGenerator() {\n  return \"\".concat(subIdGenerator() + subIdGenerator(), \"-\").concat(subIdGenerator(), \"-\").concat(subIdGenerator(), \"-\").concat(subIdGenerator(), \"-\").concat(subIdGenerator()).concat(subIdGenerator()).concat(subIdGenerator());\n};\n\nvar subIdGenerator = function subIdGenerator() {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar Students =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Students, _Component);\n\n  function Students(props) {\n    var _this;\n\n    _classCallCheck(this, Students);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Students).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      if (!loggedIn()) {\n        Router.push(\"/login\");\n      } else {\n        var _this$props = _this.props,\n            onFetchStudents = _this$props.onFetchStudents,\n            students = _this$props.students,\n            locations = _this$props.locations,\n            onFetchAllLocationns = _this$props.onFetchAllLocationns;\n\n        if (students.length === 0) {\n          onFetchStudents();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillReceiveProps\", function (nextProps) {\n      var onFetchAllLocationns = _this.props.onFetchAllLocationns;\n      var locations = nextProps.locations;\n\n      if (!locations && nextProps.currentUser) {\n        var id = nextProps.currentUser.id;\n        onFetchAllLocationns(id);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenStudentModal\", function () {\n      return _this.setState({\n        studentModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseStudentModal\", function () {\n      return _this.setState({\n        studentModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenLocationModal\", function () {\n      return _this.setState({\n        locationModalOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseLocationModal\", function () {\n      return _this.setState({\n        locationModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (filterName) {\n      return _this.setState({\n        filterName: filterName\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function () {\n      return _this.setState({\n        filterName: \"\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredLocationState\", function (location) {\n      return _this.setState({\n        location: location\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredLocationState\", function () {\n      return _this.setState({\n        location: \"\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveNewStudent\", function _callee() {\n      var _newTestStudent;\n\n      var previousStudentState, onFetchStudents, _previousStudentState, firstName, lastName, _previousStudentState2, first_name, last_name, email, _previousStudentState3, state, addressLine, city, phone, zip, locations, formattedLocations, studentPayload, _ref, id, studentInformation, contactInformation, emailAddress, location, newTestStudent, newStudent, updatedStudents;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              previousStudentState = _this.state.newStudent;\n              onFetchStudents = _this.props.onFetchStudents;\n              _previousStudentState = previousStudentState.studentInformation, firstName = _previousStudentState.firstName, lastName = _previousStudentState.lastName; // dispatch add student action\n\n              if (!(!firstName || !lastName)) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\", _this.setState({\n                hasRequiredFields: false\n              }));\n\n            case 5:\n              _previousStudentState2 = previousStudentState.studentInformation, first_name = _previousStudentState2.firstName, last_name = _previousStudentState2.lastName;\n              email = previousStudentState.emailAddress.email;\n              _previousStudentState3 = previousStudentState.contactInformation, state = _previousStudentState3.state, addressLine = _previousStudentState3.addressLine, city = _previousStudentState3.city, phone = _previousStudentState3.phone, zip = _previousStudentState3.zipCode;\n              locations = previousStudentState.location.locations;\n              formattedLocations = locations.map(function (location) {\n                return location.id;\n              });\n              studentPayload = {\n                first_name: first_name,\n                last_name: last_name,\n                email: email,\n                state: state,\n                locations: formattedLocations,\n                phone: phone,\n                address: \"\".concat(addressLine),\n                city: city,\n                zip: zip\n              };\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(createStudentApi(studentPayload));\n\n            case 13:\n              _ref = _context.sent;\n              id = _ref.user_id;\n              studentInformation = previousStudentState.studentInformation, contactInformation = previousStudentState.contactInformation, emailAddress = previousStudentState.emailAddress, location = previousStudentState.location;\n              newTestStudent = (_newTestStudent = {\n                id: id,\n                active: false,\n                studentInformation: studentInformation,\n                contactInformation: contactInformation,\n                emailAddress: emailAddress,\n                location: location,\n                stats: {\n                  complete: 0,\n                  overdue: 0,\n                  practice_tests: 0,\n                  sessions_complete: 0,\n                  total_sessions: 0\n                },\n                tutor: \"\",\n                testScores: {\n                  initialScore: \"0\",\n                  currentScore: \"0\"\n                },\n                courseContext: {\n                  courseStartDateOption: \"secondOption\",\n                  courseStartDate: \"\",\n                  courseEndDateOption: \"secondOption\",\n                  courseEndDate: \"\",\n                  targetTestDate: \"12/12/2019\",\n                  targetScore: \"1400\",\n                  highSchool: \"Everglades High\",\n                  graduationYear: \"2018\"\n                },\n                courseProgress: {\n                  startDate: \"6/03/18\",\n                  testDate: \"10/14/18\",\n                  progress: \"77\",\n                  improvement: \"82\",\n                  lessons: \"73\",\n                  instruction: \"68\",\n                  practiceTests: \"47\"\n                },\n                overdueWork: {\n                  lessons: \"12\",\n                  worksheets: \"3\",\n                  quizzes: \"1\",\n                  practiceTests: \"5\"\n                },\n                summary: {\n                  questionsAnswered: \"791\",\n                  videoWatched: \"416\",\n                  notesTaken: \"52\",\n                  totalTimeLoggedIn: \"220\",\n                  lastLogIn: \"3:12\",\n                  loginTimeCode: \"pm\",\n                  onTimePercentage: \"77\"\n                }\n              }, _defineProperty(_newTestStudent, \"testScores\", {\n                initialScore: \"1040\",\n                currentScore: \"1300\",\n                compositeScore: {\n                  reading: \"83\",\n                  writing: \"31\",\n                  math: \"105\",\n                  composite: \"218\"\n                },\n                subjectScores: {\n                  reading: \"58\",\n                  writing: \"44\",\n                  math: \"91\",\n                  composite: \"195\"\n                }\n              }), _defineProperty(_newTestStudent, \"strengthsAndWeaknesses\", {\n                reading: {\n                  correctAnswers: \"32\",\n                  totalAnswers: \"52\"\n                },\n                writing: {\n                  correctAnswers: \"35\",\n                  totalAnswers: \"52\"\n                },\n                math: {\n                  correctAnswers: \"37\",\n                  totalAnswers: \"52\"\n                }\n              }), _newTestStudent);\n              newStudent = update(previousStudentState, {\n                $set: {\n                  active: false,\n                  studentInformation: {\n                    firstName: \"\",\n                    lastName: \"\"\n                  },\n                  contactInformation: {\n                    phone: \"\",\n                    addressLine: \"\",\n                    city: \"\",\n                    state: \"\",\n                    zipCode: \"\"\n                  },\n                  emailAddress: {\n                    email: \"\"\n                  },\n                  location: {\n                    locations: []\n                  }\n                }\n              });\n\n              _this.setState({\n                newStudent: newStudent\n              });\n\n              updatedStudents = update(_this.state.students, {\n                $push: [newTestStudent]\n              });\n\n              _this.setState({\n                students: updatedStudents\n              }); // const { onSetStudents } = this.props;\n              // onSetStudents(updatedStudents);\n\n\n              _this.onCloseStudentModal();\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteNewStudent\", function () {\n      var previousStudentState = _this.state.newStudent;\n      var newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: \"\",\n            lastName: \"\"\n          },\n          contactInformation: {\n            phone: \"\",\n            addressLine: \"\",\n            city: \"\",\n            state: \"\",\n            zipCode: \"\"\n          },\n          emailAddress: {\n            email: \"\"\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n\n      _this.setState({\n        newStudent: newStudent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRemoveLocation\", function (index) {\n      var previousStudentState = _this.state.newStudent;\n      var locations = _this.state.newStudent.location.locations;\n\n      var newLocationsArray = _this.arrayItemRemover(locations, locations[index]);\n\n      var newStudent = update(previousStudentState, {\n        location: {\n          $set: {\n            locations: newLocationsArray\n          }\n        }\n      });\n\n      _this.setState({\n        newStudent: newStudent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByName\", function () {\n      var _this$state = _this.state,\n          students = _this$state.students,\n          nameFilter = _this$state.nameFilter;\n      return students.reduce(function (finalArr, currentStudent) {\n        var _currentStudent$stude = currentStudent.studentInformation,\n            firstName = _currentStudent$stude.firstName,\n            lastName = _currentStudent$stude.lastName;\n        var studentString = \"\".concat(firstName).concat(lastName).replace(/\\s/g, \"\").toLowerCase();\n\n        if (studentString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n          finalArr.push(currentStudent);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleStudentCard\", function _callee2(index) {\n      var students, onSetActiveStudent;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              students = _this.state.students;\n              onSetActiveStudent = _this.props.onSetActiveStudent;\n              onSetActiveStudent(students[index]);\n\n              _this.setState({\n                selectedStudent: students[index]\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRedirectToStudentPage\", function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        selectedStudent: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteStudent\", function (index) {\n      var onDeleteStudent = _this.props.onDeleteStudent;\n      var students = _this.state.students; // Dispatch deleteStudent\n      // eslint-disable-next-line camelcase\n\n      var student_id = students[index].id;\n      onDeleteStudent(student_id);\n\n      var newStudentArray = _this.arrayItemRemover(students, students[index]);\n\n      _this.setState({\n        students: newStudentArray\n      });\n\n      _this.onCloseDropdown();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloneStudent\", function (index) {\n      var students = _this.state.students;\n      var newStudent = update(students[index], {\n        id: {\n          $set: idGenerator()\n        }\n      });\n\n      _this.setState(function (prevState) {\n        prevState.students.push(newStudent);\n        return {\n          students: prevState.students\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event, name, section) {\n      var previousStudentState = _this.state.newStudent;\n      var value = event.target ? event.target.value : event;\n      var updatedStudent = update(previousStudentState, _defineProperty({}, section, {\n        $merge: _defineProperty({}, name, value)\n      }));\n\n      _this.setState({\n        newStudent: updatedStudent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveStudentChanges\", function (updatedStudent) {\n      var originalStudents = _this.state.students;\n      var active = updatedStudent.active,\n          studentInformation = updatedStudent.studentInformation,\n          contactInformation = updatedStudent.contactInformation,\n          emailAddress = updatedStudent.emailAddress,\n          location = updatedStudent.location;\n      var studentToUpdate = originalStudents.filter(function (student) {\n        return student.id === updatedStudent.id;\n      })[0];\n      var updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n      var students = update(originalStudents, _defineProperty({}, updatedStudentIndex, {\n        $merge: {\n          active: active,\n          studentInformation: studentInformation,\n          contactInformation: contactInformation,\n          emailAddress: emailAddress,\n          location: location\n        }\n      }));\n\n      _this.setState({\n        students: students\n      });\n\n      var onSetStudents = _this.props.onSetStudents;\n      onSetStudents(students);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIsOpen: true,\n        dropdownIndex: dropdownIndex\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false,\n        dropdownIndex: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortStudents\", function (students) {\n      var sort = _this.state.sort;\n\n      switch (sort) {\n        case \"lastNameDescending\":\n          return students.sort(studentLastNameDescending);\n\n        case \"lastNameAscending\":\n          return students.sort(studentLastNameAscending);\n\n        case \"firstNameDescending\":\n          return students.sort(studentFirstNameDescending);\n\n        case \"firstNameAscending\":\n          return students.sort(studentFirstNameAscending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMappableStudents\", function () {\n      var _this$state2 = _this.state,\n          sort = _this$state2.sort,\n          students = _this$state2.students;\n      var mappableStudents = students;\n\n      if (sort) {\n        return _this.onSortStudents(mappableStudents);\n      }\n\n      return mappableStudents;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"arrayItemRemover\", function (array, value) {\n      return array.filter(function (student) {\n        return student !== value;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapStudents\", function () {\n      return _this.getMappableStudents().map(function (student, index) {\n        return __jsx(StudentCard, {\n          student: student,\n          index: index,\n          id: student.id,\n          key: student.id,\n          dropdownIsOpen: _this.state.dropdownIsOpen,\n          dropdownIndex: _this.state.dropdownIndex,\n          onSetDropdown: _this.onSetDropdown,\n          onCloseDropdown: _this.onCloseDropdown,\n          onHandleStudentCard: function onHandleStudentCard() {\n            return _this.onHandleStudentCard(index);\n          },\n          onDeleteStudent: function onDeleteStudent() {\n            return _this.onDeleteStudent(index);\n          },\n          onCloneStudent: function onCloneStudent() {\n            return _this.onCloneStudent(index, student.id);\n          },\n          onSaveStudentChanges: _this.onSaveStudentChanges,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 436\n          },\n          __self: this\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateStudentStatus\", function () {\n      return _this.setState({\n        selectedStudent: _objectSpread({}, _this.state.selectedStudent, {\n          active: true\n        })\n      });\n    });\n\n    _this.state = {\n      selectedStudent: null,\n      students: _this.props.students,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      location: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\"\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\"\n        },\n        emailAddress: {\n          email: \"\"\n        },\n        location: {\n          locations: []\n        }\n      },\n      hasRequiredFields: true\n    };\n    return _this;\n  }\n\n  _createClass(Students, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var studentState = this.state.students;\n      var students = this.props.students;\n\n      if (studentState.length === 0 && students.length > 0) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          students: students\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          studentModalOpen = _this$state3.studentModalOpen,\n          selectedStudent = _this$state3.selectedStudent;\n      return __jsx(\"main\", {\n        id: \"main\",\n        role: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"main-holder grey lighten-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457\n        },\n        __self: this\n      }, __jsx(StickyContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      }, !selectedStudent && __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460\n        },\n        __self: this\n      }, __jsx(Sticky, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461\n        },\n        __self: this\n      }, function (_ref2) {\n        var style = _ref2.style;\n        return __jsx(\"div\", {\n          className: \"title-row card-panel\",\n          style: _objectSpread({}, style, {\n            zIndex: 1999\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 463\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          className: \"mobile-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 464\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          href: \"#\",\n          \"data-target\": \"slide-out\",\n          className: \"sidenav-trigger\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 465\n          },\n          __self: this\n        }, __jsx(\"i\", {\n          className: \"material-icons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 466\n          },\n          __self: this\n        }, \"menu\"))), __jsx(\"h2\", {\n          className: \"h1 white-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          className: \"heading-holder\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 470\n          },\n          __self: this\n        }, __jsx(\"i\", {\n          className: \"icon-student\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 471\n          },\n          __self: this\n        }), __jsx(\"span\", {\n          className: \"heading-block\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472\n          },\n          __self: this\n        }, \"Students\"))));\n      }), __jsx(FilterSection, {\n        onSetSort: this.onSetSort,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState,\n        onSetFilteredLocationState: this.onSetFilteredLocationState,\n        onUnsetFilteredLocationState: this.onUnsetFilteredLocationState,\n        handleFilterClick: this.handleFilterClick,\n        onFilterByName: this.onFilterByName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"content-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"row d-flex-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488\n        },\n        __self: this\n      }, this.mapStudents())), __jsx(\"a\", {\n        href: \"#\",\n        className: \"waves-effect waves-teal btn add-btn modal-trigger\",\n        onClick: this.onOpenStudentModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }, __jsx(\"i\", {\n        className: \"material-icons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        },\n        __self: this\n      }, \"add\"), \"New Student\"), __jsx(StudentModal, {\n        open: studentModalOpen,\n        onClose: this.onCloseStudentModal,\n        handleChange: this.handleChange,\n        state: this.state.newStudent,\n        onSave: this.onSaveNewStudent,\n        onOpenLocationModal: this.onOpenLocationModal,\n        onRemoveLocation: this.onRemoveLocation,\n        onDeleteNewStudent: this.onDeleteNewStudent,\n        hasRequiredFields: this.state.hasRequiredFields,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      }), __jsx(LocationModal, {\n        open: this.state.locationModalOpen,\n        onClose: this.onCloseLocationModal,\n        handleLocationsChange: function handleLocationsChange(selectedLocations) {\n          return _this2.handleChange(selectedLocations, \"locations\", \"location\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      })), selectedStudent && __jsx(IndividualStudentPage, {\n        student: selectedStudent,\n        onRedirectToStudentPage: this.onRedirectToStudentPage,\n        updateStudentStatus: this.updateStudentStatus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Students;\n}(Component);\n\nStudents.propTypes = {\n  students: PropTypes.array.isRequired,\n  onFetchStudents: PropTypes.func.isRequired,\n  onCreateStudent: PropTypes.func.isRequired,\n  onDeleteStudent: PropTypes.func.isRequired,\n  onSetStudents: PropTypes.func.isRequired,\n  locations: PropTypes.array.isRequired\n};\nvar mapStateToProps = createStructuredSelector({\n  students: makeSelectStudents(),\n  locations: makeSelectLocations(),\n  currentUser: makeSelectCurrentUser()\n});\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onDeleteStudent: function onDeleteStudent(id) {\n      return dispatch(deleteStudent(id));\n    },\n    onFetchStudents: function onFetchStudents() {\n      return dispatch(fetchStudents());\n    },\n    onSetStudents: function onSetStudents(students) {\n      return dispatch(setStudents(students));\n    },\n    onSetActiveStudent: function onSetActiveStudent(student) {\n      return dispatch(setActiveStudent(student));\n    },\n    onFetchAllLocationns: function onFetchAllLocationns(user_id) {\n      return dispatch(fetchAllLocationns(user_id));\n    }\n  };\n};\n\nvar withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(Students);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/pages/students.js"],"names":["React","Component","update","Router","StickyContainer","Sticky","compose","connect","PropTypes","createStructuredSelector","fetchStudents","deleteStudent","setStudents","setActiveStudent","createStudentApi","makeSelectStudents","StudentCard","FilterSection","StudentModal","IndividualStudentPage","LocationModal","studentFirstNameAscending","studentFirstNameDescending","studentLastNameAscending","studentLastNameDescending","loggedIn","logIn","fetchAllLocationns","makeSelectLocations","makeSelectCurrentUser","idGenerator","subIdGenerator","Math","floor","random","toString","substring","Students","props","push","onFetchStudents","students","locations","onFetchAllLocationns","length","nextProps","currentUser","id","setState","studentModalOpen","locationModalOpen","sort","filterName","location","previousStudentState","state","newStudent","studentInformation","firstName","lastName","hasRequiredFields","first_name","last_name","email","emailAddress","contactInformation","addressLine","city","phone","zip","zipCode","formattedLocations","map","studentPayload","address","user_id","newTestStudent","active","stats","complete","overdue","practice_tests","sessions_complete","total_sessions","tutor","testScores","initialScore","currentScore","courseContext","courseStartDateOption","courseStartDate","courseEndDateOption","courseEndDate","targetTestDate","targetScore","highSchool","graduationYear","courseProgress","startDate","testDate","progress","improvement","lessons","instruction","practiceTests","overdueWork","worksheets","quizzes","summary","questionsAnswered","videoWatched","notesTaken","totalTimeLoggedIn","lastLogIn","loginTimeCode","onTimePercentage","compositeScore","reading","writing","math","composite","subjectScores","correctAnswers","totalAnswers","$set","updatedStudents","$push","onCloseStudentModal","index","newLocationsArray","arrayItemRemover","nameFilter","reduce","finalArr","currentStudent","studentString","replace","toLowerCase","indexOf","onSetActiveStudent","selectedStudent","event","preventDefault","onDeleteStudent","student_id","newStudentArray","onCloseDropdown","prevState","name","section","value","target","updatedStudent","$merge","originalStudents","studentToUpdate","filter","student","updatedStudentIndex","onSetStudents","dropdownIndex","dropdownIsOpen","mappableStudents","onSortStudents","array","getMappableStudents","onSetDropdown","onHandleStudentCard","onCloneStudent","onSaveStudentChanges","studentState","style","zIndex","onSetSort","onSetFilteredState","onUnsetFilteredState","onSetFilteredLocationState","onUnsetFilteredLocationState","handleFilterClick","onFilterByName","mapStudents","onOpenStudentModal","handleChange","onSaveNewStudent","onOpenLocationModal","onRemoveLocation","onDeleteNewStudent","onCloseLocationModal","selectedLocations","onRedirectToStudentPage","updateStudentStatus","propTypes","isRequired","func","onCreateStudent","mapStateToProps","mapDispatchToProps","dispatch","withConnect"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,eAAT,EAA0BC,MAA1B,QAAwC,cAAxC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,gBAJF,QAKO,qCALP;AAQA,SAASC,gBAAT,QAAiC,iCAAjC;AAEA,SAASC,kBAAT,QAAmC,uCAAnC;AACA,OAAOC,WAAP,MAAwB,8CAAxB;AACA,OAAOC,aAAP,MAA0B,yDAA1B;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,OAAOC,qBAAP,MAAkC,6CAAlC;AACA,OAAOC,aAAP,MAA0B,iDAA1B;AAEA,SACEC,yBADF,EAEEC,0BAFF,EAGEC,wBAHF,EAIEC,yBAJF,QAKO,mCALP;AAMA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,sBAAhC;AAGA,SACEC,kBADF,QAEO,sCAFP;AAIA,SAASC,mBAAT,QAAoC,wCAApC;AACA,SAASC,qBAAT,QAAsC,oCAAtC,C,CAEA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,mBACfC,cAAc,KACjBA,cAAc,EAFI,cAEEA,cAAc,EAFhB,cAEsBA,cAAc,EAFpC,cAE0CA,cAAc,EAFxD,cAE8DA,cAAc,EAF5E,SAEiFA,cAAc,EAF/F,SAEoGA,cAAc,EAFlH;AAAA,CAApB;;AAGA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SACrBC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAID,IAAI,CAACE,MAAL,EAAL,IAAsB,OAAjC,EACGC,QADH,CACY,EADZ,EAEGC,SAFH,CAEa,CAFb,CADqB;AAAA,CAAvB;;IAKMC,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;;AADiB,wEAoCC,YAAM;AACxB,UAAI,CAACb,QAAQ,EAAb,EAAiB;AACftB,QAAAA,MAAM,CAACoC,IAAP,CAAY,QAAZ;AACD,OAFD,MAEO;AAAA,0BACkE,MAAKD,KADvE;AAAA,YACGE,eADH,eACGA,eADH;AAAA,YACoBC,QADpB,eACoBA,QADpB;AAAA,YAC8BC,SAD9B,eAC8BA,SAD9B;AAAA,YACyCC,oBADzC,eACyCA,oBADzC;;AAEL,YAAIF,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzBJ,UAAAA,eAAe;AAChB;AACF;AACF,KA7CkB;;AAAA,gFA+CS,UAACK,SAAD,EAAe;AAAA,UACjCF,oBADiC,GACR,MAAKL,KADG,CACjCK,oBADiC;AAAA,UAEjCD,SAFiC,GAEnBG,SAFmB,CAEjCH,SAFiC;;AAGzC,UAAI,CAACA,SAAD,IAAcG,SAAS,CAACC,WAA5B,EAAyC;AAAA,YAChBC,EADgB,GACPF,SADO,CAC/BC,WAD+B,CAChBC,EADgB;AAEvCJ,QAAAA,oBAAoB,CAACI,EAAD,CAApB;AACD;AACF,KAtDkB;;AAAA,yEAiEE;AAAA,aAAM,MAAKC,QAAL,CAAc;AAAEC,QAAAA,gBAAgB,EAAE;AAApB,OAAd,CAAN;AAAA,KAjEF;;AAAA,0EAkEG;AAAA,aAAM,MAAKD,QAAL,CAAc;AAAEC,QAAAA,gBAAgB,EAAE;AAApB,OAAd,CAAN;AAAA,KAlEH;;AAAA,0EAmEG;AAAA,aAAM,MAAKD,QAAL,CAAc;AAAEE,QAAAA,iBAAiB,EAAE;AAArB,OAAd,CAAN;AAAA,KAnEH;;AAAA,2EAoEI;AAAA,aAAM,MAAKF,QAAL,CAAc;AAAEE,QAAAA,iBAAiB,EAAE;AAArB,OAAd,CAAN;AAAA,KApEJ;;AAAA,gEAsEP,UAAAC,IAAI;AAAA,aAAI,MAAKH,QAAL,CAAc;AAAEG,QAAAA,IAAI,EAAJA;AAAF,OAAd,CAAJ;AAAA,KAtEG;;AAAA,yEAuEE,UAAAC,UAAU;AAAA,aAAI,MAAKJ,QAAL,CAAc;AAAEI,QAAAA,UAAU,EAAVA;AAAF,OAAd,CAAJ;AAAA,KAvEZ;;AAAA,2EAwEI;AAAA,aAAM,MAAKJ,QAAL,CAAc;AAAEI,QAAAA,UAAU,EAAE;AAAd,OAAd,CAAN;AAAA,KAxEJ;;AAAA,iFA0EU,UAAAC,QAAQ;AAAA,aAAI,MAAKL,QAAL,CAAc;AAAEK,QAAAA,QAAQ,EAARA;AAAF,OAAd,CAAJ;AAAA,KA1ElB;;AAAA,mFA2EY;AAAA,aAAM,MAAKL,QAAL,CAAc;AAAEK,QAAAA,QAAQ,EAAE;AAAZ,OAAd,CAAN;AAAA,KA3EZ;;AAAA,uEA8EA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGC,cAAAA,oBADH,GAC4B,MAAKC,KADjC,CACTC,UADS;AAEThB,cAAAA,eAFS,GAEW,MAAKF,KAFhB,CAETE,eAFS;AAAA,sCAGec,oBAAoB,CAACG,kBAHpC,EAGTC,SAHS,yBAGTA,SAHS,EAGEC,QAHF,yBAGEA,QAHF,EAIjB;;AAJiB,oBAKb,CAACD,SAAD,IAAc,CAACC,QALF;AAAA;AAAA;AAAA;;AAAA,+CAKmB,MAAKX,QAAL,CAAc;AAAEY,gBAAAA,iBAAiB,EAAE;AAArB,eAAd,CALnB;;AAAA;AAAA,uCAMsCN,oBAAoB,CAACG,kBAN3D,EAMEI,UANF,0BAMTH,SANS,EAMwBI,SANxB,0BAMcH,QANd;AAOTI,cAAAA,KAPS,GAOCT,oBAAoB,CAACU,YAPtB,CAOTD,KAPS;AAAA,uCAcbT,oBAAoB,CAACW,kBAdR,EASfV,KATe,0BASfA,KATe,EAUfW,WAVe,0BAUfA,WAVe,EAWfC,IAXe,0BAWfA,IAXe,EAYfC,KAZe,0BAYfA,KAZe,EAaNC,GAbM,0BAafC,OAbe;AAeT5B,cAAAA,SAfS,GAeKY,oBAAoB,CAACD,QAf1B,CAeTX,SAfS;AAgBX6B,cAAAA,kBAhBW,GAgBU7B,SAAS,CAAC8B,GAAV,CAAc,UAAAnB,QAAQ;AAAA,uBAAIA,QAAQ,CAACN,EAAb;AAAA,eAAtB,CAhBV;AAiBX0B,cAAAA,cAjBW,GAiBM;AACrBZ,gBAAAA,UAAU,EAAVA,UADqB;AAErBC,gBAAAA,SAAS,EAATA,SAFqB;AAGrBC,gBAAAA,KAAK,EAALA,KAHqB;AAIrBR,gBAAAA,KAAK,EAALA,KAJqB;AAKrBb,gBAAAA,SAAS,EAAE6B,kBALU;AAMrBH,gBAAAA,KAAK,EAALA,KANqB;AAOrBM,gBAAAA,OAAO,YAAKR,WAAL,CAPc;AAQrBC,gBAAAA,IAAI,EAAJA,IARqB;AASrBE,gBAAAA,GAAG,EAAHA;AATqB,eAjBN;AAAA;AAAA,+CA4BavD,gBAAgB,CAAC2D,cAAD,CA5B7B;;AAAA;AAAA;AA4BA1B,cAAAA,EA5BA,QA4BT4B,OA5BS;AA8BflB,cAAAA,kBA9Be,GAkCbH,oBAlCa,CA8BfG,kBA9Be,EA+BfQ,kBA/Be,GAkCbX,oBAlCa,CA+BfW,kBA/Be,EAgCfD,YAhCe,GAkCbV,oBAlCa,CAgCfU,YAhCe,EAiCfX,QAjCe,GAkCbC,oBAlCa,CAiCfD,QAjCe;AAmCXuB,cAAAA,cAnCW;AAoCf7B,gBAAAA,EAAE,EAAFA,EApCe;AAqCf8B,gBAAAA,MAAM,EAAE,KArCO;AAsCfpB,gBAAAA,kBAAkB,EAAlBA,kBAtCe;AAuCfQ,gBAAAA,kBAAkB,EAAlBA,kBAvCe;AAwCfD,gBAAAA,YAAY,EAAZA,YAxCe;AAyCfX,gBAAAA,QAAQ,EAARA,QAzCe;AA0CfyB,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,QAAQ,EAAE,CADL;AAELC,kBAAAA,OAAO,EAAE,CAFJ;AAGLC,kBAAAA,cAAc,EAAE,CAHX;AAILC,kBAAAA,iBAAiB,EAAE,CAJd;AAKLC,kBAAAA,cAAc,EAAE;AALX,iBA1CQ;AAiDfC,gBAAAA,KAAK,EAAE,EAjDQ;AAkDfC,gBAAAA,UAAU,EAAE;AACVC,kBAAAA,YAAY,EAAE,GADJ;AAEVC,kBAAAA,YAAY,EAAE;AAFJ,iBAlDG;AAsDfC,gBAAAA,aAAa,EAAE;AACbC,kBAAAA,qBAAqB,EAAE,cADV;AAEbC,kBAAAA,eAAe,EAAE,EAFJ;AAGbC,kBAAAA,mBAAmB,EAAE,cAHR;AAIbC,kBAAAA,aAAa,EAAE,EAJF;AAKbC,kBAAAA,cAAc,EAAE,YALH;AAMbC,kBAAAA,WAAW,EAAE,MANA;AAObC,kBAAAA,UAAU,EAAE,iBAPC;AAQbC,kBAAAA,cAAc,EAAE;AARH,iBAtDA;AAgEfC,gBAAAA,cAAc,EAAE;AACdC,kBAAAA,SAAS,EAAE,SADG;AAEdC,kBAAAA,QAAQ,EAAE,UAFI;AAGdC,kBAAAA,QAAQ,EAAE,IAHI;AAIdC,kBAAAA,WAAW,EAAE,IAJC;AAKdC,kBAAAA,OAAO,EAAE,IALK;AAMdC,kBAAAA,WAAW,EAAE,IANC;AAOdC,kBAAAA,aAAa,EAAE;AAPD,iBAhED;AAyEfC,gBAAAA,WAAW,EAAE;AACXH,kBAAAA,OAAO,EAAE,IADE;AAEXI,kBAAAA,UAAU,EAAE,GAFD;AAGXC,kBAAAA,OAAO,EAAE,GAHE;AAIXH,kBAAAA,aAAa,EAAE;AAJJ,iBAzEE;AA+EfI,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,iBAAiB,EAAE,KADZ;AAEPC,kBAAAA,YAAY,EAAE,KAFP;AAGPC,kBAAAA,UAAU,EAAE,IAHL;AAIPC,kBAAAA,iBAAiB,EAAE,KAJZ;AAKPC,kBAAAA,SAAS,EAAE,MALJ;AAMPC,kBAAAA,aAAa,EAAE,IANR;AAOPC,kBAAAA,gBAAgB,EAAE;AAPX;AA/EM,gEAwFH;AACV7B,gBAAAA,YAAY,EAAE,MADJ;AAEVC,gBAAAA,YAAY,EAAE,MAFJ;AAGV6B,gBAAAA,cAAc,EAAE;AACdC,kBAAAA,OAAO,EAAE,IADK;AAEdC,kBAAAA,OAAO,EAAE,IAFK;AAGdC,kBAAAA,IAAI,EAAE,KAHQ;AAIdC,kBAAAA,SAAS,EAAE;AAJG,iBAHN;AASVC,gBAAAA,aAAa,EAAE;AACbJ,kBAAAA,OAAO,EAAE,IADI;AAEbC,kBAAAA,OAAO,EAAE,IAFI;AAGbC,kBAAAA,IAAI,EAAE,IAHO;AAIbC,kBAAAA,SAAS,EAAE;AAJE;AATL,eAxFG,8DAwGS;AACtBH,gBAAAA,OAAO,EAAE;AACPK,kBAAAA,cAAc,EAAE,IADT;AAEPC,kBAAAA,YAAY,EAAE;AAFP,iBADa;AAKtBL,gBAAAA,OAAO,EAAE;AACPI,kBAAAA,cAAc,EAAE,IADT;AAEPC,kBAAAA,YAAY,EAAE;AAFP,iBALa;AAStBJ,gBAAAA,IAAI,EAAE;AACJG,kBAAAA,cAAc,EAAE,IADZ;AAEJC,kBAAAA,YAAY,EAAE;AAFV;AATgB,eAxGT;AAuHXnE,cAAAA,UAvHW,GAuHEtD,MAAM,CAACoD,oBAAD,EAAuB;AAC9CsE,gBAAAA,IAAI,EAAE;AACJ/C,kBAAAA,MAAM,EAAE,KADJ;AAEJpB,kBAAAA,kBAAkB,EAAE;AAClBC,oBAAAA,SAAS,EAAE,EADO;AAElBC,oBAAAA,QAAQ,EAAE;AAFQ,mBAFhB;AAMJM,kBAAAA,kBAAkB,EAAE;AAClBG,oBAAAA,KAAK,EAAE,EADW;AAElBF,oBAAAA,WAAW,EAAE,EAFK;AAGlBC,oBAAAA,IAAI,EAAE,EAHY;AAIlBZ,oBAAAA,KAAK,EAAE,EAJW;AAKlBe,oBAAAA,OAAO,EAAE;AALS,mBANhB;AAaJN,kBAAAA,YAAY,EAAE;AACZD,oBAAAA,KAAK,EAAE;AADK,mBAbV;AAgBJV,kBAAAA,QAAQ,EAAE;AACRX,oBAAAA,SAAS,EAAE;AADH;AAhBN;AADwC,eAAvB,CAvHR;;AA+IjB,oBAAKM,QAAL,CAAc;AAAEQ,gBAAAA,UAAU,EAAVA;AAAF,eAAd;;AACMqE,cAAAA,eAhJW,GAgJO3H,MAAM,CAAC,MAAKqD,KAAL,CAAWd,QAAZ,EAAsB;AAClDqF,gBAAAA,KAAK,EAAE,CAAClD,cAAD;AAD2C,eAAtB,CAhJb;;AAmJjB,oBAAK5B,QAAL,CAAc;AAAEP,gBAAAA,QAAQ,EAAEoF;AAAZ,eAAd,EAnJiB,CAoJjB;AACA;;;AACA,oBAAKE,mBAAL;;AAtJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9EA;;AAAA,yEAuOE,YAAM;AAAA,UACLzE,oBADK,GACoB,MAAKC,KADzB,CACjBC,UADiB;AAEzB,UAAMA,UAAU,GAAGtD,MAAM,CAACoD,oBAAD,EAAuB;AAC9CsE,QAAAA,IAAI,EAAE;AACJ/C,UAAAA,MAAM,EAAE,KADJ;AAEJpB,UAAAA,kBAAkB,EAAE;AAClBC,YAAAA,SAAS,EAAE,EADO;AAElBC,YAAAA,QAAQ,EAAE;AAFQ,WAFhB;AAMJM,UAAAA,kBAAkB,EAAE;AAClBG,YAAAA,KAAK,EAAE,EADW;AAElBF,YAAAA,WAAW,EAAE,EAFK;AAGlBC,YAAAA,IAAI,EAAE,EAHY;AAIlBZ,YAAAA,KAAK,EAAE,EAJW;AAKlBe,YAAAA,OAAO,EAAE;AALS,WANhB;AAaJN,UAAAA,YAAY,EAAE;AACZD,YAAAA,KAAK,EAAE;AADK,WAbV;AAgBJV,UAAAA,QAAQ,EAAE;AACRX,YAAAA,SAAS,EAAE;AADH;AAhBN;AADwC,OAAvB,CAAzB;;AAsBA,YAAKM,QAAL,CAAc;AAAEQ,QAAAA,UAAU,EAAVA;AAAF,OAAd;AACD,KAhQkB;;AAAA,uEAkQA,UAAAwE,KAAK,EAAI;AAAA,UACN1E,oBADM,GACmB,MAAKC,KADxB,CAClBC,UADkB;AAAA,UAGZd,SAHY,GAItB,MAAKa,KAAL,CAAWC,UAJW,CAGxBH,QAHwB,CAGZX,SAHY;;AAK1B,UAAMuF,iBAAiB,GAAG,MAAKC,gBAAL,CAAsBxF,SAAtB,EAAiCA,SAAS,CAACsF,KAAD,CAA1C,CAA1B;;AACA,UAAMxE,UAAU,GAAGtD,MAAM,CAACoD,oBAAD,EAAuB;AAC9CD,QAAAA,QAAQ,EAAE;AAAEuE,UAAAA,IAAI,EAAE;AAAElF,YAAAA,SAAS,EAAEuF;AAAb;AAAR;AADoC,OAAvB,CAAzB;;AAGA,YAAKjF,QAAL,CAAc;AAAEQ,QAAAA,UAAU,EAAVA;AAAF,OAAd;AACD,KA5QkB;;AAAA,qEA8QF,YAAM;AAAA,wBACY,MAAKD,KADjB;AAAA,UACbd,QADa,eACbA,QADa;AAAA,UACH0F,UADG,eACHA,UADG;AAErB,aAAO1F,QAAQ,CAAC2F,MAAT,CAAgB,UAACC,QAAD,EAAWC,cAAX,EAA8B;AAAA,oCAG/CA,cAH+C,CAEjD7E,kBAFiD;AAAA,YAE3BC,SAF2B,yBAE3BA,SAF2B;AAAA,YAEhBC,QAFgB,yBAEhBA,QAFgB;AAInD,YAAM4E,aAAa,GAAG,UAAG7E,SAAH,SAAeC,QAAf,EAA0B6E,OAA1B,CAAkC,KAAlC,EAAyC,EAAzC,EAA6CC,WAA7C,EAAtB;;AACA,YAAIF,aAAa,CAACG,OAAd,CAAsBP,UAAtB,MAAsC,CAAC,CAAvC,IAA4CE,QAAQ,CAACK,OAAT,CAAiBJ,cAAjB,MAAqC,CAAC,CAAtF,EAAyF;AACvFD,UAAAA,QAAQ,CAAC9F,IAAT,CAAc+F,cAAd;AACD;;AACD,eAAOD,QAAP;AACD,OATM,EASJ,EATI,CAAP;AAUD,KA1RkB;;AAAA,0EA4RG,kBAAML,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACZvF,cAAAA,QADY,GACC,MAAKc,KADN,CACZd,QADY;AAEZkG,cAAAA,kBAFY,GAEW,MAAKrG,KAFhB,CAEZqG,kBAFY;AAGpBA,cAAAA,kBAAkB,CAAClG,QAAQ,CAACuF,KAAD,CAAT,CAAlB;;AACA,oBAAKhF,QAAL,CAAc;AAAE4F,gBAAAA,eAAe,EAAEnG,QAAQ,CAACuF,KAAD;AAA3B,eAAd;;AAJoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5RH;;AAAA,8EAmSO,UAAAa,KAAK,EAAI;AACjCA,MAAAA,KAAK,CAACC,cAAN;;AACA,YAAK9F,QAAL,CAAc;AAAE4F,QAAAA,eAAe,EAAE;AAAnB,OAAd;AACD,KAtSkB;;AAAA,sEAwSD,UAAAZ,KAAK,EAAI;AAAA,UACjBe,eADiB,GACG,MAAKzG,KADR,CACjByG,eADiB;AAAA,UAEjBtG,QAFiB,GAEJ,MAAKc,KAFD,CAEjBd,QAFiB,EAGzB;AACA;;AACA,UAAMuG,UAAU,GAAGvG,QAAQ,CAACuF,KAAD,CAAR,CAAgBjF,EAAnC;AACAgG,MAAAA,eAAe,CAACC,UAAD,CAAf;;AACA,UAAMC,eAAe,GAAG,MAAKf,gBAAL,CAAsBzF,QAAtB,EAAgCA,QAAQ,CAACuF,KAAD,CAAxC,CAAxB;;AACA,YAAKhF,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAEwG;AAAZ,OAAd;;AACA,YAAKC,eAAL;AACD,KAlTkB;;AAAA,qEAoTF,UAAAlB,KAAK,EAAI;AAAA,UAChBvF,QADgB,GACH,MAAKc,KADF,CAChBd,QADgB;AAExB,UAAMe,UAAU,GAAGtD,MAAM,CAACuC,QAAQ,CAACuF,KAAD,CAAT,EAAkB;AACzCjF,QAAAA,EAAE,EAAE;AAAE6E,UAAAA,IAAI,EAAE9F,WAAW;AAAnB;AADqC,OAAlB,CAAzB;;AAGA,YAAKkB,QAAL,CAAc,UAAAmG,SAAS,EAAI;AACzBA,QAAAA,SAAS,CAAC1G,QAAV,CAAmBF,IAAnB,CAAwBiB,UAAxB;AACA,eAAO;AAAEf,UAAAA,QAAQ,EAAE0G,SAAS,CAAC1G;AAAtB,SAAP;AACD,OAHD;AAID,KA7TkB;;AAAA,mEA+TJ,UAACoG,KAAD,EAAQO,IAAR,EAAcC,OAAd,EAA0B;AAAA,UACnB/F,oBADmB,GACM,MAAKC,KADX,CAC/BC,UAD+B;AAEvC,UAAM8F,KAAK,GAAGT,KAAK,CAACU,MAAN,GAAeV,KAAK,CAACU,MAAN,CAAaD,KAA5B,GAAoCT,KAAlD;AACA,UAAMW,cAAc,GAAGtJ,MAAM,CAACoD,oBAAD,sBAC1B+F,OAD0B,EAChB;AAAEI,QAAAA,MAAM,sBAAKL,IAAL,EAAYE,KAAZ;AAAR,OADgB,EAA7B;;AAGA,YAAKtG,QAAL,CAAc;AAAEQ,QAAAA,UAAU,EAAEgG;AAAd,OAAd;AACD,KAtUkB;;AAAA,2EAwUI,UAAAA,cAAc,EAAI;AAAA,UACrBE,gBADqB,GACA,MAAKnG,KADL,CAC/Bd,QAD+B;AAAA,UAGrCoC,MAHqC,GAQnC2E,cARmC,CAGrC3E,MAHqC;AAAA,UAIrCpB,kBAJqC,GAQnC+F,cARmC,CAIrC/F,kBAJqC;AAAA,UAKrCQ,kBALqC,GAQnCuF,cARmC,CAKrCvF,kBALqC;AAAA,UAMrCD,YANqC,GAQnCwF,cARmC,CAMrCxF,YANqC;AAAA,UAOrCX,QAPqC,GAQnCmG,cARmC,CAOrCnG,QAPqC;AASvC,UAAMsG,eAAe,GAAGD,gBAAgB,CAACE,MAAjB,CAAwB,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAAC9G,EAAR,KAAeyG,cAAc,CAACzG,EAAlC;AAAA,OAA/B,EAAqE,CAArE,CAAxB;AACA,UAAM+G,mBAAmB,GAAGJ,gBAAgB,CAAChB,OAAjB,CAAyBiB,eAAzB,CAA5B;AACA,UAAMlH,QAAQ,GAAGvC,MAAM,CAACwJ,gBAAD,sBACpBI,mBADoB,EACE;AACrBL,QAAAA,MAAM,EAAE;AAAE5E,UAAAA,MAAM,EAANA,MAAF;AAAUpB,UAAAA,kBAAkB,EAAlBA,kBAAV;AAA8BQ,UAAAA,kBAAkB,EAAlBA,kBAA9B;AAAkDD,UAAAA,YAAY,EAAZA,YAAlD;AAAgEX,UAAAA,QAAQ,EAARA;AAAhE;AADa,OADF,EAAvB;;AAKA,YAAKL,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAARA;AAAF,OAAd;;AAhBuC,UAiB/BsH,aAjB+B,GAiBb,MAAKzH,KAjBQ,CAiB/ByH,aAjB+B;AAkBvCA,MAAAA,aAAa,CAACtH,QAAD,CAAb;AACD,KA3VkB;;AAAA,oEA6VH,UAAAuH,aAAa;AAAA,aAAI,MAAKhH,QAAL,CAAc;AAAEiH,QAAAA,cAAc,EAAE,IAAlB;AAAwBD,QAAAA,aAAa,EAAbA;AAAxB,OAAd,CAAJ;AAAA,KA7VV;;AAAA,sEA8VD;AAAA,aAAM,MAAKhH,QAAL,CAAc;AAAEiH,QAAAA,cAAc,EAAE,KAAlB;AAAyBD,QAAAA,aAAa,EAAE;AAAxC,OAAd,CAAN;AAAA,KA9VC;;AAAA,qEAiWF,UAAAvH,QAAQ,EAAI;AAAA,UACnBU,IADmB,GACV,MAAKI,KADK,CACnBJ,IADmB;;AAE3B,cAAQA,IAAR;AACE,aAAK,oBAAL;AACE,iBAAOV,QAAQ,CAACU,IAAT,CAAc3B,yBAAd,CAAP;;AACF,aAAK,mBAAL;AACE,iBAAOiB,QAAQ,CAACU,IAAT,CAAc5B,wBAAd,CAAP;;AACF,aAAK,qBAAL;AACE,iBAAOkB,QAAQ,CAACU,IAAT,CAAc7B,0BAAd,CAAP;;AACF,aAAK,oBAAL;AACE,iBAAOmB,QAAQ,CAACU,IAAT,CAAc9B,yBAAd,CAAP;;AACF;AACE;AAVJ;AAYD,KA/WkB;;AAAA,0EAiXG,YAAM;AAAA,yBACC,MAAKkC,KADN;AAAA,UAClBJ,IADkB,gBAClBA,IADkB;AAAA,UACZV,QADY,gBACZA,QADY;AAE1B,UAAMyH,gBAAgB,GAAGzH,QAAzB;;AACA,UAAIU,IAAJ,EAAU;AACR,eAAO,MAAKgH,cAAL,CAAoBD,gBAApB,CAAP;AACD;;AACD,aAAOA,gBAAP;AACD,KAxXkB;;AAAA,uEA0XA,UAACE,KAAD,EAAQd,KAAR;AAAA,aAAkBc,KAAK,CAACR,MAAN,CAAa,UAAAC,OAAO;AAAA,eAAIA,OAAO,KAAKP,KAAhB;AAAA,OAApB,CAAlB;AAAA,KA1XA;;AAAA,kEA4XL;AAAA,aACZ,MAAKe,mBAAL,GAA2B7F,GAA3B,CAA+B,UAACqF,OAAD,EAAU7B,KAAV;AAAA,eAC7B,MAAC,WAAD;AACE,UAAA,OAAO,EAAE6B,OADX;AAEE,UAAA,KAAK,EAAE7B,KAFT;AAGE,UAAA,EAAE,EAAE6B,OAAO,CAAC9G,EAHd;AAIE,UAAA,GAAG,EAAE8G,OAAO,CAAC9G,EAJf;AAKE,UAAA,cAAc,EAAE,MAAKQ,KAAL,CAAW0G,cAL7B;AAME,UAAA,aAAa,EAAE,MAAK1G,KAAL,CAAWyG,aAN5B;AAOE,UAAA,aAAa,EAAE,MAAKM,aAPtB;AAQE,UAAA,eAAe,EAAE,MAAKpB,eARxB;AASE,UAAA,mBAAmB,EAAE;AAAA,mBAAM,MAAKqB,mBAAL,CAAyBvC,KAAzB,CAAN;AAAA,WATvB;AAUE,UAAA,eAAe,EAAE;AAAA,mBAAM,MAAKe,eAAL,CAAqBf,KAArB,CAAN;AAAA,WAVnB;AAWE,UAAA,cAAc,EAAE;AAAA,mBAAM,MAAKwC,cAAL,CAAoBxC,KAApB,EAA2B6B,OAAO,CAAC9G,EAAnC,CAAN;AAAA,WAXlB;AAYE,UAAA,oBAAoB,EAAE,MAAK0H,oBAZ7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD6B;AAAA,OAA/B,CADY;AAAA,KA5XK;;AAAA,0EA8YG;AAAA,aAAM,MAAKzH,QAAL,CAAc;AAAE4F,QAAAA,eAAe,oBAAO,MAAKrF,KAAL,CAAWqF,eAAlB;AAAmC/D,UAAAA,MAAM,EAAE;AAA3C;AAAjB,OAAd,CAAN;AAAA,KA9YH;;AAEjB,UAAKtB,KAAL,GAAa;AACXqF,MAAAA,eAAe,EAAE,IADN;AAEXnG,MAAAA,QAAQ,EAAE,MAAKH,KAAL,CAAWG,QAFV;AAGXQ,MAAAA,gBAAgB,EAAE,KAHP;AAIXC,MAAAA,iBAAiB,EAAE,KAJR;AAKX+G,MAAAA,cAAc,EAAE,KALL;AAMXD,MAAAA,aAAa,EAAE,IANJ;AAOX7G,MAAAA,IAAI,EAAE,EAPK;AAQXC,MAAAA,UAAU,EAAE,EARD;AASXC,MAAAA,QAAQ,EAAE,EATC;AAUXG,MAAAA,UAAU,EAAE;AACVqB,QAAAA,MAAM,EAAE,KADE;AAEVpB,QAAAA,kBAAkB,EAAE;AAClBC,UAAAA,SAAS,EAAE,EADO;AAElBC,UAAAA,QAAQ,EAAE;AAFQ,SAFV;AAMVM,QAAAA,kBAAkB,EAAE;AAClBG,UAAAA,KAAK,EAAE,EADW;AAElBF,UAAAA,WAAW,EAAE,EAFK;AAGlBC,UAAAA,IAAI,EAAE,EAHY;AAIlBZ,UAAAA,KAAK,EAAE,EAJW;AAKlBe,UAAAA,OAAO,EAAE;AALS,SANV;AAaVN,QAAAA,YAAY,EAAE;AACZD,UAAAA,KAAK,EAAE;AADK,SAbJ;AAgBVV,QAAAA,QAAQ,EAAE;AACRX,UAAAA,SAAS,EAAE;AADH;AAhBA,OAVD;AA8BXkB,MAAAA,iBAAiB,EAAE;AA9BR,KAAb;AAFiB;AAkClB;;;;yCAsBoB;AAAA,UACD8G,YADC,GACgB,KAAKnH,KADrB,CACXd,QADW;AAAA,UAEXA,QAFW,GAEE,KAAKH,KAFP,CAEXG,QAFW;;AAGnB,UAAIiI,YAAY,CAAC9H,MAAb,KAAwB,CAAxB,IAA6BH,QAAQ,CAACG,MAAT,GAAkB,CAAnD,EAAsD;AACpD;AACA,aAAKI,QAAL,CAAc;AAAEP,UAAAA,QAAQ,EAARA;AAAF,SAAd;AACD;AACF;;;6BAgVQ;AAAA;;AAAA,yBACuC,KAAKc,KAD5C;AAAA,UACCN,gBADD,gBACCA,gBADD;AAAA,UACmB2F,eADnB,gBACmBA,eADnB;AAEP,aACE;AAAM,QAAA,EAAE,EAAC,MAAT;AAAgB,QAAA,IAAI,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAACA,eAAD,IACC,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAA,YAAG+B,KAAH,SAAGA,KAAH;AAAA,eACC;AAAK,UAAA,SAAS,EAAC,sBAAf;AAAsC,UAAA,KAAK,oBAAOA,KAAP;AAAcC,YAAAA,MAAM,EAAE;AAAtB,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAG,UAAA,IAAI,EAAC,GAAR;AAAY,yBAAY,WAAxB;AAAoC,UAAA,SAAS,EAAC,iBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAG,UAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,CADF,EAME;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAM,UAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAG,UAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,CADF,CANF,CADD;AAAA,OADH,CADF,EAkBE,MAAC,aAAD;AACE,QAAA,SAAS,EAAE,KAAKC,SADlB;AAEE,QAAA,kBAAkB,EAAE,KAAKC,kBAF3B;AAGE,QAAA,oBAAoB,EAAE,KAAKC,oBAH7B;AAIE,QAAA,0BAA0B,EAAE,KAAKC,0BAJnC;AAKE,QAAA,4BAA4B,EAAE,KAAKC,4BALrC;AAME,QAAA,iBAAiB,EAAE,KAAKC,iBAN1B;AAOE,QAAA,cAAc,EAAE,KAAKC,cAPvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlBF,EA2BE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqC,KAAKC,WAAL,EAArC,CADF,CA3BF,EA8BE;AACE,QAAA,IAAI,EAAC,GADP;AAEE,QAAA,SAAS,EAAC,mDAFZ;AAGE,QAAA,OAAO,EAAE,KAAKC,kBAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAG,QAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,gBA9BF,EAqCE,MAAC,YAAD;AACE,QAAA,IAAI,EAAEpI,gBADR;AAEE,QAAA,OAAO,EAAE,KAAK8E,mBAFhB;AAGE,QAAA,YAAY,EAAE,KAAKuD,YAHrB;AAIE,QAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWC,UAJpB;AAKE,QAAA,MAAM,EAAE,KAAK+H,gBALf;AAME,QAAA,mBAAmB,EAAE,KAAKC,mBAN5B;AAOE,QAAA,gBAAgB,EAAE,KAAKC,gBAPzB;AAQE,QAAA,kBAAkB,EAAE,KAAKC,kBAR3B;AASE,QAAA,iBAAiB,EAAE,KAAKnI,KAAL,CAAWK,iBAThC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArCF,EAgDE,MAAC,aAAD;AACE,QAAA,IAAI,EAAE,KAAKL,KAAL,CAAWL,iBADnB;AAEE,QAAA,OAAO,EAAE,KAAKyI,oBAFhB;AAGE,QAAA,qBAAqB,EAAE,+BAAAC,iBAAiB;AAAA,iBACtC,MAAI,CAACN,YAAL,CAAkBM,iBAAlB,EAAqC,WAArC,EAAkD,UAAlD,CADsC;AAAA,SAH1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhDF,CAFJ,EA2DGhD,eAAe,IACd,MAAC,qBAAD;AACE,QAAA,OAAO,EAAEA,eADX;AAEE,QAAA,uBAAuB,EAAE,KAAKiD,uBAFhC;AAGE,QAAA,mBAAmB,EAAE,KAAKC,mBAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5DJ,CADF,CADF,CADF;AAyED;;;;EA3doB7L,S;;AA8dvBoC,QAAQ,CAAC0J,SAAT,GAAqB;AACnBtJ,EAAAA,QAAQ,EAAEjC,SAAS,CAAC4J,KAAV,CAAgB4B,UADP;AAEnBxJ,EAAAA,eAAe,EAAEhC,SAAS,CAACyL,IAAV,CAAeD,UAFb;AAGnBE,EAAAA,eAAe,EAAE1L,SAAS,CAACyL,IAAV,CAAeD,UAHb;AAInBjD,EAAAA,eAAe,EAAEvI,SAAS,CAACyL,IAAV,CAAeD,UAJb;AAKnBjC,EAAAA,aAAa,EAAEvJ,SAAS,CAACyL,IAAV,CAAeD,UALX;AAMnBtJ,EAAAA,SAAS,EAAElC,SAAS,CAAC4J,KAAV,CAAgB4B;AANR,CAArB;AASA,IAAMG,eAAe,GAAG1L,wBAAwB,CAAC;AAC/CgC,EAAAA,QAAQ,EAAE1B,kBAAkB,EADmB;AAE/C2B,EAAAA,SAAS,EAAEd,mBAAmB,EAFiB;AAG/CkB,EAAAA,WAAW,EAAEjB,qBAAqB;AAHa,CAAD,CAAhD;;AAMA,IAAMuK,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACtCtD,IAAAA,eAAe,EAAE,yBAAAhG,EAAE;AAAA,aAAIsJ,QAAQ,CAAC1L,aAAa,CAACoC,EAAD,CAAd,CAAZ;AAAA,KADmB;AAEtCP,IAAAA,eAAe,EAAE;AAAA,aAAM6J,QAAQ,CAAC3L,aAAa,EAAd,CAAd;AAAA,KAFqB;AAGtCqJ,IAAAA,aAAa,EAAE,uBAAAtH,QAAQ;AAAA,aAAI4J,QAAQ,CAACzL,WAAW,CAAC6B,QAAD,CAAZ,CAAZ;AAAA,KAHe;AAItCkG,IAAAA,kBAAkB,EAAE,4BAAAkB,OAAO;AAAA,aAAIwC,QAAQ,CAACxL,gBAAgB,CAACgJ,OAAD,CAAjB,CAAZ;AAAA,KAJW;AAKtClH,IAAAA,oBAAoB,EAAE,8BAACgC,OAAD;AAAA,aAAa0H,QAAQ,CAAC1K,kBAAkB,CAACgD,OAAD,CAAnB,CAArB;AAAA;AALgB,GAAL;AAAA,CAAnC;;AAQA,IAAM2H,WAAW,GAAG/L,OAAO,CAAC4L,eAAD,EAAkBC,kBAAlB,CAA3B;AAEA,eAAe9L,OAAO,CAACgM,WAAD,CAAP,CAAqBjK,QAArB,CAAf","sourcesContent":["/* jshint esversion: 6 */\nimport React, { Component } from \"react\";\nimport update from \"immutability-helper\";\nimport Router from \"next/router\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { createStructuredSelector } from \"reselect\";\nimport {\n  fetchStudents,\n  deleteStudent,\n  setStudents,\n  setActiveStudent,\n} from \"../components/Student/index/actions\";\n\n\nimport { createStudentApi } from \"../components/Student/index/api\";\n\nimport { makeSelectStudents } from \"../components/Student/index/selectors\";\nimport StudentCard from \"../components/Student/components/StudentCard\";\nimport FilterSection from \"../components/Student/ListPage/Components/FilterSection\";\nimport StudentModal from \"../components/Student/components/StudentModal\";\nimport IndividualStudentPage from \"../components/Student/IndividualStudentPage\";\nimport LocationModal from \"../components/Location/components/LocationModal\";\n\nimport {\n  studentFirstNameAscending,\n  studentFirstNameDescending,\n  studentLastNameAscending,\n  studentLastNameDescending,\n} from \"../components/utils/sortFunctions\";\nimport { loggedIn, logIn } from \"../utils/AuthService\";\n\n\nimport {\n  fetchAllLocationns,\n} from '../components/Location/index/actions';\n\nimport { makeSelectLocations } from \"../components/Location/index/selectors\";\nimport { makeSelectCurrentUser } from \"../components/User/index/selectors\";\n\n// eslint-disable-next-line prefer-template\nconst idGenerator = () =>\n  `${subIdGenerator() +\n  subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}-${subIdGenerator()}${subIdGenerator()}${subIdGenerator()}`;\nconst subIdGenerator = () =>\n  Math.floor((1 + Math.random()) * 0x10000)\n    .toString(16)\n    .substring(1);\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedStudent: null,\n      students: this.props.students,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      location: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\",\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\",\n        },\n        emailAddress: {\n          email: \"\",\n        },\n        location: {\n          locations: [],\n        },\n      },\n      hasRequiredFields: true,\n    };\n  }\n\n  componentDidMount = () => {\n    if (!loggedIn()) {\n      Router.push(\"/login\");\n    } else {\n      const { onFetchStudents, students, locations, onFetchAllLocationns } = this.props;\n      if (students.length === 0) {\n        onFetchStudents();\n      }\n    }\n  };\n\n  componentWillReceiveProps = (nextProps) => {\n    const { onFetchAllLocationns } = this.props;\n    const { locations } = nextProps;\n    if (!locations && nextProps.currentUser) {\n      const { currentUser: { id } } = nextProps;\n      onFetchAllLocationns(id);\n    }\n  }\n\n  componentDidUpdate() {\n    const { students: studentState } = this.state;\n    const { students } = this.props;\n    if (studentState.length === 0 && students.length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ students });\n    }\n  }\n\n  onOpenStudentModal = () => this.setState({ studentModalOpen: true });\n  onCloseStudentModal = () => this.setState({ studentModalOpen: false });\n  onOpenLocationModal = () => this.setState({ locationModalOpen: true });\n  onCloseLocationModal = () => this.setState({ locationModalOpen: false });\n\n  onSetSort = sort => this.setState({ sort });\n  onSetFilteredState = filterName => this.setState({ filterName });\n  onUnsetFilteredState = () => this.setState({ filterName: \"\" });\n\n  onSetFilteredLocationState = location => this.setState({ location });\n  onUnsetFilteredLocationState = () => this.setState({ location: \"\" });\n\n  // TODO add a toas or some notification that a student has been saved\n  onSaveNewStudent = async () => {\n    const { newStudent: previousStudentState } = this.state;\n    const { onFetchStudents } = this.props;\n    const { firstName, lastName } = previousStudentState.studentInformation;\n    // dispatch add student action\n    if (!firstName || !lastName) return this.setState({ hasRequiredFields: false });\n    const { firstName: first_name, lastName: last_name } = previousStudentState.studentInformation;\n    const { email } = previousStudentState.emailAddress;\n    const {\n      state,\n      addressLine,\n      city,\n      phone,\n      zipCode: zip,\n    } = previousStudentState.contactInformation;\n    const { locations } = previousStudentState.location;\n    const formattedLocations = locations.map(location => location.id);\n    const studentPayload = {\n      first_name,\n      last_name,\n      email,\n      state,\n      locations: formattedLocations,\n      phone,\n      address: `${addressLine}`,\n      city,\n      zip,\n    };\n    const { user_id: id } = await createStudentApi(studentPayload);\n    const {\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n    } = previousStudentState;\n    const newTestStudent = {\n      id,\n      active: false,\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n      stats: {\n        complete: 0,\n        overdue: 0,\n        practice_tests: 0,\n        sessions_complete: 0,\n        total_sessions: 0,\n      },\n      tutor: \"\",\n      testScores: {\n        initialScore: \"0\",\n        currentScore: \"0\",\n      },\n      courseContext: {\n        courseStartDateOption: \"secondOption\",\n        courseStartDate: \"\",\n        courseEndDateOption: \"secondOption\",\n        courseEndDate: \"\",\n        targetTestDate: \"12/12/2019\",\n        targetScore: \"1400\",\n        highSchool: \"Everglades High\",\n        graduationYear: \"2018\",\n      },\n      courseProgress: {\n        startDate: \"6/03/18\",\n        testDate: \"10/14/18\",\n        progress: \"77\",\n        improvement: \"82\",\n        lessons: \"73\",\n        instruction: \"68\",\n        practiceTests: \"47\",\n      },\n      overdueWork: {\n        lessons: \"12\",\n        worksheets: \"3\",\n        quizzes: \"1\",\n        practiceTests: \"5\",\n      },\n      summary: {\n        questionsAnswered: \"791\",\n        videoWatched: \"416\",\n        notesTaken: \"52\",\n        totalTimeLoggedIn: \"220\",\n        lastLogIn: \"3:12\",\n        loginTimeCode: \"pm\",\n        onTimePercentage: \"77\",\n      },\n      testScores: {\n        initialScore: \"1040\",\n        currentScore: \"1300\",\n        compositeScore: {\n          reading: \"83\",\n          writing: \"31\",\n          math: \"105\",\n          composite: \"218\",\n        },\n        subjectScores: {\n          reading: \"58\",\n          writing: \"44\",\n          math: \"91\",\n          composite: \"195\",\n        },\n      },\n      strengthsAndWeaknesses: {\n        reading: {\n          correctAnswers: \"32\",\n          totalAnswers: \"52\",\n        },\n        writing: {\n          correctAnswers: \"35\",\n          totalAnswers: \"52\",\n        },\n        math: {\n          correctAnswers: \"37\",\n          totalAnswers: \"52\",\n        },\n      },\n    };\n    const newStudent = update(previousStudentState, {\n      $set: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\",\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\",\n        },\n        emailAddress: {\n          email: \"\",\n        },\n        location: {\n          locations: [],\n        },\n\n\n      },\n    });\n    this.setState({ newStudent });\n    const updatedStudents = update(this.state.students, {\n      $push: [newTestStudent],\n    });\n    this.setState({ students: updatedStudents });\n    // const { onSetStudents } = this.props;\n    // onSetStudents(updatedStudents);\n    this.onCloseStudentModal();\n  };\n\n  onDeleteNewStudent = () => {\n    const { newStudent: previousStudentState } = this.state;\n    const newStudent = update(previousStudentState, {\n      $set: {\n        active: false,\n        studentInformation: {\n          firstName: \"\",\n          lastName: \"\",\n        },\n        contactInformation: {\n          phone: \"\",\n          addressLine: \"\",\n          city: \"\",\n          state: \"\",\n          zipCode: \"\",\n        },\n        emailAddress: {\n          email: \"\",\n        },\n        location: {\n          locations: [],\n        },\n      },\n    });\n    this.setState({ newStudent });\n  };\n\n  onRemoveLocation = index => {\n    const { newStudent: previousStudentState } = this.state;\n    const {\n      location: { locations },\n    } = this.state.newStudent;\n    const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n    const newStudent = update(previousStudentState, {\n      location: { $set: { locations: newLocationsArray } },\n    });\n    this.setState({ newStudent });\n  };\n\n  onFilterByName = () => {\n    const { students, nameFilter } = this.state;\n    return students.reduce((finalArr, currentStudent) => {\n      const {\n        studentInformation: { firstName, lastName },\n      } = currentStudent;\n      const studentString = `${firstName}${lastName}`.replace(/\\s/g, \"\").toLowerCase();\n      if (studentString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n        finalArr.push(currentStudent);\n      }\n      return finalArr;\n    }, []);\n  };\n\n  onHandleStudentCard = async index => {\n    const { students } = this.state;\n    const { onSetActiveStudent } = this.props;\n    onSetActiveStudent(students[index]);\n    this.setState({ selectedStudent: students[index] });\n  };\n\n  onRedirectToStudentPage = event => {\n    event.preventDefault();\n    this.setState({ selectedStudent: null });\n  };\n\n  onDeleteStudent = index => {\n    const { onDeleteStudent } = this.props;\n    const { students } = this.state;\n    // Dispatch deleteStudent\n    // eslint-disable-next-line camelcase\n    const student_id = students[index].id;\n    onDeleteStudent(student_id);\n    const newStudentArray = this.arrayItemRemover(students, students[index]);\n    this.setState({ students: newStudentArray });\n    this.onCloseDropdown();\n  };\n\n  onCloneStudent = index => {\n    const { students } = this.state;\n    const newStudent = update(students[index], {\n      id: { $set: idGenerator() },\n    });\n    this.setState(prevState => {\n      prevState.students.push(newStudent);\n      return { students: prevState.students };\n    });\n  };\n\n  handleChange = (event, name, section) => {\n    const { newStudent: previousStudentState } = this.state;\n    const value = event.target ? event.target.value : event;\n    const updatedStudent = update(previousStudentState, {\n      [section]: { $merge: { [name]: value } },\n    });\n    this.setState({ newStudent: updatedStudent });\n  };\n\n  onSaveStudentChanges = updatedStudent => {\n    const { students: originalStudents } = this.state;\n    const {\n      active,\n      studentInformation,\n      contactInformation,\n      emailAddress,\n      location,\n    } = updatedStudent;\n    const studentToUpdate = originalStudents.filter(student => student.id === updatedStudent.id)[0];\n    const updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n    const students = update(originalStudents, {\n      [updatedStudentIndex]: {\n        $merge: { active, studentInformation, contactInformation, emailAddress, location },\n      },\n    });\n    this.setState({ students });\n    const { onSetStudents } = this.props;\n    onSetStudents(students);\n  };\n\n  onSetDropdown = dropdownIndex => this.setState({ dropdownIsOpen: true, dropdownIndex });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  // eslint-disable-next-line consistent-return\n  onSortStudents = students => {\n    const { sort } = this.state;\n    switch (sort) {\n      case \"lastNameDescending\":\n        return students.sort(studentLastNameDescending);\n      case \"lastNameAscending\":\n        return students.sort(studentLastNameAscending);\n      case \"firstNameDescending\":\n        return students.sort(studentFirstNameDescending);\n      case \"firstNameAscending\":\n        return students.sort(studentFirstNameAscending);\n      default:\n        break;\n    }\n  };\n\n  getMappableStudents = () => {\n    const { sort, students } = this.state;\n    const mappableStudents = students;\n    if (sort) {\n      return this.onSortStudents(mappableStudents);\n    }\n    return mappableStudents;\n  };\n\n  arrayItemRemover = (array, value) => array.filter(student => student !== value);\n\n  mapStudents = () =>\n    this.getMappableStudents().map((student, index) => (\n      <StudentCard\n        student={student}\n        index={index}\n        id={student.id}\n        key={student.id}\n        dropdownIsOpen={this.state.dropdownIsOpen}\n        dropdownIndex={this.state.dropdownIndex}\n        onSetDropdown={this.onSetDropdown}\n        onCloseDropdown={this.onCloseDropdown}\n        onHandleStudentCard={() => this.onHandleStudentCard(index)}\n        onDeleteStudent={() => this.onDeleteStudent(index)}\n        onCloneStudent={() => this.onCloneStudent(index, student.id)}\n        onSaveStudentChanges={this.onSaveStudentChanges}\n      />\n    ));\n\n  updateStudentStatus = () => this.setState({ selectedStudent: { ...this.state.selectedStudent, active: true } })\n  render() {\n    const { studentModalOpen, selectedStudent } = this.state;\n    return (\n      <main id=\"main\" role=\"main\">\n        <div className=\"main-holder grey lighten-5\">\n          <StickyContainer>\n            {!selectedStudent && (\n              <React.Fragment>\n                <Sticky>\n                  {({ style }) => (\n                    <div className=\"title-row card-panel\" style={{ ...style, zIndex: 1999 }}>\n                      <div className=\"mobile-header\">\n                        <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\">\n                          <i className=\"material-icons\">menu</i>\n                        </a>\n                      </div>\n                      <h2 className=\"h1 white-text\">\n                        <span className=\"heading-holder\">\n                          <i className=\"icon-student\"></i>\n                          <span className=\"heading-block\">Students</span>\n                        </span>\n                      </h2>\n                    </div>\n                  )}\n                </Sticky>\n                <FilterSection\n                  onSetSort={this.onSetSort}\n                  onSetFilteredState={this.onSetFilteredState}\n                  onUnsetFilteredState={this.onUnsetFilteredState}\n                  onSetFilteredLocationState={this.onSetFilteredLocationState}\n                  onUnsetFilteredLocationState={this.onUnsetFilteredLocationState}\n                  handleFilterClick={this.handleFilterClick}\n                  onFilterByName={this.onFilterByName}\n                />\n                <div className=\"content-section\">\n                  <div className=\"row d-flex-content\">{this.mapStudents()}</div>\n                </div>\n                <a\n                  href=\"#\"\n                  className=\"waves-effect waves-teal btn add-btn modal-trigger\"\n                  onClick={this.onOpenStudentModal}\n                >\n                  <i className=\"material-icons\">add</i>New Student\n                </a>\n                <StudentModal\n                  open={studentModalOpen}\n                  onClose={this.onCloseStudentModal}\n                  handleChange={this.handleChange}\n                  state={this.state.newStudent}\n                  onSave={this.onSaveNewStudent}\n                  onOpenLocationModal={this.onOpenLocationModal}\n                  onRemoveLocation={this.onRemoveLocation}\n                  onDeleteNewStudent={this.onDeleteNewStudent}\n                  hasRequiredFields={this.state.hasRequiredFields}\n                />\n                <LocationModal\n                  open={this.state.locationModalOpen}\n                  onClose={this.onCloseLocationModal}\n                  handleLocationsChange={selectedLocations =>\n                    this.handleChange(selectedLocations, \"locations\", \"location\")\n                  }\n                />\n              </React.Fragment>\n            )}\n            {selectedStudent && (\n              <IndividualStudentPage\n                student={selectedStudent}\n                onRedirectToStudentPage={this.onRedirectToStudentPage}\n                updateStudentStatus={this.updateStudentStatus}\n              />\n            )}\n          </StickyContainer>\n        </div>\n      </main>\n    );\n  }\n}\n\nStudents.propTypes = {\n  students: PropTypes.array.isRequired,\n  onFetchStudents: PropTypes.func.isRequired,\n  onCreateStudent: PropTypes.func.isRequired,\n  onDeleteStudent: PropTypes.func.isRequired,\n  onSetStudents: PropTypes.func.isRequired,\n  locations: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  students: makeSelectStudents(),\n  locations: makeSelectLocations(),\n  currentUser: makeSelectCurrentUser(),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteStudent: id => dispatch(deleteStudent(id)),\n  onFetchStudents: () => dispatch(fetchStudents()),\n  onSetStudents: students => dispatch(setStudents(students)),\n  onSetActiveStudent: student => dispatch(setActiveStudent(student)),\n  onFetchAllLocationns: (user_id) => dispatch(fetchAllLocationns(user_id)),\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(Students);\n"]},"metadata":{},"sourceType":"module"}