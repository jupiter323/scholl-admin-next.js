{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nvar _data = function data(value, total) {\n  return {\n    datasets: [{\n      data: [value, total - value],\n      backgroundColor: ['#62b771', '#eaeaea']\n    }]\n  };\n};\n\nvar LocationCard = function LocationCard(_ref) {\n  var index = _ref.index,\n      handleLocationCardClick = _ref.handleLocationCardClick,\n      _ref$location = _ref.location;\n  _ref$location = _ref$location === void 0 ? {} : _ref$location;\n  var _ref$location$locatio = _ref$location.locationBasicInfo;\n  _ref$location$locatio = _ref$location$locatio === void 0 ? {} : _ref$location$locatio;\n  var studentsAchievingTargetScore = _ref$location$locatio.studentsAchievingTargetScore,\n      activeStudents = _ref$location$locatio.activeStudents,\n      pastStudents = _ref$location$locatio.pastStudents,\n      unactivatedStudents = _ref$location$locatio.unactivatedStudents,\n      averageImprovement = _ref$location$locatio.averageImprovement,\n      averageInitialScore = _ref$location$locatio.averageInitialScore,\n      averageFinalScore = _ref$location$locatio.averageFinalScore,\n      _ref$location$locatio2 = _ref$location.locationContactInfo;\n  _ref$location$locatio2 = _ref$location$locatio2 === void 0 ? {} : _ref$location$locatio2;\n  var locationName = _ref$location$locatio2.locationName,\n      locationNickname = _ref$location$locatio2.locationNickname;\n  return React.createElement(\"div\", {\n    className: \"card-main-col col s12 m8 l7 xl5\"\n  }, React.createElement(\"div\", {\n    className: \"card-main card-location card card-large\"\n  }, React.createElement(\"div\", {\n    className: \"card-panel\",\n    style: {\n      backgroundColor: '#62b771',\n      color: '#fff'\n    }\n  }, React.createElement(\"div\", {\n    className: \"card-panel-row row\"\n  }, React.createElement(\"div\", {\n    className: \"col s10\"\n  }, React.createElement(\"div\", {\n    className: \"user-block\"\n  }, React.createElement(\"div\", {\n    className: \"user-text\",\n    style: {\n      color: '#fff'\n    }\n  }, React.createElement(\"h4\", {\n    className: \"h3\"\n  }, React.createElement(\"a\", {\n    href: \"#\",\n    onClick: function onClick() {\n      return handleLocationCardClick(index);\n    }\n  }, \" \", locationName)), React.createElement(\"span\", {\n    className: \"sub-title\"\n  }, locationNickname)))), React.createElement(\"div\", {\n    className: \"col s2 right-align\"\n  }, React.createElement(\"div\", {\n    className: \"row icons-row\"\n  }, React.createElement(\"div\", {\n    className: \"col right-align\"\n  }, React.createElement(\"span\", {\n    className: \"block-icon\"\n  }, React.createElement(\"i\", {\n    className: \"icon-location\"\n  }), React.createElement(\"span\", {\n    className: \"text-icon\"\n  }, \"Location\"))))))), React.createElement(\"div\", {\n    className: \"card-content\"\n  }, React.createElement(\"div\", {\n    className: \"row d-flex align-items-center mb-0\"\n  }, React.createElement(\"div\", {\n    className: \"col s12 m5\"\n  }, React.createElement(\"div\", {\n    className: \"chart-container\"\n  }, React.createElement(\"div\", {\n    className: \"chart-holder\"\n  }, React.createElement(Doughnut, {\n    data: function data() {\n      return _data(studentsAchievingTargetScore, pastStudents);\n    },\n    height: 110,\n    width: 110,\n    options: {\n      circumference: 1.45 * Math.PI,\n      rotation: -3.85,\n      cutoutPercentage: 55,\n      tooltips: false\n    }\n  }), React.createElement(\"span\", {\n    className: \"chart-value\",\n    style: {\n      backgroundColor: '#62b771',\n      bottom: '-15px'\n    }\n  }, React.createElement(\"span\", {\n    \"data-count-up\": true,\n    \"data-start-val\": \"0\",\n    \"data-end-val\": \"91\",\n    \"data-duration\": \"1\"\n  }), Math.floor(studentsAchievingTargetScore / pastStudents * 100), \"%\")), React.createElement(\"div\", {\n    className: \"chart-description\",\n    style: {\n      color: '#31837a',\n      marginTop: '45px'\n    }\n  }, \"Students Who Achieved Target Score\"))), React.createElement(\"div\", {\n    className: \"col s12 m7\"\n  }, React.createElement(\"ul\", {\n    className: \"points-list\"\n  }, React.createElement(\"li\", {\n    className: \"style-red-darken\"\n  }, React.createElement(\"span\", {\n    className: \"badge-circle\"\n  }, activeStudents), React.createElement(\"span\", {\n    className: \"point-text\"\n  }, \"active students\")), React.createElement(\"li\", {\n    className: \"style-pink-darken\"\n  }, React.createElement(\"span\", {\n    className: \"badge-circle\"\n  }, pastStudents), React.createElement(\"span\", {\n    className: \"point-text\"\n  }, \"past students\")), React.createElement(\"li\", null, React.createElement(\"span\", {\n    className: \"badge-circle\"\n  }, unactivatedStudents), React.createElement(\"span\", {\n    className: \"point-text\"\n  }, \"unactivated students\")), React.createElement(\"li\", {\n    className: \"style-blue-light\"\n  }, React.createElement(\"span\", {\n    className: \"badge-circle\"\n  }, \"+\", averageImprovement), React.createElement(\"span\", {\n    className: \"point-text\"\n  }, \"average improvement\")), React.createElement(\"li\", {\n    className: \"style-blue\"\n  }, React.createElement(\"span\", {\n    className: \"badge-circle\"\n  }, averageInitialScore), React.createElement(\"span\", {\n    className: \"point-text\"\n  }, \"average initial score\")), React.createElement(\"li\", {\n    className: \"style-blue-dark\"\n  }, React.createElement(\"span\", {\n    className: \"badge-circle\"\n  }, averageFinalScore), React.createElement(\"span\", {\n    className: \"point-text\"\n  }, \"average final score\"))))))));\n};\n\nLocationCard.propTypes = {\n  location: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  handleLocationCardClick: PropTypes.func.isRequired\n};\nexport default LocationCard;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Location/ListPage/components/LocationCard/index.js"],"names":["React","PropTypes","Doughnut","data","value","total","datasets","backgroundColor","LocationCard","index","handleLocationCardClick","location","locationBasicInfo","studentsAchievingTargetScore","activeStudents","pastStudents","unactivatedStudents","averageImprovement","averageInitialScore","averageFinalScore","locationContactInfo","locationName","locationNickname","color","circumference","Math","PI","rotation","cutoutPercentage","tooltips","bottom","floor","marginTop","propTypes","object","isRequired","number","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst data = (value, total) => ({\n  datasets: [{\n    data: [ value, total-value ],\n    backgroundColor: [\n      '#62b771',\n      '#eaeaea',\n    ],\n  }],\n})\n\nconst LocationCard = ({ index, handleLocationCardClick, location: {\n  locationBasicInfo: { studentsAchievingTargetScore, activeStudents, pastStudents, unactivatedStudents, averageImprovement, averageInitialScore, averageFinalScore } = {},\n  locationContactInfo: { locationName, locationNickname } = {},\n} = {} }) => (\n  <div className=\"card-main-col col s12 m8 l7 xl5\">\n    <div className=\"card-main card-location card card-large\">\n      <div className=\"card-panel\" style={{ backgroundColor: '#62b771', color: '#fff' }}>\n        <div className=\"card-panel-row row\">\n          <div className=\"col s10\">\n            <div className=\"user-block\">\n              <div className=\"user-text\" style={{ color: '#fff' }}>\n                <h4 className=\"h3\"><a href=\"#\" onClick={() => handleLocationCardClick(index)}> {locationName}</a></h4>\n                <span className=\"sub-title\">{locationNickname}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"col s2 right-align\">\n            <div className=\"row icons-row\">\n              <div className=\"col right-align\">\n                <span className=\"block-icon\">\n                  <i className=\"icon-location\"></i>\n                  <span className=\"text-icon\">Location</span>\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"row d-flex align-items-center mb-0\">\n          <div className=\"col s12 m5\">\n            <div className=\"chart-container\">\n              <div className=\"chart-holder\">\n                <Doughnut\n                  data={() => data(studentsAchievingTargetScore, pastStudents)}\n                  height={110}\n                  width={110}\n                  options={{\n                    circumference: 1.45 * Math.PI,\n                        rotation: -3.85,\n                        cutoutPercentage: 55,\n                        tooltips: false,\n                  }}\n                />\n                <span className=\"chart-value\" style={{ backgroundColor: '#62b771', bottom: '-15px' }}><span data-count-up data-start-val=\"0\" data-end-val=\"91\" data-duration=\"1\"></span>{Math.floor(studentsAchievingTargetScore / pastStudents * 100)}%</span>\n              </div>\n              <div className=\"chart-description\" style={{ color: '#31837a', marginTop: '45px' }}>Students Who Achieved Target Score</div>\n            </div>\n          </div>\n          <div className=\"col s12 m7\">\n            <ul className=\"points-list\">\n              <li className=\"style-red-darken\">\n                <span className=\"badge-circle\">{activeStudents}</span>\n                <span className=\"point-text\">active students</span>\n              </li>\n              <li className=\"style-pink-darken\">\n                <span className=\"badge-circle\">{pastStudents}</span>\n                <span className=\"point-text\">past students</span>\n              </li>\n              <li>\n                <span className=\"badge-circle\">{unactivatedStudents}</span>\n                <span className=\"point-text\">unactivated students</span>\n              </li>\n              <li className=\"style-blue-light\">\n                <span className=\"badge-circle\">+{averageImprovement}</span>\n                <span className=\"point-text\">average improvement</span>\n              </li>\n              <li className=\"style-blue\">\n                <span className=\"badge-circle\">{averageInitialScore}</span>\n                <span className=\"point-text\">average initial score</span>\n              </li>\n              <li className=\"style-blue-dark\">\n                <span className=\"badge-circle\">{averageFinalScore}</span>\n                <span className=\"point-text\">average final score</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nLocationCard.propTypes = {\n  location: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  handleLocationCardClick: PropTypes.func.isRequired,\n};\n\nexport default LocationCard;\n"]},"metadata":{},"sourceType":"module"}