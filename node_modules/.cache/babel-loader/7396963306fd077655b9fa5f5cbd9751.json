{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport update from 'immutability-helper';\nimport categoryStyles from '../../../../FormComponents/Dropdown/styles/dropdownStyles';\nimport ControlComponent from '../../../../FormComponents/Dropdown/styles/ControlComponent';\nimport MultiValueLabel from '../../../../FormComponents/Dropdown/styles/MultiValueLabel';\nimport { subjectOptions, difficultyOptions, typeOptions } from '../../../utils';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\n\nvar WorksheetDetails =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WorksheetDetails, _React$Component);\n\n  function WorksheetDetails(props) {\n    var _this;\n\n    _classCallCheck(this, WorksheetDetails);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WorksheetDetails).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillReceiveProps\", function (nextProps) {\n      if (!_this.state.originalWorksheet || nextProps.worksheet.id !== _this.state.originalWorksheet.id) {\n        var _nextProps$worksheet = nextProps.worksheet;\n        _nextProps$worksheet = _nextProps$worksheet === void 0 ? {} : _nextProps$worksheet;\n        var id = _nextProps$worksheet.id,\n            worksheetName = _nextProps$worksheet.worksheetName,\n            subject = _nextProps$worksheet.subject,\n            type = _nextProps$worksheet.problemType,\n            difficulty = _nextProps$worksheet.difficulty,\n            timeEstimate = _nextProps$worksheet.timeEstimate,\n            categories = _nextProps$worksheet.classifications,\n            description = _nextProps$worksheet.description;\n        var updatedWorksheet = {\n          id: id,\n          worksheetName: worksheetName,\n          subject: subject,\n          type: type,\n          difficulty: difficulty,\n          timeEstimate: timeEstimate,\n          categories: categories,\n          description: description\n        };\n        var originalWorksheetState = _this.state.originalWorksheet;\n        var originalWorksheet = update(originalWorksheetState, {\n          $merge: nextProps.worksheet\n        });\n\n        _this.setState({\n          originalWorksheet: originalWorksheet,\n          updatedWorksheet: updatedWorksheet\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSectionDropdownOptions\", function () {\n      var categoryOptions = _this.state.categoryOptions;\n      var _this$props$worksheet = _this.props.worksheet;\n      _this$props$worksheet = _this$props$worksheet === void 0 ? {} : _this$props$worksheet;\n      var subject = _this$props$worksheet.subject;\n\n      if (!subject) {\n        return categoryOptions;\n      }\n\n      var categoryLabels = categoryOptions.map(function (categoryOption) {\n        return categoryOption.label;\n      });\n      var subjectIndex = categoryLabels.indexOf(subject.charAt(0).toUpperCase() + subject.slice(1));\n      return [categoryOptions[subjectIndex]];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateCategoryState\", function (categories) {\n      var updatedWorksheet = update(_this.state.updatedWorksheet, {\n        $merge: {\n          categories: categories\n        }\n      });\n\n      _this.setState({\n        updatedWorksheet: updatedWorksheet\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCategoryChange\", function (categories) {\n      var updatedCategories = categories.reduce(function (finalArr, category) {\n        finalArr.push(category.value);\n        return finalArr;\n      }, []);\n\n      _this.updateCategoryState(updatedCategories);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDetailsChange\", function (event, name) {\n      var previousWorksheetState = _this.state.updatedWorksheet;\n      var value = event.target ? event.target.value : event;\n      var updatedWorksheet = update(previousWorksheetState, {\n        $merge: _defineProperty({}, name, value)\n      });\n\n      _this.setState({\n        updatedWorksheet: updatedWorksheet\n      });\n    });\n\n    _this.state = {\n      originalWorksheet: {\n        worksheetName: '',\n        subject: {},\n        type: '',\n        difficulty: '',\n        timeEstimate: '',\n        categories: [],\n        description: ''\n      },\n      updatedWorksheet: {\n        worksheetName: '',\n        subject: {},\n        type: '',\n        difficulty: '',\n        timeEstimate: '',\n        categories: [],\n        description: ''\n      },\n      validation: {\n        worksheetName: true,\n        subject: true,\n        type: true,\n        difficulty: true,\n        timeEstimate: true,\n        categories: true\n      },\n      categoryOptions: [{\n        label: 'Math',\n        options: [{\n          value: 'Special Right Triangles',\n          label: 'Special Right Triangles'\n        }, {\n          value: 'Volumes',\n          label: 'Volumes'\n        }, {\n          value: 'Trig Functions',\n          label: 'Trig Functions'\n        }]\n      }, {\n        label: 'Writing',\n        options: [{\n          value: 'Astrology',\n          label: 'Astrology'\n        }, {\n          value: 'Algebra',\n          label: 'Algebra'\n        }]\n      }, {\n        label: 'Reading',\n        options: [{\n          value: 'Geometry',\n          label: 'Geometry'\n        }, {\n          value: 'Pythagorean Theorem',\n          label: 'Pythagorean Theorem'\n        }]\n      }],\n      subjectCategoryOptions: []\n    };\n    return _this;\n  }\n\n  _createClass(WorksheetDetails, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$worksheet2 = this.props.worksheet;\n      _this$props$worksheet2 = _this$props$worksheet2 === void 0 ? {} : _this$props$worksheet2;\n      var id = _this$props$worksheet2.id,\n          worksheetName = _this$props$worksheet2.worksheetName,\n          subject = _this$props$worksheet2.subject,\n          type = _this$props$worksheet2.problemType,\n          difficulty = _this$props$worksheet2.difficulty,\n          timeEstimate = _this$props$worksheet2.timeEstimate,\n          categories = _this$props$worksheet2.classifications,\n          description = _this$props$worksheet2.description;\n      var updatedWorksheet = {\n        id: id,\n        worksheetName: worksheetName,\n        subject: subject,\n        type: type,\n        difficulty: difficulty,\n        timeEstimate: timeEstimate,\n        categories: categories,\n        description: description\n      };\n      var originalWorksheetState = this.state.originalWorksheet;\n      var originalWorksheet = update(originalWorksheetState, {\n        $merge: updatedWorksheet\n      });\n      this.setState({\n        originalWorksheet: originalWorksheet,\n        updatedWorksheet: updatedWorksheet\n      }); // eslint-disable-line\n    } // This resets the component state to reflect the details of the next worksheet the user clicks on\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          categoriesValid = _this$state.validation.categories,\n          _this$state$updatedWo = _this$state.updatedWorksheet,\n          worksheetName = _this$state$updatedWo.worksheetName,\n          timeEstimate = _this$state$updatedWo.timeEstimate,\n          subject = _this$state$updatedWo.subject,\n          type = _this$state$updatedWo.type,\n          difficulty = _this$state$updatedWo.difficulty,\n          description = _this$state$updatedWo.description,\n          categories = _this$state$updatedWo.categories;\n      var defaultCategories = this.props.defaultCategories;\n      return React.createElement(\"div\", {\n        className: \"col s12 l6\"\n      }, React.createElement(\"div\", {\n        className: \"card-block\"\n      }, React.createElement(\"h2\", null, \"Details\"), React.createElement(\"div\", {\n        className: \"card\"\n      }, React.createElement(\"div\", {\n        className: \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"card-body\"\n      }, React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s12\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        id: \"details_name\",\n        value: worksheetName,\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'worksheetName');\n        }\n      }), React.createElement(\"label\", {\n        className: worksheetName.length ? 'label active' : 'label',\n        htmlFor: \"details_name\"\n      }, \"Name\")))), React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(Dropdown, {\n        value: getValueFromState(subject, subjectOptions),\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'subject');\n        },\n        options: subjectOptions,\n        label: \"Subject\",\n        stateKey: \"subject\",\n        dropdownKey: \"subject\"\n      }))), React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(Dropdown, {\n        value: getValueFromState(type, typeOptions),\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'type');\n        },\n        options: typeOptions,\n        label: \"Type\",\n        stateKey: \"type\",\n        dropdownKey: \"type\"\n      })))), React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(Dropdown, {\n        value: getValueFromState(difficulty, difficultyOptions),\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'difficulty');\n        },\n        options: difficultyOptions,\n        label: \"Difficulty\",\n        stateKey: \"difficulty\",\n        dropdownKey: \"difficulty\"\n      }))), React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"datepicker-field input-field\"\n      }, React.createElement(\"i\", {\n        className: \"icon-clock2\"\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"timepicker\",\n        id: \"detail_estimated_time\",\n        value: timeEstimate,\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'timeEstimate');\n        }\n      }), React.createElement(\"label\", {\n        className: timeEstimate.length ? 'label active' : 'label',\n        htmlFor: \"detail_estimated_time\"\n      }, \"Estimated Time\")))), React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s12\"\n      }, React.createElement(Select, {\n        options: this.getSectionDropdownOptions(),\n        isMulti: true,\n        instanceId: \"categories-select\",\n        onChange: this.handleCategoryChange,\n        components: {\n          Control: ControlComponent,\n          MultiValueLabel: MultiValueLabel\n        },\n        name: \"categoryOptions\",\n        className: categoriesValid || !categoriesValid && categories.length ? '' : 'invalid',\n        classNamePrefix: \"multi-select\",\n        placeholder: 'Select one or more categories',\n        styles: categoryStyles,\n        isClearable: false,\n        label: \"Categories\",\n        defaultValue: defaultCategories\n      }))), React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s12\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(\"textarea\", {\n        id: \"detail_description\",\n        className: \"materialize-textarea\",\n        style: {\n          height: '70px'\n        },\n        value: description,\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'description');\n        }\n      }), React.createElement(\"label\", {\n        className: description.length ? 'label active' : 'label',\n        htmlFor: \"detail_description\"\n      }, \"Description (optional)\")))))))));\n    }\n  }]);\n\n  return WorksheetDetails;\n}(React.Component);\n\nWorksheetDetails.propTypes = {\n  worksheet: PropTypes.object,\n  defaultCategories: PropTypes.array\n};\nexport default WorksheetDetails;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Worksheet/DetailPage/components/WorksheetDetails/index.js"],"names":["React","PropTypes","Select","update","categoryStyles","ControlComponent","MultiValueLabel","subjectOptions","difficultyOptions","typeOptions","Dropdown","getValueFromState","WorksheetDetails","props","nextProps","state","originalWorksheet","worksheet","id","worksheetName","subject","type","problemType","difficulty","timeEstimate","categories","classifications","description","updatedWorksheet","originalWorksheetState","$merge","setState","categoryOptions","categoryLabels","map","categoryOption","label","subjectIndex","indexOf","charAt","toUpperCase","slice","updatedCategories","reduce","finalArr","category","push","value","updateCategoryState","event","name","previousWorksheetState","target","validation","options","subjectCategoryOptions","categoriesValid","defaultCategories","handleDetailsChange","length","getSectionDropdownOptions","handleCategoryChange","Control","height","Component","propTypes","object","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport update from 'immutability-helper';\n\nimport categoryStyles from '../../../../FormComponents/Dropdown/styles/dropdownStyles';\nimport ControlComponent from '../../../../FormComponents/Dropdown/styles/ControlComponent';\nimport MultiValueLabel from '../../../../FormComponents/Dropdown/styles/MultiValueLabel';\nimport { subjectOptions, difficultyOptions, typeOptions } from '../../../utils';\n\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\n\nclass WorksheetDetails extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      originalWorksheet: {\n        worksheetName: '',\n        subject: {},\n        type: '',\n        difficulty: '',\n        timeEstimate: '',\n        categories: [],\n        description: '',\n      },\n      updatedWorksheet: {\n        worksheetName: '',\n        subject: {},\n        type: '',\n        difficulty: '',\n        timeEstimate: '',\n        categories: [],\n        description: '',\n      },\n      validation: {\n        worksheetName: true,\n        subject: true,\n        type: true,\n        difficulty: true,\n        timeEstimate: true,\n        categories: true,\n      },\n      categoryOptions: [\n        {\n          label: 'Math',\n          options: [\n            { value: 'Special Right Triangles', label: 'Special Right Triangles' },\n            { value: 'Volumes', label: 'Volumes' },\n            { value: 'Trig Functions', label: 'Trig Functions' },\n          ],\n        },\n        {\n          label: 'Writing',\n          options: [\n            { value: 'Astrology', label: 'Astrology' },\n            { value: 'Algebra', label: 'Algebra' },\n          ],\n        },\n        {\n          label: 'Reading',\n          options: [\n            { value: 'Geometry', label: 'Geometry' },\n            { value: 'Pythagorean Theorem', label: 'Pythagorean Theorem' },\n          ],\n        },\n      ],\n      subjectCategoryOptions: [],\n    };\n  }\n\n  componentDidMount() {\n    const { worksheet: { id, worksheetName, subject, problemType: type, difficulty, timeEstimate, classifications: categories, description } = {} } = this.props;\n    const updatedWorksheet = { id, worksheetName, subject, type, difficulty, timeEstimate, categories, description };\n    const { originalWorksheet: originalWorksheetState } = this.state;\n    const originalWorksheet = update(originalWorksheetState, {\n      $merge: updatedWorksheet,\n    });\n    this.setState({ originalWorksheet, updatedWorksheet }); // eslint-disable-line\n  }\n\n  // This resets the component state to reflect the details of the next worksheet the user clicks on\n  componentWillReceiveProps = (nextProps) => {\n    if ((!this.state.originalWorksheet || nextProps.worksheet.id !== this.state.originalWorksheet.id)) {\n      const { worksheet: { id, worksheetName, subject, problemType: type, difficulty, timeEstimate, classifications: categories, description } = {} } = nextProps;\n      const updatedWorksheet = { id, worksheetName, subject, type, difficulty, timeEstimate, categories, description };\n      const { originalWorksheet: originalWorksheetState } = this.state;\n      const originalWorksheet = update(originalWorksheetState, {\n        $merge: nextProps.worksheet,\n      });\n      this.setState({ originalWorksheet, updatedWorksheet });\n    }\n  }\n\n  getSectionDropdownOptions = () => {\n    const { categoryOptions } = this.state;\n    const { worksheet: { subject } = {} } = this.props;\n    if (!subject) {\n      return categoryOptions;\n    }\n    const categoryLabels = categoryOptions.map(categoryOption => categoryOption.label);\n    const subjectIndex = categoryLabels.indexOf(subject.charAt(0).toUpperCase() + subject.slice(1));\n    return [categoryOptions[subjectIndex]];\n  }\n\n  updateCategoryState = (categories) => {\n    const updatedWorksheet = update(this.state.updatedWorksheet, {\n      $merge: { categories },\n    });\n    this.setState({ updatedWorksheet });\n  }\n\n  handleCategoryChange = (categories) => {\n    const updatedCategories = categories.reduce((finalArr, category) => {\n      finalArr.push(category.value);\n      return finalArr;\n    }, []);\n    this.updateCategoryState(updatedCategories);\n  };\n\n  handleDetailsChange = (event, name) => {\n    const { updatedWorksheet: previousWorksheetState } = this.state;\n    const value = event.target ? event.target.value : event;\n    const updatedWorksheet = update(previousWorksheetState, {\n      $merge: { [name]: value },\n    });\n    this.setState({ updatedWorksheet });\n  }\n\n  render() {\n    const { validation: { categories: categoriesValid }, updatedWorksheet: { worksheetName, timeEstimate, subject, type, difficulty, description, categories } } = this.state;\n    const { defaultCategories } = this.props;\n    return (\n      <div className=\"col s12 l6\">\n        <div className=\"card-block\">\n          <h2>Details</h2>\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"card-body\">\n                <div className=\"row mb-0\">\n                  <div className=\"col s12\">\n                    <div className=\"input-field\">\n                      <input\n                        type=\"text\"\n                        id=\"details_name\"\n                        value={worksheetName}\n                        onChange={(event) => this.handleDetailsChange(event, 'worksheetName')}\n                      />\n                      <label className={worksheetName.length ? 'label active' : 'label'} htmlFor=\"details_name\">Name</label>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row mb-0\">\n                  <div className=\"col s6\">\n                    <div className=\"input-field\">\n                      <Dropdown\n                        value={getValueFromState(subject, subjectOptions)}\n                        onChange={(event) => this.handleDetailsChange(event, 'subject')}\n                        options={subjectOptions}\n                        label=\"Subject\"\n                        stateKey=\"subject\"\n                        dropdownKey=\"subject\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col s6\">\n                    <div className=\"input-field\">\n                      <Dropdown\n                        value={getValueFromState(type, typeOptions)}\n                        onChange={(event) => this.handleDetailsChange(event, 'type')}\n                        options={typeOptions}\n                        label=\"Type\"\n                        stateKey=\"type\"\n                        dropdownKey=\"type\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row mb-0\">\n                  <div className=\"col s6\">\n                    <div className=\"input-field\">\n                      <Dropdown\n                        value={getValueFromState(difficulty, difficultyOptions)}\n                        onChange={(event) => this.handleDetailsChange(event, 'difficulty')}\n                        options={difficultyOptions}\n                        label=\"Difficulty\"\n                        stateKey=\"difficulty\"\n                        dropdownKey=\"difficulty\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col s6\">\n                    <div className=\"datepicker-field input-field\">\n                      <i className=\"icon-clock2\"></i>\n                      <input\n                        type=\"text\"\n                        className=\"timepicker\"\n                        id=\"detail_estimated_time\"\n                        value={timeEstimate}\n                        onChange={(event) => this.handleDetailsChange(event, 'timeEstimate')}\n                      />\n                      <label className={timeEstimate.length ? 'label active' : 'label'} htmlFor=\"detail_estimated_time\">Estimated Time</label>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row mb-0\">\n                  <div className=\"col s12\">\n                    <Select\n                      options={this.getSectionDropdownOptions()}\n                      isMulti\n                      instanceId=\"categories-select\"\n                      onChange={this.handleCategoryChange}\n                      components={{ Control: ControlComponent, MultiValueLabel }}\n                      name=\"categoryOptions\"\n                      className={(categoriesValid) || (!categoriesValid && categories.length) ? '' : 'invalid'}\n                      classNamePrefix=\"multi-select\"\n                      placeholder={'Select one or more categories'}\n                      styles={categoryStyles}\n                      isClearable={false}\n                      label=\"Categories\"\n                      defaultValue={defaultCategories}\n                    />\n                  </div>\n                </div>\n                <div className=\"row mb-0\">\n                  <div className=\"col s12\">\n                    <div className=\"input-field\">\n                      <textarea\n                        id=\"detail_description\"\n                        className=\"materialize-textarea\"\n                        style={{ height: '70px' }}\n                        value={description}\n                        onChange={(event) => this.handleDetailsChange(event, 'description')}\n                      />\n                      <label className={description.length ? 'label active' : 'label'} htmlFor=\"detail_description\">Description (optional)</label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nWorksheetDetails.propTypes = {\n  worksheet: PropTypes.object,\n  defaultCategories: PropTypes.array,\n};\n\nexport default WorksheetDetails;\n"]},"metadata":{},"sourceType":"module"}