{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport locationOptions from '../../../../utils/locationOptions';\nimport sortOptions from '../../../../utils/sortOptions';\n\nvar FilterSection =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FilterSection, _React$Component);\n\n  function FilterSection(props) {\n    var _this;\n\n    _classCallCheck(this, FilterSection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterSection).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFilterChange\", function (event, name) {\n      var _this$props = _this.props,\n          onSetFilteredLocationState = _this$props.onSetFilteredLocationState,\n          onUnsetFilteredLocationState = _this$props.onUnsetFilteredLocationState,\n          onSetSort = _this$props.onSetSort;\n      var value = event.target ? event.target.value : event;\n      var updatedState = update(_this.state, {\n        $merge: _defineProperty({}, name, value)\n      });\n\n      _this.setState(updatedState);\n\n      if (name === 'location') {\n        if (event === '') {\n          return onUnsetFilteredLocationState();\n        }\n\n        return onSetFilteredLocationState(event);\n      } else if (name === 'sort') {\n        return onSetSort(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submitNameFilter\", function () {\n      var _this$props2 = _this.props,\n          onSetFilteredState = _this$props2.onSetFilteredState,\n          onUnsetFilteredState = _this$props2.onUnsetFilteredState;\n      var name = _this.state.name;\n\n      if (name === '') {\n        onUnsetFilteredState();\n      }\n\n      var transformedName = name.replace(/\\s/g, \"\").toLowerCase();\n      onSetFilteredState(transformedName);\n    });\n\n    _this.state = {\n      name: '',\n      location: {},\n      sort: {}\n    };\n    return _this;\n  } // This function does two things - first, it changes the filter state regardless of the field it's coming from\n  // If either location or sort filters are changed, we dispatch the appropriate action in ListPage to ensure the rendered instructors are filtered/sorted appropriately\n  // eslint-disable-next-line consistent-return\n\n\n  _createClass(FilterSection, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // eslint-disable-next-line no-unused-vars\n      var _this$state = this.state,\n          name = _this$state.name,\n          location = _this$state.location,\n          sort = _this$state.sort;\n      return React.createElement(\"div\", {\n        className: \"filter-inputs-holder\"\n      }, React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s12 m4 l3\"\n      }, React.createElement(\"div\", {\n        className: \"search-field input-field\"\n      }, React.createElement(\"input\", {\n        type: \"search\",\n        id: \"name_search\",\n        className: \"input-control validate\",\n        name: \"name\",\n        value: name,\n        onChange: function onChange(event) {\n          return _this2.handleFilterChange(event, 'name');\n        }\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"search-button\",\n        onClick: this.submitNameFilter\n      }, React.createElement(\"i\", {\n        className: \"icon-search\"\n      })), React.createElement(\"label\", {\n        className: name.length ? 'label active' : 'label',\n        htmlFor: \"name_search\"\n      }, \"Search\"))), React.createElement(\"div\", {\n        className: \"col s12 m4 l3\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(Dropdown, {\n        value: getValueFromState(location, locationOptions),\n        onChange: function onChange(event) {\n          return _this2.handleFilterChange(event, 'location');\n        },\n        options: locationOptions,\n        label: \"Location\",\n        stateKey: \"location\",\n        dropdownKey: \"location\"\n      }))), React.createElement(\"div\", {\n        className: \"col s12 m4 l3\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(Dropdown, {\n        value: getValueFromState(sort, sortOptions),\n        onChange: function onChange(event) {\n          return _this2.handleFilterChange(event, 'sort');\n        },\n        options: sortOptions,\n        label: \"Sort\",\n        stateKey: \"sort\",\n        dropdownKey: \"sort\"\n      })))));\n    }\n  }]);\n\n  return FilterSection;\n}(React.Component);\n\nFilterSection.propTypes = {\n  onSetSort: PropTypes.func.isRequired,\n  onSetFilteredState: PropTypes.func.isRequired,\n  onUnsetFilteredState: PropTypes.func.isRequired,\n  onSetFilteredLocationState: PropTypes.func.isRequired,\n  onUnsetFilteredLocationState: PropTypes.func.isRequired\n};\nexport default FilterSection;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Instructor/ListPage/components/FilterSection/index.js"],"names":["React","PropTypes","update","Dropdown","getValueFromState","locationOptions","sortOptions","FilterSection","props","event","name","onSetFilteredLocationState","onUnsetFilteredLocationState","onSetSort","value","target","updatedState","state","$merge","setState","onSetFilteredState","onUnsetFilteredState","transformedName","replace","toLowerCase","location","sort","handleFilterChange","submitNameFilter","length","Component","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\n\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport locationOptions from '../../../../utils/locationOptions';\nimport sortOptions from '../../../../utils/sortOptions';\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      location: {},\n      sort: {},\n    };\n  }\n\n  // This function does two things - first, it changes the filter state regardless of the field it's coming from\n  // If either location or sort filters are changed, we dispatch the appropriate action in ListPage to ensure the rendered instructors are filtered/sorted appropriately\n  // eslint-disable-next-line consistent-return\n  handleFilterChange = (event, name) => {\n    const { onSetFilteredLocationState, onUnsetFilteredLocationState, onSetSort } = this.props;\n    const value = event.target ? event.target.value : event;\n    const updatedState = update(this.state, {\n      $merge: { [name]: value },\n    });\n    this.setState(updatedState);\n    if (name === 'location') {\n      if (event === '') {\n        return onUnsetFilteredLocationState();\n      }\n      return onSetFilteredLocationState(event);\n    } else if (name === 'sort') {\n      return onSetSort(event);\n    }\n  }\n\n  // Strips the entered name of any spaces and capitalizing and fires off the ListPage event that filters the instructors\n  submitNameFilter = () => {\n    const { onSetFilteredState, onUnsetFilteredState } = this.props;\n    const { name } = this.state;\n    if (name === '') {\n      onUnsetFilteredState();\n    }\n    const transformedName = name.replace(/\\s/g, \"\").toLowerCase();\n    onSetFilteredState(transformedName);\n  }\n\n  render() {\n    // eslint-disable-next-line no-unused-vars\n    const { name, location, sort } = this.state;\n    return (\n      <div className=\"filter-inputs-holder\">\n        <div className=\"row mb-0\">\n          <div className=\"col s12 m4 l3\">\n            <div className=\"search-field input-field\">\n              <input\n                type=\"search\"\n                id=\"name_search\"\n                className=\"input-control validate\"\n                name=\"name\"\n                value={name}\n                onChange={(event) => this.handleFilterChange(event, 'name')}\n              />\n              <button\n                type=\"submit\"\n                className=\"search-button\"\n                onClick={this.submitNameFilter}\n              >\n                <i className=\"icon-search\"></i>\n              </button>\n              <label className={name.length ? 'label active' : 'label'} htmlFor=\"name_search\">Search</label>\n            </div>\n          </div>\n          <div className=\"col s12 m4 l3\">\n            <div className=\"input-field\">\n              <Dropdown\n                value={getValueFromState(location, locationOptions)}\n                onChange={(event) => this.handleFilterChange(event, 'location')}\n                options={locationOptions}\n                label=\"Location\"\n                stateKey=\"location\"\n                dropdownKey=\"location\"\n              />\n            </div>\n          </div>\n          <div className=\"col s12 m4 l3\">\n            <div className=\"input-field\">\n              <Dropdown\n                value={getValueFromState(sort, sortOptions)}\n                onChange={(event) => this.handleFilterChange(event, 'sort')}\n                options={sortOptions}\n                label=\"Sort\"\n                stateKey=\"sort\"\n                dropdownKey=\"sort\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nFilterSection.propTypes = {\n  onSetSort: PropTypes.func.isRequired,\n  onSetFilteredState: PropTypes.func.isRequired,\n  onUnsetFilteredState: PropTypes.func.isRequired,\n  onSetFilteredLocationState: PropTypes.func.isRequired,\n  onUnsetFilteredLocationState: PropTypes.func.isRequired,\n};\n\nexport default FilterSection;\n"]},"metadata":{},"sourceType":"module"}