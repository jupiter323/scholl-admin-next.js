{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/components/InCompleteSection.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport ProblemRow from \"./ProblemRow\";\n\nclass InCompleteReadingTest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      const {\n        testSection\n      } = nextProps;\n      if (!testSection || !testSection.hasOwnProperty('problems')) return;\n      const updatedProblems = update(this.state.problems, {\n        $set: testSection.problems.problems\n      });\n      this.setState({\n        problems: updatedProblems\n      });\n    });\n\n    _defineProperty(this, \"mapProblems\", () => this.state.problems.map((problem, index) => __jsx(ProblemRow, {\n      problem: problem,\n      index: index,\n      key: problem.test_problem_id,\n      onAddStudentAnswerToTest: this.props.onAddStudentAnswerToTest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    })));\n\n    this.state = {\n      problems: []\n    };\n  }\n\n  render() {\n    const {\n      open,\n      testSection,\n      handleTestScore\n    } = this.props;\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, open && __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"full-height-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"content-section content-section-simulated\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"content-section-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-full-height card-student card-main-full card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"custom-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"jcf-scrollable no-border height-window\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, __jsx(\"ol\", {\n      className: \"answers-list answers-list-columns\",\n      style: {\n        marginBottom: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, testSection && testSection.problems && this.mapProblems()))))), __jsx(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"btn-holder right-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"btn btn-xlarge waves-effect waves-light bg-blue\",\n      onClick: () => handleTestScore(this.props.testSection),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Score Test\"))))))));\n  }\n\n}\n\nInCompleteReadingTest.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n  testSection: PropTypes.object.isRequired,\n  onStudentTestScore: PropTypes.func.isRequired,\n  handleTestScore: PropTypes.func.isRequired\n};\nexport default InCompleteReadingTest;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/components/InCompleteSection.js"],"names":["React","update","PropTypes","ProblemRow","InCompleteReadingTest","Component","constructor","props","nextProps","testSection","hasOwnProperty","updatedProblems","state","problems","$set","setState","map","problem","index","test_problem_id","onAddStudentAnswerToTest","render","open","handleTestScore","marginBottom","mapProblems","propTypes","bool","isRequired","func","object","onStudentTestScore"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,qBAAN,SAAoCJ,KAAK,CAACK,SAA1C,CAAoD;AAClDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,uDAMSC,SAAS,IAAI;AACvC,YAAM;AAAEC,QAAAA;AAAF,UAAkBD,SAAxB;AACA,UAAI,CAACC,WAAD,IAAgB,CAACA,WAAW,CAACC,cAAZ,CAA2B,UAA3B,CAArB,EAA6D;AAC7D,YAAMC,eAAe,GAAGV,MAAM,CAAC,KAAKW,KAAL,CAAWC,QAAZ,EAAsB;AAClDC,QAAAA,IAAI,EAAEL,WAAW,CAACI,QAAZ,CAAqBA;AADuB,OAAtB,CAA9B;AAGA,WAAKE,QAAL,CAAc;AACZF,QAAAA,QAAQ,EAAEF;AADE,OAAd;AAGD,KAfkB;;AAAA,yCAiBL,MACZ,KAAKC,KAAL,CAAWC,QAAX,CAAoBG,GAApB,CAAwB,CAACC,OAAD,EAAUC,KAAV,KACtB,MAAC,UAAD;AACE,MAAA,OAAO,EAAED,OADX;AAEE,MAAA,KAAK,EAAEC,KAFT;AAGE,MAAA,GAAG,EAAED,OAAO,CAACE,eAHf;AAIE,MAAA,wBAAwB,EAAE,KAAKZ,KAAL,CAAWa,wBAJvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAlBiB;;AAEjB,SAAKR,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD;;AAsBDQ,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,IADI;AAEJb,MAAAA,WAFI;AAGJc,MAAAA;AAHI,QAIF,KAAKhB,KAJT;AAKA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGe,IAAI,IACH,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,2CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,mDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,wCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAC,mCADZ;AAEE,MAAA,KAAK,EAAE;AAAEE,QAAAA,YAAY,EAAE;AAAhB,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGf,WAAW,IAAIA,WAAW,CAACI,QAA3B,IAAuC,KAAKY,WAAL,EAJ1C,CADF,CADF,CADF,CADF,CADF,EAeE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,GADP;AAEE,MAAA,SAAS,EAAC,iDAFZ;AAGE,MAAA,OAAO,EAAE,MAAMF,eAAe,CAAC,KAAKhB,KAAL,CAAWE,WAAZ,CAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,CAfF,CADF,CADF,CADF,CAFJ,CADF;AAuCD;;AAzEiD;;AA4EpDL,qBAAqB,CAACsB,SAAtB,GAAkC;AAChCJ,EAAAA,IAAI,EAAEpB,SAAS,CAACyB,IAAV,CAAeC,UADW;AAEhCR,EAAAA,wBAAwB,EAAElB,SAAS,CAAC2B,IAAV,CAAeD,UAFT;AAGhCnB,EAAAA,WAAW,EAAEP,SAAS,CAAC4B,MAAV,CAAiBF,UAHE;AAIhCG,EAAAA,kBAAkB,EAAE7B,SAAS,CAAC2B,IAAV,CAAeD,UAJH;AAKhCL,EAAAA,eAAe,EAAErB,SAAS,CAAC2B,IAAV,CAAeD;AALA,CAAlC;AAQA,eAAexB,qBAAf","sourcesContent":["import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport ProblemRow from \"./ProblemRow\";\n\nclass InCompleteReadingTest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      problems: [],\n    };\n  }\n  componentWillReceiveProps = nextProps => {\n    const { testSection } = nextProps;\n    if (!testSection || !testSection.hasOwnProperty('problems')) return;\n    const updatedProblems = update(this.state.problems, {\n      $set: testSection.problems.problems,\n    });\n    this.setState({\n      problems: updatedProblems,\n    });\n  };\n\n  mapProblems = () =>\n    this.state.problems.map((problem, index) => (\n      <ProblemRow\n        problem={problem}\n        index={index}\n        key={problem.test_problem_id}\n        onAddStudentAnswerToTest={this.props.onAddStudentAnswerToTest}\n      />\n    ));\n\n  render() {\n    const {\n      open,\n      testSection,\n      handleTestScore,\n    } = this.props;\n    return (\n      <div>\n        {open && (\n          <React.Fragment>\n            <div className=\"full-height-section\">\n              <div className=\"content-section content-section-simulated\">\n                <div className=\"content-section-holder\">\n                  <div className=\"card-full-height card-student card-main-full card\">\n                    <div className=\"card-content\">\n                      <div className=\"custom-form\">\n                        <div className=\"jcf-scrollable no-border height-window\">\n                          <ol\n                            className=\"answers-list answers-list-columns\"\n                            style={{ marginBottom: \"20px\" }}\n                          >\n                            {testSection && testSection.problems && this.mapProblems()}\n                          </ol>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"btn-holder right-align\">\n                      <a\n                        href=\"#\"\n                        className=\"btn btn-xlarge waves-effect waves-light bg-blue\"\n                        onClick={() => handleTestScore(this.props.testSection)}\n                      >\n                        Score Test\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nInCompleteReadingTest.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n  testSection: PropTypes.object.isRequired,\n  onStudentTestScore: PropTypes.func.isRequired,\n  handleTestScore: PropTypes.func.isRequired,\n};\n\nexport default InCompleteReadingTest;\n"]},"metadata":{},"sourceType":"module"}