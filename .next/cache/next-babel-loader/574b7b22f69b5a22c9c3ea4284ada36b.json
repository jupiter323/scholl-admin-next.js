{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nvar _data = function data(percentage) {\n  return {\n    datasets: [{\n      data: [percentage, 100 - percentage],\n      backgroundColor: ['#00bbf7', '#eaeaea']\n    }]\n  };\n};\n\nexport { _data as data };\n\nvar getCardClass = function getCardClass(disabled, available) {\n  if (disabled) {\n    return 'card-test card-disabled card-main card';\n  }\n\n  if (!available) {\n    return 'card-test card-nonavailable card-main card';\n  }\n\n  return 'card-test card-main card';\n};\n\nvar ScoredTestCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ScoredTestCard, _React$Component);\n\n  function ScoredTestCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ScoredTestCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScoredTestCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false,\n        dropdownIndex: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCreateTest\", function (event) {\n      event.preventDefault();\n      console.warn('Pending implementation of create test UI and functionality');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDropdownClick\", function (event) {\n      var _this$props = _this.props,\n          onSetDropdown = _this$props.onSetDropdown,\n          onCloseDropdown = _this$props.onCloseDropdown,\n          dropdownIsOpen = _this$props.dropdownIsOpen,\n          index = _this$props.index;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    return _this;\n  }\n\n  _createClass(ScoredTestCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          test = _this$props2.test,\n          dropdownIndex = _this$props2.dropdownIndex,\n          index = _this$props2.index,\n          dropdownIsOpen = _this$props2.dropdownIsOpen,\n          onEditTest = _this$props2.onEditTest,\n          onDownloadReport = _this$props2.onDownloadReport,\n          onResetTest = _this$props2.onResetTest,\n          onDeleteTest = _this$props2.onDeleteTest;\n      var _test$flags = test.flags,\n          flags = _test$flags === void 0 ? [] : _test$flags,\n          disabled = test.disabled,\n          available = test.available,\n          testType = test.testType,\n          testDate = test.testDate,\n          title = test.title,\n          version = test.version,\n          availableDate = test.availableDate,\n          dueDate = test.dueDate,\n          completionDate = test.completionDate,\n          initialScore = test.initialScore,\n          targetScore = test.targetScore,\n          currentScore = test.currentScore,\n          totalGain = test.totalGain,\n          subjects = test.subjects;\n      return React.createElement(\"div\", {\n        className: \"col s12 m8 l7 xl5\"\n      }, React.createElement(\"div\", {\n        className: \"card-main-col\"\n      }, React.createElement(\"div\", {\n        className: getCardClass(disabled, available)\n      }, React.createElement(\"div\", {\n        className: \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"card-title-row row\"\n      }, React.createElement(\"div\", {\n        className: \"col s9\"\n      }, React.createElement(\"div\", {\n        className: \"card-title-block\"\n      }, React.createElement(\"h4\", {\n        className: \"h2\"\n      }, React.createElement(\"b\", null, testType === 'real' ? 'Real SAT' : title), testType === 'real' ? [\"- \", title] : null), React.createElement(\"time\", {\n        dateTime: \"2018-03-05\",\n        className: \"title-meta\"\n      }, testType === 'real' ? testDate : [\"Version \", version]))), React.createElement(\"div\", {\n        className: \"col s3\"\n      }, React.createElement(\"div\", {\n        className: \"row icons-row\"\n      }, flags.length ? React.createElement(\"span\", {\n        className: \"badge-rounded-xs badge red darken-2 white-text\"\n      }, React.createElement(\"b\", {\n        className: \"badge-text\"\n      }, flags.length), React.createElement(\"i\", {\n        className: \"icon-flag\"\n      })) : null, React.createElement(\"div\", {\n        className: \"dropdown-block col\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        \"data-target\": \"dropdown01\",\n        className: \"dropdown-trigger btn\",\n        onClick: this.handleDropdownClick\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? React.createElement(\"ul\", {\n        id: \"dropdown01\",\n        className: \"dropdown-content\",\n        style: {\n          display: 'block',\n          transformOrigin: '0px 0px 0px',\n          opacity: '1',\n          transform: 'scaleX(1) scaleY(1)'\n        }\n      }, React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: onEditTest\n      }, \"View/Edit\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: onDownloadReport\n      }, \"Download Score Report\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\",\n        className: \"red-text text-darken-3\",\n        onClick: onResetTest\n      }, \"Reset\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\",\n        className: \"red-text text-darken-3\",\n        onClick: onDeleteTest\n      }, \"Delete\"))) : null)))), React.createElement(\"div\", {\n        className: \"card-test-row row d-flex mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"card-description\"\n      }, testType !== 'real' ? [React.createElement(\"dl\", {\n        className: \"dl-horizontal\",\n        key: \"0\"\n      }, React.createElement(\"dt\", null, \"Available:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n        dateTime: \"2018-12-15\"\n      }, availableDate))), React.createElement(\"dl\", {\n        className: \"dl-horizontal\",\n        key: \"1\"\n      }, React.createElement(\"dt\", null, \"Due:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n        dateTime: \"2018-12-15\"\n      }, dueDate))), completionDate.length ? React.createElement(\"dl\", {\n        className: \"dl-horizontal\",\n        key: \"2\"\n      }, React.createElement(\"dt\", null, \"Complete:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n        dateTime: \"2018-12-15\"\n      }, completionDate))) : null] : null), React.createElement(\"div\", {\n        className: currentScore ? 'chart-container chart-container-160' : 'chart-container chart-container-160 chart-value-zero start-anim'\n      }, React.createElement(\"div\", {\n        className: \"chart-holder\"\n      }, React.createElement(\"span\", {\n        className: \"svg-curved-bar\",\n        \"data-values\": \"{\\\"from\\\": 1100, \\\"to\\\": 1460, \\\"current\\\": 1210}\",\n        \"data-duration\": \"1\"\n      }, React.createElement(Doughnut, {\n        data: function data() {\n          return _data(initialScore && !disabled && available && currentScore ? Number(initialScore / targetScore) * 100 : 0);\n        },\n        options: {\n          circumference: 1 * Math.PI,\n          rotation: 1 * Math.PI,\n          cutoutPercentage: 60,\n          tooltips: false\n        }\n      }), React.createElement(\"span\", {\n        className: \"js-diff-holder\"\n      }, React.createElement(\"span\", {\n        className: \"js-diff\"\n      }, React.createElement(\"span\", {\n        className: \"txt\",\n        style: {\n          opacity: '1',\n          bottom: '65px',\n          color: 'black',\n          fontWeight: '600',\n          fontSize: '12px'\n        }\n      }, \"+\", totalGain)))), React.createElement(\"span\", {\n        className: \"chart-value\",\n        style: {\n          backgroundColor: '#00bbf7'\n        }\n      }, React.createElement(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"1100\",\n        \"data-end-val\": \"1210\",\n        \"data-duration\": \"1\"\n      }, currentScore))), React.createElement(\"div\", {\n        className: \"chart-row\"\n      }, React.createElement(\"div\", {\n        className: \"chart-col chart-start\"\n      }, React.createElement(\"span\", {\n        className: \"amount\"\n      }, initialScore), React.createElement(\"br\", null), React.createElement(\"span\", {\n        className: \"amount-text\"\n      }, \"initial\")), React.createElement(\"div\", {\n        className: \"chart-col chart-end\"\n      }, React.createElement(\"span\", {\n        className: \"amount\"\n      }, targetScore), React.createElement(\"br\", null), React.createElement(\"span\", {\n        className: \"amount-text\"\n      }, \"target\"))))), React.createElement(\"div\", {\n        className: \"col s6 right-align\"\n      }, React.createElement(\"div\", {\n        className: \"charts-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"chart-block chart-block-test-sm\"\n      }, React.createElement(\"span\", {\n        className: \"value-max\"\n      }, subjects[0].targetScore), React.createElement(\"div\", {\n        className: \"js-donut-chart\",\n        \"data-stroke-width\": \"11\",\n        \"data-source\": \"./inc/score-data-test-reading.json\"\n      }), React.createElement(\"div\", {\n        className: \"chart-text\"\n      }, React.createElement(\"span\", {\n        className: \"title\"\n      }, \"Reading\"), React.createElement(\"span\", {\n        className: \"value\"\n      }, subjects[0].currentScore), React.createElement(\"span\", {\n        className: \"description\"\n      }, \"+\", subjects[0].totalGain)))), React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"chart-block chart-block-test-sm\"\n      }, React.createElement(\"span\", {\n        className: \"value-max\"\n      }, subjects[1].targetScore), React.createElement(\"div\", {\n        className: \"js-donut-chart\",\n        \"data-stroke-width\": \"11\",\n        \"data-source\": \"./inc/score-data-test-writing.json\"\n      }), React.createElement(\"div\", {\n        className: \"chart-text\"\n      }, React.createElement(\"span\", {\n        className: \"title\"\n      }, \"Writing\"), React.createElement(\"span\", {\n        className: \"value\"\n      }, subjects[1].currentScore), React.createElement(\"span\", {\n        className: \"description\"\n      }, \"+\", subjects[1].totalGain))))), React.createElement(\"div\", {\n        className: !subjects[2].currentScore ? 'chart-block chart-block-test' : 'chart-block chart-block-test chart-block-zero'\n      }, React.createElement(\"span\", {\n        className: \"value-max\"\n      }, subjects[2].currentScore), React.createElement(\"div\", {\n        className: \"js-donut-chart\",\n        \"data-stroke-width\": \"15\",\n        \"data-source\": \"./inc/score-data-test-math.json\"\n      }), React.createElement(\"div\", {\n        className: \"chart-text\"\n      }, React.createElement(\"span\", {\n        className: \"title\"\n      }, \"Math\"), React.createElement(\"span\", {\n        className: \"value\"\n      }, subjects[2].currentScore), subjects[2].totalGain ? React.createElement(\"span\", {\n        className: \"description\"\n      }, \"+\", subjects[2].totalGain) : null))))))));\n    }\n  }]);\n\n  return ScoredTestCard;\n}(React.Component);\n\nexport default ScoredTestCard;","map":null,"metadata":{},"sourceType":"module"}