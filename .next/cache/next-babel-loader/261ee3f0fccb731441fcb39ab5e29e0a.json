{"ast":null,"code":"import _objectSpread2 from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { deleteStudent } from '../components/Student/index/actions';\nimport { fetchStudents, addNewStudent } from '../components/Student/index/actions';\nimport { makeSelectStudents } from '../components/Student/index/selectors';\nimport StudentCard from '../components/Student/components/StudentCard';\nimport sampleStudentList from '../components/Student/utils/sampleStudentList';\nimport FilterSection from '../components/Student/ListPage/Components/FilterSection';\nimport StudentModal from '../components/Student/components/StudentModal';\nimport IndividualStudentPage from '../components/Student/IndividualStudentPage';\nimport LocationModal from '../components/Location/components/LocationModal';\nimport { fetchStudentsApi, deleteStudentApi } from '../components/Student/index/api';\n\nconst idGenerator = () => {\n  return subIdGenerator() + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + '-' + subIdGenerator() + subIdGenerator() + subIdGenerator();\n};\n\nconst subIdGenerator = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const {\n        onFetchStudents\n      } = this.props;\n      onFetchStudents();\n    });\n\n    _defineProperty(this, \"onOpenStudentModal\", () => this.setState({\n      studentModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseStudentModal\", () => this.setState({\n      studentModalOpen: false\n    }));\n\n    _defineProperty(this, \"onOpenLocationModal\", () => this.setState({\n      locationModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseLocationModal\", () => this.setState({\n      locationModalOpen: false\n    }));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      filterName: ''\n    }));\n\n    _defineProperty(this, \"onSetFilteredLocationState\", location => this.setState({\n      location\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredLocationState\", () => this.setState({\n      location: ''\n    }));\n\n    _defineProperty(this, \"onSaveNewStudent\", async () => {\n      const {\n        newStudent: previousStudentState\n      } = this.state; // dispatch add student action\n\n      const {\n        onAddNewStudent\n      } = this.props;\n      onAddNewStudent(previousStudentState);\n      const newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: '',\n            lastName: '',\n            gender: ''\n          },\n          contactInformation: {\n            phone: '',\n            addressLine1: '',\n            addressLine2: '',\n            city: '',\n            state: '',\n            zipCode: ''\n          },\n          emailAddress: {\n            email: ''\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      }); // eslint-disable-next-line no-console\n\n      console.warn('do something with the new student info');\n      this.onCloseStudentModal();\n    });\n\n    _defineProperty(this, \"onDeleteNewStudent\", () => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: '',\n            lastName: '',\n            gender: ''\n          },\n          contactInformation: {\n            phone: '',\n            addressLine1: '',\n            addressLine2: '',\n            city: '',\n            state: '',\n            zipCode: ''\n          },\n          emailAddress: {\n            email: ''\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n    });\n\n    _defineProperty(this, \"onRemoveLocation\", index => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const {\n        location: {\n          locations\n        }\n      } = this.state.newStudent;\n      const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n      const newStudent = update(previousStudentState, {\n        location: {\n          $set: {\n            locations: newLocationsArray\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n    });\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        students,\n        filterName\n      } = this.state;\n      return students.reduce((finalArr, currentStudent) => {\n        const {\n          lastName,\n          firstName\n        } = currentStudent;\n        const studentString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n\n        if (studentString.indexOf(filterName) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n          finalArr.push(currentStudent);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onHandleStudentCard\", index => {\n      const {\n        students\n      } = this.state;\n      this.setState({\n        selectedStudent: students[index]\n      });\n    });\n\n    _defineProperty(this, \"onRedirectToStudentPage\", event => {\n      event.preventDefault();\n      this.setState({\n        selectedStudent: null\n      });\n    });\n\n    _defineProperty(this, \"onDeleteStudent\", index => {\n      const {\n        onDeleteStudent\n      } = this.props;\n      const {\n        students\n      } = this.state; // Dispatch deleteStudent\n\n      onDeleteStudent(students[index].id);\n      const newStudentArray = this.arrayItemRemover(students, students[index]);\n      this.setState({\n        students: newStudentArray\n      });\n      const student_id = students[index].id;\n      deleteStudentApi({\n        student_id\n      });\n      this.onCloseDropdown();\n    });\n\n    _defineProperty(this, \"onCloneStudent\", index => {\n      const {\n        students\n      } = this.state;\n      const newStudent = update(students[index], {\n        id: {\n          $set: idGenerator()\n        }\n      });\n      this.setState(prevState => {\n        prevState.students.push(newStudent);\n        return {\n          students: prevState.students\n        };\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", (event, name, section) => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const value = event.target ? event.target.value : event;\n      const updatedStudent = update(previousStudentState, {\n        [section]: {\n          $merge: {\n            [name]: value\n          }\n        }\n      });\n      this.setState({\n        newStudent: updatedStudent\n      });\n    });\n\n    _defineProperty(this, \"onSaveStudentChanges\", updatedStudent => {\n      const {\n        students: originalStudents\n      } = this.state;\n      const {\n        active,\n        studentInformation,\n        contactInformation,\n        emailAddress,\n        location\n      } = updatedStudent;\n      const studentToUpdate = originalStudents.filter(student => student.id === updatedStudent.id)[0];\n      const updatedStudentIndex = originalStudents.indexOf(studentToUpdate);\n      const students = update(originalStudents, {\n        [updatedStudentIndex]: {\n          $merge: {\n            active: active,\n            studentInformation: studentInformation,\n            contactInformation: contactInformation,\n            emailAddress: emailAddress,\n            location: location\n          }\n        }\n      });\n      this.setState({\n        students\n      });\n    });\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIsOpen: true,\n      dropdownIndex\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"arrayItemRemover\", (array, value) => array.filter(student => student !== value));\n\n    this.state = {\n      selectedStudent: null,\n      students: sampleStudentList,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      dropdownIsOpen: false,\n      dropdownIndex: null,\n      sort: \"\",\n      filterName: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      studentModalOpen,\n      students,\n      selectedStudent\n    } = this.state;\n    return __jsx(\"main\", {\n      id: \"main\",\n      role: \"main\"\n    }, __jsx(\"div\", {\n      className: \"main-holder grey lighten-5\"\n    }, __jsx(StickyContainer, null, !selectedStudent && __jsx(React.Fragment, null, __jsx(Sticky, null, ({\n      style\n    }) => __jsx(\"div\", {\n      className: \"title-row card-panel\",\n      style: _objectSpread2({}, style, {\n        zIndex: 1999\n      })\n    }, __jsx(\"div\", {\n      className: \"mobile-header\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), __jsx(\"h2\", {\n      className: \"h1 white-text\"\n    }, __jsx(\"span\", {\n      className: \"heading-holder\"\n    }, __jsx(\"i\", {\n      className: \"icon-student\"\n    }), __jsx(\"span\", {\n      className: \"heading-block\"\n    }, \"Students\"))))), __jsx(FilterSection, {\n      onSetSort: this.onSetSort,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredLocationState: this.onSetFilteredLocationState,\n      onUnsetFilteredLocationState: this.onUnsetFilteredLocationState,\n      handleFilterClick: this.handleFilterClick,\n      onFilterByName: this.onFilterByName\n    }), __jsx(\"div\", {\n      className: \"content-section\"\n    }, __jsx(\"div\", {\n      className: \"row d-flex-content\"\n    }, students.map((student, index) => __jsx(StudentCard, {\n      student: student,\n      index: index,\n      id: student.id,\n      key: student.id,\n      dropdownIsOpen: this.state.dropdownIsOpen,\n      dropdownIndex: this.state.dropdownIndex,\n      onSetDropdown: this.onSetDropdown,\n      onCloseDropdown: this.onCloseDropdown,\n      onHandleStudentCard: () => this.onHandleStudentCard(index),\n      onDeleteStudent: () => this.onDeleteStudent(index),\n      onCloneStudent: () => this.onCloneStudent(index, student.id),\n      onSaveStudentChanges: this.onSaveStudentChanges\n    })))), __jsx(\"a\", {\n      href: \"#\",\n      className: \"waves-effect waves-teal btn add-btn modal-trigger\",\n      onClick: this.onOpenStudentModal\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"New Student\"), __jsx(StudentModal, {\n      open: studentModalOpen,\n      onClose: this.onCloseStudentModal,\n      handleChange: this.handleChange,\n      state: this.state.newStudent,\n      onSave: this.onSaveNewStudent,\n      onOpenLocationModal: this.onOpenLocationModal,\n      onRemoveLocation: this.onRemoveLocation,\n      onDeleteNewStudent: this.onDeleteNewStudent\n    }), __jsx(LocationModal, {\n      open: this.state.locationModalOpen,\n      onClose: this.onCloseLocationModal,\n      handleLocationsChange: selectedLocations => this.handleChange(selectedLocations, 'locations', 'location')\n    })), selectedStudent && __jsx(IndividualStudentPage, {\n      student: selectedStudent,\n      onRedirectToStudentPage: this.onRedirectToStudentPage\n    }))));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  students: makeSelectStudents()\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteStudent: id => dispatch(deleteStudent(id)),\n  onFetchStudents: () => dispatch(fetchStudents()),\n  onAddNewStudent: student => dispatch(addNewStudent(student))\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(Students);","map":null,"metadata":{},"sourceType":"module"}