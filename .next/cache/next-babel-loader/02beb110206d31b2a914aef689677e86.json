{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport ScoredTestCard from './components/ScoredTestCard';\nimport FilterSection from './components/FilterSection';\nimport { availableDateSort, dueDateSort, completionDateSort, flagsSort } from '../utils';\n\nclass ScoredTestListPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      sort: '',\n      testVersionFilter: '',\n      flagFilter: false,\n      availableDateFilters: [],\n      dueDateFilters: []\n    }));\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIndex,\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", value => this.setState({\n      testVersionFilter: value\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      testVersionFilter: ''\n    }));\n\n    _defineProperty(this, \"onEditTest\", () => console.warn('Pending implementation edit test UI and functionality'));\n\n    _defineProperty(this, \"onResetTest\", () => console.warn('Pending implementation of reset UI and functionality'));\n\n    _defineProperty(this, \"onDeleteTest\", () => console.warn('Pending implementation of delete test UI and functionality'));\n\n    _defineProperty(this, \"onDownloadReport\", () => console.warn('Pending implementation of download report ui and functionality'));\n\n    _defineProperty(this, \"onSortTests\", testSections => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'flags':\n          return testSections.sort(flagsSort);\n\n        case 'dueDate':\n          return testSections.sort(dueDateSort);\n\n        case 'availableDate':\n          return testSections.sort(availableDateSort);\n\n        case 'completionDate':\n          return testSections.sort(completionDateSort);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onFilterByTestVersion\", () => {\n      const {\n        tests,\n        testVersionFilter\n      } = this.state;\n      return tests.reduce((finalArr, currentTest) => {\n        const {\n          version\n        } = currentTest;\n        const testString = version.replace(/\\s/g, \"\").toLowerCase();\n\n        if (testString.indexOf(testVersionFilter) !== -1 && finalArr.indexOf(currentTest) === -1) {\n          finalArr.push(currentTest);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterByDate\", (incomingTests, dateType) => {\n      const {\n        dueDateFilters,\n        availableDateFilters\n      } = this.state;\n      let dateFilters;\n      let tests = incomingTests;\n      const currentDate = moment().format('MM/DD/YY');\n      const currentDateIndex = new Date().getDay();\n      const endOfWeekIndex = 6 - currentDateIndex;\n      const endOfWeekDate = moment().add(endOfWeekIndex, 'days').format('MM/DD/YY');\n\n      if (dateType === 'dueDate') {\n        dateFilters = dueDateFilters;\n\n        if (dateFilters.indexOf('dueToday') !== -1) {\n          tests = tests.filter(test => test.dueDate === currentDate);\n        }\n\n        if (dateFilters.indexOf('dueNextSession') !== -1) {\n          console.warn('Pending decision on how next session date is calculated');\n        }\n\n        if (dateFilters.indexOf('overdue') !== -1) {\n          tests = tests.filter(test => test.dueDate < currentDate);\n        }\n\n        if (dateFilters.indexOf('dueThisWeek') !== -1) {\n          tests = tests.filter(test => test.dueDate >= currentDate && test.dueDate <= endOfWeekDate);\n        }\n      } else {\n        dateFilters = availableDateFilters;\n\n        if (dateFilters.indexOf('future') !== -1) {\n          tests = tests.filter(test => test.availableDate > currentDate);\n        }\n\n        if (dateFilters.indexOf('available') !== -1) {\n          tests = tests.filter(test => test.availableDate <= currentDate);\n        }\n\n        if (dateFilters.indexOf('complete') !== -1) {\n          tests = tests.filter(test => test.completionDate.length);\n        }\n      }\n\n      return tests;\n    });\n\n    _defineProperty(this, \"onFilterTests\", () => {\n      const {\n        dueDateFilters,\n        availableDateFilters,\n        flagFilter,\n        tests: allTests\n      } = this.state;\n      let tests = allTests;\n\n      if (dueDateFilters.length) {\n        tests = this.onFilterByDate(tests, 'dueDate');\n      }\n\n      if (availableDateFilters.length) {\n        tests = this.onFilterByDate(tests, 'availableDate');\n      }\n\n      if (flagFilter) {\n        tests = tests.filter(testSection => testSection.flags.length);\n      }\n\n      return tests;\n    });\n\n    _defineProperty(this, \"getMappableTests\", () => {\n      const {\n        dueDateFilters,\n        availableDateFilters,\n        flagFilter,\n        sort,\n        testVersionFilter,\n        tests\n      } = this.state;\n      let mappableTests = tests;\n\n      if (testVersionFilter.length) {\n        mappableTests = this.onFilterByTestVersion();\n      }\n\n      if (dueDateFilters.length || availableDateFilters.length || flagFilter) {\n        mappableTests = this.onFilterTests();\n      }\n\n      if (sort) {\n        return this.onSortTests(mappableTests);\n      }\n\n      return mappableTests;\n    });\n\n    _defineProperty(this, \"handleFilterClick\", (filterType, filter) => {\n      const {\n        availableDateFilters: currentAvailableDateFilters,\n        dueDateFilters: currentDueDateFilters,\n        flagFilter\n      } = this.state;\n      let modifiedFilterCurrentState;\n      let modifiedFilterName;\n      let modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n\n        case 'availableDate':\n          modifiedFilterCurrentState = currentAvailableDateFilters;\n          modifiedFilterName = 'availableDateFilters';\n          break;\n\n        case 'hasFlags':\n          return this.setState({\n            flagFilter: !flagFilter\n          });\n\n        default:\n          break;\n      }\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        [modifiedFilterName]: modifiedFilterUpdatedState\n      });\n    });\n\n    _defineProperty(this, \"mapScoredTests\", () => this.getMappableTests().map((test, index) => __jsx(ScoredTestCard, {\n      test: test,\n      index: index,\n      key: test.id,\n      onEditTest: this.onEditTest,\n      onResetTest: this.onResetTest,\n      onDeleteTest: this.onDeleteTest,\n      onSetDropdown: this.onSetDropdown,\n      onCloseDropdown: this.onCloseDropdown,\n      onDownloadReport: this.onDownloadReport,\n      dropdownIndex: this.state.dropdownIndex,\n      dropdownIsOpen: this.state.dropdownIsOpen\n    })));\n\n    this.state = {\n      sort: '',\n      testVersionFilter: '',\n      availableDateFilters: [],\n      dueDateFilters: [],\n      flagFilter: false,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      tests: this.props.user.scoredTests\n    };\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(FilterSection, {\n      sort: this.state.sort,\n      onSetSort: this.onSetSort,\n      flagFilter: this.state.flagFilter,\n      onClearFilters: this.onClearFilters,\n      handleFilterClick: this.handleFilterClick,\n      dueDateFilters: this.state.dueDateFilters,\n      availableDateFilters: this.state.availableDateFilters,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState\n    }), __jsx(\"div\", {\n      className: \"content-section\"\n    }, __jsx(\"div\", {\n      className: \"row d-flex-content card-width-366\"\n    }, this.mapScoredTests())));\n  }\n\n}\n\nScoredTestListPage.propTypes = {\n  user: PropTypes.object.isRequired\n};\nexport default ScoredTestListPage;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/ScoredTestListPage/index.js"],"names":["React","PropTypes","update","moment","ScoredTestCard","FilterSection","availableDateSort","dueDateSort","completionDateSort","flagsSort","ScoredTestListPage","Component","constructor","props","sort","setState","testVersionFilter","flagFilter","availableDateFilters","dueDateFilters","dropdownIndex","dropdownIsOpen","value","console","warn","testSections","state","tests","reduce","finalArr","currentTest","version","testString","replace","toLowerCase","indexOf","push","incomingTests","dateType","dateFilters","currentDate","format","currentDateIndex","Date","getDay","endOfWeekIndex","endOfWeekDate","add","filter","test","dueDate","availableDate","completionDate","length","allTests","onFilterByDate","testSection","flags","mappableTests","onFilterByTestVersion","onFilterTests","onSortTests","filterType","currentAvailableDateFilters","currentDueDateFilters","modifiedFilterCurrentState","modifiedFilterName","modifiedFilterUpdatedState","$push","filterIndex","$splice","getMappableTests","map","index","id","onEditTest","onResetTest","onDeleteTest","onSetDropdown","onCloseDropdown","onDownloadReport","user","scoredTests","render","onSetSort","onClearFilters","handleFilterClick","onSetFilteredState","onUnsetFilteredState","mapScoredTests","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\n\nimport ScoredTestCard from './components/ScoredTestCard';\nimport FilterSection from './components/FilterSection';\n\nimport { availableDateSort, dueDateSort, completionDateSort, flagsSort } from '../utils';\n\nclass ScoredTestListPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sort: '',\n      testVersionFilter: '',\n      availableDateFilters: [],\n      dueDateFilters: [],\n      flagFilter: false,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      tests: this.props.user.scoredTests,\n    };\n  }\n\n  onSetSort = (sort) => this.setState({ sort })\n  onClearFilters = () => this.setState({ sort: '', testVersionFilter: '', flagFilter: false, availableDateFilters: [], dueDateFilters: [] })\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  onSetFilteredState = (value) => this.setState({ testVersionFilter: value })\n  onUnsetFilteredState = () => this.setState({ testVersionFilter: '' })\n\n  onEditTest = () => console.warn('Pending implementation edit test UI and functionality')\n  onResetTest = () => console.warn('Pending implementation of reset UI and functionality')\n  onDeleteTest = () => console.warn('Pending implementation of delete test UI and functionality')\n  onDownloadReport = () => console.warn('Pending implementation of download report ui and functionality')\n\n  // eslint-disable-next-line consistent-return\n  onSortTests = (testSections) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case 'flags':\n        return testSections.sort(flagsSort);\n      case 'dueDate':\n        return testSections.sort(dueDateSort);\n      case 'availableDate':\n        return testSections.sort(availableDateSort);\n      case 'completionDate':\n        return testSections.sort(completionDateSort);\n      default:\n        break;\n    }\n  }\n\n  onFilterByTestVersion = () => {\n    const { tests, testVersionFilter } = this.state;\n    return tests.reduce((finalArr, currentTest) => {\n      const { version } = currentTest;\n      const testString = version.replace(/\\s/g, \"\").toLowerCase();\n      if (testString.indexOf(testVersionFilter) !== -1 && finalArr.indexOf(currentTest) === -1) {\n        finalArr.push(currentTest);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterByDate = (incomingTests, dateType) => {\n    const { dueDateFilters, availableDateFilters } = this.state;\n    let dateFilters;\n    let tests = incomingTests;\n\n    const currentDate = moment().format('MM/DD/YY');\n    const currentDateIndex = new Date().getDay();\n    const endOfWeekIndex = 6 - currentDateIndex;\n    const endOfWeekDate = moment().add(endOfWeekIndex, 'days').format('MM/DD/YY')\n    if (dateType === 'dueDate') {\n      dateFilters = dueDateFilters;\n      if (dateFilters.indexOf('dueToday') !== -1) {\n        tests = tests.filter(test => test.dueDate === currentDate);\n      }\n      if (dateFilters.indexOf('dueNextSession') !== -1) {\n        console.warn('Pending decision on how next session date is calculated');\n      }\n      if (dateFilters.indexOf('overdue') !== -1) {\n        tests = tests.filter(test => test.dueDate < currentDate);\n      }\n      if (dateFilters.indexOf('dueThisWeek') !== -1) {\n        tests = tests.filter(test => test.dueDate >= currentDate && test.dueDate <= endOfWeekDate);\n      }\n    } else {\n      dateFilters = availableDateFilters;\n      if (dateFilters.indexOf('future') !== -1) {\n        tests = tests.filter(test => test.availableDate > currentDate);\n      }\n      if (dateFilters.indexOf('available') !== -1) {\n        tests = tests.filter(test => test.availableDate <= currentDate);\n      }\n      if (dateFilters.indexOf('complete') !== -1) {\n        tests = tests.filter(test => test.completionDate.length);\n      }\n    }\n    return tests;\n  }\n\n  onFilterTests = () => {\n    const { dueDateFilters, availableDateFilters, flagFilter, tests: allTests } = this.state;\n    let tests = allTests;\n    if (dueDateFilters.length) {\n      tests = this.onFilterByDate(tests, 'dueDate');\n    }\n    if (availableDateFilters.length) {\n      tests = this.onFilterByDate(tests, 'availableDate');\n    }\n    if (flagFilter) {\n      tests = tests.filter(testSection => testSection.flags.length);\n    }\n    return tests;\n  }\n\n  getMappableTests = () => {\n    const { dueDateFilters, availableDateFilters, flagFilter, sort, testVersionFilter, tests } = this.state;\n    let mappableTests = tests;\n    if (testVersionFilter.length) {\n      mappableTests = this.onFilterByTestVersion();\n    }\n    if (dueDateFilters.length || availableDateFilters.length || flagFilter) {\n      mappableTests = this.onFilterTests();\n    }\n    if (sort) {\n      return this.onSortTests(mappableTests);\n    }\n    return mappableTests;\n  }\n\n  // eslint-disable-next-line consistent-return\n  handleFilterClick = (filterType, filter) => {\n    const { availableDateFilters: currentAvailableDateFilters, dueDateFilters: currentDueDateFilters, flagFilter } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case 'dueDate':\n        modifiedFilterCurrentState = currentDueDateFilters;\n        modifiedFilterName = 'dueDateFilters';\n        break;\n      case 'availableDate':\n        modifiedFilterCurrentState = currentAvailableDateFilters;\n        modifiedFilterName = 'availableDateFilters';\n        break;\n      case 'hasFlags':\n        return this.setState({ flagFilter: !flagFilter });\n      default:\n        break;\n    }\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[ filterIndex, 1 ]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  }\n\n  mapScoredTests = () => this.getMappableTests().map((test, index) => (\n    <ScoredTestCard\n      test={test}\n      index={index}\n      key={test.id}\n      onEditTest={this.onEditTest}\n      onResetTest={this.onResetTest}\n      onDeleteTest={this.onDeleteTest}\n      onSetDropdown={this.onSetDropdown}\n      onCloseDropdown={this.onCloseDropdown}\n      onDownloadReport={this.onDownloadReport}\n      dropdownIndex={this.state.dropdownIndex}\n      dropdownIsOpen={this.state.dropdownIsOpen}\n    />\n  ))\n\n  render() {\n    return (\n      <React.Fragment>\n        <FilterSection\n          sort={this.state.sort}\n          onSetSort={this.onSetSort}\n          flagFilter={this.state.flagFilter}\n          onClearFilters={this.onClearFilters}\n          handleFilterClick={this.handleFilterClick}\n          dueDateFilters={this.state.dueDateFilters}\n          availableDateFilters={this.state.availableDateFilters}\n          onSetFilteredState={this.onSetFilteredState}\n          onUnsetFilteredState={this.onUnsetFilteredState}\n        />\n        <div className=\"content-section\">\n          <div className=\"row d-flex-content card-width-366\">\n            {this.mapScoredTests()}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nScoredTestListPage.propTypes = {\n  user: PropTypes.object.isRequired,\n};\n\nexport default ScoredTestListPage;\n"]},"metadata":{},"sourceType":"module"}