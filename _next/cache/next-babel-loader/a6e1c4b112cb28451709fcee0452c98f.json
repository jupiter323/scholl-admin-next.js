{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport Moment from 'moment';\nimport { toast } from 'react-toastify';\nimport Toast from '../../Toast';\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport AssignedTestCard from \"./components/AssignedTestCard\";\nimport OverDueTestCard from \"./components/OverDueTestCard\";\nimport CompletedTestCard from \"./components/CompletedTestCard\";\nimport EditTestModal from \"./components/EditTestModal\";\nimport NewTestModal from \"./components/TestModal\";\nimport TestSettingModal from \"./components/TestSettingModal\";\nimport EnterAnswerWrapper from \"./components/EnterAnswerWrapper\";\nimport CardHeader from \"./components/CardHeader\";\nimport { setIsVisibleTopBar, fetchStudentTests, setActiveStudentTestId, deleteStudentTest, updateTestFlag, assignNewTest, fetchStudentTestSections, addNewTestToStudentTests, updateTestStatus, setStudentSections, setStudentTests, setStudentCompletedTests, setStudentOverDueTests, setStudentAssignedTests, getTestScores } from \"../index/actions\";\nimport { makeSelectOverDueStudentTests, makeSelectCompletedStudentTests, makeSelectAssignedStudentTests, makeSelectStudentTests, makeSelectTests, makeSelectActiveStudent, makeSelectFetchStudentTestsStatus } from '../index/selectors';\nimport { assignTestToStudentApi, addStudentAnswerToTestApi } from '../index/api';\n\nclass DetailTestList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      const {\n        onFetchStudentTests,\n        studentTests,\n        activeStudent,\n        user\n      } = this.props;\n\n      if (studentTests.length === 0) {\n        onFetchStudentTests(user);\n      } else if (studentTests.length > 0 && studentTests[0].student_id !== activeStudent.id) {\n        onFetchStudentTests(user);\n      }\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      this.props.onSetStudentTests([]);\n      this.props.onSetStudentCompletedTests([]);\n      this.props.onSetStudentOverDueTests([]);\n      this.props.onSetStudentAssignedTests([]);\n    });\n\n    _defineProperty(this, \"onSetActiveTestComplete\", () => this.setState({\n      activeTest: _objectSpread({}, this.state.activeTest, {\n        status: \"COMPLETED\"\n      })\n    }));\n\n    _defineProperty(this, \"onToggleEditTestModal\", async activeTest => {\n      const {\n        onSetActiveStudentTestId\n      } = this.props;\n      onSetActiveStudentTestId(activeTest.student_test_id);\n      this.onSetIsVisibleTopBar(false);\n      const postBody = {\n        id: this.props.activeStudent.id,\n        student_test_id: activeTest.student_test_id\n      };\n      this.props.onFetchStudentTestSections(postBody);\n      this.setState(({\n        openEditTestModal\n      }) => ({\n        openEditTestModal: true,\n        openEnterAnswerWrapper: false,\n        activeTest,\n        activePage: 'scores'\n      }), this.onCloseDropdown);\n    });\n\n    _defineProperty(this, \"onCloseEditTestModal\", () => {\n      this.onSetIsVisibleTopBar(true);\n      this.setState(({\n        openEditTestModal\n      }) => ({\n        openEditTestModal: !openEditTestModal,\n        openEnterAnswerWrapper: false\n      }));\n    });\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIndex,\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"handleTestSettingModalOpen\", activeTest => {\n      this.onCloseDropdown();\n      this.setState(({\n        opentTestSettingModal\n      }) => ({\n        activeTest,\n        opentTestSettingModal: !opentTestSettingModal\n      }));\n    });\n\n    _defineProperty(this, \"onCreateTest\", event => {\n      event.preventDefault();\n      this.setState({\n        openCreateTestModal: true\n      });\n      console.warn('Pending implementation of create test UI and functionality');\n    });\n\n    _defineProperty(this, \"onEnterAnswers\", async currentTestId => {\n      const {\n        onFetchStudentTestSections,\n        user,\n        studentTests\n      } = this.props; // Have to clear all sections to have no side effects for now\n\n      onFetchStudentTestSections({\n        id: user.id,\n        student_test_id: currentTestId\n      });\n      this.onSetIsVisibleTopBar(false);\n      this.onCloseDropdown();\n      const activeTest = studentTests.find(test => test.student_test_id === currentTestId);\n\n      if (activeTest.status === 'ASSIGNED') {\n        const postBody = {\n          student_test_id: currentTestId,\n          status: 'STARTED'\n        };\n        const {\n          onUpdateTestStatus\n        } = this.props;\n        await onUpdateTestStatus(postBody, 'STARTED', user.id);\n      } else if (activeTest.status === 'COMPLETED') {\n        const {\n          activeStudent: {\n            id\n          },\n          onGetTestScores\n        } = this.props;\n        const postBody = {\n          studentId: id,\n          student_test_id: currentTestId\n        };\n        onGetTestScores(postBody);\n      }\n\n      this.setState({\n        openEditTestModal: true,\n        activeTest,\n        activePage: \"answerSheet\"\n      });\n    });\n\n    _defineProperty(this, \"onDownloadReport\", activeTest => {\n      this.onSetIsVisibleTopBar(false);\n      this.onCloseDropdown();\n      this.setState({\n        activeTest,\n        openEditTestModal: true\n      }, async () => {\n        await this.editTestModal.generateScoreReportPdf();\n      });\n    });\n\n    _defineProperty(this, \"onDeleteTest\", (student_test_id, student_id, type) => {\n      this.onSetIsVisibleTopBar(true);\n      this.setState({\n        openEditTestModal: false\n      }, () => this.props.onDeleteStudentTest(student_test_id, student_id, type));\n    });\n\n    _defineProperty(this, \"onTestFlagReviewed\", (student_test_id, student_id) => {\n      this.props.onUpdateTestFlag(student_test_id, student_id);\n    });\n\n    _defineProperty(this, \"onSetIsVisibleTopBar\", value => {\n      const {\n        onSetIsVisibleTopBar\n      } = this.props;\n      onSetIsVisibleTopBar(value);\n    });\n\n    _defineProperty(this, \"onSaveTestChanges\", (testVersion, settings) => {\n      this.onToggleEditTestModal();\n      this.onSetIsVisibleTopBar(true);\n      console.warn('Pending save test changes functionality', testVersion, settings);\n    });\n\n    _defineProperty(this, \"mapCompletedTests\", () => {\n      const {\n        dropdownIndex,\n        dropdownIsOpen\n      } = this.state;\n      const {\n        completes\n      } = this.props;\n      return completes.map((test, index) => __jsx(CompletedTestCard, {\n        test: test,\n        index: `completed${index}`,\n        key: `completed-${index}`,\n        onEnterAnswers: this.onEnterAnswers,\n        onEditTest: () => this.onToggleEditTestModal(_objectSpread({}, test, {\n          status: 'COMPLETED'\n        })),\n        onSetDropdown: this.onSetDropdown,\n        onCloseDropdown: this.onCloseDropdown,\n        onDownloadReport: this.onDownloadReport,\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: dropdownIsOpen,\n        onTestFlagReviewed: this.onTestFlagReviewed,\n        onDeleteTest: this.onDeleteTest,\n        handleTestSettingModalOpen: () => this.handleTestSettingModalOpen(test),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }));\n    });\n\n    _defineProperty(this, \"mapAssignedTests\", () => {\n      const {\n        dropdownIndex,\n        dropdownIsOpen\n      } = this.state;\n      const {\n        assigneds\n      } = this.props;\n      return assigneds.map((test, index) => __jsx(AssignedTestCard, {\n        test: test,\n        key: `assigned-${index}`,\n        handleTestSettingModalOpen: () => this.handleTestSettingModalOpen(test),\n        onDeleteTest: this.onDeleteTest,\n        onSetDropdown: this.onSetDropdown,\n        onEnterAnswers: this.onEnterAnswers,\n        onCloseDropdown: this.onCloseDropdown,\n        onDownloadReport: this.onDownloadReport,\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: dropdownIsOpen,\n        index: `assigned${index}`,\n        onTestFlagReviewed: this.onTestFlagReviewed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }));\n    });\n\n    _defineProperty(this, \"mapOverDueTests\", () => {\n      const {\n        dropdownIndex,\n        dropdownIsOpen\n      } = this.state;\n      const {\n        overdues\n      } = this.props;\n      return overdues.map((test, index) => __jsx(OverDueTestCard, {\n        test: test,\n        key: `overdue-${index}`,\n        handleTestSettingModalOpen: () => this.handleTestSettingModalOpen(test),\n        onDeleteTest: this.onDeleteTest,\n        onSetDropdown: this.onSetDropdown,\n        onEnterAnswers: this.onEnterAnswers,\n        onCloseDropdown: this.onCloseDropdown,\n        onDownloadReport: this.onDownloadReport,\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: dropdownIsOpen,\n        index: `overdue${index}`,\n        onTestFlagReviewed: this.onTestFlagReviewed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }));\n    });\n\n    _defineProperty(this, \"onCloseTestModal\", () => this.setState({\n      openCreateTestModal: false\n    }));\n\n    _defineProperty(this, \"onCloaseAnswerWrapper\", async () => {\n      this.onSetIsVisibleTopBar(true);\n      this.setState({\n        openEnterAnswerWrapper: false\n      });\n      this.onCloseDropdown();\n    });\n\n    _defineProperty(this, \"onSaveNewTest\", async test => {\n      const {\n        studentTests,\n        tests\n      } = this.props;\n\n      if (!this.props.activeStudent.active && studentTests.length >= 1) {\n        return toast.error(`This student is not activated. A free student account can only be assigned one free test.`, {\n          className: 'update-error',\n          progressClassName: 'progress-bar-error'\n        });\n      }\n\n      this.onCloseTestModal();\n      const test_sections = [];\n      const testIds = tests.map(test => test.id);\n      const currentTestIndex = testIds.findIndex(testId => testId === test.version);\n      const currentTest = tests[currentTestIndex];\n      const {\n        user: {\n          id\n        }\n      } = this.props;\n      currentTest.test_sections.map(testSection => {\n        if (testSection.name === 'Reading' && test.reading) {\n          test_sections.push(testSection);\n        }\n\n        if (testSection.name === 'Writing' && test.writing) {\n          test_sections.push(testSection);\n        }\n\n        if (testSection.name === 'Math (No Calculator)' && test.mathNoCalc) {\n          test_sections.push(testSection);\n        }\n\n        if (testSection.name === 'Math (Calculator)' && test.mathWithCalc) {\n          test_sections.push(testSection);\n        }\n      });\n\n      if (test_sections.length === 0) {\n        return toast.error(`Cannot assign a test without selecting one or more sections.`, {\n          className: 'update-error',\n          progressClassName: 'progress-bar-error'\n        });\n      }\n\n      const postBody = {\n        student_id: id,\n        test_id: test.version,\n        assignment_date: Moment(test.assignDate).format('YYYY-MM-DD'),\n        due_date: Moment(test.dueDate).format('YYYY-MM-DD'),\n        test_section_ids: test_sections.map(testSection => testSection.id),\n        is_timed: test.isTimed\n      };\n      const {\n        student_test_id\n      } = await assignTestToStudentApi(postBody);\n\n      if (student_test_id) {\n        const formattedNewTest = {\n          assignment_date: test.assignDate,\n          due_date: test.dueDate,\n          due_status: '',\n          status: 'ASSIGNED',\n          student_id: id,\n          student_test_id,\n          test_description: currentTest.description,\n          test_form: '3',\n          test_id: test.version,\n          test_name: currentTest.name\n        };\n        const {\n          onAssignNewTest,\n          onAddNewTestToStudentTests\n        } = this.props;\n        onAssignNewTest(formattedNewTest);\n        onAddNewTestToStudentTests(formattedNewTest);\n      } else {\n        toast.error(`This student is not activated. A free student account can only be assigned one free test.`, {\n          className: 'update-error',\n          progressClassName: 'progress-bar-error'\n        });\n      }\n    });\n\n    _defineProperty(this, \"onAddStudentAnswerToTest\", async (test_problem_id, answer) => {\n      const {\n        activeTest: {\n          student_test_id\n        }\n      } = this.state;\n      const postBody = {\n        student_test_id,\n        test_problem_id,\n        answer\n      };\n      await addStudentAnswerToTestApi(postBody);\n    });\n\n    this.state = {\n      activeTest: {},\n      activePage: \"scores\",\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      openEditTestModal: false,\n      openCreateTestModal: false,\n      opentTestSettingModal: false,\n      openEnterAnswerWrapper: false\n    };\n  }\n\n  render() {\n    const {\n      openEditTestModal,\n      openCreateTestModal,\n      openEnterAnswerWrapper,\n      activeTest,\n      opentTestSettingModal\n    } = this.state;\n    const {\n      user,\n      completes,\n      assigneds,\n      overdues,\n      studentTestsFetchedStatus\n    } = this.props;\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, __jsx(Toast, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), openEditTestModal ? __jsx(EditTestModal, {\n      onRef: ref => this.editTestModal = ref,\n      user: user,\n      test: activeTest,\n      onDeleteTest: this.onDeleteTest,\n      onSaveTestChanges: this.onSaveTestChanges,\n      onCloseEditTestModal: this.onCloseEditTestModal,\n      activePage: this.state.activePage,\n      onOpentTestScore: this.onToggleEditTestModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }) : openEnterAnswerWrapper ? null : opentTestSettingModal ? __jsx(TestSettingModal, {\n      open: opentTestSettingModal,\n      test: activeTest,\n      onClose: this.handleTestSettingModalOpen,\n      onSave: this.onSaveNewTest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }) : [__jsx(NewTestModal, {\n      open: openCreateTestModal,\n      onClose: this.onCloseTestModal,\n      onSave: this.onSaveNewTest,\n      key: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"content-section\",\n      key: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"section-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, overdues.length !== 0 && studentTestsFetchedStatus && __jsx(\"div\", {\n      className: \"content-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, __jsx(CardHeader, {\n      title: \"OverDue\",\n      amount: overdues.length,\n      themeColor: \"#e94319\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"row d-flex-content card-width-366\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, this.mapOverDueTests())), assigneds.length !== 0 && studentTestsFetchedStatus && __jsx(\"div\", {\n      className: \"content-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, __jsx(CardHeader, {\n      title: \"Assigned\",\n      amount: assigneds.length,\n      themeColor: \"#39b44a\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"row d-flex-content card-width-366\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, this.mapAssignedTests())), completes.length !== 0 && studentTestsFetchedStatus && __jsx(\"div\", {\n      className: \"content-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, __jsx(CardHeader, {\n      title: \"Completed\",\n      amount: completes.length,\n      themeColor: \"#39b44a\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"row d-flex-content card-width-366\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, this.mapCompletedTests()))), __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onCreateTest,\n      className: \"waves-effect waves-teal btn add-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"add\"), \"New Test\"))]);\n  }\n\n}\n\nDetailTestList.propTypes = {\n  user: PropTypes.object.isRequired,\n  onSetIsVisibleTopBar: PropTypes.func.isRequired,\n  completes: PropTypes.array,\n  overdues: PropTypes.array,\n  assigneds: PropTypes.array,\n  onSetStudentAssignedTests: PropTypes.func\n};\nconst mapStateToProps = createStructuredSelector({\n  completes: makeSelectCompletedStudentTests(),\n  assigneds: makeSelectAssignedStudentTests(),\n  overdues: makeSelectOverDueStudentTests(),\n  studentTests: makeSelectStudentTests(),\n  tests: makeSelectTests(),\n  activeStudent: makeSelectActiveStudent(),\n  studentTestsFetchedStatus: makeSelectFetchStudentTestsStatus()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetIsVisibleTopBar: value => dispatch(setIsVisibleTopBar(value)),\n    onFetchStudentTests: user => dispatch(fetchStudentTests(user)),\n    onSetActiveStudentTestId: studentTestId => dispatch(setActiveStudentTestId(studentTestId)),\n    onDeleteStudentTest: (studentTestId, studentId, type) => dispatch(deleteStudentTest(studentTestId, studentId, type)),\n    onUpdateTestFlag: (studentTestId, studentId) => dispatch(updateTestFlag(studentTestId, studentId)),\n    onAssignNewTest: newTest => dispatch(assignNewTest(newTest)),\n    onFetchStudentTestSections: studentInfo => dispatch(fetchStudentTestSections(studentInfo)),\n    onAddNewTestToStudentTests: studentInfo => dispatch(addNewTestToStudentTests(studentInfo)),\n    onUpdateTestStatus: (payload, currentStatus, studentId) => dispatch(updateTestStatus(payload, currentStatus, studentId)),\n    onSetStudentTests: tests => dispatch(setStudentTests(tests)),\n    onSetStudentCompletedTests: tests => dispatch(setStudentCompletedTests(tests)),\n    onSetStudentOverDueTests: tests => dispatch(setStudentOverDueTests(tests)),\n    onSetStudentAssignedTests: tests => dispatch(setStudentAssignedTests(tests)),\n    onGetTestScores: postBody => dispatch(getTestScores(postBody))\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(DetailTestList);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/index.js"],"names":["React","PropTypes","update","Moment","toast","Toast","connect","compose","createStructuredSelector","AssignedTestCard","OverDueTestCard","CompletedTestCard","EditTestModal","NewTestModal","TestSettingModal","EnterAnswerWrapper","CardHeader","setIsVisibleTopBar","fetchStudentTests","setActiveStudentTestId","deleteStudentTest","updateTestFlag","assignNewTest","fetchStudentTestSections","addNewTestToStudentTests","updateTestStatus","setStudentSections","setStudentTests","setStudentCompletedTests","setStudentOverDueTests","setStudentAssignedTests","getTestScores","makeSelectOverDueStudentTests","makeSelectCompletedStudentTests","makeSelectAssignedStudentTests","makeSelectStudentTests","makeSelectTests","makeSelectActiveStudent","makeSelectFetchStudentTestsStatus","assignTestToStudentApi","addStudentAnswerToTestApi","DetailTestList","Component","constructor","props","onFetchStudentTests","studentTests","activeStudent","user","length","student_id","id","onSetStudentTests","onSetStudentCompletedTests","onSetStudentOverDueTests","onSetStudentAssignedTests","setState","activeTest","state","status","onSetActiveStudentTestId","student_test_id","onSetIsVisibleTopBar","postBody","onFetchStudentTestSections","openEditTestModal","openEnterAnswerWrapper","activePage","onCloseDropdown","dropdownIndex","dropdownIsOpen","opentTestSettingModal","event","preventDefault","openCreateTestModal","console","warn","currentTestId","find","test","onUpdateTestStatus","onGetTestScores","studentId","editTestModal","generateScoreReportPdf","type","onDeleteStudentTest","onUpdateTestFlag","value","testVersion","settings","onToggleEditTestModal","completes","map","index","onEnterAnswers","onSetDropdown","onDownloadReport","onTestFlagReviewed","onDeleteTest","handleTestSettingModalOpen","assigneds","overdues","tests","active","error","className","progressClassName","onCloseTestModal","test_sections","testIds","currentTestIndex","findIndex","testId","version","currentTest","testSection","name","reading","push","writing","mathNoCalc","mathWithCalc","test_id","assignment_date","assignDate","format","due_date","dueDate","test_section_ids","is_timed","isTimed","formattedNewTest","due_status","test_description","description","test_form","test_name","onAssignNewTest","onAddNewTestToStudentTests","test_problem_id","answer","render","studentTestsFetchedStatus","ref","onSaveTestChanges","onCloseEditTestModal","onSaveNewTest","mapOverDueTests","mapAssignedTests","mapCompletedTests","onCreateTest","propTypes","object","isRequired","func","array","mapStateToProps","mapDispatchToProps","dispatch","studentTestId","newTest","studentInfo","payload","currentStatus","withConnect"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport Moment from 'moment';\nimport { toast } from 'react-toastify';\nimport Toast from '../../Toast';\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport AssignedTestCard from \"./components/AssignedTestCard\";\nimport OverDueTestCard from \"./components/OverDueTestCard\";\nimport CompletedTestCard from \"./components/CompletedTestCard\";\nimport EditTestModal from \"./components/EditTestModal\";\nimport NewTestModal from \"./components/TestModal\";\nimport TestSettingModal from \"./components/TestSettingModal\";\nimport EnterAnswerWrapper from \"./components/EnterAnswerWrapper\";\nimport CardHeader from \"./components/CardHeader\";\nimport {\n  setIsVisibleTopBar,\n  fetchStudentTests,\n  setActiveStudentTestId,\n  deleteStudentTest,\n  updateTestFlag,\n  assignNewTest,\n  fetchStudentTestSections,\n  addNewTestToStudentTests,\n  updateTestStatus,\n  setStudentSections,\n  setStudentTests,\n  setStudentCompletedTests,\n  setStudentOverDueTests,\n  setStudentAssignedTests,\n  getTestScores,\n} from \"../index/actions\";\nimport {\n  makeSelectOverDueStudentTests,\n  makeSelectCompletedStudentTests,\n  makeSelectAssignedStudentTests,\n  makeSelectStudentTests,\n  makeSelectTests,\n  makeSelectActiveStudent,\n  makeSelectFetchStudentTestsStatus,\n} from '../index/selectors';\nimport {\n  assignTestToStudentApi,\n  addStudentAnswerToTestApi,\n} from '../index/api';\n\nclass DetailTestList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTest: {},\n      activePage: \"scores\",\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      openEditTestModal: false,\n      openCreateTestModal: false,\n      opentTestSettingModal: false,\n      openEnterAnswerWrapper: false,\n    };\n  }\n\n  componentDidMount = async () => {\n    const { onFetchStudentTests, studentTests, activeStudent, user } = this.props;\n    if (studentTests.length === 0) {\n      onFetchStudentTests(user);\n    } else if (studentTests.length > 0 && studentTests[0].student_id !== activeStudent.id) {\n      onFetchStudentTests(user);\n    }\n  };\n\n  componentWillUnmount = () => {\n    this.props.onSetStudentTests([]);\n    this.props.onSetStudentCompletedTests([]);\n    this.props.onSetStudentOverDueTests([]);\n    this.props.onSetStudentAssignedTests([]);\n  }\n\n  onSetActiveTestComplete = () => this.setState({ activeTest: { ...this.state.activeTest, status: \"COMPLETED\" } })\n\n  onToggleEditTestModal = async (activeTest) => {\n    const { onSetActiveStudentTestId } = this.props;\n    onSetActiveStudentTestId(activeTest.student_test_id);\n    this.onSetIsVisibleTopBar(false);\n    const postBody = {\n      id: this.props.activeStudent.id,\n      student_test_id: activeTest.student_test_id,\n    };\n    this.props.onFetchStudentTestSections(postBody);\n    this.setState(\n      ({ openEditTestModal }) => ({\n        openEditTestModal: true,\n        openEnterAnswerWrapper: false,\n        activeTest,\n        activePage: 'scores',\n      }),\n      this.onCloseDropdown,\n    );\n  };\n  onCloseEditTestModal = () => {\n    this.onSetIsVisibleTopBar(true);\n    this.setState(({ openEditTestModal }) => ({\n      openEditTestModal: !openEditTestModal,\n      openEnterAnswerWrapper: false,\n    }));\n  };\n\n  onSetDropdown = dropdownIndex => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  handleTestSettingModalOpen = activeTest => {\n    this.onCloseDropdown();\n    this.setState(({ opentTestSettingModal }) => ({\n      activeTest,\n      opentTestSettingModal: !opentTestSettingModal,\n    }));\n  };\n\n  onCreateTest = event => {\n    event.preventDefault();\n    this.setState({ openCreateTestModal: true });\n    console.warn('Pending implementation of create test UI and functionality');\n  };\n\n  onEnterAnswers = async currentTestId => {\n    const { onFetchStudentTestSections, user, studentTests } = this.props;\n    // Have to clear all sections to have no side effects for now\n    onFetchStudentTestSections({ id: user.id, student_test_id: currentTestId });\n    this.onSetIsVisibleTopBar(false);\n    this.onCloseDropdown();\n    const activeTest = studentTests.find(test => test.student_test_id === currentTestId);\n    if (activeTest.status === 'ASSIGNED') {\n      const postBody = {\n        student_test_id: currentTestId,\n        status: 'STARTED',\n      };\n      const { onUpdateTestStatus } = this.props;\n      await onUpdateTestStatus(postBody, 'STARTED', user.id);\n    } else if (activeTest.status === 'COMPLETED') {\n      const { activeStudent: { id }, onGetTestScores } = this.props;\n      const postBody = { studentId: id, student_test_id: currentTestId };\n      onGetTestScores(postBody);\n    }\n    this.setState({ openEditTestModal: true, activeTest, activePage: \"answerSheet\" });\n  };\n\n  onDownloadReport = activeTest => {\n    this.onSetIsVisibleTopBar(false);\n    this.onCloseDropdown();\n    this.setState(\n      {\n        activeTest,\n        openEditTestModal: true,\n      },\n      async () => {\n        await this.editTestModal.generateScoreReportPdf();\n      },\n    );\n  };\n  onDeleteTest = (student_test_id, student_id, type) => {\n    this.onSetIsVisibleTopBar(true);\n    this.setState({ openEditTestModal: false }, () =>\n      this.props.onDeleteStudentTest(student_test_id, student_id, type),\n    );\n  };\n  onTestFlagReviewed = (student_test_id, student_id) => {\n    this.props.onUpdateTestFlag(student_test_id, student_id);\n  };\n  onSetIsVisibleTopBar = value => {\n    const { onSetIsVisibleTopBar } = this.props;\n    onSetIsVisibleTopBar(value);\n  };\n  onSaveTestChanges = (testVersion, settings) => {\n    this.onToggleEditTestModal();\n    this.onSetIsVisibleTopBar(true);\n    console.warn('Pending save test changes functionality', testVersion, settings);\n  };\n\n  mapCompletedTests = () => {\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    const { completes } = this.props;\n    return completes.map((test, index) =>\n      (<CompletedTestCard\n        test={test}\n        index={`completed${index}`}\n        key={`completed-${index}`}\n        onEnterAnswers={this.onEnterAnswers}\n        onEditTest={() => this.onToggleEditTestModal({ ...test, status: 'COMPLETED' })}\n        onSetDropdown={this.onSetDropdown}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={dropdownIndex}\n        dropdownIsOpen={dropdownIsOpen}\n        onTestFlagReviewed={this.onTestFlagReviewed}\n        onDeleteTest={this.onDeleteTest}\n        handleTestSettingModalOpen={() => this.handleTestSettingModalOpen(test)}\n      />),\n    );\n  };\n\n  mapAssignedTests = () => {\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    const { assigneds } = this.props;\n    return assigneds.map((test, index) =>\n      (<AssignedTestCard\n        test={test}\n        key={`assigned-${index}`}\n        handleTestSettingModalOpen={() => this.handleTestSettingModalOpen(test)}\n        onDeleteTest={this.onDeleteTest}\n        onSetDropdown={this.onSetDropdown}\n        onEnterAnswers={this.onEnterAnswers}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={dropdownIndex}\n        dropdownIsOpen={dropdownIsOpen}\n        index={`assigned${index}`}\n        onTestFlagReviewed={this.onTestFlagReviewed}\n      />),\n    );\n  };\n  mapOverDueTests = () => {\n    const { dropdownIndex, dropdownIsOpen } = this.state;\n    const { overdues } = this.props;\n    return overdues.map((test, index) =>\n      (<OverDueTestCard\n        test={test}\n        key={`overdue-${index}`}\n        handleTestSettingModalOpen={() => this.handleTestSettingModalOpen(test)}\n        onDeleteTest={this.onDeleteTest}\n        onSetDropdown={this.onSetDropdown}\n        onEnterAnswers={this.onEnterAnswers}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={dropdownIndex}\n        dropdownIsOpen={dropdownIsOpen}\n        index={`overdue${index}`}\n        onTestFlagReviewed={this.onTestFlagReviewed}\n      />),\n    );\n  };\n\n  onCloseTestModal = () => this.setState({ openCreateTestModal: false });\n  onCloaseAnswerWrapper = async () => {\n    this.onSetIsVisibleTopBar(true);\n    this.setState({\n      openEnterAnswerWrapper: false,\n    });\n    this.onCloseDropdown();\n  };\n\n  onSaveNewTest = async test => {\n    const { studentTests, tests } = this.props;\n    if (!this.props.activeStudent.active && studentTests.length >= 1) {\n      return toast.error(`This student is not activated. A free student account can only be assigned one free test.`, {\n        className: 'update-error',\n        progressClassName: 'progress-bar-error',\n      });\n    }\n    this.onCloseTestModal();\n    const test_sections = [];\n    const testIds = tests.map(test => test.id);\n    const currentTestIndex = testIds.findIndex(testId => testId === test.version);\n    const currentTest = tests[currentTestIndex];\n\n    const { user: { id } } = this.props;\n    currentTest.test_sections.map(testSection => {\n      if (testSection.name === 'Reading' && test.reading) {\n        test_sections.push(testSection);\n      }\n      if (testSection.name === 'Writing' && test.writing) {\n        test_sections.push(testSection);\n      }\n      if (testSection.name === 'Math (No Calculator)' && test.mathNoCalc) {\n        test_sections.push(testSection);\n      }\n      if (testSection.name === 'Math (Calculator)' && test.mathWithCalc) {\n        test_sections.push(testSection);\n      }\n    });\n    if (test_sections.length === 0) {\n      return toast.error(`Cannot assign a test without selecting one or more sections.`, {\n        className: 'update-error',\n        progressClassName: 'progress-bar-error',\n      });\n    }\n    const postBody = {\n      student_id: id,\n      test_id: test.version,\n      assignment_date: Moment(test.assignDate).format('YYYY-MM-DD'),\n      due_date: Moment(test.dueDate).format('YYYY-MM-DD'),\n      test_section_ids: test_sections.map(testSection => testSection.id),\n      is_timed: test.isTimed,\n    };\n    const { student_test_id } = await assignTestToStudentApi(postBody);\n    if (student_test_id) {\n      const formattedNewTest = {\n        assignment_date: test.assignDate,\n        due_date: test.dueDate,\n        due_status: '',\n        status: 'ASSIGNED',\n        student_id: id,\n        student_test_id,\n        test_description: currentTest.description,\n        test_form: '3',\n        test_id: test.version,\n        test_name: currentTest.name,\n      };\n      const { onAssignNewTest, onAddNewTestToStudentTests } = this.props;\n      onAssignNewTest(formattedNewTest);\n      onAddNewTestToStudentTests(formattedNewTest);\n    } else {\n      toast.error(`This student is not activated. A free student account can only be assigned one free test.`, {\n        className: 'update-error',\n        progressClassName: 'progress-bar-error',\n      });\n    }\n  };\n\n  onAddStudentAnswerToTest = async (test_problem_id, answer) => {\n    const { activeTest: { student_test_id } } = this.state;\n    const postBody = {\n      student_test_id,\n      test_problem_id,\n      answer,\n    };\n    await addStudentAnswerToTestApi(postBody);\n  };\n\n  render() {\n    const {\n      openEditTestModal,\n      openCreateTestModal,\n      openEnterAnswerWrapper,\n      activeTest,\n      opentTestSettingModal,\n    } = this.state;\n    const { user, completes, assigneds, overdues, studentTestsFetchedStatus } = this.props;\n    return (\n      <React.Fragment>\n        <Toast />\n        <Choose>\n          <When condition={openEditTestModal}>\n            <EditTestModal\n              onRef={ref => (this.editTestModal = ref)}\n              user={user}\n              test={activeTest}\n              onDeleteTest={this.onDeleteTest}\n              onSaveTestChanges={this.onSaveTestChanges}\n              onCloseEditTestModal={this.onCloseEditTestModal}\n              activePage={this.state.activePage}\n              onOpentTestScore={this.onToggleEditTestModal}\n            />\n          </When>\n          <When condition={openEnterAnswerWrapper}>\n            {/* <EnterAnswerWrapper\n              open={openEnterAnswerWrapper}\n              onCloaseAnswerWrapper={this.onCloaseAnswerWrapper}\n              onAddStudentAnswerToTest={this.onAddStudentAnswerToTest}\n              test={activeTest}\n              onOpentTestScore={() => this.onToggleEditTestModal(activeTest)}\n            /> */}\n          </When>\n          <When condition={opentTestSettingModal}>\n            <TestSettingModal\n              open={opentTestSettingModal}\n              test={activeTest}\n              onClose={this.handleTestSettingModalOpen}\n              onSave={this.onSaveNewTest}\n            />\n          </When>\n          <Otherwise>\n            <NewTestModal\n              open={openCreateTestModal}\n              onClose={this.onCloseTestModal}\n              onSave={this.onSaveNewTest}\n            />\n            <div className=\"content-section\">\n              <div className=\"section-holder\">\n                {overdues.length !== 0 && studentTestsFetchedStatus &&\n                  <div className=\"content-container\">\n                    <CardHeader title=\"OverDue\" amount={overdues.length} themeColor=\"#e94319\" />\n                    <div className=\"row d-flex-content card-width-366\">\n                      {this.mapOverDueTests()}\n                    </div>\n                  </div>}\n                {assigneds.length !== 0 && studentTestsFetchedStatus &&\n                  <div className=\"content-container\">\n                    <CardHeader title=\"Assigned\" amount={assigneds.length} themeColor=\"#39b44a\" />\n                    <div className=\"row d-flex-content card-width-366\">\n                      {this.mapAssignedTests()}\n                    </div>\n                  </div>}\n                {completes.length !== 0 && studentTestsFetchedStatus &&\n                  <div className=\"content-container\">\n                    <CardHeader title=\"Completed\" amount={completes.length} themeColor=\"#39b44a\" />\n                    <div className=\"row d-flex-content card-width-366\">\n                      {this.mapCompletedTests()}\n                    </div>\n                  </div>}\n              </div>\n              <a\n                href=\"#\"\n                onClick={this.onCreateTest}\n                className=\"waves-effect waves-teal btn add-btn\"\n              >\n                <i className=\"material-icons\">add</i>New Test\n              </a>\n            </div>\n          </Otherwise>\n        </Choose>\n      </React.Fragment>\n    );\n  }\n}\n\nDetailTestList.propTypes = {\n  user: PropTypes.object.isRequired,\n  onSetIsVisibleTopBar: PropTypes.func.isRequired,\n  completes: PropTypes.array,\n  overdues: PropTypes.array,\n  assigneds: PropTypes.array,\n  onSetStudentAssignedTests: PropTypes.func,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  completes: makeSelectCompletedStudentTests(),\n  assigneds: makeSelectAssignedStudentTests(),\n  overdues: makeSelectOverDueStudentTests(),\n  studentTests: makeSelectStudentTests(),\n  tests: makeSelectTests(),\n  activeStudent: makeSelectActiveStudent(),\n  studentTestsFetchedStatus: makeSelectFetchStudentTestsStatus(),\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetIsVisibleTopBar: value => dispatch(setIsVisibleTopBar(value)),\n    onFetchStudentTests: user => dispatch(fetchStudentTests(user)),\n    onSetActiveStudentTestId: studentTestId => dispatch(setActiveStudentTestId(studentTestId)),\n    onDeleteStudentTest: (studentTestId, studentId, type) => dispatch(deleteStudentTest(studentTestId, studentId, type)),\n    onUpdateTestFlag: (studentTestId, studentId) => dispatch(updateTestFlag(studentTestId, studentId)),\n    onAssignNewTest: (newTest) => dispatch(assignNewTest(newTest)),\n    onFetchStudentTestSections: (studentInfo) => dispatch(fetchStudentTestSections(studentInfo)),\n    onAddNewTestToStudentTests: (studentInfo) => dispatch(addNewTestToStudentTests(studentInfo)),\n    onUpdateTestStatus: (payload, currentStatus, studentId) => dispatch(updateTestStatus(payload, currentStatus, studentId)),\n    onSetStudentTests: (tests) => dispatch(setStudentTests(tests)),\n    onSetStudentCompletedTests: (tests) => dispatch(setStudentCompletedTests(tests)),\n    onSetStudentOverDueTests: (tests) => dispatch(setStudentOverDueTests(tests)),\n    onSetStudentAssignedTests: (tests) => dispatch(setStudentAssignedTests(tests)),\n    onGetTestScores: (postBody) => dispatch(getTestScores(postBody)),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(DetailTestList);\n"]},"metadata":{},"sourceType":"module"}