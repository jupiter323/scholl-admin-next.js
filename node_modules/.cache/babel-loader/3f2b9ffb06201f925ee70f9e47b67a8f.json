{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport incompleteScoreSheet, { inputScoreSheet } from '../../../../utils/incompleteScoreSheet';\n\nvar IncompleteAnswerRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(IncompleteAnswerRow, _React$Component);\n\n  function IncompleteAnswerRow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, IncompleteAnswerRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(IncompleteAnswerRow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"mapLetterBubbles\", function (_ref) {\n      var index = _ref.index,\n          scoreSheet = _ref.scoreSheet;\n      var letters = [\"A\", \"B\", \"C\", \"D\"];\n      var _scoreSheet$index = scoreSheet[index],\n          studentChoice = _scoreSheet$index.studentChoice,\n          answer = _scoreSheet$index.answer;\n      return letters.map(function (letter) {\n        if (answer == null && studentChoice === letter) {\n          return React.createElement(\"li\", null, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: \"#fff\",\n              borderColor: \"#19b4e9\",\n              backgroundColor: \"#19b4e9\"\n            }\n          }, letter));\n        }\n\n        if (answer === letter) {\n          return React.createElement(\"li\", null, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: \"#32955c\",\n              borderColor: \"#32955c\",\n              backgroundColor: \"#fff\"\n            }\n          }, letter));\n        }\n\n        if (studentChoice === letter && studentChoice !== answer) {\n          return React.createElement(\"li\", null, React.createElement(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: {\n              color: \"#fff\",\n              borderColor: \"#19b4e9\",\n              backgroundColor: \"#19b4e9\"\n            }\n          }, letter));\n        }\n\n        if (studentChoice === null && answer === null) {\n          return React.createElement(\"input\", {\n            type: \"text\",\n            className: \"answer-input\"\n          });\n        }\n\n        return React.createElement(\"li\", null, React.createElement(\"span\", {\n          className: \"badge-circle badge-circle-bordered\"\n        }, letter));\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(IncompleteAnswerRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          index = _this$props.index,\n          question = _this$props.question;\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", {\n        className: \"answers-list-holder\",\n        key: question.problem\n      }, React.createElement(\"div\", {\n        className: \"answer-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col col-120\"\n      }, React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, this.mapLetterBubbles({\n        index: index,\n        incompleteScoreSheet: incompleteScoreSheet\n      }))), React.createElement(\"div\", {\n        className: \"col col-120\"\n      }, React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, this.mapLetterBubbles({\n        index: index,\n        inputScoreSheet: inputScoreSheet\n      }))), React.createElement(\"div\", {\n        className: \"col col-30\"\n      }, React.createElement(\"span\", {\n        className: \"status-info\"\n      }, question.status)))));\n    }\n  }]);\n\n  return IncompleteAnswerRow;\n}(React.Component);\n\nIncompleteAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired\n};\nexport default IncompleteAnswerRow;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailTestAnswerSheetComplete\\components\\WritingPage\\components\\IncompleteAnswerRow\\index.js"],"names":["React","PropTypes","incompleteScoreSheet","inputScoreSheet","IncompleteAnswerRow","index","scoreSheet","letters","studentChoice","answer","map","letter","color","borderColor","backgroundColor","props","question","problem","mapLetterBubbles","status","Component","propTypes","object","isRequired","number"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,oBAAP,IAA8BC,eAA9B,QAAoD,wCAApD;;IAEMC,mB;;;;;;;;;;;;;;;;;;uEAEe,gBAAyB;AAAA,UAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,UAAhBC,UAAgB,QAAhBA,UAAgB;AAC1C,UAAMC,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAhB;AAD0C,8BAERD,UAAU,CAACD,KAAD,CAFF;AAAA,UAElCG,aAFkC,qBAElCA,aAFkC;AAAA,UAEnBC,MAFmB,qBAEnBA,MAFmB;AAG1C,aAAOF,OAAO,CAACG,GAAR,CAAY,UAAAC,MAAM,EAAI;AAC3B,YAAIF,MAAM,IAAE,IAAR,IAAgBD,aAAa,KAAKG,MAAtC,EAA8C;AAC5C,iBACE,gCACE;AAAM,YAAA,SAAS,EAAC,oCAAhB;AAAqD,YAAA,KAAK,EAAE;AAACC,cAAAA,KAAK,EAAE,MAAR;AAAgBC,cAAAA,WAAW,EAAE,SAA7B;AAAwCC,cAAAA,eAAe,EAAE;AAAzD;AAA5D,aAAkIH,MAAlI,CADF,CADF;AAKD;;AACD,YAAIF,MAAM,KAAKE,MAAf,EAAuB;AACrB,iBACE,gCACC;AAAM,YAAA,SAAS,EAAC,oCAAhB;AAAqD,YAAA,KAAK,EAAE;AAACC,cAAAA,KAAK,EAAE,SAAR;AAAmBC,cAAAA,WAAW,EAAE,SAAhC;AAA2CC,cAAAA,eAAe,EAAE;AAA5D;AAA5D,aAAkIH,MAAlI,CADD,CADF;AAKD;;AACD,YAAIH,aAAa,KAAKG,MAAlB,IAA4BH,aAAa,KAAKC,MAAlD,EAAyD;AACvD,iBACE,gCACE;AAAM,YAAA,SAAS,EAAC,oCAAhB;AAAqD,YAAA,KAAK,EAAE;AAACG,cAAAA,KAAK,EAAE,MAAR;AAAgBC,cAAAA,WAAW,EAAE,SAA7B;AAAwCC,cAAAA,eAAe,EAAE;AAAzD;AAA5D,aAAkIH,MAAlI,CADF,CADF;AAKD;;AACD,YAAIH,aAAa,KAAK,IAAlB,IAA2BC,MAAM,KAAK,IAA1C,EAAgD;AAC9C,iBACE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,SAAS,EAAC;AAA7B,YADF;AAGD;;AACD,eACE,gCACA;AAAM,UAAA,SAAS,EAAC;AAAhB,WAAsDE,MAAtD,CADA,CADF;AAKC,OAhCI,CAAP;AAkCD,K;;;;;;;6BAEQ;AAAA,wBACqB,KAAKI,KAD1B;AAAA,UACCV,KADD,eACCA,KADD;AAAA,UACQW,QADR,eACQA,QADR;AAEL,aACA,oBAAC,KAAD,CAAO,QAAP,QACE;AAAI,QAAA,SAAS,EAAC,qBAAd;AAAoC,QAAA,GAAG,EAAEA,QAAQ,CAACC;AAAlD,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAI,QAAA,SAAS,EAAC;AAAd,SAEK,KAAKC,gBAAL,CAAsB;AAACb,QAAAA,KAAK,EAALA,KAAD;AAAQH,QAAAA,oBAAoB,EAApBA;AAAR,OAAtB,CAFL,CADF,CADF,EAQE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAI,QAAA,SAAS,EAAC;AAAd,SAEK,KAAKgB,gBAAL,CAAsB;AAACb,QAAAA,KAAK,EAALA,KAAD;AAAQF,QAAAA,eAAe,EAAfA;AAAR,OAAtB,CAFL,CADF,CARF,EAeE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAM,QAAA,SAAS,EAAC;AAAhB,SAA+Ba,QAAQ,CAACG,MAAxC,CADF,CAfF,CADF,CADF,CADA;AA0BH;;;;EArE+BnB,KAAK,CAACoB,S;;AAwExChB,mBAAmB,CAACiB,SAApB,GAAgC;AAC9BL,EAAAA,QAAQ,EAAEf,SAAS,CAACqB,MAAV,CAAiBC,UADG;AAE9BlB,EAAAA,KAAK,EAAEJ,SAAS,CAACuB,MAAV,CAAiBD;AAFM,CAAhC;AAKA,eAAenB,mBAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport incompleteScoreSheet, {inputScoreSheet} from '../../../../utils/incompleteScoreSheet';\r\n\r\nclass IncompleteAnswerRow extends React.Component {\r\n\r\n  mapLetterBubbles = ({index, scoreSheet}) => {\r\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\r\n    const { studentChoice, answer } = scoreSheet[index];\r\n    return letters.map(letter => {\r\n      if (answer==null && studentChoice === letter) {\r\n        return(\r\n          <li>\r\n            <span className=\"badge-circle badge-circle-bordered\" style={{color: \"#fff\", borderColor: \"#19b4e9\", backgroundColor: \"#19b4e9\"}}>{letter}</span>\r\n          </li>\r\n          )\r\n      }\r\n      if (answer === letter) {\r\n        return (\r\n          <li>\r\n           <span className=\"badge-circle badge-circle-bordered\" style={{color: \"#32955c\", borderColor: \"#32955c\", backgroundColor: \"#fff\"}}>{letter}</span>\r\n          </li>\r\n        )\r\n      }\r\n      if (studentChoice === letter && studentChoice !== answer){\r\n        return (\r\n          <li>\r\n            <span className=\"badge-circle badge-circle-bordered\" style={{color: \"#fff\", borderColor: \"#19b4e9\", backgroundColor: \"#19b4e9\"}}>{letter}</span>\r\n          </li>\r\n        )\r\n      }\r\n      if (studentChoice === null &&  answer === null) {\r\n        return(\r\n          <input type=\"text\" className=\"answer-input\"></input>\r\n        )\r\n      }\r\n      return (\r\n        <li>\r\n        <span className=\"badge-circle badge-circle-bordered\">{letter}</span>\r\n      </li>\r\n      )\r\n      }\r\n    )\r\n  };\r\n\r\n  render() {\r\n    const { index, question } = this.props;\r\n      return (\r\n      <React.Fragment>\r\n        <li className=\"answers-list-holder\" key={question.problem}>\r\n          <div className=\"answer-row row mb-0\">\r\n            <div className=\"col col-120\">\r\n              <ul className=\"answer-list\">\r\n                {/* <If condition={question.incomplete}> */}\r\n                  {this.mapLetterBubbles({index, incompleteScoreSheet})}\r\n                {/* </If> */}\r\n               </ul>\r\n            </div>\r\n            <div className=\"col col-120\">\r\n              <ul className=\"answer-list\">\r\n                {/* <If condition={question.incomplete}> */}\r\n                  {this.mapLetterBubbles({index, inputScoreSheet})}\r\n                {/* </If> */}\r\n               </ul>\r\n            </div>\r\n            <div className=\"col col-30\">\r\n              <span className=\"status-info\">{question.status}</span>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      </React.Fragment>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nIncompleteAnswerRow.propTypes = {\r\n  question: PropTypes.object.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default IncompleteAnswerRow;\r\n\r\n"]},"metadata":{},"sourceType":"module"}