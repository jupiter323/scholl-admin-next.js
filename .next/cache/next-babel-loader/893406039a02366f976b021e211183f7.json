{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport ClickOffComponentWrapper from '../../../../../../ClickOffComponentWrapper';\nimport statusColorMap, { chartColorMap } from '../../../../../DetailWorksheetPage/utils/statusColorMap';\nimport LessonDetailAnswerSheet from '../../../../../LessonDetailAnswerSheet';\n\nconst data = (current, target, status) => ({\n  datasets: [{\n    data: [current, target - current],\n    backgroundColor: [chartColorMap[status], '#eaeaea']\n  }]\n});\n\nconst getLessonActivityStatus = status => {\n  if (status === \"Scheduled\") {\n    return 'card-main card-lesson-detail card-disabled card-assigned card';\n  }\n\n  return 'card-main card-lesson-detail card-assigned card';\n};\n\nclass LessonCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onOpenDetailModal\", () => this.setState({\n      detailModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDetailModal\", () => this.setState({\n      detailModalOpen: false\n    }));\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIsOpen => this.setState({\n      dropdownIsOpen: !dropdownIsOpen\n    }));\n\n    _defineProperty(this, \"onReschedule\", (assignDate, assignTime, dueDate, dueTime) => {\n      // eslint-disable-next-line no-console\n      console.warn('Stubbed out date functionality', assignDate, assignTime, dueDate, dueTime);\n    });\n\n    _defineProperty(this, \"renderLessonIcon\", subject => {\n      switch (subject) {\n        case 'Reading':\n          return 'icon-books';\n\n        case 'Writing':\n          return 'icon-hands';\n\n        case 'Math':\n          return 'icon-calculator';\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"renderDropdownOptions\", status => {\n      const {\n        lesson: {\n          assignDate,\n          assignTime,\n          dueDate,\n          dueTime\n        }\n      } = this.props;\n\n      if (status === \"Scheduled\" || status === 'Assigned') {\n        return __jsx(React.Fragment, null, __jsx(\"li\", null, __jsx(\"a\", {\n          href: \"#\"\n        }, \"Reschedule\")), __jsx(\"li\", null, __jsx(\"a\", {\n          href: \"#!\"\n        }, \"Unassign\")));\n      }\n\n      return __jsx(React.Fragment, null, __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#\",\n        onClick: this.onReschedule(assignDate, assignTime, dueDate, dueTime)\n      }, \"Reschedule\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#!\"\n      }, \"Mark all Flags Reviewed\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#!\"\n      }, \"Reset\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#!\"\n      }, \"Unassign\")));\n    });\n\n    _defineProperty(this, \"renderProblemCount\", (status, scoreStatus, score, problems, completedProblems) => {\n      if (status === \"Started\") {\n        return __jsx(\"span\", {\n          className: \"chart-value chart-value-column\",\n          style: {\n            bottom: '8px',\n            backgroundColor: chartColorMap[status]\n          }\n        }, __jsx(\"span\", {\n          className: \"chart-count\",\n          \"data-count-up\": true,\n          \"data-start-val\": \"0\",\n          \"data-end-val\": \"4\",\n          \"data-duration\": \"1\"\n        }, __jsx(\"span\", {\n          className: \"text-small\",\n          style: {\n            fontSize: 'x-small'\n          }\n        }, completedProblems)), __jsx(\"span\", {\n          className: \"text-small\",\n          style: {\n            fontSize: 'xx-small'\n          }\n        }, \"out of\"), \" \", __jsx(\"span\", {\n          className: \"text-small\",\n          style: {\n            fontSize: 'x-small'\n          }\n        }, problems));\n      }\n\n      return __jsx(\"span\", {\n        className: \"chart-value\",\n        style: {\n          height: '50px',\n          width: '50px',\n          bottom: '6px',\n          backgroundColor: chartColorMap[scoreStatus]\n        }\n      }, __jsx(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"0\",\n        \"data-end-val\": \"96\",\n        \"data-duration\": \"1\"\n      }), score !== \"\" ? __jsx(\"span\", {\n        className: \"percentage\"\n      }, Math.floor(`${score / problems * 100}`), \"%\") : null);\n    });\n\n    _defineProperty(this, \"renderAlerts\", flags => {\n      if (flags.length) {\n        return __jsx(\"span\", {\n          className: \"badge-rounded-xs badge red darken-2 white-text\"\n        }, __jsx(\"b\", {\n          className: \"badge-text\"\n        }, flags.length), \" \", __jsx(\"i\", {\n          className: \"icon-flag\"\n        }));\n      }\n\n      return __jsx(\"div\", {\n        className: \"right-col col s3\"\n      }, \"\\xA0\");\n    });\n\n    this.state = {\n      test: true,\n      dropdownIsOpen: false,\n      detailModalOpen: false\n    };\n  }\n\n  render() {\n    const {\n      dropdownIsOpen\n    } = this.state;\n    const {\n      lesson,\n      lesson: {\n        subject,\n        timeEstimate,\n        status,\n        scoreStatus,\n        score,\n        unit,\n        lessonName,\n        assigned,\n        flags,\n        type,\n        problems,\n        completedProblems = '',\n        passage,\n        dueDate,\n        availableDate,\n        completionDate,\n        overdue\n      }\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(LessonDetailAnswerSheet, {\n      onCloseDetailModal: this.onCloseDetailModal,\n      open: this.state.detailModalOpen,\n      user: this.props.user,\n      lesson: lesson\n    }), __jsx(\"div\", {\n      className: \"card-main-col col s12 m8 l7 xl5\"\n    }, __jsx(\"div\", {\n      className: getLessonActivityStatus(status)\n    }, __jsx(\"div\", {\n      className: \"card-panel\",\n      style: {\n        backgroundColor: '#666',\n        color: '#fff'\n      }\n    }, __jsx(\"div\", {\n      className: \"card-panel-row row\"\n    }, __jsx(\"div\", {\n      className: \"icon-col col s1\"\n    }, __jsx(\"i\", {\n      className: this.renderLessonIcon(subject)\n    })), __jsx(\"div\", {\n      className: \"col s9\"\n    }, __jsx(\"div\", {\n      className: \"card-panel-text center-align\"\n    }, __jsx(\"div\", {\n      className: \"text-small\"\n    }, unit), __jsx(\"div\", {\n      className: \"text-large\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onOpenDetailModal\n    }, lessonName)))), __jsx(\"div\", {\n      className: \"col s1 right-align\"\n    }, __jsx(\"div\", {\n      className: \"row icons-row\"\n    }, this.renderAlerts(flags), __jsx(\"div\", {\n      className: \"dropdown-block col\"\n    }, __jsx(\"a\", {\n      className: \"dropdown-trigger btn\",\n      href: \"#\",\n      \"data-target\": \"dropdown01\",\n      onClick: () => this.onSetDropdown(dropdownIsOpen)\n    }, __jsx(\"i\", {\n      className: \"material-icons dots-icon\"\n    }, \"more_vert\")), dropdownIsOpen ? __jsx(ClickOffComponentWrapper, {\n      onOuterClick: () => this.onSetDropdown(dropdownIsOpen)\n    }, __jsx(\"ul\", {\n      id: \"dropdown01\",\n      className: \"dropdown-content dropdown-wide\",\n      style: {\n        display: \"block\",\n        opacity: '1',\n        transform: 'scaleX(1) scaleY(1)'\n      }\n    }, this.renderDropdownOptions(status))) : null))))), __jsx(\"div\", {\n      className: \"card-content\"\n    }, __jsx(\"div\", {\n      className: \"d-flex sameheight-all row mb-0\"\n    }, __jsx(\"div\", {\n      className: \"col s6\"\n    }, __jsx(\"div\", {\n      className: \"chart-container\"\n    }, __jsx(\"div\", {\n      className: \"chart-holder\",\n      style: {\n        width: '140px',\n        height: '95px'\n      }\n    }, __jsx(Doughnut, {\n      data: completionDate ? () => data(score, problems, scoreStatus) : () => data(completedProblems, problems, status),\n      height: 210,\n      options: {\n        circumference: 1.45 * Math.PI,\n        rotation: -3.85,\n        cutoutPercentage: 60,\n        tooltips: false\n      }\n    }), this.renderProblemCount(status, scoreStatus, score, problems, completedProblems)), __jsx(\"div\", {\n      className: \"chart-row\"\n    }, __jsx(\"div\", {\n      className: \"chart-col chart-start\"\n    }, \"\\xA0\"), __jsx(\"div\", {\n      className: \"chart-col chart-end\"\n    }, __jsx(\"span\", {\n      className: \"amount\",\n      style: {\n        color: chartColorMap[status]\n      }\n    }, problems))), __jsx(\"div\", {\n      className: \"chart-description\",\n      style: {\n        marginTop: '10px'\n      }\n    }, __jsx(\"dl\", {\n      className: \"dl-horizontal\"\n    }, __jsx(\"dt\", null, \"Time Est:\"), __jsx(\"dd\", null, timeEstimate)), __jsx(\"dl\", {\n      className: \"dl-horizontal\"\n    }, __jsx(\"dt\", null, \"Problems:\"), __jsx(\"dd\", null, problems))))), __jsx(\"div\", {\n      className: \"col s6 right-align justify-end\"\n    }, __jsx(\"dl\", {\n      className: \"dl-horizontal\",\n      style: {\n        marginTop: '20px',\n        marginBottom: '-10px'\n      }\n    }, __jsx(\"dt\", null, \"Available:\"), __jsx(\"dd\", null, __jsx(\"time\", {\n      dateTime: availableDate\n    }, availableDate))), __jsx(\"dl\", {\n      className: overdue ? 'dl-horizontal red-text text-darken-3' : 'dl-horizontal',\n      style: {\n        marginTop: '13px',\n        marginBottom: '-3px'\n      }\n    }, !assigned || status === \"Scheduled\" ? __jsx(\"dt\", null, \"No Due Date\") : [__jsx(\"dt\", {\n      key: \"0\"\n    }, \"Due:\"), __jsx(\"dd\", {\n      key: \"1\"\n    }, __jsx(\"time\", {\n      dateTime: dueDate\n    }, dueDate))]), completionDate ? __jsx(\"dl\", {\n      className: \"dl-horizontal\"\n    }, __jsx(\"dt\", null, \"Completed:\"), __jsx(\"dd\", null, __jsx(\"time\", {\n      dateTime: completionDate\n    }, completionDate))) : null, __jsx(\"div\", {\n      className: \"align-self-end\"\n    }, scoreStatus !== \"\" ? __jsx(\"span\", {\n      className: `badge badge-rounded-md ${statusColorMap[scoreStatus]} white-text`\n    }, scoreStatus) : __jsx(\"span\", {\n      className: `badge badge-rounded-md ${statusColorMap[status]} white-text`\n    }, status))))), __jsx(\"div\", {\n      className: \"card-text\"\n    }, __jsx(\"dl\", {\n      className: \"dl-horizontal\"\n    }, __jsx(\"dt\", null, \"p.\", passage), __jsx(\"dd\", null, \"(\", type, \")\"))))));\n  }\n\n}\n\nexport default LessonCard;","map":null,"metadata":{},"sourceType":"module"}