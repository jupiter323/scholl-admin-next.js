{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport Portal from '../../../../Portal';\nimport FilterSection from './components/FilterSection';\nimport LessonCard from './components/LessonCard';\nimport sampleLessons from '../../../utils/sampleLessons';\nimport { pageNumberSort, problemSort, timeEstimateSort, subjectSort } from '../../../utils/sortOptions';\nvar lessonTypeMap = {\n  'Challenge + Practice': 'challenge',\n  'Homework Drill': 'homework',\n  'Reading from Workbook': 'readingFromWorkbook'\n};\n\nvar AssignLessonModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AssignLessonModal, _React$Component);\n\n  function AssignLessonModal(props) {\n    var _this;\n\n    _classCallCheck(this, AssignLessonModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AssignLessonModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleAssignSelectedDropdown\", function () {\n      return _this.setState(function (_ref) {\n        var assignSelectedDropdownOpen = _ref.assignSelectedDropdownOpen;\n        return {\n          assignSelectedDropdownOpen: !assignSelectedDropdownOpen\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResetModal\", function () {\n      return _this.setState({\n        subjectFilters: [],\n        typeFilters: [],\n        sort: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (titleFilter, value) {\n      return _this.setState(_defineProperty({}, titleFilter, value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function (titleFilter) {\n      return _this.setState(_defineProperty({}, titleFilter, ''));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseModal\", function () {\n      var onClose = _this.props.onClose;\n      onClose();\n\n      _this.onResetModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortLessons\", function (lessons) {\n      var sort = _this.state.sort;\n\n      switch (sort) {\n        case 'pageNumber':\n          return lessons.sort(pageNumberSort);\n\n        case 'problems':\n          return lessons.sort(problemSort);\n\n        case 'timeEstimate':\n          return lessons.sort(timeEstimateSort);\n\n        case 'subject':\n          return lessons.sort(subjectSort);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByTitle\", function () {\n      var _this$state = _this.state,\n          lessons = _this$state.lessons,\n          titleFilter = _this$state.titleFilter;\n      return lessons.reduce(function (finalArr, currentLesson) {\n        var title = currentLesson.title;\n        var lessonString = title.replace(/\\s/g, \"\").toLowerCase();\n\n        if (lessonString.indexOf(titleFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n          finalArr.push(currentLesson);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByUnit\", function () {\n      var _this$state2 = _this.state,\n          lessons = _this$state2.lessons,\n          unitFilter = _this$state2.unitFilter;\n      return lessons.reduce(function (finalArr, currentLesson) {\n        var unit = currentLesson.unit;\n        var lessonString = unit.replace(/\\s/g, \"\").toLowerCase();\n\n        if (lessonString.indexOf(unitFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n          finalArr.push(currentLesson);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterLessons\", function () {\n      var _this$state3 = _this.state,\n          subjectFilters = _this$state3.subjectFilters,\n          typeFilters = _this$state3.typeFilters,\n          allLessons = _this$state3.lessons;\n      var lessons = allLessons;\n\n      if (subjectFilters.length) {\n        lessons = lessons.filter(function (lesson) {\n          return subjectFilters.indexOf(lesson.subject) !== -1;\n        });\n      }\n\n      if (typeFilters.length) {\n        lessons = lessons.filter(function (lesson) {\n          return typeFilters.indexOf(lessonTypeMap[lesson.type]) !== -1;\n        });\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMappableLessons\", function () {\n      var _this$state4 = _this.state,\n          subjectFilters = _this$state4.subjectFilters,\n          typeFilters = _this$state4.typeFilters,\n          sort = _this$state4.sort,\n          unitFilter = _this$state4.unitFilter,\n          titleFilter = _this$state4.titleFilter,\n          lessons = _this$state4.lessons;\n      var mappableLessons = lessons;\n\n      if (titleFilter.length) {\n        mappableLessons = _this.onFilterByTitle();\n      }\n\n      if (unitFilter.length) {\n        mappableLessons = _this.onFilterByUnit();\n      }\n\n      if (subjectFilters.length || typeFilters.length) {\n        mappableLessons = _this.onFilterLessons();\n      }\n\n      if (sort) {\n        return _this.onSortLessons(mappableLessons);\n      }\n\n      return mappableLessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFilterClick\", function (filterType, filter) {\n      var _this$state5 = _this.state,\n          currentSubjectFilters = _this$state5.subjectFilters,\n          currentTypeFilters = _this$state5.typeFilters;\n      var modifiedFilterCurrentState;\n      var modifiedFilterName;\n      var modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'type':\n          modifiedFilterCurrentState = currentTypeFilters;\n          modifiedFilterName = 'typeFilters';\n          break;\n\n        default:\n          break;\n      }\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        var filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      _this.setState(_defineProperty({}, modifiedFilterName, modifiedFilterUpdatedState));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLessonClick\", function (lesson) {\n      var selectedLessons = _this.state.selectedLessons;\n      var modifiedLessons;\n\n      if (selectedLessons.indexOf(lesson) === -1) {\n        modifiedLessons = update(selectedLessons, {\n          $push: [lesson]\n        });\n      } else {\n        var lessonIndex = selectedLessons.indexOf(lesson);\n        modifiedLessons = update(selectedLessons, {\n          $splice: [[lessonIndex, 1]]\n        });\n      }\n\n      _this.setState({\n        selectedLessons: modifiedLessons\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"assignLessons\", function (date) {\n      var onAssignLessons = _this.props.onAssignLessons;\n      var selectedLessons = _this.state.selectedLessons;\n      var assignDate;\n\n      switch (date) {\n        case 'today':\n          assignDate = moment().format('MM/DD/YY');\n          break;\n\n        case 'tomorrow':\n          assignDate = moment().add(1, 'days').format('MM/DD/YY');\n          break;\n\n        case 'nextSession':\n          break;\n\n        case 'customDate':\n          assignDate = '01/05/19';\n          break;\n\n        default:\n          break;\n      }\n\n      _this.onToggleAssignSelectedDropdown();\n\n      _this.onResetModal();\n\n      onAssignLessons(selectedLessons, assignDate);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapLessons\", function () {\n      return _this.getMappableLessons().map(function (lesson, index) {\n        return React.createElement(LessonCard, {\n          lesson: lesson,\n          index: index,\n          key: lesson.id,\n          onSetDropdown: _this.onSetDropdown,\n          onCloseDropdown: _this.onCloseDropdown,\n          dropdownIndex: _this.state.dropdownIndex,\n          dropdownIsOpen: _this.state.dropdownIsOpen,\n          handleLessonClick: _this.handleLessonClick,\n          selectedLessons: _this.state.selectedLessons\n        });\n      });\n    });\n\n    _this.state = {\n      sort: '',\n      unitFilter: '',\n      titleFilter: '',\n      typeFilters: [],\n      subjectFilters: [],\n      selectedLessons: [],\n      lessons: sampleLessons,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      assignSelectedDropdownOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(AssignLessonModal, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var open = this.props.open;\n      var _this$state6 = this.state,\n          assignSelectedDropdownOpen = _this$state6.assignSelectedDropdownOpen,\n          subjectFilters = _this$state6.subjectFilters,\n          typeFilters = _this$state6.typeFilters,\n          sort = _this$state6.sort;\n      return React.createElement(Portal, {\n        selector: \"#modal\"\n      }, open && React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"wrapper\"\n      }, React.createElement(\"div\", {\n        id: \"modal_assign_lesson\",\n        style: {\n          zIndex: '1003'\n        },\n        className: \"jsx-2666520574\" + \" \" + \"modal-page modal modal-custom\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"card-modal card-main card switcher-section grey lighten-3\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"header-row card-panel light-blue lighten-1 white-text\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"card-panel-row row\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"col s11\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"d-flex\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"icon-col\"\n      }, React.createElement(\"i\", {\n        className: \"jsx-2666520574\" + \" \" + \"icon-books-l\"\n      })), React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"card-panel-text\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"text-large\"\n      }, \"Assign Lessons\")))), React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"col s1 right-align\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"row icons-row\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.onCloseModal,\n        className: \"jsx-2666520574\" + \" \" + \"modal-close close\"\n      }, React.createElement(\"i\", {\n        className: \"jsx-2666520574\" + \" \" + \"icon-close-thin\"\n      })))))), React.createElement(FilterSection, {\n        sort: sort,\n        typeFilters: typeFilters,\n        subjectFilters: subjectFilters,\n        onSetSort: this.onSetSort,\n        onClearFilters: this.onResetModal,\n        handleFilterClick: this.handleFilterClick,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState\n      }), React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"card-body\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"result-row center-align\"\n      }, React.createElement(\"b\", {\n        className: \"jsx-2666520574\" + \" \" + \"result\"\n      }, \" - \", this.getMappableLessons().length, \" results -\")), React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"checkboxes-section row d-flex-content card-width-322\"\n      }, this.mapLessons())))), React.createElement(\"div\", {\n        className: \"jsx-2666520574\" + \" \" + \"add-btn-block\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.onToggleAssignSelectedDropdown,\n        \"data-target\": \"dropdown_assign_selected_lessons\",\n        className: \"jsx-2666520574\" + \" \" + \"dropdown-trigger waves-effect waves-teal btn add-btn\"\n      }, React.createElement(\"i\", {\n        className: \"jsx-2666520574\" + \" \" + \"material-icons\"\n      }, \"add\"), \" Assign Selected\"), React.createElement(\"ul\", {\n        id: \"dropdown_assign_selected_lessons\",\n        style: {\n          display: assignSelectedDropdownOpen ? 'block' : '0',\n          opacity: assignSelectedDropdownOpen ? '1' : '0'\n        },\n        className: \"jsx-2666520574\" + \" \" + 'dropdown-content'\n      }, React.createElement(\"li\", {\n        className: \"jsx-2666520574\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: function onClick() {\n          return _this2.assignLessons('today');\n        },\n        className: \"jsx-2666520574\"\n      }, \"For Today\")), React.createElement(\"li\", {\n        className: \"jsx-2666520574\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: function onClick() {\n          return _this2.assignLessons('tomorrow');\n        },\n        className: \"jsx-2666520574\"\n      }, \"For Tomorrow\")), React.createElement(\"li\", {\n        className: \"jsx-2666520574\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: function onClick() {\n          return _this2.assignLessons('nextSession');\n        },\n        className: \"jsx-2666520574\"\n      }, \"For Next Session\")), React.createElement(\"li\", {\n        className: \"jsx-2666520574\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: function onClick() {\n          return _this2.assignLessons('customDate');\n        },\n        className: \"jsx-2666520574\"\n      }, \"For Date...\")))))), React.createElement(_JSXStyle, {\n        id: \"2666520574\"\n      }, [\".card-modal.jsx-2666520574{margin:0;border-radius:6px;}\", \".wrapper.jsx-2666520574{min-height:0px;}\", \".modal-custom.jsx-2666520574{opacity:1;visibility:visible;}\", \".modal-footer.jsx-2666520574{background-color:white;}\"]));\n    }\n  }]);\n\n  return AssignLessonModal;\n}(React.Component);\n\nexport default AssignLessonModal;","map":null,"metadata":{},"sourceType":"module"}