{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport FilterSection from './components/FilterSection';\nimport FullView from './components/FullView';\nimport { passage, statusAscending, availableDate, dueDate, alerts } from '../../utils/sortFunctions';\n\nvar DetailLessonList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DetailLessonList, _React$Component);\n\n  function DetailLessonList(props) {\n    var _this;\n\n    _classCallCheck(this, DetailLessonList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DetailLessonList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClearFilters\", function () {\n      return _this.setState({\n        statusFilters: [],\n        subjectFilters: [],\n        completeFilters: [],\n        flagFilters: [],\n        classTypeFilters: [],\n        dueDateFilters: [],\n        unitFilter: \"\",\n        nameFilter: \"\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (lesson) {\n      return _this.setState({\n        nameFilter: lesson\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function (filter) {\n      return _this.setState(_defineProperty({}, filter, \"\"));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeView\", function (view) {\n      return _this.setState({\n        currentView: view,\n        active: view\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortLessons\", function (lessons) {\n      var sort = _this.state.sort;\n\n      switch (sort) {\n        case 'passage':\n          return lessons.sort(passage);\n\n        case 'status':\n          return lessons.sort(statusAscending);\n\n        case 'availableDate':\n          return lessons.sort(availableDate);\n\n        case 'dueDate':\n          return lessons.sort(dueDate);\n\n        case 'alerts':\n          return lessons.sort(alerts);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloneLesson\", function (index) {\n      var lessons = _this.state.lessons;\n\n      _this.setState(function (prevState) {\n        prevState.lessons.push(lessons[index]);\n        return {\n          lessons: prevState.lessons\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteLesson\", function (index) {\n      var lessons = _this.state.lessons;\n\n      var newLessonsArray = _this.arrayItemRemover(lessons, lessons[index]);\n\n      _this.setState({\n        lessons: newLessonsArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterLessons\", function () {\n      var _this$state = _this.state,\n          statusFilters = _this$state.statusFilters,\n          subjectFilters = _this$state.subjectFilters,\n          classTypeFilters = _this$state.classTypeFilters,\n          completeFilters = _this$state.completeFilters,\n          flagFilters = _this$state.flagFilters,\n          allLessons = _this$state.lessons;\n      var lessons = allLessons;\n\n      if (statusFilters.length && statusFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return statusFilters.indexOf(lesson.status) !== -1;\n        });\n      }\n\n      if (subjectFilters.length && subjectFilters.indexOf('all') === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return subjectFilters.indexOf(lesson.subject) !== -1;\n        });\n      }\n\n      if (completeFilters.length && completeFilters.indexOf('complete') !== -1) {\n        lessons = lessons.filter(function (lesson) {\n          return lesson.completed === true;\n        });\n      }\n\n      if (completeFilters.length && completeFilters.indexOf('incomplete')) {\n        lessons = lessons.filter(function (lesson) {\n          return lesson.status === 'Developing';\n        });\n      } //   else if (completeFilters.indexOf('unassigned')) {\n      //     lessons = lessons.filter(lesson => lesson.assigned === false)\n      //   }\n      // }\n      // if (completeFilters.incomplete !== -1) {\n      //   lessons = lessons.filter(lesson => lesson.status === 'started')\n      // }\n      // if (completeFilters.unassigned !== -1) {\n      //   lessons = lessons.filter(lesson => lesson.assigned === false)\n      // }\n\n\n      if (flagFilters.length && flagFilters.indexOf('all') === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return lesson.alerts.length !== 0;\n        });\n      }\n\n      if (classTypeFilters.length && classTypeFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(function (lesson) {\n          return classTypeFilters.indexOf(lesson.classType) !== -1;\n        });\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMappableLessons\", function () {\n      var _this$state2 = _this.state,\n          sort = _this$state2.sort,\n          dueDateFilters = _this$state2.dueDateFilters,\n          lessons = _this$state2.lessons,\n          statusFilters = _this$state2.statusFilters,\n          subjectFilters = _this$state2.subjectFilters,\n          classTypeFilters = _this$state2.classTypeFilters,\n          completeFilters = _this$state2.completeFilters,\n          flagFilters = _this$state2.flagFilters;\n      var mappableLessons = lessons;\n\n      if (statusFilters.length || subjectFilters.length || completeFilters.length || classTypeFilters.length || flagFilters.length) {\n        mappableLessons = _this.onFilterLessons();\n      } // if (completeFilters.length) {\n      //   mappableLessons = this.onFilterCompletion();\n      // }\n\n\n      if (dueDateFilters) {\n        return mappableLessons;\n      }\n\n      if (sort) {\n        return _this.onSortLessons(mappableLessons);\n      }\n\n      return mappableLessons;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFilterClick\", function (filterType, filter) {\n      var _this$state3 = _this.state,\n          currentSubjectFilters = _this$state3.subjectFilters,\n          currentCompleteFilters = _this$state3.completeFilters,\n          currentStatusFilters = _this$state3.statusFilters,\n          currentFlagFilters = _this$state3.flagFilters,\n          currentDueDateFilters = _this$state3.dueDateFilters,\n          currentClassTypeFilters = _this$state3.classTypeFilters;\n      var modifiedFilterCurrentState;\n      var modifiedFilterName;\n      var modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'status':\n          modifiedFilterCurrentState = currentStatusFilters;\n          modifiedFilterName = 'statusFilters';\n          break;\n\n        case 'complete':\n          modifiedFilterCurrentState = currentCompleteFilters;\n          modifiedFilterName = 'completeFilters';\n          break;\n\n        case 'alerts':\n          modifiedFilterCurrentState = currentFlagFilters;\n          modifiedFilterName = 'flagFilters';\n          break;\n\n        case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n\n        case 'classType':\n          modifiedFilterCurrentState = currentClassTypeFilters;\n          modifiedFilterName = 'classTypeFilters';\n          break;\n\n        default:\n          break;\n      } // Decide whether we're adding or removing the selected filter\n\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        var filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      _this.setState(_defineProperty({}, modifiedFilterName, modifiedFilterUpdatedState));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"arrayItemRemover\", function (array, value) {\n      return array.filter(function (lesson) {\n        return lesson !== value;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCurrentView\", function () {\n      var active = _this.state.active;\n\n      if (active === 'full') {\n        return React.createElement(FullView, {\n          lessons: _this.getMappableLessons(),\n          onDeleteLesson: _this.onDeleteLesson,\n          onCloneLesson: _this.onCloneLesson\n        });\n      }\n    });\n\n    _this.state = {\n      test: true,\n      lessons: _this.props.user.lessons,\n      currentView: 'full',\n      active: 'full',\n      statusFilters: [],\n      subjectFilters: [],\n      completeFilters: [],\n      flagFilters: [],\n      classTypeFilters: [],\n      dueDateFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(DetailLessonList, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state4 = this.state,\n          currentView = _this$state4.currentView,\n          subjectFilters = _this$state4.subjectFilters,\n          statusFilters = _this$state4.statusFilters,\n          completeFilters = _this$state4.completeFilters,\n          flagFilters = _this$state4.flagFilters,\n          dueDateFilters = _this$state4.dueDateFilters,\n          classTypeFilters = _this$state4.classTypeFilters;\n      return React.createElement(React.Fragment, null, React.createElement(FilterSection, {\n        currentView: currentView,\n        onChangeView: this.onChangeView,\n        onHandleFilterClick: this.onHandleFilterClick,\n        onClearFilters: this.onClearFilters,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState,\n        onSetSort: this.onSetSort,\n        subjectFilters: subjectFilters,\n        statusFilters: statusFilters,\n        completeFilters: completeFilters,\n        flagFilters: flagFilters,\n        dueDateFilters: dueDateFilters,\n        classTypeFilters: classTypeFilters,\n        handleFilterClick: this.handleFilterClick\n      }), this.renderCurrentView(), React.createElement(\"a\", {\n        href: \"#\",\n        className: \"waves-effect waves-teal btn add-btn\"\n      }, React.createElement(\"i\", {\n        className: \"material-icons\"\n      }, \"add\"), \"New Lesson\"));\n    }\n  }]);\n\n  return DetailLessonList;\n}(React.Component);\n\nDetailLessonList.propTypes = {\n  user: PropTypes.object.isRequired\n};\nexport default DetailLessonList;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailLessonList\\index.js"],"names":["React","PropTypes","update","FilterSection","FullView","passage","statusAscending","availableDate","dueDate","alerts","DetailLessonList","props","setState","statusFilters","subjectFilters","completeFilters","flagFilters","classTypeFilters","dueDateFilters","unitFilter","nameFilter","sort","lesson","filter","view","currentView","active","lessons","state","index","prevState","push","newLessonsArray","arrayItemRemover","allLessons","length","indexOf","status","subject","completed","classType","mappableLessons","onFilterLessons","onSortLessons","filterType","currentSubjectFilters","currentCompleteFilters","currentStatusFilters","currentFlagFilters","currentDueDateFilters","currentClassTypeFilters","modifiedFilterCurrentState","modifiedFilterName","modifiedFilterUpdatedState","$push","filterIndex","$splice","array","value","getMappableLessons","onDeleteLesson","onCloneLesson","test","user","onChangeView","onHandleFilterClick","onClearFilters","onSetFilteredState","onUnsetFilteredState","onSetSort","handleFilterClick","renderCurrentView","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport FilterSection from './components/FilterSection';\nimport FullView from './components/FullView';\nimport { passage, statusAscending, availableDate, dueDate, alerts} from '../../utils/sortFunctions';\n\nclass DetailLessonList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: true,\n      lessons: this.props.user.lessons,\n      currentView: 'full',\n      active: 'full',\n      statusFilters: [],\n      subjectFilters: [],\n      completeFilters: [],\n      flagFilters: [],\n      classTypeFilters: [],\n      dueDateFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\",\n    }\n  };\n\n  onClearFilters = () => this.setState({ statusFilters: [], subjectFilters: [], completeFilters: [], flagFilters: [], classTypeFilters: [], dueDateFilters: [], unitFilter: \"\", nameFilter: \"\" })\n  onSetSort = (sort) => this.setState({sort})\n  onSetFilteredState = (lesson) => this.setState({nameFilter: lesson })\n  onUnsetFilteredState = (filter) => this.setState({[filter]: \"\" })\n  onChangeView = (view) => this.setState({currentView: view, active: view})\n\n  onSortLessons = (lessons) => {\n    const { sort } = this.state;\n    switch(sort) {\n      case 'passage':\n        return lessons.sort(passage);\n      case 'status':\n          return lessons.sort(statusAscending);\n      case 'availableDate':\n          return lessons.sort(availableDate);\n      case 'dueDate':\n        return lessons.sort(dueDate);\n      case 'alerts':\n        return lessons.sort(alerts);\n      default:\n        break;  \n\n    }\n  }\n\n  onCloneLesson = (index) => {\n    const { lessons } = this.state;\n    this.setState(prevState => {\n      prevState.lessons.push(lessons[index]);\n      return { lessons: prevState.lessons}\n     })\n  }\n\n  onDeleteLesson = (index) => {\n    const { lessons } = this.state;\n    const newLessonsArray = this.arrayItemRemover(lessons, lessons[index])\n    this.setState({lessons: newLessonsArray})\n  }\n//   onFilterCompletion = () => {\n//     const { completeFilters, lessons: allLessons } = this.state;\n//     let lessons = allLessons\n//     if (completeFilters.length && completeFilters.indexOf('complete')) {\n//       lessons = lessons.filter(lesson => lesson.completed === true)\n//     }\n//     if (completeFilters.length && completeFilters.indexOf('incomplete')) {\n//       lessons = lessons.filter(lesson => lesson.status === \"Started\")\n//     }\n//     if (completeFilters.length && completeFilters.indexOf('unassigned')) {\n//       lessons = lessons.filter(lesson => lesson.assigned === false)\n//     }\n//     return lessons\n// }\n\n  // TODO: separate unitfilter method and due date method\n  onFilterLessons = () => {\n    const { statusFilters, subjectFilters, classTypeFilters, completeFilters, flagFilters, lessons: allLessons } = this.state;\n    let lessons = allLessons;\n    if (statusFilters.length && statusFilters.indexOf(\"all\") === -1) {\n      lessons = lessons.filter(lesson => statusFilters.indexOf(lesson.status) !== -1);\n    }\n    if (subjectFilters.length && subjectFilters.indexOf('all') === -1) {\n      lessons = lessons.filter(lesson => subjectFilters.indexOf(lesson.subject) !== -1)\n    }\n    if (completeFilters.length && completeFilters.indexOf('complete') !== -1) {\n        lessons = lessons.filter(lesson => lesson.completed === true)\n    }\n    if (completeFilters.length && completeFilters.indexOf('incomplete')) {\n        lessons = lessons.filter(lesson => lesson.status === 'Developing')\n      }\n    //   else if (completeFilters.indexOf('unassigned')) {\n    //     lessons = lessons.filter(lesson => lesson.assigned === false)\n    //   }\n    // }\n      // if (completeFilters.incomplete !== -1) {\n      //   lessons = lessons.filter(lesson => lesson.status === 'started')\n      // }\n      // if (completeFilters.unassigned !== -1) {\n      //   lessons = lessons.filter(lesson => lesson.assigned === false)\n      // }\n    \n    if (flagFilters.length && flagFilters.indexOf('all') === -1) {\n      lessons = lessons.filter(lesson => lesson.alerts.length !== 0)\n    }\n    if (classTypeFilters.length && classTypeFilters.indexOf(\"all\") === -1) {\n      lessons = lessons.filter(lesson => classTypeFilters.indexOf(lesson.classType) !== -1)\n    }\n    return lessons;\n  }\n\n  getMappableLessons = () => {\n    const { sort, dueDateFilters, lessons, statusFilters, subjectFilters, classTypeFilters, completeFilters, flagFilters} = this.state;\n    let mappableLessons = lessons;\n    if (statusFilters.length || subjectFilters.length || completeFilters.length || classTypeFilters.length || flagFilters.length) {\n      mappableLessons = this.onFilterLessons();\n    }\n    // if (completeFilters.length) {\n    //   mappableLessons = this.onFilterCompletion();\n    // }\n    if (dueDateFilters) {\n      return mappableLessons\n    }\n    if (sort) {\n      return this.onSortLessons(mappableLessons)\n    }\n    return mappableLessons\n  }\n\n  handleFilterClick = (filterType, filter) => {\n    const { subjectFilters: currentSubjectFilters, completeFilters: currentCompleteFilters, statusFilters: currentStatusFilters, flagFilters: currentFlagFilters, dueDateFilters: currentDueDateFilters, classTypeFilters: currentClassTypeFilters } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case 'subject':\n        modifiedFilterCurrentState = currentSubjectFilters;\n        modifiedFilterName = 'subjectFilters';\n        break;\n      case 'status':\n        modifiedFilterCurrentState = currentStatusFilters;\n        modifiedFilterName = 'statusFilters';\n        break;\n      case 'complete':\n        modifiedFilterCurrentState = currentCompleteFilters;\n        modifiedFilterName = 'completeFilters';\n        break;\n      case 'alerts':\n          modifiedFilterCurrentState = currentFlagFilters;\n          modifiedFilterName = 'flagFilters';\n          break;\n      case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n      case 'classType':\n          modifiedFilterCurrentState = currentClassTypeFilters;\n          modifiedFilterName = 'classTypeFilters';\n          break;\n        default:\n        break;\n    }\n    // Decide whether we're adding or removing the selected filter\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[ filterIndex, 1 ]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  }\n\n  \n  arrayItemRemover = (array, value) => array.filter((lesson) => lesson !== value)\n\n  renderCurrentView = () => {\n    const {active } = this.state;\n    if (active === 'full') {\n      return <FullView lessons={this.getMappableLessons()} onDeleteLesson={this.onDeleteLesson} onCloneLesson={this.onCloneLesson}/>\n    }\n  }\n\n\n  render() {\n    const { currentView, subjectFilters, statusFilters, completeFilters, flagFilters, dueDateFilters, classTypeFilters } = this.state;\n    return (\n      <React.Fragment>\n        <FilterSection\n        currentView={currentView}\n        onChangeView={this.onChangeView}\n        onHandleFilterClick={this.onHandleFilterClick}\n        onClearFilters={this.onClearFilters}\n        onSetFilteredState={this.onSetFilteredState}\n        onUnsetFilteredState={this.onUnsetFilteredState}\n        onSetSort={this.onSetSort}\n        subjectFilters={subjectFilters}\n        statusFilters={statusFilters}\n        completeFilters={completeFilters}\n        flagFilters={flagFilters}\n        dueDateFilters={dueDateFilters}\n        classTypeFilters={classTypeFilters}\n        handleFilterClick={this.handleFilterClick}\n        />\n        {this.renderCurrentView()}\n      <a href=\"#\" className=\"waves-effect waves-teal btn add-btn\"><i className=\"material-icons\">add</i>New Lesson</a>\n      </React.Fragment>\n    )\n  }\n}\n\nDetailLessonList.propTypes = {\n  user: PropTypes.object.isRequired,\n};\n\nexport default DetailLessonList;\n"]},"metadata":{},"sourceType":"module"}