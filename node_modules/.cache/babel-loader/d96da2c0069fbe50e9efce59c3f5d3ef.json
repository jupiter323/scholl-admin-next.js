{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable react/no-did-update-set-state */\n\n/* eslint-disable react/no-did-mount-set-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport Portal from '../../../../Portal';\nimport TestVersionSettings from './components/TestVersionSettings';\nimport Settings from './components/Settings';\n\nvar EditTestModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditTestModal, _React$Component);\n\n  function EditTestModal(props) {\n    var _this;\n\n    _classCallCheck(this, EditTestModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditTestModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTestVersionSettingsChange\", function (event) {\n      var sections = _this.state.testVersion.sections;\n      var testVersion;\n\n      if (event.target) {\n        var setting = event.target.name;\n\n        if (sections[setting] !== undefined) {\n          testVersion = update(_this.state.testVersion, {\n            sections: _defineProperty({}, setting, {\n              $set: !sections[setting]\n            })\n          });\n        } else {\n          testVersion = update(_this.state.testVersion, _defineProperty({}, setting, {\n            $set: !_this.state.testVersion[setting]\n          }));\n        }\n      } else {\n        testVersion = update(_this.state.testVersion, {\n          version: {\n            $set: event\n          }\n        });\n      }\n\n      _this.setState({\n        testVersion: testVersion\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSettingsChange\", function (event) {\n      var previousSettings = _this.state.settings;\n      var setting = event.target.name;\n      var settings = update(_this.state.settings, _defineProperty({}, setting, {\n        $set: !previousSettings[setting]\n      }));\n\n      _this.setState({\n        settings: settings\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDatePickerChange\", function (field, value) {\n      var settings = update(_this.state.settings, _defineProperty({}, field, {\n        $set: value\n      }));\n\n      _this.setState({\n        settings: settings\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveTestChanges\", function () {\n      var onSaveTestChanges = _this.props.onSaveTestChanges;\n      var _this$state = _this.state,\n          testVersion = _this$state.testVersion,\n          _this$state$settings = _this$state.settings,\n          unformattedTestDate = _this$state$settings.testDate,\n          unformattedDueDate = _this$state$settings.dueDate,\n          allowStudentToEnterAnswers = _this$state$settings.allowStudentToEnterAnswers,\n          timed = _this$state$settings.timed;\n      var testDate = moment(unformattedTestDate).format('MM/DD/YY');\n      var dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n      onSaveTestChanges(testVersion, {\n        testDate: testDate,\n        dueDate: dueDate,\n        allowStudentToEnterAnswers: allowStudentToEnterAnswers,\n        timed: timed\n      });\n    });\n\n    _this.state = {\n      testVersion: {\n        version: '',\n        sections: {\n          reading: false,\n          writing: false,\n          math: false,\n          essay: false\n        },\n        includeScoreInImprovementMetrics: false\n      },\n      settings: {\n        testDate: '',\n        dueDate: '',\n        allowStudentToEnterAnswers: false,\n        timed: false\n      }\n    };\n    return _this;\n  }\n\n  _createClass(EditTestModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$test = this.props.test,\n          unformattedTestDate = _this$props$test.testDate,\n          unformattedDueDate = _this$props$test.dueDate;\n      var testDate = new Date(unformattedTestDate);\n      var dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n      var settings = update(this.state.settings, {\n        testDate: {\n          $set: testDate\n        },\n        dueDate: {\n          $set: dueDate\n        }\n      });\n      this.setState({\n        settings: settings\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props$test2 = this.props.test,\n          unformattedTestDate = _this$props$test2.testDate,\n          unformattedDueDate = _this$props$test2.dueDate;\n      var testDate = new Date(unformattedTestDate);\n      var dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n\n      if (prevProps.test.id !== this.props.test.id) {\n        var settings = update(this.state.settings, {\n          testDate: {\n            $set: testDate\n          },\n          dueDate: {\n            $set: dueDate\n          }\n        });\n        this.setState({\n          settings: settings\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          test = _this$props.test,\n          user = _this$props.user,\n          onDeleteTest = _this$props.onDeleteTest;\n      var title = test.title,\n          testVersion = test.version,\n          completionDate = test.completionDate,\n          completionTime = test.completionTime;\n      var _user$studentInformat = user.studentInformation,\n          firstName = _user$studentInformat.firstName,\n          lastName = _user$studentInformat.lastName;\n      var _this$state2 = this.state,\n          _this$state2$testVers = _this$state2.testVersion,\n          _this$state2$testVers2 = _this$state2$testVers.sections,\n          reading = _this$state2$testVers2.reading,\n          writing = _this$state2$testVers2.writing,\n          math = _this$state2$testVers2.math,\n          essay = _this$state2$testVers2.essay,\n          version = _this$state2$testVers.version,\n          includeScoreInImprovementMetrics = _this$state2$testVers.includeScoreInImprovementMetrics,\n          _this$state2$settings = _this$state2.settings,\n          testDate = _this$state2$settings.testDate,\n          dueDate = _this$state2$settings.dueDate,\n          allowStudentToEnterAnswers = _this$state2$settings.allowStudentToEnterAnswers,\n          timed = _this$state2$settings.timed;\n      return React.createElement(Portal, {\n        selector: \"#modal\"\n      }, React.createElement(\"div\", {\n        className: \"main-holder grey lighten-5 modal\",\n        style: {\n          zIndex: '1003',\n          display: 'block',\n          position: 'absolute',\n          top: '0',\n          width: '100%'\n        }\n      }, React.createElement(\"div\", {\n        className: \"header-row card-panel light-blue lighten-1 white-text\"\n      }, React.createElement(\"div\", {\n        className: \"card-panel-row row\"\n      }, React.createElement(\"div\", {\n        className: \"icon-col col s1\"\n      }, React.createElement(\"i\", {\n        className: \"icon-letter-a\"\n      })), React.createElement(\"div\", {\n        className: \"col s9\"\n      }, React.createElement(\"div\", {\n        className: \"card-panel-text center-align\"\n      }, React.createElement(\"div\", {\n        className: \"text-xlarge\"\n      }, title), React.createElement(\"div\", {\n        className: \"text-small\"\n      }, \"Version: SAT Practice Test #\", testVersion))), React.createElement(\"div\", {\n        className: \"col s1 right-align\"\n      }, React.createElement(\"div\", {\n        className: \"row icons-row\"\n      }, \"\\xA0\"))), React.createElement(\"div\", {\n        className: \"header-row-block card-panel-row row\"\n      }, React.createElement(\"div\", {\n        className: \"col s3\"\n      }, \"\\xA0\"), React.createElement(\"div\", {\n        className: \"col s9 right-align\"\n      }, React.createElement(\"div\", null, React.createElement(\"span\", {\n        className: \"name\"\n      }, firstName, \" \", lastName))))), React.createElement(\"div\", {\n        className: \"nav-header white\"\n      }, React.createElement(\"div\", {\n        className: \"nav-additional\"\n      }, React.createElement(\"ul\", {\n        className: \"menu-additional\"\n      }, React.createElement(\"li\", {\n        className: \"col s3\"\n      }, React.createElement(\"a\", {\n        className: \"active\",\n        href: \"#\"\n      }, \"Scores\")), React.createElement(\"li\", {\n        className: \"col s3\"\n      }, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Answer Sheet\")), React.createElement(\"li\", {\n        className: \"col s3\"\n      }, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Strengths & Weaknesses\")), React.createElement(\"li\", {\n        className: \"col s3\"\n      }, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Test Version\")), React.createElement(\"li\", {\n        className: \"menu-special col s3\"\n      }, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Download Score Report \", React.createElement(\"i\", {\n        className: \"icon-download-file\"\n      })))))), React.createElement(\"div\", {\n        className: \"content-section\"\n      }, React.createElement(\"div\", {\n        className: \"content-section-holder\"\n      }, React.createElement(\"div\", {\n        className: \"container-xsmall\"\n      }, React.createElement(\"div\", {\n        className: \"row d-flex-content card-width-322\"\n      }, React.createElement(\"div\", {\n        className: \"card-main-col col s12 m8 l7 xl5\"\n      }, React.createElement(TestVersionSettings, {\n        version: version,\n        reading: reading,\n        writing: writing,\n        math: math,\n        essay: essay,\n        includeScoreInImprovementMetrics: includeScoreInImprovementMetrics,\n        handleTestVersionSettingsChange: this.handleTestVersionSettingsChange\n      }), React.createElement(Settings, {\n        timed: timed,\n        testDate: testDate,\n        dueDate: dueDate,\n        handleSettingsChange: this.handleSettingsChange,\n        handleDatePickerChange: this.handleDatePickerChange,\n        allowStudentToEnterAnswers: allowStudentToEnterAnswers\n      })), React.createElement(\"div\", {\n        className: \"card-main-col col s12 m8 l7 xl5\"\n      }, React.createElement(\"h2\", null, \"Status\"), React.createElement(\"div\", {\n        className: \"card card-test-detail\"\n      }, React.createElement(\"div\", {\n        className: \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"meta-info\"\n      }, completionDate.length ? React.createElement(\"p\", null, \"Completed : \", React.createElement(\"time\", {\n        dateTime: \"2018-12-29\"\n      }, completionDate, \" at \", completionTime), completionDate.length && test.dueDate < completionDate ? React.createElement(\"span\", {\n        className: \"badge white-text badge-rounded-sm\",\n        style: {\n          backgroundColor: '#db1d41'\n        }\n      }, React.createElement(\"b\", {\n        className: \"badge-text\"\n      }, \"late\")) : null) : null, React.createElement(\"p\", null, \"Answers Entered by: \", firstName, \" \", lastName, \" (student)\")))))), React.createElement(\"div\", {\n        className: \"btn-holder\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        className: \"btn\",\n        onClick: this.saveTestChanges\n      }, \"Save\"), React.createElement(\"a\", {\n        href: \"#\",\n        className: \"waves-effect waves-teal btn-flat pink-text text-darken-1\",\n        onClick: onDeleteTest\n      }, \"Delete\")))))));\n    }\n  }]);\n\n  return EditTestModal;\n}(React.Component);\n\nexport default EditTestModal;","map":null,"metadata":{},"sourceType":"module"}