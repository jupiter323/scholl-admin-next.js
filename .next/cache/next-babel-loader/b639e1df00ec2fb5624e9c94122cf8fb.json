{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport UserInfo from './components/UserInfo';\nimport ContactInfo from './components/ContactInfo';\nimport UserLocation from './components/UserLocation';\nimport LocationModal from '../../Location/components/LocationModal';\nimport { nestedEditFieldValidation } from '../../utils/fieldValidation';\n\nclass DetailAccountPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      if (!this.state.originalUser || nextProps.user.id !== this.state.originalUser.id) {\n        const {\n          user: {\n            id,\n            userInfo,\n            contactInfo,\n            userLocation\n          } = {}\n        } = nextProps;\n        const updatedUser = {\n          id,\n          userInfo,\n          contactInfo,\n          userLocation\n        };\n        const {\n          originalUser: originalUserState\n        } = this.state;\n        const originalUser = update(originalUserState, {\n          $merge: nextProps.user\n        });\n        this.setState({\n          originalUser,\n          updatedUser\n        });\n      }\n    });\n\n    _defineProperty(this, \"onOpenLocationModal\", () => this.setState({\n      locationModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseLocationModal\", () => this.setState({\n      locationModalOpen: false\n    }));\n\n    _defineProperty(this, \"onSetValidation\", (validation, cb) => this.setState({\n      validation\n    }, cb));\n\n    _defineProperty(this, \"onSaveChanges\", async event => {\n      event.preventDefault(); // const { onSavePassageChanges, onSaveChangesError, onSetPassageValidation } = this.props;\n\n      const {\n        updatedUser\n      } = this.state;\n      const valid = await nestedEditFieldValidation(this.state, this.state.updatedUser, this.onSetValidation, validation => console.warn('validation', validation));\n\n      if (!valid) {\n        // return onSaveChangesError();\n        console.warn('not valid');\n      }\n\n      this.setState({\n        originalUser: this.state.updatedUser\n      }); // return onSavePassageChanges(updatedUser);\n    });\n\n    _defineProperty(this, \"onRemoveOption\", (optionIndex, section, array) => {\n      const updatedUser = update(this.state.updatedUser, {\n        [section]: {\n          [array]: {\n            $splice: [[optionIndex, 1]]\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    _defineProperty(this, \"initialUserMount\", () => this.state.originalUser.id !== this.props.user.id);\n\n    _defineProperty(this, \"handleDetailsChange\", (event, name, section) => {\n      const {\n        updatedUser: previousUserState\n      } = this.state;\n      const value = event.target ? event.target.value : event;\n      const updatedUser = update(previousUserState, {\n        [section]: {\n          $merge: {\n            [name]: value\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    _defineProperty(this, \"handleOptionsChange\", (selectedOptions, section, array) => {\n      const updatedUser = update(this.state.updatedUser, {\n        [section]: {\n          [array]: {\n            $set: selectedOptions\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    this.state = {\n      locationModalOpen: false,\n      originalUser: {\n        userInfo: {\n          firstName: '',\n          lastName: '',\n          email: '',\n          gender: ''\n        },\n        contactInfo: {\n          phone: '',\n          streetAddress: '',\n          city: '',\n          state: '',\n          zip: ''\n        },\n        userLocation: {\n          locations: []\n        }\n      },\n      updatedUser: {\n        userInfo: {\n          firstName: '',\n          lastName: '',\n          email: '',\n          gender: ''\n        },\n        contactInfo: {\n          phone: '',\n          streetAddress: '',\n          city: '',\n          state: '',\n          zip: ''\n        },\n        userLocation: {\n          locations: []\n        }\n      },\n      validation: {\n        userInfo: {\n          firstName: true,\n          lastName: true,\n          email: true,\n          gender: true\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      user: {\n        id,\n        userInfo,\n        contactInfo,\n        userLocation\n      } = {}\n    } = this.props;\n    const updatedUser = {\n      id,\n      userInfo,\n      contactInfo,\n      userLocation\n    };\n    const {\n      originalUser: originalUserState\n    } = this.state;\n    const originalUser = update(originalUserState, {\n      $merge: updatedUser\n    });\n    this.setState({\n      originalUser,\n      updatedUser\n    }); // eslint-disable-line\n  } // This resets the component state to reflect the details of the next user the user clicks on\n\n\n  render() {\n    const {\n      locationModalOpen,\n      updatedUser: {\n        userInfo: updatedUserInfo,\n        contactInfo: updatedContactInfo,\n        userLocation: updatedUserLocation\n      }\n    } = this.state;\n    const {\n      user: {\n        userInfo,\n        contactInfo,\n        userLocation\n      }\n    } = this.props;\n    return React.createElement(React.Fragment, null, React.createElement(LocationModal, {\n      open: locationModalOpen,\n      onClose: this.onCloseLocationModal,\n      handleLocationsChange: selectedLocations => this.handleOptionsChange(selectedLocations, 'userLocation', 'locations')\n    }), React.createElement(\"div\", {\n      className: \"content-section\"\n    }, React.createElement(\"div\", {\n      className: \"content-section-holder\"\n    }, React.createElement(\"div\", {\n      className: \"row mb-0 d-flex-content large\"\n    }, React.createElement(\"div\", {\n      className: \"col s12 l5\"\n    }, React.createElement(UserInfo, {\n      state: this.initialUserMount() ? userInfo : updatedUserInfo,\n      handleDetailsChange: this.handleDetailsChange\n    }), React.createElement(ContactInfo, {\n      state: this.initialUserMount() ? contactInfo : updatedContactInfo,\n      handleDetailsChange: this.handleDetailsChange\n    })), React.createElement(UserLocation, {\n      state: this.initialUserMount() ? userLocation : updatedUserLocation,\n      onOpenLocationModal: this.onOpenLocationModal,\n      onRemoveLocation: this.onRemoveOption\n    })), React.createElement(\"div\", {\n      className: \"btn-holder align-right-sm\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      className: \"btn\",\n      onClick: this.onSaveChanges\n    }, \"Save\")))));\n  }\n\n}\n\nexport default DetailAccountPage;","map":null,"metadata":{},"sourceType":"module"}