{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/LessonDetailAnswerSheet/components/EditProblemRow/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport styled from 'styled-components';\nimport { addStudentLessonProblemAnswerApi } from '../../../index/api';\nimport { answerStudentLessonProblem } from '../../../index/actions';\n\nclass ProblemRow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"setAnswerChoice\", () => {\n      const {\n        question\n      } = this.props;\n      const currentAnswerId = question.answer_id;\n      const answerChoices = question.problem.answers;\n      const currentSelection = answerChoices.map((answer, index) => {\n        if (answer.id === currentAnswerId) {\n          return index;\n        }\n\n        return null;\n      }).filter(index => index !== null)[0];\n      if (typeof currentSelection !== \"number\") return;\n      this.setState({\n        problemCells: update(this.state.problemCells, {\n          [currentSelection]: {\n            selected: {\n              $set: true\n            }\n          }\n        }),\n        selectedIndex: currentSelection\n      });\n    });\n\n    _defineProperty(this, \"setAnswerText\", () => {\n      const {\n        question: {\n          answer_text\n        }\n      } = this.props;\n      const setText = !answer_text ? \"\" : answer_text;\n      this.setState({\n        answer_text: setText\n      });\n    });\n\n    _defineProperty(this, \"onSaveStudentAnswer\", async (updatedProblemCells, index) => {\n      const {\n        activeLesson,\n        question\n      } = this.props;\n      const answerChoices = question.problem.answers;\n      this.setState({\n        problemCells: updatedProblemCells,\n        selectedIndex: index\n      });\n      const payload = {\n        student_lesson_id: activeLesson.id,\n        problem_id: question.problem.id,\n        answer_id: answerChoices[index].id\n      };\n      const res = await addStudentLessonProblemAnswerApi(payload);\n\n      if (res === 202) {\n        this.props.updateProblemList(this.props.problemType, _objectSpread({}, question, {\n          answer_id: answerChoices[index].id,\n          answer_text: null,\n          answered: true\n        }));\n        return this.handleUserMessage('success');\n      }\n\n      return this.handleUserMessage('fail');\n    });\n\n    _defineProperty(this, \"handleSubmit\", async e => {\n      const {\n        activeLesson,\n        question\n      } = this.props;\n      const payload = {\n        student_lesson_id: activeLesson.id,\n        problem_id: question.problem.id,\n        answer_text: this.state.answer_text\n      }; // convert API call to action dispatch answerStudentLessonProblem\n\n      const res = await addStudentLessonProblemAnswerApi(payload);\n\n      if (res === 202) {\n        this.props.updateProblemList(this.props.problemType, _objectSpread({}, question, {\n          answer_id: null,\n          answer_text: this.state.answer_text,\n          answered: true\n        }));\n        return this.handleUserMessage('success');\n      }\n\n      return this.handleUserMessage('fail');\n    });\n\n    _defineProperty(this, \"handleClickBadge\", index => {\n      const currentBadge = this.state.problemCells[index];\n      const selectedIndex = this.state.selectedIndex;\n      let updatedProblemCells = this.state.problemCells;\n\n      if (selectedIndex === -1) {\n        updatedProblemCells = update(this.state.problemCells, {\n          [index]: {\n            selected: {\n              $set: !currentBadge.selected\n            }\n          }\n        });\n      } else {\n        updatedProblemCells = update(this.state.problemCells, {\n          [selectedIndex]: {\n            selected: {\n              $set: false\n            }\n          },\n          [index]: {\n            selected: {\n              $set: !currentBadge.selected\n            }\n          }\n        });\n      }\n\n      this.onSaveStudentAnswer(updatedProblemCells, index);\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      this.setState({\n        answer_text: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleUserMessage\", status => {\n      if (status === 'fail') {\n        return this.setState({\n          userMessage: \"Something went wrong updating student answer.\",\n          messageType: status\n        });\n      }\n\n      return this.setState({\n        userMessage: \"Successfully updated student answer.\",\n        messageType: status\n      });\n    });\n\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [{\n        id: 0,\n        label: \"A\",\n        selected: false\n      }, {\n        id: 1,\n        label: \"B\",\n        selected: false\n      }, {\n        id: 2,\n        label: \"C\",\n        selected: false\n      }, {\n        id: 3,\n        label: \"D\",\n        selected: false\n      }],\n      answerChoices: [],\n      answer_text: \"\",\n      userMessage: \"\",\n      messageType: \"\"\n    };\n  }\n\n  componentDidMount() {\n    const {\n      question: {\n        answer_id,\n        answer_text,\n        answered\n      }\n    } = this.props;\n\n    if (answer_id && !answer_text && answered) {\n      this.setAnswerChoice();\n    } else if (!answer_id && answer_text && answered) {\n      this.setAnswerText();\n    }\n  }\n\n  render() {\n    const {\n      problemCells\n    } = this.state;\n\n    if (this.props.question.problem.answers.length === 0) {\n      return __jsx(React.Fragment, null, __jsx(\"input\", {\n        type: \"text\",\n        className: \"answer-input\",\n        value: this.state.answer_text,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), __jsx(\"button\", {\n        className: \"btn\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Submit\"), __jsx(UserMessage, {\n        messageType: this.state.messageType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, this.state.userMessage));\n    }\n\n    return __jsx(React.Fragment, null, __jsx(\"ul\", {\n      className: \"answer-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, problemCells.map((cell, index) => __jsx(\"li\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: () => this.handleClickBadge(index),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"badge-circle badge-circle-bordered\",\n      style: {\n        color: cell.selected ? \"#fff\" : \"\",\n        borderColor: cell.selected ? \"#19b4e9\" : \"\",\n        backgroundColor: cell.selected ? \"#19b4e9\" : \"\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, cell.label)))), __jsx(UserMessage, {\n      messageType: this.state.messageType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, this.state.userMessage));\n  }\n\n}\n\nconst UserMessage = styled.p.withConfig({\n  displayName: \"EditProblemRow__UserMessage\",\n  componentId: \"sc-1tglkza-0\"\n})([\"color:\", \";\"], props => props.messageType === 'fail' ? \"red\" : \"green\");\nProblemRow.propTypes = {\n  activeLesson: PropTypes.object.isRequired,\n  question: PropTypes.object.isRequired,\n  updateProblemList: PropTypes.func.isRequired,\n  problemType: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProblemRow);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/LessonDetailAnswerSheet/components/EditProblemRow/index.js"],"names":["React","update","PropTypes","connect","bindActionCreators","styled","addStudentLessonProblemAnswerApi","answerStudentLessonProblem","ProblemRow","Component","constructor","props","question","currentAnswerId","answer_id","answerChoices","problem","answers","currentSelection","map","answer","index","id","filter","setState","problemCells","state","selected","$set","selectedIndex","answer_text","setText","updatedProblemCells","activeLesson","payload","student_lesson_id","problem_id","res","updateProblemList","problemType","answered","handleUserMessage","e","currentBadge","onSaveStudentAnswer","target","value","status","userMessage","messageType","label","componentDidMount","setAnswerChoice","setAnswerText","render","length","handleChange","handleSubmit","cell","cursor","handleClickBadge","color","borderColor","backgroundColor","UserMessage","p","propTypes","object","isRequired","func","string","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,gCAAT,QAAiD,oBAAjD;AACA,SAASC,0BAAT,QAA2C,wBAA3C;;AAEA,MAAMC,UAAN,SAAyBR,KAAK,CAACS,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,6CA0CD,MAAM;AACtB,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKD,KAA1B;AACA,YAAME,eAAe,GAAGD,QAAQ,CAACE,SAAjC;AACA,YAAMC,aAAa,GAAGH,QAAQ,CAACI,OAAT,CAAiBC,OAAvC;AACA,YAAMC,gBAAgB,GAAGH,aAAa,CACnCI,GADsB,CAClB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACtB,YAAID,MAAM,CAACE,EAAP,KAAcT,eAAlB,EAAmC;AACjC,iBAAOQ,KAAP;AACD;;AACD,eAAO,IAAP;AACD,OANsB,EAOtBE,MAPsB,CAOdF,KAAD,IAAWA,KAAK,KAAK,IAPN,EAOY,CAPZ,CAAzB;AASA,UAAI,OAAOH,gBAAP,KAA4B,QAAhC,EAA0C;AAE1C,WAAKM,QAAL,CAAc;AACZC,QAAAA,YAAY,EAAExB,MAAM,CAAC,KAAKyB,KAAL,CAAWD,YAAZ,EAA0B;AAC5C,WAACP,gBAAD,GAAoB;AAAES,YAAAA,QAAQ,EAAE;AAAEC,cAAAA,IAAI,EAAE;AAAR;AAAZ;AADwB,SAA1B,CADR;AAIZC,QAAAA,aAAa,EAAEX;AAJH,OAAd;AAMD,KA/DkB;;AAAA,2CAiEH,MAAM;AACpB,YAAM;AAAEN,QAAAA,QAAQ,EAAE;AAAEkB,UAAAA;AAAF;AAAZ,UAAgC,KAAKnB,KAA3C;AACA,YAAMoB,OAAO,GAAG,CAACD,WAAD,GAAe,EAAf,GAAoBA,WAApC;AACA,WAAKN,QAAL,CAAc;AAAEM,QAAAA,WAAW,EAAEC;AAAf,OAAd;AACD,KArEkB;;AAAA,iDAuEG,OAAOC,mBAAP,EAA4BX,KAA5B,KAAsC;AAC1D,YAAM;AAAEY,QAAAA,YAAF;AAAgBrB,QAAAA;AAAhB,UAA6B,KAAKD,KAAxC;AACA,YAAMI,aAAa,GAAGH,QAAQ,CAACI,OAAT,CAAiBC,OAAvC;AACA,WAAKO,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAEO,mBAAhB;AAAqCH,QAAAA,aAAa,EAAER;AAApD,OAAd;AACA,YAAMa,OAAO,GAAG;AACdC,QAAAA,iBAAiB,EAAEF,YAAY,CAACX,EADlB;AAEdc,QAAAA,UAAU,EAAExB,QAAQ,CAACI,OAAT,CAAiBM,EAFf;AAGdR,QAAAA,SAAS,EAAEC,aAAa,CAACM,KAAD,CAAb,CAAqBC;AAHlB,OAAhB;AAKA,YAAMe,GAAG,GAAG,MAAM/B,gCAAgC,CAAC4B,OAAD,CAAlD;;AACA,UAAIG,GAAG,KAAK,GAAZ,EAAiB;AACf,aAAK1B,KAAL,CAAW2B,iBAAX,CAA6B,KAAK3B,KAAL,CAAW4B,WAAxC,oBAA0D3B,QAA1D;AAAoEE,UAAAA,SAAS,EAAEC,aAAa,CAACM,KAAD,CAAb,CAAqBC,EAApG;AAAwGQ,UAAAA,WAAW,EAAE,IAArH;AAA2HU,UAAAA,QAAQ,EAAE;AAArI;AACA,eAAO,KAAKC,iBAAL,CAAuB,SAAvB,CAAP;AACD;;AACD,aAAO,KAAKA,iBAAL,CAAuB,MAAvB,CAAP;AACD,KAtFkB;;AAAA,0CAwFJ,MAAOC,CAAP,IAAa;AAC1B,YAAM;AAAET,QAAAA,YAAF;AAAgBrB,QAAAA;AAAhB,UAA6B,KAAKD,KAAxC;AACA,YAAMuB,OAAO,GAAG;AACdC,QAAAA,iBAAiB,EAAEF,YAAY,CAACX,EADlB;AAEdc,QAAAA,UAAU,EAAExB,QAAQ,CAACI,OAAT,CAAiBM,EAFf;AAGdQ,QAAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWI;AAHV,OAAhB,CAF0B,CAO1B;;AACA,YAAMO,GAAG,GAAG,MAAM/B,gCAAgC,CAAC4B,OAAD,CAAlD;;AACA,UAAIG,GAAG,KAAK,GAAZ,EAAiB;AACf,aAAK1B,KAAL,CAAW2B,iBAAX,CAA6B,KAAK3B,KAAL,CAAW4B,WAAxC,oBAA0D3B,QAA1D;AAAoEE,UAAAA,SAAS,EAAE,IAA/E;AAAqFgB,UAAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWI,WAA7G;AAA0HU,UAAAA,QAAQ,EAAE;AAApI;AACA,eAAO,KAAKC,iBAAL,CAAuB,SAAvB,CAAP;AACD;;AACD,aAAO,KAAKA,iBAAL,CAAuB,MAAvB,CAAP;AACD,KAtGkB;;AAAA,8CAwGCpB,KAAD,IAAW;AAC5B,YAAMsB,YAAY,GAAG,KAAKjB,KAAL,CAAWD,YAAX,CAAwBJ,KAAxB,CAArB;AACA,YAAMQ,aAAa,GAAG,KAAKH,KAAL,CAAWG,aAAjC;AACA,UAAIG,mBAAmB,GAAG,KAAKN,KAAL,CAAWD,YAArC;;AACA,UAAII,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxBG,QAAAA,mBAAmB,GAAG/B,MAAM,CAAC,KAAKyB,KAAL,CAAWD,YAAZ,EAA0B;AACpD,WAACJ,KAAD,GAAS;AAAEM,YAAAA,QAAQ,EAAE;AAAEC,cAAAA,IAAI,EAAE,CAACe,YAAY,CAAChB;AAAtB;AAAZ;AAD2C,SAA1B,CAA5B;AAGD,OAJD,MAIO;AACLK,QAAAA,mBAAmB,GAAG/B,MAAM,CAAC,KAAKyB,KAAL,CAAWD,YAAZ,EAA0B;AACpD,WAACI,aAAD,GAAiB;AAAEF,YAAAA,QAAQ,EAAE;AAAEC,cAAAA,IAAI,EAAE;AAAR;AAAZ,WADmC;AAEpD,WAACP,KAAD,GAAS;AAAEM,YAAAA,QAAQ,EAAE;AAAEC,cAAAA,IAAI,EAAE,CAACe,YAAY,CAAChB;AAAtB;AAAZ;AAF2C,SAA1B,CAA5B;AAID;;AACD,WAAKiB,mBAAL,CAAyBZ,mBAAzB,EAA8CX,KAA9C;AACD,KAvHkB;;AAAA,0CAyHHqB,CAAD,IAAO;AACpB,WAAKlB,QAAL,CAAc;AAAEM,QAAAA,WAAW,EAAEY,CAAC,CAACG,MAAF,CAASC;AAAxB,OAAd;AACD,KA3HkB;;AAAA,+CA6HEC,MAAD,IAAY;AAC9B,UAAIA,MAAM,KAAK,MAAf,EAAuB;AACrB,eAAO,KAAKvB,QAAL,CAAc;AAAEwB,UAAAA,WAAW,EAAE,+CAAf;AAAgEC,UAAAA,WAAW,EAAEF;AAA7E,SAAd,CAAP;AACD;;AACD,aAAO,KAAKvB,QAAL,CAAc;AAAEwB,QAAAA,WAAW,EAAE,sCAAf;AAAuDC,QAAAA,WAAW,EAAEF;AAApE,OAAd,CAAP;AACD,KAlIkB;;AAEjB,SAAKrB,KAAL,GAAa;AACXG,MAAAA,aAAa,EAAE,CAAC,CADL;AAEXJ,MAAAA,YAAY,EAAE,CACZ;AACEH,QAAAA,EAAE,EAAE,CADN;AAEE4B,QAAAA,KAAK,EAAE,GAFT;AAGEvB,QAAAA,QAAQ,EAAE;AAHZ,OADY,EAMZ;AACEL,QAAAA,EAAE,EAAE,CADN;AAEE4B,QAAAA,KAAK,EAAE,GAFT;AAGEvB,QAAAA,QAAQ,EAAE;AAHZ,OANY,EAWZ;AACEL,QAAAA,EAAE,EAAE,CADN;AAEE4B,QAAAA,KAAK,EAAE,GAFT;AAGEvB,QAAAA,QAAQ,EAAE;AAHZ,OAXY,EAgBZ;AACEL,QAAAA,EAAE,EAAE,CADN;AAEE4B,QAAAA,KAAK,EAAE,GAFT;AAGEvB,QAAAA,QAAQ,EAAE;AAHZ,OAhBY,CAFH;AAwBXZ,MAAAA,aAAa,EAAE,EAxBJ;AAyBXe,MAAAA,WAAW,EAAE,EAzBF;AA0BXkB,MAAAA,WAAW,EAAE,EA1BF;AA2BXC,MAAAA,WAAW,EAAE;AA3BF,KAAb;AA6BD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEvC,MAAAA,QAAQ,EAAE;AAAEE,QAAAA,SAAF;AAAagB,QAAAA,WAAb;AAA0BU,QAAAA;AAA1B;AAAZ,QAAqD,KAAK7B,KAAhE;;AACA,QAAIG,SAAS,IAAI,CAACgB,WAAd,IAA6BU,QAAjC,EAA2C;AACzC,WAAKY,eAAL;AACD,KAFD,MAEO,IAAI,CAACtC,SAAD,IAAcgB,WAAd,IAA6BU,QAAjC,EAA2C;AAChD,WAAKa,aAAL;AACD;AACF;;AA4FDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE7B,MAAAA;AAAF,QAAmB,KAAKC,KAA9B;;AACA,QAAI,KAAKf,KAAL,CAAWC,QAAX,CAAoBI,OAApB,CAA4BC,OAA5B,CAAoCsC,MAApC,KAA+C,CAAnD,EAAsD;AACpD,aACE,4BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,cAA7B;AAA4C,QAAA,KAAK,EAAE,KAAK7B,KAAL,CAAWI,WAA9D;AAA2E,QAAA,QAAQ,EAAE,KAAK0B,YAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAQ,QAAA,SAAS,EAAC,KAAlB;AAAwB,QAAA,OAAO,EAAE,KAAKC,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE,MAAC,WAAD;AAAa,QAAA,WAAW,EAAE,KAAK/B,KAAL,CAAWuB,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmD,KAAKvB,KAAL,CAAWsB,WAA9D,CAHF,CADF;AAOD;;AACD,WACE,4BACA;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGvB,YAAY,CAACN,GAAb,CAAiB,CAACuC,IAAD,EAAOrC,KAAP,KAChB;AACE,MAAA,KAAK,EAAE;AAAEsC,QAAAA,MAAM,EAAE;AAAV,OADT;AAEE,MAAA,OAAO,EAAE,MAAM,KAAKC,gBAAL,CAAsBvC,KAAtB,CAFjB;AAGE,MAAA,GAAG,EAAEA,KAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE;AACE,MAAA,SAAS,EAAC,oCADZ;AAEE,MAAA,KAAK,EAAE;AACLwC,QAAAA,KAAK,EAAEH,IAAI,CAAC/B,QAAL,GAAgB,MAAhB,GAAyB,EAD3B;AAELmC,QAAAA,WAAW,EAAEJ,IAAI,CAAC/B,QAAL,GAAgB,SAAhB,GAA4B,EAFpC;AAGLoC,QAAAA,eAAe,EAAEL,IAAI,CAAC/B,QAAL,GAAgB,SAAhB,GAA4B;AAHxC,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQG+B,IAAI,CAACR,KARR,CALF,CADD,CADH,CADA,EAqBA,MAAC,WAAD;AAAa,MAAA,WAAW,EAAE,KAAKxB,KAAL,CAAWuB,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmD,KAAKvB,KAAL,CAAWsB,WAA9D,CArBA,CADF;AAyBD;;AAzKsC;;AA4KzC,MAAMgB,WAAW,GAAG3D,MAAM,CAAC4D,CAAV;AAAA;AAAA;AAAA,oBACNtD,KAAK,IAAIA,KAAK,CAACsC,WAAN,KAAsB,MAAtB,GAA+B,KAA/B,GAAuC,OAD1C,CAAjB;AAIAzC,UAAU,CAAC0D,SAAX,GAAuB;AACrBjC,EAAAA,YAAY,EAAE/B,SAAS,CAACiE,MAAV,CAAiBC,UADV;AAErBxD,EAAAA,QAAQ,EAAEV,SAAS,CAACiE,MAAV,CAAiBC,UAFN;AAGrB9B,EAAAA,iBAAiB,EAAEpC,SAAS,CAACmE,IAAV,CAAeD,UAHb;AAIrB7B,EAAAA,WAAW,EAAErC,SAAS,CAACoE,MAAV,CAAiBF;AAJT,CAAvB;;AAOA,MAAMG,eAAe,GAAI7C,KAAD,KAAY,EAAZ,CAAxB;;AAGA,MAAM8C,kBAAkB,GAAIC,QAAD,KAAe,EAAf,CAA3B;;AAGA,eAAetE,OAAO,CAACoE,eAAD,EAAkBC,kBAAlB,CAAP,CAA6ChE,UAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport styled from 'styled-components';\nimport { addStudentLessonProblemAnswerApi } from '../../../index/api';\nimport { answerStudentLessonProblem } from '../../../index/actions';\n\nclass ProblemRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: -1,\n      problemCells: [\n        {\n          id: 0,\n          label: \"A\",\n          selected: false,\n        },\n        {\n          id: 1,\n          label: \"B\",\n          selected: false,\n        },\n        {\n          id: 2,\n          label: \"C\",\n          selected: false,\n        },\n        {\n          id: 3,\n          label: \"D\",\n          selected: false,\n        },\n      ],\n      answerChoices: [],\n      answer_text: \"\",\n      userMessage: \"\",\n      messageType: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const { question: { answer_id, answer_text, answered } } = this.props;\n    if (answer_id && !answer_text && answered) {\n      this.setAnswerChoice();\n    } else if (!answer_id && answer_text && answered) {\n      this.setAnswerText();\n    }\n  }\n\n  setAnswerChoice = () => {\n    const { question } = this.props;\n    const currentAnswerId = question.answer_id;\n    const answerChoices = question.problem.answers;\n    const currentSelection = answerChoices\n      .map((answer, index) => {\n        if (answer.id === currentAnswerId) {\n          return index;\n        }\n        return null;\n      })\n      .filter((index) => index !== null)[0];\n\n    if (typeof currentSelection !== \"number\") return;\n\n    this.setState({\n      problemCells: update(this.state.problemCells, {\n        [currentSelection]: { selected: { $set: true } },\n      }),\n      selectedIndex: currentSelection,\n    });\n  }\n\n  setAnswerText = () => {\n    const { question: { answer_text } } = this.props;\n    const setText = !answer_text ? \"\" : answer_text;\n    this.setState({ answer_text: setText });\n  }\n\n  onSaveStudentAnswer = async (updatedProblemCells, index) => {\n    const { activeLesson, question } = this.props;\n    const answerChoices = question.problem.answers;\n    this.setState({ problemCells: updatedProblemCells, selectedIndex: index });\n    const payload = {\n      student_lesson_id: activeLesson.id,\n      problem_id: question.problem.id,\n      answer_id: answerChoices[index].id,\n    };\n    const res = await addStudentLessonProblemAnswerApi(payload);\n    if (res === 202) {\n      this.props.updateProblemList(this.props.problemType, { ...question, answer_id: answerChoices[index].id, answer_text: null, answered: true });\n      return this.handleUserMessage('success');\n    }\n    return this.handleUserMessage('fail');\n  };\n\n  handleSubmit = async (e) => {\n    const { activeLesson, question } = this.props;\n    const payload = {\n      student_lesson_id: activeLesson.id,\n      problem_id: question.problem.id,\n      answer_text: this.state.answer_text,\n    };\n    // convert API call to action dispatch answerStudentLessonProblem\n    const res = await addStudentLessonProblemAnswerApi(payload);\n    if (res === 202) {\n      this.props.updateProblemList(this.props.problemType, { ...question, answer_id: null, answer_text: this.state.answer_text, answered: true });\n      return this.handleUserMessage('success');\n    }\n    return this.handleUserMessage('fail');\n  }\n\n  handleClickBadge = (index) => {\n    const currentBadge = this.state.problemCells[index];\n    const selectedIndex = this.state.selectedIndex;\n    let updatedProblemCells = this.state.problemCells;\n    if (selectedIndex === -1) {\n      updatedProblemCells = update(this.state.problemCells, {\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n    } else {\n      updatedProblemCells = update(this.state.problemCells, {\n        [selectedIndex]: { selected: { $set: false } },\n        [index]: { selected: { $set: !currentBadge.selected } },\n      });\n    }\n    this.onSaveStudentAnswer(updatedProblemCells, index);\n  };\n\n  handleChange = (e) => {\n    this.setState({ answer_text: e.target.value });\n  }\n\n  handleUserMessage = (status) => {\n    if (status === 'fail') {\n      return this.setState({ userMessage: \"Something went wrong updating student answer.\", messageType: status });\n    }\n    return this.setState({ userMessage: \"Successfully updated student answer.\", messageType: status });\n  }\n\n  render() {\n    const { problemCells } = this.state;\n    if (this.props.question.problem.answers.length === 0) {\n      return (\n        <>\n          <input type=\"text\" className=\"answer-input\" value={this.state.answer_text} onChange={this.handleChange} />\n          <button className=\"btn\" onClick={this.handleSubmit}>Submit</button>\n          <UserMessage messageType={this.state.messageType}>{this.state.userMessage}</UserMessage>\n        </>\n      );\n    }\n    return (\n      <>\n      <ul className=\"answer-list\">\n        {problemCells.map((cell, index) => (\n          <li\n            style={{ cursor: \"pointer\" }}\n            onClick={() => this.handleClickBadge(index)}\n            key={index}\n          >\n            <span\n              className=\"badge-circle badge-circle-bordered\"\n              style={{\n                color: cell.selected ? \"#fff\" : \"\",\n                borderColor: cell.selected ? \"#19b4e9\" : \"\",\n                backgroundColor: cell.selected ? \"#19b4e9\" : \"\",\n              }}\n            >\n              {cell.label}\n            </span>\n          </li>\n        ))}\n      </ul>\n      <UserMessage messageType={this.state.messageType}>{this.state.userMessage}</UserMessage>\n      </>\n    );\n  }\n}\n\nconst UserMessage = styled.p`\n  color: ${props => props.messageType === 'fail' ? \"red\" : \"green\"};\n`;\n\nProblemRow.propTypes = {\n  activeLesson: PropTypes.object.isRequired,\n  question: PropTypes.object.isRequired,\n  updateProblemList: PropTypes.func.isRequired,\n  problemType: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProblemRow);\n"]},"metadata":{},"sourceType":"module"}