{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/components/InCompleteSection.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport ProblemRow from \"./ProblemRow\";\n\nvar InCompleteReadingTest =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InCompleteReadingTest, _React$Component);\n\n  function InCompleteReadingTest(props) {\n    var _this;\n\n    _classCallCheck(this, InCompleteReadingTest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InCompleteReadingTest).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillReceiveProps\", function (nextProps) {\n      var testSection = nextProps.testSection;\n      if (!testSection || !testSection.hasOwnProperty('problems')) return;\n      var updatedProblems = update(_this.state.problems, {\n        $set: testSection.problems.problems\n      });\n\n      _this.setState({\n        problems: updatedProblems\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapProblems\", function () {\n      return _this.state.problems.map(function (problem, index) {\n        return __jsx(ProblemRow, {\n          problem: problem,\n          index: index,\n          key: problem.test_problem_id,\n          onAddStudentAnswerToTest: _this.props.onAddStudentAnswerToTest,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        });\n      });\n    });\n\n    _this.state = {\n      problems: []\n    };\n    return _this;\n  }\n\n  _createClass(InCompleteReadingTest, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          open = _this$props.open,\n          testSection = _this$props.testSection,\n          handleTestScore = _this$props.handleTestScore;\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, open && __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"full-height-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"content-section content-section-simulated\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"content-section-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-full-height card-student card-main-full card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"custom-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"jcf-scrollable no-border height-window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, __jsx(\"ol\", {\n        className: \"answers-list answers-list-columns\",\n        style: {\n          marginBottom: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, testSection && testSection.problems && this.mapProblems()))))), __jsx(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"btn-holder right-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        href: \"#\",\n        className: \"btn btn-xlarge waves-effect waves-light bg-blue\",\n        onClick: function onClick() {\n          return handleTestScore(_this2.props.testSection);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Score Test\"))))))));\n    }\n  }]);\n\n  return InCompleteReadingTest;\n}(React.Component);\n\nInCompleteReadingTest.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n  testSection: PropTypes.object.isRequired,\n  onStudentTestScore: PropTypes.func.isRequired,\n  handleTestScore: PropTypes.func.isRequired\n};\nexport default InCompleteReadingTest;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/components/InCompleteSection.js"],"names":["React","update","PropTypes","ProblemRow","InCompleteReadingTest","props","nextProps","testSection","hasOwnProperty","updatedProblems","state","problems","$set","setState","map","problem","index","test_problem_id","onAddStudentAnswerToTest","open","handleTestScore","marginBottom","mapProblems","Component","propTypes","bool","isRequired","func","object","onStudentTestScore"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport ProblemRow from \"./ProblemRow\";\n\nclass InCompleteReadingTest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      problems: [],\n    };\n  }\n  componentWillReceiveProps = nextProps => {\n    const { testSection } = nextProps;\n    if (!testSection || !testSection.hasOwnProperty('problems')) return;\n    const updatedProblems = update(this.state.problems, {\n      $set: testSection.problems.problems,\n    });\n    this.setState({\n      problems: updatedProblems,\n    });\n  };\n\n  mapProblems = () =>\n    this.state.problems.map((problem, index) => (\n      <ProblemRow\n        problem={problem}\n        index={index}\n        key={problem.test_problem_id}\n        onAddStudentAnswerToTest={this.props.onAddStudentAnswerToTest}\n      />\n    ));\n\n  render() {\n    const {\n      open,\n      testSection,\n      handleTestScore,\n    } = this.props;\n    return (\n      <div>\n        {open && (\n          <React.Fragment>\n            <div className=\"full-height-section\">\n              <div className=\"content-section content-section-simulated\">\n                <div className=\"content-section-holder\">\n                  <div className=\"card-full-height card-student card-main-full card\">\n                    <div className=\"card-content\">\n                      <div className=\"custom-form\">\n                        <div className=\"jcf-scrollable no-border height-window\">\n                          <ol\n                            className=\"answers-list answers-list-columns\"\n                            style={{ marginBottom: \"20px\" }}\n                          >\n                            {testSection && testSection.problems && this.mapProblems()}\n                          </ol>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"btn-holder right-align\">\n                      <a\n                        href=\"#\"\n                        className=\"btn btn-xlarge waves-effect waves-light bg-blue\"\n                        onClick={() => handleTestScore(this.props.testSection)}\n                      >\n                        Score Test\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nInCompleteReadingTest.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n  testSection: PropTypes.object.isRequired,\n  onStudentTestScore: PropTypes.func.isRequired,\n  handleTestScore: PropTypes.func.isRequired,\n};\n\nexport default InCompleteReadingTest;\n"]},"metadata":{},"sourceType":"module"}