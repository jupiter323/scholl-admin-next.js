{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2'; // import { data, subjectMap, testSectionCardColorMap, graphColorMap } from '../../../utils/testSectionCardUtils';\n\nexport const data = percentage => ({\n  datasets: [{\n    data: [percentage, 100 - percentage],\n    backgroundColor: ['#00bbf7', '#eaeaea']\n  }]\n});\n\nclass TestCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleDropdownClick\", event => {\n      const {\n        onSetDropdown,\n        onCloseDropdown,\n        dropdownIsOpen,\n        index\n      } = this.props;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    _defineProperty(this, \"mapTestSubjects\", () => {\n      const {\n        test,\n        futureTest\n      } = this.props;\n      const {\n        subjects\n      } = test;\n      return subjects.map((subject, index) => __jsx(\"div\", {\n        className: \"chart-block chart-block-test\",\n        key: index\n      }, !futureTest ? [__jsx(Doughnut, {\n        data: () => data(subjects.length ? subject.currentScore / subject.targetScore * 100 : 0),\n        height: 104,\n        width: 104,\n        options: {\n          cutoutPercentage: 80\n        },\n        key: \"0\"\n      }), __jsx(\"span\", {\n        className: \"value-max\",\n        style: {\n          top: '0px'\n        },\n        key: \"1\"\n      }, subject.targetScore)] : [__jsx(\"span\", {\n        className: \"value-max\",\n        key: \"0\"\n      }, subject.targetScore), __jsx(\"div\", {\n        className: \"js-donut-chart\",\n        \"data-stroke-width\": \"15\",\n        \"data-source\": \"./inc/score-data-test-reading.json\",\n        key: \"1\"\n      })], __jsx(\"div\", {\n        className: \"chart-text\"\n      }, subject.subject === 'Reading & Writing' && !futureTest ? __jsx(\"span\", {\n        className: \"title\"\n      }, \"Reading \", __jsx(\"br\", null), \" & Writing\") : __jsx(\"span\", {\n        className: \"title\"\n      }, subject.subject), __jsx(\"span\", {\n        className: \"value\"\n      }, subject.currentScore), __jsx(\"span\", {\n        className: \"description\"\n      }, \"+\", subject.totalGain))));\n    });\n  }\n\n  render() {\n    const {\n      test,\n      futureTest = false,\n      dropdownIndex,\n      index,\n      dropdownIsOpen,\n      onEnterAnswers,\n      onEditTest,\n      onDownloadReport,\n      onDeleteTest,\n      openTestScores\n    } = this.props;\n    const {\n      title,\n      version = '',\n      testDate,\n      weekNumber,\n      initialScore,\n      targetScore,\n      currentScore\n    } = test;\n    return __jsx(\"div\", {\n      className: \"col s12 m8 l7 xl5\"\n    }, __jsx(\"div\", {\n      className: \"card-main-col\"\n    }, __jsx(\"div\", {\n      className: futureTest ? 'card-test card-main card-disabled card' : 'card-test card-main card'\n    }, __jsx(\"div\", {\n      className: \"card-content\"\n    }, __jsx(\"div\", {\n      className: \" card-panel-row row mb-0\"\n    }, __jsx(\"div\", {\n      className: \"col s7\"\n    }, __jsx(\"div\", {\n      className: \"card-title-block\",\n      style: {\n        marginTop: !futureTest ? '-30px' : '-50px'\n      }\n    }, __jsx(\"h4\", {\n      className: \"h2\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => openTestScores({\n        index\n      })\n    }, title)), __jsx(\"time\", {\n      className: \"date\",\n      style: {\n        marginBottom: futureTest ? '20px' : ''\n      }\n    }, testDate, \" (week \", weekNumber, \")\"), !futureTest ? __jsx(\"p\", null, \"Version \", version) : null), __jsx(\"div\", {\n      className: \"chart-container chart-container-test\"\n    }, __jsx(\"div\", {\n      className: \"chart-holder\"\n    }, __jsx(\"span\", {\n      className: \"svg-curved-bar\"\n    }, __jsx(Doughnut, {\n      data: () => data(initialScore ? Number((currentScore - initialScore) / (targetScore - initialScore)) * 100 : 0),\n      options: {\n        circumference: 1 * Math.PI,\n        rotation: 1 * Math.PI,\n        cutoutPercentage: 60,\n        tooltips: false\n      }\n    }), __jsx(\"span\", {\n      className: \"js-diff-holder\"\n    }, __jsx(\"span\", {\n      className: \"js-diff\"\n    }, __jsx(\"span\", {\n      className: \"txt\",\n      style: {\n        opacity: '1',\n        bottom: '75px',\n        color: 'black',\n        fontWeight: '600',\n        fontSize: '12px'\n      }\n    }, \"+\", currentScore - initialScore)))), __jsx(\"span\", {\n      className: \"chart-value\",\n      style: {\n        backgroundColor: '#00bbf7'\n      }\n    }, __jsx(\"span\", {\n      \"data-count-up\": true,\n      \"data-start-val\": \"1100\",\n      \"data-end-val\": \"1210\",\n      \"data-duration\": \"1\"\n    }, currentScore))), __jsx(\"div\", {\n      className: \"chart-row\"\n    }, __jsx(\"div\", {\n      className: \"chart-col chart-start\"\n    }, __jsx(\"span\", {\n      className: \"amount\"\n    }, initialScore), \" \", __jsx(\"br\", null), __jsx(\"span\", {\n      className: \"amount-text\"\n    }, \"initial\")), __jsx(\"div\", {\n      className: \"chart-col chart-end\"\n    }, __jsx(\"span\", {\n      className: \"amount\"\n    }, targetScore), \" \", __jsx(\"br\", null), __jsx(\"span\", {\n      className: \"amount-text\"\n    }, \"target\"))))), __jsx(\"div\", {\n      className: \"col s5 right-align\"\n    }, __jsx(\"div\", {\n      className: \"row icons-row\",\n      style: {\n        marginBottom: '10px'\n      }\n    }, __jsx(\"div\", {\n      className: \"dropdown-block col\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"dropdown01\",\n      className: \"dropdown-trigger btn\",\n      onClick: this.handleDropdownClick\n    }, __jsx(\"i\", {\n      className: \"material-icons dots-icon\"\n    }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? __jsx(\"ul\", {\n      id: \"dropdown01\",\n      className: \"dropdown-content\",\n      style: {\n        display: 'block',\n        transformOrigin: '0px 0px 0px',\n        opacity: '1',\n        transform: 'scaleX(1) scaleY(1)'\n      }\n    }, __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onEnterAnswers\n    }, \"Enter Answers\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onEditTest\n    }, \"Edit\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onDownloadReport,\n      className: \"disabled\"\n    }, \"Download Report\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onDeleteTest,\n      className: \"red-text text-darken-3\"\n    }, \"Delete\"))) : null)), this.mapTestSubjects()))))));\n  }\n\n}\n\nTestCard.propTypes = {\n  index: PropTypes.number,\n  futureTest: PropTypes.bool,\n  dropdownIndex: PropTypes.number,\n  test: PropTypes.object.isRequired,\n  onEditTest: PropTypes.func.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onEnterAnswers: PropTypes.func.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onDownloadReport: PropTypes.func.isRequired,\n  openTestScores: PropTypes.func.isRequired\n};\nexport default TestCard;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/DetailTestList/components/TestCard/index.js"],"names":["React","PropTypes","Doughnut","data","percentage","datasets","backgroundColor","TestCard","Component","event","onSetDropdown","onCloseDropdown","dropdownIsOpen","index","props","preventDefault","test","futureTest","subjects","map","subject","length","currentScore","targetScore","cutoutPercentage","top","totalGain","render","dropdownIndex","onEnterAnswers","onEditTest","onDownloadReport","onDeleteTest","openTestScores","title","version","testDate","weekNumber","initialScore","marginTop","marginBottom","Number","circumference","Math","PI","rotation","tooltips","opacity","bottom","color","fontWeight","fontSize","handleDropdownClick","display","transformOrigin","transform","mapTestSubjects","propTypes","number","bool","object","isRequired","func"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\n// import { data, subjectMap, testSectionCardColorMap, graphColorMap } from '../../../utils/testSectionCardUtils';\n\nexport const data = (percentage) => ({\n  datasets: [{\n    data: [percentage, 100 - percentage],\n    backgroundColor: [\n      '#00bbf7',\n      '#eaeaea',\n    ],\n  }],\n});\n\nclass TestCard extends React.Component {\n  handleDropdownClick = (event) => {\n    const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  }\n\n  mapTestSubjects = () => {\n    const { test, futureTest } = this.props;\n    const { subjects } = test;\n    return subjects.map((subject, index) => (\n      <div className=\"chart-block chart-block-test\" key={index}>\n        <Choose>\n          <When condition={!futureTest}>\n        <Doughnut\n          data={() => data(subjects.length ? ((subject.currentScore) / (subject.targetScore) * 100) : 0)}\n          height={104}\n          width={104}\n          options={{\n            cutoutPercentage: 80,\n          }}\n          />\n        <span className=\"value-max\" style={{top: '0px'}}>{subject.targetScore}</span>\n          </When>\n          <Otherwise>\n          <span className=\"value-max\">{subject.targetScore}</span>\n        <div className=\"js-donut-chart\" data-stroke-width=\"15\" data-source='./inc/score-data-test-reading.json'></div>\n          </Otherwise>\n        </Choose>\n        <div className=\"chart-text\">\n          <Choose>\n            <When condition={subject.subject === 'Reading & Writing' && !futureTest}>\n              <span className=\"title\">Reading <br /> &amp; Writing</span>\n            </When>\n            <Otherwise>\n              <span className=\"title\">{subject.subject}</span>\n            </Otherwise>\n          </Choose>\n          <span className=\"value\">{subject.currentScore}</span>\n          <span className=\"description\">+{subject.totalGain}</span>\n        </div>\n      </div>\n    ));\n  }\n\n  render() {\n    const { test, futureTest = false, dropdownIndex, index, dropdownIsOpen, onEnterAnswers, onEditTest, onDownloadReport, onDeleteTest, openTestScores } = this.props;\n    const { title, version = '', testDate, weekNumber, initialScore, targetScore, currentScore } = test;\n    return (\n      <div className=\"col s12 m8 l7 xl5\">\n        <div className=\"card-main-col\">\n          <div className={futureTest ? 'card-test card-main card-disabled card' : 'card-test card-main card'}>\n            <div className=\"card-content\">\n\n              <div className=\" card-panel-row row mb-0\">\n                <div className=\"col s7\">\n                  <div className=\"card-title-block\" style={{marginTop: !futureTest ? '-30px' : '-50px'  }}>\n                 <h4 className=\"h2\" ><a href=\"#\" onClick={() => openTestScores({index})}>{title}</a></h4>\n                    <time className=\"date\" style={{marginBottom: futureTest ? '20px' : ''}}>{testDate} (week {weekNumber})</time>\n                    <If condition={!futureTest}>\n                      <p>Version {version}</p>\n                    </If>\n                  </div>\n                  <div className=\"chart-container chart-container-test\">\n                    <div className=\"chart-holder\">\n                      <span className=\"svg-curved-bar\">\n                        <Doughnut\n                          data={() => (data(initialScore ? Number((currentScore-initialScore)/(targetScore-initialScore)) * 100 : 0 ))}\n                          options={{\n                            circumference: 1 * Math.PI,\n                            rotation: 1 * Math.PI,\n                            cutoutPercentage: 60,\n                            tooltips: false,\n                          }}\n                        />\n                        <span className=\"js-diff-holder\">\n                          <span className=\"js-diff\">\n                            <span className=\"txt\" style={{ opacity: '1', bottom: '75px', color: 'black', fontWeight: '600', fontSize: '12px' }}>+{currentScore - initialScore}</span>\n                          </span>\n                        </span>\n                      </span>\n                      <span className=\"chart-value\" style={{ backgroundColor: '#00bbf7' }}><span data-count-up data-start-val=\"1100\" data-end-val=\"1210\" data-duration=\"1\">{currentScore}</span></span>\n                    </div>\n                    <div className=\"chart-row\">\n                      <div className=\"chart-col chart-start\">\n                        <span className=\"amount\">{initialScore}</span> <br />\n                        <span className=\"amount-text\">initial</span>\n                      </div>\n                      <div className=\"chart-col chart-end\">\n                        <span className=\"amount\">{targetScore}</span> <br />\n                        <span className=\"amount-text\">target</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col s5 right-align\">\n                <div className=\"row icons-row\" style={{marginBottom: '10px'}}>\n                    <div className=\"dropdown-block col\">\n                      <a\n                        href='#'\n                        data-target='dropdown01'\n                        className='dropdown-trigger btn'\n                        onClick={this.handleDropdownClick}\n                      >\n                        <i className=\"material-icons dots-icon\">more_vert</i>\n                      </a>\n                      <If condition={dropdownIsOpen && dropdownIndex === index}>\n                        <ul\n                          id='dropdown01'\n                          className='dropdown-content'\n                          style={{ display: 'block', transformOrigin: '0px 0px 0px', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}\n                        >\n                          <li><a href=\"#\" onClick={onEnterAnswers}>Enter Answers</a></li>\n                          <li><a href=\"#\" onClick={onEditTest}>Edit</a></li>\n                          <li><a href=\"#\" onClick={onDownloadReport} className=\"disabled\">Download Report</a></li>\n                          <li><a href=\"#\" onClick={onDeleteTest} className=\"red-text text-darken-3\">Delete</a></li>\n                        </ul>\n                      </If>\n                    </div>\n                  </div>\n                  {this.mapTestSubjects()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nTestCard.propTypes = {\n  index: PropTypes.number,\n  futureTest: PropTypes.bool,\n  dropdownIndex: PropTypes.number,\n  test: PropTypes.object.isRequired,\n  onEditTest: PropTypes.func.isRequired,\n  onDeleteTest: PropTypes.func.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onEnterAnswers: PropTypes.func.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onDownloadReport: PropTypes.func.isRequired,\n  openTestScores: PropTypes.func.isRequired,\n};\n\nexport default TestCard;"]},"metadata":{},"sourceType":"module"}