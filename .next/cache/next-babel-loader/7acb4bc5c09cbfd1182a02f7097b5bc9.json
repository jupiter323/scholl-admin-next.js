{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\nimport Portal from '../../../../Portal';\nimport ClickOffComponentWrapper from '../../../../ClickOffComponentWrapper';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nvar sampleVersions = [{\n  label: 'SAT Practice Test #1',\n  value: 'SAT Practice Test #1'\n}, {\n  label: 'SAT Practice Test #2',\n  value: 'SAT Practice Test #2'\n}, {\n  label: 'SAT Practice Test #3',\n  value: 'SAT Practice Test #3'\n}];\n\nvar AssignSimulatedSatModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AssignSimulatedSatModal, _React$Component);\n\n  function AssignSimulatedSatModal(props) {\n    var _this;\n\n    _classCallCheck(this, AssignSimulatedSatModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AssignSimulatedSatModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onResetModal\", function () {\n      return _this.setState({\n        version: '',\n        assignDate: '',\n        assignTime: '',\n        dueDate: '',\n        dueTime: '',\n        sections: [],\n        allowStudentToEnterAnswers: false,\n        includeScoreInImprovementMetrics: false,\n        timed: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseModal\", function () {\n      var onClose = _this.props.onClose;\n      onClose();\n\n      _this.onResetModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"assignSimulatedSat\", function () {\n      var onAssignSimulatedSat = _this.props.onAssignSimulatedSat;\n      var _this$state = _this.state,\n          version = _this$state.version,\n          unformattedAssignDate = _this$state.assignDate,\n          unformattedAssignTime = _this$state.assignTime,\n          unformattedDueDate = _this$state.dueDate,\n          unformattedDueTime = _this$state.dueTime,\n          sections = _this$state.sections,\n          allowStudentToEnterAnswers = _this$state.allowStudentToEnterAnswers,\n          includeScoreInImprovementMetrics = _this$state.includeScoreInImprovementMetrics,\n          timed = _this$state.timed;\n      var assignDate = moment(unformattedAssignDate).format('MM/DD/YY');\n      var assignTime = moment(unformattedAssignTime).format('hh:mm');\n      var dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n      var dueTime = moment(unformattedDueTime).format('hh:mm');\n      onAssignSimulatedSat({\n        version: version,\n        assignDate: assignDate,\n        assignTime: assignTime,\n        dueDate: dueDate,\n        dueTime: dueTime,\n        sections: sections,\n        allowStudentToEnterAnswers: allowStudentToEnterAnswers,\n        includeScoreInImprovementMetrics: includeScoreInImprovementMetrics,\n        timed: timed\n      });\n\n      _this.onResetModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDetailsChange\", function (event) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (event.target) {\n        var checkboxName = event.target.name;\n        var prevState = _this.state[checkboxName];\n\n        _this.setState(_defineProperty({}, checkboxName, !prevState));\n      } else {\n        _this.setState(_defineProperty({}, name, event));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSectionsChange\", function (event) {\n      var sections = _this.state.sections;\n\n      if (sections.indexOf(event.target.name) === -1) {\n        var updatedSections = update(sections, {\n          $push: [event.target.name]\n        });\n\n        _this.setState({\n          sections: updatedSections\n        });\n      } else {\n        var sectionIndex = sections.indexOf(event.target.name);\n\n        var _updatedSections = update(sections, {\n          $splice: [[sectionIndex, 1]]\n        });\n\n        _this.setState({\n          sections: _updatedSections\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDatePickerChange\", function (field, value) {\n      return _this.setState(_defineProperty({}, field, value));\n    });\n\n    _this.state = {\n      version: '',\n      assignDate: '',\n      assignTime: '',\n      dueDate: '',\n      dueTime: '',\n      sections: [],\n      allowStudentToEnterAnswers: false,\n      includeScoreInImprovementMetrics: false,\n      timed: false\n    };\n    return _this;\n  }\n\n  _createClass(AssignSimulatedSatModal, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var modalDate = this.props.modalDate;\n\n      if (prevState.assignDate === '' && modalDate) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          assignDate: new Date(modalDate)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var open = this.props.open;\n      var _this$state2 = this.state,\n          version = _this$state2.version,\n          assignDate = _this$state2.assignDate,\n          assignTime = _this$state2.assignTime,\n          dueDate = _this$state2.dueDate,\n          dueTime = _this$state2.dueTime,\n          sections = _this$state2.sections,\n          allowStudentToEnterAnswers = _this$state2.allowStudentToEnterAnswers,\n          includeScoreInImprovementMetrics = _this$state2.includeScoreInImprovementMetrics,\n          timed = _this$state2.timed;\n      return React.createElement(Portal, {\n        selector: \"#modal\"\n      }, open && React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"overlay\"\n      }, React.createElement(ClickOffComponentWrapper, {\n        onOuterClick: this.onCloseModal\n      }, React.createElement(\"div\", {\n        id: \"modal_assign_simulated_sat\",\n        className: \"jsx-1100509129\" + \" \" + \"modal modal-custom modal-calendar\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"card-modal card\"\n      }, React.createElement(\"div\", {\n        style: {\n          backgroundColor: '#ec3330',\n          color: '#fff'\n        },\n        className: \"jsx-1100509129\" + \" \" + \"card-panel card-panel-title\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"card-panel-row row\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"col\"\n      }, React.createElement(\"h2\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"span\", {\n        className: \"jsx-1100509129\" + \" \" + \"heading-holder\"\n      }, React.createElement(\"i\", {\n        className: \"jsx-1100509129\" + \" \" + \"icon-circles\"\n      }), React.createElement(\"span\", {\n        className: \"jsx-1100509129\" + \" \" + \"heading-block\"\n      }, \" New Scored SAT Test\")))), React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"col right-align\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.onCloseModal,\n        className: \"jsx-1100509129\" + \" \" + \"panel-link close modal-close\"\n      }, React.createElement(\"i\", {\n        className: \"jsx-1100509129\" + \" \" + \"icon-close-thin\"\n      }))))), React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"card-body\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"modal-row row\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"col s12\"\n      }, React.createElement(\"div\", {\n        style: {\n          marginBottom: '0',\n          marginTop: '0'\n        },\n        className: \"jsx-1100509129\" + \" \" + \"input-field\"\n      }, React.createElement(Dropdown, {\n        value: getValueFromState(version, sampleVersions),\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'version');\n        },\n        options: sampleVersions,\n        name: \"version\",\n        label: \"Version\",\n        stateKey: \"version\",\n        dropdownKey: \"version\"\n      })))), React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"modal-row row\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"datepicker-field input-field\"\n      }, React.createElement(\"i\", {\n        className: \"jsx-1100509129\" + \" \" + \"icon-calendar\"\n      }), React.createElement(DatePicker, {\n        selected: assignDate,\n        dateFormat: \"MM/dd/yy\",\n        id: \"assignDate\",\n        name: \"assignDate\",\n        onChange: function onChange(event) {\n          return _this2.handleDatePickerChange('assignDate', event);\n        }\n      }), React.createElement(\"label\", {\n        htmlFor: \"new_test_section_assign_date\",\n        className: \"jsx-1100509129\" + \" \" + ((assignDate ? 'label active' : 'label') || \"\")\n      }, \"Assign For\"))), React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"datepicker-field input-field\"\n      }, React.createElement(\"i\", {\n        className: \"jsx-1100509129\" + \" \" + \"icon-clock2\"\n      }), React.createElement(DatePicker, {\n        selected: assignTime,\n        showTimeSelect: true,\n        showTimeSelectOnly: true,\n        timeIntervals: 15,\n        dateFormat: \"h:mm aa\",\n        timeCaption: \"Time\",\n        id: \"assignTime\",\n        name: \"assignTime\",\n        onChange: function onChange(event) {\n          return _this2.handleDatePickerChange('assignTime', event);\n        }\n      }), React.createElement(\"label\", {\n        htmlFor: \"assignTime\",\n        className: \"jsx-1100509129\" + \" \" + ((assignTime ? 'label active' : 'label') || \"\")\n      }, \"Time\")))), React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"modal-row row\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"datepicker-field input-field\"\n      }, React.createElement(\"i\", {\n        className: \"jsx-1100509129\" + \" \" + \"icon-calendar\"\n      }), React.createElement(DatePicker, {\n        selected: dueDate,\n        dateFormat: \"MM/dd/yy\",\n        id: \"dueDate\",\n        name: \"dueDate\",\n        onChange: function onChange(event) {\n          return _this2.handleDatePickerChange('dueDate', event);\n        }\n      }), React.createElement(\"label\", {\n        htmlFor: \"dueDate\",\n        className: \"jsx-1100509129\" + \" \" + ((dueDate ? 'label active' : 'label') || \"\")\n      }, \"Due (optional)\"))), React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"datepicker-field input-field\"\n      }, React.createElement(\"i\", {\n        className: \"jsx-1100509129\" + \" \" + \"icon-clock2\"\n      }), React.createElement(DatePicker, {\n        selected: dueTime,\n        showTimeSelect: true,\n        showTimeSelectOnly: true,\n        timeIntervals: 15,\n        dateFormat: \"h:mm aa\",\n        timeCaption: \"Time\",\n        id: \"dueTime\",\n        name: \"dueTime\",\n        onChange: function onChange(event) {\n          return _this2.handleDatePickerChange('dueTime', event);\n        }\n      }), React.createElement(\"label\", {\n        htmlFor: \"dueTime\",\n        className: \"jsx-1100509129\" + \" \" + ((dueTime ? 'label active' : 'label') || \"\")\n      }, \"Time\")))), React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"modal-row row\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"col s12\"\n      }, React.createElement(\"span\", {\n        className: \"jsx-1100509129\" + \" \" + \"card-subtitle\"\n      }, \"Sections:\"), React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"check-holder\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"col s6\"\n      }, React.createElement(\"p\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"label\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"Reading\",\n        id: \"reading\",\n        checked: sections.indexOf('Reading') !== -1,\n        onChange: this.handleSectionsChange,\n        className: \"jsx-1100509129\" + \" \" + \"filled-in\"\n      }), React.createElement(\"span\", {\n        className: \"jsx-1100509129\"\n      }, \"Reading\"))), React.createElement(\"p\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"label\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"Math (no calc)\",\n        id: \"mathNoCalc\",\n        checked: sections.indexOf('Math (no calc)') !== -1,\n        onChange: this.handleSectionsChange,\n        className: \"jsx-1100509129\" + \" \" + \"filled-in\"\n      }), React.createElement(\"span\", {\n        className: \"jsx-1100509129\"\n      }, \"Math (no calc)\")))), React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"col s6\"\n      }, React.createElement(\"p\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"label\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"Writing\",\n        id: \"writing\",\n        checked: sections.indexOf('Writing') !== -1,\n        onChange: this.handleSectionsChange,\n        className: \"jsx-1100509129\" + \" \" + \"filled-in\"\n      }), React.createElement(\"span\", {\n        className: \"jsx-1100509129\"\n      }, \"Writing\"))), React.createElement(\"p\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"label\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"Math (calculator)\",\n        id: \"Math (calculator)\",\n        checked: sections.indexOf('Math (calculator)') !== -1,\n        onChange: this.handleSectionsChange,\n        className: \"jsx-1100509129\" + \" \" + \"filled-in\"\n      }), React.createElement(\"span\", {\n        className: \"jsx-1100509129\"\n      }, \"Math (calculator)\"))))), React.createElement(\"span\", {\n        className: \"jsx-1100509129\" + \" \" + \"card-note\"\n      }, \"Note: scaled test scores may require combinations of sections\")), React.createElement(\"p\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"label\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"allowStudentToEnterAnswers\",\n        id: \"allowStudentToEnterAnswers\",\n        checked: allowStudentToEnterAnswers,\n        onChange: this.handleDetailsChange,\n        className: \"jsx-1100509129\" + \" \" + \"filled-in\"\n      }), React.createElement(\"span\", {\n        className: \"jsx-1100509129\"\n      }, \"Allow Student to Enter Answers\"))), React.createElement(\"p\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"label\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"includeScoreInImprovementMetrics\",\n        id: \"includeScoreInImprovementMetrics\",\n        checked: includeScoreInImprovementMetrics,\n        onChange: this.handleDetailsChange,\n        className: \"jsx-1100509129\" + \" \" + \"filled-in\"\n      }), React.createElement(\"span\", {\n        className: \"jsx-1100509129\"\n      }, \"Include Score in Improvement Metrics\"))), React.createElement(\"p\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"label\", {\n        className: \"jsx-1100509129\"\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"timed\",\n        id: \"timed\",\n        checked: timed,\n        onChange: this.handleDetailsChange,\n        className: \"jsx-1100509129\" + \" \" + \"filled-in\"\n      }), React.createElement(\"span\", {\n        className: \"jsx-1100509129\"\n      }, \"Timed\")))))), React.createElement(\"div\", {\n        className: \"jsx-1100509129\" + \" \" + \"modal-footer modal-footer-width\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.onCloseModal,\n        className: \"jsx-1100509129\" + \" \" + \"modal-close waves-effect waves-teal btn-flat pink-text text-darken-1\"\n      }, \"Cancel\"), React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.assignSimulatedSat,\n        className: \"jsx-1100509129\" + \" \" + \"link-btn waves-effect waves-teal btn-flat\"\n      }, \"Save\"))))))), React.createElement(_JSXStyle, {\n        id: \"1100509129\"\n      }, [\".overlay.jsx-1100509129{position:fixed;background-color:rgba(0,0,0,0.7);top:0;right:0;bottom:0;left:0;z-index:999;}\", \".card-modal.jsx-1100509129{margin:0;border-radius:6px;}\", \".modal.jsx-1100509129{display:block;background-color:white;position:absolute;top:10%;right:10%;left:10%;box-shadow:0 24px 38px 3px rgba(0,0,0,0.14),0 9px 46px 8px rgba(0,0,0,0.12),0 11px 15px -7px rgba(0,0,0,0.2);}\", \".modal-custom.jsx-1100509129{opacity:1;visibility:visible;}\"]));\n    }\n  }]);\n\n  return AssignSimulatedSatModal;\n}(React.Component);\n\nexport default AssignSimulatedSatModal;","map":null,"metadata":{},"sourceType":"module"}