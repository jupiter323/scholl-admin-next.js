{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\nvar bubbleType = {\n  red: {\n    position: 'relative',\n    color: '#fff',\n    borderColor: '#fff',\n    border: '1px solid',\n    backgroundColor: '#db1d41',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  greenFilled: {\n    position: 'relative',\n    color: '#fff',\n    borderColor: '#32955c',\n    border: '1px solid',\n    backgroundColor: '#32955c',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  greenBorderOnly: {\n    position: 'relative',\n    color: '#32955c',\n    borderColor: '#32955c',\n    border: '1px solid',\n    backgroundColor: '#fff',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  },\n  plain: {\n    position: 'relative',\n    color: '#a6a8ab',\n    border: '1px solid',\n    borderColor: '#a6a8ab',\n    height: '19px',\n    width: '19px',\n    borderRadius: '50%'\n  }\n};\n\nvar AnswerRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnswerRow, _React$Component);\n\n  function AnswerRow(props) {\n    var _this;\n\n    _classCallCheck(this, AnswerRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnswerRow).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var _this$props = _this.props,\n          index = _this$props.index,\n          sampleAnswers = _this$props.sampleAnswers;\n      var _sampleAnswers$index = sampleAnswers[index],\n          studentChoice = _sampleAnswers$index.studentChoice,\n          answer = _sampleAnswers$index.answer;\n\n      _this.setState({\n        selectedAnswer: studentChoice\n      });\n\n      if (studentChoice === answer) {\n        _this.setState({\n          correct: true\n        });\n      } // this.checkIfCorrect();\n      // update counter on writing page\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOpenQuestionModal\", function () {\n      return _this.setState({\n        open: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseQuestionModal\", function () {\n      return _this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBubbleChange\", function (event) {\n      _this.setState({\n        selectedAnswer: event.target.value\n      }, function () {\n        return _this.checkIfCorrect();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkIfCorrect\", function () {\n      var _this$props2 = _this.props,\n          sampleAnswers = _this$props2.sampleAnswers,\n          index = _this$props2.index;\n      var selectedAnswer = _this.state.selectedAnswer;\n      console.log('clicked', _this.state.selectedAnswer);\n\n      if (selectedAnswer === sampleAnswers[index].answer) {\n        _this.setState({\n          correct: true\n        });\n      } else {\n        _this.setState({\n          correct: false\n        });\n      } // update counter on writing page\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapLetterBubbles\", function (_ref) {\n      var index = _ref.index;\n      var letters = [\"A\", \"B\", \"C\", \"D\"];\n      var sampleAnswers = _this.props.sampleAnswers;\n      var _sampleAnswers$index2 = sampleAnswers[index],\n          studentChoice = _sampleAnswers$index2.studentChoice,\n          answer = _sampleAnswers$index2.answer;\n\n      if (studentChoice === \"\") {\n        return letters.map(function (letter) {\n          return _this.renderInput(letter, bubbleType.plain);\n        });\n      }\n\n      return letters.map(function (letter) {\n        if (letter === answer && letter === studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter\n          }, React.createElement(\"input\", {\n            type: \"radio\",\n            id: letter,\n            name: letter,\n            value: letter,\n            checked: _this.state.selectedAnswer === letter,\n            onChange: _this.handleBubbleChange\n          }), React.createElement(\"label\", {\n            htmlFor: letter,\n            style: bubbleType.greenFilled\n          }, React.createElement(\"span\", {\n            style: {\n              marginTop: '2px',\n              display: 'block',\n              paddingLeft: \"4.5px\"\n            }\n          }, letter)));\n        }\n\n        if (letter === answer && letter !== studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter\n          }, React.createElement(\"input\", {\n            type: \"radio\",\n            id: letter,\n            name: letter,\n            value: letter,\n            checked: _this.state.selectedAnswer === letter,\n            onChange: _this.handleBubbleChange\n          }), React.createElement(\"label\", {\n            htmlFor: letter,\n            style: bubbleType.greenBorderOnly\n          }, React.createElement(\"span\", {\n            style: {\n              marginTop: '2px',\n              display: 'block',\n              paddingLeft: \"4.5px\"\n            }\n          }, letter)));\n        }\n\n        if (letter !== answer && letter === studentChoice) {\n          return React.createElement(\"li\", {\n            key: letter\n          }, React.createElement(\"input\", {\n            type: \"radio\",\n            id: letter,\n            name: letter,\n            value: letter,\n            checked: _this.state.selectedAnswer === letter,\n            onChange: _this.handleBubbleChange\n          }), React.createElement(\"label\", {\n            htmlFor: letter,\n            style: bubbleType.red\n          }, React.createElement(\"span\", {\n            style: {\n              marginTop: '2px',\n              display: 'block',\n              paddingLeft: \"4.5px\"\n            }\n          }, letter)));\n        }\n\n        return React.createElement(\"li\", {\n          key: letter\n        }, React.createElement(\"input\", {\n          type: \"radio\",\n          id: letter,\n          name: letter,\n          value: letter,\n          checked: _this.state.selectedAnswer === letter,\n          onChange: _this.handleBubbleChange\n        }), React.createElement(\"label\", {\n          htmlFor: letter,\n          style: bubbleType.plain\n        }, React.createElement(\"span\", {\n          style: {\n            display: 'block',\n            marginTop: '2px',\n            paddingLeft: \"4.5px\"\n          }\n        }, letter)));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapNumberBubbles\", function (_ref2) {\n      var index = _ref2.index;\n      var sampleAnswers = _this.props.sampleAnswers;\n      var _sampleAnswers$index3 = sampleAnswers[index],\n          answer = _sampleAnswers$index3.answer,\n          studentChoice = _sampleAnswers$index3.studentChoice;\n\n      if (answer === studentChoice) {\n        return React.createElement(\"li\", {\n          key: answer\n        }, React.createElement(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: {\n            color: '#fff',\n            borderColor: '#32955c',\n            backgroundColor: '#3eb777'\n          }\n        }, answer));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", {\n        key: studentChoice\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#fff',\n          borderColor: '#ad1e3e',\n          backgroundColor: '#db1d41'\n        }\n      }, studentChoice)), React.createElement(\"li\", {\n        key: answer\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: {\n          color: '#32955c',\n          borderColor: '#32955c',\n          backgroundColor: '#fff'\n        }\n      }, answer)));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderInput\", function (letter, style) {\n      return React.createElement(\"li\", {\n        key: letter\n      }, React.createElement(\"form\", null, React.createElement(\"input\", {\n        type: \"radio\",\n        id: letter,\n        name: letter,\n        value: letter,\n        checked: _this.state.selectedAnswer === letter,\n        onChange: _this.handleBubbleChange\n      }), React.createElement(\"label\", {\n        htmlFor: letter,\n        style: style\n      }, React.createElement(\"span\", {\n        style: {\n          display: 'block',\n          marginTop: '2px',\n          paddingLeft: \"4.5px\"\n        }\n      }, letter))));\n    });\n\n    _this.state = {\n      open: false,\n      selectedAnswer: \"\",\n      correct: false\n    };\n    return _this;\n  }\n\n  _createClass(AnswerRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          index = _this$props3.index,\n          question = _this$props3.question;\n      var open = this.state.open;\n      return React.createElement(React.Fragment, null, React.createElement(QuestionModal, {\n        open: open,\n        onOpenQuestionModal: this.onOpenQuestionModal,\n        onCloseQuestionModal: this.onCloseQuestionModal,\n        question: question\n      }), React.createElement(\"li\", {\n        className: \"answers-list-holder\",\n        key: question.problem\n      }, React.createElement(\"div\", {\n        className: \"answer-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col col-120\"\n      }, React.createElement(\"ul\", {\n        className: \"answer-list\"\n      }, !question.numeric ? this.mapLetterBubbles({\n        index: index\n      }) : this.mapNumberBubbles({\n        index: index\n      }))), React.createElement(\"div\", {\n        className: \"col col-30\"\n      }, React.createElement(\"span\", {\n        className: \"status-info\"\n      }, question.status)), React.createElement(\"div\", {\n        className: \"col col-43\"\n      }, React.createElement(\"span\", {\n        className: \"play-progress\",\n        \"data-video-id\": \"video001\"\n      }, React.createElement(\"span\", {\n        className: \"play\"\n      }), React.createElement(\"svg\", {\n        viewBox: \"0 0 50 50\",\n        width: \"50\",\n        height: \"50\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, React.createElement(\"circle\", {\n        className: \"circle-static\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      }), React.createElement(\"circle\", {\n        className: \"circle-progress\",\n        cx: 25.8,\n        cy: 24.3,\n        r: 22.8,\n        fill: \"transparent\",\n        strokeWidth: 3\n      })))), React.createElement(\"div\", {\n        className: \"col col-auto\"\n      }, question.flagged ? React.createElement(\"span\", {\n        className: \"status-answer\",\n        style: {\n          color: '#c0272d'\n        }\n      }, React.createElement(\"i\", {\n        className: \"icon-flag\"\n      }), React.createElement(\"b\", {\n        className: \"status-text\"\n      }, \"Review\")) : null), React.createElement(\"div\", {\n        className: \"dropdown-block col col-35\"\n      }, React.createElement(\"a\", {\n        className: \"modal-trigger\",\n        href: \"#\",\n        onClick: this.onOpenQuestionModal\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")))), question.studentNotes ? React.createElement(\"div\", {\n        className: \"comment-block\"\n      }, React.createElement(\"p\", null, question.studentNotes)) : null));\n    }\n  }]);\n\n  return AnswerRow;\n}(React.Component);\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  sampleAnswers: PropTypes.array.isRequired\n};\nexport default AnswerRow;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailTestAnswerSheetComplete\\components\\WritingPage\\components\\AnswerRow\\index.js"],"names":["React","PropTypes","QuestionModal","bubbleType","red","position","color","borderColor","border","backgroundColor","height","width","borderRadius","greenFilled","greenBorderOnly","plain","AnswerRow","props","index","sampleAnswers","studentChoice","answer","setState","selectedAnswer","correct","open","event","target","value","checkIfCorrect","state","console","log","letters","map","letter","renderInput","handleBubbleChange","marginTop","display","paddingLeft","style","question","onOpenQuestionModal","onCloseQuestionModal","problem","numeric","mapLetterBubbles","mapNumberBubbles","status","flagged","studentNotes","Component","propTypes","object","isRequired","number","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionModal from '../QuestionModal';\n\nconst bubbleType = {\n  red: {position: 'relative', color: '#fff', borderColor: '#fff', border: '1px solid', backgroundColor: '#db1d41', height: '19px', width: '19px', borderRadius: '50%'},\n  greenFilled: {position: 'relative', color: '#fff', borderColor: '#32955c', border: '1px solid', backgroundColor: '#32955c', height: '19px', width: '19px', borderRadius: '50%'},\n  greenBorderOnly: {position: 'relative', color: '#32955c', borderColor: '#32955c', border: '1px solid', backgroundColor: '#fff', height: '19px', width: '19px', borderRadius: '50%'},\n  plain: {position: 'relative', color: '#a6a8ab', border: '1px solid', borderColor: '#a6a8ab', height: '19px', width: '19px', borderRadius: '50%'}\n}\n\nclass AnswerRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      selectedAnswer: \"\",\n      correct: false,\n     }\n  };\n\n  componentDidMount = () => {\n    const { index, sampleAnswers } = this.props;\n    const { studentChoice, answer } = sampleAnswers[index];\n    this.setState({selectedAnswer: studentChoice});\n    if(studentChoice === answer) {\n      this.setState({correct: true})\n    }\n    // this.checkIfCorrect();\n    // update counter on writing page\n  };\n\n  onOpenQuestionModal = () => this.setState({open: true})\n  onCloseQuestionModal = () => this.setState({open: false});\n\n\n  handleBubbleChange = (event) => {\n    this.setState({\n      selectedAnswer: event.target.value,\n    }, () => this.checkIfCorrect())\n  }\n\n  checkIfCorrect = () => {\n    const { sampleAnswers, index } = this.props;\n    const { selectedAnswer } = this.state;\n    console.log('clicked', this.state.selectedAnswer)\n    if(selectedAnswer === sampleAnswers[index].answer) {\n      this.setState({correct: true});\n    }else{\n      this.setState({correct: false})\n    }\n    // update counter on writing page\n  }\n\n  mapLetterBubbles = ({index}) => {\n    const letters = [\"A\", \"B\", \"C\", \"D\"];\n    const { sampleAnswers } = this.props;\n    const { studentChoice, answer } = sampleAnswers[index];\n    if (studentChoice === \"\") {\n      return letters.map((letter) => {\n        return (\n          this.renderInput(letter, bubbleType.plain)\n        )\n      })\n    }\n    return letters.map(letter => {\n      if (letter === answer && letter === studentChoice){\n        return (\n          <li key={letter}>\n            <input\n                type=\"radio\"\n                id={letter}\n                name={letter}\n                value={letter}\n                checked={this.state.selectedAnswer === letter}\n                onChange={this.handleBubbleChange}\n                />\n                <label\n                htmlFor={letter}\n                style={bubbleType.greenFilled}>\n                \n                <span style={{marginTop: '2px', display: 'block', paddingLeft: \"4.5px\"}}>{letter}</span>\n            </label>\n        </li>\n        )\n      }\n      if (letter === answer && letter !== studentChoice){\n        return (\n          <li key={letter}>\n            <input\n                type=\"radio\"\n                id={letter}\n                name={letter}\n                value={letter}\n                checked={this.state.selectedAnswer === letter}\n                onChange={this.handleBubbleChange}\n                />\n                <label\n                htmlFor={letter}\n                style={bubbleType.greenBorderOnly}\n                >\n                <span style={{marginTop: '2px', display: 'block', paddingLeft: \"4.5px\"}}>{letter}</span>\n            </label>\n          </li>\n        )\n      }\n      if (letter !== answer && letter === studentChoice){\n        return (\n          <li key={letter}>\n             <input\n                type=\"radio\"\n                id={letter}\n                name={letter}\n                value={letter}\n                checked={this.state.selectedAnswer === letter}\n                onChange={this.handleBubbleChange}\n                />\n                <label\n                htmlFor={letter}\n                style={bubbleType.red}\n                >\n                <span style={{marginTop: '2px', display: 'block', paddingLeft: \"4.5px\"}}>{letter}</span>\n            </label>\n          </li>\n        )\n      }\n      return (\n          <li key={letter}>\n            <input\n                type=\"radio\"\n                id={letter}\n                name={letter}\n                value={letter}\n                checked={this.state.selectedAnswer === letter}\n                onChange={this.handleBubbleChange}\n                />\n                <label\n                htmlFor={letter}\n                style={bubbleType.plain}\n                >\n                <span style={{display: 'block', marginTop: '2px', paddingLeft: \"4.5px\"}}>{letter}</span>\n            </label>\n          </li>\n        )\n      }\n      )\n    };\n\n  mapNumberBubbles = ({ index} ) => {\n    const { sampleAnswers } = this.props;\n    const { answer, studentChoice }= sampleAnswers[index];\n          if ( answer === studentChoice) {\n        return (\n          <li key={answer}>\n            <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#fff', borderColor: '#32955c', backgroundColor: '#3eb777'}}>{answer}</span>\n          </li>\n        )\n      }\n      return (\n          <React.Fragment>\n            <li key={studentChoice}>\n              <span className=\"badge badge-rounded badge-rounded-bordered\"  style={{color: '#fff', borderColor: '#ad1e3e', backgroundColor: '#db1d41'}}>{studentChoice}</span>\n            </li>\n            <li key={answer} >\n              <span className=\"badge badge-rounded badge-rounded-bordered\" style={{color: '#32955c', borderColor: '#32955c', backgroundColor: '#fff'}}>{answer}</span>\n            </li>\n          </React.Fragment>\n        )\n      };\n\n      renderInput = (letter, style) => {\n        return(\n          <li key={letter}>\n          <form>\n              <input\n                type=\"radio\"\n                id={letter}\n                name={letter}\n                value={letter}\n                checked={this.state.selectedAnswer === letter}\n                onChange={this.handleBubbleChange}\n                />\n                <label\n                htmlFor={letter}\n                style={style}>\n                  <span style={{display: 'block', marginTop: '2px', paddingLeft: \"4.5px\"}}>{letter}</span>\n            </label>\n          </form>\n        </li>\n        )\n      }\n\n      render() {\n        const { index, question } = this.props;\n        const { open } = this.state;\n        return (\n          <React.Fragment>\n          <QuestionModal open={open} onOpenQuestionModal={this.onOpenQuestionModal} onCloseQuestionModal={this.onCloseQuestionModal} question={question}/>\n        <li className=\"answers-list-holder\" key={question.problem}>\n          <div className=\"answer-row row mb-0\" >\n            <div className=\"col col-120\">\n              <ul className=\"answer-list\">\n                <Choose>\n                  <When condition={!question.numeric}>\n                  {this.mapLetterBubbles({index})}\n                  </When>\n                  <Otherwise>\n                  {this.mapNumberBubbles({index})}\n                  </Otherwise>\n                </Choose>\n                </ul>\n            </div>\n            <div className=\"col col-30\">\n              <span className=\"status-info\">{question.status}</span>\n            </div>\n            <div className=\"col col-43\">\n              <span className=\"play-progress\" data-video-id=\"video001\">\n                <span className=\"play\"></span>\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle className=\"circle-static\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n                  <circle className=\"circle-progress\" cx={25.8} cy={24.3} r={22.8} fill='transparent' strokeWidth={3}/>\n                </svg>\n              </span>\n            </div>\n            <div className=\"col col-auto\">\n              <If condition={question.flagged}>\n                  <span className=\"status-answer\" style={{color: '#c0272d'}}>\n                    <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n                  </span>\n              </If>\n            </div>\n            <div className=\"dropdown-block col col-35\">\n\n              <a className='modal-trigger' href=\"#\" onClick={this.onOpenQuestionModal}><i className=\"material-icons dots-icon\">more_vert</i></a>\n            </div>\n          </div>\n          <If condition={question.studentNotes}>\n            <div className=\"comment-block\">\n              <p>{question.studentNotes}</p>\n            </div>\n          </If>\n        </li>\n      </React.Fragment>\n\n    )\n  }\n}\n\nAnswerRow.propTypes = {\n  question: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  sampleAnswers: PropTypes.array.isRequired,\n}\n\nexport default AnswerRow;\n\n"]},"metadata":{},"sourceType":"module"}