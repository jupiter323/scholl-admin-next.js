{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport FilterSection from './components/FilterSection';\nimport TestSectionCard from './components/TestSectionCard';\nimport { availableDateSort, dueDateSort, statusSort, flagsSort, problemSort, timeEstimateSort, subjectSort, percentageCompleteSort } from '../utils/sortOptions';\nimport { testSectionSubjectMap } from '../utils/testSectionCardUtils';\nimport sampleTestSections from '../utils/sampleTestSections';\n\nclass TestSectionsPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      sort: '',\n      testVersionFilter: '',\n      subjectFilters: [],\n      flagFilter: false,\n      availableDateFilters: [],\n      dueDateFilters: []\n    }));\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIndex,\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", value => this.setState({\n      testVersionFilter: value\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      testVersionFilter: ''\n    }));\n\n    _defineProperty(this, \"onSortTestSections\", testSections => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'flags':\n          return testSections.sort(flagsSort);\n\n        case 'dueDate':\n          return testSections.sort(dueDateSort);\n\n        case 'availableDate':\n          return testSections.sort(availableDateSort);\n\n        case 'status':\n          return testSections.sort(statusSort);\n\n        case 'problems':\n          return testSections.sort(problemSort);\n\n        case 'timeEstimate':\n          return testSections.sort(timeEstimateSort);\n\n        case 'subject':\n          return testSections.sort(subjectSort);\n\n        case 'percentageComplete':\n          return testSections.sort(percentageCompleteSort);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onFilterByTestVersion\", () => {\n      const {\n        testSections,\n        testVersionFilter\n      } = this.state;\n      return testSections.reduce((finalArr, currentTestSection) => {\n        const {\n          version\n        } = currentTestSection;\n        const testSectionString = version.replace(/\\s/g, \"\").toLowerCase();\n\n        if (testSectionString.indexOf(testVersionFilter) !== -1 && finalArr.indexOf(currentTestSection) === -1) {\n          finalArr.push(currentTestSection);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterByDate\", (incomingSections, dateType) => {\n      const {\n        dueDateFilters,\n        availableDateFilters\n      } = this.state;\n      let dateFilters;\n      let testSections = incomingSections;\n      const currentDate = moment().format('MM/DD/YY');\n      const currentDateIndex = new Date().getDay();\n      const endOfWeekIndex = 6 - currentDateIndex;\n      const endOfWeekDate = moment().add(endOfWeekIndex, 'days').format('MM/DD/YY');\n\n      if (dateType === 'dueDate') {\n        dateFilters = dueDateFilters;\n\n        if (dateFilters.indexOf('dueToday') !== -1) {\n          testSections = testSections.filter(testSection => testSection.dueDate === currentDate);\n        }\n\n        if (dateFilters.indexOf('dueNextSession') !== -1) {\n          console.warn('Pending decision on how next session date is calculated');\n        }\n\n        if (dateFilters.indexOf('overdue') !== -1) {\n          testSections = testSections.filter(testSection => testSection.dueDate < currentDate);\n        }\n\n        if (dateFilters.indexOf('dueThisWeek') !== -1) {\n          testSections = testSections.filter(testSection => testSection.dueDate >= currentDate && testSection.dueDate <= endOfWeekDate);\n        }\n      } else {\n        dateFilters = availableDateFilters;\n\n        if (dateFilters.indexOf('future') !== -1) {\n          testSections = testSections.filter(testSection => testSection.availableDate > currentDate);\n        }\n\n        if (dateFilters.indexOf('available') !== -1) {\n          testSections = testSections.filter(testSection => testSection.availableDate <= currentDate);\n        }\n\n        if (dateFilters.indexOf('complete') !== -1) {\n          testSections = testSections.filter(testSection => testSection.percentageComplete === '100');\n        }\n      }\n\n      return testSections;\n    });\n\n    _defineProperty(this, \"onFilterTestSections\", () => {\n      const {\n        subjectFilters,\n        dueDateFilters,\n        availableDateFilters,\n        flagFilter,\n        testSections: allTestSections\n      } = this.state;\n      let testSections = allTestSections;\n\n      if (subjectFilters.length) {\n        testSections = testSections.filter(testSection => subjectFilters.indexOf(testSectionSubjectMap[testSection.subject]) !== -1);\n      }\n\n      if (dueDateFilters.length) {\n        testSections = this.onFilterByDate(testSections, 'dueDate');\n      }\n\n      if (availableDateFilters.length) {\n        testSections = this.onFilterByDate(testSections, 'availableDate');\n      }\n\n      if (flagFilter) {\n        testSections = testSections.filter(testSection => testSection.flags.length);\n      }\n\n      return testSections;\n    });\n\n    _defineProperty(this, \"getMappableTestSections\", () => {\n      const {\n        subjectFilters,\n        dueDateFilters,\n        availableDateFilters,\n        flagFilter,\n        sort,\n        testVersionFilter,\n        testSections\n      } = this.state;\n      let mappableTestSections = testSections;\n\n      if (testVersionFilter.length) {\n        mappableTestSections = this.onFilterByTestVersion();\n      }\n\n      if (subjectFilters.length || dueDateFilters.length || availableDateFilters.length || flagFilter) {\n        mappableTestSections = this.onFilterTestSections();\n      }\n\n      if (sort) {\n        return this.onSortTestSections(mappableTestSections);\n      }\n\n      return mappableTestSections;\n    });\n\n    _defineProperty(this, \"handleFilterClick\", (filterType, filter) => {\n      const {\n        availableDateFilters: currentAvailableDateFilters,\n        dueDateFilters: currentDueDateFilters,\n        subjectFilters: currentSubjectFilters,\n        flagFilter\n      } = this.state;\n      let modifiedFilterCurrentState;\n      let modifiedFilterName;\n      let modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n\n        case 'availableDate':\n          modifiedFilterCurrentState = currentAvailableDateFilters;\n          modifiedFilterName = 'availableDateFilters';\n          break;\n\n        case 'hasFlags':\n          return this.setState({\n            flagFilter: !flagFilter\n          });\n\n        default:\n          break;\n      }\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        [modifiedFilterName]: modifiedFilterUpdatedState\n      });\n    });\n\n    _defineProperty(this, \"mapTestSections\", () => this.getMappableTestSections().map((testSection, index) => __jsx(TestSectionCard, {\n      index: index,\n      key: testSection.id,\n      testSection: testSection,\n      onSetDropdown: this.onSetDropdown,\n      onCloseDropdown: this.onCloseDropdown,\n      dropdownIndex: this.state.dropdownIndex,\n      dropdownIsOpen: this.state.dropdownIsOpen\n    })));\n\n    this.state = {\n      sort: '',\n      testVersionFilter: '',\n      subjectFilters: [],\n      flagFilter: false,\n      availableDateFilters: [],\n      dueDateFilters: [],\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      testSections: sampleTestSections\n    };\n  }\n\n  render() {\n    const {\n      testSections\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(FilterSection, {\n      sort: this.state.sort,\n      onSetSort: this.onSetSort,\n      flagFilter: this.state.flagFilter,\n      onClearFilters: this.onClearFilters,\n      handleFilterClick: this.handleFilterClick,\n      subjectFilters: this.state.subjectFilters,\n      dueDateFilters: this.state.dueDateFilters,\n      availableDateFilters: this.state.availableDateFilters,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState\n    }), __jsx(\"div\", {\n      className: \"content-section\"\n    }, __jsx(\"div\", {\n      className: \"result-row center-align\"\n    }, __jsx(\"b\", {\n      className: \"result\"\n    }, \" - \", testSections.length, \" results -\")), __jsx(\"div\", {\n      className: \"row d-flex-content card-width-272\"\n    }, this.mapTestSections())));\n  }\n\n}\n\nexport default TestSectionsPage;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Classes/TestSectionsPage/index.js"],"names":["React","update","moment","FilterSection","TestSectionCard","availableDateSort","dueDateSort","statusSort","flagsSort","problemSort","timeEstimateSort","subjectSort","percentageCompleteSort","testSectionSubjectMap","sampleTestSections","TestSectionsPage","Component","constructor","props","sort","setState","testVersionFilter","subjectFilters","flagFilter","availableDateFilters","dueDateFilters","dropdownIndex","dropdownIsOpen","value","testSections","state","reduce","finalArr","currentTestSection","version","testSectionString","replace","toLowerCase","indexOf","push","incomingSections","dateType","dateFilters","currentDate","format","currentDateIndex","Date","getDay","endOfWeekIndex","endOfWeekDate","add","filter","testSection","dueDate","console","warn","availableDate","percentageComplete","allTestSections","length","subject","onFilterByDate","flags","mappableTestSections","onFilterByTestVersion","onFilterTestSections","onSortTestSections","filterType","currentAvailableDateFilters","currentDueDateFilters","currentSubjectFilters","modifiedFilterCurrentState","modifiedFilterName","modifiedFilterUpdatedState","$push","filterIndex","$splice","getMappableTestSections","map","index","id","onSetDropdown","onCloseDropdown","render","onSetSort","onClearFilters","handleFilterClick","onSetFilteredState","onUnsetFilteredState","mapTestSections"],"mappings":"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","sourcesContent":["import React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\n\nimport FilterSection from './components/FilterSection';\nimport TestSectionCard from './components/TestSectionCard';\n\nimport { availableDateSort, dueDateSort, statusSort, flagsSort, problemSort, timeEstimateSort, subjectSort, percentageCompleteSort } from '../utils/sortOptions';\nimport { testSectionSubjectMap } from '../utils/testSectionCardUtils';\nimport sampleTestSections from '../utils/sampleTestSections';\n\nclass TestSectionsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sort: '',\n      testVersionFilter: '',\n      subjectFilters: [],\n      flagFilter: false,\n      availableDateFilters: [],\n      dueDateFilters: [],\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      testSections: sampleTestSections,\n    };\n  }\n\n  onSetSort = (sort) => this.setState({ sort })\n\n  onClearFilters = () => this.setState({ sort: '', testVersionFilter: '', subjectFilters: [], flagFilter: false, availableDateFilters: [], dueDateFilters: [] })\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  onSetFilteredState = (value) => this.setState({ testVersionFilter: value })\n  onUnsetFilteredState = () => this.setState({ testVersionFilter: '' })\n\n  // eslint-disable-next-line consistent-return\n  onSortTestSections = (testSections) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case 'flags':\n        return testSections.sort(flagsSort);\n      case 'dueDate':\n        return testSections.sort(dueDateSort);\n      case 'availableDate':\n        return testSections.sort(availableDateSort);\n      case 'status':\n        return testSections.sort(statusSort);\n      case 'problems':\n        return testSections.sort(problemSort);\n      case 'timeEstimate':\n        return testSections.sort(timeEstimateSort);\n      case 'subject':\n        return testSections.sort(subjectSort);\n      case 'percentageComplete':\n        return testSections.sort(percentageCompleteSort);\n      default:\n        break;\n    }\n  }\n\n  onFilterByTestVersion = () => {\n    const { testSections, testVersionFilter } = this.state;\n    return testSections.reduce((finalArr, currentTestSection) => {\n      const { version } = currentTestSection;\n      const testSectionString = version.replace(/\\s/g, \"\").toLowerCase();\n      if (testSectionString.indexOf(testVersionFilter) !== -1 && finalArr.indexOf(currentTestSection) === -1) {\n        finalArr.push(currentTestSection);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterByDate = (incomingSections, dateType) => {\n    const { dueDateFilters, availableDateFilters } = this.state;\n    let dateFilters;\n    let testSections = incomingSections;\n\n    const currentDate = moment().format('MM/DD/YY');\n    const currentDateIndex = new Date().getDay();\n    const endOfWeekIndex = 6 - currentDateIndex;\n    const endOfWeekDate = moment().add(endOfWeekIndex, 'days').format('MM/DD/YY')\n    if (dateType === 'dueDate') {\n      dateFilters = dueDateFilters;\n      if (dateFilters.indexOf('dueToday') !== -1) {\n        testSections = testSections.filter(testSection => testSection.dueDate === currentDate);\n      }\n      if (dateFilters.indexOf('dueNextSession') !== -1) {\n        console.warn('Pending decision on how next session date is calculated');\n      }\n      if (dateFilters.indexOf('overdue') !== -1) {\n        testSections = testSections.filter(testSection => testSection.dueDate < currentDate);\n      }\n      if (dateFilters.indexOf('dueThisWeek') !== -1) {\n        testSections = testSections.filter(testSection => testSection.dueDate >= currentDate && testSection.dueDate <= endOfWeekDate);\n      }\n    } else {\n      dateFilters = availableDateFilters;\n      if (dateFilters.indexOf('future') !== -1) {\n        testSections = testSections.filter(testSection => testSection.availableDate > currentDate);\n      }\n      if (dateFilters.indexOf('available') !== -1) {\n        testSections = testSections.filter(testSection => testSection.availableDate <= currentDate);\n      }\n      if (dateFilters.indexOf('complete') !== -1) {\n        testSections = testSections.filter(testSection => testSection.percentageComplete === '100');\n      }\n    }\n    return testSections;\n  }\n\n  onFilterTestSections = () => {\n    const { subjectFilters, dueDateFilters, availableDateFilters, flagFilter, testSections: allTestSections } = this.state;\n    let testSections = allTestSections;\n    if (subjectFilters.length) {\n      testSections = testSections.filter(testSection => subjectFilters.indexOf(testSectionSubjectMap[testSection.subject]) !== -1);\n    }\n    if (dueDateFilters.length) {\n      testSections = this.onFilterByDate(testSections, 'dueDate');\n    }\n    if (availableDateFilters.length) {\n      testSections = this.onFilterByDate(testSections, 'availableDate');\n    }\n    if (flagFilter) {\n      testSections = testSections.filter(testSection => testSection.flags.length);\n    }\n    return testSections;\n  }\n\n  getMappableTestSections = () => {\n    const { subjectFilters, dueDateFilters, availableDateFilters, flagFilter, sort, testVersionFilter, testSections } = this.state;\n    let mappableTestSections = testSections;\n    if (testVersionFilter.length) {\n      mappableTestSections = this.onFilterByTestVersion();\n    }\n    if (subjectFilters.length || dueDateFilters.length || availableDateFilters.length || flagFilter) {\n      mappableTestSections = this.onFilterTestSections();\n    }\n    if (sort) {\n      return this.onSortTestSections(mappableTestSections);\n    }\n    return mappableTestSections;\n  }\n\n  // eslint-disable-next-line consistent-return\n  handleFilterClick = (filterType, filter) => {\n    const { availableDateFilters: currentAvailableDateFilters, dueDateFilters: currentDueDateFilters,\n      subjectFilters: currentSubjectFilters, flagFilter } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case 'subject':\n        modifiedFilterCurrentState = currentSubjectFilters;\n        modifiedFilterName = 'subjectFilters';\n        break;\n      case 'dueDate':\n        modifiedFilterCurrentState = currentDueDateFilters;\n        modifiedFilterName = 'dueDateFilters';\n        break;\n      case 'availableDate':\n        modifiedFilterCurrentState = currentAvailableDateFilters;\n        modifiedFilterName = 'availableDateFilters';\n        break;\n      case 'hasFlags':\n        return this.setState({ flagFilter: !flagFilter });\n      default:\n        break;\n    }\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[ filterIndex, 1 ]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  }\n\n  mapTestSections = () => this.getMappableTestSections().map((testSection, index) => (\n    <TestSectionCard\n      index={index}\n      key={testSection.id}\n      testSection={testSection}\n      onSetDropdown={this.onSetDropdown}\n      onCloseDropdown={this.onCloseDropdown}\n      dropdownIndex={this.state.dropdownIndex}\n      dropdownIsOpen={this.state.dropdownIsOpen}\n    />\n  ))\n\n  render() {\n    const { testSections } = this.state;\n    return (\n      <React.Fragment>\n        <FilterSection\n          sort={this.state.sort}\n          onSetSort={this.onSetSort}\n          flagFilter={this.state.flagFilter}\n          onClearFilters={this.onClearFilters}\n          handleFilterClick={this.handleFilterClick}\n          subjectFilters={this.state.subjectFilters}\n          dueDateFilters={this.state.dueDateFilters}\n          availableDateFilters={this.state.availableDateFilters}\n          onSetFilteredState={this.onSetFilteredState}\n          onUnsetFilteredState={this.onUnsetFilteredState}\n        />\n        <div className=\"content-section\">\n          <div className=\"result-row center-align\">\n            <b className=\"result\"> - {testSections.length} results -</b>\n          </div>\n          <div className=\"row d-flex-content card-width-272\">\n            {this.mapTestSections()}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TestSectionsPage;\n"]},"metadata":{},"sourceType":"module"}