{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable react/no-did-mount-set-state */\n\n/* eslint-disable react/no-did-update-set-state */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport Portal from '../../Portal';\nimport PracticeQuestions from './components/PracticeQuestions';\nimport ChallengeQuestions from './components/ChallengeQuestions';\nimport QuestionModal from './components/QuestionModal';\nimport sampleQuestions from './utils/sampleQuestions';\nimport CardSection from './components/CardSection';\nimport ReassignModal from './components/ReassignModal';\n\nclass LessonWorksheetTestSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onToggleReassignModal\", () => this.setState(({\n      reassigNModalOpen\n    }) => ({\n      reassigNModalOpen: !reassigNModalOpen,\n      dropdownIsOpen: false\n    })));\n\n    _defineProperty(this, \"onToggleQuestionModal\", (selectedQuestion = {}) => this.setState(({\n      questionModalOpen\n    }) => ({\n      questionModalOpen: !questionModalOpen,\n      selectedQuestion,\n      questionDropdownOpen: false,\n      questionDropdownIndex: null\n    })));\n\n    _defineProperty(this, \"onOpenDropdown\", () => this.setState({\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false\n    }));\n\n    _defineProperty(this, \"onReassignDate\", (assignDate, assignTime, dueDate, dueTime) => {\n      console.warn('Stubbed out date functionality', assignDate, assignTime, dueDate, dueTime);\n    });\n\n    _defineProperty(this, \"handleQuestionDropdownClick\", (event, question) => {\n      const {\n        questionDropdownOpen,\n        questionDropdownIndex\n      } = this.state;\n      event.preventDefault();\n\n      if (questionDropdownOpen && question.id === questionDropdownIndex) {\n        this.setState({\n          questionDropdownOpen: false,\n          questionDropdownIndex: null\n        });\n      } else if (questionDropdownOpen && question !== questionDropdownIndex) {\n        this.setState({\n          questionDropdownIndex: question.id\n        });\n      } else if (questionDropdownOpen && question.id === questionDropdownIndex) {\n        this.setState({\n          questionDropdownOpen: false,\n          questionDropdownIndex: null\n        });\n      } else {\n        this.setState({\n          questionDropdownOpen: true,\n          questionDropdownIndex: question.id\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleDropdownClick\", event => {\n      const {\n        dropdownIsOpen\n      } = this.state;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return this.onCloseDropdown();\n      }\n\n      return this.onOpenDropdown();\n    });\n\n    this.state = {\n      selectedQuestion: {},\n      questionModalOpen: false,\n      answerSheetComplete: false,\n      questions: sampleQuestions,\n      dropdownIsOpen: false,\n      questionDropdownOpen: false,\n      questionDropdownIndex: null,\n      reassigNModalOpen: false\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.worksheet.completionLevel !== 'Not Started') {\n      this.setState({\n        answerSheetComplete: true\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      worksheet\n    } = this.props;\n\n    if (prevProps.worksheet.id !== worksheet.id) {\n      if (worksheet.completionLevel === 'Not Started') {\n        this.setState({\n          answerSheetComplete: false\n        });\n      } else {\n        this.setState({\n          answerSheetComplete: true\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      questionModalOpen,\n      selectedQuestion,\n      questions,\n      answerSheetComplete,\n      dropdownIsOpen,\n      questionDropdownOpen,\n      questionDropdownIndex,\n      reassigNModalOpen\n    } = this.state;\n    const {\n      onClose,\n      worksheet,\n      user = {}\n    } = this.props;\n    const {\n      studentInformation: {\n        firstName,\n        lastName\n      }\n    } = user;\n    return React.createElement(React.Fragment, null, React.createElement(QuestionModal, {\n      open: questionModalOpen,\n      question: selectedQuestion,\n      onCloseModal: this.onToggleQuestionModal\n    }), React.createElement(ReassignModal, {\n      open: reassigNModalOpen,\n      onClose: this.onToggleReassignModal,\n      onReassignDate: this.onReassignDate\n    }), React.createElement(Portal, {\n      selector: \"#modal\"\n    }, React.createElement(\"div\", {\n      className: \"wrapper modal\",\n      style: {\n        zIndex: '1003',\n        display: 'block',\n        position: 'absolute',\n        top: '0',\n        width: '100%'\n      }\n    }, React.createElement(\"div\", {\n      className: \"header-box card-panel light-blue lighten-1 white-text\",\n      style: {\n        zIndex: '9'\n      }\n    }, React.createElement(\"div\", {\n      className: \"header-flex-row row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col s12 m7 xl8\"\n    }, React.createElement(\"div\", {\n      className: \"header-holder\"\n    }, React.createElement(\"div\", {\n      className: \"header-col\"\n    }, React.createElement(\"div\", {\n      className: \"icon-col\"\n    }, React.createElement(\"i\", {\n      className: \"icon-books-l\"\n    }), React.createElement(\"span\", {\n      className: \"text-icon\"\n    }, \"Lesson\"))), React.createElement(\"div\", {\n      className: \"header-col\"\n    }, React.createElement(\"div\", {\n      className: \"card-panel-text\"\n    }, React.createElement(\"div\", {\n      className: \"text-small\"\n    }, worksheet.unit), React.createElement(\"h1\", {\n      className: \"text-large\"\n    }, worksheet.worksheetName), React.createElement(\"div\", {\n      className: \"text-small\"\n    }, \"p.\", worksheet.passage, \"  (\", worksheet.type, \")\"))))), React.createElement(\"div\", {\n      className: \"col s9 m4 xl3 position-mobile-left\"\n    }, React.createElement(\"div\", {\n      className: \"card-panel-text\"\n    }, React.createElement(\"h2\", {\n      className: \"text-large\"\n    }, firstName, \" \", lastName), React.createElement(\"dl\", {\n      className: \"text-small dl-horizontal\"\n    }, React.createElement(\"dt\", null, \"Assigned:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n      dateTime: \"2019-01-06T08:00\"\n    }, worksheet.assignDate, \" at \", worksheet.assignTime))), React.createElement(\"dl\", {\n      className: \"text-small dl-horizontal\"\n    }, React.createElement(\"dt\", null, \"Due:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n      dateTime: \"2019-01-06T16:00\"\n    }, worksheet.dueDate, \" at \", worksheet.dueTime))), worksheet.completionDate ? React.createElement(\"dl\", {\n      className: \"text-small dl-horizontal\"\n    }, React.createElement(\"dt\", null, \"Completed:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n      dateTime: \"2019-09-01T06:59\"\n    }, worksheet.completionDate, \" at \", worksheet.completionTime))) : null)), React.createElement(\"div\", {\n      className: \"col s2 m1 right-align position-mobile-right\"\n    }, React.createElement(\"div\", {\n      className: \"dropdown-block\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      \"data-target\": \"dropdown_top\",\n      className: \"dropdown-trigger btn\",\n      onClick: this.handleDropdownClick\n    }, React.createElement(\"i\", {\n      className: \"material-icons dots-icon\"\n    }, \"more_vert\")), dropdownIsOpen ? React.createElement(\"ul\", {\n      id: \"dropdown_top\",\n      className: \"dropdown-content dropdown-exwide\",\n      style: {\n        display: 'block',\n        opacity: '1',\n        transform: 'scaleX(1) scaleY(1)'\n      }\n    }, React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\",\n      className: \"modal-trigger\",\n      onClick: this.onToggleReassignModal\n    }, \"Change Date\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\",\n      className: \"modal-trigger\",\n      onClick: this.onToggleReassignModal\n    }, \"Change Due Date\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\",\n      className: \"modal-trigger\",\n      onClick: this.onToggleReassignModal\n    }, \"Remove Due Date\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"Excuse Latness\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\"\n    }, \"Reset\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\",\n      className: \"link-delete\"\n    }, \"Delete\"))) : null), React.createElement(\"div\", {\n      className: \"close-block\",\n      onClick: onClose\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      className: \"modal-close close\"\n    }, React.createElement(\"i\", {\n      className: \"icon-close-thin\"\n    })))))), React.createElement(\"div\", {\n      className: \"content-section content-section-85\"\n    }, React.createElement(\"div\", {\n      className: \"container-sm\"\n    }, worksheet.completionLevel !== 'Not Started' ? React.createElement(CardSection, {\n      flags: worksheet.flags,\n      status: worksheet.status,\n      problems: worksheet.problems,\n      completedProblems: worksheet.completedProblems,\n      completionLevel: worksheet.completionLevel,\n      totalVideoMinutesWatched: worksheet.totalVideoMinutesWatched,\n      totalVideoMinutesAllMissedProblems: worksheet.totalVideoMinutesAllMissedProblems\n    }) : null, React.createElement(\"div\", {\n      className: \"main-row row\"\n    }, React.createElement(ChallengeQuestions, {\n      answerSheetComplete: answerSheetComplete,\n      questionDropdownIndex: questionDropdownIndex,\n      questionDropdownOpen: questionDropdownOpen,\n      onOpenQuestionModal: this.onToggleQuestionModal,\n      handleQuestionDropdownClick: this.handleQuestionDropdownClick,\n      questions: questions.filter(question => question.questionType === 'Challenge')\n    }), React.createElement(PracticeQuestions, {\n      answerSheetComplete: answerSheetComplete,\n      questionDropdownIndex: questionDropdownIndex,\n      questionDropdownOpen: questionDropdownOpen,\n      onOpenQuestionModal: this.onToggleQuestionModal,\n      handleQuestionDropdownClick: this.handleQuestionDropdownClick,\n      questions: questions.filter(question => question.questionType === 'Practice')\n    })))))));\n  }\n\n}\n\nexport default LessonWorksheetTestSection;","map":null,"metadata":{},"sourceType":"module"}