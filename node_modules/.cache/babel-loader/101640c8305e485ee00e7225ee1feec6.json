{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\nimport ClickOffComponentWrapper from '../../../../../../ClickOffComponentWrapper';\nimport statusColorMap, { chartColorMap } from '../../../../../DetailWorksheetPage/utils/statusColorMap';\n\nvar _data = function data(current, target, status) {\n  return {\n    datasets: [{\n      data: [current, target - current],\n      backgroundColor: [chartColorMap[status], '#eaeaea']\n    }]\n  };\n}; // const getProblemCompletionStatusColor = (solvedProblems, totalProblems) => {\n//   if (solvedProblems === totalProblems) {\n//     return calculateStatus(solvedProblems, totalProblems)\n//   } else if (solvedProblems < totalProblems ) {\n//     return '#333';\n//   }\n// }\n// const calculateStatus = (solvedProblems, totalProblems) => {\n//   if (solvedProblems / totalProblems >= 90) {\n//     return chartColorMap[exemplary]\n//   }\n//   if (solvedProblems / totalProblems >= 80) {\n//     return \"Developing\"\n//   }\n//   if (solvedProblems / totalProblems >= 70) {\n//     return \"DevelopingBelowAvg\"\n//   }\n//   return \"Beginning\"\n// }\n// assigned ? 'card-main card-lesson-detail card-assigned card' : 'card-main card-lesson-detail card'}\n\n\nvar getLessonActivityStatus = function getLessonActivityStatus(status) {\n  if (status === \"Scheduled\") {\n    return 'card-main card-lesson-detail card-disabled card-assigned card';\n  }\n\n  return 'card-main card-lesson-detail card-assigned card';\n};\n\nvar LessonCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LessonCard, _React$Component);\n\n  function LessonCard(props) {\n    var _this;\n\n    _classCallCheck(this, LessonCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LessonCard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIsOpen) {\n      return _this.setState({\n        dropdownIsOpen: !dropdownIsOpen\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderLessonIcon\", function (subject) {\n      switch (subject) {\n        case 'Reading':\n          return 'icon-books';\n\n        case 'Writing':\n          return 'icon-hands';\n\n        case 'Math':\n          return 'icon-calculator';\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProblemCount\", function (assigned, totalProblems, solvedProblems) {\n      if (assigned) {\n        return React.createElement(\"span\", {\n          className: \"chart-value chart-value-column\",\n          style: {\n            bottom: '8px',\n            backgroundColor: getProblemCompletionStatusColor(solvedProblems, totalProblems)\n          }\n        }, React.createElement(\"span\", {\n          className: \"chart-count\",\n          \"data-count-up\": true,\n          \"data-start-val\": \"0\",\n          \"data-end-val\": \"4\",\n          \"data-duration\": \"1\"\n        }, React.createElement(\"span\", {\n          className: \"text-large\"\n        }, solvedProblems)), React.createElement(\"span\", {\n          className: \"text-small\"\n        }, \"out of\"), \" \", React.createElement(\"span\", {\n          className: \"text-large\"\n        }, totalProblems));\n      }\n\n      return React.createElement(\"span\", {\n        className: \"chart-value chart-value-column\",\n        style: {\n          bottom: '8px',\n          backgroundColor: '#666'\n        }\n      }, React.createElement(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"0\",\n        \"data-end-val\": \"0\",\n        \"data-duration\": \"1\"\n      }, React.createElement(\"span\", {\n        className: \"text-large\"\n      }, totalProblems), React.createElement(\"span\", {\n        className: \"text-small\"\n      }, \"problems\")));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProblemCompletionStatus\", function (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) {\n      if (completed) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Completed \", React.createElement(\"time\", {\n          dateTime: \"2018-11-18T20:43\"\n        }, completionDate, \" at \", completionTime), completedLate && React.createElement(\"span\", {\n          className: \"status status-late\"\n        }, \" (late)\")));\n      }\n\n      if (availableDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Available \", React.createElement(\"time\", {\n          dateTime: \"2018-12-13\"\n        }, availableDate)), React.createElement(\"p\", null, React.createElement(\"time\", {\n          dateTime: \"2018-12-17\"\n        }, \"(due \", dueDate, \")\")));\n      }\n\n      if (overdue) {\n        return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n          className: \"text-large\",\n          style: {\n            color: '#c1272d'\n          }\n        }, \"Overdue\"));\n      }\n\n      if (!availableDate && dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Due \", React.createElement(\"time\", {\n          dateTime: \"2018-12-15\"\n        }, dueDate)));\n      }\n\n      if (!assigned && !dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Not Assigned\"));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n        className: \"text-large\",\n        style: {\n          color: '#006837'\n        }\n      }, \"Due Today at \", dueTime));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderAlerts\", function (alerts) {\n      if (alerts.length) {\n        return React.createElement(\"span\", {\n          className: \"badge-rounded-xs badge red darken-2 white-text\"\n        }, React.createElement(\"b\", {\n          className: \"badge-text\"\n        }, alerts.length), \" \", React.createElement(\"i\", {\n          className: \"icon-flag\"\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"right-col col s3\"\n      }, \"\\xA0\");\n    });\n\n    _this.state = {\n      test: true,\n      dropdownIsOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(LessonCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var dropdownIsOpen = this.state.dropdownIsOpen;\n      var _this$props = this.props,\n          onDeleteLesson = _this$props.onDeleteLesson,\n          onCloneLesson = _this$props.onCloneLesson,\n          _this$props$lesson = _this$props.lesson,\n          subject = _this$props$lesson.subject,\n          status = _this$props$lesson.status,\n          score = _this$props$lesson.score,\n          unitNumber = _this$props$lesson.unitNumber,\n          lessonName = _this$props$lesson.lessonName,\n          assigned = _this$props$lesson.assigned,\n          alerts = _this$props$lesson.alerts,\n          lessonType = _this$props$lesson.lessonType,\n          totalProblems = _this$props$lesson.totalProblems,\n          _this$props$lesson$so = _this$props$lesson.solvedProblems,\n          solvedProblems = _this$props$lesson$so === void 0 ? '' : _this$props$lesson$so,\n          passage = _this$props$lesson.passage,\n          dueDate = _this$props$lesson.dueDate,\n          dueTime = _this$props$lesson.dueTime,\n          completed = _this$props$lesson.completed,\n          availableDate = _this$props$lesson.availableDate,\n          completionDate = _this$props$lesson.completionDate,\n          completionTime = _this$props$lesson.completionTime,\n          completedLate = _this$props$lesson.completedLate,\n          overdue = _this$props$lesson.overdue;\n      return React.createElement(\"div\", {\n        className: \"card-main-col col s12 m8 l7 xl5\"\n      }, React.createElement(\"div\", {\n        className: getLessonActivityStatus(status)\n      }, React.createElement(\"div\", {\n        className: \"card-panel\",\n        style: {\n          backgroundColor: '#666',\n          color: '#fff'\n        }\n      }, React.createElement(\"div\", {\n        className: \"card-panel-row row\"\n      }, React.createElement(\"div\", {\n        className: \"icon-col col s1\"\n      }, React.createElement(\"i\", {\n        className: this.renderLessonIcon(subject)\n      })), React.createElement(\"div\", {\n        className: \"col s9\"\n      }, React.createElement(\"div\", {\n        className: \"card-panel-text center-align\"\n      }, React.createElement(\"div\", {\n        className: \"text-small\"\n      }, subject, \" Unit \", unitNumber), React.createElement(\"div\", {\n        className: \"text-large\"\n      }, lessonName))), React.createElement(\"div\", {\n        className: \"col s1 right-align\"\n      }, React.createElement(\"div\", {\n        className: \"row icons-row\"\n      }, this.renderAlerts(alerts), React.createElement(\"div\", {\n        className: \"dropdown-block col\"\n      }, React.createElement(\"a\", {\n        className: \"dropdown-trigger btn\",\n        href: \"#\",\n        \"data-target\": \"dropdown01\",\n        onClick: function onClick() {\n          return _this2.onSetDropdown(dropdownIsOpen);\n        }\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), dropdownIsOpen ? React.createElement(ClickOffComponentWrapper, {\n        onOuterClick: function onOuterClick() {\n          return _this2.onSetDropdown(dropdownIsOpen);\n        }\n      }, React.createElement(\"ul\", {\n        id: \"dropdown01\",\n        className: \"dropdown-content dropdown-wide\",\n        style: {\n          display: \"block\",\n          opacity: '1',\n          transform: 'scaleX(1) scaleY(1)'\n        }\n      }, React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\",\n        className: \"modal-trigger link-block\"\n      }, \"Edit\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\",\n        onClick: onCloneLesson\n      }, \"Clone\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\"\n      }, \"Show Owner\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#!\",\n        onClick: onDeleteLesson\n      }, \"Delete\")))) : null))))), React.createElement(\"div\", {\n        className: \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"d-flex sameheight-all row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"chart-container\"\n      }, React.createElement(\"div\", {\n        className: \"chart-holder\",\n        style: {\n          width: '140px',\n          height: '95px'\n        }\n      }, completionDate ? React.createElement(Doughnut, {\n        data: function data() {\n          return _data(score, totalProblems, status);\n        },\n        height: 210,\n        options: {\n          circumference: 1.45 * Math.PI,\n          rotation: -3.85,\n          cutoutPercentage: 60,\n          tooltips: false\n        }\n      }) : React.createElement(Doughnut, {\n        data: function data() {\n          return _data(solvedProblems, totalProblems, status);\n        },\n        height: 210,\n        options: {\n          circumference: 1.45 * Math.PI,\n          rotation: -3.85,\n          cutoutPercentage: 60,\n          tooltips: false\n        }\n      }), React.createElement(\"span\", {\n        className: \"chart-value\",\n        style: {\n          height: '50px',\n          width: '50px',\n          bottom: '6px',\n          backgroundColor: 'black'\n        }\n      }, React.createElement(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"0\",\n        \"data-end-val\": \"96\",\n        \"data-duration\": \"1\"\n      }), score !== \"\" ? React.createElement(\"span\", {\n        className: \"percentage\"\n      }, Math.floor(\"\".concat(score / totalProblems * 100)), \"%\") : null)), React.createElement(\"div\", {\n        className: \"chart-row\"\n      }, React.createElement(\"div\", {\n        className: \"chart-col chart-start\"\n      }, \"\\xA0\"), React.createElement(\"div\", {\n        className: \"chart-col chart-end\"\n      }, React.createElement(\"span\", {\n        className: \"amount\"\n      }, totalProblems))), React.createElement(\"div\", {\n        className: \"chart-description\"\n      }, React.createElement(\"dl\", {\n        className: \"dl-horizontal\"\n      }, React.createElement(\"dt\", null, \"Time Est:\"), React.createElement(\"dd\", null, \"timeEstimate\")), React.createElement(\"dl\", {\n        className: \"dl-horizontal\"\n      }, React.createElement(\"dt\", null, \"Problems:\"), React.createElement(\"dd\", null, totalProblems))))), React.createElement(\"div\", {\n        className: \"col s6 right-align justify-end\"\n      }, React.createElement(\"dl\", {\n        className: \"dl-horizontal\"\n      }, React.createElement(\"dt\", null, \"Available:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n        dateTime: availableDate\n      }, availableDate))), React.createElement(\"dl\", {\n        className: overdue ? 'dl-horizontal red-text text-darken-3' : 'dl-horizontal'\n      }, !assigned ? React.createElement(\"dt\", null, \"No Due Date\") : [React.createElement(\"dt\", {\n        key: \"0\"\n      }, \"Due:\"), React.createElement(\"dd\", {\n        key: \"1\"\n      }, React.createElement(\"time\", {\n        dateTime: dueDate\n      }, dueDate))]), React.createElement(\"dl\", {\n        className: \"dl-horizontal\"\n      }, React.createElement(\"dt\", null, \"Completed:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n        dateTime: completionDate\n      }, completionDate))), React.createElement(\"div\", {\n        className: \"align-self-end\"\n      }, React.createElement(\"span\", {\n        className: \"badge badge-rounded-md \".concat(statusColorMap[status], \" white-text\")\n      }, status))))), React.createElement(\"div\", {\n        className: \"card-text\"\n      }, React.createElement(\"dl\", {\n        className: \"dl-horizontal\"\n      }, React.createElement(\"dt\", null, \"p.\", passage), React.createElement(\"dd\", null, \"(\", lessonType, \")\")))));\n    }\n  }]);\n\n  return LessonCard;\n}(React.Component);\n\nLessonCard.propTypes = {\n  lesson: PropTypes.object.isRequired,\n  onDeleteLesson: PropTypes.func.isRequired,\n  onCloneLesson: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n};\nexport default LessonCard;","map":{"version":3,"sources":["C:\\Users\\KFROE\\OneDrive\\Desktop\\Clear Choice\\clear-choice-admin\\components\\Student\\DetailLessonList\\components\\FullView\\components\\LessonCard\\index.js"],"names":["React","PropTypes","Doughnut","ClickOffComponentWrapper","statusColorMap","chartColorMap","data","current","target","status","datasets","backgroundColor","getLessonActivityStatus","LessonCard","props","dropdownIsOpen","setState","subject","assigned","totalProblems","solvedProblems","bottom","getProblemCompletionStatusColor","dueTime","completed","completionDate","completionTime","completedLate","availableDate","dueDate","overdue","color","alerts","length","state","test","onDeleteLesson","onCloneLesson","lesson","score","unitNumber","lessonName","lessonType","passage","renderLessonIcon","renderAlerts","onSetDropdown","display","opacity","transform","width","height","circumference","Math","PI","rotation","cutoutPercentage","tooltips","floor","Component","propTypes","object","isRequired","func","index","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\nimport ClickOffComponentWrapper from '../../../../../../ClickOffComponentWrapper';\nimport statusColorMap, {chartColorMap} from '../../../../../DetailWorksheetPage/utils/statusColorMap';\n\nconst data = (current, target, status) => ({\n  datasets: [{\n    data: [current, target - current],\n    backgroundColor: [\n      chartColorMap[status],\n      '#eaeaea',\n    ],\n  }],\n})\n\n// const getProblemCompletionStatusColor = (solvedProblems, totalProblems) => {\n//   if (solvedProblems === totalProblems) {\n//     return calculateStatus(solvedProblems, totalProblems)\n//   } else if (solvedProblems < totalProblems ) {\n//     return '#333';\n//   }\n// }\n\n// const calculateStatus = (solvedProblems, totalProblems) => {\n//   if (solvedProblems / totalProblems >= 90) {\n//     return chartColorMap[exemplary]\n//   }\n//   if (solvedProblems / totalProblems >= 80) {\n//     return \"Developing\"\n//   }\n//   if (solvedProblems / totalProblems >= 70) {\n//     return \"DevelopingBelowAvg\"\n//   }\n//   return \"Beginning\"\n// }\n\n// assigned ? 'card-main card-lesson-detail card-assigned card' : 'card-main card-lesson-detail card'}\n\nconst getLessonActivityStatus = (status) => {\n  if (status === \"Scheduled\") {\n    return 'card-main card-lesson-detail card-disabled card-assigned card';\n  }\n  return 'card-main card-lesson-detail card-assigned card';\n}\n\nclass LessonCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: true,\n      dropdownIsOpen: false,\n    };\n  }\n\n  onSetDropdown = (dropdownIsOpen) => this.setState({ dropdownIsOpen: !dropdownIsOpen });\n\n  // eslint-disable-next-line consistent-return\n  renderLessonIcon = (subject) => {\n    switch (subject) {\n      case 'Reading':\n        return 'icon-books';\n      case 'Writing':\n        return 'icon-hands';\n      case 'Math':\n        return 'icon-calculator';\n      default:\n        break;\n    }\n  }\n\n  renderProblemCount = (assigned, totalProblems, solvedProblems) => {\n    if (assigned) {\n      return (\n        <span className=\"chart-value chart-value-column\" style={{ bottom: '8px', backgroundColor: getProblemCompletionStatusColor(solvedProblems, totalProblems) }}>\n          <span className=\"chart-count\" data-count-up data-start-val=\"0\" data-end-val=\"4\" data-duration=\"1\"><span className=\"text-large\">{solvedProblems}</span></span>\n          <span className=\"text-small\">out of</span> <span className=\"text-large\">{totalProblems}</span>\n        </span>\n      )\n    }\n    return (\n      <span className=\"chart-value chart-value-column\" style={{ bottom: '8px', backgroundColor: '#666' }}>\n        <span data-count-up data-start-val=\"0\" data-end-val=\"0\" data-duration=\"1\">\n          <span className=\"text-large\">{totalProblems}</span>\n          <span className=\"text-small\">problems</span>\n        </span>\n      </span>\n    )\n  }\n\n  renderProblemCompletionStatus = (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) => {\n    if (completed) {\n      return (\n        <React.Fragment>\n          <p>Completed <time dateTime=\"2018-11-18T20:43\">{completionDate} at {completionTime}</time>\n            {completedLate && (<span className=\"status status-late\"> (late)</span>)}\n          </p>\n        </React.Fragment>\n      )\n    }\n    if (availableDate) {\n      return (\n        <React.Fragment>\n          <p>Available <time dateTime=\"2018-12-13\">{availableDate}</time></p>\n          <p><time dateTime=\"2018-12-17\">(due {dueDate})</time></p>\n        </React.Fragment>\n      )\n    }\n    if (overdue) {\n      return (\n        <React.Fragment>\n          <strong className=\"text-large\" style={{ color: '#c1272d' }}>Overdue</strong>\n        </React.Fragment>\n      )\n    }\n    if (!availableDate && dueDate) {\n      return (\n        <React.Fragment>\n          <p>Due <time dateTime=\"2018-12-15\">{dueDate}</time></p>\n        </React.Fragment>\n      )\n    }\n    if (!assigned && !dueDate) {\n      return (\n        <React.Fragment>\n          <p>Not Assigned</p>\n        </React.Fragment>\n      )\n    }\n    return (\n      <React.Fragment>\n        <strong className=\"text-large\" style={{ color: '#006837' }}>Due Today at {dueTime}</strong>\n      </React.Fragment>\n    )\n  }\n\n  renderAlerts = (alerts) => {\n    if (alerts.length) {\n      return (\n          <span className=\"badge-rounded-xs badge red darken-2 white-text\"><b className=\"badge-text\">{alerts.length}</b> <i className=\"icon-flag\"></i></span>\n\n      )\n    }\n    return (\n      <div className=\"right-col col s3\">&nbsp;</div>\n    )\n  }\n\n  render() {\n    const { dropdownIsOpen } = this.state;\n    const { onDeleteLesson, onCloneLesson, lesson: { subject, status, score, unitNumber, lessonName, assigned, alerts,\n      lessonType, totalProblems, solvedProblems = '', passage, dueDate, dueTime,\n      completed, availableDate, completionDate, completionTime, completedLate, overdue } } = this.props;\n    return (\n      <div className=\"card-main-col col s12 m8 l7 xl5\">\n        <div className={getLessonActivityStatus(status)}>\n          <div className=\"card-panel\" style={{ backgroundColor: '#666', color: '#fff' }}>\n            <div className=\"card-panel-row row\">\n              <div className=\"icon-col col s1\">\n                <i className={this.renderLessonIcon(subject)}></i>\n              </div>\n              <div className=\"col s9\">\n                <div className=\"card-panel-text center-align\">\n                  <div className=\"text-small\">{subject} Unit {unitNumber}</div>\n                  <div className=\"text-large\">{lessonName}</div>\n                </div>\n              </div>\n              <div className=\"col s1 right-align\">\n                <div className=\"row icons-row\">\n                  {this.renderAlerts(alerts)}\n                  <div className=\"dropdown-block col\">\n                    <a\n                      className='dropdown-trigger btn'\n                      href='#'\n                      data-target='dropdown01'\n                      onClick={() => this.onSetDropdown(dropdownIsOpen)}\n                    ><i className=\"material-icons dots-icon\">more_vert</i></a>\n                    <If condition={dropdownIsOpen}>\n                      <ClickOffComponentWrapper onOuterClick={() => this.onSetDropdown(dropdownIsOpen)}>\n                        <ul id='dropdown01' className='dropdown-content dropdown-wide' style={{ display: \"block\", opacity: '1', transform: 'scaleX(1) scaleY(1)' }}>\n                          <li>\n                            <a href=\"#\" className=\"modal-trigger link-block\">Edit</a>\n                          </li>\n                          <li><a href=\"#!\" onClick={onCloneLesson}>Clone</a></li>\n                          <li><a href=\"#!\">Show Owner</a></li>\n                          <li><a href=\"#!\" onClick={onDeleteLesson}>Delete</a></li>\n                        </ul>\n                      </ClickOffComponentWrapper>\n                    </If>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"card-content\">\n            <div className=\"d-flex sameheight-all row mb-0\">\n              <div className=\"col s6\">\n                <div className=\"chart-container\">\n                  <div className=\"chart-holder\" style={{width: '140px', height: '95px'}}>\n                    <Choose>\n                      <When condition={completionDate}>\n                        <Doughnut\n                          data={() => data(score, totalProblems, status)}\n                          height={210}\n                          options={{\n                            circumference: 1.45 * Math.PI,\n                            rotation: -3.85,\n                            cutoutPercentage: 60,\n                            tooltips: false,\n                          }}\n                          />\n                      </When>\n                      <Otherwise>\n                      <Doughnut\n                          data={() => data(solvedProblems, totalProblems, status)}\n                          height={210}\n                          options={{\n                            circumference: 1.45 * Math.PI,\n                            rotation: -3.85,\n                            cutoutPercentage: 60,\n                            tooltips: false,\n                          }}\n                          />\n                      </Otherwise>\n                    </Choose>\n                    <span className=\"chart-value\" style={{ height: '50px', width: '50px', bottom: '6px', backgroundColor: 'black'}}><span data-count-up data-start-val=\"0\" data-end-val=\"96\" data-duration=\"1\"></span>\n                    <If condition={score !== \"\"}>\n                      <span className=\"percentage\">{Math.floor(`${score / totalProblems * 100}`)}%</span>\n                      </If>\n                      </span>\n                  </div>\n                  <div className=\"chart-row\">\n                    <div className=\"chart-col chart-start\">&nbsp;</div>\n                    <div className=\"chart-col chart-end\">\n                      <span className=\"amount\">{totalProblems}</span>\n                    </div>\n                  </div>\n                  {/* {this.renderProblemCount(assigned, totalProblems, solvedProblems)} */}\n                  <div className=\"chart-description\">\n                    <dl className=\"dl-horizontal\">\n                      <dt>Time Est:</dt>\n                      <dd>timeEstimate</dd>\n                    </dl>\n                    <dl className=\"dl-horizontal\">\n                      <dt>Problems:</dt>\n                      <dd>{totalProblems}</dd>\n                    </dl>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col s6 right-align justify-end\">\n                <dl className=\"dl-horizontal\">\n                  <dt>Available:</dt>\n                  <dd><time dateTime={availableDate}>{availableDate}</time></dd>\n                </dl>\n                <dl className={overdue ? 'dl-horizontal red-text text-darken-3' : 'dl-horizontal'}>\n                  <Choose>\n                    <When condition={!assigned}>\n                      <dt>No Due Date</dt>\n                    </When>\n                    <Otherwise>\n                      <dt>Due:</dt>\n                      <dd><time dateTime={dueDate}>{dueDate}</time></dd>\n                    </Otherwise>\n                  </Choose>\n                </dl>\n                <dl className=\"dl-horizontal\">\n                  <dt>Completed:</dt>\n                  <dd><time dateTime={completionDate}>{completionDate}</time></dd>\n                </dl>\n              <div className=\"align-self-end\">\n                <span className={`badge badge-rounded-md ${statusColorMap[status]} white-text`}>{status}</span>\n              </div>\n              </div>\n            </div>\n          </div>\n          \n            <div className=\"card-text\">\n              {/* {this.renderProblemCompletionStatus(dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned)} */}\n              <dl className=\"dl-horizontal\">\n                  <dt>p.{passage}</dt>\n                  <dd>({lessonType})</dd>\n                </dl>\n                {/* <div className=\"center-col col s6 center-align\">\n               \n                  <span className=\"meta-num\">p.{passage} </span>\n               \n                  <span className=\"meta-name\">({lessonType})</span>\n                </div>\n              */}\n        \n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nLessonCard.propTypes = {\n  lesson: PropTypes.object.isRequired,\n  onDeleteLesson: PropTypes.func.isRequired,\n  onCloneLesson: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default LessonCard;\n"]},"metadata":{},"sourceType":"module"}