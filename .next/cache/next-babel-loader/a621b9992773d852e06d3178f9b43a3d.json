{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar Actions = function Actions(_ref) {\n  var _ref$state = _ref.state,\n      ccAdmin = _ref$state.ccAdmin,\n      requireUserToChange = _ref$state.requireUserToChange,\n      password = _ref$state.password,\n      confirmPassword = _ref$state.confirmPassword,\n      handleActionsChange = _ref.handleActionsChange,\n      onResetPassword = _ref.onResetPassword,\n      onSendWelcomeEmail = _ref.onSendWelcomeEmail,\n      onSendPasswordResetEmail = _ref.onSendPasswordResetEmail;\n  return __jsx(\"div\", {\n    className: \"card-block\"\n  }, __jsx(\"h2\", null, \"Actions\"), __jsx(\"div\", {\n    className: \"row mb-0 d-flex-content large sameheight\"\n  }, __jsx(\"div\", {\n    className: \"col s12 l5\"\n  }, __jsx(\"div\", {\n    className: \"card\"\n  }, __jsx(\"div\", {\n    className: \"card-content\"\n  }, __jsx(\"div\", {\n    className: \"account-block\"\n  }, __jsx(\"h3\", null, \"Welcome Email\"), __jsx(\"p\", null, \"Use this feature to send (or resend) a welcome email to the student. The welcome email contains login instruction and a temporary password that the student can use to login for the \\uFB01rst time. Keep in mind that sending this email will automatically set a new, randomly generated password which may be confusing to the student if he or she has already received a welcome email or has already set a permanent password.\"), __jsx(\"p\", null, __jsx(\"button\", {\n    className: \"btn waves-effect waves-light bg-blue\",\n    name: \"action\",\n    onClick: onSendWelcomeEmail\n  }, \"(Re)send Welcome Email\")), __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"checkbox\",\n    className: \"filled-in\",\n    name: \"ccAdmin\",\n    id: \"cc-admin\",\n    value: ccAdmin,\n    onChange: function onChange() {\n      return handleActionsChange({}, 'ccAdmin', true);\n    }\n  }), __jsx(\"span\", {\n    className: \"large-label\"\n  }, \"cc me at:  this_is_me@gmail.com\"))), __jsx(\"div\", {\n    className: \"account-block\"\n  }, __jsx(\"h3\", null, \"Password Reset Email\"), __jsx(\"p\", null, \"The student will receive an email with a new temporary password. Keep in mind, the student's current password will no longer be valid..\"), __jsx(\"p\", null, __jsx(\"button\", {\n    className: \"btn waves-effect waves-light bg-blue\",\n    name: \"action\",\n    onClick: onSendPasswordResetEmail\n  }, \"Send Password Reset Email\")))))), __jsx(\"div\", {\n    className: \"col s12 l5\"\n  }, __jsx(\"div\", {\n    className: \"card\"\n  }, __jsx(\"div\", {\n    className: \"card-content\"\n  }, __jsx(\"div\", {\n    className: \"account-block\"\n  }, __jsx(\"h3\", null, \"Reset Password\"), __jsx(\"p\", null, \"The student will receive an email with a new temporary password. Keep in mind, the student's current password will no longer be valid.\"), __jsx(\"div\", {\n    className: \"row mb-0\"\n  }, __jsx(\"div\", {\n    className: \"input-field col s12 focus-blue\"\n  }, __jsx(\"input\", {\n    type: \"password\",\n    id: \"password\",\n    name: \"password\",\n    value: password,\n    onChange: function onChange(event) {\n      return handleActionsChange(event, 'password');\n    }\n  }), __jsx(\"label\", {\n    className: password.length ? 'label active' : 'label',\n    htmlFor: \"password\"\n  }, \"Password\"), __jsx(\"span\", {\n    className: \"note\"\n  }, \"6 to 20 characters\"))), __jsx(\"div\", {\n    className: \"row mb-0\"\n  }, __jsx(\"div\", {\n    className: \"input-field col s12 focus-blue\"\n  }, __jsx(\"input\", {\n    type: \"password\",\n    id: \"confirm-password\",\n    name: \"confirmPassword\",\n    value: confirmPassword,\n    onChange: function onChange(event) {\n      return handleActionsChange(event, 'confirmPassword');\n    }\n  }), __jsx(\"label\", {\n    className: confirmPassword.length ? 'label active' : 'label',\n    htmlFor: \"confirm-password\"\n  }, \"Confirm Password\"))), __jsx(\"p\", null, __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"checkbox\",\n    className: \"filled-in\",\n    id: \"require-user-to-change\",\n    name: \"requireUserToChange\",\n    value: requireUserToChange,\n    onChange: function onChange() {\n      return handleActionsChange({}, 'ccAdmin', true);\n    }\n  }), __jsx(\"span\", {\n    className: \"large-label\"\n  }, \"Require user to change\"))), __jsx(\"p\", null, __jsx(\"button\", {\n    className: \"btn waves-effect waves-light bg-blue\",\n    name: \"action\",\n    onClick: onResetPassword\n  }, \"Set Password\"))))))));\n};\n\nActions.propTypes = {\n  state: PropTypes.object.isRequired,\n  onResetPassword: PropTypes.func.isRequired,\n  handleActionsChange: PropTypes.func.isRequired,\n  onSendWelcomeEmail: PropTypes.func.isRequired,\n  onSendPasswordResetEmail: PropTypes.func.isRequired\n};\nexport default Actions;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/AccountPage/components/Actions/index.js"],"names":["React","PropTypes","Actions","state","ccAdmin","requireUserToChange","password","confirmPassword","handleActionsChange","onResetPassword","onSendWelcomeEmail","onSendPasswordResetEmail","event","length","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Actions = ({ state: { ccAdmin, requireUserToChange, password, confirmPassword }, handleActionsChange, onResetPassword, onSendWelcomeEmail, onSendPasswordResetEmail }) => (\n  <div className=\"card-block\">\n    <h2>Actions</h2>\n    <div className=\"row mb-0 d-flex-content large sameheight\">\n      <div className=\"col s12 l5\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"account-block\">\n              <h3>Welcome Email</h3>\n              <p>Use this feature to send (or resend) a welcome email to the student. The welcome email contains login instruction and a temporary password that the student can use to login for the Ô¨Årst time. Keep in mind that sending this email will automatically set a new, randomly generated password which may be confusing to the student if he or she has already received a welcome email or has already set a permanent password.</p>\n              <p>\n                <button\n                  className=\"btn waves-effect waves-light bg-blue\"\n                  name=\"action\"\n                  onClick={onSendWelcomeEmail}\n                >\n                  (Re)send Welcome Email\n                </button>\n              </p>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  className=\"filled-in\"\n                  name=\"ccAdmin\"\n                  id=\"cc-admin\"\n                  value={ccAdmin}\n                  onChange={() => handleActionsChange({}, 'ccAdmin', true)}\n                />\n                <span className=\"large-label\">cc me at:  this_is_me@gmail.com</span>\n              </label>\n            </div>\n            <div className=\"account-block\">\n              <h3>Password Reset Email</h3>\n              <p>{\"The student will receive an email with a new temporary password. Keep in mind, the student's current password will no longer be valid..\"}</p>\n              <p>\n                <button\n                  className=\"btn waves-effect waves-light bg-blue\"\n                  name=\"action\"\n                  onClick={onSendPasswordResetEmail}\n                >\n                  Send Password Reset Email\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"col s12 l5\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"account-block\">\n              <h3>Reset Password</h3>\n              <p>{\"The student will receive an email with a new temporary password. Keep in mind, the student's current password will no longer be valid.\"}</p>\n              <div className=\"row mb-0\">\n                <div className=\"input-field col s12 focus-blue\">\n                  <input\n                    type=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={(event) => handleActionsChange(event, 'password')}\n                  />\n                  <label className={password.length ? 'label active' : 'label'} htmlFor=\"password\">Password</label>\n                  <span className=\"note\">6 to 20 characters</span>\n                </div>\n              </div>\n              <div className=\"row mb-0\">\n                <div className=\"input-field col s12 focus-blue\">\n                  <input\n                    type=\"password\"\n                    id=\"confirm-password\"\n                    name=\"confirmPassword\"\n                    value={confirmPassword}\n                    onChange={(event) => handleActionsChange(event, 'confirmPassword')}\n                  />\n                  <label className={confirmPassword.length ? 'label active' : 'label'} htmlFor=\"confirm-password\">Confirm Password</label>\n                </div>\n              </div>\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    className=\"filled-in\"\n                    id=\"require-user-to-change\"\n                    name=\"requireUserToChange\"\n                    value={requireUserToChange}\n                    onChange={() => handleActionsChange({}, 'ccAdmin', true)}\n                  />\n                  <span className=\"large-label\">Require user to change</span>\n                </label>\n              </p>\n              <p>\n                <button\n                  className=\"btn waves-effect waves-light bg-blue\"\n                  name=\"action\"\n                  onClick={onResetPassword}\n                >\n                  Set Password\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nActions.propTypes = {\n  state: PropTypes.object.isRequired,\n  onResetPassword: PropTypes.func.isRequired,\n  handleActionsChange: PropTypes.func.isRequired,\n  onSendWelcomeEmail: PropTypes.func.isRequired,\n  onSendPasswordResetEmail: PropTypes.func.isRequired,\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}