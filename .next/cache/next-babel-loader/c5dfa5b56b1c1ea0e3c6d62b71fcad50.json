{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport Portal from '../../../../Portal';\nimport LessonListItem from './components/LessonListItem';\nimport { totalProblemsDescending, totalProblemsAscending, timeEstimate, timeEstimateAscending, subjectAscending, subjectDescending, passageAscending, passageDescending, lessonNameDescending, lessonNameAscending, statusDescending, statusAscending, flagsAscending, flagsDescending, lessonTypeAscending, lessonTypeDescending } from '../../../../utils/sortFunctions';\nimport ModalFilterSection from '../ModalFilterSection';\nimport AssignDatesModal from '../AssignDatesModal';\n\nclass AssignLessonModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onOpenDatesModal\", () => this.setState({\n      datesModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDatesModal\", () => this.setState({\n      datesModalOpen: false\n    }));\n\n    _defineProperty(this, \"onToggleChecked\", () => {\n      this.setState({\n        checked: !this.state.checked\n      }, () => this.onChecked());\n    });\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      statusFilters: [],\n      subjectFilters: [],\n      lessonTypeFilters: [],\n      unitFilter: \"\",\n      nameFilter: \"\"\n    }));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", lesson => this.setState({\n      nameFilter: lesson\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", filter => this.setState({\n      [filter]: \"\"\n    }));\n\n    _defineProperty(this, \"onSetUnitFilter\", unit => this.setState({\n      unitFilter: unit\n    }));\n\n    _defineProperty(this, \"onChecked\", () => {\n      const {\n        checkedLessons,\n        checked\n      } = this.state;\n\n      if (checked) {\n        let mappedLessons = this.getMappableLessons();\n\n        for (let i = 0; i < mappedLessons.length; i++) {\n          if (checkedLessons.indexOf(mappedLessons[i]) > -1) {\n            mappedLessons = mappedLessons.filter(lesson => checkedLessons.indexOf(lesson) === -1);\n          }\n        }\n\n        this.setState(prevState => {\n          prevState.checkedLessons.push(...mappedLessons);\n        });\n      } else this.setState({\n        checkedLessons: []\n      });\n    });\n\n    _defineProperty(this, \"onSortLessons\", lessons => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'subjectAscending':\n          return lessons.sort(subjectAscending);\n\n        case 'subjectDescending':\n          return lessons.sort(subjectDescending);\n\n        case 'passageAscending':\n          return lessons.sort(passageAscending);\n\n        case 'passageDescending':\n          return lessons.sort(passageDescending);\n\n        case 'statusAscending':\n          return lessons.sort(statusAscending);\n\n        case 'statusDescending':\n          return lessons.sort(statusDescending);\n\n        case 'flagsAscending':\n          return lessons.sort(flagsAscending);\n\n        case 'flagsDescending':\n          return lessons.sort(flagsDescending);\n\n        case 'lessonNameAscending':\n          return lessons.sort(lessonNameAscending);\n\n        case 'lessonNameDescending':\n          return lessons.sort(lessonNameDescending);\n\n        case 'lessonTypeAscending':\n          return lessons.sort(lessonTypeAscending);\n\n        case 'lessonTypeDescending':\n          return lessons.sort(lessonTypeDescending);\n\n        case 'timeEstimateDescending':\n          return lessons.sort(timeEstimate);\n\n        case 'timeEstimateAscending':\n          return lessons.sort(timeEstimateAscending);\n\n        case 'totalProblemsDescending':\n          return lessons.sort(totalProblemsDescending);\n\n        case 'totalProblemsAscending':\n          return lessons.sort(totalProblemsAscending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        lessons,\n        nameFilter\n      } = this.state;\n      return lessons.reduce((finalArr, currentLesson) => {\n        const {\n          lessonName\n        } = currentLesson;\n        const lessonString = lessonName.replace(/\\s/g, \"\").toLowerCase();\n\n        if (lessonString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n          finalArr.push(currentLesson);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterLessons\", () => {\n      const {\n        statusFilters,\n        subjectFilters,\n        lessonTypeFilters,\n        unitFilter,\n        lessons: allLessons\n      } = this.state;\n      let lessons = allLessons;\n\n      if (statusFilters.length && statusFilters.indexOf('all') === -1) {\n        if (statusFilters.indexOf(\"Unassigned\") !== -1) {\n          lessons = lessons.filter(lesson => statusFilters.indexOf(lesson.status) !== -1);\n        } else lessons = lessons.filter(lesson => lesson.assigned === true);\n      }\n\n      if (subjectFilters.length && subjectFilters.indexOf('all') === -1) {\n        lessons = lessons.filter(lesson => subjectFilters.indexOf(lesson.subject) !== -1);\n      }\n\n      if (lessonTypeFilters.length && lessonTypeFilters.indexOf('all') === -1) {\n        lessons = lessons.filter(lesson => lessonTypeFilters.indexOf(lesson.type) !== -1);\n      }\n\n      if (unitFilter.length && unitFilter.indexOf('all') === -1) {\n        lessons = lessons.filter(lesson => unitFilter.indexOf(lesson.unitNumber) !== -1);\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(this, \"onHandleDates\", (assignDate, assignTime, dueDate, dueTime) => {\n      const {\n        onAddUpdatedLessons\n      } = this.props;\n      const updatedLessons = [];\n      const {\n        checkedLessons: previousCheckedLessons\n      } = this.state;\n\n      for (let i = 0; i < previousCheckedLessons.length; i++) {\n        const updatedCheckedLessons = update(previousCheckedLessons[i], {\n          $merge: {\n            assigned: true,\n            dueDate: moment(dueDate).format('DD/MM/YYYY'),\n            dueTime,\n            availableDate: moment(assignDate).format(\"DD/MM/YYYY\"),\n            status: \"Scheduled\",\n            assignTime\n          }\n        });\n        updatedLessons.push(updatedCheckedLessons);\n      }\n\n      onAddUpdatedLessons(updatedLessons);\n      this.props.onCloseModal();\n    });\n\n    _defineProperty(this, \"setSortType\", name => {\n      const {\n        sort\n      } = this.state;\n\n      if (sort !== `${name}Ascending` && sort !== `${name}Descending`) {\n        this.onSetSort(`${name}Ascending`);\n      }\n\n      if (sort === `${name}Descending`) {\n        this.onSetSort(`${name}Ascending`);\n      } else {\n        this.onSetSort(`${name}Descending`);\n      }\n    });\n\n    _defineProperty(this, \"getMappableLessons\", () => {\n      const {\n        sort,\n        unitFilter,\n        lessons,\n        statusFilters,\n        subjectFilters,\n        lessonTypeFilters,\n        nameFilter\n      } = this.state;\n      let mappableLessons = lessons;\n\n      if (nameFilter.length) {\n        mappableLessons = this.onFilterByName();\n      }\n\n      if (statusFilters.length || unitFilter.length || lessonTypeFilters.length || subjectFilters.length) {\n        mappableLessons = this.onFilterLessons();\n      }\n\n      if (sort) {\n        return this.onSortLessons(mappableLessons);\n      }\n\n      return mappableLessons;\n    });\n\n    _defineProperty(this, \"handleCheckbox\", selectedLesson => {\n      const {\n        checkedLessons\n      } = this.state;\n      let updatedLessonArray;\n\n      if (checkedLessons.indexOf(selectedLesson) > -1) {\n        updatedLessonArray = checkedLessons.filter(lesson => lesson !== selectedLesson);\n      } else {\n        updatedLessonArray = [...checkedLessons, selectedLesson];\n      }\n\n      this.setState({\n        checkedLessons: updatedLessonArray\n      });\n    });\n\n    _defineProperty(this, \"handleFilterClick\", (filterType, filter) => {\n      const {\n        subjectFilters: currentSubjectFilters,\n        statusFilters: currentStatusFilters,\n        lessonTypeFilters: currentLessonTypeFilters\n      } = this.state;\n      let modifiedFilterCurrentState;\n      let modifiedFilterName;\n      let modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'status':\n          modifiedFilterCurrentState = currentStatusFilters;\n          modifiedFilterName = 'statusFilters';\n          break;\n\n        case 'lessonType':\n          modifiedFilterCurrentState = currentLessonTypeFilters;\n          modifiedFilterName = 'lessonTypeFilters';\n          break;\n\n        default:\n          break;\n      } // Decide whether we're adding or removing the selected filter\n\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        [modifiedFilterName]: modifiedFilterUpdatedState\n      });\n    });\n\n    _defineProperty(this, \"mapLessonListItem\", () => this.getMappableLessons().map((lesson, index) => __jsx(LessonListItem, {\n      lesson: lesson,\n      index: index,\n      selectAll: this.state.checked,\n      key: lesson.id,\n      onSelectLesson: this.onSelectLesson,\n      renderLessonIcon: this.renderLessonIcon,\n      checkedLessons: this.state.checkedLessons,\n      handleCheckbox: this.handleCheckbox\n    })));\n\n    _defineProperty(this, \"renderTableHeader\", () => __jsx(\"div\", {\n      className: \"list-table-row\"\n    }, __jsx(\"div\", {\n      className: \"list-table-cell icon-cell\"\n    }, __jsx(\"label\", {\n      htmlFor: \"selectAll\"\n    }, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"selectAll\",\n      defaultChecked: this.state.checked,\n      onChange: this.onToggleChecked,\n      className: \"filled-in\"\n    }), __jsx(\"span\", null, __jsx(\"b\", null, \"\\xA0\")))), __jsx(\"div\", {\n      className: \"list-table-cell icon-cell\"\n    }, \"\\xA0\"), __jsx(\"div\", {\n      className: \"list-table-cell name-cell\",\n      value: \"lessonName\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.setSortType(\"lessonName\")\n    }, __jsx(\"b\", null, \"Lesson\"))), __jsx(\"div\", {\n      className: \"list-table-cell name-cell\",\n      style: {\n        width: '100px',\n        paddingLeft: '237px'\n      }\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.setSortType(\"status\")\n    }, __jsx(\"b\", null, \"Status\"))), __jsx(\"div\", {\n      className: \"list-table-call completed-cell\"\n    }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\"), __jsx(\"div\", {\n      className: \"list-table-cell type-cell\",\n      style: {\n        marginLeft: '30px',\n        paddingLeft: '58px'\n      }\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.setSortType(\"subject\")\n    }, __jsx(\"b\", null, \"Subject\"))), __jsx(\"div\", {\n      className: \"list-table-cell completed-cell\",\n      style: {\n        paddingLeft: '56px'\n      }\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.setSortType(\"passage\")\n    }, __jsx(\"b\", null, \"Page\"))), __jsx(\"div\", {\n      className: \"list-table-cell completed-cell\",\n      style: {\n        marginLeft: '30px'\n      }\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.setSortType(\"timeEstimate\")\n    }, __jsx(\"b\", null, \"Time Est\"))), __jsx(\"div\", {\n      className: \"list-table-cell type-cell\",\n      style: {\n        marginLeft: '13px',\n        paddingLeft: '-1px'\n      }\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.setSortType(\"totalProblems\")\n    }, __jsx(\"b\", null, \"Problems\"))), __jsx(\"div\", {\n      className: \"list-table-cell completed-cell\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.setSortType(\"lessonType\")\n    }, __jsx(\"b\", null, \"Type\"))), __jsx(\"div\", {\n      className: \"list-table-cell flags-cell\"\n    }, __jsx(\"b\", null, \"\\xA0\")), __jsx(\"div\", {\n      className: \"list-table-cell flags-cell\"\n    }, __jsx(\"b\", null, \"\\xA0\")), __jsx(\"div\", {\n      className: \"list-table-cell flags-cell\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => this.setSortType(\"alerts\")\n    }, __jsx(\"b\", null, \"Flags\")))));\n\n    this.state = {\n      lessons: this.props.lessons,\n      statusFilters: [],\n      subjectFilters: [],\n      lessonTypeFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\",\n      checked: false,\n      checkedLessons: [],\n      datesModalOpen: false\n    };\n  }\n\n  render() {\n    const {\n      lessons,\n      subjectFilters,\n      statusFilters,\n      lessonTypeFilters\n    } = this.state;\n    const {\n      open,\n      onCloseModal\n    } = this.props;\n    return __jsx(Portal, {\n      selector: \"#modal\"\n    }, open && __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"overlay\"\n    }, __jsx(\"div\", {\n      id: \"assign-lesson-modal\",\n      className: \"jsx-3810222716\" + \" \" + \"modal modal-custom\"\n    }, __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"header-row card-panel light-blue lighten-1 white-text\"\n    }, __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"card-panel-row row\"\n    }, __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"col s3\"\n    }, \"\\xA0\"), __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"col s9 right-align\"\n    }, __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"row icons-row\"\n    }, \" \", __jsx(\"span\", {\n      className: \"jsx-3810222716\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onCloseModal,\n      className: \"jsx-3810222716\"\n    }, __jsx(\"i\", {\n      className: \"jsx-3810222716\" + \" \" + \"icon-close\"\n    })))))), __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"card-panel-row row\"\n    }, __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"icon-col col s1\"\n    }, __jsx(\"i\", {\n      className: \"jsx-3810222716\" + \" \" + \"icon-books\"\n    })), __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"col s9\"\n    }, __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"card-panel-text\"\n    }, __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"text-large\"\n    }, \"Assign Lessons\"))))), __jsx(\"div\", {\n      style: {\n        backgroundColor: '#f2f2f2'\n      },\n      className: \"jsx-3810222716\" + \" \" + \"content-section\"\n    }, __jsx(ModalFilterSection, {\n      handleFilterClick: this.handleFilterClick,\n      subjectFilters: subjectFilters,\n      statusFilters: statusFilters,\n      lessonTypeFilters: lessonTypeFilters,\n      onClearFilters: this.onClearFilters,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetSort: this.onSetSort,\n      onSetUnitFilter: this.onSetUnitFilter\n    }), __jsx(\"div\", {\n      style: {\n        marginTop: '50px'\n      },\n      className: \"jsx-3810222716\" + \" \" + \"container-md\"\n    }, __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"result-row center-align\"\n    }, __jsx(\"b\", {\n      className: \"jsx-3810222716\" + \" \" + \"result\"\n    }, \" - \", lessons.length, \" Lessons\")), __jsx(\"div\", {\n      style: {\n        margin: '0 -160px'\n      },\n      className: \"jsx-3810222716\" + \" \" + \"list-view-section\"\n    }, __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"list-table\"\n    }, __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"list-table-header\"\n    }, this.renderTableHeader()), __jsx(\"div\", {\n      className: \"jsx-3810222716\" + \" \" + \"list-table-body\"\n    }, this.mapLessonListItem())))))), __jsx(AssignDatesModal, {\n      open: this.state.datesModalOpen,\n      onCloseDatesModal: this.onCloseDatesModal,\n      onHandleDates: this.onHandleDates\n    }), __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onOpenDatesModal,\n      className: \"jsx-3810222716\" + \" \" + \"waves-effect waves-teal btn add-btn modal-trigger\"\n    }, __jsx(\"i\", {\n      className: \"jsx-3810222716\" + \" \" + \"material-icons\"\n    }, \"add\"), \"Assign Selected\")), __jsx(_JSXStyle, {\n      id: \"3810222716\"\n    }, [\".overlay.jsx-3810222716{position:fixed;background-color:rgba(0,0,0,0.7);top:0;right:0;bottom:0;left:0;z-index:999;}\", \"#assign-lesson-modal.jsx-3810222716{border-radius:6px;}\", \".modal.jsx-3810222716{display:block;background-color:white;position:absolute;top:13%;right:0%;left:14%;box-shadow:0 24px 38px 3px rgba(0,0,0,0.14),0 9px 46px 8px rgba(0,0,0,0.12),0 11px 15px -7px rgba(0,0,0,0.2);}\", \".modal-footer.jsx-3810222716{background-color:white;}\", \".modal-custom.jsx-3810222716{opacity:1;visibility:visible;max-width:1280px !important;}\", \"#assign-lessons-header.jsx-3810222716{background:rgb(24,181,233) !important background:linear-gradient(90deg,rgba(24,181,233,1) 0%,rgba(8,107,140,1) 100%) !important;}\"]));\n  }\n\n}\n\nexport default AssignLessonModal;","map":null,"metadata":{},"sourceType":"module"}