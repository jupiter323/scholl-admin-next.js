{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestScorePage/components/SectionScoreCard/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nvar SectionScoreCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SectionScoreCard, _React$Component);\n\n  function SectionScoreCard(props) {\n    var _this;\n\n    _classCallCheck(this, SectionScoreCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SectionScoreCard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getCircleBarData\", function (currentScore, totalPossible, name) {\n      return {\n        datasets: [{\n          data: [totalPossible, totalPossible - currentScore],\n          backgroundColor: _this.getBgColorByName(name)\n        }]\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getBgColorByName\", function (name) {\n      var bgColorList = _this.state.bgColorList;\n      var ids = bgColorList.map(function (element) {\n        return element.id;\n      });\n      var targetIndex = ids.findIndex(function (ids) {\n        return ids === name;\n      });\n      return bgColorList[targetIndex].colorString;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapSectionScores\", function () {\n      return _Object$values(_this.props.sectionScores).map(function (score) {\n        return __jsx(\"div\", {\n          className: \"col s6 center-align\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          className: \"chart-block chart-block-218\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, __jsx(Doughnut, {\n          data: function data() {\n            return _this.getCircleBarData(score.current_score, 800, score.name);\n          },\n          width: 215,\n          height: 215,\n          options: {\n            cutoutPercentage: 80\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }), __jsx(\"div\", {\n          className: \"chart-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          className: \"title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, score.name === 'Writing and Language' ? 'Writing & Language' : score.name), __jsx(\"span\", {\n          className: \"value\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, score.current_score), __jsx(\"span\", {\n          className: \"description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, \"(+\", score.delta ? score.delta : 0, \")\"))));\n      });\n    });\n\n    _this.state = {\n      bgColorList: [{\n        id: \"Writing and Language\",\n        colorString: [\"#51b349\", \"rgb(234, 234, 234)\"]\n      }, {\n        id: \"Reading\",\n        colorString: [\"#35a6af\", \"rgb(234, 234, 234)\"]\n      }, {\n        id: \"Math\",\n        colorString: [\"#567ebf\", \"rgb(234, 234, 234)\"]\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(SectionScoreCard, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"col s12 l6 card-width-546\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Section Scores \", __jsx(\"span\", {\n        className: \"separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"|\"), __jsx(\"span\", {\n        className: \"quantity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"200 to 800\")), __jsx(\"div\", {\n        className: \"card-main-full card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"several-charts-row row mb-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, this.props.sectionScores && this.mapSectionScores())))));\n    }\n  }]);\n\n  return SectionScoreCard;\n}(React.Component);\n\nSectionScoreCard.propTypes = {\n  sectionScores: PropTypes.object.isRequired\n};\nexport default SectionScoreCard;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestScorePage/components/SectionScoreCard/index.js"],"names":["React","PropTypes","Doughnut","SectionScoreCard","props","currentScore","totalPossible","name","datasets","data","backgroundColor","getBgColorByName","bgColorList","state","ids","map","element","id","targetIndex","findIndex","colorString","sectionScores","score","getCircleBarData","current_score","cutoutPercentage","delta","mapSectionScores","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nclass SectionScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColorList: [\n        {\n          id: \"Writing and Language\",\n          colorString: [\"#51b349\", \"rgb(234, 234, 234)\"],\n        },\n        {\n          id: \"Reading\",\n          colorString: [\"#35a6af\", \"rgb(234, 234, 234)\"],\n        },\n        {\n          id: \"Math\",\n          colorString: [\"#567ebf\", \"rgb(234, 234, 234)\"],\n        },\n      ],\n    };\n  }\n  getCircleBarData = (currentScore, totalPossible, name) => ({\n    datasets: [\n      {\n        data: [totalPossible, totalPossible - currentScore],\n        backgroundColor: this.getBgColorByName(name),\n      },\n    ],\n  });\n\n  getBgColorByName = (name) => {\n    const { bgColorList } = this.state;\n    const ids = bgColorList.map(element => element.id);\n    const targetIndex = ids.findIndex(ids => ids === name);\n    return bgColorList[targetIndex].colorString;\n  }\n\n  mapSectionScores = () => Object.values(this.props.sectionScores).map(score => (\n    <div className=\"col s6 center-align\">\n      <div className=\"chart-block chart-block-218\">\n        <Doughnut\n          data={() =>\n            this.getCircleBarData(score.current_score, 800, score.name)\n          }\n          width={215}\n          height={215}\n          options={{\n            cutoutPercentage: 80,\n          }}\n        />\n        <div className=\"chart-text\">\n          <span className=\"title\">{score.name === 'Writing and Language' ? 'Writing & Language' : score.name}</span>\n          <span className=\"value\">{score.current_score}</span>\n          <span className=\"description\">(+{score.delta ? score.delta : 0})</span>\n        </div>\n      </div>\n    </div>\n  ))\n  render() {\n    return (\n      <div className=\"col s12 l6 card-width-546\">\n        <div className=\"card-block\">\n          <h2>\n            Section Scores <span className=\"separator\">|</span>\n            <span className=\"quantity\">200 to 800</span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content\">\n              <div className=\"several-charts-row row mb-0\">\n                {this.props.sectionScores && this.mapSectionScores()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nSectionScoreCard.propTypes = {\n  sectionScores: PropTypes.object.isRequired,\n};\nexport default SectionScoreCard;\n"]},"metadata":{},"sourceType":"module"}