{"ast":null,"code":"const sortByOptions = [{\n  label: 'Available On Date',\n  value: 'availableDate'\n}, {\n  label: 'Due Date',\n  value: 'dueDate'\n}, {\n  label: 'Problems',\n  value: 'problems'\n}, {\n  label: 'Time Estimate',\n  value: 'timeEstimate'\n}, {\n  label: 'Status',\n  value: 'status'\n}, {\n  label: 'Subject',\n  value: 'subject'\n}, {\n  label: 'Flags',\n  value: 'flags'\n}, {\n  label: 'Percentage Complete',\n  value: 'percentageComplete'\n}];\nexport const availableDateSort = ({\n  availableDate: availableDateA\n}, {\n  availableDate: availableDateB\n}) => {\n  if (availableDateA > availableDateB) {\n    return -1;\n  }\n\n  return 0;\n};\nexport const dueDateSort = ({\n  dueDate: dueDateA\n}, {\n  dueDate: dueDateB\n}) => {\n  if (dueDateA > dueDateB) {\n    return -1;\n  }\n\n  return 0;\n};\nexport const statusSort = ({\n  status: statusA\n}, {\n  status: statusB\n}) => {\n  if (statusA > statusB) {\n    return -1;\n  }\n\n  return 0;\n};\nexport const flagsSort = ({\n  flags: flagsA\n}, {\n  flags: flagsB\n}) => {\n  if (flagsA > flagsB) {\n    return -1;\n  }\n\n  return 0;\n};\nexport const problemSort = ({\n  problems: problemCountA\n}, {\n  problems: problemCountB\n}) => {\n  if (problemCountA > problemCountB) {\n    return -1;\n  }\n\n  return 0;\n};\nexport const timeEstimateSort = ({\n  timeEstimate: timeEstimateA\n}, {\n  timeEstimate: timeEstimateB\n}) => {\n  if (timeEstimateA > timeEstimateB) {\n    return -1;\n  }\n\n  return 0;\n};\nexport const subjectSort = ({\n  subject: subjectA\n}, {\n  subject: subjectB\n}) => {\n  if (subjectA > subjectB) {\n    return -1;\n  }\n\n  return 0;\n};\nexport const percentageCompleteSort = ({\n  percentageComplete: percentageCompleteA\n}, {\n  percentageComplete: percentageCompleteB\n}) => {\n  if (percentageCompleteA > percentageCompleteB) {\n    return -1;\n  }\n\n  return 0;\n};\nexport default sortByOptions;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Classes/utils/sortOptions.js"],"names":["sortByOptions","label","value","availableDateSort","availableDate","availableDateA","availableDateB","dueDateSort","dueDate","dueDateA","dueDateB","statusSort","status","statusA","statusB","flagsSort","flags","flagsA","flagsB","problemSort","problems","problemCountA","problemCountB","timeEstimateSort","timeEstimate","timeEstimateA","timeEstimateB","subjectSort","subject","subjectA","subjectB","percentageCompleteSort","percentageComplete","percentageCompleteA","percentageCompleteB"],"mappings":"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","sourcesContent":["const sortByOptions = [\n  {\n    label: 'Available On Date',\n    value: 'availableDate',\n  },\n  {\n    label: 'Due Date',\n    value: 'dueDate',\n  },\n  {\n    label: 'Problems',\n    value: 'problems',\n  },\n  {\n    label: 'Time Estimate',\n    value: 'timeEstimate',\n  },\n  {\n    label: 'Status',\n    value: 'status',\n  },\n  {\n    label: 'Subject',\n    value: 'subject',\n  },\n  {\n    label: 'Flags',\n    value: 'flags',\n  },\n  {\n    label: 'Percentage Complete',\n    value: 'percentageComplete',\n  },\n];\n\nexport const availableDateSort = ({ availableDate: availableDateA }, { availableDate: availableDateB }) => {\n  if (availableDateA > availableDateB) { return -1; }\n  return 0;\n}\n\nexport const dueDateSort = ({ dueDate: dueDateA }, { dueDate: dueDateB }) => {\n  if (dueDateA > dueDateB) { return -1; }\n  return 0;\n}\n\nexport const statusSort = ({ status: statusA }, { status: statusB }) => {\n  if (statusA > statusB) { return -1; }\n  return 0;\n}\n\nexport const flagsSort = ({ flags: flagsA }, { flags: flagsB }) => {\n  if (flagsA > flagsB) { return -1; }\n  return 0;\n}\n\nexport const problemSort = ({ problems: problemCountA }, { problems: problemCountB }) => {\n  if (problemCountA > problemCountB) { return -1; }\n  return 0;\n}\n\nexport const timeEstimateSort = ({ timeEstimate: timeEstimateA }, { timeEstimate: timeEstimateB }) => {\n  if (timeEstimateA > timeEstimateB) { return -1; }\n  return 0;\n}\n\nexport const subjectSort = ({ subject: subjectA }, { subject: subjectB }) => {\n  if (subjectA > subjectB) { return -1; }\n  return 0;\n}\n\nexport const percentageCompleteSort = ({ percentageComplete: percentageCompleteA }, { percentageComplete: percentageCompleteB }) => {\n  if (percentageCompleteA > percentageCompleteB) { return -1; }\n  return 0;\n}\n\nexport default sortByOptions;\n"]},"metadata":{},"sourceType":"module"}