{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getProblemCompletionStatusColor, getLessonActivityStatus } from '../../utils';\n\nvar LessonCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LessonCard, _React$Component);\n\n  function LessonCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LessonCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LessonCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDropdownClick\", function (event) {\n      var _this$props = _this.props,\n          onSetDropdown = _this$props.onSetDropdown,\n          onCloseDropdown = _this$props.onCloseDropdown,\n          dropdownIsOpen = _this$props.dropdownIsOpen,\n          index = _this$props.index;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderLessonIcon\", function (subject) {\n      switch (subject) {\n        case 'Reading':\n          return 'icon-books';\n\n        case 'Writing':\n          return 'icon-hands';\n\n        case 'Math':\n          return 'icon-calculator';\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProblemCount\", function (assigned, totalProblems, solvedProblems) {\n      if (assigned) {\n        return React.createElement(\"span\", {\n          className: \"chart-value chart-value-column\",\n          style: getProblemCompletionStatusColor(solvedProblems, totalProblems)\n        }, React.createElement(\"span\", {\n          className: \"chart-count\",\n          \"data-count-up\": true,\n          \"data-start-val\": \"0\",\n          \"data-end-val\": \"4\",\n          \"data-duration\": \"1\"\n        }, React.createElement(\"span\", {\n          className: \"text-large\"\n        }, solvedProblems)), React.createElement(\"span\", {\n          className: \"text-small\"\n        }, \"out of\"), \" \", React.createElement(\"span\", {\n          className: \"text-large\"\n        }, totalProblems));\n      }\n\n      return React.createElement(\"span\", {\n        className: \"chart-value chart-value-column\",\n        style: {\n          backgroundColor: '#666'\n        }\n      }, React.createElement(\"span\", {\n        \"data-count-up\": true,\n        \"data-start-val\": \"0\",\n        \"data-end-val\": \"0\",\n        \"data-duration\": \"1\"\n      }, React.createElement(\"span\", {\n        className: \"text-large\"\n      }, totalProblems), React.createElement(\"span\", {\n        className: \"text-small\"\n      }, \"problems\")));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProblemCompletionStatus\", function (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) {\n      if (completed) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Completed \", React.createElement(\"time\", {\n          dateTime: \"2018-11-18T20:43\"\n        }, completionDate, \" at \", completionTime), completedLate && React.createElement(\"span\", {\n          className: \"status status-late\"\n        }, \" (late)\")));\n      }\n\n      if (availableDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Available \", React.createElement(\"time\", {\n          dateTime: \"2018-12-13\"\n        }, availableDate)), React.createElement(\"p\", null, React.createElement(\"time\", {\n          dateTime: \"2018-12-17\"\n        }, \"(due \", dueDate, \")\")));\n      }\n\n      if (overdue) {\n        return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n          className: \"text-large\",\n          style: {\n            color: '#c1272d'\n          }\n        }, \"Overdue\"));\n      }\n\n      if (!availableDate && dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Due \", React.createElement(\"time\", {\n          dateTime: \"2018-12-15\"\n        }, dueDate)));\n      }\n\n      if (!assigned && !dueDate) {\n        return React.createElement(React.Fragment, null, React.createElement(\"p\", null, \"Not Assigned\"));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n        className: \"text-large\",\n        style: {\n          color: '#006837'\n        }\n      }, \"Due Today at \", dueTime));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderAlerts\", function (alerts) {\n      if (alerts.length) {\n        return React.createElement(\"div\", {\n          className: \"right-col col s3\"\n        }, React.createElement(\"span\", {\n          className: \"badge-rounded badge red darken-2 white-text\"\n        }, React.createElement(\"b\", {\n          className: \"badge-text\"\n        }, alerts.length), \" \", React.createElement(\"i\", {\n          className: \"icon-flag\"\n        })));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"right-col col s3\"\n      }, \"\\xA0\");\n    });\n\n    return _this;\n  }\n\n  _createClass(LessonCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          _this$props2$lesson = _this$props2.lesson,\n          subject = _this$props2$lesson.subject,\n          unitNumber = _this$props2$lesson.unitNumber,\n          lessonName = _this$props2$lesson.lessonName,\n          assigned = _this$props2$lesson.assigned,\n          alerts = _this$props2$lesson.alerts,\n          lessonType = _this$props2$lesson.lessonType,\n          totalProblems = _this$props2$lesson.totalProblems,\n          _this$props2$lesson$s = _this$props2$lesson.solvedProblems,\n          solvedProblems = _this$props2$lesson$s === void 0 ? '' : _this$props2$lesson$s,\n          passage = _this$props2$lesson.passage,\n          dueDate = _this$props2$lesson.dueDate,\n          dueTime = _this$props2$lesson.dueTime,\n          completed = _this$props2$lesson.completed,\n          availableDate = _this$props2$lesson.availableDate,\n          completionDate = _this$props2$lesson.completionDate,\n          completionTime = _this$props2$lesson.completionTime,\n          completedLate = _this$props2$lesson.completedLate,\n          overdue = _this$props2$lesson.overdue,\n          dropdownIsOpen = _this$props2.dropdownIsOpen,\n          dropdownIndex = _this$props2.dropdownIndex,\n          onToggleDetailModalOpen = _this$props2.onToggleDetailModalOpen,\n          index = _this$props2.index;\n      return React.createElement(\"div\", {\n        className: \"card-main-col col s12 m8 l7 xl5\"\n      }, React.createElement(\"div\", {\n        className: getLessonActivityStatus(assigned, dueDate)\n      }, React.createElement(\"div\", {\n        className: \"card-panel\",\n        style: {\n          backgroundColor: '#666',\n          color: '#fff'\n        }\n      }, React.createElement(\"div\", {\n        className: \"card-panel-row row\"\n      }, React.createElement(\"div\", {\n        className: \"icon-col col s1\"\n      }, React.createElement(\"i\", {\n        className: this.renderLessonIcon(subject)\n      })), React.createElement(\"div\", {\n        className: \"col s9\"\n      }, React.createElement(\"div\", {\n        className: \"card-panel-text center-align\"\n      }, React.createElement(\"div\", {\n        className: \"text-small\"\n      }, subject, \" Unit \", unitNumber), React.createElement(\"div\", {\n        className: \"text-large\"\n      }, lessonName))), React.createElement(\"div\", {\n        className: \"col s1 right-align\"\n      }, React.createElement(\"div\", {\n        className: \"row icons-row\"\n      }, React.createElement(\"div\", {\n        className: \"dropdown-block col\"\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        \"data-target\": \"dropdown01\",\n        className: \"dropdown-trigger btn\",\n        onClick: this.handleDropdownClick\n      }, React.createElement(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? React.createElement(\"ul\", {\n        id: \"dropdown01\",\n        className: \"dropdown-content dropdown-wide\",\n        style: {\n          display: 'block',\n          transformOrigin: '0px 0px 0px',\n          opacity: '1',\n          transform: 'scaleX(1) scaleY(1)'\n        }\n      }, React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: function onClick() {\n          return onToggleDetailModalOpen(index);\n        },\n        className: \"modal-trigger link-block\"\n      }, \"Edit\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Clone\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Show Owner\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n        href: \"#\"\n      }, \"Delete\"))) : null))))), React.createElement(\"div\", {\n        className: \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"card-top-row row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"left-col col s3\"\n      }, React.createElement(\"span\", {\n        className: \"meta-num\"\n      }, \"p.\", passage)), React.createElement(\"div\", {\n        className: \"center-col col s6 center-align\"\n      }, React.createElement(\"span\", {\n        className: \"meta-name\"\n      }, \"(\", lessonType, \")\")), this.renderAlerts(alerts)), React.createElement(\"div\", {\n        className: \"chart-container chart-container-xlarge\"\n      }, React.createElement(\"div\", {\n        className: \"chart-holder\"\n      }, React.createElement(\"span\", {\n        className: \"svg-curved-bar\",\n        \"data-values\": \"{\\\"from\\\": 0, \\\"to\\\": 0, \\\"current\\\": 0}\",\n        \"data-duration\": \"1\"\n      }, React.createElement(\"svg\", {\n        width: \"207px\",\n        height: \"207px\",\n        viewBox: \"0 0 207 207\",\n        preserveAspectRatio: \"xMidYMid meet\"\n      }, React.createElement(\"path\", {\n        fill: \"none\",\n        style: {\n          strokeWidth: '42',\n          stroke: '#eaeaea'\n        },\n        d: \"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 1 1 180.09035447382598 134.16215259197702\"\n      }), React.createElement(\"path\", {\n        \"data-dinamic\": true,\n        fill: \"none\",\n        style: {\n          strokeWidth: '42',\n          stroke: '#62b771'\n        },\n        d: \"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 0 1 26.909645526174018 134.16215259197702\"\n      }))), this.renderProblemCount(assigned, totalProblems, solvedProblems))), React.createElement(\"div\", {\n        className: \"card-footer-row center-align\"\n      }, React.createElement(\"div\", {\n        className: \"card-footer-holder\"\n      }, this.renderProblemCompletionStatus(dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned))))));\n    }\n  }]);\n\n  return LessonCard;\n}(React.Component);\n\nLessonCard.propTypes = {\n  dropdownIndex: PropTypes.number,\n  index: PropTypes.number.isRequired,\n  lesson: PropTypes.object.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onToggleDetailModalOpen: PropTypes.func.isRequired\n};\nexport default LessonCard;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/DetailLessonList/components/LessonCard/index.js"],"names":["React","PropTypes","getProblemCompletionStatusColor","getLessonActivityStatus","LessonCard","event","props","onSetDropdown","onCloseDropdown","dropdownIsOpen","index","preventDefault","subject","assigned","totalProblems","solvedProblems","backgroundColor","dueTime","completed","completionDate","completionTime","completedLate","availableDate","dueDate","overdue","color","alerts","length","lesson","unitNumber","lessonName","lessonType","passage","dropdownIndex","onToggleDetailModalOpen","renderLessonIcon","handleDropdownClick","display","transformOrigin","opacity","transform","renderAlerts","strokeWidth","stroke","renderProblemCount","renderProblemCompletionStatus","Component","propTypes","number","isRequired","object","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getProblemCompletionStatusColor, getLessonActivityStatus } from '../../utils';\n\nclass LessonCard extends React.Component {\n  handleDropdownClick = (event) => {\n    const { onSetDropdown, onCloseDropdown, dropdownIsOpen, index } = this.props;\n    event.preventDefault();\n    if (dropdownIsOpen) {\n      return onCloseDropdown();\n    }\n    return onSetDropdown(index);\n  }\n\n  // eslint-disable-next-line consistent-return\n  renderLessonIcon = (subject) => {\n    switch (subject) {\n      case 'Reading':\n        return 'icon-books';\n      case 'Writing':\n        return 'icon-hands';\n      case 'Math':\n        return 'icon-calculator';\n      default:\n        break;\n    }\n  }\n\n  renderProblemCount = (assigned, totalProblems, solvedProblems) => {\n    if (assigned) {\n      return (\n        <span className=\"chart-value chart-value-column\" style={getProblemCompletionStatusColor(solvedProblems, totalProblems)}>\n          <span className=\"chart-count\" data-count-up data-start-val=\"0\" data-end-val=\"4\" data-duration=\"1\"><span className=\"text-large\">{solvedProblems}</span></span>\n          <span className=\"text-small\">out of</span> <span className=\"text-large\">{totalProblems}</span>\n        </span>\n      )\n    }\n    return (\n      <span className=\"chart-value chart-value-column\" style={{ backgroundColor: '#666' }}>\n        <span data-count-up data-start-val=\"0\" data-end-val=\"0\" data-duration=\"1\">\n          <span className=\"text-large\">{totalProblems}</span>\n          <span className=\"text-small\">problems</span>\n        </span>\n      </span>\n    )\n  }\n\n  renderProblemCompletionStatus = (dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned) => {\n    if (completed) {\n      return (\n        <React.Fragment>\n          <p>Completed <time dateTime=\"2018-11-18T20:43\">{completionDate} at {completionTime}</time>\n            {completedLate && (<span className=\"status status-late\"> (late)</span>)}\n          </p>\n        </React.Fragment>\n      )\n    }\n    if (availableDate) {\n      return (\n        <React.Fragment>\n          <p>Available <time dateTime=\"2018-12-13\">{availableDate}</time></p>\n          <p><time dateTime=\"2018-12-17\">(due {dueDate})</time></p>\n        </React.Fragment>\n      )\n    }\n    if (overdue) {\n      return (\n        <React.Fragment>\n          <strong className=\"text-large\" style={{ color: '#c1272d' }}>Overdue</strong>\n        </React.Fragment>\n      )\n    }\n    if (!availableDate && dueDate) {\n      return (\n        <React.Fragment>\n          <p>Due <time dateTime=\"2018-12-15\">{dueDate}</time></p>\n        </React.Fragment>\n      )\n    }\n    if (!assigned && !dueDate) {\n      return (\n        <React.Fragment>\n          <p>Not Assigned</p>\n        </React.Fragment>\n      )\n    }\n    return (\n      <React.Fragment>\n        <strong className=\"text-large\" style={{ color: '#006837' }}>Due Today at {dueTime}</strong>\n      </React.Fragment>\n    )\n  }\n\n  renderAlerts = (alerts) => {\n    if (alerts.length) {\n      return (\n        <div className=\"right-col col s3\">\n          <span className=\"badge-rounded badge red darken-2 white-text\"><b className=\"badge-text\">{alerts.length}</b> <i className=\"icon-flag\"></i></span>\n        </div>\n      )\n    }\n    return (\n      <div className=\"right-col col s3\">&nbsp;</div>\n    )\n  }\n\n  render() {\n    const { lesson: { subject, unitNumber, lessonName, assigned, alerts, lessonType,\n      totalProblems, solvedProblems = '', passage, dueDate, dueTime, completed, availableDate,\n      completionDate, completionTime, completedLate, overdue }, dropdownIsOpen, dropdownIndex,\n      onToggleDetailModalOpen, index } = this.props;\n    return (\n      <div className=\"card-main-col col s12 m8 l7 xl5\">\n       <div className={getLessonActivityStatus(assigned, dueDate)}>\n         <div className=\"card-panel\" style={{ backgroundColor: '#666', color: '#fff' }}>\n           <div className=\"card-panel-row row\">\n             <div className=\"icon-col col s1\">\n               <i className={this.renderLessonIcon(subject)}></i>\n             </div>\n             <div className=\"col s9\">\n               <div className=\"card-panel-text center-align\">\n                 <div className=\"text-small\">{subject} Unit {unitNumber}</div>\n                 <div className=\"text-large\">{lessonName}</div>\n               </div>\n             </div>\n             <div className=\"col s1 right-align\">\n               <div className=\"row icons-row\">\n                 <div className=\"dropdown-block col\">\n                   <a\n                     href='#'\n                     data-target='dropdown01'\n                     className='dropdown-trigger btn'\n                     onClick={this.handleDropdownClick}\n                   >\n                    <i className=\"material-icons dots-icon\">more_vert</i>\n                   </a>\n                   <If condition={dropdownIsOpen && dropdownIndex === index}>\n                     <ul\n                       id='dropdown01'\n                       className='dropdown-content dropdown-wide'\n                       style={{ display: 'block', transformOrigin: '0px 0px 0px', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}\n                     >\n                       <li>\n                         <a href=\"#\" onClick={() => onToggleDetailModalOpen(index)} className=\"modal-trigger link-block\">Edit</a>\n                       </li>\n                       <li><a href=\"#\">Clone</a></li>\n                       <li><a href=\"#\">Show Owner</a></li>\n                       <li><a href=\"#\">Delete</a></li>\n                     </ul>\n                   </If>\n                 </div>\n               </div>\n             </div>\n           </div>\n         </div>\n         <div className=\"card-content\">\n           <div className=\"card-top-row row mb-0\">\n             <div className=\"left-col col s3\">\n               <span className=\"meta-num\">p.{passage}</span>\n             </div>\n             <div className=\"center-col col s6 center-align\">\n               <span className=\"meta-name\">({lessonType})</span>\n             </div>\n             {this.renderAlerts(alerts)}\n           </div>\n           <div className=\"chart-container chart-container-xlarge\">\n             <div className=\"chart-holder\">\n               <span className=\"svg-curved-bar\" data-values='{\"from\": 0, \"to\": 0, \"current\": 0}' data-duration=\"1\">\n                 <svg  width=\"207px\" height=\"207px\" viewBox=\"0 0 207 207\" preserveAspectRatio=\"xMidYMid meet\">\n                   <path fill=\"none\" style={{ strokeWidth: '42', stroke: '#eaeaea' }} d=\"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 1 1 180.09035447382598 134.16215259197702\"></path>\n                   <path data-dinamic fill=\"none\" style={{ strokeWidth: '42', stroke: '#62b771' }} d=\"M 26.909645526174018 134.16215259197702 A 82.5 82.5 0 0 1 26.909645526174018 134.16215259197702\"></path>\n                 </svg>\n               </span>\n               {this.renderProblemCount(assigned, totalProblems, solvedProblems)}\n             </div>\n           </div>\n           <div className=\"card-footer-row center-align\">\n             <div className=\"card-footer-holder\">\n               {this.renderProblemCompletionStatus(dueTime, completed, completionDate, completionTime, completedLate, availableDate, dueDate, overdue, assigned)}\n             </div>\n           </div>\n         </div>\n       </div>\n      </div>\n    );\n  }\n}\n\nLessonCard.propTypes = {\n  dropdownIndex: PropTypes.number,\n  index: PropTypes.number.isRequired,\n  lesson: PropTypes.object.isRequired,\n  onSetDropdown: PropTypes.func.isRequired,\n  dropdownIsOpen: PropTypes.bool.isRequired,\n  onCloseDropdown: PropTypes.func.isRequired,\n  onToggleDetailModalOpen: PropTypes.func.isRequired,\n};\n\nexport default LessonCard;\n"]},"metadata":{},"sourceType":"module"}