{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport DashboardCard from '../DashboardCard';\nimport sampleSessions from '../../utils/sampleUpComingSessions';\nimport * as moment from 'moment';\n\nvar SessionList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SessionList, _Component);\n\n  function SessionList() {\n    _classCallCheck(this, SessionList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SessionList).apply(this, arguments));\n  }\n\n  _createClass(SessionList, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"dashboard-card card\"\n      }, sampleSessions.sessions.map(function (element, key) {\n        console.log(element);\n        return __jsx(\"div\", {\n          className: \"card-content\",\n          key: element.key\n        }, __jsx(\"h2\", {\n          className: \"dashboard-title\"\n        }, __jsx(\"time\", {\n          dateTime: \"2019-02-02\"\n        }, element.datetime), __jsx(\"span\", {\n          className: \"small\"\n        }, \" \", SessionList.getDateName(moment(element.datetime, 'M/D/YYYY')))), __jsx(\"div\", {\n          className: \"row d-flex-content card-width-366 mb-0\"\n        }, element.sessions.map(function (session) {\n          return __jsx(DashboardCard, {\n            sessionStats: session.sessionStats,\n            testStats: session.testStats,\n            user: session.user,\n            key: session.uuid\n          });\n        })));\n      }));\n    }\n  }], [{\n    key: \"getDateName\",\n    value: function getDateName(datetime) {\n      if (moment().isSame(moment(datetime, 'M/D/YYYY'), 'day')) {\n        return 'Today';\n      } else if (moment().add(1, 'days').isSame(moment(datetime, 'M/D/YYYY'), 'day')) {\n        return 'Tomorrow';\n      }\n\n      return 'Other';\n    }\n  }]);\n\n  return SessionList;\n}(Component);\n\nexport default SessionList;","map":null,"metadata":{},"sourceType":"module"}