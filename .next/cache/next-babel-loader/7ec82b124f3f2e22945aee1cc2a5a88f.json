{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2'; // import { data, subjectMap, testSectionCardColorMap, graphColorMap } from '../../../utils/testSectionCardUtils';\n\nexport const data = percentage => ({\n  datasets: [{\n    data: [percentage, 100 - percentage],\n    backgroundColor: ['#00bbf7', '#eaeaea']\n  }]\n});\n\nclass TestCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleDropdownClick\", event => {\n      const {\n        onSetDropdown,\n        onCloseDropdown,\n        dropdownIsOpen,\n        index\n      } = this.props;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n\n    _defineProperty(this, \"mapTestSubjects\", () => {\n      const {\n        test,\n        futureTest\n      } = this.props;\n      const {\n        subjects\n      } = test;\n      return subjects.map((subject, index) => __jsx(\"div\", {\n        className: \"chart-block chart-block-test\",\n        key: index\n      }, !futureTest ? [__jsx(Doughnut, {\n        data: () => data(subjects.length ? subject.currentScore / subject.targetScore * 100 : 0),\n        height: 104,\n        width: 104,\n        options: {\n          cutoutPercentage: 80\n        },\n        key: \"0\"\n      }), __jsx(\"span\", {\n        className: \"value-max\",\n        style: {\n          top: '0px'\n        },\n        key: \"1\"\n      }, subject.targetScore)] : [__jsx(\"span\", {\n        className: \"value-max\",\n        key: \"0\"\n      }, subject.targetScore), __jsx(\"div\", {\n        className: \"js-donut-chart\",\n        \"data-stroke-width\": \"15\",\n        \"data-source\": \"./inc/score-data-test-reading.json\",\n        key: \"1\"\n      })], __jsx(\"div\", {\n        className: \"chart-text\"\n      }, subject.subject === 'Reading & Writing' && !futureTest ? __jsx(\"span\", {\n        className: \"title\"\n      }, \"Reading \", __jsx(\"br\", null), \" & Writing\") : __jsx(\"span\", {\n        className: \"title\"\n      }, subject.subject), __jsx(\"span\", {\n        className: \"value\"\n      }, subject.currentScore), __jsx(\"span\", {\n        className: \"description\"\n      }, \"+\", subject.totalGain))));\n    });\n  }\n\n  render() {\n    const {\n      test,\n      futureTest = false,\n      dropdownIndex,\n      index,\n      dropdownIsOpen,\n      onEnterAnswers,\n      onEditTest,\n      onDownloadReport,\n      onDeleteTest,\n      openTestScores\n    } = this.props;\n    const {\n      title,\n      version = '',\n      testDate,\n      weekNumber,\n      initialScore,\n      targetScore,\n      currentScore\n    } = test;\n    return __jsx(\"div\", {\n      className: \"col s12 m8 l7 xl5\"\n    }, __jsx(\"div\", {\n      className: \"card-main-col\"\n    }, __jsx(\"div\", {\n      className: futureTest ? 'card-test card-main card-disabled card' : 'card-test card-main card'\n    }, __jsx(\"div\", {\n      className: \"card-content\"\n    }, __jsx(\"div\", {\n      className: \" card-panel-row row mb-0\"\n    }, __jsx(\"div\", {\n      className: \"col s7\"\n    }, __jsx(\"div\", {\n      className: \"card-title-block\",\n      style: {\n        marginTop: !futureTest ? '-30px' : '-50px'\n      }\n    }, __jsx(\"h4\", {\n      className: \"h2\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: () => openTestScores({\n        index\n      })\n    }, title)), __jsx(\"time\", {\n      className: \"date\",\n      style: {\n        marginBottom: futureTest ? '20px' : ''\n      }\n    }, testDate, \" (week \", weekNumber, \")\"), !futureTest ? __jsx(\"p\", null, \"Version \", version) : null), __jsx(\"div\", {\n      className: \"chart-container chart-container-test\"\n    }, __jsx(\"div\", {\n      className: \"chart-holder\"\n    }, __jsx(\"span\", {\n      className: \"svg-curved-bar\"\n    }, __jsx(Doughnut, {\n      data: () => data(initialScore ? Number((currentScore - initialScore) / (targetScore - initialScore)) * 100 : 0),\n      options: {\n        circumference: 1 * Math.PI,\n        rotation: 1 * Math.PI,\n        cutoutPercentage: 60,\n        tooltips: false\n      }\n    }), __jsx(\"span\", {\n      className: \"js-diff-holder\"\n    }, __jsx(\"span\", {\n      className: \"js-diff\"\n    }, __jsx(\"span\", {\n      className: \"txt\",\n      style: {\n        opacity: '1',\n        bottom: '75px',\n        color: 'black',\n        fontWeight: '600',\n        fontSize: '12px'\n      }\n    }, \"+\", currentScore - initialScore)))), __jsx(\"span\", {\n      className: \"chart-value\",\n      style: {\n        backgroundColor: '#00bbf7'\n      }\n    }, __jsx(\"span\", {\n      \"data-count-up\": true,\n      \"data-start-val\": \"1100\",\n      \"data-end-val\": \"1210\",\n      \"data-duration\": \"1\"\n    }, currentScore))), __jsx(\"div\", {\n      className: \"chart-row\"\n    }, __jsx(\"div\", {\n      className: \"chart-col chart-start\"\n    }, __jsx(\"span\", {\n      className: \"amount\"\n    }, initialScore), \" \", __jsx(\"br\", null), __jsx(\"span\", {\n      className: \"amount-text\"\n    }, \"initial\")), __jsx(\"div\", {\n      className: \"chart-col chart-end\"\n    }, __jsx(\"span\", {\n      className: \"amount\"\n    }, targetScore), \" \", __jsx(\"br\", null), __jsx(\"span\", {\n      className: \"amount-text\"\n    }, \"target\"))))), __jsx(\"div\", {\n      className: \"col s5 right-align\"\n    }, __jsx(\"div\", {\n      className: \"row icons-row\",\n      style: {\n        marginBottom: '10px'\n      }\n    }, __jsx(\"div\", {\n      className: \"dropdown-block col\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"dropdown01\",\n      className: \"dropdown-trigger btn\",\n      onClick: this.handleDropdownClick\n    }, __jsx(\"i\", {\n      className: \"material-icons dots-icon\"\n    }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? __jsx(\"ul\", {\n      id: \"dropdown01\",\n      className: \"dropdown-content\",\n      style: {\n        display: 'block',\n        transformOrigin: '0px 0px 0px',\n        opacity: '1',\n        transform: 'scaleX(1) scaleY(1)'\n      }\n    }, __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onEnterAnswers\n    }, \"Enter Answers\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onEditTest\n    }, \"Edit\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onDownloadReport,\n      className: \"disabled\"\n    }, \"Download Report\")), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"#\",\n      onClick: onDeleteTest,\n      className: \"red-text text-darken-3\"\n    }, \"Delete\"))) : null)), this.mapTestSubjects()))))));\n  }\n\n}\n\nexport default TestCard;","map":null,"metadata":{},"sourceType":"module"}