{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestScorePage/components/SectionScoreCard/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nclass SectionScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getCircleBarData\", (currentScore, totalPossible, name) => ({\n      datasets: [{\n        data: [totalPossible, totalPossible - currentScore],\n        backgroundColor: this.getBgColorByName(name)\n      }]\n    }));\n\n    _defineProperty(this, \"getBgColorByName\", name => {\n      const {\n        bgColorList\n      } = this.state;\n      const ids = bgColorList.map(element => element.id);\n      const targetIndex = ids.findIndex(ids => ids === name);\n      return bgColorList[targetIndex].colorString;\n    });\n\n    _defineProperty(this, \"mapSectionScores\", () => _Object$values(this.props.sectionScores).map(score => __jsx(\"div\", {\n      className: \"col s6 center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"chart-block chart-block-218\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, __jsx(Doughnut, {\n      data: () => this.getCircleBarData(score.current_score, 800, score.name),\n      width: 215,\n      height: 215,\n      options: {\n        cutoutPercentage: 80\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"chart-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, score.name === 'Writing and Language' ? 'Writing & Language' : score.name), __jsx(\"span\", {\n      className: \"value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, score.current_score), __jsx(\"span\", {\n      className: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"(+\", score.delta ? score.delta : 0, \")\"))))));\n\n    this.state = {\n      bgColorList: [{\n        id: \"Writing and Language\",\n        colorString: [\"#51b349\", \"rgb(234, 234, 234)\"]\n      }, {\n        id: \"Reading\",\n        colorString: [\"#35a6af\", \"rgb(234, 234, 234)\"]\n      }, {\n        id: \"Math\",\n        colorString: [\"#567ebf\", \"rgb(234, 234, 234)\"]\n      }]\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"col s12 l6 card-width-546\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Section Scores \", __jsx(\"span\", {\n      className: \"separator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"|\"), __jsx(\"span\", {\n      className: \"quantity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"200 to 800\")), __jsx(\"div\", {\n      className: \"card-main-full card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"several-charts-row row mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.props.sectionScores && this.mapSectionScores())))));\n  }\n\n}\n\nSectionScoreCard.propTypes = {\n  sectionScores: PropTypes.object.isRequired\n};\nexport default SectionScoreCard;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestScorePage/components/SectionScoreCard/index.js"],"names":["React","PropTypes","Doughnut","SectionScoreCard","Component","constructor","props","currentScore","totalPossible","name","datasets","data","backgroundColor","getBgColorByName","bgColorList","state","ids","map","element","id","targetIndex","findIndex","colorString","sectionScores","score","getCircleBarData","current_score","cutoutPercentage","delta","render","mapSectionScores","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nclass SectionScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColorList: [\n        {\n          id: \"Writing and Language\",\n          colorString: [\"#51b349\", \"rgb(234, 234, 234)\"],\n        },\n        {\n          id: \"Reading\",\n          colorString: [\"#35a6af\", \"rgb(234, 234, 234)\"],\n        },\n        {\n          id: \"Math\",\n          colorString: [\"#567ebf\", \"rgb(234, 234, 234)\"],\n        },\n      ],\n    };\n  }\n  getCircleBarData = (currentScore, totalPossible, name) => ({\n    datasets: [\n      {\n        data: [totalPossible, totalPossible - currentScore],\n        backgroundColor: this.getBgColorByName(name),\n      },\n    ],\n  });\n\n  getBgColorByName = (name) => {\n    const { bgColorList } = this.state;\n    const ids = bgColorList.map(element => element.id);\n    const targetIndex = ids.findIndex(ids => ids === name);\n    return bgColorList[targetIndex].colorString;\n  }\n\n  mapSectionScores = () => Object.values(this.props.sectionScores).map(score => (\n    <div className=\"col s6 center-align\">\n      <div className=\"chart-block chart-block-218\">\n        <Doughnut\n          data={() =>\n            this.getCircleBarData(score.current_score, 800, score.name)\n          }\n          width={215}\n          height={215}\n          options={{\n            cutoutPercentage: 80,\n          }}\n        />\n        <div className=\"chart-text\">\n          <span className=\"title\">{score.name === 'Writing and Language' ? 'Writing & Language' : score.name}</span>\n          <span className=\"value\">{score.current_score}</span>\n          <span className=\"description\">(+{score.delta ? score.delta : 0})</span>\n        </div>\n      </div>\n    </div>\n  ))\n  render() {\n    return (\n      <div className=\"col s12 l6 card-width-546\">\n        <div className=\"card-block\">\n          <h2>\n            Section Scores <span className=\"separator\">|</span>\n            <span className=\"quantity\">200 to 800</span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content\">\n              <div className=\"several-charts-row row mb-0\">\n                {this.props.sectionScores && this.mapSectionScores()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nSectionScoreCard.propTypes = {\n  sectionScores: PropTypes.object.isRequired,\n};\nexport default SectionScoreCard;\n"]},"metadata":{},"sourceType":"module"}