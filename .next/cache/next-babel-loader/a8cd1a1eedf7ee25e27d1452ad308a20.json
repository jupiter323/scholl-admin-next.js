{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport update from 'immutability-helper';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\nimport locationOptions from '../../../../utils/locationOptions';\nimport sortOptions from '../../../../utils/sortOptions';\n\nclass FilterSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onToggleShowFilters\", () => this.setState(({\n      open\n    }) => ({\n      open: !open\n    })));\n\n    _defineProperty(this, \"onHandleFilterClick\", filter => {\n      const {\n        activeFilters: currentActiveFilters\n      } = this.state;\n      let activeFilters;\n\n      if (currentActiveFilters.indexOf(filter) === -1) {\n        activeFilters = update(currentActiveFilters, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = currentActiveFilters.indexOf(filter);\n        activeFilters = update(currentActiveFilters, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        activeFilters\n      });\n    });\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      activeFilters: []\n    }));\n\n    _defineProperty(this, \"submitNameFilter\", () => {\n      const {\n        onSetFilteredState,\n        onUnsetFilteredState\n      } = this.props;\n      const {\n        name\n      } = this.state;\n\n      if (name === '') {\n        onUnsetFilteredState();\n      }\n\n      const transformedName = name.replace(/\\s/g, \"\").toLowerCase();\n      onSetFilteredState(transformedName);\n    });\n\n    _defineProperty(this, \"handleFilterChange\", (event, name) => {\n      const {\n        onSetFilteredLocationState,\n        onUnsetFilteredLocationState,\n        onSetSort\n      } = this.props;\n      const value = event.target ? event.target.value : event;\n      const updatedState = update(this.state, {\n        $merge: {\n          [name]: value\n        }\n      });\n      this.setState(updatedState);\n\n      if (name === 'location') {\n        if (event === '') {\n          return onUnsetFilteredLocationState();\n        }\n\n        return onSetFilteredLocationState(event);\n      } else if (name === 'sort') {\n        return onSetSort(event);\n      }\n    });\n\n    this.state = {\n      open: false,\n      name: '',\n      location: {},\n      sort: {},\n      activeFilters: []\n    };\n  } // eslint-disable-next-line consistent-return\n\n\n  render() {\n    // eslint-disable-next-line no-unused-vars\n    const {\n      name,\n      location,\n      sort,\n      open,\n      activeFilters\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"filter-form-holder\"\n    }, __jsx(\"ul\", {\n      className: \"collapsible expandable\"\n    }, __jsx(\"li\", null, __jsx(\"div\", {\n      className: \"collapsible-body\",\n      style: open ? {\n        display: 'block'\n      } : {\n        display: 'none'\n      }\n    }, __jsx(\"div\", {\n      className: \"filter-form_checkbox-list-holder\"\n    }, __jsx(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"activated\",\n      checked: activeFilters.indexOf(\"activated\") !== -1,\n      onChange: () => this.onHandleFilterClick('activated')\n    }), __jsx(\"label\", {\n      htmlFor: \"activated\"\n    }, \"Activated\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"unactivated\",\n      checked: activeFilters.indexOf(\"unactivated\") !== -1,\n      onChange: () => this.onHandleFilterClick('unactivated')\n    }), __jsx(\"label\", {\n      htmlFor: \"unactivated\"\n    }, \"Unactivated\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"expired\",\n      checked: activeFilters.indexOf(\"expired\") !== -1,\n      onChange: () => this.onHandleFilterClick('expired')\n    }), __jsx(\"label\", {\n      htmlFor: \"expired\"\n    }, \"Expired\"))), __jsx(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"current\",\n      checked: activeFilters.indexOf(\"current\") !== -1,\n      onChange: () => this.onHandleFilterClick('current')\n    }), __jsx(\"label\", {\n      htmlFor: \"current\"\n    }, \"Current\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"archived\",\n      checked: activeFilters.indexOf(\"archived\") !== -1,\n      onChange: () => this.onHandleFilterClick('archived')\n    }), __jsx(\"label\", {\n      htmlFor: \"archived\"\n    }, \"Archived\"))), __jsx(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"no-gain\",\n      checked: activeFilters.indexOf(\"no-gain\") !== -1,\n      onChange: () => this.onHandleFilterClick('no-gain')\n    }), __jsx(\"label\", {\n      htmlFor: \"no-gain\"\n    }, \"No Gain\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"some-gain\",\n      checked: activeFilters.indexOf(\"some-gain\") !== -1,\n      onChange: () => this.onHandleFilterClick('some-gain')\n    }), __jsx(\"label\", {\n      htmlFor: \"some-gain\"\n    }, \"Some Gain\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"gain-100+\",\n      checked: activeFilters.indexOf(\"gain-100+\") !== -1,\n      onChange: () => this.onHandleFilterClick('gain-100+')\n    }), __jsx(\"label\", {\n      htmlFor: \"gain-100+\"\n    }, \"Gain of 100+\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"gain-200+\",\n      checked: activeFilters.indexOf(\"gain-200+\") !== -1,\n      onChange: () => this.onHandleFilterClick('gain-200+')\n    }), __jsx(\"label\", {\n      htmlFor: \"gain-200+\"\n    }, \"Gain of 200+\"))), __jsx(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"hit-target-score\",\n      checked: activeFilters.indexOf(\"hit-target-score\") !== -1,\n      onChange: () => this.onHandleFilterClick('hit-target-score')\n    }), __jsx(\"label\", {\n      htmlFor: \"hit-target-score\"\n    }, \"Hit Target Score\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"hasnt-hit-target-score\",\n      checked: activeFilters.indexOf(\"hasnt-hit-target-score\") !== -1,\n      onChange: () => this.onHandleFilterClick('hasnt-hit-target-score')\n    }), __jsx(\"label\", {\n      htmlFor: \"hasnt-hit-target-score\"\n    }, \"Hasn\\u2019t Hit Target Score\"))), __jsx(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"no-tests\",\n      checked: activeFilters.indexOf(\"no-tests\") !== -1,\n      onChange: () => this.onHandleFilterClick('tests')\n    }), __jsx(\"label\", {\n      htmlFor: \"no-tests\"\n    }, \"No Tests\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"1-test\",\n      checked: activeFilters.indexOf(\"1-test\") !== -1,\n      onChange: () => this.onHandleFilterClick('1-test')\n    }), __jsx(\"label\", {\n      htmlFor: \"1-test\"\n    }, \"1 Test\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"2-test\",\n      checked: activeFilters.indexOf(\"2-test\") !== -1,\n      onChange: () => this.onHandleFilterClick('2-test')\n    }), __jsx(\"label\", {\n      htmlFor: \"2-test\"\n    }, \"2 Tests\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"3-test\",\n      checked: activeFilters.indexOf(\"3-test\") !== -1,\n      onChange: () => this.onHandleFilterClick('3-test')\n    }), __jsx(\"label\", {\n      htmlFor: \"3-test\"\n    }, \"3+ Tests\"))), __jsx(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"has-overdue-work\",\n      checked: activeFilters.indexOf(\"has-overdue-work\") !== -1,\n      onChange: () => this.onHandleFilterClick('has-overdue-work')\n    }), __jsx(\"label\", {\n      htmlFor: \"has-overdue-work\"\n    }, \"Has Overdue Work\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"unreviewed-flags\",\n      checked: activeFilters.indexOf(\"unreviewed-flags\") !== -1,\n      onChange: () => this.onHandleFilterClick('unreviewed-flags')\n    }), __jsx(\"label\", {\n      htmlFor: \"unreviewed-flags\"\n    }, \"Unreviewed Flags\"))), __jsx(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"sessions-this-week\",\n      checked: activeFilters.indexOf(\"sessions-this-week\") !== -1,\n      onChange: () => this.onHandleFilterClick('sessions-this-week')\n    }), __jsx(\"label\", {\n      htmlFor: \"sessions-this-week\"\n    }, \"Sessions This Week\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"session-today\",\n      checked: activeFilters.indexOf(\"session-today\") !== -1,\n      onChange: () => this.onHandleFilterClick('session-today')\n    }), __jsx(\"label\", {\n      htmlFor: \"session-today\"\n    }, \"Session Today\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"no-sessions\",\n      checked: activeFilters.indexOf(\"no-sessions\") !== -1,\n      onChange: () => this.onHandleFilterClick('no-sessions')\n    }), __jsx(\"label\", {\n      htmlFor: \"no-sessions\"\n    }, \"No Sessions Scheduled\"))), __jsx(\"ul\", {\n      className: \"filter-form_checkbox-list\"\n    }, __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"entered-actual-score\",\n      checked: activeFilters.indexOf(\"entered-actual-score\") !== -1,\n      onChange: () => this.onHandleFilterClick('entered-actual-score')\n    }), __jsx(\"label\", {\n      htmlFor: \"entered-actual-score\"\n    }, \"Entered Actual Score\")), __jsx(\"li\", null, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"no-actual-score\",\n      checked: activeFilters.indexOf(\"no-actual-score\") !== -1,\n      onChange: () => this.onHandleFilterClick('no-actual-score')\n    }), __jsx(\"label\", {\n      htmlFor: \"no-actual-score\"\n    }, \"No Actual Score\"))))), __jsx(\"div\", {\n      className: \"filter-inputs-holder\"\n    }, __jsx(\"div\", {\n      className: \"col s12 18\",\n      style: {\n        marginTop: '-30px',\n        marginBottom: '-10px'\n      }\n    }, __jsx(\"div\", {\n      className: \"row mb-0\"\n    }, __jsx(\"div\", {\n      className: \"col s12 m3\"\n    }, __jsx(\"div\", {\n      className: \"search-field input-field\",\n      style: {\n        marginTop: '50px'\n      }\n    }, __jsx(\"input\", {\n      type: \"search\",\n      id: \"name_search\",\n      className: \"input-control validate\",\n      name: \"name\",\n      value: name,\n      onChange: event => this.handleFilterChange(event, 'name')\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      className: \"search-button\",\n      onClick: this.onFilterByName\n    }, __jsx(\"i\", {\n      className: \"icon-search\"\n    })), __jsx(\"label\", {\n      className: name.length ? 'label active' : 'label',\n      htmlFor: \"name_search\"\n    }, \"Search\"))), __jsx(\"div\", {\n      className: \"col s12 m3\"\n    }, __jsx(\"div\", {\n      className: \"input-field\"\n    }, __jsx(Dropdown, {\n      value: getValueFromState(location, locationOptions),\n      onChange: event => this.handleFilterChange(event, 'location'),\n      options: locationOptions,\n      label: \"Location\",\n      stateKey: \"location\",\n      dropdownKey: \"location\"\n    }))), __jsx(\"div\", {\n      className: \"col s12 m3\"\n    }, __jsx(\"div\", {\n      className: \"input-field\"\n    }, __jsx(Dropdown, {\n      value: getValueFromState(sort, sortOptions),\n      onChange: event => this.handleFilterChange(event, 'sort'),\n      options: sortOptions,\n      label: \"Sort\",\n      stateKey: \"sort\",\n      dropdownKey: \"sort\"\n    })))), __jsx(\"div\", {\n      className: \"col s12 14\"\n    }, __jsx(\"div\", {\n      className: \"option-filters\"\n    }, __jsx(\"div\", {\n      className: \"option-item clear\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onClearFilters\n    }, \"Clear Filters\")), __jsx(\"div\", {\n      className: \"option-item\"\n    }, __jsx(\"span\", {\n      className: \"collapsible-header\",\n      onClick: this.onToggleShowFilters\n    }, __jsx(\"span\", {\n      className: \"open-text\"\n    }, open ? 'Hide Filters' : 'Open Filters'))))))))));\n  }\n\n}\n\nexport default FilterSection;","map":null,"metadata":{},"sourceType":"module"}