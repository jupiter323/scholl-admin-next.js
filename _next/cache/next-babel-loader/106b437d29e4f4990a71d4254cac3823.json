{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Dashboard/components/SessionList/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport DashboardCard from '../DashboardCard';\nimport sampleSessions from '../../utils/sampleUpComingSessions';\nimport * as moment from 'moment';\n\nvar SessionList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SessionList, _Component);\n\n  function SessionList() {\n    _classCallCheck(this, SessionList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SessionList).apply(this, arguments));\n  }\n\n  _createClass(SessionList, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"dashboard-card card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, sampleSessions.sessions.map(function (element, key) {\n        return __jsx(\"div\", {\n          className: \"card-content\",\n          key: element.key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, __jsx(\"h2\", {\n          className: \"dashboard-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, __jsx(\"time\", {\n          dateTime: \"2019-02-02\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, element.datetime), __jsx(\"span\", {\n          className: \"small\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, \" \", SessionList.getDateName(moment(element.datetime, 'M/D/YYYY')))), __jsx(\"div\", {\n          className: \"row d-flex-content card-width-366 mb-0\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, element.sessions.map(function (session) {\n          return __jsx(DashboardCard, {\n            sessionStats: session.sessionStats,\n            testStats: session.testStats,\n            user: session.user,\n            key: session.uuid,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 17\n            },\n            __self: this\n          });\n        })));\n      }));\n    }\n  }], [{\n    key: \"getDateName\",\n    value: function getDateName(datetime) {\n      if (moment().isSame(moment(datetime, 'M/D/YYYY'), 'day')) {\n        return 'Today';\n      } else if (moment().add(1, 'days').isSame(moment(datetime, 'M/D/YYYY'), 'day')) {\n        return 'Tomorrow';\n      }\n\n      return 'Other';\n    }\n  }]);\n\n  return SessionList;\n}(Component);\n\nexport default SessionList;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Dashboard/components/SessionList/index.js"],"names":["React","Component","DashboardCard","sampleSessions","moment","SessionList","sessions","map","element","key","datetime","getDateName","session","sessionStats","testStats","user","uuid","isSame","add"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;;IAEMC,W;;;;;;;;;;;;;6BACK;AACP,aAAQ;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJF,cAAc,CAACG,QAAf,CAAwBC,GAAxB,CAA4B,UAACC,OAAD,EAAUC,GAAV,EAAkB;AAC9C,eACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAA8B,UAAA,GAAG,EAAED,OAAO,CAACC,GAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAI,UAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAM,UAAA,QAAQ,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA8BD,OAAO,CAACE,QAAtC,CADF,EAEE;AAAM,UAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA2BL,WAAW,CAACM,WAAZ,CAAwBP,MAAM,CAACI,OAAO,CAACE,QAAT,EAAmB,UAAnB,CAA9B,CAA3B,CAFF,CADF,EAKE;AAAK,UAAA,SAAS,EAAC,wCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACIF,OAAO,CAACF,QAAR,CAAiBC,GAAjB,CAAqB,UAACK,OAAD;AAAA,iBAAc,MAAC,aAAD;AAAe,YAAA,YAAY,EAAEA,OAAO,CAACC,YAArC;AAAmD,YAAA,SAAS,EAAED,OAAO,CAACE,SAAtE;AAAiF,YAAA,IAAI,EAAEF,OAAO,CAACG,IAA/F;AAAqG,YAAA,GAAG,EAAEH,OAAO,CAACI,IAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAd;AAAA,SAArB,CADJ,CALF,CADF;AAWD,OAZC,CADI,CAAR;AAeD;;;gCAEkBN,Q,EAAU;AAC3B,UAAIN,MAAM,GAAGa,MAAT,CAAgBb,MAAM,CAACM,QAAD,EAAW,UAAX,CAAtB,EAA8C,KAA9C,CAAJ,EAA0D;AACxD,eAAO,OAAP;AACD,OAFD,MAEO,IAAIN,MAAM,GAAGc,GAAT,CAAa,CAAb,EAAgB,MAAhB,EAAwBD,MAAxB,CAA+Bb,MAAM,CAACM,QAAD,EAAW,UAAX,CAArC,EAA6D,KAA7D,CAAJ,EAAyE;AAC9E,eAAO,UAAP;AACD;;AACD,aAAO,OAAP;AACD;;;;EA1BuBT,S;;AA6B1B,eAAeI,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport DashboardCard from '../DashboardCard';\nimport sampleSessions from '../../utils/sampleUpComingSessions';\nimport * as moment from 'moment';\n\nclass SessionList extends Component {\n  render() {\n    return (<div className=\"dashboard-card card\">\n      { sampleSessions.sessions.map((element, key) => {\n        return (\n          <div className=\"card-content\" key={element.key}>\n            <h2 className=\"dashboard-title\">\n              <time dateTime=\"2019-02-02\">{ element.datetime }</time>\n              <span className=\"small\"> { SessionList.getDateName(moment(element.datetime, 'M/D/YYYY')) }</span>\n            </h2>\n            <div className=\"row d-flex-content card-width-366 mb-0\">\n              { element.sessions.map((session) => (<DashboardCard sessionStats={session.sessionStats} testStats={session.testStats} user={session.user} key={session.uuid} />)) }\n            </div>\n          </div>\n        );\n      })}\n    </div>);\n  }\n\n  static getDateName(datetime) {\n    if (moment().isSame(moment(datetime, 'M/D/YYYY'), 'day')) {\n      return 'Today';\n    } else if (moment().add(1, 'days').isSame(moment(datetime, 'M/D/YYYY'), 'day')) {\n      return 'Tomorrow';\n    }\n    return 'Other';\n  }\n}\n\nexport default SessionList;\n"]},"metadata":{},"sourceType":"module"}