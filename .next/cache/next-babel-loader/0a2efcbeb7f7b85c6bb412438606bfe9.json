{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport CalendarDate from '../CalendarDate';\n\nclass CalendarRow extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"toggleAssignSessionModal\", (event, date) => {\n      event.preventDefault();\n      const {\n        onToggleAssignSessionModal,\n        onToggleAddDropdown\n      } = this.props;\n      onToggleAssignSessionModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(this, \"toggleAssignLessonsModal\", (event, date) => {\n      event.preventDefault();\n      const {\n        onToggleAssignLessonsModal,\n        onToggleAddDropdown\n      } = this.props;\n      onToggleAssignLessonsModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(this, \"toggleAssignWorksheetsModal\", (event, date) => {\n      event.preventDefault();\n      const {\n        onToggleAssignWorksheetsModal,\n        onToggleAddDropdown\n      } = this.props;\n      onToggleAssignWorksheetsModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(this, \"toggleAssignTestSectionModal\", (event, date) => {\n      event.preventDefault();\n      const {\n        onToggleAssignTestSectionModal,\n        onToggleAddDropdown\n      } = this.props;\n      onToggleAssignTestSectionModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(this, \"toggleAssignSimulatedSatModal\", (event, date) => {\n      event.preventDefault();\n      const {\n        onToggleAssignSimulatedSatModal,\n        onToggleAddDropdown\n      } = this.props;\n      onToggleAssignSimulatedSatModal(event, date);\n      onToggleAddDropdown();\n    });\n\n    _defineProperty(this, \"mapDateSessions\", (shouldMapSessions, sessions) => {\n      if (shouldMapSessions) {\n        return sessions.map((session, index) => __jsx(\"li\", {\n          className: \"event-frame\",\n          key: index\n        }, __jsx(Draggable, {\n          key: index,\n          index: index,\n          draggableId: `sessions-${session.date}-${index}`,\n          style: {\n            userSelect: 'none'\n          }\n        }, provided => __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps), __jsx(\"span\", {\n          className: \"event-title-box\"\n        }, session.title)))));\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"mapDateLessons\", (shouldMapLessons, lessons) => {\n      if (shouldMapLessons) {\n        return lessons.map((lesson, index) => __jsx(\"li\", {\n          className: \"event-frame\",\n          key: index\n        }, __jsx(Draggable, {\n          key: index,\n          index: index,\n          draggableId: `lessons-${lesson.date}-${index}`,\n          style: {\n            userSelect: 'none'\n          }\n        }, provided => __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps), __jsx(React.Fragment, null, lesson.completed && __jsx(\"span\", {\n          className: \"event-check lesson-check\"\n        }, __jsx(\"i\", {\n          className: \"icon-check02\"\n        })), __jsx(\"span\", {\n          className: \"event event-lesson-box\"\n        }, lesson.title))))));\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"mapDateWorksheets\", (shouldMapWorksheets, worksheets) => {\n      if (shouldMapWorksheets) {\n        return worksheets.map((worksheet, index) => __jsx(\"li\", {\n          className: \"event-frame\",\n          key: index\n        }, __jsx(Draggable, {\n          key: index,\n          index: index,\n          draggableId: `worksheets-${worksheet.date}-${index}`,\n          style: {\n            userSelect: 'none'\n          }\n        }, provided => __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps), __jsx(React.Fragment, null, worksheet.completed && __jsx(\"span\", {\n          className: \"event-check worksheet-check\"\n        }, __jsx(\"i\", {\n          className: \"icon-check02\"\n        })), __jsx(\"span\", {\n          className: \"event event-worksheet-box\"\n        }, worksheet.title))))));\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"mapTestSections\", (shouldMapTestSections, testSections) => {\n      if (shouldMapTestSections) {\n        return testSections.map((testSection, index) => __jsx(\"li\", {\n          className: \"event-frame\",\n          key: index\n        }, __jsx(Draggable, {\n          key: index,\n          index: index,\n          draggableId: `testSections-${testSection.date}-${index}`,\n          style: {\n            userSelect: 'none'\n          }\n        }, provided => __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps), __jsx(\"span\", {\n          className: \"event event-test-box\"\n        }, \"Test Section: \", testSection.version)))));\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"mapSimulatedSats\", (shouldMapSimulatedSats, simulatedSat) => {\n      if (shouldMapSimulatedSats) {\n        return simulatedSat.map((sat, index) => __jsx(\"li\", {\n          className: \"event-frame\",\n          key: index\n        }, __jsx(Draggable, {\n          key: index,\n          index: index,\n          draggableId: `simulatedSat-${sat.date}-${index}`\n        }, provided => __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.dragHandleProps, provided.dragHandleProps), __jsx(\"span\", {\n          className: \"event event-sat-box\"\n        }, sat.version)))));\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"mapRowDates\", () => this.props.rows && this.props.rows.map(rowDate => {\n      const {\n        eventFilters,\n        activeDate,\n        addDropdownOpen,\n        deleteDropdownOpen,\n        onSetActiveDate,\n        onToggleAddDropdown,\n        onToggleDeleteDropdown,\n        activeColumn\n      } = this.props;\n      const {\n        date,\n        dayDate,\n        calDate,\n        activeDateKey,\n        inMonth,\n        sessions = [],\n        lessons = [],\n        worksheets = [],\n        testSections = [],\n        simulatedSat = []\n      } = rowDate;\n      const hasEvents = sessions.length > 0 || lessons.length > 0 || worksheets.length > 0 || testSections.length > 0 || simulatedSat.length > 0;\n      const inActiveColumn = activeDateKey && activeDateKey[13] === activeColumn;\n      const isActiveDate = activeDate === activeDateKey;\n      const hasEventFilters = eventFilters.length > 0;\n      const shouldMapSessions = !hasEventFilters && sessions.length || sessions.length > 0 && hasEventFilters && eventFilters.indexOf('sessions') !== -1;\n      const shouldMapLessons = !hasEventFilters && lessons.length || lessons.length > 0 && hasEventFilters && eventFilters.indexOf('lessons') !== -1;\n      const shouldMapWorksheets = !hasEventFilters && worksheets.length || worksheets.length > 0 && hasEventFilters && eventFilters.indexOf('worksheets') !== -1;\n      const shouldMapTestSections = !hasEventFilters && testSections.length || testSections.length > 0 && hasEventFilters && eventFilters.indexOf('testSections') !== -1;\n      const shouldMapSimulatedSats = !hasEventFilters && simulatedSat.length || simulatedSat.length > 0 && hasEventFilters && eventFilters.indexOf('simulatedSats') !== -1;\n      return __jsx(CalendarDate, {\n        sessions: sessions,\n        lessons: lessons,\n        worksheets: worksheets,\n        testSections: testSections,\n        simulatedSat: simulatedSat,\n        key: date,\n        date: date,\n        dayDate: dayDate,\n        calDate: calDate,\n        inMonth: inMonth,\n        hasEvents: hasEvents,\n        isActiveDate: isActiveDate,\n        activeDateKey: activeDateKey,\n        inActiveColumn: inActiveColumn,\n        addDropdownOpen: addDropdownOpen,\n        onSetActiveDate: onSetActiveDate,\n        shouldMapLessons: shouldMapLessons,\n        shouldMapSessions: shouldMapSessions,\n        deleteDropdownOpen: deleteDropdownOpen,\n        onToggleAddDropdown: onToggleAddDropdown,\n        shouldMapWorksheets: shouldMapWorksheets,\n        shouldMapTestSections: shouldMapTestSections,\n        onToggleDeleteDropdown: onToggleDeleteDropdown,\n        shouldMapSimulatedSats: shouldMapSimulatedSats,\n        mapDateSessions: this.mapDateSessions,\n        mapDateLessons: this.mapDateLessons,\n        mapDateWorksheets: this.mapDateWorksheets,\n        mapTestSections: this.mapTestSections,\n        mapSimulatedSats: this.mapSimulatedSats,\n        toggleAssignSessionModal: this.toggleAssignSessionModal,\n        toggleAssignLessonsModal: this.toggleAssignLessonsModal,\n        toggleAssignWorksheetsModal: this.toggleAssignWorksheetsModal,\n        toggleAssignTestSectionModal: this.toggleAssignTestSectionModal,\n        toggleAssignSimulatedSatModal: this.toggleAssignSimulatedSatModal\n      });\n    }));\n  }\n\n  render() {\n    return __jsx(\"tr\", {\n      className: \"cal-row-fluid\"\n    }, this.mapRowDates());\n  }\n\n}\n\nexport default CalendarRow;","map":null,"metadata":{},"sourceType":"module"}