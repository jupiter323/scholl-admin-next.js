{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nexport const data = percentage => ({\n  datasets: [{\n    data: [percentage, 100 - percentage],\n    backgroundColor: ['#00bbf7', '#eaeaea']\n  }]\n});\n\nconst getCardClass = (disabled, available) => {\n  if (disabled) {\n    return 'card-test card-disabled card-main card';\n  }\n\n  if (!available) {\n    return 'card-test card-nonavailable card-main card';\n  }\n\n  return 'card-test card-main card';\n};\n\nclass ScoredTestCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIndex,\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onCreateTest\", event => {\n      event.preventDefault();\n      console.warn('Pending implementation of create test UI and functionality');\n    });\n\n    _defineProperty(this, \"handleDropdownClick\", event => {\n      const {\n        onSetDropdown,\n        onCloseDropdown,\n        dropdownIsOpen,\n        index\n      } = this.props;\n      event.preventDefault();\n\n      if (dropdownIsOpen) {\n        return onCloseDropdown();\n      }\n\n      return onSetDropdown(index);\n    });\n  }\n\n  render() {\n    const {\n      test,\n      dropdownIndex,\n      index,\n      dropdownIsOpen,\n      onEditTest,\n      onDownloadReport,\n      onResetTest,\n      onDeleteTest\n    } = this.props;\n    const {\n      flags = [],\n      disabled,\n      available,\n      testType,\n      testDate,\n      title,\n      version,\n      availableDate,\n      dueDate,\n      completionDate,\n      initialScore,\n      targetScore,\n      currentScore,\n      totalGain,\n      subjects\n    } = test;\n    return React.createElement(\"div\", {\n      className: \"col s12 m8 l7 xl5\"\n    }, React.createElement(\"div\", {\n      className: \"card-main-col\"\n    }, React.createElement(\"div\", {\n      className: getCardClass(disabled, available)\n    }, React.createElement(\"div\", {\n      className: \"card-content\"\n    }, React.createElement(\"div\", {\n      className: \"card-title-row row\"\n    }, React.createElement(\"div\", {\n      className: \"col s9\"\n    }, React.createElement(\"div\", {\n      className: \"card-title-block\"\n    }, React.createElement(\"h4\", {\n      className: \"h2\"\n    }, React.createElement(\"b\", null, testType === 'real' ? 'Real SAT' : title), testType === 'real' ? [\"- \", title] : null), React.createElement(\"time\", {\n      dateTime: \"2018-03-05\",\n      className: \"title-meta\"\n    }, testType === 'real' ? testDate : [\"Version \", version]))), React.createElement(\"div\", {\n      className: \"col s3\"\n    }, React.createElement(\"div\", {\n      className: \"row icons-row\"\n    }, flags.length ? React.createElement(\"span\", {\n      className: \"badge-rounded-xs badge red darken-2 white-text\"\n    }, React.createElement(\"b\", {\n      className: \"badge-text\"\n    }, flags.length), React.createElement(\"i\", {\n      className: \"icon-flag\"\n    })) : null, React.createElement(\"div\", {\n      className: \"dropdown-block col\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      \"data-target\": \"dropdown01\",\n      className: \"dropdown-trigger btn\",\n      onClick: this.handleDropdownClick\n    }, React.createElement(\"i\", {\n      className: \"material-icons dots-icon\"\n    }, \"more_vert\")), dropdownIsOpen && dropdownIndex === index ? React.createElement(\"ul\", {\n      id: \"dropdown01\",\n      className: \"dropdown-content\",\n      style: {\n        display: 'block',\n        transformOrigin: '0px 0px 0px',\n        opacity: '1',\n        transform: 'scaleX(1) scaleY(1)'\n      }\n    }, React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\",\n      onClick: onEditTest\n    }, \"View/Edit\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\",\n      onClick: onDownloadReport\n    }, \"Download Score Report\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\",\n      className: \"red-text text-darken-3\",\n      onClick: onResetTest\n    }, \"Reset\")), React.createElement(\"li\", null, React.createElement(\"a\", {\n      href: \"#\",\n      className: \"red-text text-darken-3\",\n      onClick: onDeleteTest\n    }, \"Delete\"))) : null)))), React.createElement(\"div\", {\n      className: \"card-test-row row d-flex mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col s6\"\n    }, React.createElement(\"div\", {\n      className: \"card-description\"\n    }, testType !== 'real' ? [React.createElement(\"dl\", {\n      className: \"dl-horizontal\",\n      key: \"0\"\n    }, React.createElement(\"dt\", null, \"Available:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n      dateTime: \"2018-12-15\"\n    }, availableDate))), React.createElement(\"dl\", {\n      className: \"dl-horizontal\",\n      key: \"1\"\n    }, React.createElement(\"dt\", null, \"Due:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n      dateTime: \"2018-12-15\"\n    }, dueDate))), completionDate.length ? React.createElement(\"dl\", {\n      className: \"dl-horizontal\",\n      key: \"2\"\n    }, React.createElement(\"dt\", null, \"Complete:\"), React.createElement(\"dd\", null, React.createElement(\"time\", {\n      dateTime: \"2018-12-15\"\n    }, completionDate))) : null] : null), React.createElement(\"div\", {\n      className: currentScore ? 'chart-container chart-container-160' : 'chart-container chart-container-160 chart-value-zero start-anim'\n    }, React.createElement(\"div\", {\n      className: \"chart-holder\"\n    }, React.createElement(\"span\", {\n      className: \"svg-curved-bar\",\n      \"data-values\": \"{\\\"from\\\": 1100, \\\"to\\\": 1460, \\\"current\\\": 1210}\",\n      \"data-duration\": \"1\"\n    }, React.createElement(Doughnut, {\n      data: () => data(initialScore && !disabled && available && currentScore ? Number(initialScore / targetScore) * 100 : 0),\n      options: {\n        circumference: 1 * Math.PI,\n        rotation: 1 * Math.PI,\n        cutoutPercentage: 60,\n        tooltips: false\n      }\n    }), React.createElement(\"span\", {\n      className: \"js-diff-holder\"\n    }, React.createElement(\"span\", {\n      className: \"js-diff\"\n    }, React.createElement(\"span\", {\n      className: \"txt\",\n      style: {\n        opacity: '1',\n        bottom: '65px',\n        color: 'black',\n        fontWeight: '600',\n        fontSize: '12px'\n      }\n    }, \"+\", totalGain)))), React.createElement(\"span\", {\n      className: \"chart-value\",\n      style: {\n        backgroundColor: '#00bbf7'\n      }\n    }, React.createElement(\"span\", {\n      \"data-count-up\": true,\n      \"data-start-val\": \"1100\",\n      \"data-end-val\": \"1210\",\n      \"data-duration\": \"1\"\n    }, currentScore))), React.createElement(\"div\", {\n      className: \"chart-row\"\n    }, React.createElement(\"div\", {\n      className: \"chart-col chart-start\"\n    }, React.createElement(\"span\", {\n      className: \"amount\"\n    }, initialScore), React.createElement(\"br\", null), React.createElement(\"span\", {\n      className: \"amount-text\"\n    }, \"initial\")), React.createElement(\"div\", {\n      className: \"chart-col chart-end\"\n    }, React.createElement(\"span\", {\n      className: \"amount\"\n    }, targetScore), React.createElement(\"br\", null), React.createElement(\"span\", {\n      className: \"amount-text\"\n    }, \"target\"))))), React.createElement(\"div\", {\n      className: \"col s6 right-align\"\n    }, React.createElement(\"div\", {\n      className: \"charts-row row mb-0\"\n    }, React.createElement(\"div\", {\n      className: \"col s6\"\n    }, React.createElement(\"div\", {\n      className: \"chart-block chart-block-test-sm\"\n    }, React.createElement(\"span\", {\n      className: \"value-max\"\n    }, subjects[0].targetScore), React.createElement(\"div\", {\n      className: \"js-donut-chart\",\n      \"data-stroke-width\": \"11\",\n      \"data-source\": \"./inc/score-data-test-reading.json\"\n    }), React.createElement(\"div\", {\n      className: \"chart-text\"\n    }, React.createElement(\"span\", {\n      className: \"title\"\n    }, \"Reading\"), React.createElement(\"span\", {\n      className: \"value\"\n    }, subjects[0].currentScore), React.createElement(\"span\", {\n      className: \"description\"\n    }, \"+\", subjects[0].totalGain)))), React.createElement(\"div\", {\n      className: \"col s6\"\n    }, React.createElement(\"div\", {\n      className: \"chart-block chart-block-test-sm\"\n    }, React.createElement(\"span\", {\n      className: \"value-max\"\n    }, subjects[1].targetScore), React.createElement(\"div\", {\n      className: \"js-donut-chart\",\n      \"data-stroke-width\": \"11\",\n      \"data-source\": \"./inc/score-data-test-writing.json\"\n    }), React.createElement(\"div\", {\n      className: \"chart-text\"\n    }, React.createElement(\"span\", {\n      className: \"title\"\n    }, \"Writing\"), React.createElement(\"span\", {\n      className: \"value\"\n    }, subjects[1].currentScore), React.createElement(\"span\", {\n      className: \"description\"\n    }, \"+\", subjects[1].totalGain))))), React.createElement(\"div\", {\n      className: !subjects[2].currentScore ? 'chart-block chart-block-test' : 'chart-block chart-block-test chart-block-zero'\n    }, React.createElement(\"span\", {\n      className: \"value-max\"\n    }, subjects[2].currentScore), React.createElement(\"div\", {\n      className: \"js-donut-chart\",\n      \"data-stroke-width\": \"15\",\n      \"data-source\": \"./inc/score-data-test-math.json\"\n    }), React.createElement(\"div\", {\n      className: \"chart-text\"\n    }, React.createElement(\"span\", {\n      className: \"title\"\n    }, \"Math\"), React.createElement(\"span\", {\n      className: \"value\"\n    }, subjects[2].currentScore), subjects[2].totalGain ? React.createElement(\"span\", {\n      className: \"description\"\n    }, \"+\", subjects[2].totalGain) : null))))))));\n  }\n\n}\n\nexport default ScoredTestCard;","map":null,"metadata":{},"sourceType":"module"}