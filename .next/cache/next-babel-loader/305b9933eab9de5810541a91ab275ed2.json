{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-did-mount-set-state */\n\n/* eslint-disable react/no-did-update-set-state */\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport FilterSection from './components/FilterSection';\nimport FullView from './components/FullView';\nimport { dueDateAscending, subjectAscending, subjectDescending, passageAscending, passageDescending, lessonNameDescending, lessonNameAscending, statusDescending, statusAscending, availableDateAscending, availableDateDescending, dueDate, flagsAscending, flagsDescending, completionDateAscending, completionDateDescending, lessonTypeAscending, lessonTypeDescending } from '../../utils/sortFunctions';\nimport ListView from './components/ListView';\nimport AssignLessonModal from './components/AssignLessonModal'; // TODO: compare updatedlessons to lessons and update lesson list\n\nclass DetailLessonList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onOpenModal\", () => this.setState({\n      modalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseModal\", () => this.setState({\n      modalOpen: false\n    }));\n\n    _defineProperty(this, \"onClearFilters\", () => this.setState({\n      statusFilters: [],\n      subjectFilters: [],\n      completeFilters: [],\n      flagFilters: [],\n      classTypeFilters: [],\n      dueDateFilters: [],\n      unitFilter: \"\",\n      nameFilter: \"\"\n    }));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", lesson => this.setState({\n      nameFilter: lesson\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", filter => this.setState({\n      [filter]: \"\"\n    }));\n\n    _defineProperty(this, \"onChangeView\", view => this.setState({\n      currentView: view,\n      active: view\n    }));\n\n    _defineProperty(this, \"onSetUnitFilter\", unit => this.setState({\n      unitFilter: unit\n    }));\n\n    _defineProperty(this, \"onSortLessons\", lessons => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'subjectAscending':\n          return lessons.sort(subjectAscending);\n\n        case 'subjectDescending':\n          return lessons.sort(subjectDescending);\n\n        case 'passageAscending':\n          return lessons.sort(passageAscending);\n\n        case 'statusAscending':\n          return lessons.sort(statusAscending);\n\n        case 'passageDescending':\n          return lessons.sort(passageDescending);\n\n        case 'statusDescending':\n          return lessons.sort(statusDescending);\n\n        case 'availableDateAscending':\n          return lessons.sort(availableDateAscending);\n\n        case 'availableDateDescending':\n          return lessons.sort(availableDateDescending);\n\n        case 'dueDateDescending':\n          return lessons.sort(dueDate);\n\n        case 'dueDateAscending':\n          return lessons.sort(dueDateAscending);\n\n        case 'flagsAscending':\n          return lessons.sort(flagsAscending);\n\n        case 'flagsDescending':\n          return lessons.sort(flagsDescending);\n\n        case 'lessonNameAscending':\n          return lessons.sort(lessonNameAscending);\n\n        case 'lessonNameDescending':\n          return lessons.sort(lessonNameDescending);\n\n        case 'completionDateAscending':\n          return lessons.sort(completionDateAscending);\n\n        case 'completionDateDescending':\n          return lessons.sort(completionDateDescending);\n\n        case 'lessonTypeAscending':\n          return lessons.sort(lessonTypeAscending);\n\n        case 'lessonTypeDescending':\n          return lessons.sort(lessonTypeDescending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onAddUpdatedLessons\", lessons => this.setState({\n      updatedLessons: lessons\n    }));\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        lessons,\n        nameFilter\n      } = this.state;\n      return lessons.reduce((finalArr, currentLesson) => {\n        const {\n          lessonName\n        } = currentLesson;\n        const lessonString = lessonName.replace(/\\s/g, \"\").toLowerCase();\n\n        if (lessonString.indexOf(nameFilter) !== -1 && finalArr.indexOf(currentLesson) === -1) {\n          finalArr.push(currentLesson);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onCloneLesson\", index => {\n      const {\n        lessons\n      } = this.state;\n      this.setState(prevState => {\n        prevState.lessons.push(lessons[index]);\n        return {\n          lessons: prevState.lessons\n        };\n      });\n    });\n\n    _defineProperty(this, \"onDeleteLesson\", index => {\n      const {\n        lessons\n      } = this.state;\n      const newLessonsArray = this.arrayItemRemover(lessons, lessons[index]);\n      this.setState({\n        lessons: newLessonsArray\n      });\n    });\n\n    _defineProperty(this, \"onFilterLessons\", () => {\n      const {\n        statusFilters,\n        subjectFilters,\n        unitFilter,\n        classTypeFilters,\n        scoreStatusFilters,\n        flagFilters,\n        lessons: allLessons\n      } = this.state;\n      let lessons = allLessons;\n\n      if (scoreStatusFilters.length && scoreStatusFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(lesson => scoreStatusFilters.indexOf(lesson.scoreStatus) !== -1);\n      }\n\n      if (statusFilters.length && statusFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(lesson => statusFilters.indexOf(lesson.status) !== -1);\n      }\n\n      if (subjectFilters.length && subjectFilters.indexOf('all') === -1) {\n        lessons = lessons.filter(lesson => subjectFilters.indexOf(lesson.subject) !== -1);\n      }\n\n      if (flagFilters.length && flagFilters.indexOf('all') === -1) {\n        lessons = lessons.filter(lesson => lesson.flags.length !== 0);\n      }\n\n      if (classTypeFilters.length && classTypeFilters.indexOf(\"all\") === -1) {\n        lessons = lessons.filter(lesson => classTypeFilters.indexOf(lesson.type) !== -1);\n      }\n\n      if (unitFilter.length && unitFilter.indexOf('all') === -1) {\n        lessons = lessons.filter(lesson => unitFilter.indexOf(lesson.unit) !== -1);\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(this, \"getMappableLessons\", () => {\n      const {\n        sort,\n        unitFilter,\n        lessons,\n        dueDateFilters,\n        nameFilter,\n        statusFilters,\n        subjectFilters,\n        scoreStatusFilters,\n        classTypeFilters,\n        flagFilters\n      } = this.state;\n      let mappableLessons = lessons;\n\n      if (nameFilter.length) {\n        mappableLessons = this.onFilterByName();\n      }\n\n      if (statusFilters.length || unitFilter.length || scoreStatusFilters.length || subjectFilters.length || classTypeFilters.length || flagFilters.length) {\n        mappableLessons = this.onFilterLessons();\n      }\n\n      if (dueDateFilters.length) {\n        mappableLessons = this.filterDueDate();\n      }\n\n      if (sort) {\n        return this.onSortLessons(mappableLessons);\n      }\n\n      return mappableLessons;\n    });\n\n    _defineProperty(this, \"filterDueDate\", () => {\n      const {\n        user\n      } = this.props;\n      const {\n        dueDateFilters,\n        lessons: allLessons\n      } = this.state;\n      let lessons = allLessons;\n\n      if (dueDateFilters.length && dueDateFilters.indexOf('all') === -1) {\n        if (dueDateFilters.includes('overdue')) {\n          lessons = lessons.filter(lesson => lesson.overdue === true);\n        }\n\n        if (dueDateFilters.includes('dueToday')) {\n          lessons = lessons.filter(lesson => lesson.dueDate === moment().format(\"MM/DD/Y\"));\n        }\n\n        if (dueDateFilters.includes('dueThisWeek')) {\n          lessons = lessons.filter(lesson => moment(lesson.dueDate).format('w') === moment().format(\"W\"));\n        }\n\n        if (dueDateFilters.includes('dueNextSession')) {\n          lessons = lessons.filter(lesson => moment(user.nextSession).isSameOrAfter(lesson.dueDate, 'day'));\n        }\n\n        return lessons;\n      }\n\n      return lessons;\n    });\n\n    _defineProperty(this, \"handleFilterClick\", (filterType, filter) => {\n      const {\n        subjectFilters: currentSubjectFilters,\n        scoreStatusFilters: currentScoreStatusFilters,\n        statusFilters: currentStatusFilters,\n        flagFilters: currentFlagFilters,\n        dueDateFilters: currentDueDateFilters,\n        classTypeFilters: currentClassTypeFilters\n      } = this.state;\n      let modifiedFilterCurrentState;\n      let modifiedFilterName;\n      let modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'status':\n          modifiedFilterCurrentState = currentStatusFilters;\n          modifiedFilterName = 'statusFilters';\n          break;\n\n        case 'score':\n          modifiedFilterCurrentState = currentScoreStatusFilters;\n          modifiedFilterName = 'scoreStatusFilters';\n          break;\n\n        case 'flags':\n          modifiedFilterCurrentState = currentFlagFilters;\n          modifiedFilterName = 'flagFilters';\n          break;\n\n        case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n\n        case 'classType':\n          modifiedFilterCurrentState = currentClassTypeFilters;\n          modifiedFilterName = 'classTypeFilters';\n          break;\n\n        default:\n          break;\n      } // Decide whether we're adding or removing the selected filter\n\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      this.setState({\n        [modifiedFilterName]: modifiedFilterUpdatedState\n      });\n    });\n\n    _defineProperty(this, \"arrayItemRemover\", (array, value) => array.filter(lesson => lesson !== value));\n\n    _defineProperty(this, \"renderCurrentView\", () => {\n      const {\n        active\n      } = this.state;\n      const {\n        user\n      } = this.props;\n\n      if (active === 'full') {\n        return __jsx(FullView, {\n          user: user,\n          lessons: this.getMappableLessons(),\n          onDeleteLesson: this.onDeleteLesson,\n          onCloneLesson: this.onCloneLesson\n        });\n      }\n\n      return __jsx(ListView, {\n        user: user,\n        lessons: this.getMappableLessons(),\n        onSetSort: this.onSetSort,\n        sort: this.state.sort\n      });\n    });\n\n    this.state = {\n      test: true,\n      lessons: this.props.user.lessons,\n      modalOpen: false,\n      currentView: 'full',\n      active: 'full',\n      statusFilters: [],\n      subjectFilters: [],\n      scoreStatusFilters: [],\n      flagFilters: [],\n      classTypeFilters: [],\n      dueDateFilters: [],\n      sort: \"\",\n      nameFilter: \"\",\n      unitFilter: \"\",\n      updatedLessons: []\n    };\n  }\n\n  render() {\n    const {\n      currentView,\n      subjectFilters,\n      statusFilters,\n      scoreStatusFilters,\n      flagFilters,\n      dueDateFilters,\n      classTypeFilters\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(FilterSection, {\n      currentView: currentView,\n      onChangeView: this.onChangeView,\n      onHandleFilterClick: this.onHandleFilterClick,\n      onClearFilters: this.onClearFilters,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetSort: this.onSetSort,\n      subjectFilters: subjectFilters,\n      statusFilters: statusFilters,\n      scoreStatusFilters: scoreStatusFilters,\n      flagFilters: flagFilters,\n      dueDateFilters: dueDateFilters,\n      classTypeFilters: classTypeFilters,\n      handleFilterClick: this.handleFilterClick,\n      onSetUnitFilter: this.onSetUnitFilter,\n      filterDueDate: this.filterDueDate\n    }), this.renderCurrentView(), __jsx(AssignLessonModal, {\n      open: this.state.modalOpen,\n      lessons: this.props.user.lessons,\n      onCloseModal: this.onCloseModal,\n      onAddUpdatedLessons: this.onAddUpdatedLessons\n    }), __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onOpenModal,\n      className: \"waves-effect waves-teal btn add-btn modal-trigger\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"Assign Lesson\"));\n  }\n\n}\n\nexport default DetailLessonList;","map":null,"metadata":{},"sourceType":"module"}