{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport update from 'immutability-helper';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport PropTypes from 'prop-types';\nimport NavBar from './common/NavBar';\nimport InCompleteTestSection from './components/InCompleteSection';\nimport PreStartTestSection from './components/StartSection';\nimport { toast } from 'react-toastify';\nimport Toast from '../../../../Toast';\nimport { addStudentAnswerToTestApi, updateStudentTestSectionStatusApi, updateStudentTestStatusApi } from '../../../index/api';\nimport { makeSelectStudentSections, makeSelectActiveStudentToken, makeSelectActiveStudent, makeSelectTests } from '../../../index/selectors';\nimport { fetchStudentTestSections } from '../../../index/actions';\n\nvar EnterAnswerWrapper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EnterAnswerWrapper, _React$Component);\n\n  function EnterAnswerWrapper(props) {\n    var _this;\n\n    _classCallCheck(this, EnterAnswerWrapper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EnterAnswerWrapper).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var _this$props = _this.props,\n          onFetchStudentTestSections = _this$props.onFetchStudentTestSections,\n          sections = _this$props.sections,\n          studentToken = _this$props.studentToken,\n          student_test_id = _this$props.test.student_test_id,\n          id = _this$props.activeStudent.id;\n      var postBody = {\n        id: id,\n        student_test_id: student_test_id,\n        studentToken: studentToken\n      };\n      onFetchStudentTestSections(postBody);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillReceiveProps\", function (nextProps) {\n      var sections = nextProps.sections,\n          student_test_id = nextProps.student_test_id;\n\n      if (sections.length !== 0) {\n        _this.onSetProblems(sections, student_test_id);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetProblems\", function (sections, studentTestId) {\n      var _this$props2 = _this.props,\n          tests = _this$props2.tests,\n          test_id = _this$props2.test.test_id;\n      var testIds = tests.map(function (test) {\n        return test.id;\n      });\n      var currentTestIndex = testIds.findIndex(function (testId) {\n        return testId === test_id;\n      });\n      var currentTestSections = tests[currentTestIndex].test_sections;\n      sections.map(function (section) {\n        var testSectionIds = currentTestSections.map(function (testSection) {\n          return testSection.id;\n        });\n        var currentTestSectionIndex = testSectionIds.findIndex(function (testSectionId) {\n          return testSectionId === section.test_section_id;\n        });\n        var currentTestSection = currentTestSections[currentTestSectionIndex];\n        if (!currentTestSection) return;\n\n        switch (currentTestSection.name) {\n          case \"Math (Calculator)\":\n            _this.setState({\n              testMathCalcProblems: section\n            });\n\n            break;\n\n          case \"Writing\":\n            _this.setState({\n              testWritingProblems: section\n            });\n\n            break;\n\n          case \"Math (No Calculator)\":\n            _this.setState({\n              testMathNoCalcProblems: section\n            });\n\n            break;\n\n          case \"Reading\":\n            _this.setState({\n              testReadingProblems: section\n            });\n\n            break;\n\n          default:\n            _this.setState({\n              testReadingProblems: section\n            });\n\n            break;\n        }\n      });\n\n      _this.setState({\n        testSections: sections,\n        studentTestId: studentTestId\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetActivePage\", function _callee(name) {\n      var currentSection, updatedState, _update, _update2, currentProblems, test_section_id, postBody, response;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentSection = _this.state.updatedState.activeSection;\n\n              if (name === 'showInCompleteTest') {\n                updatedState = update(_this.state.updatedState, (_update = {}, _defineProperty(_update, name, {\n                  $set: true\n                }), _defineProperty(_update, currentSection, {\n                  $set: false\n                }), _update));\n              } else {\n                updatedState = update(_this.state.updatedState, (_update2 = {}, _defineProperty(_update2, name, {\n                  $set: true\n                }), _defineProperty(_update2, currentSection, {\n                  $set: false\n                }), _defineProperty(_update2, \"activeSection\", {\n                  $set: name\n                }), _update2));\n              }\n\n              _this.setState({\n                updatedState: updatedState\n              });\n\n              if (!(name === \"showInCompleteTest\")) {\n                _context.next = 13;\n                break;\n              }\n\n              currentProblems = _this.getCurrentTestProblems();\n              test_section_id = currentProblems.id;\n              postBody = {\n                student_test_id: currentProblems.student_test_id,\n                student_test_section_id: test_section_id,\n                student_test_section_status: 'STARTED'\n              };\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(updateStudentTestSectionStatusApi(postBody));\n\n            case 9:\n              response = _context.sent;\n\n              if (response && response.ok === true) {\n                // Check for successful response before starting test or no answers will get recorded\n                toast.success(\"Test section is now STARTED.\");\n\n                _this.setState({\n                  previewTest: false,\n                  startedTest: true\n                });\n              }\n\n              _context.next = 14;\n              break;\n\n            case 13:\n              _this.setState({\n                previewTest: true,\n                startedTest: false\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddStudentAnswerToTest\", function _callee2(test_problem_id, answer) {\n      var studentTestId, postBody;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              studentTestId = _this.state.studentTestId;\n              postBody = {\n                student_test_id: studentTestId,\n                test_problem_id: test_problem_id,\n                answer: answer\n              };\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(addStudentAnswerToTestApi(postBody));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCurrentTestProblems\", function () {\n      var activeSection = _this.state.updatedState.activeSection;\n      var _this$state = _this.state,\n          testReadingProblems = _this$state.testReadingProblems,\n          testWritingProblems = _this$state.testWritingProblems,\n          testMathCalcProblems = _this$state.testMathCalcProblems,\n          testMathNoCalcProblems = _this$state.testMathNoCalcProblems;\n\n      switch (activeSection) {\n        case \"activeReadingSection\":\n          return testReadingProblems;\n\n        case \"activeWritingSection\":\n          return testWritingProblems;\n\n        case \"activeMathWithCalcSection\":\n          return testMathCalcProblems;\n\n        case \"activeMathNoCalcSection\":\n          return testMathNoCalcProblems;\n\n        default:\n          return '';\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTestScore\", function _callee3(activeTest) {\n      var _this$state2, testReadingProblems, testWritingProblems, testMathCalcProblems, testMathNoCalcProblems, _this$props3, tests, test_id, currentTestSectionId, testIds, currentTestIndex, currentTestSections, testSectionIds, currentTestSectionIndex, currentTestSection, postBody, _this$state3, readingSectionCompleted, writingSectionCompleted, mathCalcSectionCompleted, mathNoCalcSectionCompleted, _postBody, onOpentTestScore;\n\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Check for non-existing sections and set them to completed\n              _this$state2 = _this.state, testReadingProblems = _this$state2.testReadingProblems, testWritingProblems = _this$state2.testWritingProblems, testMathCalcProblems = _this$state2.testMathCalcProblems, testMathNoCalcProblems = _this$state2.testMathNoCalcProblems;\n              if (!testReadingProblems) _this.setState({\n                readingSectionCompleted: true\n              });\n              if (!testWritingProblems) _this.setState({\n                writingSectionCompleted: true\n              });\n              if (!testMathCalcProblems) _this.setState({\n                mathCalcSectionCompleted: true\n              });\n              if (!testMathNoCalcProblems) _this.setState({\n                mathNoCalcSectionCompleted: true\n              }); // Update current section as completed\n\n              _this$props3 = _this.props, tests = _this$props3.tests, test_id = _this$props3.test.test_id;\n              currentTestSectionId = activeTest.test_section_id;\n              testIds = tests.map(function (test) {\n                return test.id;\n              });\n              currentTestIndex = testIds.findIndex(function (testId) {\n                return testId === test_id;\n              });\n              currentTestSections = tests[currentTestIndex].test_sections;\n              testSectionIds = currentTestSections.map(function (testSection) {\n                return testSection.id;\n              });\n              currentTestSectionIndex = testSectionIds.findIndex(function (testSectionId) {\n                return testSectionId === currentTestSectionId;\n              });\n              currentTestSection = currentTestSections[currentTestSectionIndex];\n              _context3.t0 = currentTestSection.name;\n              _context3.next = _context3.t0 === \"Math (Calculator)\" ? 16 : _context3.t0 === \"Writing\" ? 18 : _context3.t0 === \"Math (No Calculator)\" ? 20 : _context3.t0 === \"Reading\" ? 22 : 24;\n              break;\n\n            case 16:\n              _this.setState({\n                mathCalcSectionCompleted: true\n              });\n\n              return _context3.abrupt(\"break\", 25);\n\n            case 18:\n              _this.setState({\n                writingSectionCompleted: true\n              });\n\n              return _context3.abrupt(\"break\", 25);\n\n            case 20:\n              _this.setState({\n                mathNoCalcSectionCompleted: true\n              });\n\n              return _context3.abrupt(\"break\", 25);\n\n            case 22:\n              _this.setState({\n                readingSectionCompleted: true\n              });\n\n              return _context3.abrupt(\"break\", 25);\n\n            case 24:\n              _this.setState({\n                readingSectionCompleted: true\n              });\n\n            case 25:\n              // @TODO bring back started check for a test that was just created\n              // if (activeTest.test_section_status === 'STARTED') {\n              postBody = {\n                student_test_id: activeTest.student_test_id,\n                student_test_section_id: activeTest.id,\n                student_test_section_status: \"COMPLETED\"\n              };\n              _context3.next = 28;\n              return _regeneratorRuntime.awrap(updateStudentTestSectionStatusApi(postBody));\n\n            case 28:\n              _this$state3 = _this.state, readingSectionCompleted = _this$state3.readingSectionCompleted, writingSectionCompleted = _this$state3.writingSectionCompleted, mathCalcSectionCompleted = _this$state3.mathCalcSectionCompleted, mathNoCalcSectionCompleted = _this$state3.mathNoCalcSectionCompleted;\n\n              if (!(readingSectionCompleted && writingSectionCompleted && mathCalcSectionCompleted && mathNoCalcSectionCompleted)) {\n                _context3.next = 38;\n                break;\n              }\n\n              _postBody = {\n                student_test_id: activeTest.student_test_id,\n                status: \"COMPLETED\"\n              };\n              _context3.next = 33;\n              return _regeneratorRuntime.awrap(updateStudentTestStatusApi(_postBody));\n\n            case 33:\n              toast.success(\"All test sections have been COMPLETED.\");\n              onOpentTestScore = _this.props.onOpentTestScore;\n              onOpentTestScore(activeTest);\n              _context3.next = 39;\n              break;\n\n            case 38:\n              toast.success(\"Test section is now COMPLETED.\");\n\n            case 39:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getExistingSections\", function () {\n      var _this$state4 = _this.state,\n          testReadingProblems = _this$state4.testReadingProblems,\n          testWritingProblems = _this$state4.testWritingProblems,\n          testMathCalcProblems = _this$state4.testMathCalcProblems,\n          testMathNoCalcProblems = _this$state4.testMathNoCalcProblems;\n      return {\n        reading: !!testReadingProblems,\n        writing: !!testWritingProblems,\n        mathCalc: !!testMathCalcProblems,\n        mathNoCalc: !!testMathNoCalcProblems\n      };\n    });\n\n    _this.state = {\n      previewTest: false,\n      startedTest: false,\n      testSections: [],\n      studentTestId: \"\",\n      testReadingProblems: null,\n      testWritingProblems: null,\n      testMathCalcProblems: null,\n      testMathNoCalcProblems: null,\n      updatedState: {\n        activeReadingSection: true,\n        showInCompleteTest: false,\n        activeWritingSection: false,\n        activeMathNoCalcSection: false,\n        activeMathWithCalcSection: false,\n        activeSection: \"\"\n      },\n      readingSectionCompleted: false,\n      writingSectionCompleted: false,\n      mathCalcSectionCompleted: false,\n      mathNoCalcSectionCompleted: false\n    };\n    return _this;\n  }\n\n  _createClass(EnterAnswerWrapper, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          startedTest = _this$state5.startedTest,\n          previewTest = _this$state5.previewTest,\n          updatedState = _this$state5.updatedState;\n      var _this$props4 = this.props,\n          onCloaseAnswerWrapper = _this$props4.onCloaseAnswerWrapper,\n          open = _this$props4.open,\n          test_description = _this$props4.test.test_description,\n          test = _this$props4.test,\n          onAddStudentAnswerToTest = _this$props4.onAddStudentAnswerToTest;\n      if (!test) return;\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, open && __jsx(\"div\", {\n        className: \"starting\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"main-holder grey lighten-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, __jsx(NavBar, {\n        onCloaseAnswerWrapper: onCloaseAnswerWrapper,\n        onSetActivePage: this.onSetActivePage,\n        testDescription: test_description,\n        active: updatedState.activeSection,\n        existingSections: this.getExistingSections(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }), __jsx(PreStartTestSection, {\n        open: previewTest && this.getCurrentTestProblems(),\n        onSetActivePage: this.onSetActivePage,\n        testSection: this.getCurrentTestProblems(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }), __jsx(InCompleteTestSection, {\n        open: startedTest && this.getCurrentTestProblems(),\n        onAddStudentAnswerToTest: onAddStudentAnswerToTest,\n        testSection: this.getCurrentTestProblems(),\n        onStudentTestScore: onCloaseAnswerWrapper,\n        handleTestScore: this.handleTestScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }), __jsx(Toast, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return EnterAnswerWrapper;\n}(React.Component);\n\nEnterAnswerWrapper.propTypes = {\n  onCloaseAnswerWrapper: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  test: PropTypes.object,\n  onOpentTestScore: PropTypes.func.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired\n};\nvar mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeStudent: makeSelectActiveStudent(),\n  tests: makeSelectTests()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: function onFetchStudentTestSections(postBody) {\n      return dispatch(fetchStudentTestSections(postBody));\n    }\n  };\n}\n\nvar withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(EnterAnswerWrapper);","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/index.js"],"names":["React","update","connect","compose","createStructuredSelector","PropTypes","NavBar","InCompleteTestSection","PreStartTestSection","toast","Toast","addStudentAnswerToTestApi","updateStudentTestSectionStatusApi","updateStudentTestStatusApi","makeSelectStudentSections","makeSelectActiveStudentToken","makeSelectActiveStudent","makeSelectTests","fetchStudentTestSections","EnterAnswerWrapper","props","onFetchStudentTestSections","sections","studentToken","student_test_id","test","id","activeStudent","postBody","nextProps","length","onSetProblems","studentTestId","tests","test_id","testIds","map","currentTestIndex","findIndex","testId","currentTestSections","test_sections","section","testSectionIds","testSection","currentTestSectionIndex","testSectionId","test_section_id","currentTestSection","name","setState","testMathCalcProblems","testWritingProblems","testMathNoCalcProblems","testReadingProblems","testSections","currentSection","state","updatedState","activeSection","$set","currentProblems","getCurrentTestProblems","student_test_section_id","student_test_section_status","response","ok","success","previewTest","startedTest","test_problem_id","answer","activeTest","readingSectionCompleted","writingSectionCompleted","mathCalcSectionCompleted","mathNoCalcSectionCompleted","currentTestSectionId","status","onOpentTestScore","reading","writing","mathCalc","mathNoCalc","activeReadingSection","showInCompleteTest","activeWritingSection","activeMathNoCalcSection","activeMathWithCalcSection","onCloaseAnswerWrapper","open","test_description","onAddStudentAnswerToTest","onSetActivePage","getExistingSections","handleTestScore","Component","propTypes","func","isRequired","bool","object","mapStateToProps","mapDispatchToProps","dispatch","withConnect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport update from 'immutability-helper';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {createStructuredSelector} from 'reselect';\nimport PropTypes from 'prop-types';\nimport NavBar from './common/NavBar';\nimport InCompleteTestSection from './components/InCompleteSection';\nimport PreStartTestSection from './components/StartSection';\nimport { toast } from 'react-toastify';\nimport Toast from '../../../../Toast';\nimport {\n  addStudentAnswerToTestApi,\n  updateStudentTestSectionStatusApi,\n  updateStudentTestStatusApi,\n} from '../../../index/api';\nimport {\n  makeSelectStudentSections,\n  makeSelectActiveStudentToken,\n  makeSelectActiveStudent,\n  makeSelectTests,\n} from '../../../index/selectors';\nimport {fetchStudentTestSections} from '../../../index/actions';\n\n\nclass EnterAnswerWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      previewTest: false,\n      startedTest: false,\n      testSections: [],\n      studentTestId: \"\",\n      testReadingProblems: null,\n      testWritingProblems: null,\n      testMathCalcProblems: null,\n      testMathNoCalcProblems: null,\n      updatedState: {\n        activeReadingSection: true,\n        showInCompleteTest: false,\n        activeWritingSection: false,\n        activeMathNoCalcSection: false,\n        activeMathWithCalcSection: false,\n        activeSection: \"\",\n      },\n      readingSectionCompleted: false,\n      writingSectionCompleted: false,\n      mathCalcSectionCompleted: false,\n      mathNoCalcSectionCompleted: false,\n    };\n  }\n\n  componentDidMount = () => {\n    const {\n      onFetchStudentTestSections,\n      sections,\n      studentToken,\n      test: {student_test_id},\n      activeStudent: {id},\n    } = this.props;\n    const postBody = {\n      id,\n      student_test_id,\n      studentToken,\n    };\n    onFetchStudentTestSections(postBody);\n  };\n\n  componentWillReceiveProps = (nextProps) => {\n    const { sections, student_test_id } = nextProps;\n    if (sections.length !== 0) {\n      this.onSetProblems(sections, student_test_id);\n    }\n  };\n\n  onSetProblems = (sections, studentTestId) => {\n    const {\n      tests,\n      test: { test_id },\n    } = this.props;\n    const testIds = tests.map((test) => test.id);\n    const currentTestIndex = testIds.findIndex((testId) => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    sections.map((section) => {\n      const testSectionIds = currentTestSections.map((testSection) => testSection.id);\n      const currentTestSectionIndex = testSectionIds.findIndex(\n        (testSectionId) => testSectionId === section.test_section_id,\n      );\n      const currentTestSection = currentTestSections[currentTestSectionIndex];\n      if (!currentTestSection) return;\n      switch (currentTestSection.name) {\n        case \"Math (Calculator)\":\n          this.setState({\n            testMathCalcProblems: section,\n          });\n          break;\n        case \"Writing\":\n          this.setState({\n            testWritingProblems: section,\n          });\n          break;\n        case \"Math (No Calculator)\":\n          this.setState({\n            testMathNoCalcProblems: section,\n          });\n          break;\n        case \"Reading\":\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n        default:\n          this.setState({\n            testReadingProblems: section,\n          });\n          break;\n      }\n    });\n    this.setState({\n      testSections: sections,\n      studentTestId,\n    });\n  };\n\n  onSetActivePage = async (name) => {\n    const currentSection = this.state.updatedState.activeSection;\n    let updatedState;\n    if (name === 'showInCompleteTest') {\n      updatedState = update(this.state.updatedState, {\n        [name]: {$set: true},\n        [currentSection]: {$set: false},\n      });\n    } else {\n      updatedState = update(this.state.updatedState, {\n        [name]: {$set: true},\n        [currentSection]: {$set: false},\n        activeSection: {$set: name},\n      });\n    }\n    this.setState({ updatedState });\n    if (name === \"showInCompleteTest\") {\n      const currentProblems = this.getCurrentTestProblems();\n      const test_section_id = currentProblems.id;\n      const postBody = {\n        student_test_id: currentProblems.student_test_id,\n        student_test_section_id: test_section_id,\n        student_test_section_status: 'STARTED',\n      };\n      const response = await updateStudentTestSectionStatusApi(postBody);\n      if (response && response.ok === true) {\n        // Check for successful response before starting test or no answers will get recorded\n        toast.success(\"Test section is now STARTED.\");\n        this.setState({\n          previewTest: false,\n          startedTest: true,\n        });\n      }\n    } else {\n      this.setState({\n        previewTest: true,\n        startedTest: false,\n      });\n    }\n  };\n\n  onAddStudentAnswerToTest = async (test_problem_id, answer) => {\n    const {studentTestId} = this.state;\n    const postBody = {\n      student_test_id: studentTestId,\n      test_problem_id,\n      answer,\n    };\n    await addStudentAnswerToTestApi(postBody);\n  };\n\n  getCurrentTestProblems = () => {\n    const activeSection = this.state.updatedState.activeSection;\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    switch (activeSection) {\n      case \"activeReadingSection\":\n        return testReadingProblems;\n      case \"activeWritingSection\":\n        return testWritingProblems;\n      case \"activeMathWithCalcSection\":\n        return testMathCalcProblems;\n      case \"activeMathNoCalcSection\":\n        return testMathNoCalcProblems;\n      default:\n        return '';\n    }\n  };\n\n  handleTestScore = async (activeTest) => {\n    // Check for non-existing sections and set them to completed\n    const {\n      testReadingProblems,\n      testWritingProblems,\n      testMathCalcProblems,\n      testMathNoCalcProblems,\n    } = this.state;\n    if (!testReadingProblems) this.setState({ readingSectionCompleted: true });\n    if (!testWritingProblems) this.setState({ writingSectionCompleted: true });\n    if (!testMathCalcProblems) this.setState({ mathCalcSectionCompleted: true });\n    if (!testMathNoCalcProblems) this.setState({ mathNoCalcSectionCompleted: true });\n\n    // Update current section as completed\n    const {\n      tests,\n      test: { test_id },\n    } = this.props;\n    const currentTestSectionId = activeTest.test_section_id;\n    const testIds = tests.map((test) => test.id);\n    const currentTestIndex = testIds.findIndex((testId) => testId === test_id);\n    const currentTestSections = tests[currentTestIndex].test_sections;\n    const testSectionIds = currentTestSections.map((testSection) => testSection.id);\n    const currentTestSectionIndex = testSectionIds.findIndex(\n      (testSectionId) => testSectionId === currentTestSectionId,\n    );\n    const currentTestSection = currentTestSections[currentTestSectionIndex];\n    switch (currentTestSection.name) {\n      case \"Math (Calculator)\":\n        this.setState({\n          mathCalcSectionCompleted: true,\n        });\n        break;\n      case \"Writing\":\n        this.setState({\n          writingSectionCompleted: true,\n        });\n        break;\n      case \"Math (No Calculator)\":\n        this.setState({\n          mathNoCalcSectionCompleted: true,\n        });\n        break;\n      case \"Reading\":\n        this.setState({\n          readingSectionCompleted: true,\n        });\n        break;\n      default:\n        this.setState({\n          readingSectionCompleted: true,\n        });\n    }\n    // @TODO bring back started check for a test that was just created\n    // if (activeTest.test_section_status === 'STARTED') {\n    const postBody = {\n      student_test_id: activeTest.student_test_id,\n      student_test_section_id: activeTest.id,\n      student_test_section_status: \"COMPLETED\",\n    };\n    await updateStudentTestSectionStatusApi(postBody);\n    const {\n      readingSectionCompleted,\n      writingSectionCompleted,\n      mathCalcSectionCompleted,\n      mathNoCalcSectionCompleted,\n    } = this.state;\n    if (\n      readingSectionCompleted &&\n        writingSectionCompleted &&\n        mathCalcSectionCompleted &&\n        mathNoCalcSectionCompleted\n    ) {\n      const postBody = {\n        student_test_id: activeTest.student_test_id,\n        status: \"COMPLETED\",\n      };\n      await updateStudentTestStatusApi(postBody);\n      toast.success(\"All test sections have been COMPLETED.\");\n      const { onOpentTestScore } = this.props;\n      onOpentTestScore(activeTest);\n    } else {\n      toast.success(\"Test section is now COMPLETED.\");\n    }\n    // }\n    // }\n  };\n\n  getExistingSections = () => {\n    const { testReadingProblems, testWritingProblems, testMathCalcProblems, testMathNoCalcProblems } = this.state;\n    return {\n      reading: !!testReadingProblems,\n      writing: !!testWritingProblems,\n      mathCalc: !!testMathCalcProblems,\n      mathNoCalc: !!testMathNoCalcProblems,\n    };\n  }\n\n  render() {\n    const {\n      startedTest,\n      previewTest,\n      updatedState,\n    } = this.state;\n    const {\n      onCloaseAnswerWrapper,\n      open,\n      test: {test_description},\n      test,\n      onAddStudentAnswerToTest,\n    } = this.props;\n    if (!test) return;\n    return (\n      <React.Fragment>\n        {open && (\n          <div className=\"starting\">\n            <div className=\"main-holder grey lighten-5\">\n              <NavBar\n                onCloaseAnswerWrapper={onCloaseAnswerWrapper}\n                onSetActivePage={this.onSetActivePage}\n                testDescription={test_description}\n                active={updatedState.activeSection}\n                existingSections={this.getExistingSections()}\n              />\n              <PreStartTestSection\n                open={previewTest && this.getCurrentTestProblems()}\n                onSetActivePage={this.onSetActivePage}\n                testSection={this.getCurrentTestProblems()}\n              />\n              <InCompleteTestSection\n                open={startedTest && this.getCurrentTestProblems()}\n                onAddStudentAnswerToTest={onAddStudentAnswerToTest}\n                testSection={this.getCurrentTestProblems()}\n                onStudentTestScore={onCloaseAnswerWrapper}\n                handleTestScore={this.handleTestScore}\n              />\n              <Toast />\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nEnterAnswerWrapper.propTypes = {\n  onCloaseAnswerWrapper: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  test: PropTypes.object,\n  onOpentTestScore: PropTypes.func.isRequired,\n  onAddStudentAnswerToTest: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  sections: makeSelectStudentSections(),\n  studentToken: makeSelectActiveStudentToken(),\n  activeStudent: makeSelectActiveStudent(),\n  tests: makeSelectTests(),\n});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onFetchStudentTestSections: postBody => dispatch(fetchStudentTestSections(postBody)),\n  };\n}\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(EnterAnswerWrapper);\n"]},"metadata":{},"sourceType":"module"}