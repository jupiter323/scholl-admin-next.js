{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/LessonWorksheetTestSection/components/Question/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { difficultyMap, getAnswerColor, getCompleteAnswerColor } from '../../utils';\n\nclass Question extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"mapAnswerChoices\", () => {\n      const {\n        question: {\n          answerType,\n          answerChoices,\n          studentAnswer\n        },\n        answerSheetComplete\n      } = this.props;\n\n      if (answerSheetComplete) {\n        if (answerType === 'letter') {\n          return __jsx(\"ul\", {\n            className: \"answer-list\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 12\n            },\n            __self: this\n          }, answerChoices.map(answer => __jsx(\"li\", {\n            key: answer.answerLetter,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 14\n            },\n            __self: this\n          }, __jsx(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: getCompleteAnswerColor('letter', answer, studentAnswer),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 15\n            },\n            __self: this\n          }, answer.answerLetter))));\n        }\n\n        return __jsx(\"ul\", {\n          className: \"answer-list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, answerChoices.map(answer => __jsx(\"li\", {\n          key: answer.answerValue,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: getCompleteAnswerColor('value', answer, studentAnswer),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, answer.answerValue))));\n      }\n\n      if (answerType === 'letter') {\n        return __jsx(\"ul\", {\n          className: \"answer-list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, answerChoices.map(answer => __jsx(\"li\", {\n          key: answer.answerLetter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          className: \"badge-circle badge-circle-bordered\",\n          style: getAnswerColor(answer),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, answer.answerLetter))));\n      }\n\n      return __jsx(\"ul\", {\n        className: \"answer-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, answerChoices.map(answer => __jsx(\"li\", {\n        key: answer.answerValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"badge badge-rounded badge-rounded-bordered\",\n        style: getAnswerColor(answer),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, answer.answerValue))));\n    });\n  }\n\n  render() {\n    const {\n      onOpenQuestionModal,\n      question,\n      answerSheetComplete,\n      handleQuestionDropdownClick,\n      questionDropdownOpen,\n      questionDropdownIndex\n    } = this.props;\n    const {\n      difficulty,\n      hasVideo,\n      flagged,\n      studentNotes\n    } = question;\n    return __jsx(\"li\", {\n      className: \"answers-list-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"answer-row row mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col col-120\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.mapAnswerChoices()), __jsx(\"div\", {\n      className: \"col col-30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"status-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, difficultyMap[difficulty])), hasVideo && __jsx(\"div\", {\n      className: \"col col-43\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"play-progress\",\n      \"data-video-id\": \"video001\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"play\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), __jsx(\"svg\", {\n      viewBox: \"0 0 50 50\",\n      width: \"50\",\n      height: \"50\",\n      version: \"1.1\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, __jsx(\"circle\", {\n      className: \"circle-static\",\n      cx: \"25.8\",\n      cy: \"24.3\",\n      r: \"22.8\",\n      style: {\n        strokeWidth: '3',\n        fill: 'rgba(0,0,0,0)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), __jsx(\"circle\", {\n      className: \"circle-progress\",\n      cx: \"25.8\",\n      cy: \"24.3\",\n      r: \"22.8\",\n      style: {\n        stroke: 'none',\n        strokeWidth: '3',\n        fill: 'rgba(0,0,0,0)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })))), __jsx(\"div\", {\n      className: \"col col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, answerSheetComplete && flagged ? __jsx(\"span\", {\n      className: \"status-answer\",\n      style: {\n        color: '#c0272d'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"icon-flag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), __jsx(\"b\", {\n      className: \"status-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Review\")) : null), __jsx(\"div\", {\n      className: \"dropdown-block col col-35\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"dropdown-trigger\",\n      \"data-target\": \"dropdown_answer01-3\",\n      onClick: event => handleQuestionDropdownClick(event, question),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"material-icons dots-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"more_vert\")), questionDropdownOpen && question.id === questionDropdownIndex ? __jsx(\"ul\", {\n      id: \"dropdown_answer01-3\",\n      className: \"dropdown-content dropdown-exwide\",\n      style: {\n        display: 'block',\n        opacity: '1',\n        transform: 'scaleX(1) scaleY(1)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: \"modal-trigger\",\n      href: \"#\",\n      onClick: () => onOpenQuestionModal(question),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"View Problem\")), __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Dismiss Flag\")), __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Edit Response\"))) : null)), answerSheetComplete && studentNotes ? __jsx(\"div\", {\n      className: \"comment-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore?  tincidunt ut laoreet dolore?\")) : null);\n  }\n\n}\n\n;\nQuestion.propTypes = {\n  question: PropTypes.object.isRequired,\n  questionDropdownIndex: PropTypes.number,\n  onOpenQuestionModal: PropTypes.func.isRequired,\n  answerSheetComplete: PropTypes.bool.isRequired,\n  questionDropdownOpen: PropTypes.bool.isRequired,\n  handleQuestionDropdownClick: PropTypes.func.isRequired\n};\nexport default Question;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/LessonWorksheetTestSection/components/Question/index.js"],"names":["React","PropTypes","difficultyMap","getAnswerColor","getCompleteAnswerColor","Question","Component","question","answerType","answerChoices","studentAnswer","answerSheetComplete","props","map","answer","answerLetter","answerValue","render","onOpenQuestionModal","handleQuestionDropdownClick","questionDropdownOpen","questionDropdownIndex","difficulty","hasVideo","flagged","studentNotes","mapAnswerChoices","strokeWidth","fill","stroke","color","event","id","display","opacity","transform","propTypes","object","isRequired","number","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { difficultyMap, getAnswerColor, getCompleteAnswerColor } from '../../utils';\n\nclass Question extends React.Component {\n  mapAnswerChoices = () => {\n    const { question: { answerType, answerChoices, studentAnswer }, answerSheetComplete } = this.props;\n    if (answerSheetComplete) {\n      if (answerType === 'letter') {\n        return (\n          <ul className=\"answer-list\">\n            {answerChoices.map(answer => (\n              <li key={answer.answerLetter}>\n                <span\n                  className=\"badge-circle badge-circle-bordered\"\n                  style={getCompleteAnswerColor('letter', answer, studentAnswer)}\n                >\n                  {answer.answerLetter}\n                </span>\n              </li>\n            ))}\n          </ul>\n        );\n      }\n      return (\n        <ul className=\"answer-list\">\n          {answerChoices.map(answer => (\n            <li key={answer.answerValue}>\n              <span\n                className=\"badge badge-rounded badge-rounded-bordered\"\n                style={getCompleteAnswerColor('value', answer, studentAnswer)}\n              >\n                {answer.answerValue}\n              </span>\n            </li>\n          ))}\n        </ul>\n      )\n    }\n    if (answerType === 'letter') {\n      return (\n        <ul className=\"answer-list\">\n          {answerChoices.map(answer => (\n            <li key={answer.answerLetter}>\n              <span\n                className=\"badge-circle badge-circle-bordered\"\n                style={getAnswerColor(answer)}\n              >\n                {answer.answerLetter}\n              </span>\n            </li>\n          ))}\n        </ul>\n      );\n    }\n    return (\n      <ul className=\"answer-list\">\n        {answerChoices.map(answer => (\n          <li key={answer.answerValue}>\n            <span\n              className=\"badge badge-rounded badge-rounded-bordered\"\n              style={getAnswerColor(answer)}\n            >\n              {answer.answerValue}\n            </span>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  render() {\n    const { onOpenQuestionModal, question, answerSheetComplete, handleQuestionDropdownClick, questionDropdownOpen, questionDropdownIndex } = this.props;\n    const { difficulty, hasVideo, flagged, studentNotes } = question;\n    return (\n      <li className=\"answers-list-holder\">\n        <div className=\"answer-row row mb-0\">\n          <div className=\"col col-120\">\n            {this.mapAnswerChoices()}\n          </div>\n          <div className=\"col col-30\">\n            <span className=\"status-info\">{difficultyMap[difficulty]}</span>\n          </div>\n          {hasVideo && (\n            <div className=\"col col-43\">\n              <span className=\"play-progress\" data-video-id=\"video001\">\n                <span className=\"play\"></span>\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle className=\"circle-static\" cx=\"25.8\" cy=\"24.3\" r=\"22.8\" style={{ strokeWidth: '3', fill: 'rgba(0,0,0,0)' }}/>\n                  <circle className=\"circle-progress\" cx=\"25.8\" cy=\"24.3\" r=\"22.8\" style={{ stroke: 'none', strokeWidth: '3', fill: 'rgba(0,0,0,0)' }}/>\n                </svg>\n              </span>\n            </div>\n          )}\n          <div className=\"col col-auto\">\n            <If condition={answerSheetComplete && flagged}>\n              <span className=\"status-answer\" style={{ color: '#c0272d' }}>\n                <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n              </span>\n            </If>\n          </div>\n          <div className=\"dropdown-block col col-35\">\n            <a\n              href='#'\n              className='dropdown-trigger'\n              data-target='dropdown_answer01-3'\n              onClick={(event) => handleQuestionDropdownClick(event, question)}\n            >\n              <i className=\"material-icons dots-icon\">more_vert</i>\n            </a>\n            <If condition={questionDropdownOpen && question.id === questionDropdownIndex}>\n              <ul id='dropdown_answer01-3' className='dropdown-content dropdown-exwide' style={{ display: 'block', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}>\n                <li><a className='modal-trigger' href=\"#\" onClick={() => onOpenQuestionModal(question)}>View Problem</a></li>\n                <li><a href=\"#!\">Dismiss Flag</a></li>\n                <li><a href=\"#!\">Edit Response</a></li>\n              </ul>\n            </If>\n          </div>\n        </div>\n        <If condition={answerSheetComplete && studentNotes}>\n          <div className=\"comment-block\">\n            <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore?  tincidunt ut laoreet dolore?</p>\n          </div>\n        </If>\n      </li>\n    );\n  }\n};\n\nQuestion.propTypes = {\n  question: PropTypes.object.isRequired,\n  questionDropdownIndex: PropTypes.number,\n  onOpenQuestionModal: PropTypes.func.isRequired,\n  answerSheetComplete: PropTypes.bool.isRequired,\n  questionDropdownOpen: PropTypes.bool.isRequired,\n  handleQuestionDropdownClick: PropTypes.func.isRequired,\n};\n\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}