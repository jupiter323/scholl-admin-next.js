{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport FilterSection from './components/FilterSection';\nimport TestSectionCard from './components/TestSectionCard';\nimport { availableDateSort, dueDateSort, statusSort, flagsSort, problemSort, timeEstimateSort, subjectSort, percentageCompleteSort } from '../utils/sortOptions';\nimport { testSectionSubjectMap } from '../utils/testSectionCardUtils';\nimport sampleTestSections from '../utils/sampleTestSections';\n\nvar TestSectionsPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TestSectionsPage, _React$Component);\n\n  function TestSectionsPage(props) {\n    var _this;\n\n    _classCallCheck(this, TestSectionsPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestSectionsPage).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetSort\", function (sort) {\n      return _this.setState({\n        sort: sort\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClearFilters\", function () {\n      return _this.setState({\n        sort: '',\n        testVersionFilter: '',\n        subjectFilters: [],\n        flagFilter: false,\n        availableDateFilters: [],\n        dueDateFilters: []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetDropdown\", function (dropdownIndex) {\n      return _this.setState({\n        dropdownIndex: dropdownIndex,\n        dropdownIsOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCloseDropdown\", function () {\n      return _this.setState({\n        dropdownIsOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSetFilteredState\", function (value) {\n      return _this.setState({\n        testVersionFilter: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onUnsetFilteredState\", function () {\n      return _this.setState({\n        testVersionFilter: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortTestSections\", function (testSections) {\n      var sort = _this.state.sort;\n\n      switch (sort) {\n        case 'flags':\n          return testSections.sort(flagsSort);\n\n        case 'dueDate':\n          return testSections.sort(dueDateSort);\n\n        case 'availableDate':\n          return testSections.sort(availableDateSort);\n\n        case 'status':\n          return testSections.sort(statusSort);\n\n        case 'problems':\n          return testSections.sort(problemSort);\n\n        case 'timeEstimate':\n          return testSections.sort(timeEstimateSort);\n\n        case 'subject':\n          return testSections.sort(subjectSort);\n\n        case 'percentageComplete':\n          return testSections.sort(percentageCompleteSort);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByTestVersion\", function () {\n      var _this$state = _this.state,\n          testSections = _this$state.testSections,\n          testVersionFilter = _this$state.testVersionFilter;\n      return testSections.reduce(function (finalArr, currentTestSection) {\n        var version = currentTestSection.version;\n        var testSectionString = version.replace(/\\s/g, \"\").toLowerCase();\n\n        if (testSectionString.indexOf(testVersionFilter) !== -1 && finalArr.indexOf(currentTestSection) === -1) {\n          finalArr.push(currentTestSection);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterByDate\", function (incomingSections, dateType) {\n      var _this$state2 = _this.state,\n          dueDateFilters = _this$state2.dueDateFilters,\n          availableDateFilters = _this$state2.availableDateFilters;\n      var dateFilters;\n      var testSections = incomingSections;\n      var currentDate = moment().format('MM/DD/YY');\n      var currentDateIndex = new Date().getDay();\n      var endOfWeekIndex = 6 - currentDateIndex;\n      var endOfWeekDate = moment().add(endOfWeekIndex, 'days').format('MM/DD/YY');\n\n      if (dateType === 'dueDate') {\n        dateFilters = dueDateFilters;\n\n        if (dateFilters.indexOf('dueToday') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.dueDate === currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('dueNextSession') !== -1) {\n          console.warn('Pending decision on how next session date is calculated');\n        }\n\n        if (dateFilters.indexOf('overdue') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.dueDate < currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('dueThisWeek') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.dueDate >= currentDate && testSection.dueDate <= endOfWeekDate;\n          });\n        }\n      } else {\n        dateFilters = availableDateFilters;\n\n        if (dateFilters.indexOf('future') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.availableDate > currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('available') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.availableDate <= currentDate;\n          });\n        }\n\n        if (dateFilters.indexOf('complete') !== -1) {\n          testSections = testSections.filter(function (testSection) {\n            return testSection.percentageComplete === '100';\n          });\n        }\n      }\n\n      return testSections;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterTestSections\", function () {\n      var _this$state3 = _this.state,\n          subjectFilters = _this$state3.subjectFilters,\n          dueDateFilters = _this$state3.dueDateFilters,\n          availableDateFilters = _this$state3.availableDateFilters,\n          flagFilter = _this$state3.flagFilter,\n          allTestSections = _this$state3.testSections;\n      var testSections = allTestSections;\n\n      if (subjectFilters.length) {\n        testSections = testSections.filter(function (testSection) {\n          return subjectFilters.indexOf(testSectionSubjectMap[testSection.subject]) !== -1;\n        });\n      }\n\n      if (dueDateFilters.length) {\n        testSections = _this.onFilterByDate(testSections, 'dueDate');\n      }\n\n      if (availableDateFilters.length) {\n        testSections = _this.onFilterByDate(testSections, 'availableDate');\n      }\n\n      if (flagFilter) {\n        testSections = testSections.filter(function (testSection) {\n          return testSection.flags.length;\n        });\n      }\n\n      return testSections;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMappableTestSections\", function () {\n      var _this$state4 = _this.state,\n          subjectFilters = _this$state4.subjectFilters,\n          dueDateFilters = _this$state4.dueDateFilters,\n          availableDateFilters = _this$state4.availableDateFilters,\n          flagFilter = _this$state4.flagFilter,\n          sort = _this$state4.sort,\n          testVersionFilter = _this$state4.testVersionFilter,\n          testSections = _this$state4.testSections;\n      var mappableTestSections = testSections;\n\n      if (testVersionFilter.length) {\n        mappableTestSections = _this.onFilterByTestVersion();\n      }\n\n      if (subjectFilters.length || dueDateFilters.length || availableDateFilters.length || flagFilter) {\n        mappableTestSections = _this.onFilterTestSections();\n      }\n\n      if (sort) {\n        return _this.onSortTestSections(mappableTestSections);\n      }\n\n      return mappableTestSections;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFilterClick\", function (filterType, filter) {\n      var _this$state5 = _this.state,\n          currentAvailableDateFilters = _this$state5.availableDateFilters,\n          currentDueDateFilters = _this$state5.dueDateFilters,\n          currentSubjectFilters = _this$state5.subjectFilters,\n          flagFilter = _this$state5.flagFilter;\n      var modifiedFilterCurrentState;\n      var modifiedFilterName;\n      var modifiedFilterUpdatedState;\n\n      switch (filterType) {\n        case 'subject':\n          modifiedFilterCurrentState = currentSubjectFilters;\n          modifiedFilterName = 'subjectFilters';\n          break;\n\n        case 'dueDate':\n          modifiedFilterCurrentState = currentDueDateFilters;\n          modifiedFilterName = 'dueDateFilters';\n          break;\n\n        case 'availableDate':\n          modifiedFilterCurrentState = currentAvailableDateFilters;\n          modifiedFilterName = 'availableDateFilters';\n          break;\n\n        case 'hasFlags':\n          return _this.setState({\n            flagFilter: !flagFilter\n          });\n\n        default:\n          break;\n      }\n\n      if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $push: [filter]\n        });\n      } else {\n        var filterIndex = modifiedFilterCurrentState.indexOf(filter);\n        modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n          $splice: [[filterIndex, 1]]\n        });\n      }\n\n      _this.setState(_defineProperty({}, modifiedFilterName, modifiedFilterUpdatedState));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mapTestSections\", function () {\n      return _this.getMappableTestSections().map(function (testSection, index) {\n        return React.createElement(TestSectionCard, {\n          index: index,\n          key: testSection.id,\n          testSection: testSection,\n          onSetDropdown: _this.onSetDropdown,\n          onCloseDropdown: _this.onCloseDropdown,\n          dropdownIndex: _this.state.dropdownIndex,\n          dropdownIsOpen: _this.state.dropdownIsOpen\n        });\n      });\n    });\n\n    _this.state = {\n      sort: '',\n      testVersionFilter: '',\n      subjectFilters: [],\n      flagFilter: false,\n      availableDateFilters: [],\n      dueDateFilters: [],\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      testSections: sampleTestSections\n    };\n    return _this;\n  }\n\n  _createClass(TestSectionsPage, [{\n    key: \"render\",\n    value: function render() {\n      var testSections = this.state.testSections;\n      return React.createElement(React.Fragment, null, React.createElement(FilterSection, {\n        sort: this.state.sort,\n        onSetSort: this.onSetSort,\n        flagFilter: this.state.flagFilter,\n        onClearFilters: this.onClearFilters,\n        handleFilterClick: this.handleFilterClick,\n        subjectFilters: this.state.subjectFilters,\n        dueDateFilters: this.state.dueDateFilters,\n        availableDateFilters: this.state.availableDateFilters,\n        onSetFilteredState: this.onSetFilteredState,\n        onUnsetFilteredState: this.onUnsetFilteredState\n      }), React.createElement(\"div\", {\n        className: \"content-section\"\n      }, React.createElement(\"div\", {\n        className: \"result-row center-align\"\n      }, React.createElement(\"b\", {\n        className: \"result\"\n      }, \" - \", testSections.length, \" results -\")), React.createElement(\"div\", {\n        className: \"row d-flex-content card-width-272\"\n      }, this.mapTestSections())));\n    }\n  }]);\n\n  return TestSectionsPage;\n}(React.Component);\n\nexport default TestSectionsPage;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Class/TestSectionsPage/index.js"],"names":["React","update","moment","FilterSection","TestSectionCard","availableDateSort","dueDateSort","statusSort","flagsSort","problemSort","timeEstimateSort","subjectSort","percentageCompleteSort","testSectionSubjectMap","sampleTestSections","TestSectionsPage","props","sort","setState","testVersionFilter","subjectFilters","flagFilter","availableDateFilters","dueDateFilters","dropdownIndex","dropdownIsOpen","value","testSections","state","reduce","finalArr","currentTestSection","version","testSectionString","replace","toLowerCase","indexOf","push","incomingSections","dateType","dateFilters","currentDate","format","currentDateIndex","Date","getDay","endOfWeekIndex","endOfWeekDate","add","filter","testSection","dueDate","console","warn","availableDate","percentageComplete","allTestSections","length","subject","onFilterByDate","flags","mappableTestSections","onFilterByTestVersion","onFilterTestSections","onSortTestSections","filterType","currentAvailableDateFilters","currentDueDateFilters","currentSubjectFilters","modifiedFilterCurrentState","modifiedFilterName","modifiedFilterUpdatedState","$push","filterIndex","$splice","getMappableTestSections","map","index","id","onSetDropdown","onCloseDropdown","onSetSort","onClearFilters","handleFilterClick","onSetFilteredState","onUnsetFilteredState","mapTestSections","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport update from 'immutability-helper';\nimport moment from 'moment';\n\nimport FilterSection from './components/FilterSection';\nimport TestSectionCard from './components/TestSectionCard';\n\nimport { availableDateSort, dueDateSort, statusSort, flagsSort, problemSort, timeEstimateSort, subjectSort, percentageCompleteSort } from '../utils/sortOptions';\nimport { testSectionSubjectMap } from '../utils/testSectionCardUtils';\nimport sampleTestSections from '../utils/sampleTestSections';\n\nclass TestSectionsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sort: '',\n      testVersionFilter: '',\n      subjectFilters: [],\n      flagFilter: false,\n      availableDateFilters: [],\n      dueDateFilters: [],\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      testSections: sampleTestSections,\n    };\n  }\n\n  onSetSort = (sort) => this.setState({ sort })\n\n  onClearFilters = () => this.setState({ sort: '', testVersionFilter: '', subjectFilters: [], flagFilter: false, availableDateFilters: [], dueDateFilters: [] })\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false });\n\n  onSetFilteredState = (value) => this.setState({ testVersionFilter: value })\n  onUnsetFilteredState = () => this.setState({ testVersionFilter: '' })\n\n  // eslint-disable-next-line consistent-return\n  onSortTestSections = (testSections) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case 'flags':\n        return testSections.sort(flagsSort);\n      case 'dueDate':\n        return testSections.sort(dueDateSort);\n      case 'availableDate':\n        return testSections.sort(availableDateSort);\n      case 'status':\n        return testSections.sort(statusSort);\n      case 'problems':\n        return testSections.sort(problemSort);\n      case 'timeEstimate':\n        return testSections.sort(timeEstimateSort);\n      case 'subject':\n        return testSections.sort(subjectSort);\n      case 'percentageComplete':\n        return testSections.sort(percentageCompleteSort);\n      default:\n        break;\n    }\n  }\n\n  onFilterByTestVersion = () => {\n    const { testSections, testVersionFilter } = this.state;\n    return testSections.reduce((finalArr, currentTestSection) => {\n      const { version } = currentTestSection;\n      const testSectionString = version.replace(/\\s/g, \"\").toLowerCase();\n      if (testSectionString.indexOf(testVersionFilter) !== -1 && finalArr.indexOf(currentTestSection) === -1) {\n        finalArr.push(currentTestSection);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterByDate = (incomingSections, dateType) => {\n    const { dueDateFilters, availableDateFilters } = this.state;\n    let dateFilters;\n    let testSections = incomingSections;\n\n    const currentDate = moment().format('MM/DD/YY');\n    const currentDateIndex = new Date().getDay();\n    const endOfWeekIndex = 6 - currentDateIndex;\n    const endOfWeekDate = moment().add(endOfWeekIndex, 'days').format('MM/DD/YY')\n    if (dateType === 'dueDate') {\n      dateFilters = dueDateFilters;\n      if (dateFilters.indexOf('dueToday') !== -1) {\n        testSections = testSections.filter(testSection => testSection.dueDate === currentDate);\n      }\n      if (dateFilters.indexOf('dueNextSession') !== -1) {\n        console.warn('Pending decision on how next session date is calculated');\n      }\n      if (dateFilters.indexOf('overdue') !== -1) {\n        testSections = testSections.filter(testSection => testSection.dueDate < currentDate);\n      }\n      if (dateFilters.indexOf('dueThisWeek') !== -1) {\n        testSections = testSections.filter(testSection => testSection.dueDate >= currentDate && testSection.dueDate <= endOfWeekDate);\n      }\n    } else {\n      dateFilters = availableDateFilters;\n      if (dateFilters.indexOf('future') !== -1) {\n        testSections = testSections.filter(testSection => testSection.availableDate > currentDate);\n      }\n      if (dateFilters.indexOf('available') !== -1) {\n        testSections = testSections.filter(testSection => testSection.availableDate <= currentDate);\n      }\n      if (dateFilters.indexOf('complete') !== -1) {\n        testSections = testSections.filter(testSection => testSection.percentageComplete === '100');\n      }\n    }\n    return testSections;\n  }\n\n  onFilterTestSections = () => {\n    const { subjectFilters, dueDateFilters, availableDateFilters, flagFilter, testSections: allTestSections } = this.state;\n    let testSections = allTestSections;\n    if (subjectFilters.length) {\n      testSections = testSections.filter(testSection => subjectFilters.indexOf(testSectionSubjectMap[testSection.subject]) !== -1);\n    }\n    if (dueDateFilters.length) {\n      testSections = this.onFilterByDate(testSections, 'dueDate');\n    }\n    if (availableDateFilters.length) {\n      testSections = this.onFilterByDate(testSections, 'availableDate');\n    }\n    if (flagFilter) {\n      testSections = testSections.filter(testSection => testSection.flags.length);\n    }\n    return testSections;\n  }\n\n  getMappableTestSections = () => {\n    const { subjectFilters, dueDateFilters, availableDateFilters, flagFilter, sort, testVersionFilter, testSections } = this.state;\n    let mappableTestSections = testSections;\n    if (testVersionFilter.length) {\n      mappableTestSections = this.onFilterByTestVersion();\n    }\n    if (subjectFilters.length || dueDateFilters.length || availableDateFilters.length || flagFilter) {\n      mappableTestSections = this.onFilterTestSections();\n    }\n    if (sort) {\n      return this.onSortTestSections(mappableTestSections);\n    }\n    return mappableTestSections;\n  }\n\n  // eslint-disable-next-line consistent-return\n  handleFilterClick = (filterType, filter) => {\n    const { availableDateFilters: currentAvailableDateFilters, dueDateFilters: currentDueDateFilters,\n      subjectFilters: currentSubjectFilters, flagFilter } = this.state;\n    let modifiedFilterCurrentState;\n    let modifiedFilterName;\n    let modifiedFilterUpdatedState;\n    switch (filterType) {\n      case 'subject':\n        modifiedFilterCurrentState = currentSubjectFilters;\n        modifiedFilterName = 'subjectFilters';\n        break;\n      case 'dueDate':\n        modifiedFilterCurrentState = currentDueDateFilters;\n        modifiedFilterName = 'dueDateFilters';\n        break;\n      case 'availableDate':\n        modifiedFilterCurrentState = currentAvailableDateFilters;\n        modifiedFilterName = 'availableDateFilters';\n        break;\n      case 'hasFlags':\n        return this.setState({ flagFilter: !flagFilter });\n      default:\n        break;\n    }\n    if (modifiedFilterCurrentState.indexOf(filter) === -1) {\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $push: [filter],\n      });\n    } else {\n      const filterIndex = modifiedFilterCurrentState.indexOf(filter);\n      modifiedFilterUpdatedState = update(modifiedFilterCurrentState, {\n        $splice: [[ filterIndex, 1 ]],\n      });\n    }\n    this.setState({ [modifiedFilterName]: modifiedFilterUpdatedState });\n  }\n\n  mapTestSections = () => this.getMappableTestSections().map((testSection, index) => (\n    <TestSectionCard\n      index={index}\n      key={testSection.id}\n      testSection={testSection}\n      onSetDropdown={this.onSetDropdown}\n      onCloseDropdown={this.onCloseDropdown}\n      dropdownIndex={this.state.dropdownIndex}\n      dropdownIsOpen={this.state.dropdownIsOpen}\n    />\n  ))\n\n  render() {\n    const { testSections } = this.state;\n    return (\n      <React.Fragment>\n        <FilterSection\n          sort={this.state.sort}\n          onSetSort={this.onSetSort}\n          flagFilter={this.state.flagFilter}\n          onClearFilters={this.onClearFilters}\n          handleFilterClick={this.handleFilterClick}\n          subjectFilters={this.state.subjectFilters}\n          dueDateFilters={this.state.dueDateFilters}\n          availableDateFilters={this.state.availableDateFilters}\n          onSetFilteredState={this.onSetFilteredState}\n          onUnsetFilteredState={this.onUnsetFilteredState}\n        />\n        <div className=\"content-section\">\n          <div className=\"result-row center-align\">\n            <b className=\"result\"> - {testSections.length} results -</b>\n          </div>\n          <div className=\"row d-flex-content card-width-272\">\n            {this.mapTestSections()}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TestSectionsPage;\n"]},"metadata":{},"sourceType":"module"}