{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport ControlComponent from './styles/ControlComponent';\nimport { DropdownStyles } from './styles/dropdownStyles';\nimport DropdownWrapper from './styles';\n\nvar Dropdown = function Dropdown(_ref) {\n  var value = _ref.value,\n      label = _ref.label,\n      dropdownKey = _ref.dropdownKey,\n      _ref$stateKey = _ref.stateKey,\n      stateKey = _ref$stateKey === void 0 ? null : _ref$stateKey,\n      _onChange = _ref.onChange,\n      options = _ref.options,\n      _ref$valid = _ref.valid,\n      valid = _ref$valid === void 0 ? true : _ref$valid,\n      padRight = _ref.padRight,\n      className = _ref.className;\n  return React.createElement(DropdownWrapper, {\n    className: className,\n    valid: valid || !valid && value === {},\n    padRight: padRight\n  }, React.createElement(Select, {\n    options: options,\n    onChange: function onChange(event) {\n      return _onChange(event.value, dropdownKey, stateKey);\n    },\n    components: {\n      Control: ControlComponent\n    },\n    name: \"categoryOptions\",\n    classNamePrefix: dropdownKey === 'difficulty' ? 'expanded-select' : 'select',\n    placeholder: label,\n    styles: DropdownStyles,\n    isClearable: false,\n    isSearchable: false,\n    value: value,\n    instanceId: \"dropdown-select\"\n  }));\n};\n\nDropdown.propTypes = {\n  value: PropTypes.any,\n  valid: PropTypes.bool,\n  padRight: PropTypes.bool,\n  stateKey: PropTypes.string,\n  className: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  dropdownKey: PropTypes.string.isRequired\n};\nexport default Dropdown;","map":{"version":3,"sources":["/Users/chrischavarro/clear-choice/clear-choice-admin/components/FormComponents/Dropdown/index.js"],"names":["React","PropTypes","Select","ControlComponent","DropdownStyles","DropdownWrapper","Dropdown","value","label","dropdownKey","stateKey","onChange","options","valid","padRight","className","event","Control","propTypes","any","bool","string","isRequired","array","func"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,OAAOC,eAAP,MAA4B,UAA5B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,KAAV,QAAUA,KAAV;AAAA,MAAiBC,WAAjB,QAAiBA,WAAjB;AAAA,2BAA8BC,QAA9B;AAAA,MAA8BA,QAA9B,8BAAyC,IAAzC;AAAA,MAA+CC,SAA/C,QAA+CA,QAA/C;AAAA,MAAyDC,OAAzD,QAAyDA,OAAzD;AAAA,wBAAkEC,KAAlE;AAAA,MAAkEA,KAAlE,2BAA0E,IAA1E;AAAA,MAAgFC,QAAhF,QAAgFA,QAAhF;AAAA,MAA0FC,SAA1F,QAA0FA,SAA1F;AAAA,SACf,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEA,SAA5B;AAAuC,IAAA,KAAK,EAAGF,KAAD,IAAY,CAACA,KAAD,IAAUN,KAAK,KAAK,EAA9E;AAAmF,IAAA,QAAQ,EAAEO;AAA7F,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEF,OADX;AAEE,IAAA,QAAQ,EAAE,kBAACI,KAAD;AAAA,aAAWL,SAAQ,CAACK,KAAK,CAACT,KAAP,EAAcE,WAAd,EAA2BC,QAA3B,CAAnB;AAAA,KAFZ;AAGE,IAAA,UAAU,EAAE;AAAEO,MAAAA,OAAO,EAAEd;AAAX,KAHd;AAIE,IAAA,IAAI,EAAC,iBAJP;AAKE,IAAA,eAAe,EAAEM,WAAW,KAAK,YAAhB,GAA+B,iBAA/B,GAAmD,QALtE;AAME,IAAA,WAAW,EAAED,KANf;AAOE,IAAA,MAAM,EAAEJ,cAPV;AAQE,IAAA,WAAW,EAAE,KARf;AASE,IAAA,YAAY,EAAE,KAThB;AAUE,IAAA,KAAK,EAAEG,KAVT;AAWE,IAAA,UAAU,EAAC;AAXb,IADF,CADe;AAAA,CAAjB;;AAkBAD,QAAQ,CAACY,SAAT,GAAqB;AACnBX,EAAAA,KAAK,EAAEN,SAAS,CAACkB,GADE;AAEnBN,EAAAA,KAAK,EAAEZ,SAAS,CAACmB,IAFE;AAGnBN,EAAAA,QAAQ,EAAEb,SAAS,CAACmB,IAHD;AAInBV,EAAAA,QAAQ,EAAET,SAAS,CAACoB,MAJD;AAKnBN,EAAAA,SAAS,EAAEd,SAAS,CAACoB,MALF;AAMnBb,EAAAA,KAAK,EAAEP,SAAS,CAACoB,MAAV,CAAiBC,UANL;AAOnBV,EAAAA,OAAO,EAAEX,SAAS,CAACsB,KAAV,CAAgBD,UAPN;AAQnBX,EAAAA,QAAQ,EAAEV,SAAS,CAACuB,IAAV,CAAeF,UARN;AASnBb,EAAAA,WAAW,EAAER,SAAS,CAACoB,MAAV,CAAiBC;AATX,CAArB;AAYA,eAAehB,QAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\n\nimport ControlComponent from './styles/ControlComponent';\nimport { DropdownStyles } from './styles/dropdownStyles';\nimport DropdownWrapper from './styles';\n\nconst Dropdown = ({ value, label, dropdownKey, stateKey = null, onChange, options, valid = true, padRight, className }) => (\n  <DropdownWrapper className={className} valid={(valid) || (!valid && value === {})} padRight={padRight}>\n    <Select\n      options={options}\n      onChange={(event) => onChange(event.value, dropdownKey, stateKey)}\n      components={{ Control: ControlComponent }}\n      name=\"categoryOptions\"\n      classNamePrefix={dropdownKey === 'difficulty' ? 'expanded-select' : 'select'}\n      placeholder={label}\n      styles={DropdownStyles}\n      isClearable={false}\n      isSearchable={false}\n      value={value}\n      instanceId=\"dropdown-select\"\n    />\n  </DropdownWrapper>\n);\n\nDropdown.propTypes = {\n  value: PropTypes.any,\n  valid: PropTypes.bool,\n  padRight: PropTypes.bool,\n  stateKey: PropTypes.string,\n  className: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  dropdownKey: PropTypes.string.isRequired,\n};\n\nexport default Dropdown;\n\n"]},"metadata":{},"sourceType":"module"}