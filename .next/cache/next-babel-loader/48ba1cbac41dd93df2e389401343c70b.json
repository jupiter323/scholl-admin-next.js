{"ast":null,"code":"import _objectSpread2 from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport update from 'immutability-helper';\nimport { Sticky, StickyContainer } from 'react-sticky';\nimport InstructorCard from './components/InstructorCard';\nimport FilterSection from './components/FilterSection';\nimport NewInstructorModal from './components/NewInstructorModal'; // import { saveNewSuccess as savePracticeTestSuccess, saveChangesSuccess, saveNewError as savePracticeTestError } from '../../utils/fieldValidation';\n\nimport { firstNameAscending, firstNameDescending, lastNameAscending, lastNameDescending } from '../../utils/sortFunctions';\nimport { fetchInstructorsApi, createNewInstructorApi } from '../index/api';\nimport { setInstructors } from '../index/actions';\nimport { makeSelectInstructors } from '../index/selectors';\n\nclass InstructorListPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      const {\n        onSetInstructors,\n        instructors\n      } = this.props;\n\n      if (instructors.length === 0) {\n        const {\n          formattedInstructors: instructors\n        } = await fetchInstructorsApi();\n        this.setState({\n          instructors\n        });\n        onSetInstructors(instructors);\n      }\n    });\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIsOpen: true,\n      dropdownIndex\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onOpenInstructorModal\", () => this.setState({\n      instructorModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseInstructorModal\", () => this.setState({\n      instructorModalOpen: false\n    }));\n\n    _defineProperty(this, \"onAddNewInstructor\", newInstructor => {\n      this.onCreateNewInstructorApi(newInstructor);\n      const {\n        instructors,\n        onSetInstructors\n      } = this.props;\n      const tempBasicInfo = {\n        activeStudents: 15,\n        pastStudents: 24,\n        unactivatedStudents: 29,\n        averageImprovement: 185,\n        averageInitialScore: 1037,\n        averageFinalScore: 1218,\n        studentsAchievingTargetScore: 12\n      };\n      const formattedNewInstructor = update(newInstructor, {\n        basicInfo: {\n          $set: tempBasicInfo\n        }\n      });\n      const updatedInstructors = update(instructors, {\n        $push: [formattedNewInstructor]\n      });\n      onSetInstructors(updatedInstructors);\n    });\n\n    _defineProperty(this, \"onDeleteInstructor\", deletedInstructor => {\n      const updatedProps = update(this.props, {\n        instructors: unfilteredInstructors => unfilteredInstructors.filter(instructor => instructor.id !== deletedInstructor.id)\n      });\n      const {\n        onSetInstructors\n      } = this.props;\n      onSetInstructors(updatedProps.instructors);\n    });\n\n    _defineProperty(this, \"onCloneInstructor\", instructor => {\n      const cloneIndex = this.props.instructors.indexOf(instructor);\n      const newId = this.props.instructors.length + 1;\n      const updatedInstructor = update(instructor, {\n        id: {\n          $set: newId\n        }\n      });\n      const instructors = update(this.props.instructors, {\n        $splice: [[cloneIndex, 0, updatedInstructor]]\n      });\n      this.onCloseDropdown();\n      const {\n        onSetInstructors\n      } = this.props;\n      onSetInstructors(instructors);\n      this.onCreateNewInstructorApi(instructor);\n    });\n\n    _defineProperty(this, \"onCreateNewInstructorApi\", async instructor => {\n      const newId = this.props.instructors.length + 1;\n      const {\n        accountInfo: {\n          firstName,\n          lastName,\n          email,\n          gender\n        },\n        contactInfo: {\n          state,\n          phone,\n          streetAddress,\n          city,\n          zip\n        }\n      } = instructor;\n      const formattedBody = {\n        id: newId,\n        first_name: firstName,\n        last_name: lastName,\n        email,\n        gender,\n        state,\n        locations: [],\n        phone,\n        address: streetAddress,\n        city,\n        zip\n      };\n      await createNewInstructorApi(formattedBody);\n    });\n\n    _defineProperty(this, \"onSaveInstructorChanges\", updatedInstructor => {\n      const {\n        instructors: originalInstructors,\n        onSetInstructors\n      } = this.props;\n      const instructorToUpdate = originalInstructors.filter(instructor => instructor.id === updatedInstructor.id)[0];\n      const updatedInstructorIndex = originalInstructors.indexOf(instructorToUpdate);\n      const instructors = update(originalInstructors, {\n        $splice: [[updatedInstructorIndex, 1, updatedInstructor]]\n      }); // saveChangesSuccess();\n      // this.setState({ instructors });\n\n      onSetInstructors(instructors);\n    });\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      instructorsAreFiltered: true,\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      instructorsAreFiltered: false,\n      filterName: ''\n    }));\n\n    _defineProperty(this, \"onSetFilteredLocationState\", filterLocation => this.setState({\n      instructorsAreFiltered: true,\n      filterLocation\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredLocationState\", () => this.setState({\n      filterLocation: ''\n    }, this.checkForFilteredState));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        instructors\n      } = this.props;\n      const {\n        filterName\n      } = this.state;\n      return instructors.reduce((finalArr, currentInstructor) => {\n        const {\n          accountInfo: {\n            lastName,\n            firstName\n          }\n        } = currentInstructor;\n        const instructorString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n\n        if (instructorString.indexOf(filterName) !== -1 && finalArr.indexOf(currentInstructor) === -1) {\n          finalArr.push(currentInstructor);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onFilterByLocation\", (preFilteredInstructors = []) => {\n      const {\n        instructors: allInstructors\n      } = this.props;\n      const {\n        filterLocation\n      } = this.state;\n      let instructors;\n\n      if (preFilteredInstructors.length) {\n        instructors = preFilteredInstructors;\n      } else {\n        instructors = allInstructors;\n      }\n\n      return instructors.reduce((finalArr, currentInstructor) => {\n        const {\n          contactInfo: {\n            city\n          }\n        } = currentInstructor;\n\n        if (city === filterLocation && finalArr.indexOf(currentInstructor) === -1) {\n          finalArr.push(currentInstructor);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onSortInstructors\", instructors => {\n      const {\n        sort\n      } = this.state;\n\n      switch (sort) {\n        case 'firstNameAscending':\n          return instructors.sort(firstNameAscending);\n\n        case 'firstNameDescending':\n          return instructors.sort(firstNameDescending);\n\n        case 'lastNameAscending':\n          return instructors.sort(lastNameAscending);\n\n        case 'lastNameDescending':\n          return instructors.sort(lastNameDescending);\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"getMappableInstructors\", () => {\n      const {\n        filterName,\n        filterLocation,\n        sort\n      } = this.state;\n      const {\n        instructors: allInstructors\n      } = this.props;\n      let instructors;\n\n      if (filterName.length && !filterLocation.length) {\n        instructors = this.onFilterByName();\n      } else if (!filterName.length && filterLocation.length) {\n        instructors = this.onFilterByLocation();\n      } else if (filterName.length && filterLocation.length) {\n        const filteredByName = this.onFilterByName();\n        instructors = this.onFilterByLocation(filteredByName);\n      } else {\n        instructors = allInstructors;\n      }\n\n      if (sort) {\n        return this.onSortInstructors(instructors);\n      }\n\n      return instructors || [];\n    });\n\n    _defineProperty(this, \"checkForFilteredState\", () => {\n      const {\n        filterName,\n        filterLocation\n      } = this.state;\n\n      if (!filterName.length && !filterLocation.length) {\n        this.setState({\n          instructorsAreFiltered: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"mapInstructors\", () => {\n      const instructors = this.getMappableInstructors();\n      return instructors.map((instructor, index) => __jsx(InstructorCard, {\n        index: index,\n        key: instructor.id,\n        instructor: instructor,\n        dropdownIsOpen: this.state.dropdownIsOpen,\n        onSetDropdown: this.onSetDropdown,\n        onCloseDropdown: this.onCloseDropdown,\n        dropdownIndex: this.state.dropdownIndex,\n        onDeleteInstructor: this.onDeleteInstructor,\n        onCloneInstructor: this.onCloneInstructor,\n        onSaveInstructorChanges: this.onSaveInstructorChanges\n      }));\n    });\n\n    this.state = {\n      instructorModalOpen: false,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      instructorsAreFiltered: false,\n      filterName: '',\n      filterLocation: '',\n      sort: ''\n    };\n  }\n\n  render() {\n    const {\n      instructorModalOpen\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(NewInstructorModal, {\n      open: instructorModalOpen,\n      onClose: this.onCloseInstructorModal,\n      onAddNewInstructor: this.onAddNewInstructor\n    }), __jsx(\"div\", {\n      className: \"main-holder grey lighten-5\"\n    }, __jsx(StickyContainer, null, __jsx(Sticky, null, ({\n      style\n    }) => __jsx(\"div\", {\n      className: \"title-row card-panel\",\n      style: _objectSpread2({}, style, {\n        zIndex: 1999\n      })\n    }, __jsx(\"div\", {\n      className: \"mobile-header\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), __jsx(\"h2\", {\n      className: \"h1 white-text\"\n    }, __jsx(\"span\", {\n      className: \"heading-holder\"\n    }, __jsx(\"i\", {\n      className: \"icon-instructors\"\n    }), __jsx(\"span\", {\n      className: \"heading-block\"\n    }, \"Instructors\"))))), __jsx(FilterSection, {\n      onSetSort: this.onSetSort,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredLocationState: this.onSetFilteredLocationState,\n      onUnsetFilteredLocationState: this.onUnsetFilteredLocationState\n    }), __jsx(\"div\", {\n      className: \"content-section\"\n    }, __jsx(\"div\", {\n      className: \"row d-flex-content\"\n    }, this.mapInstructors())))), __jsx(\"a\", {\n      href: \"#\",\n      onClick: this.onOpenInstructorModal,\n      className: \"waves-effect waves-teal btn add-btn\"\n    }, __jsx(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"New Instructor\"));\n  }\n\n}\n\nInstructorListPage.propTypes = {\n  instructors: PropTypes.array.isRequired,\n  onSetInstructors: PropTypes.func.isRequired\n};\nconst mapStateToProps = createStructuredSelector({\n  instructors: makeSelectInstructors()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetInstructors: instructors => dispatch(setInstructors(instructors))\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(InstructorListPage);","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Instructor/ListPage/index.js"],"names":["React","PropTypes","connect","compose","createStructuredSelector","update","Sticky","StickyContainer","InstructorCard","FilterSection","NewInstructorModal","firstNameAscending","firstNameDescending","lastNameAscending","lastNameDescending","fetchInstructorsApi","createNewInstructorApi","setInstructors","makeSelectInstructors","InstructorListPage","Component","constructor","props","onSetInstructors","instructors","length","formattedInstructors","setState","dropdownIndex","dropdownIsOpen","instructorModalOpen","newInstructor","onCreateNewInstructorApi","tempBasicInfo","activeStudents","pastStudents","unactivatedStudents","averageImprovement","averageInitialScore","averageFinalScore","studentsAchievingTargetScore","formattedNewInstructor","basicInfo","$set","updatedInstructors","$push","deletedInstructor","updatedProps","unfilteredInstructors","filter","instructor","id","cloneIndex","indexOf","newId","updatedInstructor","$splice","onCloseDropdown","accountInfo","firstName","lastName","email","gender","contactInfo","state","phone","streetAddress","city","zip","formattedBody","first_name","last_name","locations","address","originalInstructors","instructorToUpdate","updatedInstructorIndex","filterName","instructorsAreFiltered","filterLocation","checkForFilteredState","sort","reduce","finalArr","currentInstructor","instructorString","toLowerCase","push","preFilteredInstructors","allInstructors","onFilterByName","onFilterByLocation","filteredByName","onSortInstructors","getMappableInstructors","map","index","onSetDropdown","onDeleteInstructor","onCloneInstructor","onSaveInstructorChanges","render","onCloseInstructorModal","onAddNewInstructor","style","zIndex","onSetSort","onSetFilteredState","onUnsetFilteredState","onSetFilteredLocationState","onUnsetFilteredLocationState","mapInstructors","onOpenInstructorModal","propTypes","array","isRequired","func","mapStateToProps","mapDispatchToProps","dispatch","withConnect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector} from 'reselect';\nimport update from 'immutability-helper';\nimport { Sticky, StickyContainer } from 'react-sticky';\nimport InstructorCard from './components/InstructorCard';\nimport FilterSection from './components/FilterSection';\nimport NewInstructorModal from './components/NewInstructorModal';\n\n// import { saveNewSuccess as savePracticeTestSuccess, saveChangesSuccess, saveNewError as savePracticeTestError } from '../../utils/fieldValidation';\nimport { firstNameAscending, firstNameDescending, lastNameAscending, lastNameDescending } from '../../utils/sortFunctions';\n\nimport {\n  fetchInstructorsApi,\n  createNewInstructorApi,\n} from '../index/api';\n\n\nimport {\n  setInstructors,\n} from '../index/actions';\n\n\nimport {\n  makeSelectInstructors,\n} from '../index/selectors';\n\n\nclass InstructorListPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      instructorModalOpen: false,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      instructorsAreFiltered: false,\n      filterName: '',\n      filterLocation: '',\n      sort: '',\n    };\n  }\n\n  componentDidMount = async() => {\n    const {onSetInstructors,instructors} = this.props;\n    if(instructors.length === 0) {\n      const {formattedInstructors:instructors} = await fetchInstructorsApi();\n      this.setState({\n        instructors,\n      });\n      onSetInstructors(instructors);\n    }\n  }\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIsOpen: true, dropdownIndex });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  onOpenInstructorModal = () => this.setState({ instructorModalOpen: true });\n  onCloseInstructorModal = () => this.setState({ instructorModalOpen: false });\n\n  onAddNewInstructor = (newInstructor) => {\n    this.onCreateNewInstructorApi(newInstructor);\n    const { instructors,onSetInstructors } = this.props;\n    const tempBasicInfo = {\n      activeStudents: 15,\n      pastStudents: 24,\n      unactivatedStudents: 29,\n      averageImprovement: 185,\n      averageInitialScore: 1037,\n      averageFinalScore: 1218,\n      studentsAchievingTargetScore: 12,\n    }\n    const formattedNewInstructor = update(newInstructor,{basicInfo:{$set:tempBasicInfo}});\n    const updatedInstructors = update(instructors,{$push:[formattedNewInstructor]});\n    onSetInstructors(updatedInstructors);\n  }\n\n  onDeleteInstructor = (deletedInstructor) => {\n    const updatedProps = update(this.props, {\n      instructors: unfilteredInstructors => unfilteredInstructors.filter(instructor => instructor.id !== deletedInstructor.id),\n    });\n    const { onSetInstructors } = this.props;\n    onSetInstructors(updatedProps.instructors);\n  }\n\n  onCloneInstructor = (instructor) => {\n    const cloneIndex = this.props.instructors.indexOf(instructor);\n    const newId = this.props.instructors.length + 1;\n    const updatedInstructor = update(instructor,{id:{$set:newId}})\n    const instructors = update(this.props.instructors, {\n      $splice: [[cloneIndex, 0, updatedInstructor]],\n    });\n    this.onCloseDropdown();\n    const { onSetInstructors } = this.props;\n    onSetInstructors(instructors);\n    this.onCreateNewInstructorApi(instructor);\n  }\n\n  onCreateNewInstructorApi = async(instructor) => {\n    const newId = this.props.instructors.length + 1;\n    const {accountInfo:{firstName,lastName,email,gender},contactInfo:{state,phone,streetAddress,city,zip}} = instructor;\n    const formattedBody = {\n        id:newId,\n        first_name: firstName,\n        last_name: lastName,\n        email,\n        gender,\n        state,\n        locations: [],\n        phone,\n        address: streetAddress,\n        city,\n        zip,\n      };\n    await createNewInstructorApi(formattedBody);\n  }\n\n  onSaveInstructorChanges = (updatedInstructor) => {\n    const { instructors: originalInstructors,onSetInstructors } = this.props;\n    const instructorToUpdate = originalInstructors.filter(instructor => instructor.id === updatedInstructor.id)[0];\n    const updatedInstructorIndex = originalInstructors.indexOf(instructorToUpdate);\n    const instructors = update(originalInstructors, {\n      $splice: [[updatedInstructorIndex, 1, updatedInstructor]],\n    });\n    // saveChangesSuccess();\n    // this.setState({ instructors });\n    onSetInstructors(instructors);\n  }\n\n  onSetFilteredState = (filterName) => this.setState({ instructorsAreFiltered: true, filterName })\n  onUnsetFilteredState = () => this.setState({ instructorsAreFiltered: false, filterName: '' })\n\n  onSetFilteredLocationState = (filterLocation) => this.setState({ instructorsAreFiltered: true, filterLocation })\n  onUnsetFilteredLocationState = () => this.setState({ filterLocation: '' }, this.checkForFilteredState)\n\n  onSetSort = (sort) => this.setState({ sort })\n\n  onFilterByName = () => {\n    const { instructors } = this.props;\n    const { filterName } = this.state;\n    return instructors.reduce((finalArr, currentInstructor) => {\n      const { accountInfo: { lastName, firstName } } = currentInstructor;\n      const instructorString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n      if (instructorString.indexOf(filterName) !== -1 && finalArr.indexOf(currentInstructor) === -1) {\n        finalArr.push(currentInstructor);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  onFilterByLocation = (preFilteredInstructors = []) => {\n    const { instructors: allInstructors } = this.props;\n    const { filterLocation } = this.state;\n    let instructors;\n    if (preFilteredInstructors.length) {\n      instructors = preFilteredInstructors;\n    } else {\n      instructors = allInstructors;\n    }\n    return instructors.reduce((finalArr, currentInstructor) => {\n      const { contactInfo: { city } } = currentInstructor;\n      if (city === filterLocation && finalArr.indexOf(currentInstructor) === -1) {\n        finalArr.push(currentInstructor);\n      }\n      return finalArr;\n    }, []);\n  }\n\n  // eslint-disable-next-line consistent-return\n  onSortInstructors = (instructors) => {\n    const { sort } = this.state;\n    switch (sort) {\n      case 'firstNameAscending':\n        return instructors.sort(firstNameAscending);\n      case 'firstNameDescending':\n        return instructors.sort(firstNameDescending);\n      case 'lastNameAscending':\n        return instructors.sort(lastNameAscending);\n      case 'lastNameDescending':\n        return instructors.sort(lastNameDescending);\n      default:\n        break;\n    }\n  }\n\n  getMappableInstructors = () => {\n    const { filterName, filterLocation, sort } = this.state;\n    const { instructors: allInstructors } = this.props;\n    let instructors;\n    if (filterName.length && !filterLocation.length) {\n      instructors = this.onFilterByName();\n    } else if (!filterName.length && filterLocation.length) {\n      instructors = this.onFilterByLocation();\n    } else if (filterName.length && filterLocation.length) {\n      const filteredByName = this.onFilterByName();\n      instructors = this.onFilterByLocation(filteredByName);\n    } else {\n      instructors = allInstructors;\n    }\n    if (sort) {\n      return this.onSortInstructors(instructors);\n    }\n    return instructors || [];\n  }\n\n  checkForFilteredState = () => {\n    const { filterName, filterLocation } = this.state;\n    if (!filterName.length && !filterLocation.length) {\n      this.setState({ instructorsAreFiltered: false });\n    }\n  }\n\n  mapInstructors = () => {\n    const instructors = this.getMappableInstructors();\n    return instructors.map((instructor, index) => (\n      <InstructorCard\n        index={index}\n        key={instructor.id}\n        instructor={instructor}\n        dropdownIsOpen={this.state.dropdownIsOpen}\n        onSetDropdown={this.onSetDropdown}\n        onCloseDropdown={this.onCloseDropdown}\n        dropdownIndex={this.state.dropdownIndex}\n        onDeleteInstructor={this.onDeleteInstructor}\n        onCloneInstructor={this.onCloneInstructor}\n        onSaveInstructorChanges={this.onSaveInstructorChanges}\n      />\n    ));\n  }\n\n  render() {\n    const { instructorModalOpen } = this.state;\n    return (\n      <React.Fragment>\n        <NewInstructorModal\n          open={instructorModalOpen}\n          onClose={this.onCloseInstructorModal}\n          onAddNewInstructor={this.onAddNewInstructor}\n        />\n        <div className=\"main-holder grey lighten-5\">\n          <StickyContainer>\n          <Sticky>\n        {({ style }) => (\n          <div className=\"title-row card-panel\" style={{ ...style, zIndex: 1999 }}>\n            <div className=\"mobile-header\">\n              <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n            </div>\n            <h2 className=\"h1 white-text\">\n              <span className=\"heading-holder\">\n                <i className=\"icon-instructors\"></i>\n                <span className=\"heading-block\">Instructors</span>\n              </span>\n            </h2>\n          </div>\n        )}\n        </Sticky>\n          <FilterSection\n            onSetSort={this.onSetSort}\n            onSetFilteredState={this.onSetFilteredState}\n            onUnsetFilteredState={this.onUnsetFilteredState}\n            onSetFilteredLocationState={this.onSetFilteredLocationState}\n            onUnsetFilteredLocationState={this.onUnsetFilteredLocationState}\n          />\n          <div className=\"content-section\">\n            <div className=\"row d-flex-content\">\n              {this.mapInstructors()}\n            </div>\n          </div>\n          </StickyContainer>\n        </div>\n        <a\n          href=\"#\"\n          onClick={this.onOpenInstructorModal}\n          className=\"waves-effect waves-teal btn add-btn\"\n        >\n          <i className=\"material-icons\">add</i>\n          New Instructor\n        </a>\n      </React.Fragment>\n    );\n  }\n}\n\n\nInstructorListPage.propTypes = {\n  instructors:PropTypes.array.isRequired,\n  onSetInstructors:PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = createStructuredSelector({\n  instructors:makeSelectInstructors(),\n})\n\nfunction mapDispatchToProps(dispatch){\n  return{\n    onSetInstructors:instructors => dispatch(setInstructors(instructors)),\n  }\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)\n\nexport default compose(withConnect)(InstructorListPage);\n"]},"metadata":{},"sourceType":"module"}