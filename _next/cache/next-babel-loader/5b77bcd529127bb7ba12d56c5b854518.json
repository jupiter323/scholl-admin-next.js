{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestScorePage/components/TestScoreCard/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst readingData = (totalScore, totalPossible) => ({\n  datasets: [{\n    data: [totalScore, totalPossible - totalScore],\n    backgroundColor: ['#32A6AF', 'rgb(234, 234, 234)']\n  }]\n});\n\nconst writingData = (totalScore, totalPossible) => ({\n  datasets: [{\n    data: [totalScore, totalPossible - totalScore],\n    backgroundColor: ['#3b9f85', 'rgb(234, 234, 234)']\n  }]\n});\n\nconst mathData = (totalScore, totalPossible) => ({\n  datasets: [{\n    data: [totalScore, totalPossible - totalScore],\n    backgroundColor: ['#567EBF', 'rgb(234, 234, 234)']\n  }]\n});\n\nclass TestScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const {\n        subjectScores\n      } = this.props;\n\n      if (subjectScores) {\n        subjectScores.map(subject => {\n          switch (subject.name) {\n            case 'Writing and Language':\n              this.setState({\n                writingScores: subject\n              });\n              break;\n\n            case 'Math':\n              this.setState({\n                mathScores: subject\n              });\n              break;\n\n            case 'Reading':\n              this.setState({\n                readingScores: subject\n              });\n              break;\n\n            default:\n          }\n        });\n      }\n    });\n\n    this.state = {\n      mathScores: null,\n      readingScores: null,\n      writingScores: null\n    };\n  }\n\n  render() {\n    const {\n      readingScores,\n      mathScores,\n      writingScores\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"col s12 l8 card-width-772\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Test Scores \", __jsx(\"span\", {\n      className: \"separator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"|\"), ' ', __jsx(\"span\", {\n      className: \"quantity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"10 to 40\")), __jsx(\"div\", {\n      className: \"card-main-full card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"several-charts-row row mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col s4 center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, readingScores && __jsx(\"div\", {\n      className: \"chart-block chart-block-182\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, __jsx(Doughnut, {\n      data: () => readingData(readingScores.current_score, 40),\n      width: 182,\n      height: 182,\n      options: {\n        cutoutPercentage: 80\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"chart-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Reading\"), __jsx(\"span\", {\n      className: \"value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, readingScores.current_score), __jsx(\"span\", {\n      className: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"(\", readingScores.delta, \")\")))), __jsx(\"div\", {\n      className: \"col s4 center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, writingScores && __jsx(\"div\", {\n      className: \"chart-block chart-block-182\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, __jsx(Doughnut, {\n      data: () => writingData(writingScores.current_score, 40),\n      width: 182,\n      height: 182,\n      options: {\n        cutoutPercentage: 80\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"chart-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Writing\"), __jsx(\"span\", {\n      className: \"value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, writingScores.current_score), __jsx(\"span\", {\n      className: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"(\", writingScores.delta, \")\")))), __jsx(\"div\", {\n      className: \"col s4 center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, mathScores && __jsx(\"div\", {\n      className: \"chart-block chart-block-182\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, __jsx(Doughnut, {\n      data: () => mathData(mathScores.current_score, 40),\n      width: 182,\n      height: 182,\n      options: {\n        cutoutPercentage: 80\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"chart-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Math\"), __jsx(\"span\", {\n      className: \"value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, mathScores.current_score), __jsx(\"span\", {\n      className: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"(\", mathScores.delta, \")\")))))))));\n  }\n\n}\n\nTestScoreCard.propTypes = {\n  subjectScores: PropTypes.object.isRequired\n};\nexport default TestScoreCard;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestScorePage/components/TestScoreCard/index.js"],"names":["React","PropTypes","Doughnut","readingData","totalScore","totalPossible","datasets","data","backgroundColor","writingData","mathData","TestScoreCard","Component","constructor","props","subjectScores","map","subject","name","setState","writingScores","mathScores","readingScores","state","render","current_score","cutoutPercentage","delta","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst readingData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#32A6AF', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\nconst writingData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#3b9f85', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\nconst mathData = (totalScore, totalPossible) => ({\n  datasets: [\n    {\n      data: [totalScore, totalPossible - totalScore],\n      backgroundColor: ['#567EBF', 'rgb(234, 234, 234)'],\n    },\n  ],\n});\n\nclass TestScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mathScores: null,\n      readingScores: null,\n      writingScores: null,\n    };\n  }\n\n  componentDidMount = () => {\n    const { subjectScores } = this.props;\n    if (subjectScores) {\n      subjectScores.map(subject => {\n        switch (subject.name) {\n          case 'Writing and Language':\n            this.setState({\n              writingScores: subject,\n            });\n            break;\n          case 'Math':\n            this.setState({\n              mathScores: subject,\n            });\n            break;\n          case 'Reading':\n            this.setState({\n              readingScores: subject,\n            });\n            break;\n          default:\n        }\n      });\n    }\n  };\n\n  render() {\n    const { readingScores, mathScores, writingScores } = this.state;\n    return (\n      <div className=\"col s12 l8 card-width-772\">\n        <div className=\"card-block\">\n          <h2>\n            Test Scores <span className=\"separator\">|</span>{' '}\n            <span className=\"quantity\">10 to 40</span>\n          </h2>\n          <div className=\"card-main-full card\">\n            <div className=\"card-content\">\n              <div className=\"several-charts-row row mb-0\">\n                <div className=\"col s4 center-align\">\n                  {readingScores &&\n                    <div className=\"chart-block chart-block-182\">\n                      <Doughnut\n                        data={() => readingData(readingScores.current_score, 40)}\n                        width={182}\n                        height={182}\n                        options={{\n                          cutoutPercentage: 80,\n                        }}\n                      />\n                      <div className=\"chart-text\">\n                        <span className=\"title\">Reading</span>\n                        <span className=\"value\">\n                          {readingScores.current_score}\n                        </span>\n                        <span className=\"description\">\n                          ({readingScores.delta})\n                        </span>\n                      </div>\n                    </div>}\n                </div>\n                <div className=\"col s4 center-align\">\n                  {writingScores &&\n                    <div className=\"chart-block chart-block-182\">\n                      <Doughnut\n                        data={() => writingData(writingScores.current_score, 40)}\n                        width={182}\n                        height={182}\n                        options={{\n                          cutoutPercentage: 80,\n                        }}\n                      />\n                      <div className=\"chart-text\">\n                        <span className=\"title\">Writing</span>\n                        <span className=\"value\">\n                          {writingScores.current_score}\n                        </span>\n                        <span className=\"description\">\n                          ({writingScores.delta})\n                        </span>\n                      </div>\n                    </div>}\n                </div>\n                <div className=\"col s4 center-align\">\n                  {mathScores &&\n                    <div className=\"chart-block chart-block-182\">\n                      <Doughnut\n                        data={() => mathData(mathScores.current_score, 40)}\n                        width={182}\n                        height={182}\n                        options={{\n                          cutoutPercentage: 80,\n                        }}\n                      />\n                      <div className=\"chart-text\">\n                        <span className=\"title\">Math</span>\n                        <span className=\"value\">\n                          {mathScores.current_score}\n                        </span>\n                        <span className=\"description\">\n                          ({mathScores.delta})\n                        </span>\n                      </div>\n                    </div>}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nTestScoreCard.propTypes = {\n  subjectScores: PropTypes.object.isRequired,\n};\n\nexport default TestScoreCard;\n"]},"metadata":{},"sourceType":"module"}