{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport update from 'immutability-helper';\nimport LocationsToManage from './components/LocationsToManage';\nimport InstructorsToManage from './components/InstructorsToManage';\nimport FullAccess from './components/FullAccess';\nimport LocationModal from '../../Location/components/LocationModal';\nimport InstructorModal from '../../Instructor/components/InstructorModal';\n\nclass DetailManagementPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      if (!this.state.originalUser || nextProps.user.id !== this.state.originalUser.id) {\n        const {\n          user: {\n            id,\n            locationsToManage,\n            instructorsToManage,\n            fullAccess\n          } = {}\n        } = nextProps;\n        const updatedUser = {\n          id,\n          locationsToManage,\n          instructorsToManage,\n          fullAccess\n        };\n        const {\n          originalUser: originalUserState\n        } = this.state;\n        const originalUser = update(originalUserState, {\n          $merge: nextProps.user\n        });\n        this.setState({\n          originalUser,\n          updatedUser\n        });\n      }\n    });\n\n    _defineProperty(this, \"onOpenLocationModal\", () => this.setState({\n      locationModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseLocationModal\", () => this.setState({\n      locationModalOpen: false\n    }));\n\n    _defineProperty(this, \"onOpenInstructorModal\", () => this.setState({\n      instructorModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseInstructorModal\", () => this.setState({\n      instructorModalOpen: false\n    }));\n\n    _defineProperty(this, \"onSaveChanges\", event => {\n      event.preventDefault();\n      const {\n        updatedUser\n      } = this.state;\n      this.setState({\n        originalUser: updatedUser\n      });\n      console.warn('stubbed out success toast');\n    });\n\n    _defineProperty(this, \"onRemoveOption\", (optionIndex, section, array) => {\n      const updatedUser = update(this.state.updatedUser, {\n        [section]: {\n          [array]: {\n            $splice: [[optionIndex, 1]]\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    _defineProperty(this, \"toggleFullAccess\", () => this.setState(({\n      fullAccess\n    }) => ({\n      fullAccess: !fullAccess\n    })));\n\n    _defineProperty(this, \"handleOptionsChange\", (selectedOptions, section, array) => {\n      const updatedUser = update(this.state.updatedUser, {\n        [section]: {\n          [array]: {\n            $set: selectedOptions\n          }\n        }\n      });\n      this.setState({\n        updatedUser\n      });\n    });\n\n    _defineProperty(this, \"initialUserMount\", () => this.state.originalUser.id !== this.props.user.id);\n\n    this.state = {\n      locationModalOpen: false,\n      instructorModalOpen: false,\n      originalUser: {\n        locationsToManage: {\n          locations: []\n        },\n        instructorsToManage: {\n          instructors: []\n        },\n        fullAccess: false\n      },\n      updatedUser: {\n        locationsToManage: {\n          locations: []\n        },\n        instructorsToManage: {\n          instructors: []\n        },\n        fullAccess: false\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      user: {\n        id,\n        locationsToManage,\n        instructorsToManage,\n        fullAccess\n      } = {}\n    } = this.props;\n    const updatedUser = {\n      id,\n      locationsToManage,\n      instructorsToManage,\n      fullAccess\n    };\n    const {\n      originalUser: originalUserState\n    } = this.state;\n    const originalUser = update(originalUserState, {\n      $merge: updatedUser\n    });\n    this.setState({\n      originalUser,\n      updatedUser\n    }); // eslint-disable-line\n  } // TODO: This seems to be working well - confirm that only one isntance of this edit modal is opening on the user edit page\n  // This resets the component state to reflect the details of the next user the user clicks on\n\n\n  render() {\n    const {\n      locationModalOpen,\n      instructorModalOpen,\n      updatedUser: {\n        locationsToManage: updatedLocations,\n        instructorsToManage: updatedInstructors,\n        fullAccess: updatedFullAccess\n      }\n    } = this.state;\n    const {\n      user: {\n        instructorsToManage,\n        locationsToManage,\n        fullAccess\n      }\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(LocationModal, {\n      open: locationModalOpen,\n      onClose: this.onCloseLocationModal,\n      handleLocationsChange: selectedLocations => this.handleOptionsChange(selectedLocations, 'locationsToManage', 'locations')\n    }), __jsx(InstructorModal, {\n      open: instructorModalOpen,\n      onClose: this.onCloseInstructorModal,\n      handleInstructorsChange: selectedInstructors => this.handleOptionsChange(selectedInstructors, 'instructorsToManage', 'instructors')\n    }), __jsx(\"div\", {\n      className: \"content-section\"\n    }, __jsx(\"div\", {\n      className: \"content-section-holder\"\n    }, __jsx(\"div\", {\n      className: \"row mb-0 d-flex-content large\"\n    }, __jsx(LocationsToManage, {\n      state: this.initialUserMount() ? locationsToManage : updatedLocations,\n      onOpenLocationModal: this.onOpenLocationModal,\n      onRemoveLocation: this.onRemoveOption\n    }), __jsx(InstructorsToManage, {\n      state: this.initialUserMount() ? instructorsToManage : updatedInstructors,\n      onOpenInstructorModal: this.onOpenInstructorModal,\n      onRemoveInstructor: this.onRemoveOption\n    }), __jsx(FullAccess, {\n      fullAccess: this.initialUserMount() ? fullAccess : updatedFullAccess,\n      toggleFullAccess: this.toggleFullAccess\n    })), __jsx(\"div\", {\n      className: \"btn-holder align-right-sm\"\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"btn\",\n      onClick: this.onSaveChanges\n    }, \"Save\")))));\n  }\n\n}\n\nexport default DetailManagementPage;","map":null,"metadata":{},"sourceType":"module"}