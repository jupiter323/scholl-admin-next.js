{"ast":null,"code":"/* eslint-disable array-callback-return */\n// This function pulls the matching value objects from state for each Dropdown component if an existing value exists - otherwise, returns empty object\nvar getValueFromState = function getValueFromState(valueKey, state) {\n  var nested = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var obj = {}; // This is encountered when the options are nested as arrays within objects\n\n  if (nested) {\n    state.map(function (substate) {\n      substate.options.map(function (substateField) {\n        if (substateField.value === valueKey) {\n          obj = substateField;\n        }\n      });\n    });\n  } else {\n    state.map(function (option) {\n      if (option.value === valueKey) {\n        obj = option;\n      }\n    });\n  }\n\n  return obj;\n};\n\nexport default getValueFromState;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/utils/getValueFromState.js"],"names":["getValueFromState","valueKey","state","nested","obj","map","substate","options","substateField","value","option"],"mappings":"AAAA;AACA;AACA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAWC,KAAX,EAAqC;AAAA,MAAnBC,MAAmB,uEAAV,KAAU;AAC7D,MAAIC,GAAG,GAAG,EAAV,CAD6D,CAE7D;;AACA,MAAID,MAAJ,EAAY;AACVD,IAAAA,KAAK,CAACG,GAAN,CAAU,UAAAC,QAAQ,EAAI;AACpBA,MAAAA,QAAQ,CAACC,OAAT,CAAiBF,GAAjB,CAAqB,UAAAG,aAAa,EAAI;AACpC,YAAIA,aAAa,CAACC,KAAd,KAAwBR,QAA5B,EAAsC;AACpCG,UAAAA,GAAG,GAAGI,aAAN;AACD;AACF,OAJD;AAKD,KAND;AAOD,GARD,MAQO;AACLN,IAAAA,KAAK,CAACG,GAAN,CAAU,UAAAK,MAAM,EAAI;AAClB,UAAIA,MAAM,CAACD,KAAP,KAAiBR,QAArB,EAA+B;AAC7BG,QAAAA,GAAG,GAAGM,MAAN;AACD;AACF,KAJD;AAKD;;AACD,SAAON,GAAP;AACD,CAnBD;;AAqBA,eAAeJ,iBAAf","sourcesContent":["/* eslint-disable array-callback-return */\n// This function pulls the matching value objects from state for each Dropdown component if an existing value exists - otherwise, returns empty object\nconst getValueFromState = (valueKey, state, nested = false) => {\n  let obj = {};\n  // This is encountered when the options are nested as arrays within objects\n  if (nested) {\n    state.map(substate => {\n      substate.options.map(substateField => {\n        if (substateField.value === valueKey) {\n          obj = substateField;\n        }\n      });\n    });\n  } else {\n    state.map(option => {\n      if (option.value === valueKey) {\n        obj = option;\n      }\n    });\n  }\n  return obj;\n};\n\nexport default getValueFromState;\n"]},"metadata":{},"sourceType":"module"}