{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport StudentCard from '../components/Student/components/StudentCard';\nimport sampleStudentList from '../components/Student/utils/sampleStudentList';\nimport FilterSection from '../components/Student/ListPage/Components/FilterSection';\nimport StudentModal from '../components/Student/components/StudentModal';\nimport IndividualStudentPage from '../components/Student/IndividualStudentPage';\nimport LocationModal from '../components/Location/components/LocationModal';\n\nclass Students extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onOpenStudentModal\", () => this.setState({\n      studentModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseStudentModal\", () => this.setState({\n      studentModalOpen: false\n    }));\n\n    _defineProperty(this, \"onOpenLocationModal\", () => this.setState({\n      locationModalOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseLocationModal\", () => this.setState({\n      locationModalOpen: false\n    }));\n\n    _defineProperty(this, \"onSetSort\", sort => this.setState({\n      sort\n    }));\n\n    _defineProperty(this, \"onSetFilteredState\", filterName => this.setState({\n      filterName\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredState\", () => this.setState({\n      filterName: ''\n    }));\n\n    _defineProperty(this, \"onSetFilteredLocationState\", location => this.setState({\n      location\n    }));\n\n    _defineProperty(this, \"onUnsetFilteredLocationState\", () => this.setState({\n      location: ''\n    }));\n\n    _defineProperty(this, \"onSaveNewStudent\", () => {\n      // eslint-disable-next-line no-console\n      console.warn('do something with the new student info');\n      this.onCloseStudentModal();\n    });\n\n    _defineProperty(this, \"onDeleteNewStudent\", () => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const newStudent = update(previousStudentState, {\n        $set: {\n          active: false,\n          studentInformation: {\n            firstName: '',\n            lastName: '',\n            gender: ''\n          },\n          contactInformation: {\n            phone: '',\n            addressLine1: '',\n            addressLine2: '',\n            city: '',\n            state: '',\n            zipCode: ''\n          },\n          emailAddress: {\n            email: ''\n          },\n          location: {\n            locations: []\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n    });\n\n    _defineProperty(this, \"onRemoveLocation\", index => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const {\n        location: {\n          locations\n        }\n      } = this.state.newStudent;\n      const newLocationsArray = this.arrayItemRemover(locations, locations[index]);\n      const newStudent = update(previousStudentState, {\n        location: {\n          $set: {\n            locations: newLocationsArray\n          }\n        }\n      });\n      this.setState({\n        newStudent\n      });\n    });\n\n    _defineProperty(this, \"onFilterByName\", () => {\n      const {\n        students,\n        filterName\n      } = this.state;\n      return students.reduce((finalArr, currentStudent) => {\n        const {\n          lastName,\n          firstName\n        } = currentStudent;\n        const studentString = `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n\n        if (studentString.indexOf(filterName) !== -1 && finalArr.indexOf(currentStudent) === -1) {\n          finalArr.push(currentStudent);\n        }\n\n        return finalArr;\n      }, []);\n    });\n\n    _defineProperty(this, \"onHandleStudentCard\", index => {\n      const {\n        students\n      } = this.state;\n      this.setState({\n        selectedStudent: students[index]\n      });\n    });\n\n    _defineProperty(this, \"onRedirectToStudentPage\", event => {\n      event.preventDefault();\n      this.setState({\n        selectedStudent: null\n      });\n    });\n\n    _defineProperty(this, \"onDeleteStudent\", index => {\n      const {\n        students\n      } = this.state;\n      const newStudentArray = this.arrayItemRemover(students, students[index]);\n      this.setState({\n        students: newStudentArray\n      });\n    });\n\n    _defineProperty(this, \"onCloneStudent\", index => {\n      const {\n        students\n      } = this.state;\n      this.setState(prevState => {\n        prevState.students.push(students[index]);\n        return {\n          students: prevState.students\n        };\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", (event, name, section) => {\n      const {\n        newStudent: previousStudentState\n      } = this.state;\n      const value = event.target ? event.target.value : event;\n      const updatedStudent = update(previousStudentState, {\n        [section]: {\n          $merge: {\n            [name]: value\n          }\n        }\n      });\n      this.setState({\n        newStudent: updatedStudent\n      });\n    });\n\n    _defineProperty(this, \"arrayItemRemover\", (array, value) => array.filter(student => student !== value));\n\n    this.state = {\n      selectedStudent: null,\n      students: sampleStudentList,\n      studentModalOpen: false,\n      locationModalOpen: false,\n      sort: \"\",\n      filterName: \"\",\n      newStudent: {\n        active: false,\n        studentInformation: {\n          firstName: '',\n          lastName: '',\n          gender: ''\n        },\n        contactInformation: {\n          phone: '',\n          addressLine1: '',\n          addressLine2: '',\n          city: '',\n          state: '',\n          zipCode: ''\n        },\n        emailAddress: {\n          email: ''\n        },\n        location: {\n          locations: []\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      studentModalOpen,\n      students,\n      selectedStudent\n    } = this.state;\n    return React.createElement(\"main\", {\n      id: \"main\",\n      role: \"main\"\n    }, React.createElement(\"div\", {\n      className: \"main-holder grey lighten-5\"\n    }, !selectedStudent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"title-row card-panel\"\n    }, React.createElement(\"div\", {\n      className: \"mobile-header\"\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      \"data-target\": \"slide-out\",\n      className: \"sidenav-trigger\"\n    }, React.createElement(\"i\", {\n      className: \"material-icons\"\n    }, \"menu\"))), React.createElement(\"h2\", {\n      className: \"h1 white-text\"\n    }, React.createElement(\"span\", {\n      className: \"heading-holder\"\n    }, React.createElement(\"i\", {\n      className: \"icon-student\"\n    }), React.createElement(\"span\", {\n      className: \"heading-block\"\n    }, \"Students\")))), React.createElement(FilterSection, {\n      onSetSort: this.onSetSort,\n      onSetFilteredState: this.onSetFilteredState,\n      onUnsetFilteredState: this.onUnsetFilteredState,\n      onSetFilteredLocationState: this.onSetFilteredLocationState,\n      onUnsetFilteredLocationState: this.onUnsetFilteredLocationState,\n      handleFilterClick: this.handleFilterClick,\n      onFilterByName: this.onFilterByName\n    }), React.createElement(\"div\", {\n      className: \"content-section\"\n    }, React.createElement(\"div\", {\n      className: \"row d-flex-content\"\n    }, students.map((student, index) => React.createElement(StudentCard, {\n      student: student,\n      index: index,\n      id: student.id,\n      key: student.id,\n      onHandleStudentCard: () => this.onHandleStudentCard(index),\n      onDeleteStudent: () => this.onDeleteStudent(index),\n      onCloneStudent: () => this.onCloneStudent(index, student.id)\n    })))), React.createElement(\"a\", {\n      href: \"#\",\n      className: \"waves-effect waves-teal btn add-btn modal-trigger\",\n      onClick: this.onOpenStudentModal\n    }, React.createElement(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"New Student\"), React.createElement(StudentModal, {\n      open: studentModalOpen,\n      onClose: this.onCloseStudentModal,\n      handleChange: this.handleChange,\n      state: this.state.newStudent,\n      onSave: this.onSaveNewStudent,\n      onOpenLocationModal: this.onOpenLocationModal,\n      onRemoveLocation: this.onRemoveLocation,\n      onDeleteNewStudent: this.onDeleteNewStudent\n    }), React.createElement(LocationModal, {\n      open: this.state.locationModalOpen,\n      onClose: this.onCloseLocationModal,\n      handleLocationsChange: selectedLocations => this.handleChange(selectedLocations, 'locations', 'location')\n    })), selectedStudent && React.createElement(IndividualStudentPage, {\n      student: selectedStudent,\n      onRedirectToStudentPage: this.onRedirectToStudentPage\n    })));\n  }\n\n}\n\nexport default Students;","map":null,"metadata":{},"sourceType":"module"}