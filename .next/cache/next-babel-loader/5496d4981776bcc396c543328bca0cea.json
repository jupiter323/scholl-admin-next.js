{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TestCard from './components/TestCard';\nimport TestSections from '../TestSections';\nimport sampleTests from './utils/sampleTests';\nimport EditTestModal from './components/EditTestModal';\n\nclass DetailTestList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onToggleEditTestModal\", (activeTest = null) => this.setState(({\n      editTestModalOpen\n    }) => ({\n      editTestModalOpen: !editTestModalOpen,\n      activeTest\n    }), this.onCloseDropdown));\n\n    _defineProperty(this, \"onSetDropdown\", dropdownIndex => this.setState({\n      dropdownIndex,\n      dropdownIsOpen: true\n    }));\n\n    _defineProperty(this, \"onCloseDropdown\", () => this.setState({\n      dropdownIsOpen: false,\n      dropdownIndex: null\n    }));\n\n    _defineProperty(this, \"onCreateTest\", event => {\n      event.preventDefault();\n      console.warn('Pending implementation of create test UI and functionality');\n    });\n\n    _defineProperty(this, \"onEnterAnswers\", () => console.warn('Pending implementation of enter answers UI and functionality'));\n\n    _defineProperty(this, \"onEditTest\", () => console.warn('Pending implementation edit test UI and functionality'));\n\n    _defineProperty(this, \"onDownloadReport\", () => console.warn('Pending implementation of download report ui and functionality'));\n\n    _defineProperty(this, \"onDeleteTest\", () => this.setState({\n      editTestModalOpen: false\n    }, () => console.warn('Pending implementation of delete test UI and functionality')));\n\n    _defineProperty(this, \"onSaveTestChanges\", (testVersion, settings) => {\n      this.onToggleEditTestModal();\n      console.warn('Pending save test changes functionality', testVersion, settings);\n    });\n\n    _defineProperty(this, \"openTestScores\", index => {\n      const {\n        tests\n      } = this.state;\n      const newTestArray = tests.filter(test => test.status === 'complete');\n      this.setState({\n        selectedTest: newTestArray[index.index]\n      }, console.log(\"clicked\", index[0], newTestArray, newTestArray[{\n        index\n      }]));\n    });\n\n    _defineProperty(this, \"mapCompletedTests\", () => {\n      const {\n        tests\n      } = this.state;\n      return tests.filter(test => test.status === 'complete').map((test, index) => React.createElement(TestCard, {\n        test: test,\n        key: `completed-${test.id}`,\n        index: index,\n        onEditTest: () => this.onToggleEditTestModal(test),\n        onDeleteTest: this.onDeleteTest,\n        onSetDropdown: this.onSetDropdown,\n        onEnterAnswers: this.onEnterAnswers,\n        onCloseDropdown: this.onCloseDropdown,\n        onDownloadReport: this.onDownloadReport,\n        dropdownIndex: this.state.dropdownIndex,\n        dropdownIsOpen: this.state.dropdownIsOpen,\n        openTestScores: this.openTestScores\n      }));\n    });\n\n    _defineProperty(this, \"mapFutureTests\", () => {\n      const {\n        tests\n      } = this.state;\n      return tests.filter(test => test.status !== 'complete').map((test, index) => React.createElement(TestCard, {\n        futureTest: true,\n        test: test,\n        key: `future-${test.id}`,\n        onEditTest: () => this.onToggleEditTestModal(test),\n        onDeleteTest: this.onDeleteTest,\n        onSetDropdown: this.onSetDropdown,\n        onEnterAnswers: this.onEnterAnswers,\n        onCloseDropdown: this.onCloseDropdown,\n        onDownloadReport: this.onDownloadReport,\n        dropdownIndex: this.state.dropdownIndex,\n        dropdownIsOpen: this.state.dropdownIsOpen,\n        openTestScores: this.openTestScores,\n        index: tests.filter(filterTest => filterTest.status === 'complete').length + index\n      }));\n    });\n\n    this.state = {\n      tests: sampleTests,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      editTestModalOpen: false,\n      activeTest: null,\n      selectedTest: null\n    };\n  }\n\n  render() {\n    const {\n      editTestModalOpen,\n      activeTest,\n      selectedTest\n    } = this.state;\n    const {\n      user\n    } = this.props;\n    return React.createElement(React.Fragment, null, !selectedTest && (editTestModalOpen ? React.createElement(EditTestModal, {\n      user: user,\n      test: activeTest,\n      onDeleteTest: this.onDeleteTest,\n      onSaveTestChanges: this.onSaveTestChanges\n    }) : React.createElement(\"div\", {\n      className: \"content-section\"\n    }, React.createElement(\"div\", {\n      className: \"section-holder\"\n    }, React.createElement(\"div\", {\n      className: \"content-container\"\n    }, React.createElement(\"h2\", null, \"Completed Tests\"), React.createElement(\"div\", {\n      className: \"row d-flex-content card-width-366\"\n    }, this.mapCompletedTests())), React.createElement(\"div\", {\n      className: \"content-container\"\n    }, React.createElement(\"h2\", null, \"Future Tests\"), React.createElement(\"div\", {\n      className: \"row d-flex-content card-width-366\"\n    }, this.mapFutureTests()))), React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.onCreateTest,\n      className: \"waves-effect waves-teal btn add-btn\"\n    }, React.createElement(\"i\", {\n      className: \"material-icons\"\n    }, \"add\"), \"New Test\"))), selectedTest && React.createElement(TestSections, {\n      test: selectedTest\n    }));\n  }\n\n}\n\nDetailTestList.propTypes = {\n  user: PropTypes.object.isRequired\n};\nexport default DetailTestList;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/DetailTestList/index.js"],"names":["React","PropTypes","TestCard","TestSections","sampleTests","EditTestModal","DetailTestList","Component","constructor","props","activeTest","setState","editTestModalOpen","onCloseDropdown","dropdownIndex","dropdownIsOpen","event","preventDefault","console","warn","testVersion","settings","onToggleEditTestModal","index","tests","state","newTestArray","filter","test","status","selectedTest","log","map","id","onDeleteTest","onSetDropdown","onEnterAnswers","onDownloadReport","openTestScores","filterTest","length","render","user","onSaveTestChanges","mapCompletedTests","mapFutureTests","onCreateTest","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TestCard from './components/TestCard';\nimport TestSections from '../TestSections';\nimport sampleTests from './utils/sampleTests';\nimport EditTestModal from './components/EditTestModal';\n\nclass DetailTestList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tests: sampleTests,\n      dropdownIndex: null,\n      dropdownIsOpen: false,\n      editTestModalOpen: false,\n      activeTest: null,\n      selectedTest: null,\n    };\n  }\n\n  onToggleEditTestModal = (activeTest = null) => this.setState(({ editTestModalOpen }) => ({ editTestModalOpen: !editTestModalOpen, activeTest }), this.onCloseDropdown)\n\n  onSetDropdown = (dropdownIndex) => this.setState({ dropdownIndex, dropdownIsOpen: true });\n  onCloseDropdown = () => this.setState({ dropdownIsOpen: false, dropdownIndex: null });\n\n  onCreateTest = (event) => {\n    event.preventDefault();\n    console.warn('Pending implementation of create test UI and functionality');\n  }\n\n  onEnterAnswers = () => console.warn('Pending implementation of enter answers UI and functionality')\n  onEditTest = () => console.warn('Pending implementation edit test UI and functionality')\n  onDownloadReport = () => console.warn('Pending implementation of download report ui and functionality')\n  onDeleteTest = () => this.setState({ editTestModalOpen: false }, () => console.warn('Pending implementation of delete test UI and functionality'))\n\n  onSaveTestChanges = (testVersion, settings) => {\n    this.onToggleEditTestModal();\n    console.warn('Pending save test changes functionality', testVersion, settings);\n  }\n  openTestScores = (index) => {\n    const { tests } = this.state;\n    const newTestArray = tests.filter(test => test.status === 'complete');\n    this.setState({selectedTest: newTestArray[index.index]}, console.log(\"clicked\", index[0], newTestArray, newTestArray[{index}]))\n  }\n\n  mapCompletedTests = () => {\n    const { tests } = this.state;\n    return tests.filter(test => test.status === 'complete').map((test, index) => (\n      <TestCard\n        test={test}\n        key={`completed-${test.id}`}\n        index={index}\n        onEditTest={() => this.onToggleEditTestModal(test)}\n        onDeleteTest={this.onDeleteTest}\n        onSetDropdown={this.onSetDropdown}\n        onEnterAnswers={this.onEnterAnswers}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={this.state.dropdownIndex}\n        dropdownIsOpen={this.state.dropdownIsOpen}\n        openTestScores={this.openTestScores}\n      />\n    ))\n  }\n\n  mapFutureTests = () => {\n    const { tests } = this.state;\n    return tests.filter(test => test.status !== 'complete').map((test, index) => (\n      <TestCard\n        futureTest\n        test={test}\n        key={`future-${test.id}`}\n        onEditTest={() => this.onToggleEditTestModal(test)}\n        onDeleteTest={this.onDeleteTest}\n        onSetDropdown={this.onSetDropdown}\n        onEnterAnswers={this.onEnterAnswers}\n        onCloseDropdown={this.onCloseDropdown}\n        onDownloadReport={this.onDownloadReport}\n        dropdownIndex={this.state.dropdownIndex}\n        dropdownIsOpen={this.state.dropdownIsOpen}\n        openTestScores={this.openTestScores}\n        index={tests.filter(filterTest => filterTest.status === 'complete').length + index}\n      />\n    ))\n  }\n\n  render() {\n    const { editTestModalOpen, activeTest, selectedTest} = this.state;\n    const {user} = this.props;\n    return (\n      <React.Fragment>\n      {!selectedTest && (\n        <Choose>\n          <When condition={editTestModalOpen}>\n            <EditTestModal\n              user={user}\n              test={activeTest}\n              onDeleteTest={this.onDeleteTest}\n              onSaveTestChanges={this.onSaveTestChanges}\n            />\n          </When>\n          <Otherwise>\n            <div className=\"content-section\">\n              <div className=\"section-holder\">\n                <div className=\"content-container\">\n                  <h2>Completed Tests</h2>\n                  <div className=\"row d-flex-content card-width-366\">\n                    {this.mapCompletedTests()}\n                  </div>\n                </div>\n                <div className=\"content-container\">\n                  <h2>Future Tests</h2>\n                  <div className=\"row d-flex-content card-width-366\">\n                    {this.mapFutureTests()}\n                  </div>\n                </div>\n              </div>\n              <a href=\"#\" onClick={this.onCreateTest} className=\"waves-effect waves-teal btn add-btn\"><i className=\"material-icons\">add</i>New Test</a>\n            </div>\n          </Otherwise>\n        </Choose>\n      )}\n      {selectedTest && (\n        <TestSections test={selectedTest} />\n        )}\n        </React.Fragment>\n\n    );\n  }\n}\n\nDetailTestList.propTypes = {\n  user: PropTypes.object.isRequired,\n};\n\nexport default DetailTestList;\n"]},"metadata":{},"sourceType":"module"}