{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport update from 'immutability-helper';\nimport categoryStyles from '../../../../FormComponents/Dropdown/styles/dropdownStyles';\nimport ControlComponent from '../../../../FormComponents/Dropdown/styles/ControlComponent';\nimport MultiValueLabel from '../../../../FormComponents/Dropdown/styles/MultiValueLabel';\nimport { subjectOptions, difficultyOptions, typeOptions } from '../../../utils';\nimport Dropdown from '../../../../FormComponents/Dropdown';\nimport getValueFromState from '../../../../utils/getValueFromState';\n\nvar WorksheetDetails =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WorksheetDetails, _React$Component);\n\n  function WorksheetDetails(props) {\n    var _this;\n\n    _classCallCheck(this, WorksheetDetails);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WorksheetDetails).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillReceiveProps\", function (nextProps) {\n      if (!_this.state.originalWorksheet || nextProps.worksheet.id !== _this.state.originalWorksheet.id) {\n        var _nextProps$worksheet = nextProps.worksheet;\n        _nextProps$worksheet = _nextProps$worksheet === void 0 ? {} : _nextProps$worksheet;\n        var id = _nextProps$worksheet.id,\n            worksheetName = _nextProps$worksheet.worksheetName,\n            subject = _nextProps$worksheet.subject,\n            type = _nextProps$worksheet.problemType,\n            difficulty = _nextProps$worksheet.difficulty,\n            timeEstimate = _nextProps$worksheet.timeEstimate,\n            categories = _nextProps$worksheet.classifications,\n            description = _nextProps$worksheet.description;\n        var updatedWorksheet = {\n          id: id,\n          worksheetName: worksheetName,\n          subject: subject,\n          type: type,\n          difficulty: difficulty,\n          timeEstimate: timeEstimate,\n          categories: categories,\n          description: description\n        };\n        var originalWorksheetState = _this.state.originalWorksheet;\n        var originalWorksheet = update(originalWorksheetState, {\n          $merge: nextProps.worksheet\n        });\n\n        _this.setState({\n          originalWorksheet: originalWorksheet,\n          updatedWorksheet: updatedWorksheet\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSectionDropdownOptions\", function () {\n      var categoryOptions = _this.state.categoryOptions;\n      var _this$props$worksheet = _this.props.worksheet;\n      _this$props$worksheet = _this$props$worksheet === void 0 ? {} : _this$props$worksheet;\n      var subject = _this$props$worksheet.subject;\n\n      if (!subject) {\n        return categoryOptions;\n      }\n\n      var categoryLabels = categoryOptions.map(function (categoryOption) {\n        return categoryOption.label;\n      });\n      var subjectIndex = categoryLabels.indexOf(subject.charAt(0).toUpperCase() + subject.slice(1));\n      return [categoryOptions[subjectIndex]];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateCategoryState\", function (categories) {\n      var updatedWorksheet = update(_this.state.updatedWorksheet, {\n        $merge: {\n          categories: categories\n        }\n      });\n\n      _this.setState({\n        updatedWorksheet: updatedWorksheet\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCategoryChange\", function (categories) {\n      var updatedCategories = categories.reduce(function (finalArr, category) {\n        finalArr.push(category.value);\n        return finalArr;\n      }, []);\n\n      _this.updateCategoryState(updatedCategories);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDetailsChange\", function (event, name) {\n      var previousWorksheetState = _this.state.updatedWorksheet;\n      var value = event.target ? event.target.value : event;\n      var updatedWorksheet = update(previousWorksheetState, {\n        $merge: _defineProperty({}, name, value)\n      });\n\n      _this.setState({\n        updatedWorksheet: updatedWorksheet\n      });\n    });\n\n    _this.state = {\n      originalWorksheet: {\n        worksheetName: '',\n        subject: {},\n        type: '',\n        difficulty: '',\n        timeEstimate: '',\n        categories: [],\n        description: ''\n      },\n      updatedWorksheet: {\n        worksheetName: '',\n        subject: {},\n        type: '',\n        difficulty: '',\n        timeEstimate: '',\n        categories: [],\n        description: ''\n      },\n      validation: {\n        worksheetName: true,\n        subject: true,\n        type: true,\n        difficulty: true,\n        timeEstimate: true,\n        categories: true\n      },\n      categoryOptions: [{\n        label: 'Math',\n        options: [{\n          value: 'Special Right Triangles',\n          label: 'Special Right Triangles'\n        }, {\n          value: 'Volumes',\n          label: 'Volumes'\n        }, {\n          value: 'Trig Functions',\n          label: 'Trig Functions'\n        }]\n      }, {\n        label: 'Writing',\n        options: [{\n          value: 'Astrology',\n          label: 'Astrology'\n        }, {\n          value: 'Algebra',\n          label: 'Algebra'\n        }]\n      }, {\n        label: 'Reading',\n        options: [{\n          value: 'Geometry',\n          label: 'Geometry'\n        }, {\n          value: 'Pythagorean Theorem',\n          label: 'Pythagorean Theorem'\n        }]\n      }],\n      subjectCategoryOptions: []\n    };\n    return _this;\n  }\n\n  _createClass(WorksheetDetails, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$worksheet2 = this.props.worksheet;\n      _this$props$worksheet2 = _this$props$worksheet2 === void 0 ? {} : _this$props$worksheet2;\n      var id = _this$props$worksheet2.id,\n          worksheetName = _this$props$worksheet2.worksheetName,\n          subject = _this$props$worksheet2.subject,\n          type = _this$props$worksheet2.problemType,\n          difficulty = _this$props$worksheet2.difficulty,\n          timeEstimate = _this$props$worksheet2.timeEstimate,\n          categories = _this$props$worksheet2.classifications,\n          description = _this$props$worksheet2.description;\n      var updatedWorksheet = {\n        id: id,\n        worksheetName: worksheetName,\n        subject: subject,\n        type: type,\n        difficulty: difficulty,\n        timeEstimate: timeEstimate,\n        categories: categories,\n        description: description\n      };\n      var originalWorksheetState = this.state.originalWorksheet;\n      var originalWorksheet = update(originalWorksheetState, {\n        $merge: updatedWorksheet\n      });\n      this.setState({\n        originalWorksheet: originalWorksheet,\n        updatedWorksheet: updatedWorksheet\n      }); // eslint-disable-line\n    } // This resets the component state to reflect the details of the next worksheet the user clicks on\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          categoriesValid = _this$state.validation.categories,\n          _this$state$updatedWo = _this$state.updatedWorksheet,\n          worksheetName = _this$state$updatedWo.worksheetName,\n          timeEstimate = _this$state$updatedWo.timeEstimate,\n          subject = _this$state$updatedWo.subject,\n          type = _this$state$updatedWo.type,\n          difficulty = _this$state$updatedWo.difficulty,\n          description = _this$state$updatedWo.description,\n          categories = _this$state$updatedWo.categories;\n      var defaultCategories = this.props.defaultCategories;\n      return React.createElement(\"div\", {\n        className: \"col s12 l6\"\n      }, React.createElement(\"div\", {\n        className: \"card-block\"\n      }, React.createElement(\"h2\", null, \"Details\"), React.createElement(\"div\", {\n        className: \"card\"\n      }, React.createElement(\"div\", {\n        className: \"card-content\"\n      }, React.createElement(\"div\", {\n        className: \"card-body\"\n      }, React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s12\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        id: \"details_name\",\n        value: worksheetName,\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'worksheetName');\n        }\n      }), React.createElement(\"label\", {\n        className: worksheetName.length ? 'label active' : 'label',\n        htmlFor: \"details_name\"\n      }, \"Name\")))), React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(Dropdown, {\n        value: getValueFromState(subject, subjectOptions),\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'subject');\n        },\n        options: subjectOptions,\n        label: \"Subject\",\n        stateKey: \"subject\",\n        dropdownKey: \"subject\"\n      }))), React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(Dropdown, {\n        value: getValueFromState(type, typeOptions),\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'type');\n        },\n        options: typeOptions,\n        label: \"Type\",\n        stateKey: \"type\",\n        dropdownKey: \"type\"\n      })))), React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(Dropdown, {\n        value: getValueFromState(difficulty, difficultyOptions),\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'difficulty');\n        },\n        options: difficultyOptions,\n        label: \"Difficulty\",\n        stateKey: \"difficulty\",\n        dropdownKey: \"difficulty\"\n      }))), React.createElement(\"div\", {\n        className: \"col s6\"\n      }, React.createElement(\"div\", {\n        className: \"datepicker-field input-field\"\n      }, React.createElement(\"i\", {\n        className: \"icon-clock2\"\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"timepicker\",\n        id: \"detail_estimated_time\",\n        value: timeEstimate,\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'timeEstimate');\n        }\n      }), React.createElement(\"label\", {\n        className: timeEstimate.length ? 'label active' : 'label',\n        htmlFor: \"detail_estimated_time\"\n      }, \"Estimated Time\")))), React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s12\"\n      }, React.createElement(Select, {\n        options: this.getSectionDropdownOptions(),\n        isMulti: true,\n        instanceId: \"categories-select\",\n        onChange: this.handleCategoryChange,\n        components: {\n          Control: ControlComponent,\n          MultiValueLabel: MultiValueLabel\n        },\n        name: \"categoryOptions\",\n        className: categoriesValid || !categoriesValid && categories.length ? '' : 'invalid',\n        classNamePrefix: \"multi-select\",\n        placeholder: 'Select one or more categories',\n        styles: categoryStyles,\n        isClearable: false,\n        label: \"Categories\",\n        defaultValue: defaultCategories\n      }))), React.createElement(\"div\", {\n        className: \"row mb-0\"\n      }, React.createElement(\"div\", {\n        className: \"col s12\"\n      }, React.createElement(\"div\", {\n        className: \"input-field\"\n      }, React.createElement(\"textarea\", {\n        id: \"detail_description\",\n        className: \"materialize-textarea\",\n        style: {\n          height: '70px'\n        },\n        value: description,\n        onChange: function onChange(event) {\n          return _this2.handleDetailsChange(event, 'description');\n        }\n      }), React.createElement(\"label\", {\n        className: description.length ? 'label active' : 'label',\n        htmlFor: \"detail_description\"\n      }, \"Description (optional)\")))))))));\n    }\n  }]);\n\n  return WorksheetDetails;\n}(React.Component);\n\nexport default WorksheetDetails;","map":null,"metadata":{},"sourceType":"module"}