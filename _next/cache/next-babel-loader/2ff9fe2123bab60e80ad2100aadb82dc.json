{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/TestVersionPage/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport TestVersionSettings from '../EditTestModal/components/TestVersionSettings';\nimport Settings from '../EditTestModal/components/Settings';\nimport { updateStudentTestDueDate, updateStudentTestAssignmentDate } from '../../../index/api';\n\nclass TestVersion extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleTestVersionSettingsChange\", event => {\n      const {\n        testVersion: {\n          sections\n        }\n      } = this.state;\n      let testVersion;\n\n      if (event.target) {\n        const {\n          target: {\n            name: setting\n          }\n        } = event;\n\n        if (sections[setting] !== undefined) {\n          testVersion = update(this.state.testVersion, {\n            sections: {\n              [setting]: {\n                $set: !sections[setting]\n              }\n            }\n          });\n        } else {\n          testVersion = update(this.state.testVersion, {\n            [setting]: {\n              $set: !this.state.testVersion[setting]\n            }\n          });\n        }\n      } else {\n        testVersion = update(this.state.testVersion, {\n          version: {\n            $set: event\n          }\n        });\n      }\n\n      this.setState({\n        testVersion\n      });\n    });\n\n    _defineProperty(this, \"handleSettingsChange\", event => {\n      const {\n        settings: previousSettings\n      } = this.state;\n      const {\n        target: {\n          name: setting\n        }\n      } = event;\n      const settings = update(this.state.settings, {\n        [setting]: {\n          $set: !previousSettings[setting]\n        }\n      });\n      this.setState({\n        settings\n      });\n    });\n\n    _defineProperty(this, \"handleDatePickerChange\", (field, value) => {\n      const settings = update(this.state.settings, {\n        [field]: {\n          $set: value\n        }\n      });\n      this.setState({\n        settings\n      }, () => this.handleStudentTestApiUpdate(field, value));\n    });\n\n    _defineProperty(this, \"saveTestChanges\", () => {\n      const {\n        onSaveTestChanges\n      } = this.props;\n      const {\n        testVersion,\n        settings: {\n          testDate: unformattedTestDate,\n          dueDate: unformattedDueDate,\n          allowStudentToEnterAnswers,\n          timed\n        }\n      } = this.state;\n      const testDate = moment(unformattedTestDate).format('MM/DD/YY');\n      const dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n      onSaveTestChanges(testVersion, {\n        testDate,\n        dueDate,\n        allowStudentToEnterAnswers,\n        timed\n      });\n    });\n\n    _defineProperty(this, \"handleStudentTestApiUpdate\", async (name, value) => {\n      const {\n        student_test_id\n      } = this.props.test;\n      const postDate = moment(value).format('YYYY-MM-DD');\n\n      switch (name) {\n        case \"dueDate\":\n          return updateStudentTestDueDate({\n            student_test_id: student_test_id,\n            due_date: postDate\n          });\n\n        case \"testDate\":\n          return updateStudentTestAssignmentDate({\n            student_test_id: student_test_id,\n            assignment_date: postDate\n          });\n\n        default:\n          break;\n      }\n    });\n\n    this.state = {\n      testVersion: {\n        version: '',\n        sections: {\n          reading: false,\n          writing: false,\n          math: false,\n          essay: false\n        },\n        includeScoreInImprovementMetrics: false\n      },\n      settings: {\n        testDate: '',\n        dueDate: '',\n        allowStudentToEnterAnswers: false,\n        timed: false\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      test: {\n        assignment_date: unformattedTestDate,\n        dueDate: unformattedDueDate\n      }\n    } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n    const settings = update(this.state.settings, {\n      testDate: {\n        $set: testDate\n      },\n      dueDate: {\n        $set: dueDate\n      }\n    });\n    this.setState({\n      settings\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      test: {\n        testDate: unformattedTestDate,\n        dueDate: unformattedDueDate\n      }\n    } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n\n    if (prevProps.test.id !== this.props.test.id) {\n      const settings = update(this.state.settings, {\n        testDate: {\n          $set: testDate\n        },\n        dueDate: {\n          $set: dueDate\n        }\n      });\n      this.setState({\n        settings\n      });\n    }\n  }\n\n  render() {\n    const {\n      test,\n      user,\n      onDeleteTest\n    } = this.props;\n    const {\n      completionDate,\n      completionTime\n    } = test;\n    const {\n      studentInformation: {\n        firstName,\n        lastName\n      }\n    } = user;\n    const {\n      testVersion: {\n        sections: {\n          reading,\n          writing,\n          math,\n          essay\n        },\n        version,\n        includeScoreInImprovementMetrics\n      },\n      settings: {\n        testDate,\n        dueDate,\n        allowStudentToEnterAnswers,\n        timed\n      }\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"container-xsmall\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"row d-flex-content card-width-322\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-main-col col s12 m8 l7 xl5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, __jsx(TestVersionSettings, {\n      version: version,\n      reading: reading,\n      writing: writing,\n      math: math,\n      essay: essay,\n      includeScoreInImprovementMetrics: includeScoreInImprovementMetrics,\n      handleTestVersionSettingsChange: this.handleTestVersionSettingsChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), __jsx(Settings, {\n      timed: timed,\n      testDate: testDate,\n      dueDate: dueDate,\n      handleSettingsChange: this.handleSettingsChange,\n      handleDatePickerChange: this.handleDatePickerChange,\n      allowStudentToEnterAnswers: allowStudentToEnterAnswers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"card-main-col col s12 m8 l7 xl5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Status\"), __jsx(\"div\", {\n      className: \"card card-test-detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"meta-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, completionDate.length ? __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Completed :\", \" \", __jsx(\"time\", {\n      dateTime: \"2018-12-29\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, completionDate, \" at \", completionTime), completionDate.length && test.dueDate < completionDate ? __jsx(\"span\", {\n      className: \"badge white-text badge-rounded-sm\",\n      style: {\n        backgroundColor: \"#db1d41\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, __jsx(\"b\", {\n      className: \"badge-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"late\")) : null) : null, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Answers Entered by: \", firstName, \" \", lastName, \" (student)\")))))), __jsx(\"div\", {\n      className: \"btn-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: \"#\",\n      className: \"btn\",\n      onClick: this.saveTestChanges,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Save\"), __jsx(\"a\", {\n      href: \"#\",\n      className: \"waves-effect waves-teal btn-flat pink-text text-darken-1\",\n      onClick: onDeleteTest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Delete\")));\n  }\n\n}\n\nexport default TestVersion;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/TestVersionPage/index.js"],"names":["React","update","moment","TestVersionSettings","Settings","updateStudentTestDueDate","updateStudentTestAssignmentDate","TestVersion","Component","constructor","props","event","testVersion","sections","state","target","name","setting","undefined","$set","version","setState","settings","previousSettings","field","value","handleStudentTestApiUpdate","onSaveTestChanges","testDate","unformattedTestDate","dueDate","unformattedDueDate","allowStudentToEnterAnswers","timed","format","student_test_id","test","postDate","due_date","assignment_date","reading","writing","math","essay","includeScoreInImprovementMetrics","componentDidMount","Date","componentDidUpdate","prevProps","id","render","user","onDeleteTest","completionDate","completionTime","studentInformation","firstName","lastName","handleTestVersionSettingsChange","handleSettingsChange","handleDatePickerChange","length","backgroundColor","saveTestChanges"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport update from 'immutability-helper';\nimport moment from 'moment';\nimport TestVersionSettings from '../EditTestModal/components/TestVersionSettings';\nimport Settings from '../EditTestModal/components/Settings';\n\n\nimport {\n  updateStudentTestDueDate,\n  updateStudentTestAssignmentDate,\n} from '../../../index/api';\n\nclass TestVersion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      testVersion: {\n        version: '',\n        sections: {\n          reading: false,\n          writing: false,\n          math: false,\n          essay: false,\n        },\n        includeScoreInImprovementMetrics: false,\n      },\n      settings: {\n        testDate: '',\n        dueDate: '',\n        allowStudentToEnterAnswers: false,\n        timed: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { test: { assignment_date: unformattedTestDate, dueDate: unformattedDueDate } } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n    const settings = update(this.state.settings, {\n      testDate: {\n        $set: testDate,\n      },\n      dueDate: {\n        $set: dueDate,\n      },\n    });\n    this.setState({ settings });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { test: { testDate: unformattedTestDate, dueDate: unformattedDueDate } } = this.props;\n    const testDate = new Date(unformattedTestDate);\n    const dueDate = unformattedDueDate ? new Date(unformattedDueDate) : '';\n    if (prevProps.test.id !== this.props.test.id) {\n      const settings = update(this.state.settings, {\n        testDate: {\n          $set: testDate,\n        },\n        dueDate: {\n          $set: dueDate,\n        },\n      });\n      this.setState({ settings });\n    }\n  }\n\n  handleTestVersionSettingsChange = (event) => {\n    const { testVersion: { sections } } = this.state;\n    let testVersion;\n    if (event.target) {\n      const { target: { name: setting } } = event;\n      if (sections[setting] !== undefined) {\n        testVersion = update(this.state.testVersion, {\n          sections: {\n            [setting]: {\n              $set: !sections[setting],\n            },\n          },\n        });\n      } else {\n        testVersion = update(this.state.testVersion, {\n          [setting]: {\n            $set: !this.state.testVersion[setting],\n          },\n        });\n      }\n    } else {\n      testVersion = update(this.state.testVersion, {\n        version: {\n          $set: event,\n        },\n      });\n    }\n    this.setState({ testVersion });\n  }\n\n  handleSettingsChange = (event) => {\n    const { settings: previousSettings } = this.state;\n    const { target: { name: setting } } = event;\n    const settings = update(this.state.settings, {\n      [setting]: {\n        $set: !previousSettings[setting],\n      },\n    });\n    this.setState({ settings });\n  }\n\n  handleDatePickerChange = (field, value) => {\n    const settings = update(this.state.settings, {\n      [field]: {\n        $set: value,\n      },\n    });\n    this.setState({ settings }, () => this.handleStudentTestApiUpdate(field, value));\n  }\n\n  saveTestChanges = () => {\n    const { onSaveTestChanges } = this.props;\n    const { testVersion, settings: { testDate: unformattedTestDate, dueDate: unformattedDueDate, allowStudentToEnterAnswers, timed } } = this.state;\n    const testDate = moment(unformattedTestDate).format('MM/DD/YY');\n    const dueDate = moment(unformattedDueDate).format('MM/DD/YY');\n    onSaveTestChanges(testVersion, { testDate, dueDate, allowStudentToEnterAnswers, timed });\n  }\n\n  handleStudentTestApiUpdate = async(name, value) => {\n    const {student_test_id} = this.props.test;\n    const postDate =  moment(value).format('YYYY-MM-DD');\n    switch (name) {\n      case \"dueDate\":\n        return updateStudentTestDueDate({student_test_id:student_test_id,due_date:postDate});\n      case \"testDate\":\n        return updateStudentTestAssignmentDate({student_test_id:student_test_id,assignment_date:postDate});\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const { test, user, onDeleteTest } = this.props;\n    const { completionDate, completionTime } = test;\n    const { studentInformation: { firstName, lastName } } = user;\n    const { testVersion: {sections: { reading, writing, math, essay },version, includeScoreInImprovementMetrics},\n      settings: { testDate, dueDate, allowStudentToEnterAnswers, timed },\n    } = this.state;\n    return (\n      <div className=\"container-xsmall\">\n        <div className=\"row d-flex-content card-width-322\">\n          <div className=\"card-main-col col s12 m8 l7 xl5\">\n            <TestVersionSettings\n              version={version}\n              reading={reading}\n              writing={writing}\n              math={math}\n              essay={essay}\n              includeScoreInImprovementMetrics={ includeScoreInImprovementMetrics}\n              handleTestVersionSettingsChange={ this.handleTestVersionSettingsChange}\n            />\n            <Settings\n              timed={timed}\n              testDate={testDate}\n              dueDate={dueDate}\n              handleSettingsChange={this.handleSettingsChange}\n              handleDatePickerChange={this.handleDatePickerChange}\n              allowStudentToEnterAnswers={allowStudentToEnterAnswers}\n            />\n          </div>\n          <div className=\"card-main-col col s12 m8 l7 xl5\">\n            <h2>Status</h2>\n            <div className=\"card card-test-detail\">\n              <div className=\"card-content\">\n                <div className=\"meta-info\">\n                  <If condition={completionDate.length}>\n                    <p>\n                      Completed :{\" \"}\n                      <time dateTime=\"2018-12-29\">\n                        {completionDate} at {completionTime}\n                      </time>\n                      <If\n                        condition={\n                          completionDate.length && test.dueDate < completionDate\n                        }\n                      >\n                        <span\n                          className=\"badge white-text badge-rounded-sm\"\n                          style={{ backgroundColor: \"#db1d41\" }}\n                        >\n                          <b className=\"badge-text\">late</b>\n                        </span>\n                      </If>\n                    </p>\n                  </If>\n                  <p>\n                    Answers Entered by: {firstName} {lastName} (student)\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"btn-holder\">\n          <a href=\"#\" className=\"btn\" onClick={this.saveTestChanges}>\n            Save\n          </a>\n          <a\n            href=\"#\"\n            className=\"waves-effect waves-teal btn-flat pink-text text-darken-1\"\n            onClick={onDeleteTest}\n          >\n            Delete\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TestVersion;\n"]},"metadata":{},"sourceType":"module"}