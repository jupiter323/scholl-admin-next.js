{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/components/StartSection.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\n\nclass StartReadingTest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      const {\n        testSection\n      } = nextProps;\n      if (!testSection || !testSection.hasOwnProperty('problems')) return;\n      const updatedProblems = update(this.state.sampleProblems, {\n        $set: testSection.problems.problems\n      });\n      this.setState({\n        sampleProblems: updatedProblems\n      });\n    });\n\n    _defineProperty(this, \"mapProblems\", () => {\n      const {\n        sampleProblems\n      } = this.state;\n      return sampleProblems.map((problem, index) => __jsx(\"li\", {\n        className: \"answers-list-holder\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, __jsx(\"ul\", {\n        className: \"answer-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"badge-circle badge-circle-bordered\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"A\")), __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"badge-circle badge-circle-bordered\",\n        style: {\n          color: \"#fff\",\n          borderColor: \"#19b4e9\",\n          backgroundColor: \"#19b4e9\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"B\")), __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"badge-circle badge-circle-bordered\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"C\")), __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"badge-circle badge-circle-bordered\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"D\")))));\n    });\n\n    this.state = {\n      sampleProblems: []\n    };\n  }\n\n  render() {\n    const {\n      open,\n      onSetActivePage,\n      testSection\n    } = this.props;\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, open && testSection.problems && __jsx(\"div\", {\n      className: \"tabs-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      id: \"tab_reading\",\n      className: \"tab-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"content-section content-section-simulated\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"content-section-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-full-height card-student card-main-full card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"custom-form blured-effect\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"jcf-scrollable no-border height-window\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(\"ol\", {\n      className: \"answers-list answers-list-columns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, this.mapProblems()))), __jsx(\"div\", {\n      className: \"starting-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"This section has \", testSection ? testSection.problems.problems.length : \"0\", \" questions and is \", testSection ? testSection.problems.time_limit : \"0\", \" minutes total\"), __jsx(\"a\", {\n      onClick: () => onSetActivePage(\"showInCompleteTest\"),\n      className: \"btn btn-xlarge waves-effect waves-light bg-blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Begin Section\"))))))))));\n  }\n\n}\n\nStartReadingTest.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onSetActivePage: PropTypes.func.isRequired,\n  testSection: PropTypes.object.isRequired\n};\nexport default StartReadingTest;","map":{"version":3,"sources":["/Users/wolf/Documents/clearchoice/admin/feature-view-updated-course/clear-choice-admin/components/Student/DetailTestList/components/EnterAnswerWrapper/components/StartSection.js"],"names":["React","update","PropTypes","StartReadingTest","Component","constructor","props","nextProps","testSection","hasOwnProperty","updatedProblems","state","sampleProblems","$set","problems","setState","map","problem","index","color","borderColor","backgroundColor","render","open","onSetActivePage","mapProblems","length","time_limit","propTypes","bool","isRequired","func","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\n\nclass StartReadingTest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sampleProblems: [],\n    };\n  }\n\n  componentWillReceiveProps = nextProps => {\n    const { testSection } = nextProps;\n    if (!testSection || !testSection.hasOwnProperty('problems')) return;\n    const updatedProblems = update(this.state.sampleProblems, {\n      $set: testSection.problems.problems,\n    });\n    this.setState({\n      sampleProblems: updatedProblems,\n    });\n  };\n\n  mapProblems = () => {\n    const { sampleProblems } = this.state;\n    return sampleProblems.map((problem, index) => (\n      <li className=\"answers-list-holder\" key={index}>\n        <ul className=\"answer-list\">\n          <li>\n            <span className=\"badge-circle badge-circle-bordered\">A</span>\n          </li>\n          <li>\n            <span\n              className=\"badge-circle badge-circle-bordered\"\n              style={{\n                color: \"#fff\",\n                borderColor: \"#19b4e9\",\n                backgroundColor: \"#19b4e9\",\n              }}\n            >\n              B\n            </span>\n          </li>\n          <li>\n            <span className=\"badge-circle badge-circle-bordered\">C</span>\n          </li>\n          <li>\n            <span className=\"badge-circle badge-circle-bordered\">D</span>\n          </li>\n        </ul>\n      </li>\n    ));\n  };\n\n  render() {\n    const { open, onSetActivePage, testSection } = this.props;\n    return (\n      <React.Fragment>\n        {open && testSection.problems && (\n          <div className=\"tabs-content\">\n            <div id=\"tab_reading\" className=\"tab-content\">\n              <div className=\"content-section content-section-simulated\">\n                <div className=\"content-section-holder\">\n                  <div className=\"card-full-height card-student card-main-full card\">\n                    <div className=\"card-content\">\n                      <div className=\"custom-form blured-effect\">\n                        <div className=\"jcf-scrollable no-border height-window\">\n                          <ol className=\"answers-list answers-list-columns\">\n                            {this.mapProblems()}\n                          </ol>\n                        </div>\n                      </div>\n                      <div className=\"starting-block\">\n                        <div className=\"holder\">\n                          <span className=\"title\">\n                            This section has {testSection ? testSection.problems.problems.length : \"0\"} questions and is {testSection ? testSection.problems.time_limit : \"0\"} minutes\n                            total\n                          </span>\n                          <a\n                            onClick={() =>\n                              onSetActivePage(\"showInCompleteTest\")\n                            }\n                            className=\"btn btn-xlarge waves-effect waves-light bg-blue\"\n                          >\n                            Begin Section\n                          </a>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nStartReadingTest.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onSetActivePage: PropTypes.func.isRequired,\n  testSection: PropTypes.object.isRequired,\n};\n\nexport default StartReadingTest;\n"]},"metadata":{},"sourceType":"module"}