{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { difficultyMap, getAnswerColor, getCompleteAnswerColor } from '../../utils';\n\nvar Question =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Question, _React$Component);\n\n  function Question() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Question);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Question)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"mapAnswerChoices\", function () {\n      var _this$props = _this.props,\n          _this$props$question = _this$props.question,\n          answerType = _this$props$question.answerType,\n          answerChoices = _this$props$question.answerChoices,\n          studentAnswer = _this$props$question.studentAnswer,\n          answerSheetComplete = _this$props.answerSheetComplete;\n\n      if (answerSheetComplete) {\n        if (answerType === 'letter') {\n          return __jsx(\"ul\", {\n            className: \"answer-list\"\n          }, answerChoices.map(function (answer) {\n            return __jsx(\"li\", {\n              key: answer.answerLetter\n            }, __jsx(\"span\", {\n              className: \"badge-circle badge-circle-bordered\",\n              style: getCompleteAnswerColor('letter', answer, studentAnswer)\n            }, answer.answerLetter));\n          }));\n        }\n\n        return __jsx(\"ul\", {\n          className: \"answer-list\"\n        }, answerChoices.map(function (answer) {\n          return __jsx(\"li\", {\n            key: answer.answerValue\n          }, __jsx(\"span\", {\n            className: \"badge badge-rounded badge-rounded-bordered\",\n            style: getCompleteAnswerColor('value', answer, studentAnswer)\n          }, answer.answerValue));\n        }));\n      }\n\n      if (answerType === 'letter') {\n        return __jsx(\"ul\", {\n          className: \"answer-list\"\n        }, answerChoices.map(function (answer) {\n          return __jsx(\"li\", {\n            key: answer.answerLetter\n          }, __jsx(\"span\", {\n            className: \"badge-circle badge-circle-bordered\",\n            style: getAnswerColor(answer)\n          }, answer.answerLetter));\n        }));\n      }\n\n      return __jsx(\"ul\", {\n        className: \"answer-list\"\n      }, answerChoices.map(function (answer) {\n        return __jsx(\"li\", {\n          key: answer.answerValue\n        }, __jsx(\"span\", {\n          className: \"badge badge-rounded badge-rounded-bordered\",\n          style: getAnswerColor(answer)\n        }, answer.answerValue));\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(Question, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          onOpenQuestionModal = _this$props2.onOpenQuestionModal,\n          question = _this$props2.question,\n          answerSheetComplete = _this$props2.answerSheetComplete,\n          handleQuestionDropdownClick = _this$props2.handleQuestionDropdownClick,\n          questionDropdownOpen = _this$props2.questionDropdownOpen,\n          questionDropdownIndex = _this$props2.questionDropdownIndex;\n      var difficulty = question.difficulty,\n          hasVideo = question.hasVideo,\n          flagged = question.flagged,\n          studentNotes = question.studentNotes;\n      return __jsx(\"li\", {\n        className: \"answers-list-holder\"\n      }, __jsx(\"div\", {\n        className: \"answer-row row mb-0\"\n      }, __jsx(\"div\", {\n        className: \"col col-120\"\n      }, this.mapAnswerChoices()), __jsx(\"div\", {\n        className: \"col col-30\"\n      }, __jsx(\"span\", {\n        className: \"status-info\"\n      }, difficultyMap[difficulty])), hasVideo && __jsx(\"div\", {\n        className: \"col col-43\"\n      }, __jsx(\"span\", {\n        className: \"play-progress\",\n        \"data-video-id\": \"video001\"\n      }, __jsx(\"span\", {\n        className: \"play\"\n      }), __jsx(\"svg\", {\n        viewBox: \"0 0 50 50\",\n        width: \"50\",\n        height: \"50\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, __jsx(\"circle\", {\n        className: \"circle-static\",\n        cx: \"25.8\",\n        cy: \"24.3\",\n        r: \"22.8\",\n        style: {\n          strokeWidth: '3',\n          fill: 'rgba(0,0,0,0)'\n        }\n      }), __jsx(\"circle\", {\n        className: \"circle-progress\",\n        cx: \"25.8\",\n        cy: \"24.3\",\n        r: \"22.8\",\n        style: {\n          stroke: 'none',\n          strokeWidth: '3',\n          fill: 'rgba(0,0,0,0)'\n        }\n      })))), __jsx(\"div\", {\n        className: \"col col-auto\"\n      }, answerSheetComplete && flagged ? __jsx(\"span\", {\n        className: \"status-answer\",\n        style: {\n          color: '#c0272d'\n        }\n      }, __jsx(\"i\", {\n        className: \"icon-flag\"\n      }), __jsx(\"b\", {\n        className: \"status-text\"\n      }, \"Review\")) : null), __jsx(\"div\", {\n        className: \"dropdown-block col col-35\"\n      }, __jsx(\"a\", {\n        href: \"#\",\n        className: \"dropdown-trigger\",\n        \"data-target\": \"dropdown_answer01-3\",\n        onClick: function onClick(event) {\n          return handleQuestionDropdownClick(event, question);\n        }\n      }, __jsx(\"i\", {\n        className: \"material-icons dots-icon\"\n      }, \"more_vert\")), questionDropdownOpen && question.id === questionDropdownIndex ? __jsx(\"ul\", {\n        id: \"dropdown_answer01-3\",\n        className: \"dropdown-content dropdown-exwide\",\n        style: {\n          display: 'block',\n          opacity: '1',\n          transform: 'scaleX(1) scaleY(1)'\n        }\n      }, __jsx(\"li\", null, __jsx(\"a\", {\n        className: \"modal-trigger\",\n        href: \"#\",\n        onClick: function onClick() {\n          return onOpenQuestionModal(question);\n        }\n      }, \"View Problem\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#!\"\n      }, \"Dismiss Flag\")), __jsx(\"li\", null, __jsx(\"a\", {\n        href: \"#!\"\n      }, \"Edit Response\"))) : null)), answerSheetComplete && studentNotes ? __jsx(\"div\", {\n        className: \"comment-block\"\n      }, __jsx(\"p\", null, \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore?  tincidunt ut laoreet dolore?\")) : null);\n    }\n  }]);\n\n  return Question;\n}(React.Component);\n\n;\nQuestion.propTypes = {\n  question: PropTypes.object.isRequired,\n  questionDropdownIndex: PropTypes.number,\n  onOpenQuestionModal: PropTypes.func.isRequired,\n  answerSheetComplete: PropTypes.bool.isRequired,\n  questionDropdownOpen: PropTypes.bool.isRequired,\n  handleQuestionDropdownClick: PropTypes.func.isRequired\n};\nexport default Question;","map":{"version":3,"sources":["/Volumes/HDD/Sites/clearchoicetestprep/clear-choice-admin/components/Student/LessonWorksheetTestSection/components/Question/index.js"],"names":["React","PropTypes","difficultyMap","getAnswerColor","getCompleteAnswerColor","Question","props","question","answerType","answerChoices","studentAnswer","answerSheetComplete","map","answer","answerLetter","answerValue","onOpenQuestionModal","handleQuestionDropdownClick","questionDropdownOpen","questionDropdownIndex","difficulty","hasVideo","flagged","studentNotes","mapAnswerChoices","strokeWidth","fill","stroke","color","event","id","display","opacity","transform","Component","propTypes","object","isRequired","number","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { difficultyMap, getAnswerColor, getCompleteAnswerColor } from '../../utils';\n\nclass Question extends React.Component {\n  mapAnswerChoices = () => {\n    const { question: { answerType, answerChoices, studentAnswer }, answerSheetComplete } = this.props;\n    if (answerSheetComplete) {\n      if (answerType === 'letter') {\n        return (\n          <ul className=\"answer-list\">\n            {answerChoices.map(answer => (\n              <li key={answer.answerLetter}>\n                <span\n                  className=\"badge-circle badge-circle-bordered\"\n                  style={getCompleteAnswerColor('letter', answer, studentAnswer)}\n                >\n                  {answer.answerLetter}\n                </span>\n              </li>\n            ))}\n          </ul>\n        );\n      }\n      return (\n        <ul className=\"answer-list\">\n          {answerChoices.map(answer => (\n            <li key={answer.answerValue}>\n              <span\n                className=\"badge badge-rounded badge-rounded-bordered\"\n                style={getCompleteAnswerColor('value', answer, studentAnswer)}\n              >\n                {answer.answerValue}\n              </span>\n            </li>\n          ))}\n        </ul>\n      )\n    }\n    if (answerType === 'letter') {\n      return (\n        <ul className=\"answer-list\">\n          {answerChoices.map(answer => (\n            <li key={answer.answerLetter}>\n              <span\n                className=\"badge-circle badge-circle-bordered\"\n                style={getAnswerColor(answer)}\n              >\n                {answer.answerLetter}\n              </span>\n            </li>\n          ))}\n        </ul>\n      );\n    }\n    return (\n      <ul className=\"answer-list\">\n        {answerChoices.map(answer => (\n          <li key={answer.answerValue}>\n            <span\n              className=\"badge badge-rounded badge-rounded-bordered\"\n              style={getAnswerColor(answer)}\n            >\n              {answer.answerValue}\n            </span>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  render() {\n    const { onOpenQuestionModal, question, answerSheetComplete, handleQuestionDropdownClick, questionDropdownOpen, questionDropdownIndex } = this.props;\n    const { difficulty, hasVideo, flagged, studentNotes } = question;\n    return (\n      <li className=\"answers-list-holder\">\n        <div className=\"answer-row row mb-0\">\n          <div className=\"col col-120\">\n            {this.mapAnswerChoices()}\n          </div>\n          <div className=\"col col-30\">\n            <span className=\"status-info\">{difficultyMap[difficulty]}</span>\n          </div>\n          {hasVideo && (\n            <div className=\"col col-43\">\n              <span className=\"play-progress\" data-video-id=\"video001\">\n                <span className=\"play\"></span>\n                <svg viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle className=\"circle-static\" cx=\"25.8\" cy=\"24.3\" r=\"22.8\" style={{ strokeWidth: '3', fill: 'rgba(0,0,0,0)' }}/>\n                  <circle className=\"circle-progress\" cx=\"25.8\" cy=\"24.3\" r=\"22.8\" style={{ stroke: 'none', strokeWidth: '3', fill: 'rgba(0,0,0,0)' }}/>\n                </svg>\n              </span>\n            </div>\n          )}\n          <div className=\"col col-auto\">\n            <If condition={answerSheetComplete && flagged}>\n              <span className=\"status-answer\" style={{ color: '#c0272d' }}>\n                <i className=\"icon-flag\"></i><b className=\"status-text\">Review</b>\n              </span>\n            </If>\n          </div>\n          <div className=\"dropdown-block col col-35\">\n            <a\n              href='#'\n              className='dropdown-trigger'\n              data-target='dropdown_answer01-3'\n              onClick={(event) => handleQuestionDropdownClick(event, question)}\n            >\n              <i className=\"material-icons dots-icon\">more_vert</i>\n            </a>\n            <If condition={questionDropdownOpen && question.id === questionDropdownIndex}>\n              <ul id='dropdown_answer01-3' className='dropdown-content dropdown-exwide' style={{ display: 'block', opacity: '1', transform: 'scaleX(1) scaleY(1)' }}>\n                <li><a className='modal-trigger' href=\"#\" onClick={() => onOpenQuestionModal(question)}>View Problem</a></li>\n                <li><a href=\"#!\">Dismiss Flag</a></li>\n                <li><a href=\"#!\">Edit Response</a></li>\n              </ul>\n            </If>\n          </div>\n        </div>\n        <If condition={answerSheetComplete && studentNotes}>\n          <div className=\"comment-block\">\n            <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore?  tincidunt ut laoreet dolore?</p>\n          </div>\n        </If>\n      </li>\n    );\n  }\n};\n\nQuestion.propTypes = {\n  question: PropTypes.object.isRequired,\n  questionDropdownIndex: PropTypes.number,\n  onOpenQuestionModal: PropTypes.func.isRequired,\n  answerSheetComplete: PropTypes.bool.isRequired,\n  questionDropdownOpen: PropTypes.bool.isRequired,\n  handleQuestionDropdownClick: PropTypes.func.isRequired,\n};\n\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}